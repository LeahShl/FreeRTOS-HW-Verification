
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fb18  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000473c  0801fce8  0801fce8  00020ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024424  08024424  00026210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08024424  08024424  00025424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802442c  0802442c  00026210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802442c  0802442c  0002542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024430  08024430  00025430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08024434  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  08024504  000260d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  080245a4  00026170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00022848  20000210  08024644  00026210  2**2
                  ALLOC
 12 ._user_heap_stack 00005000  20022a58  08024644  00026a58  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00026210  2**0
                  CONTENTS, READONLY
 14 .debug_info   000428e6  00000000  00000000  00026240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a865  00000000  00000000  00068b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003058  00000000  00000000  00073390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000025fe  00000000  00000000  000763e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e529  00000000  00000000  000789e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004d473  00000000  00000000  000b6f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001233a8  00000000  00000000  00104382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022772a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ce20  00000000  00000000  00227770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  00234590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801fcd0 	.word	0x0801fcd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0801fcd0 	.word	0x0801fcd0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 ff15 	bl	800246c <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fe24 	bl	8001294 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f001 ff49 	bl	80024f4 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fe14 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fadf 	bl	8004ca8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fc21 	bl	8002f74 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fdac 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000274 	.word	0x20000274
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 f9e7 	bl	8002b60 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd7c 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d4 	.word	0x200002d4
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 f972 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 f98b 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 f96a 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 f983 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 f962 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 f97b 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 f95a 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 f973 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 f952 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 f96b 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 f94a 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 f963 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 f942 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 f95b 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 f93a 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 f953 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 f932 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 f94b 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 f92a 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 f943 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 f922 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 f93b 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 f91a 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 f933 	bl	8002b44 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f01e fa47 	bl	801ed8c <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	0801fde4 	.word	0x0801fde4

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  printf("Starting FreeRTOS...\n");
 8000920:	484f      	ldr	r0, [pc, #316]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 8000922:	f01e faa3 	bl	801ee6c <puts>
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of netconnMutex */
  netconnMutexHandle = osMutexNew(&netconnMutex_attributes);
 8000926:	484f      	ldr	r0, [pc, #316]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 8000928:	f00b f9b0 	bl	800bc8c <osMutexNew>
 800092c:	4603      	mov	r3, r0
 800092e:	4a4e      	ldr	r2, [pc, #312]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 8000930:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000932:	4a4e      	ldr	r2, [pc, #312]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 8000934:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000938:	2010      	movs	r0, #16
 800093a:	f00b fc7f 	bl	800c23c <osMessageQueueNew>
 800093e:	4603      	mov	r3, r0
 8000940:	4a4b      	ldr	r2, [pc, #300]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 8000942:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000944:	4a4b      	ldr	r2, [pc, #300]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 8000946:	2110      	movs	r1, #16
 8000948:	2010      	movs	r0, #16
 800094a:	f00b fc77 	bl	800c23c <osMessageQueueNew>
 800094e:	4603      	mov	r3, r0
 8000950:	4a49      	ldr	r2, [pc, #292]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 8000952:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000954:	4a49      	ldr	r2, [pc, #292]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 8000956:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800095a:	2008      	movs	r0, #8
 800095c:	f00b fc6e 	bl	800c23c <osMessageQueueNew>
 8000960:	4603      	mov	r3, r0
 8000962:	4a47      	ldr	r2, [pc, #284]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 8000964:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 8000966:	4a47      	ldr	r2, [pc, #284]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 8000968:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800096c:	2008      	movs	r0, #8
 800096e:	f00b fc65 	bl	800c23c <osMessageQueueNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a44      	ldr	r2, [pc, #272]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 8000976:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 8000978:	4a44      	ldr	r2, [pc, #272]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 800097a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800097e:	2008      	movs	r0, #8
 8000980:	f00b fc5c 	bl	800c23c <osMessageQueueNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a42      	ldr	r2, [pc, #264]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 800098a:	4a42      	ldr	r2, [pc, #264]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 800098c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000990:	2008      	movs	r0, #8
 8000992:	f00b fc53 	bl	800c23c <osMessageQueueNew>
 8000996:	4603      	mov	r3, r0
 8000998:	4a3f      	ldr	r2, [pc, #252]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 800099a:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 800099c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 800099e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80009a2:	2008      	movs	r0, #8
 80009a4:	f00b fc4a 	bl	800c23c <osMessageQueueNew>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009ac:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009ae:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	483d      	ldr	r0, [pc, #244]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009b4:	f00a ff78 	bl	800b8a8 <osThreadNew>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4a3c      	ldr	r2, [pc, #240]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009bc:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009be:	4a3c      	ldr	r2, [pc, #240]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009c0:	2100      	movs	r1, #0
 80009c2:	483c      	ldr	r0, [pc, #240]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009c4:	f00a ff70 	bl	800b8a8 <osThreadNew>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a3b      	ldr	r2, [pc, #236]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009cc:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009ce:	4a3b      	ldr	r2, [pc, #236]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	483b      	ldr	r0, [pc, #236]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009d4:	f00a ff68 	bl	800b8a8 <osThreadNew>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 80009dc:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009de:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	483a      	ldr	r0, [pc, #232]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 80009e4:	f00a ff60 	bl	800b8a8 <osThreadNew>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a39      	ldr	r2, [pc, #228]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 80009ec:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009ee:	4a39      	ldr	r2, [pc, #228]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4839      	ldr	r0, [pc, #228]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 80009f4:	f00a ff58 	bl	800b8a8 <osThreadNew>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a38      	ldr	r2, [pc, #224]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 80009fc:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009fe:	4a38      	ldr	r2, [pc, #224]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4838      	ldr	r0, [pc, #224]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a04:	f00a ff50 	bl	800b8a8 <osThreadNew>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a37      	ldr	r2, [pc, #220]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a0c:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 8000a0e:	4a37      	ldr	r2, [pc, #220]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a10:	2100      	movs	r1, #0
 8000a12:	4837      	ldr	r0, [pc, #220]	@ (8000af0 <MX_FREERTOS_Init+0x1d4>)
 8000a14:	f00a ff48 	bl	800b8a8 <osThreadNew>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a36      	ldr	r2, [pc, #216]	@ (8000af4 <MX_FREERTOS_Init+0x1d8>)
 8000a1c:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a1e:	4a36      	ldr	r2, [pc, #216]	@ (8000af8 <MX_FREERTOS_Init+0x1dc>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4836      	ldr	r0, [pc, #216]	@ (8000afc <MX_FREERTOS_Init+0x1e0>)
 8000a24:	f00a ff40 	bl	800b8a8 <osThreadNew>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a35      	ldr	r2, [pc, #212]	@ (8000b00 <MX_FREERTOS_Init+0x1e4>)
 8000a2c:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a2e:	4a35      	ldr	r2, [pc, #212]	@ (8000b04 <MX_FREERTOS_Init+0x1e8>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4835      	ldr	r0, [pc, #212]	@ (8000b08 <MX_FREERTOS_Init+0x1ec>)
 8000a34:	f00a ff38 	bl	800b8a8 <osThreadNew>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a34      	ldr	r2, [pc, #208]	@ (8000b0c <MX_FREERTOS_Init+0x1f0>)
 8000a3c:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a3e:	4a34      	ldr	r2, [pc, #208]	@ (8000b10 <MX_FREERTOS_Init+0x1f4>)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4834      	ldr	r0, [pc, #208]	@ (8000b14 <MX_FREERTOS_Init+0x1f8>)
 8000a44:	f00a ff30 	bl	800b8a8 <osThreadNew>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a33      	ldr	r2, [pc, #204]	@ (8000b18 <MX_FREERTOS_Init+0x1fc>)
 8000a4c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of initDoneEvent */
  initDoneEventHandle = osEventFlagsNew(&initDoneEvent_attributes);
 8000a4e:	4833      	ldr	r0, [pc, #204]	@ (8000b1c <MX_FREERTOS_Init+0x200>)
 8000a50:	f00a fffe 	bl	800ba50 <osEventFlagsNew>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a32      	ldr	r2, [pc, #200]	@ (8000b20 <MX_FREERTOS_Init+0x204>)
 8000a58:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	0801fe04 	.word	0x0801fe04
 8000a64:	0802419c 	.word	0x0802419c
 8000a68:	2000033c 	.word	0x2000033c
 8000a6c:	080240f4 	.word	0x080240f4
 8000a70:	20000320 	.word	0x20000320
 8000a74:	0802410c 	.word	0x0802410c
 8000a78:	20000324 	.word	0x20000324
 8000a7c:	08024124 	.word	0x08024124
 8000a80:	20000328 	.word	0x20000328
 8000a84:	0802413c 	.word	0x0802413c
 8000a88:	2000032c 	.word	0x2000032c
 8000a8c:	08024154 	.word	0x08024154
 8000a90:	20000330 	.word	0x20000330
 8000a94:	0802416c 	.word	0x0802416c
 8000a98:	20000334 	.word	0x20000334
 8000a9c:	08024184 	.word	0x08024184
 8000aa0:	20000338 	.word	0x20000338
 8000aa4:	08023f8c 	.word	0x08023f8c
 8000aa8:	08000b25 	.word	0x08000b25
 8000aac:	200002f8 	.word	0x200002f8
 8000ab0:	08023fb0 	.word	0x08023fb0
 8000ab4:	08000b5d 	.word	0x08000b5d
 8000ab8:	200002fc 	.word	0x200002fc
 8000abc:	08023fd4 	.word	0x08023fd4
 8000ac0:	08000ba5 	.word	0x08000ba5
 8000ac4:	20000300 	.word	0x20000300
 8000ac8:	08023ff8 	.word	0x08023ff8
 8000acc:	08000bb9 	.word	0x08000bb9
 8000ad0:	20000304 	.word	0x20000304
 8000ad4:	0802401c 	.word	0x0802401c
 8000ad8:	08000bcd 	.word	0x08000bcd
 8000adc:	20000308 	.word	0x20000308
 8000ae0:	08024040 	.word	0x08024040
 8000ae4:	08000be1 	.word	0x08000be1
 8000ae8:	2000030c 	.word	0x2000030c
 8000aec:	08024064 	.word	0x08024064
 8000af0:	08000bf1 	.word	0x08000bf1
 8000af4:	20000310 	.word	0x20000310
 8000af8:	08024088 	.word	0x08024088
 8000afc:	08000c01 	.word	0x08000c01
 8000b00:	20000314 	.word	0x20000314
 8000b04:	080240ac 	.word	0x080240ac
 8000b08:	08000c11 	.word	0x08000c11
 8000b0c:	20000318 	.word	0x20000318
 8000b10:	080240d0 	.word	0x080240d0
 8000b14:	08000c25 	.word	0x08000c25
 8000b18:	2000031c 	.word	0x2000031c
 8000b1c:	080241ac 	.word	0x080241ac
 8000b20:	20000340 	.word	0x20000340

08000b24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b2c:	f009 ffca 	bl	800aac4 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  UDP_Server_Init();
 8000b30:	f01d fc12 	bl	801e358 <UDP_Server_Init>
  osEventFlagsSet(initDoneEventHandle, 0x01);
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <StartDefaultTask+0x30>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00a ffda 	bl	800baf4 <osEventFlagsSet>
  /* Infinite loop */
  for(;;)
  {
	printf("IN default\n");
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <StartDefaultTask+0x34>)
 8000b42:	f01e f993 	bl	801ee6c <puts>
    osDelay(1000);
 8000b46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b4a:	f00a ff53 	bl	800b9f4 <osDelay>
	printf("IN default\n");
 8000b4e:	bf00      	nop
 8000b50:	e7f6      	b.n	8000b40 <StartDefaultTask+0x1c>
 8000b52:	bf00      	nop
 8000b54:	20000340 	.word	0x20000340
 8000b58:	0801fe1c 	.word	0x0801fe1c

08000b5c <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  printf("Listener waiting for network...\n");
 8000b64:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <StartTaskUdpListener+0x38>)
 8000b66:	f01e f981 	bl	801ee6c <puts>
  osEventFlagsWait(initDoneEventHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <StartTaskUdpListener+0x3c>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b72:	2200      	movs	r2, #0
 8000b74:	2101      	movs	r1, #1
 8000b76:	f00b f813 	bl	800bba0 <osEventFlagsWait>
  printf("Network set...\n");
 8000b7a:	4808      	ldr	r0, [pc, #32]	@ (8000b9c <StartTaskUdpListener+0x40>)
 8000b7c:	f01e f976 	bl	801ee6c <puts>
  printf("Starting UDP Listener...\n");
 8000b80:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <StartTaskUdpListener+0x44>)
 8000b82:	f01e f973 	bl	801ee6c <puts>
  UDP_Listen(); // loops here
 8000b86:	f01d fc27 	bl	801e3d8 <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	0801fe28 	.word	0x0801fe28
 8000b98:	20000340 	.word	0x20000340
 8000b9c:	0801fe48 	.word	0x0801fe48
 8000ba0:	0801fe58 	.word	0x0801fe58

08000ba4 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000bac:	f01d fb18 	bl	801e1e0 <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000bc0:	f01d feb6 	bl	801e930 <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000bd4:	f01d fd22 	bl	801e61c <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000be8:	2001      	movs	r0, #1
 8000bea:	f00a ff03 	bl	800b9f4 <osDelay>
 8000bee:	e7fb      	b.n	8000be8 <StartTaskSpiTest+0x8>

08000bf0 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f00a fefb 	bl	800b9f4 <osDelay>
 8000bfe:	e7fb      	b.n	8000bf8 <StartTaskAdcTest+0x8>

08000c00 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f00a fef3 	bl	800b9f4 <osDelay>
 8000c0e:	e7fb      	b.n	8000c08 <StartTaskTimTest+0x8>

08000c10 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000c18:	f01d fcac 	bl	801e574 <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	printf("inMsg Q size: %lu\n", osMessageQueueGetCount(inMsgQueueHandle));
	printf("outMsg Q size: %lu\n", osMessageQueueGetCount(outMsgQueueHandle));
	printf("--------------------------------------\n");
    osDelay(10000);
    */
	osDelay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f00a fee1 	bl	800b9f4 <osDelay>
 8000c32:	e7fb      	b.n	8000c2c <StartLoggerTask+0x8>

08000c34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3a:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a26      	ldr	r2, [pc, #152]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c40:	f043 0310 	orr.w	r3, r3, #16
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a20      	ldr	r2, [pc, #128]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a14      	ldr	r2, [pc, #80]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_GPIO_Init+0xa4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

}
 8000cca:	bf00      	nop
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d54 <MX_I2C1_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <MX_I2C1_Init+0x7c>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d16:	480e      	ldr	r0, [pc, #56]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d18:	f004 f972 	bl	8005000 <HAL_I2C_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 fab7 	bl	8001294 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d2a:	f006 fb15 	bl	8007358 <HAL_I2CEx_ConfigAnalogFilter>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f000 faae 	bl	8001294 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d3c:	f006 fb57 	bl	80073ee <HAL_I2CEx_ConfigDigitalFilter>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 faa5 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000344 	.word	0x20000344
 8000d54:	40005400 	.word	0x40005400
 8000d58:	20404768 	.word	0x20404768

08000d5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000d62:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd4 <MX_I2C2_Init+0x78>)
 8000d64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000d68:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd8 <MX_I2C2_Init+0x7c>)
 8000d6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000d6e:	2214      	movs	r2, #20
 8000d70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d72:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d96:	480e      	ldr	r0, [pc, #56]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000d98:	f004 f932 	bl	8005000 <HAL_I2C_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000da2:	f000 fa77 	bl	8001294 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4809      	ldr	r0, [pc, #36]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000daa:	f006 fad5 	bl	8007358 <HAL_I2CEx_ConfigAnalogFilter>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000db4:	f000 fa6e 	bl	8001294 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000db8:	2100      	movs	r1, #0
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_I2C2_Init+0x74>)
 8000dbc:	f006 fb17 	bl	80073ee <HAL_I2CEx_ConfigDigitalFilter>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dc6:	f000 fa65 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000398 	.word	0x20000398
 8000dd4:	40005800 	.word	0x40005800
 8000dd8:	20404768 	.word	0x20404768

08000ddc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0ac      	sub	sp, #176	@ 0xb0
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	2284      	movs	r2, #132	@ 0x84
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f01e f925 	bl	801f04c <memset>
  if(i2cHandle->Instance==I2C1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a57      	ldr	r2, [pc, #348]	@ (8000f64 <HAL_I2C_MspInit+0x188>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	f040 80b9 	bne.w	8000f80 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f007 f83f 	bl	8007ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000e28:	f000 fa34 	bl	8001294 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8000f68 <HAL_I2C_MspInit+0x18c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	4a4d      	ldr	r2, [pc, #308]	@ (8000f68 <HAL_I2C_MspInit+0x18c>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e38:	4b4b      	ldr	r3, [pc, #300]	@ (8000f68 <HAL_I2C_MspInit+0x18c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4840      	ldr	r0, [pc, #256]	@ (8000f6c <HAL_I2C_MspInit+0x190>)
 8000e6c:	f003 ff1c 	bl	8004ca8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e70:	4b3d      	ldr	r3, [pc, #244]	@ (8000f68 <HAL_I2C_MspInit+0x18c>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	4a3c      	ldr	r2, [pc, #240]	@ (8000f68 <HAL_I2C_MspInit+0x18c>)
 8000e76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f68 <HAL_I2C_MspInit+0x18c>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000e88:	4b39      	ldr	r3, [pc, #228]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000e8a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f74 <HAL_I2C_MspInit+0x198>)
 8000e8c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e8e:	4b38      	ldr	r3, [pc, #224]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000e90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e96:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b34      	ldr	r3, [pc, #208]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b33      	ldr	r3, [pc, #204]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eaa:	4b31      	ldr	r3, [pc, #196]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000ec8:	4829      	ldr	r0, [pc, #164]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000eca:	f002 f853 	bl	8002f74 <HAL_DMA_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000ed4:	f000 f9de 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a25      	ldr	r2, [pc, #148]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000edc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ede:	4a24      	ldr	r2, [pc, #144]	@ (8000f70 <HAL_I2C_MspInit+0x194>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000ee4:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000ee6:	4a25      	ldr	r2, [pc, #148]	@ (8000f7c <HAL_I2C_MspInit+0x1a0>)
 8000ee8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000eea:	4b23      	ldr	r3, [pc, #140]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000eec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ef0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000ef4:	2240      	movs	r2, #64	@ 0x40
 8000ef6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000efe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000f00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f04:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f18:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f24:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000f26:	f002 f825 	bl	8002f74 <HAL_DMA_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000f30:	f000 f9b0 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a10      	ldr	r2, [pc, #64]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000f38:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f78 <HAL_I2C_MspInit+0x19c>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2105      	movs	r1, #5
 8000f44:	201f      	movs	r0, #31
 8000f46:	f001 fde1 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f4a:	201f      	movs	r0, #31
 8000f4c:	f001 fdfa 	bl	8002b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2105      	movs	r1, #5
 8000f54:	2020      	movs	r0, #32
 8000f56:	f001 fdd9 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f5a:	2020      	movs	r0, #32
 8000f5c:	f001 fdf2 	bl	8002b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f60:	e0be      	b.n	80010e0 <HAL_I2C_MspInit+0x304>
 8000f62:	bf00      	nop
 8000f64:	40005400 	.word	0x40005400
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	200003ec 	.word	0x200003ec
 8000f74:	40026088 	.word	0x40026088
 8000f78:	2000044c 	.word	0x2000044c
 8000f7c:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a58      	ldr	r2, [pc, #352]	@ (80010e8 <HAL_I2C_MspInit+0x30c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	f040 80aa 	bne.w	80010e0 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f98:	f107 0318 	add.w	r3, r7, #24
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f006 ff7f 	bl	8007ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000fa8:	f000 f974 	bl	8001294 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b4f      	ldr	r3, [pc, #316]	@ (80010ec <HAL_I2C_MspInit+0x310>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb0:	4a4e      	ldr	r2, [pc, #312]	@ (80010ec <HAL_I2C_MspInit+0x310>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80010ec <HAL_I2C_MspInit+0x310>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fc4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fcc:	2312      	movs	r3, #18
 8000fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4841      	ldr	r0, [pc, #260]	@ (80010f0 <HAL_I2C_MspInit+0x314>)
 8000fec:	f003 fe5c 	bl	8004ca8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80010ec <HAL_I2C_MspInit+0x310>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	4a3d      	ldr	r2, [pc, #244]	@ (80010ec <HAL_I2C_MspInit+0x310>)
 8000ff6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80010ec <HAL_I2C_MspInit+0x310>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8001008:	4b3a      	ldr	r3, [pc, #232]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 800100a:	4a3b      	ldr	r2, [pc, #236]	@ (80010f8 <HAL_I2C_MspInit+0x31c>)
 800100c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800100e:	4b39      	ldr	r3, [pc, #228]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 8001010:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001014:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001016:	4b37      	ldr	r3, [pc, #220]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800101c:	4b35      	ldr	r3, [pc, #212]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001022:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 8001024:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001028:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800102a:	4b32      	ldr	r3, [pc, #200]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001030:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800103c:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001042:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001048:	482a      	ldr	r0, [pc, #168]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 800104a:	f001 ff93 	bl	8002f74 <HAL_DMA_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8001054:	f000 f91e 	bl	8001294 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a26      	ldr	r2, [pc, #152]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 800105c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800105e:	4a25      	ldr	r2, [pc, #148]	@ (80010f4 <HAL_I2C_MspInit+0x318>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001064:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 8001066:	4a26      	ldr	r2, [pc, #152]	@ (8001100 <HAL_I2C_MspInit+0x324>)
 8001068:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800106a:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 800106c:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001070:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001072:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 8001074:	2240      	movs	r2, #64	@ 0x40
 8001076:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800107e:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 8001080:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001084:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001086:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80010a4:	4815      	ldr	r0, [pc, #84]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 80010a6:	f001 ff65 	bl	8002f74 <HAL_DMA_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 80010b0:	f000 f8f0 	bl	8001294 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a11      	ldr	r2, [pc, #68]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 80010b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80010ba:	4a10      	ldr	r2, [pc, #64]	@ (80010fc <HAL_I2C_MspInit+0x320>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2105      	movs	r1, #5
 80010c4:	2021      	movs	r0, #33	@ 0x21
 80010c6:	f001 fd21 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80010ca:	2021      	movs	r0, #33	@ 0x21
 80010cc:	f001 fd3a 	bl	8002b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2105      	movs	r1, #5
 80010d4:	2022      	movs	r0, #34	@ 0x22
 80010d6:	f001 fd19 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80010da:	2022      	movs	r0, #34	@ 0x22
 80010dc:	f001 fd32 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 80010e0:	bf00      	nop
 80010e2:	37b0      	adds	r7, #176	@ 0xb0
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40005800 	.word	0x40005800
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020400 	.word	0x40020400
 80010f4:	200004ac 	.word	0x200004ac
 80010f8:	40026058 	.word	0x40026058
 80010fc:	2000050c 	.word	0x2000050c
 8001100:	400260b8 	.word	0x400260b8

08001104 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8001110:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <_write+0x3c>)
 8001112:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	b29a      	uxth	r2, r3
 8001118:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	4809      	ldr	r0, [pc, #36]	@ (8001144 <_write+0x40>)
 8001120:	f008 f97c 	bl	800941c <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8001124:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001128:	2201      	movs	r2, #1
 800112a:	6979      	ldr	r1, [r7, #20]
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <_write+0x40>)
 800112e:	f008 f975 	bl	800941c <HAL_UART_Transmit>
	return len + 1;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3301      	adds	r3, #1
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	0801fe74 	.word	0x0801fe74
 8001144:	20000a0c 	.word	0x20000a0c

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f001 f93d 	bl	80023ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f822 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f7ff fd6e 	bl	8000c34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001158:	f7ff fb46 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800115c:	f000 fe4c 	bl	8001df8 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001160:	f7ff fb00 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 8001164:	f000 fde8 	bl	8001d38 <MX_UART4_Init>
  MX_UART5_Init();
 8001168:	f000 fe16 	bl	8001d98 <MX_UART5_Init>
  MX_I2C1_Init();
 800116c:	f7ff fdb6 	bl	8000cdc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001170:	f7ff fdf4 	bl	8000d5c <MX_I2C2_Init>
  MX_SPI1_Init();
 8001174:	f000 f894 	bl	80012a0 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001178:	f000 f8d0 	bl	800131c <MX_SPI4_Init>
  MX_ADC1_Init();
 800117c:	f7ff fa2e 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001180:	f000 fd38 	bl	8001bf4 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001184:	f000 fce8 	bl	8001b58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001188:	f00a fafc 	bl	800b784 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800118c:	f7ff fbc6 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001190:	f00a fb2c 	bl	800b7ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <main+0x4c>

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	@ 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2230      	movs	r2, #48	@ 0x30
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f01d ff50 	bl	801f04c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <SystemClock_Config+0xd0>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	4a29      	ldr	r2, [pc, #164]	@ (8001268 <SystemClock_Config+0xd0>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <SystemClock_Config+0xd0>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	4b25      	ldr	r3, [pc, #148]	@ (800126c <SystemClock_Config+0xd4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a24      	ldr	r2, [pc, #144]	@ (800126c <SystemClock_Config+0xd4>)
 80011da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b22      	ldr	r3, [pc, #136]	@ (800126c <SystemClock_Config+0xd4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2310      	movs	r3, #16
 80011f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001200:	2308      	movs	r3, #8
 8001202:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001204:	23d8      	movs	r3, #216	@ 0xd8
 8001206:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	4618      	mov	r0, r3
 8001216:	f006 f987 	bl	8007528 <HAL_RCC_OscConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001220:	f000 f838 	bl	8001294 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001224:	f006 f930 	bl	8007488 <HAL_PWREx_EnableOverDrive>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800122e:	f000 f831 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	230f      	movs	r3, #15
 8001234:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001236:	2302      	movs	r3, #2
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800123e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001242:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001248:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	2107      	movs	r1, #7
 8001250:	4618      	mov	r0, r3
 8001252:	f006 fc0d 	bl	8007a70 <HAL_RCC_ClockConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800125c:	f000 f81a 	bl	8001294 <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	3750      	adds	r7, #80	@ 0x50
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001282:	f001 f8af 	bl	80023e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40001400 	.word	0x40001400

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <Error_Handler+0x8>

080012a0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001318 <MX_SPI1_Init+0x78>)
 80012a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012b2:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b8:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012ce:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012d6:	2218      	movs	r2, #24
 80012d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012ee:	2207      	movs	r2, #7
 80012f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_SPI1_Init+0x74>)
 80012fa:	2208      	movs	r2, #8
 80012fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_SPI1_Init+0x74>)
 8001300:	f007 f9be 	bl	8008680 <HAL_SPI_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800130a:	f7ff ffc3 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000056c 	.word	0x2000056c
 8001318:	40013000 	.word	0x40013000

0800131c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001320:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <MX_SPI4_Init+0x68>)
 8001322:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <MX_SPI4_Init+0x6c>)
 8001324:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8001326:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <MX_SPI4_Init+0x68>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <MX_SPI4_Init+0x68>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_SPI4_Init+0x68>)
 8001334:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001338:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133a:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <MX_SPI4_Init+0x68>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001340:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <MX_SPI4_Init+0x68>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_SPI4_Init+0x68>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <MX_SPI4_Init+0x68>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001352:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_SPI4_Init+0x68>)
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <MX_SPI4_Init+0x68>)
 800135a:	2200      	movs	r2, #0
 800135c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_SPI4_Init+0x68>)
 8001360:	2207      	movs	r2, #7
 8001362:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001364:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <MX_SPI4_Init+0x68>)
 8001366:	2200      	movs	r2, #0
 8001368:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <MX_SPI4_Init+0x68>)
 800136c:	2200      	movs	r2, #0
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	@ (8001384 <MX_SPI4_Init+0x68>)
 8001372:	f007 f985 	bl	8008680 <HAL_SPI_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 800137c:	f7ff ff8a 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200005d0 	.word	0x200005d0
 8001388:	40013400 	.word	0x40013400

0800138c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	@ 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4aa1      	ldr	r2, [pc, #644]	@ (8001630 <HAL_SPI_MspInit+0x2a4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	f040 80a9 	bne.w	8001502 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 80013b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 80013b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80013bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 80013be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013cc:	4a99      	ldr	r2, [pc, #612]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d4:	4b97      	ldr	r3, [pc, #604]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b94      	ldr	r3, [pc, #592]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e4:	4a93      	ldr	r2, [pc, #588]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ec:	4b91      	ldr	r3, [pc, #580]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013f8:	2370      	movs	r3, #112	@ 0x70
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001408:	2305      	movs	r3, #5
 800140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4889      	ldr	r0, [pc, #548]	@ (8001638 <HAL_SPI_MspInit+0x2ac>)
 8001414:	f003 fc48 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001418:	2320      	movs	r3, #32
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001428:	2305      	movs	r3, #5
 800142a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4882      	ldr	r0, [pc, #520]	@ (800163c <HAL_SPI_MspInit+0x2b0>)
 8001434:	f003 fc38 	bl	8004ca8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8001438:	4b81      	ldr	r3, [pc, #516]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 800143a:	4a82      	ldr	r2, [pc, #520]	@ (8001644 <HAL_SPI_MspInit+0x2b8>)
 800143c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800143e:	4b80      	ldr	r3, [pc, #512]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 8001440:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001444:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001446:	4b7e      	ldr	r3, [pc, #504]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144c:	4b7c      	ldr	r3, [pc, #496]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001452:	4b7b      	ldr	r3, [pc, #492]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 8001454:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001458:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145a:	4b79      	ldr	r3, [pc, #484]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001460:	4b77      	ldr	r3, [pc, #476]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001466:	4b76      	ldr	r3, [pc, #472]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800146c:	4b74      	ldr	r3, [pc, #464]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001472:	4b73      	ldr	r3, [pc, #460]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001478:	4871      	ldr	r0, [pc, #452]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 800147a:	f001 fd7b 	bl	8002f74 <HAL_DMA_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001484:	f7ff ff06 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a6d      	ldr	r2, [pc, #436]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 800148c:	659a      	str	r2, [r3, #88]	@ 0x58
 800148e:	4a6c      	ldr	r2, [pc, #432]	@ (8001640 <HAL_SPI_MspInit+0x2b4>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001494:	4b6c      	ldr	r3, [pc, #432]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 8001496:	4a6d      	ldr	r2, [pc, #436]	@ (800164c <HAL_SPI_MspInit+0x2c0>)
 8001498:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800149a:	4b6b      	ldr	r3, [pc, #428]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 800149c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a2:	4b69      	ldr	r3, [pc, #420]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014a4:	2240      	movs	r2, #64	@ 0x40
 80014a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a8:	4b67      	ldr	r3, [pc, #412]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ae:	4b66      	ldr	r3, [pc, #408]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b6:	4b64      	ldr	r3, [pc, #400]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014bc:	4b62      	ldr	r3, [pc, #392]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014c2:	4b61      	ldr	r3, [pc, #388]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014d4:	485c      	ldr	r0, [pc, #368]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014d6:	f001 fd4d 	bl	8002f74 <HAL_DMA_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80014e0:	f7ff fed8 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a58      	ldr	r2, [pc, #352]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80014ea:	4a57      	ldr	r2, [pc, #348]	@ (8001648 <HAL_SPI_MspInit+0x2bc>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2105      	movs	r1, #5
 80014f4:	2023      	movs	r0, #35	@ 0x23
 80014f6:	f001 fb09 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014fa:	2023      	movs	r0, #35	@ 0x23
 80014fc:	f001 fb22 	bl	8002b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001500:	e091      	b.n	8001626 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a52      	ldr	r2, [pc, #328]	@ (8001650 <HAL_SPI_MspInit+0x2c4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	f040 808c 	bne.w	8001626 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800150e:	4b49      	ldr	r3, [pc, #292]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	4a48      	ldr	r2, [pc, #288]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 8001514:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001518:	6453      	str	r3, [r2, #68]	@ 0x44
 800151a:	4b46      	ldr	r3, [pc, #280]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	4b43      	ldr	r3, [pc, #268]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a42      	ldr	r2, [pc, #264]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b40      	ldr	r3, [pc, #256]	@ (8001634 <HAL_SPI_MspInit+0x2a8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800153e:	2374      	movs	r3, #116	@ 0x74
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800154e:	2305      	movs	r3, #5
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	483e      	ldr	r0, [pc, #248]	@ (8001654 <HAL_SPI_MspInit+0x2c8>)
 800155a:	f003 fba5 	bl	8004ca8 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 800155e:	4b3e      	ldr	r3, [pc, #248]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 8001560:	4a3e      	ldr	r2, [pc, #248]	@ (800165c <HAL_SPI_MspInit+0x2d0>)
 8001562:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001564:	4b3c      	ldr	r3, [pc, #240]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 8001566:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800156a:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156c:	4b3a      	ldr	r3, [pc, #232]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001572:	4b39      	ldr	r3, [pc, #228]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001578:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 800157a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800157e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001580:	4b35      	ldr	r3, [pc, #212]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001586:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800158c:	4b32      	ldr	r3, [pc, #200]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001592:	4b31      	ldr	r3, [pc, #196]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001598:	4b2f      	ldr	r3, [pc, #188]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800159e:	482e      	ldr	r0, [pc, #184]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 80015a0:	f001 fce8 	bl	8002f74 <HAL_DMA_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_SPI_MspInit+0x222>
      Error_Handler();
 80015aa:	f7ff fe73 	bl	8001294 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a29      	ldr	r2, [pc, #164]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 80015b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80015b4:	4a28      	ldr	r2, [pc, #160]	@ (8001658 <HAL_SPI_MspInit+0x2cc>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80015ba:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015bc:	4a29      	ldr	r2, [pc, #164]	@ (8001664 <HAL_SPI_MspInit+0x2d8>)
 80015be:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80015c0:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015c6:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c8:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015ca:	2240      	movs	r2, #64	@ 0x40
 80015cc:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ce:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015d4:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015da:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015dc:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80015fa:	4819      	ldr	r0, [pc, #100]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 80015fc:	f001 fcba 	bl	8002f74 <HAL_DMA_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 8001606:	f7ff fe45 	bl	8001294 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 800160e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001610:	4a13      	ldr	r2, [pc, #76]	@ (8001660 <HAL_SPI_MspInit+0x2d4>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2105      	movs	r1, #5
 800161a:	2054      	movs	r0, #84	@ 0x54
 800161c:	f001 fa76 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001620:	2054      	movs	r0, #84	@ 0x54
 8001622:	f001 fa8f 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3730      	adds	r7, #48	@ 0x30
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40013000 	.word	0x40013000
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400
 8001640:	20000634 	.word	0x20000634
 8001644:	40026440 	.word	0x40026440
 8001648:	20000694 	.word	0x20000694
 800164c:	40026458 	.word	0x40026458
 8001650:	40013400 	.word	0x40013400
 8001654:	40021000 	.word	0x40021000
 8001658:	200006f4 	.word	0x200006f4
 800165c:	40026410 	.word	0x40026410
 8001660:	20000754 	.word	0x20000754
 8001664:	40026428 	.word	0x40026428

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	4a10      	ldr	r2, [pc, #64]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	@ 0x40
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <HAL_MspInit+0x4c>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001690:	6453      	str	r3, [r2, #68]	@ 0x44
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	210f      	movs	r1, #15
 80016a2:	f06f 0001 	mvn.w	r0, #1
 80016a6:	f001 fa31 	bl	8002b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08e      	sub	sp, #56	@ 0x38
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80016c8:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <HAL_InitTick+0xe0>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	4a32      	ldr	r2, [pc, #200]	@ (8001798 <HAL_InitTick+0xe0>)
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d4:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <HAL_InitTick+0xe0>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016e0:	f107 0210 	add.w	r2, r7, #16
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f006 fba6 	bl	8007e3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d103      	bne.n	8001702 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016fa:	f006 fb77 	bl	8007dec <HAL_RCC_GetPCLK1Freq>
 80016fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8001700:	e004      	b.n	800170c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001702:	f006 fb73 	bl	8007dec <HAL_RCC_GetPCLK1Freq>
 8001706:	4603      	mov	r3, r0
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800170c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <HAL_InitTick+0xe4>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	0c9b      	lsrs	r3, r3, #18
 8001716:	3b01      	subs	r3, #1
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800171a:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <HAL_InitTick+0xe8>)
 800171c:	4a21      	ldr	r2, [pc, #132]	@ (80017a4 <HAL_InitTick+0xec>)
 800171e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001720:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <HAL_InitTick+0xe8>)
 8001722:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001726:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001728:	4a1d      	ldr	r2, [pc, #116]	@ (80017a0 <HAL_InitTick+0xe8>)
 800172a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800172e:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <HAL_InitTick+0xe8>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <HAL_InitTick+0xe8>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <HAL_InitTick+0xe8>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001740:	4817      	ldr	r0, [pc, #92]	@ (80017a0 <HAL_InitTick+0xe8>)
 8001742:	f007 f968 	bl	8008a16 <HAL_TIM_Base_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800174c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11b      	bne.n	800178c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001754:	4812      	ldr	r0, [pc, #72]	@ (80017a0 <HAL_InitTick+0xe8>)
 8001756:	f007 f9b5 	bl	8008ac4 <HAL_TIM_Base_Start_IT>
 800175a:	4603      	mov	r3, r0
 800175c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001760:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001764:	2b00      	cmp	r3, #0
 8001766:	d111      	bne.n	800178c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001768:	2037      	movs	r0, #55	@ 0x37
 800176a:	f001 f9eb 	bl	8002b44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d808      	bhi.n	8001786 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	2037      	movs	r0, #55	@ 0x37
 800177a:	f001 f9c7 	bl	8002b0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <HAL_InitTick+0xf0>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e002      	b.n	800178c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800178c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001790:	4618      	mov	r0, r3
 8001792:	3738      	adds	r7, #56	@ 0x38
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	431bde83 	.word	0x431bde83
 80017a0:	200007b4 	.word	0x200007b4
 80017a4:	40001400 	.word	0x40001400
 80017a8:	20000004 	.word	0x20000004

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <NMI_Handler+0x4>

080017b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <MemManage_Handler+0x4>

080017c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <DMA1_Stream0_IRQHandler+0x10>)
 80017ea:	f001 fd63 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000af4 	.word	0x20000af4

080017f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <DMA1_Stream1_IRQHandler+0x10>)
 80017fe:	f001 fd59 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000089c 	.word	0x2000089c

0800180c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <DMA1_Stream2_IRQHandler+0x10>)
 8001812:	f001 fd4f 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000a94 	.word	0x20000a94

08001820 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <DMA1_Stream3_IRQHandler+0x10>)
 8001826:	f001 fd45 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200004ac 	.word	0x200004ac

08001834 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <DMA1_Stream5_IRQHandler+0x10>)
 800183a:	f001 fd3b 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200003ec 	.word	0x200003ec

08001848 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <DMA1_Stream6_IRQHandler+0x10>)
 800184e:	f001 fd31 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000044c 	.word	0x2000044c

0800185c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <I2C1_EV_IRQHandler+0x10>)
 8001862:	f004 f80f 	bl	8005884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000344 	.word	0x20000344

08001870 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <I2C1_ER_IRQHandler+0x10>)
 8001876:	f004 f81f 	bl	80058b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000344 	.word	0x20000344

08001884 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <I2C2_EV_IRQHandler+0x10>)
 800188a:	f003 fffb 	bl	8005884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000398 	.word	0x20000398

08001898 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <I2C2_ER_IRQHandler+0x10>)
 800189e:	f004 f80b 	bl	80058b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000398 	.word	0x20000398

080018ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80018b0:	4802      	ldr	r0, [pc, #8]	@ (80018bc <SPI1_IRQHandler+0x10>)
 80018b2:	f006 ff91 	bl	80087d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000056c 	.word	0x2000056c

080018c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <USART3_IRQHandler+0x10>)
 80018c6:	f007 fed5 	bl	8009674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000a0c 	.word	0x20000a0c

080018d4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80018d8:	4802      	ldr	r0, [pc, #8]	@ (80018e4 <DMA1_Stream7_IRQHandler+0x10>)
 80018da:	f001 fceb 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000050c 	.word	0x2000050c

080018e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018ec:	4802      	ldr	r0, [pc, #8]	@ (80018f8 <UART4_IRQHandler+0x10>)
 80018ee:	f007 fec1 	bl	8009674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200008fc 	.word	0x200008fc

080018fc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <UART5_IRQHandler+0x10>)
 8001902:	f007 feb7 	bl	8009674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000984 	.word	0x20000984

08001910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <TIM6_DAC_IRQHandler+0x10>)
 8001916:	f007 f94d 	bl	8008bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000850 	.word	0x20000850

08001924 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <TIM7_IRQHandler+0x10>)
 800192a:	f007 f943 	bl	8008bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200007b4 	.word	0x200007b4

08001938 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <DMA2_Stream0_IRQHandler+0x10>)
 800193e:	f001 fcb9 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200006f4 	.word	0x200006f4

0800194c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <DMA2_Stream1_IRQHandler+0x10>)
 8001952:	f001 fcaf 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000754 	.word	0x20000754

08001960 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001964:	4802      	ldr	r0, [pc, #8]	@ (8001970 <DMA2_Stream2_IRQHandler+0x10>)
 8001966:	f001 fca5 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000634 	.word	0x20000634

08001974 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <DMA2_Stream3_IRQHandler+0x10>)
 800197a:	f001 fc9b 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000694 	.word	0x20000694

08001988 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <DMA2_Stream4_IRQHandler+0x10>)
 800198e:	f001 fc91 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000274 	.word	0x20000274

0800199c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <ETH_IRQHandler+0x10>)
 80019a2:	f002 fa99 	bl	8003ed8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000555c 	.word	0x2000555c

080019b0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <ETH_WKUP_IRQHandler+0x10>)
 80019b6:	f002 fa8f 	bl	8003ed8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000555c 	.word	0x2000555c

080019c4 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <SPI4_IRQHandler+0x10>)
 80019ca:	f006 ff05 	bl	80087d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200005d0 	.word	0x200005d0

080019d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return 1;
 80019dc:	2301      	movs	r3, #1
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_kill>:

int _kill(int pid, int sig)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f2:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <_kill+0x20>)
 80019f4:	2216      	movs	r2, #22
 80019f6:	601a      	str	r2, [r3, #0]
  return -1;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20022a48 	.word	0x20022a48

08001a0c <_exit>:

void _exit (int status)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe5 	bl	80019e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a1e:	bf00      	nop
 8001a20:	e7fd      	b.n	8001a1e <_exit+0x12>

08001a22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e00a      	b.n	8001a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a34:	f3af 8000 	nop.w
 8001a38:	4601      	mov	r1, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	b2ca      	uxtb	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf0      	blt.n	8001a34 <_read+0x12>
  }

  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a84:	605a      	str	r2, [r3, #4]
  return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_isatty>:

int _isatty(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	@ (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d205      	bcs.n	8001b00 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <_sbrk+0x6c>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b00:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b06:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a06      	ldr	r2, [pc, #24]	@ (8001b28 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	20050000 	.word	0x20050000
 8001b24:	00002000 	.word	0x00002000
 8001b28:	20000800 	.word	0x20000800
 8001b2c:	20022a58 	.word	0x20022a58
 8001b30:	20022a48 	.word	0x20022a48

08001b34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <SystemInit+0x20>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3e:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <SystemInit+0x20>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b76:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <MX_TIM2_Init+0x98>)
 8001b78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <MX_TIM2_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <MX_TIM2_Init+0x98>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <MX_TIM2_Init+0x98>)
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <MX_TIM2_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b98:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <MX_TIM2_Init+0x98>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b9e:	4814      	ldr	r0, [pc, #80]	@ (8001bf0 <MX_TIM2_Init+0x98>)
 8001ba0:	f006 ff39 	bl	8008a16 <HAL_TIM_Base_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001baa:	f7ff fb73 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480d      	ldr	r0, [pc, #52]	@ (8001bf0 <MX_TIM2_Init+0x98>)
 8001bbc:	f007 f902 	bl	8008dc4 <HAL_TIM_ConfigClockSource>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bc6:	f7ff fb65 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4806      	ldr	r0, [pc, #24]	@ (8001bf0 <MX_TIM2_Init+0x98>)
 8001bd8:	f007 fb26 	bl	8009228 <HAL_TIMEx_MasterConfigSynchronization>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001be2:	f7ff fb57 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000804 	.word	0x20000804

08001bf4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c06:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <MX_TIM6_Init+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c0c:	f240 221b 	movw	r2, #539	@ 0x21b
 8001c10:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c1a:	2263      	movs	r2, #99	@ 0x63
 8001c1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c24:	480c      	ldr	r0, [pc, #48]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c26:	f006 fef6 	bl	8008a16 <HAL_TIM_Base_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c30:	f7ff fb30 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c34:	2320      	movs	r3, #32
 8001c36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <MX_TIM6_Init+0x64>)
 8001c42:	f007 faf1 	bl	8009228 <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c4c:	f7ff fb22 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000850 	.word	0x20000850
 8001c5c:	40001000 	.word	0x40001000

08001c60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c70:	d10c      	bne.n	8001c8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <HAL_TIM_Base_MspInit+0xc8>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	4a2c      	ldr	r2, [pc, #176]	@ (8001d28 <HAL_TIM_Base_MspInit+0xc8>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d28 <HAL_TIM_Base_MspInit+0xc8>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c8a:	e049      	b.n	8001d20 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a26      	ldr	r2, [pc, #152]	@ (8001d2c <HAL_TIM_Base_MspInit+0xcc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d144      	bne.n	8001d20 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c96:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <HAL_TIM_Base_MspInit+0xc8>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	4a23      	ldr	r2, [pc, #140]	@ (8001d28 <HAL_TIM_Base_MspInit+0xc8>)
 8001c9c:	f043 0310 	orr.w	r3, r3, #16
 8001ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca2:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <HAL_TIM_Base_MspInit+0xc8>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001cb0:	4a20      	ldr	r2, [pc, #128]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd4>)
 8001cb2:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001cb6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001cba:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001cca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cce:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cd6:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001cda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cde:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001ce8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cec:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001cf4:	480e      	ldr	r0, [pc, #56]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001cf6:	f001 f93d 	bl	8002f74 <HAL_DMA_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001d00:	f7ff fac8 	bl	8001294 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001d08:	621a      	str	r2, [r3, #32]
 8001d0a:	4a09      	ldr	r2, [pc, #36]	@ (8001d30 <HAL_TIM_Base_MspInit+0xd0>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2105      	movs	r1, #5
 8001d14:	2036      	movs	r0, #54	@ 0x36
 8001d16:	f000 fef9 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d1a:	2036      	movs	r0, #54	@ 0x36
 8001d1c:	f000 ff12 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40001000 	.word	0x40001000
 8001d30:	2000089c 	.word	0x2000089c
 8001d34:	40026028 	.word	0x40026028

08001d38 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d3e:	4a15      	ldr	r2, [pc, #84]	@ (8001d94 <MX_UART4_Init+0x5c>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d42:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_UART4_Init+0x58>)
 8001d7c:	f007 fb00 	bl	8009380 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d86:	f7ff fa85 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200008fc 	.word	0x200008fc
 8001d94:	40004c00 	.word	0x40004c00

08001d98 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001d9e:	4a15      	ldr	r2, [pc, #84]	@ (8001df4 <MX_UART5_Init+0x5c>)
 8001da0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001da2:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001daa:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <MX_UART5_Init+0x58>)
 8001ddc:	f007 fad0 	bl	8009380 <HAL_UART_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001de6:	f7ff fa55 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000984 	.word	0x20000984
 8001df4:	40005000 	.word	0x40005000

08001df8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001dfe:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <MX_USART3_UART_Init+0x5c>)
 8001e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e02:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e1e:	220c      	movs	r2, #12
 8001e20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e3c:	f007 faa0 	bl	8009380 <HAL_UART_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e46:	f7ff fa25 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000a0c 	.word	0x20000a0c
 8001e54:	40004800 	.word	0x40004800

08001e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0b0      	sub	sp, #192	@ 0xc0
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e74:	2284      	movs	r2, #132	@ 0x84
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f01d f8e7 	bl	801f04c <memset>
  if(uartHandle->Instance==UART4)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4ab0      	ldr	r2, [pc, #704]	@ (8002144 <HAL_UART_MspInit+0x2ec>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d173      	bne.n	8001f70 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e96:	4618      	mov	r0, r3
 8001e98:	f006 f802 	bl	8007ea0 <HAL_RCCEx_PeriphCLKConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ea2:	f7ff f9f7 	bl	8001294 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ea6:	4ba8      	ldr	r3, [pc, #672]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	4aa7      	ldr	r2, [pc, #668]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001eac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb2:	4ba5      	ldr	r3, [pc, #660]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	4ba2      	ldr	r3, [pc, #648]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4aa1      	ldr	r2, [pc, #644]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b9f      	ldr	r3, [pc, #636]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	623b      	str	r3, [r7, #32]
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ed6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001eda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001efa:	4619      	mov	r1, r3
 8001efc:	4893      	ldr	r0, [pc, #588]	@ (800214c <HAL_UART_MspInit+0x2f4>)
 8001efe:	f002 fed3 	bl	8004ca8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001f02:	4b93      	ldr	r3, [pc, #588]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f04:	4a93      	ldr	r2, [pc, #588]	@ (8002154 <HAL_UART_MspInit+0x2fc>)
 8001f06:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001f08:	4b91      	ldr	r3, [pc, #580]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f0a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f0e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f10:	4b8f      	ldr	r3, [pc, #572]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f16:	4b8e      	ldr	r3, [pc, #568]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f22:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f24:	4b8a      	ldr	r3, [pc, #552]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2a:	4b89      	ldr	r3, [pc, #548]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001f30:	4b87      	ldr	r3, [pc, #540]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f36:	4b86      	ldr	r3, [pc, #536]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f3c:	4b84      	ldr	r3, [pc, #528]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001f42:	4883      	ldr	r0, [pc, #524]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f44:	f001 f816 	bl	8002f74 <HAL_DMA_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001f4e:	f7ff f9a1 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a7e      	ldr	r2, [pc, #504]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f56:	675a      	str	r2, [r3, #116]	@ 0x74
 8001f58:	4a7d      	ldr	r2, [pc, #500]	@ (8002150 <HAL_UART_MspInit+0x2f8>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	2034      	movs	r0, #52	@ 0x34
 8001f64:	f000 fdd2 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f68:	2034      	movs	r0, #52	@ 0x34
 8001f6a:	f000 fdeb 	bl	8002b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f6e:	e0e4      	b.n	800213a <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a78      	ldr	r2, [pc, #480]	@ (8002158 <HAL_UART_MspInit+0x300>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	f040 8095 	bne.w	80020a6 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f80:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f005 ff88 	bl	8007ea0 <HAL_RCCEx_PeriphCLKConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001f96:	f7ff f97d 	bl	8001294 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a6a      	ldr	r2, [pc, #424]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001fa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa6:	4b68      	ldr	r3, [pc, #416]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fae:	61fb      	str	r3, [r7, #28]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb2:	4b65      	ldr	r3, [pc, #404]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a64      	ldr	r2, [pc, #400]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b62      	ldr	r3, [pc, #392]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fca:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a5e      	ldr	r2, [pc, #376]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002002:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002006:	4619      	mov	r1, r3
 8002008:	4850      	ldr	r0, [pc, #320]	@ (800214c <HAL_UART_MspInit+0x2f4>)
 800200a:	f002 fe4d 	bl	8004ca8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800200e:	2304      	movs	r3, #4
 8002010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002026:	2308      	movs	r3, #8
 8002028:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002030:	4619      	mov	r1, r3
 8002032:	484a      	ldr	r0, [pc, #296]	@ (800215c <HAL_UART_MspInit+0x304>)
 8002034:	f002 fe38 	bl	8004ca8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002038:	4b49      	ldr	r3, [pc, #292]	@ (8002160 <HAL_UART_MspInit+0x308>)
 800203a:	4a4a      	ldr	r2, [pc, #296]	@ (8002164 <HAL_UART_MspInit+0x30c>)
 800203c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800203e:	4b48      	ldr	r3, [pc, #288]	@ (8002160 <HAL_UART_MspInit+0x308>)
 8002040:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002044:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002046:	4b46      	ldr	r3, [pc, #280]	@ (8002160 <HAL_UART_MspInit+0x308>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800204c:	4b44      	ldr	r3, [pc, #272]	@ (8002160 <HAL_UART_MspInit+0x308>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002052:	4b43      	ldr	r3, [pc, #268]	@ (8002160 <HAL_UART_MspInit+0x308>)
 8002054:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002058:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800205a:	4b41      	ldr	r3, [pc, #260]	@ (8002160 <HAL_UART_MspInit+0x308>)
 800205c:	2200      	movs	r2, #0
 800205e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002060:	4b3f      	ldr	r3, [pc, #252]	@ (8002160 <HAL_UART_MspInit+0x308>)
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002066:	4b3e      	ldr	r3, [pc, #248]	@ (8002160 <HAL_UART_MspInit+0x308>)
 8002068:	2200      	movs	r2, #0
 800206a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800206c:	4b3c      	ldr	r3, [pc, #240]	@ (8002160 <HAL_UART_MspInit+0x308>)
 800206e:	2200      	movs	r2, #0
 8002070:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002072:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <HAL_UART_MspInit+0x308>)
 8002074:	2200      	movs	r2, #0
 8002076:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002078:	4839      	ldr	r0, [pc, #228]	@ (8002160 <HAL_UART_MspInit+0x308>)
 800207a:	f000 ff7b 	bl	8002f74 <HAL_DMA_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8002084:	f7ff f906 	bl	8001294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a35      	ldr	r2, [pc, #212]	@ (8002160 <HAL_UART_MspInit+0x308>)
 800208c:	675a      	str	r2, [r3, #116]	@ 0x74
 800208e:	4a34      	ldr	r2, [pc, #208]	@ (8002160 <HAL_UART_MspInit+0x308>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	2105      	movs	r1, #5
 8002098:	2035      	movs	r0, #53	@ 0x35
 800209a:	f000 fd37 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800209e:	2035      	movs	r0, #53	@ 0x35
 80020a0:	f000 fd50 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 80020a4:	e049      	b.n	800213a <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002168 <HAL_UART_MspInit+0x310>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d144      	bne.n	800213a <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020be:	4618      	mov	r0, r3
 80020c0:	f005 feee 	bl	8007ea0 <HAL_RCCEx_PeriphCLKConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_UART_MspInit+0x276>
      Error_Handler();
 80020ca:	f7ff f8e3 	bl	8001294 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020da:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e6:	4b18      	ldr	r3, [pc, #96]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	4a17      	ldr	r2, [pc, #92]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <HAL_UART_MspInit+0x2f0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002118:	2307      	movs	r3, #7
 800211a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002122:	4619      	mov	r1, r3
 8002124:	480d      	ldr	r0, [pc, #52]	@ (800215c <HAL_UART_MspInit+0x304>)
 8002126:	f002 fdbf 	bl	8004ca8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2105      	movs	r1, #5
 800212e:	2027      	movs	r0, #39	@ 0x27
 8002130:	f000 fcec 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002134:	2027      	movs	r0, #39	@ 0x27
 8002136:	f000 fd05 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	37c0      	adds	r7, #192	@ 0xc0
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40004c00 	.word	0x40004c00
 8002148:	40023800 	.word	0x40023800
 800214c:	40020800 	.word	0x40020800
 8002150:	20000a94 	.word	0x20000a94
 8002154:	40026040 	.word	0x40026040
 8002158:	40005000 	.word	0x40005000
 800215c:	40020c00 	.word	0x40020c00
 8002160:	20000af4 	.word	0x20000af4
 8002164:	40026010 	.word	0x40026010
 8002168:	40004800 	.word	0x40004800

0800216c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800216c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002170:	f7ff fce0 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002174:	480c      	ldr	r0, [pc, #48]	@ (80021a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002176:	490d      	ldr	r1, [pc, #52]	@ (80021ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800218c:	4c0a      	ldr	r4, [pc, #40]	@ (80021b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800219a:	f01c ffa5 	bl	801f0e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800219e:	f7fe ffd3 	bl	8001148 <main>
  bx  lr    
 80021a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80021b0:	08024434 	.word	0x08024434
  ldr r2, =_sbss
 80021b4:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80021b8:	20022a58 	.word	0x20022a58

080021bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC_IRQHandler>

080021be <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <LAN8742_RegisterBusIO+0x28>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <LAN8742_RegisterBusIO+0x28>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <LAN8742_RegisterBusIO+0x28>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ea:	e014      	b.n	8002216 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d139      	bne.n	80022b2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e01c      	b.n	8002292 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f107 020c 	add.w	r2, r7, #12
 8002260:	2112      	movs	r1, #18
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	4798      	blx	r3
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	da03      	bge.n	8002274 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800226c:	f06f 0304 	mvn.w	r3, #4
 8002270:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002272:	e00b      	b.n	800228c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	429a      	cmp	r2, r3
 800227e:	d105      	bne.n	800228c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
         break;
 800228a:	e005      	b.n	8002298 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3301      	adds	r3, #1
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b1f      	cmp	r3, #31
 8002296:	d9df      	bls.n	8002258 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b1f      	cmp	r3, #31
 800229e:	d902      	bls.n	80022a6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80022a0:	f06f 0302 	mvn.w	r3, #2
 80022a4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80022b2:	693b      	ldr	r3, [r7, #16]
 }
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6810      	ldr	r0, [r2, #0]
 80022d0:	f107 020c 	add.w	r2, r7, #12
 80022d4:	2101      	movs	r1, #1
 80022d6:	4798      	blx	r3
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da02      	bge.n	80022e4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022de:	f06f 0304 	mvn.w	r3, #4
 80022e2:	e06e      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6810      	ldr	r0, [r2, #0]
 80022ec:	f107 020c 	add.w	r2, r7, #12
 80022f0:	2101      	movs	r1, #1
 80022f2:	4798      	blx	r3
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da02      	bge.n	8002300 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022fa:	f06f 0304 	mvn.w	r3, #4
 80022fe:	e060      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800230a:	2301      	movs	r3, #1
 800230c:	e059      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6810      	ldr	r0, [r2, #0]
 8002316:	f107 020c 	add.w	r2, r7, #12
 800231a:	2100      	movs	r1, #0
 800231c:	4798      	blx	r3
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	da02      	bge.n	800232a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002324:	f06f 0304 	mvn.w	r3, #4
 8002328:	e04b      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11b      	bne.n	800236c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <LAN8742_GetLinkState+0x90>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002348:	2302      	movs	r3, #2
 800234a:	e03a      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002356:	2303      	movs	r3, #3
 8002358:	e033      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002364:	2304      	movs	r3, #4
 8002366:	e02c      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002368:	2305      	movs	r3, #5
 800236a:	e02a      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6810      	ldr	r0, [r2, #0]
 8002374:	f107 020c 	add.w	r2, r7, #12
 8002378:	211f      	movs	r1, #31
 800237a:	4798      	blx	r3
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	da02      	bge.n	8002388 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002382:	f06f 0304 	mvn.w	r3, #4
 8002386:	e01c      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002392:	2306      	movs	r3, #6
 8002394:	e015      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 031c 	and.w	r3, r3, #28
 800239c:	2b18      	cmp	r3, #24
 800239e:	d101      	bne.n	80023a4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80023a0:	2302      	movs	r3, #2
 80023a2:	e00e      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 031c 	and.w	r3, r3, #28
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d101      	bne.n	80023b2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e007      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 031c 	and.w	r3, r3, #28
 80023b8:	2b14      	cmp	r3, #20
 80023ba:	d101      	bne.n	80023c0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80023bc:	2304      	movs	r3, #4
 80023be:	e000      	b.n	80023c2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80023c0:	2305      	movs	r3, #5
    }
  }
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ce:	2003      	movs	r0, #3
 80023d0:	f000 fb91 	bl	8002af6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d4:	200f      	movs	r0, #15
 80023d6:	f7ff f96f 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023da:	f7ff f945 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_IncTick+0x20>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_IncTick+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <HAL_IncTick+0x24>)
 80023f6:	6013      	str	r3, [r2, #0]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000008 	.word	0x20000008
 8002408:	20000b54 	.word	0x20000b54

0800240c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <HAL_GetTick+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000b54 	.word	0x20000b54

08002424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff ffee 	bl	800240c <HAL_GetTick>
 8002430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800243c:	d005      	beq.n	800244a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <HAL_Delay+0x44>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800244a:	bf00      	nop
 800244c:	f7ff ffde 	bl	800240c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d8f7      	bhi.n	800244c <HAL_Delay+0x28>
  {
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000008 	.word	0x20000008

0800246c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e031      	b.n	80024e6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe f8f8 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ae:	4b10      	ldr	r3, [pc, #64]	@ (80024f0 <HAL_ADC_Init+0x84>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	f043 0202 	orr.w	r2, r3, #2
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f974 	bl	80027a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	f043 0201 	orr.w	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80024d6:	e001      	b.n	80024dc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	ffffeefd 	.word	0xffffeefd

080024f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1c>
 800250c:	2302      	movs	r3, #2
 800250e:	e13a      	b.n	8002786 <HAL_ADC_ConfigChannel+0x292>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b09      	cmp	r3, #9
 800251e:	d93a      	bls.n	8002596 <HAL_ADC_ConfigChannel+0xa2>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002528:	d035      	beq.n	8002596 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68d9      	ldr	r1, [r3, #12]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	3b1e      	subs	r3, #30
 8002540:	2207      	movs	r2, #7
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43da      	mvns	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	400a      	ands	r2, r1
 800254e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a8f      	ldr	r2, [pc, #572]	@ (8002794 <HAL_ADC_ConfigChannel+0x2a0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10a      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68d9      	ldr	r1, [r3, #12]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	061a      	lsls	r2, r3, #24
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800256e:	e039      	b.n	80025e4 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68d9      	ldr	r1, [r3, #12]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	4603      	mov	r3, r0
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4403      	add	r3, r0
 8002588:	3b1e      	subs	r3, #30
 800258a:	409a      	lsls	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002594:	e026      	b.n	80025e4 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6919      	ldr	r1, [r3, #16]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2207      	movs	r2, #7
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43da      	mvns	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	400a      	ands	r2, r1
 80025bc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6919      	ldr	r1, [r3, #16]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	4603      	mov	r3, r0
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4403      	add	r3, r0
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	409a      	lsls	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d824      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	3b05      	subs	r3, #5
 80025fe:	221f      	movs	r2, #31
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43da      	mvns	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	400a      	ands	r2, r1
 800260c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	4618      	mov	r0, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3b05      	subs	r3, #5
 8002628:	fa00 f203 	lsl.w	r2, r0, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	635a      	str	r2, [r3, #52]	@ 0x34
 8002634:	e04c      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d824      	bhi.n	8002688 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b23      	subs	r3, #35	@ 0x23
 8002650:	221f      	movs	r2, #31
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	400a      	ands	r2, r1
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	4618      	mov	r0, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	3b23      	subs	r3, #35	@ 0x23
 800267a:	fa00 f203 	lsl.w	r2, r0, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	631a      	str	r2, [r3, #48]	@ 0x30
 8002686:	e023      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	3b41      	subs	r3, #65	@ 0x41
 800269a:	221f      	movs	r2, #31
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43da      	mvns	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	400a      	ands	r2, r1
 80026a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	3b41      	subs	r3, #65	@ 0x41
 80026c4:	fa00 f203 	lsl.w	r2, r0, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a30      	ldr	r2, [pc, #192]	@ (8002798 <HAL_ADC_ConfigChannel+0x2a4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d10a      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1fc>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026e2:	d105      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80026e4:	4b2d      	ldr	r3, [pc, #180]	@ (800279c <HAL_ADC_ConfigChannel+0x2a8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a2c      	ldr	r2, [pc, #176]	@ (800279c <HAL_ADC_ConfigChannel+0x2a8>)
 80026ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80026ee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a28      	ldr	r2, [pc, #160]	@ (8002798 <HAL_ADC_ConfigChannel+0x2a4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d10f      	bne.n	800271a <HAL_ADC_ConfigChannel+0x226>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b12      	cmp	r3, #18
 8002700:	d10b      	bne.n	800271a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002702:	4b26      	ldr	r3, [pc, #152]	@ (800279c <HAL_ADC_ConfigChannel+0x2a8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4a25      	ldr	r2, [pc, #148]	@ (800279c <HAL_ADC_ConfigChannel+0x2a8>)
 8002708:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800270c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800270e:	4b23      	ldr	r3, [pc, #140]	@ (800279c <HAL_ADC_ConfigChannel+0x2a8>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a22      	ldr	r2, [pc, #136]	@ (800279c <HAL_ADC_ConfigChannel+0x2a8>)
 8002714:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002718:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1e      	ldr	r2, [pc, #120]	@ (8002798 <HAL_ADC_ConfigChannel+0x2a4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d12b      	bne.n	800277c <HAL_ADC_ConfigChannel+0x288>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <HAL_ADC_ConfigChannel+0x2a0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d003      	beq.n	8002736 <HAL_ADC_ConfigChannel+0x242>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b11      	cmp	r3, #17
 8002734:	d122      	bne.n	800277c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002736:	4b19      	ldr	r3, [pc, #100]	@ (800279c <HAL_ADC_ConfigChannel+0x2a8>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a18      	ldr	r2, [pc, #96]	@ (800279c <HAL_ADC_ConfigChannel+0x2a8>)
 800273c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002740:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002742:	4b16      	ldr	r3, [pc, #88]	@ (800279c <HAL_ADC_ConfigChannel+0x2a8>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a15      	ldr	r2, [pc, #84]	@ (800279c <HAL_ADC_ConfigChannel+0x2a8>)
 8002748:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800274c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a10      	ldr	r2, [pc, #64]	@ (8002794 <HAL_ADC_ConfigChannel+0x2a0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d111      	bne.n	800277c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2ac>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a11      	ldr	r2, [pc, #68]	@ (80027a4 <HAL_ADC_ConfigChannel+0x2b0>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	0c9a      	lsrs	r2, r3, #18
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800276e:	e002      	b.n	8002776 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3b01      	subs	r3, #1
 8002774:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f9      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	10000012 	.word	0x10000012
 8002798:	40012000 	.word	0x40012000
 800279c:	40012300 	.word	0x40012300
 80027a0:	20000000 	.word	0x20000000
 80027a4:	431bde83 	.word	0x431bde83

080027a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80027b0:	4b78      	ldr	r3, [pc, #480]	@ (8002994 <ADC_Init+0x1ec>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a77      	ldr	r2, [pc, #476]	@ (8002994 <ADC_Init+0x1ec>)
 80027b6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80027ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80027bc:	4b75      	ldr	r3, [pc, #468]	@ (8002994 <ADC_Init+0x1ec>)
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4973      	ldr	r1, [pc, #460]	@ (8002994 <ADC_Init+0x1ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	021a      	lsls	r2, r3, #8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800281e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	4a58      	ldr	r2, [pc, #352]	@ (8002998 <ADC_Init+0x1f0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800284a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6899      	ldr	r1, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800286c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	e00f      	b.n	80028a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002890:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0202 	bic.w	r2, r2, #2
 80028b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6899      	ldr	r1, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	005a      	lsls	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	3b01      	subs	r3, #1
 80028fc:	035a      	lsls	r2, r3, #13
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e007      	b.n	8002918 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002916:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002926:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	3b01      	subs	r3, #1
 8002934:	051a      	lsls	r2, r3, #20
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800294c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800295a:	025a      	lsls	r2, r3, #9
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	029a      	lsls	r2, r3, #10
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40012300 	.word	0x40012300
 8002998:	0f000001 	.word	0x0f000001

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0b      	ldr	r3, [pc, #44]	@ (80029dc <__NVIC_SetPriorityGrouping+0x40>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ca:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <__NVIC_SetPriorityGrouping+0x40>)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	60d3      	str	r3, [r2, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00
 80029e0:	05fa0000 	.word	0x05fa0000

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	@ (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	@ (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	@ (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	@ 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	@ 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff4c 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1e:	f7ff ff61 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f7ff ffb1 	bl	8002a90 <NVIC_EncodePriority>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff80 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff54 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e054      	b.n	8002c1c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7f5b      	ldrb	r3, [r3, #29]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fd fe10 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	791b      	ldrb	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <HAL_CRC_Init+0xc4>)
 8002b9c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0218 	bic.w	r2, r2, #24
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	e00c      	b.n	8002bca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6899      	ldr	r1, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f94c 	bl	8002e58 <HAL_CRCEx_Polynomial_Set>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e028      	b.n	8002c1c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	795b      	ldrb	r3, [r3, #5]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bda:	611a      	str	r2, [r3, #16]
 8002bdc:	e004      	b.n	8002be8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6912      	ldr	r2, [r2, #16]
 8002be6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	04c11db7 	.word	0x04c11db7

08002c28 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d006      	beq.n	8002c64 <HAL_CRC_Calculate+0x3c>
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d829      	bhi.n	8002cae <HAL_CRC_Calculate+0x86>
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d019      	beq.n	8002c92 <HAL_CRC_Calculate+0x6a>
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d01e      	beq.n	8002ca0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002c62:	e024      	b.n	8002cae <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e00a      	b.n	8002c80 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	441a      	add	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d3f0      	bcc.n	8002c6a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	613b      	str	r3, [r7, #16]
      break;
 8002c90:	e00e      	b.n	8002cb0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f812 	bl	8002cc0 <CRC_Handle_8>
 8002c9c:	6138      	str	r0, [r7, #16]
      break;
 8002c9e:	e007      	b.n	8002cb0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f89d 	bl	8002de4 <CRC_Handle_16>
 8002caa:	6138      	str	r0, [r7, #16]
      break;
 8002cac:	e000      	b.n	8002cb0 <HAL_CRC_Calculate+0x88>
      break;
 8002cae:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002cb6:	693b      	ldr	r3, [r7, #16]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	@ 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	e023      	b.n	8002d1a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4413      	add	r3, r2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	440b      	add	r3, r1
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002cec:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	440b      	add	r3, r1
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002cfc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	3303      	adds	r3, #3
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	440b      	add	r3, r1
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002d10:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d3d6      	bcc.n	8002cd2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d051      	beq.n	8002dd2 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d108      	bne.n	8002d4a <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	4413      	add	r3, r2
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	7013      	strb	r3, [r2, #0]
 8002d48:	e043      	b.n	8002dd2 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d118      	bne.n	8002d86 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	3301      	adds	r3, #1
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	440b      	add	r3, r1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	8b7a      	ldrh	r2, [r7, #26]
 8002d82:	801a      	strh	r2, [r3, #0]
 8002d84:	e025      	b.n	8002dd2 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d120      	bne.n	8002dd2 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	4413      	add	r3, r2
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	b21a      	sxth	r2, r3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	3301      	adds	r3, #1
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	440b      	add	r3, r1
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b21b      	sxth	r3, r3
 8002dae:	4313      	orrs	r3, r2
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	8b7a      	ldrh	r2, [r7, #26]
 8002dbe:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	4413      	add	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3724      	adds	r7, #36	@ 0x24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e013      	b.n	8002e1e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	041a      	lsls	r2, r3, #16
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	3302      	adds	r3, #2
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	440b      	add	r3, r1
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d3e6      	bcc.n	8002df6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	4413      	add	r3, r2
 8002e40:	881a      	ldrh	r2, [r3, #0]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e68:	231f      	movs	r3, #31
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
 8002e7a:	e063      	b.n	8002f44 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e7c:	bf00      	nop
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	613a      	str	r2, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_CRCEx_Polynomial_Set+0x44>
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b18      	cmp	r3, #24
 8002ea0:	d846      	bhi.n	8002f30 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002f37 	.word	0x08002f37
 8002eac:	08002f31 	.word	0x08002f31
 8002eb0:	08002f31 	.word	0x08002f31
 8002eb4:	08002f31 	.word	0x08002f31
 8002eb8:	08002f31 	.word	0x08002f31
 8002ebc:	08002f31 	.word	0x08002f31
 8002ec0:	08002f31 	.word	0x08002f31
 8002ec4:	08002f31 	.word	0x08002f31
 8002ec8:	08002f25 	.word	0x08002f25
 8002ecc:	08002f31 	.word	0x08002f31
 8002ed0:	08002f31 	.word	0x08002f31
 8002ed4:	08002f31 	.word	0x08002f31
 8002ed8:	08002f31 	.word	0x08002f31
 8002edc:	08002f31 	.word	0x08002f31
 8002ee0:	08002f31 	.word	0x08002f31
 8002ee4:	08002f31 	.word	0x08002f31
 8002ee8:	08002f19 	.word	0x08002f19
 8002eec:	08002f31 	.word	0x08002f31
 8002ef0:	08002f31 	.word	0x08002f31
 8002ef4:	08002f31 	.word	0x08002f31
 8002ef8:	08002f31 	.word	0x08002f31
 8002efc:	08002f31 	.word	0x08002f31
 8002f00:	08002f31 	.word	0x08002f31
 8002f04:	08002f31 	.word	0x08002f31
 8002f08:	08002f0d 	.word	0x08002f0d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d913      	bls.n	8002f3a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f16:	e010      	b.n	8002f3a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b07      	cmp	r3, #7
 8002f1c:	d90f      	bls.n	8002f3e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f22:	e00c      	b.n	8002f3e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	d90b      	bls.n	8002f42 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f2e:	e008      	b.n	8002f42 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	75fb      	strb	r3, [r7, #23]
        break;
 8002f34:	e006      	b.n	8002f44 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f36:	bf00      	nop
 8002f38:	e004      	b.n	8002f44 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f42:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10d      	bne.n	8002f66 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 0118 	bic.w	r1, r3, #24
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff fa44 	bl	800240c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e099      	b.n	80030c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb0:	e00f      	b.n	8002fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fb2:	f7ff fa2b 	bl	800240c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d908      	bls.n	8002fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2203      	movs	r2, #3
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e078      	b.n	80030c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e8      	bne.n	8002fb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4b38      	ldr	r3, [pc, #224]	@ (80030cc <HAL_DMA_Init+0x158>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	2b04      	cmp	r3, #4
 800302a:	d107      	bne.n	800303c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003034:	4313      	orrs	r3, r2
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f023 0307 	bic.w	r3, r3, #7
 8003052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	2b04      	cmp	r3, #4
 8003064:	d117      	bne.n	8003096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fb23 	bl	80036c4 <DMA_CheckFifoParam>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2240      	movs	r2, #64	@ 0x40
 8003088:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003092:	2301      	movs	r3, #1
 8003094:	e016      	b.n	80030c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fada 	bl	8003658 <DMA_CalcBaseAndBitshift>
 80030a4:	4603      	mov	r3, r0
 80030a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	223f      	movs	r2, #63	@ 0x3f
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	f010803f 	.word	0xf010803f

080030d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_DMA_Start_IT+0x26>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e048      	b.n	8003188 <HAL_DMA_Start_IT+0xb8>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d137      	bne.n	800317a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fa6c 	bl	80035fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003128:	223f      	movs	r2, #63	@ 0x3f
 800312a:	409a      	lsls	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0216 	orr.w	r2, r2, #22
 800313e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800314e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0208 	orr.w	r2, r2, #8
 8003166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e005      	b.n	8003186 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003182:	2302      	movs	r3, #2
 8003184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003186:	7dfb      	ldrb	r3, [r7, #23]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800319e:	f7ff f935 	bl	800240c <HAL_GetTick>
 80031a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d008      	beq.n	80031c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2280      	movs	r2, #128	@ 0x80
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e052      	b.n	8003268 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0216 	bic.w	r2, r2, #22
 80031d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_DMA_Abort+0x62>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0208 	bic.w	r2, r2, #8
 8003200:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003212:	e013      	b.n	800323c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003214:	f7ff f8fa 	bl	800240c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b05      	cmp	r3, #5
 8003220:	d90c      	bls.n	800323c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e015      	b.n	8003268 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e4      	bne.n	8003214 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324e:	223f      	movs	r2, #63	@ 0x3f
 8003250:	409a      	lsls	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d004      	beq.n	800328e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2280      	movs	r2, #128	@ 0x80
 8003288:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e00c      	b.n	80032a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2205      	movs	r2, #5
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80032c0:	4b8e      	ldr	r3, [pc, #568]	@ (80034fc <HAL_DMA_IRQHandler+0x248>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003500 <HAL_DMA_IRQHandler+0x24c>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0a9b      	lsrs	r3, r3, #10
 80032cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032de:	2208      	movs	r2, #8
 80032e0:	409a      	lsls	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01a      	beq.n	8003320 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d013      	beq.n	8003320 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0204 	bic.w	r2, r2, #4
 8003306:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	2208      	movs	r2, #8
 800330e:	409a      	lsls	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	2201      	movs	r2, #1
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d012      	beq.n	8003356 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	2201      	movs	r2, #1
 8003344:	409a      	lsls	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334e:	f043 0202 	orr.w	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	2204      	movs	r2, #4
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00b      	beq.n	800338c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	2204      	movs	r2, #4
 800337a:	409a      	lsls	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	2210      	movs	r2, #16
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d043      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d03c      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ae:	2210      	movs	r2, #16
 80033b0:	409a      	lsls	r2, r3
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d018      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d024      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
 80033e2:	e01f      	b.n	8003424 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
 80033f4:	e016      	b.n	8003424 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0208 	bic.w	r2, r2, #8
 8003412:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	2220      	movs	r2, #32
 800342a:	409a      	lsls	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 808f 	beq.w	8003554 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8087 	beq.w	8003554 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344a:	2220      	movs	r2, #32
 800344c:	409a      	lsls	r2, r3
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b05      	cmp	r3, #5
 800345c:	d136      	bne.n	80034cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0216 	bic.w	r2, r2, #22
 800346c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800347c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <HAL_DMA_IRQHandler+0x1da>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0208 	bic.w	r2, r2, #8
 800349c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a2:	223f      	movs	r2, #63	@ 0x3f
 80034a4:	409a      	lsls	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d07e      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
        }
        return;
 80034ca:	e079      	b.n	80035c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d031      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e02c      	b.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
 80034fa:	bf00      	nop
 80034fc:	20000000 	.word	0x20000000
 8003500:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
 8003514:	e01e      	b.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10f      	bne.n	8003544 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0210 	bic.w	r2, r2, #16
 8003532:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003558:	2b00      	cmp	r3, #0
 800355a:	d032      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d022      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2205      	movs	r2, #5
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3301      	adds	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	429a      	cmp	r2, r3
 800358a:	d307      	bcc.n	800359c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f2      	bne.n	8003580 <HAL_DMA_IRQHandler+0x2cc>
 800359a:	e000      	b.n	800359e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800359c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
 80035be:	e000      	b.n	80035c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035c0:	bf00      	nop
    }
  }
}
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035d6:	b2db      	uxtb	r3, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003618:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b40      	cmp	r3, #64	@ 0x40
 8003628:	d108      	bne.n	800363c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800363a:	e007      	b.n	800364c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3b10      	subs	r3, #16
 8003668:	4a13      	ldr	r2, [pc, #76]	@ (80036b8 <DMA_CalcBaseAndBitshift+0x60>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003672:	4a12      	ldr	r2, [pc, #72]	@ (80036bc <DMA_CalcBaseAndBitshift+0x64>)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d908      	bls.n	8003698 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <DMA_CalcBaseAndBitshift+0x68>)
 800368e:	4013      	ands	r3, r2
 8003690:	1d1a      	adds	r2, r3, #4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	659a      	str	r2, [r3, #88]	@ 0x58
 8003696:	e006      	b.n	80036a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <DMA_CalcBaseAndBitshift+0x68>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	aaaaaaab 	.word	0xaaaaaaab
 80036bc:	080241d4 	.word	0x080241d4
 80036c0:	fffffc00 	.word	0xfffffc00

080036c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11f      	bne.n	800371e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d856      	bhi.n	8003792 <DMA_CheckFifoParam+0xce>
 80036e4:	a201      	add	r2, pc, #4	@ (adr r2, 80036ec <DMA_CheckFifoParam+0x28>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	080036fd 	.word	0x080036fd
 80036f0:	0800370f 	.word	0x0800370f
 80036f4:	080036fd 	.word	0x080036fd
 80036f8:	08003793 	.word	0x08003793
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d046      	beq.n	8003796 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370c:	e043      	b.n	8003796 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003712:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003716:	d140      	bne.n	800379a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371c:	e03d      	b.n	800379a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003726:	d121      	bne.n	800376c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d837      	bhi.n	800379e <DMA_CheckFifoParam+0xda>
 800372e:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <DMA_CheckFifoParam+0x70>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	08003745 	.word	0x08003745
 8003738:	0800374b 	.word	0x0800374b
 800373c:	08003745 	.word	0x08003745
 8003740:	0800375d 	.word	0x0800375d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      break;
 8003748:	e030      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d025      	beq.n	80037a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375a:	e022      	b.n	80037a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003764:	d11f      	bne.n	80037a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800376a:	e01c      	b.n	80037a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d903      	bls.n	800377a <DMA_CheckFifoParam+0xb6>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d003      	beq.n	8003780 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003778:	e018      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      break;
 800377e:	e015      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00e      	beq.n	80037aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e00b      	b.n	80037aa <DMA_CheckFifoParam+0xe6>
      break;
 8003792:	bf00      	nop
 8003794:	e00a      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;
 8003796:	bf00      	nop
 8003798:	e008      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;
 800379a:	bf00      	nop
 800379c:	e006      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
 80037a0:	e004      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
 80037a4:	e002      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;   
 80037a6:	bf00      	nop
 80037a8:	e000      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;
 80037aa:	bf00      	nop
    }
  } 
  
  return status; 
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop

080037bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e086      	b.n	80038dc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f007 fda7 	bl	800b334 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e6:	4b3f      	ldr	r3, [pc, #252]	@ (80038e4 <HAL_ETH_Init+0x128>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	4a3e      	ldr	r2, [pc, #248]	@ (80038e4 <HAL_ETH_Init+0x128>)
 80037ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f2:	4b3c      	ldr	r3, [pc, #240]	@ (80038e4 <HAL_ETH_Init+0x128>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80037fe:	4b3a      	ldr	r3, [pc, #232]	@ (80038e8 <HAL_ETH_Init+0x12c>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4a39      	ldr	r2, [pc, #228]	@ (80038e8 <HAL_ETH_Init+0x12c>)
 8003804:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003808:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800380a:	4b37      	ldr	r3, [pc, #220]	@ (80038e8 <HAL_ETH_Init+0x12c>)
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4935      	ldr	r1, [pc, #212]	@ (80038e8 <HAL_ETH_Init+0x12c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003818:	4b33      	ldr	r3, [pc, #204]	@ (80038e8 <HAL_ETH_Init+0x12c>)
 800381a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003832:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003834:	f7fe fdea 	bl	800240c <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800383a:	e011      	b.n	8003860 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800383c:	f7fe fde6 	bl	800240c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800384a:	d909      	bls.n	8003860 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2204      	movs	r2, #4
 8003850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	22e0      	movs	r2, #224	@ 0xe0
 8003858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e03d      	b.n	80038dc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e4      	bne.n	800383c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 ff5c 	bl	8004730 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f001 f807 	bl	800488c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f001 f85d 	bl	800493e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	461a      	mov	r2, r3
 800388a:	2100      	movs	r1, #0
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 ffc5 	bl	800481c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80038a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <HAL_ETH_Init+0x130>)
 80038b0:	430b      	orrs	r3, r1
 80038b2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80038c6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2210      	movs	r2, #16
 80038d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40013800 	.word	0x40013800
 80038ec:	00020060 	.word	0x00020060

080038f0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d15f      	bne.n	80039c2 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2204      	movs	r2, #4
 8003914:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f9f6 	bl	8003d08 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003924:	2001      	movs	r0, #1
 8003926:	f7fe fd7d 	bl	8002424 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003944:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003948:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003960:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fd80 	bl	8004468 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0208 	orr.w	r2, r2, #8
 8003976:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003980:	2001      	movs	r0, #1
 8003982:	f7fe fd4f 	bl	8002424 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0204 	orr.w	r2, r2, #4
 800399c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039a6:	69d9      	ldr	r1, [r3, #28]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <HAL_ETH_Start_IT+0xdc>)
 80039ae:	430b      	orrs	r3, r1
 80039b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039b4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2240      	movs	r2, #64	@ 0x40
 80039ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	0001a0c1 	.word	0x0001a0c1

080039d0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039de:	2b40      	cmp	r3, #64	@ 0x40
 80039e0:	d16e      	bne.n	8003ac0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039f2:	69d9      	ldr	r1, [r3, #28]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b34      	ldr	r3, [pc, #208]	@ (8003acc <HAL_ETH_Stop_IT+0xfc>)
 80039fa:	400b      	ands	r3, r1
 80039fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a00:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a18:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	f023 0302 	bic.w	r3, r3, #2
 8003a2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a30:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0204 	bic.w	r2, r2, #4
 8003a40:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f7fe fcea 	bl	8002424 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fd05 	bl	8004468 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0208 	bic.w	r2, r2, #8
 8003a6c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f7fe fcd4 	bl	8002424 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e00e      	b.n	8003aa8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	3212      	adds	r2, #18
 8003a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a94:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d9ed      	bls.n	8003a8a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2210      	movs	r2, #16
 8003ab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e000      	b.n	8003ac2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
  }
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	fffe5f3e 	.word	0xfffe5f3e

08003ad0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e045      	b.n	8003b80 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003afa:	2b40      	cmp	r3, #64	@ 0x40
 8003afc:	d13f      	bne.n	8003b7e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003b06:	2201      	movs	r2, #1
 8003b08:	6839      	ldr	r1, [r7, #0]
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 ff86 	bl	8004a1c <ETH_Prepare_Tx_Descriptors>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1c:	f043 0202 	orr.w	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e02a      	b.n	8003b80 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b2a:	f3bf 8f4f 	dsb	sy
}
 8003b2e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d904      	bls.n	8003b4c <HAL_ETH_Transmit_IT+0x7c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b46:	1f1a      	subs	r2, r3, #4
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b66:	461a      	mov	r2, r3
 8003b68:	2304      	movs	r3, #4
 8003b6a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b74:	461a      	mov	r2, r3
 8003b76:	2300      	movs	r3, #0
 8003b78:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
  }
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d109      	bne.n	8003bb4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba6:	f043 0201 	orr.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0a4      	b.n	8003cfe <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bba:	2b40      	cmp	r3, #64	@ 0x40
 8003bbc:	d001      	beq.n	8003bc2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e09d      	b.n	8003cfe <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	3212      	adds	r2, #18
 8003bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bd8:	f1c3 0304 	rsb	r3, r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003bde:	e066      	b.n	8003cae <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	699a      	ldr	r2, [r3, #24]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d103      	bne.n	8003c10 <HAL_ETH_ReadData+0x88>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d03c      	beq.n	8003c8a <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003c32:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f007 fd37 	bl	800b6dc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	441a      	add	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2200      	movs	r2, #0
 8003c88:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d902      	bls.n	8003c9c <HAL_ETH_ReadData+0x114>
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3b04      	subs	r3, #4
 8003c9a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	3212      	adds	r2, #18
 8003ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3301      	adds	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	db06      	blt.n	8003cc4 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d202      	bcs.n	8003cc4 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8003cbe:	7cfb      	ldrb	r3, [r7, #19]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d08d      	beq.n	8003be0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	441a      	add	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f815 	bl	8003d08 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d108      	bne.n	8003cfc <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e000      	b.n	8003cfe <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003d14:	2301      	movs	r3, #1
 8003d16:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d1c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	3212      	adds	r2, #18
 8003d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d28:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d2e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003d30:	e042      	b.n	8003db8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d112      	bne.n	8003d60 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f007 fc9c 	bl	800b67c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	74fb      	strb	r3, [r7, #19]
 8003d4e:	e007      	b.n	8003d60 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	461a      	mov	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d028      	beq.n	8003db8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	4b26      	ldr	r3, [pc, #152]	@ (8003e0c <ETH_UpdateDescriptor+0x104>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6053      	str	r3, [r2, #4]
 8003d7a:	e005      	b.n	8003d88 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	3301      	adds	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d902      	bls.n	8003da6 <ETH_UpdateDescriptor+0x9e>
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	3b04      	subs	r3, #4
 8003da4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	3212      	adds	r2, #18
 8003dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db0:	617b      	str	r3, [r7, #20]
      desccount--;
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <ETH_UpdateDescriptor+0xbc>
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1b6      	bne.n	8003d32 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d01a      	beq.n	8003e04 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3303      	adds	r3, #3
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003dd8:	f3bf 8f5f 	dmb	sy
}
 8003ddc:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6919      	ldr	r1, [r3, #16]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	18ca      	adds	r2, r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df6:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003e04:	bf00      	nop
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	80004000 	.word	0x80004000

08003e10 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3318      	adds	r3, #24
 8003e1c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e22:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003e2e:	e047      	b.n	8003ec0 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d902      	bls.n	8003e5c <HAL_ETH_ReleaseTxPacket+0x4c>
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	3b04      	subs	r3, #4
 8003e5a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003e60:	7bbb      	ldrb	r3, [r7, #14]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02c      	beq.n	8003ec0 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68d9      	ldr	r1, [r3, #12]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	db1f      	blt.n	8003ebc <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	3304      	adds	r3, #4
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f007 fc69 	bl	800b760 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	3304      	adds	r3, #4
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	2200      	movs	r2, #0
 8003e9a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d902      	bls.n	8003eae <HAL_ETH_ReleaseTxPacket+0x9e>
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003eba:	e001      	b.n	8003ec0 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_ETH_ReleaseTxPacket+0xbc>
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1b1      	bne.n	8003e30 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003f00:	4b4b      	ldr	r3, [pc, #300]	@ (8004030 <HAL_ETH_IRQHandler+0x158>)
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00e      	beq.n	8003f2e <HAL_ETH_IRQHandler+0x56>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b43      	ldr	r3, [pc, #268]	@ (8004034 <HAL_ETH_IRQHandler+0x15c>)
 8003f26:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f006 ff43 	bl	800adb4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00f      	beq.n	8003f58 <HAL_ETH_IRQHandler+0x80>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003f50:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f006 ff3e 	bl	800add4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d042      	beq.n	8003fe8 <HAL_ETH_IRQHandler+0x110>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d03d      	beq.n	8003fe8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f72:	f043 0208 	orr.w	r2, r3, #8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d01a      	beq.n	8003fbc <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	4b29      	ldr	r3, [pc, #164]	@ (8004038 <HAL_ETH_IRQHandler+0x160>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003fac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fb0:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	22e0      	movs	r2, #224	@ 0xe0
 8003fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003fba:	e012      	b.n	8003fe2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003fca:	4013      	ands	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003fe0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f006 ff06 	bl	800adf4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00e      	beq.n	8004010 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f81a 	bl	800403c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800401a:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <HAL_ETH_IRQHandler+0x158>)
 800401c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004020:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f814 	bl	8004050 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004028:	bf00      	nop
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40013c00 	.word	0x40013c00
 8004034:	00010040 	.word	0x00010040
 8004038:	007e2000 	.word	0x007e2000

0800403c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 031c 	and.w	r3, r3, #28
 8004080:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	02db      	lsls	r3, r3, #11
 8004086:	b29b      	uxth	r3, r3
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0302 	bic.w	r3, r3, #2
 80040a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80040b4:	f7fe f9aa 	bl	800240c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040ba:	e00d      	b.n	80040d8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80040bc:	f7fe f9a6 	bl	800240c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ca:	d301      	bcc.n	80040d0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e010      	b.n	80040f2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1ec      	bne.n	80040bc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f003 031c 	and.w	r3, r3, #28
 8004116:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	02db      	lsls	r3, r3, #11
 800411c:	b29b      	uxth	r3, r3
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	019b      	lsls	r3, r3, #6
 8004128:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f043 0302 	orr.w	r3, r3, #2
 8004138:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004154:	f7fe f95a 	bl	800240c <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800415a:	e00d      	b.n	8004178 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800415c:	f7fe f956 	bl	800240c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416a:	d301      	bcc.n	8004170 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e009      	b.n	8004184 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ec      	bne.n	800415c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0e6      	b.n	800436e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bf14      	ite	ne
 80041ae:	2301      	movne	r3, #1
 80041b0:	2300      	moveq	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800420a:	2b00      	cmp	r3, #0
 800420c:	bf0c      	ite	eq
 800420e:	2301      	moveq	r3, #1
 8004210:	2300      	movne	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004224:	2b00      	cmp	r3, #0
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800425a:	2b00      	cmp	r3, #0
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	bf14      	ite	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2300      	moveq	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf14      	ite	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	2300      	moveq	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004306:	2b00      	cmp	r3, #0
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	b29a      	uxth	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00b      	b.n	80043a6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004394:	2b10      	cmp	r3, #16
 8004396:	d105      	bne.n	80043a4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f88a 	bl	80044b4 <ETH_SetMACConfig>

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 031c 	bic.w	r3, r3, #28
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80043c8:	f003 fd04 	bl	8007dd4 <HAL_RCC_GetHCLKFreq>
 80043cc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <HAL_ETH_SetMDIOClockRange+0x74>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d804      	bhi.n	80043e0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f043 0308 	orr.w	r3, r3, #8
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e019      	b.n	8004414 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4a11      	ldr	r2, [pc, #68]	@ (8004428 <HAL_ETH_SetMDIOClockRange+0x78>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d204      	bcs.n	80043f2 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f043 030c 	orr.w	r3, r3, #12
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e010      	b.n	8004414 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4a0d      	ldr	r2, [pc, #52]	@ (800442c <HAL_ETH_SetMDIOClockRange+0x7c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d90c      	bls.n	8004414 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004430 <HAL_ETH_SetMDIOClockRange+0x80>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d804      	bhi.n	800440c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f043 0304 	orr.w	r3, r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e003      	b.n	8004414 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f043 0310 	orr.w	r3, r3, #16
 8004412:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	611a      	str	r2, [r3, #16]
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	02160ebf 	.word	0x02160ebf
 8004428:	03938700 	.word	0x03938700
 800442c:	05f5e0ff 	.word	0x05f5e0ff
 8004430:	08f0d17f 	.word	0x08f0d17f

08004434 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004486:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800448a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004498:	2001      	movs	r0, #1
 800449a:	f7fd ffc3 	bl	8002424 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044a8:	6193      	str	r3, [r2, #24]
}
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4b53      	ldr	r3, [pc, #332]	@ (8004618 <ETH_SetMACConfig+0x164>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	7b9b      	ldrb	r3, [r3, #14]
 80044d2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	7c12      	ldrb	r2, [r2, #16]
 80044d8:	2a00      	cmp	r2, #0
 80044da:	d102      	bne.n	80044e2 <ETH_SetMACConfig+0x2e>
 80044dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044e0:	e000      	b.n	80044e4 <ETH_SetMACConfig+0x30>
 80044e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80044e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	7c52      	ldrb	r2, [r2, #17]
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	d102      	bne.n	80044f4 <ETH_SetMACConfig+0x40>
 80044ee:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80044f2:	e000      	b.n	80044f6 <ETH_SetMACConfig+0x42>
 80044f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80044fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	7fdb      	ldrb	r3, [r3, #31]
 8004502:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004504:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800450a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	7f92      	ldrb	r2, [r2, #30]
 8004510:	2a00      	cmp	r2, #0
 8004512:	d102      	bne.n	800451a <ETH_SetMACConfig+0x66>
 8004514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004518:	e000      	b.n	800451c <ETH_SetMACConfig+0x68>
 800451a:	2200      	movs	r2, #0
                        macconf->Speed |
 800451c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	7f1b      	ldrb	r3, [r3, #28]
 8004522:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004524:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800452a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	791b      	ldrb	r3, [r3, #4]
 8004530:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004532:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	f892 2020 	ldrb.w	r2, [r2, #32]
 800453a:	2a00      	cmp	r2, #0
 800453c:	d102      	bne.n	8004544 <ETH_SetMACConfig+0x90>
 800453e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004542:	e000      	b.n	8004546 <ETH_SetMACConfig+0x92>
 8004544:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004546:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	7bdb      	ldrb	r3, [r3, #15]
 800454c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800454e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004554:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800455c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800455e:	4313      	orrs	r3, r2
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004576:	2001      	movs	r0, #1
 8004578:	f7fd ff54 	bl	8002424 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004592:	4013      	ands	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80045a2:	2a00      	cmp	r2, #0
 80045a4:	d101      	bne.n	80045aa <ETH_SetMACConfig+0xf6>
 80045a6:	2280      	movs	r2, #128	@ 0x80
 80045a8:	e000      	b.n	80045ac <ETH_SetMACConfig+0xf8>
 80045aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80045b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80045ba:	2a01      	cmp	r2, #1
 80045bc:	d101      	bne.n	80045c2 <ETH_SetMACConfig+0x10e>
 80045be:	2208      	movs	r2, #8
 80045c0:	e000      	b.n	80045c4 <ETH_SetMACConfig+0x110>
 80045c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80045c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80045cc:	2a01      	cmp	r2, #1
 80045ce:	d101      	bne.n	80045d4 <ETH_SetMACConfig+0x120>
 80045d0:	2204      	movs	r2, #4
 80045d2:	e000      	b.n	80045d6 <ETH_SetMACConfig+0x122>
 80045d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80045d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80045de:	2a01      	cmp	r2, #1
 80045e0:	d101      	bne.n	80045e6 <ETH_SetMACConfig+0x132>
 80045e2:	2202      	movs	r2, #2
 80045e4:	e000      	b.n	80045e8 <ETH_SetMACConfig+0x134>
 80045e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045e8:	4313      	orrs	r3, r2
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004600:	2001      	movs	r0, #1
 8004602:	f7fd ff0f 	bl	8002424 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	619a      	str	r2, [r3, #24]
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	fd20810f 	.word	0xfd20810f

0800461c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4b3d      	ldr	r3, [pc, #244]	@ (800472c <ETH_SetDMAConfig+0x110>)
 8004636:	4013      	ands	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	7b1b      	ldrb	r3, [r3, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <ETH_SetDMAConfig+0x2c>
 8004642:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004646:	e000      	b.n	800464a <ETH_SetDMAConfig+0x2e>
 8004648:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	7b5b      	ldrb	r3, [r3, #13]
 800464e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004650:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	7f52      	ldrb	r2, [r2, #29]
 8004656:	2a00      	cmp	r2, #0
 8004658:	d102      	bne.n	8004660 <ETH_SetDMAConfig+0x44>
 800465a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800465e:	e000      	b.n	8004662 <ETH_SetDMAConfig+0x46>
 8004660:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004662:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	7b9b      	ldrb	r3, [r3, #14]
 8004668:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800466a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004670:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	7f1b      	ldrb	r3, [r3, #28]
 8004676:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004678:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	7f9b      	ldrb	r3, [r3, #30]
 800467e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004680:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004686:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800468e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004690:	4313      	orrs	r3, r2
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a0:	461a      	mov	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80046b2:	2001      	movs	r0, #1
 80046b4:	f7fd feb6 	bl	8002424 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c0:	461a      	mov	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	791b      	ldrb	r3, [r3, #4]
 80046ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80046d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80046dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80046e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004702:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004710:	2001      	movs	r0, #1
 8004712:	f7fd fe87 	bl	8002424 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6013      	str	r3, [r2, #0]
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	f8de3f23 	.word	0xf8de3f23

08004730 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b0a6      	sub	sp, #152	@ 0x98
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004744:	2300      	movs	r3, #0
 8004746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004748:	2300      	movs	r3, #0
 800474a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004766:	2300      	movs	r3, #0
 8004768:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800476c:	2300      	movs	r3, #0
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004772:	2300      	movs	r3, #0
 8004774:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004776:	2300      	movs	r3, #0
 8004778:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800477c:	2300      	movs	r3, #0
 800477e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004780:	2300      	movs	r3, #0
 8004782:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004786:	2300      	movs	r3, #0
 8004788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800478c:	2300      	movs	r3, #0
 800478e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004792:	2300      	movs	r3, #0
 8004794:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004798:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800479c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800479e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80047aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fe7f 	bl	80044b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80047b6:	2301      	movs	r3, #1
 80047b8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80047d8:	2300      	movs	r3, #0
 80047da:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80047e2:	2301      	movs	r3, #1
 80047e4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80047e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80047ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80047f0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80047f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047f6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004806:	f107 0308 	add.w	r3, r7, #8
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff05 	bl	800461c <ETH_SetDMAConfig>
}
 8004812:	bf00      	nop
 8004814:	3798      	adds	r7, #152	@ 0x98
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3305      	adds	r3, #5
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	3204      	adds	r2, #4
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <ETH_MACAddressConfig+0x68>)
 800483e:	4413      	add	r3, r2
 8004840:	461a      	mov	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3303      	adds	r3, #3
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	061a      	lsls	r2, r3, #24
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3302      	adds	r3, #2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3301      	adds	r3, #1
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	4313      	orrs	r3, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <ETH_MACAddressConfig+0x6c>)
 800486e:	4413      	add	r3, r2
 8004870:	461a      	mov	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	6013      	str	r3, [r2, #0]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40028040 	.word	0x40028040
 8004888:	40028044 	.word	0x40028044

0800488c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e03e      	b.n	8004918 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68d9      	ldr	r1, [r3, #12]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	440b      	add	r3, r1
 80048aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2200      	movs	r2, #0
 80048b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2200      	movs	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2200      	movs	r2, #0
 80048c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	3206      	adds	r2, #6
 80048cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d80c      	bhi.n	80048fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68d9      	ldr	r1, [r3, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	440b      	add	r3, r1
 80048f4:	461a      	mov	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	e004      	b.n	8004906 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	461a      	mov	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d9bd      	bls.n	800489a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004930:	611a      	str	r2, [r3, #16]
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e048      	b.n	80049de <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6919      	ldr	r1, [r3, #16]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	440b      	add	r3, r1
 800495c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2200      	movs	r2, #0
 8004968:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2200      	movs	r2, #0
 8004974:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004988:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	3212      	adds	r2, #18
 80049aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d80c      	bhi.n	80049ce <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6919      	ldr	r1, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	440b      	add	r3, r1
 80049c6:	461a      	mov	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	60da      	str	r2, [r3, #12]
 80049cc:	e004      	b.n	80049d8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	461a      	mov	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3301      	adds	r3, #1
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d9b3      	bls.n	800494c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a0e:	60da      	str	r2, [r3, #12]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b091      	sub	sp, #68	@ 0x44
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3318      	adds	r3, #24
 8004a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a46:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a5e:	d007      	beq.n	8004a70 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a64:	3304      	adds	r3, #4
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004a70:	2302      	movs	r3, #2
 8004a72:	e111      	b.n	8004c98 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a76:	3301      	adds	r3, #1
 8004a78:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	4b86      	ldr	r3, [pc, #536]	@ (8004ca4 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a8e:	6852      	ldr	r2, [r2, #4]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004af6:	e082      	b.n	8004bfe <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b02:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e005      	b.n	8004b24 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b22:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b26:	3301      	adds	r3, #1
 8004b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d902      	bls.n	8004b36 <ETH_Prepare_Tx_Descriptors+0x11a>
 8004b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b32:	3b04      	subs	r3, #4
 8004b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b3e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b4c:	d007      	beq.n	8004b5e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b52:	3304      	adds	r3, #4
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d029      	beq.n	8004bb2 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b70:	e019      	b.n	8004ba6 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004b72:	f3bf 8f5f 	dmb	sy
}
 8004b76:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b86:	3301      	adds	r3, #1
 8004b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d902      	bls.n	8004b96 <ETH_Prepare_Tx_Descriptors+0x17a>
 8004b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b92:	3b04      	subs	r3, #4
 8004b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ba6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d3e1      	bcc.n	8004b72 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e072      	b.n	8004c98 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4b32      	ldr	r3, [pc, #200]	@ (8004ca4 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bde:	6852      	ldr	r2, [r2, #4]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be8:	3301      	adds	r3, #1
 8004bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004bec:	f3bf 8f5f 	dmb	sy
}
 8004bf0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfc:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f47f af78 	bne.w	8004af8 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d006      	beq.n	8004c1c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e005      	b.n	8004c28 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c32:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	6a3a      	ldr	r2, [r7, #32]
 8004c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004c3e:	f3bf 8f5f 	dmb	sy
}
 8004c42:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c58:	3304      	adds	r3, #4
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c64:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c66:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6a:	613b      	str	r3, [r7, #16]
  return(result);
 8004c6c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	2301      	movs	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c82:	4413      	add	r3, r2
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f383 8810 	msr	PRIMASK, r3
}
 8004c94:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3744      	adds	r7, #68	@ 0x44
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	ffffe000 	.word	0xffffe000

08004ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	@ 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	e175      	b.n	8004fb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004cc8:	2201      	movs	r2, #1
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	f040 8164 	bne.w	8004fae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d005      	beq.n	8004cfe <HAL_GPIO_Init+0x56>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d130      	bne.n	8004d60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	2203      	movs	r2, #3
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4013      	ands	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d34:	2201      	movs	r2, #1
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	f003 0201 	and.w	r2, r3, #1
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d017      	beq.n	8004d9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	2203      	movs	r2, #3
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4013      	ands	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d123      	bne.n	8004df0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	08da      	lsrs	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3208      	adds	r2, #8
 8004db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	220f      	movs	r2, #15
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	08da      	lsrs	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3208      	adds	r2, #8
 8004dea:	69b9      	ldr	r1, [r7, #24]
 8004dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 0203 	and.w	r2, r3, #3
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80be 	beq.w	8004fae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e32:	4b66      	ldr	r3, [pc, #408]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	4a65      	ldr	r2, [pc, #404]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e3e:	4b63      	ldr	r3, [pc, #396]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e4a:	4a61      	ldr	r2, [pc, #388]	@ (8004fd0 <HAL_GPIO_Init+0x328>)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	3302      	adds	r3, #2
 8004e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	220f      	movs	r2, #15
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a58      	ldr	r2, [pc, #352]	@ (8004fd4 <HAL_GPIO_Init+0x32c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d037      	beq.n	8004ee6 <HAL_GPIO_Init+0x23e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a57      	ldr	r2, [pc, #348]	@ (8004fd8 <HAL_GPIO_Init+0x330>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d031      	beq.n	8004ee2 <HAL_GPIO_Init+0x23a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a56      	ldr	r2, [pc, #344]	@ (8004fdc <HAL_GPIO_Init+0x334>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d02b      	beq.n	8004ede <HAL_GPIO_Init+0x236>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a55      	ldr	r2, [pc, #340]	@ (8004fe0 <HAL_GPIO_Init+0x338>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d025      	beq.n	8004eda <HAL_GPIO_Init+0x232>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a54      	ldr	r2, [pc, #336]	@ (8004fe4 <HAL_GPIO_Init+0x33c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01f      	beq.n	8004ed6 <HAL_GPIO_Init+0x22e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a53      	ldr	r2, [pc, #332]	@ (8004fe8 <HAL_GPIO_Init+0x340>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d019      	beq.n	8004ed2 <HAL_GPIO_Init+0x22a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a52      	ldr	r2, [pc, #328]	@ (8004fec <HAL_GPIO_Init+0x344>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_GPIO_Init+0x226>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a51      	ldr	r2, [pc, #324]	@ (8004ff0 <HAL_GPIO_Init+0x348>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00d      	beq.n	8004eca <HAL_GPIO_Init+0x222>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a50      	ldr	r2, [pc, #320]	@ (8004ff4 <HAL_GPIO_Init+0x34c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <HAL_GPIO_Init+0x21e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8004ff8 <HAL_GPIO_Init+0x350>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d101      	bne.n	8004ec2 <HAL_GPIO_Init+0x21a>
 8004ebe:	2309      	movs	r3, #9
 8004ec0:	e012      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ec2:	230a      	movs	r3, #10
 8004ec4:	e010      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	e00e      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004eca:	2307      	movs	r3, #7
 8004ecc:	e00c      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ece:	2306      	movs	r3, #6
 8004ed0:	e00a      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ed2:	2305      	movs	r3, #5
 8004ed4:	e008      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	e006      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004eda:	2303      	movs	r3, #3
 8004edc:	e004      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e002      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	f002 0203 	and.w	r2, r2, #3
 8004eee:	0092      	lsls	r2, r2, #2
 8004ef0:	4093      	lsls	r3, r2
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ef8:	4935      	ldr	r1, [pc, #212]	@ (8004fd0 <HAL_GPIO_Init+0x328>)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	089b      	lsrs	r3, r3, #2
 8004efe:	3302      	adds	r3, #2
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f06:	4b3d      	ldr	r3, [pc, #244]	@ (8004ffc <HAL_GPIO_Init+0x354>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4013      	ands	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f2a:	4a34      	ldr	r2, [pc, #208]	@ (8004ffc <HAL_GPIO_Init+0x354>)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f30:	4b32      	ldr	r3, [pc, #200]	@ (8004ffc <HAL_GPIO_Init+0x354>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f54:	4a29      	ldr	r2, [pc, #164]	@ (8004ffc <HAL_GPIO_Init+0x354>)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f5a:	4b28      	ldr	r3, [pc, #160]	@ (8004ffc <HAL_GPIO_Init+0x354>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ffc <HAL_GPIO_Init+0x354>)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f84:	4b1d      	ldr	r3, [pc, #116]	@ (8004ffc <HAL_GPIO_Init+0x354>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4013      	ands	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fa8:	4a14      	ldr	r2, [pc, #80]	@ (8004ffc <HAL_GPIO_Init+0x354>)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b0f      	cmp	r3, #15
 8004fb8:	f67f ae86 	bls.w	8004cc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	3724      	adds	r7, #36	@ 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	40013800 	.word	0x40013800
 8004fd4:	40020000 	.word	0x40020000
 8004fd8:	40020400 	.word	0x40020400
 8004fdc:	40020800 	.word	0x40020800
 8004fe0:	40020c00 	.word	0x40020c00
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40021400 	.word	0x40021400
 8004fec:	40021800 	.word	0x40021800
 8004ff0:	40021c00 	.word	0x40021c00
 8004ff4:	40022000 	.word	0x40022000
 8004ff8:	40022400 	.word	0x40022400
 8004ffc:	40013c00 	.word	0x40013c00

08005000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e08b      	b.n	800512a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fb fed8 	bl	8000ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	@ 0x24
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005050:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005060:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d107      	bne.n	800507a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	e006      	b.n	8005088 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005086:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d108      	bne.n	80050a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800509e:	605a      	str	r2, [r3, #4]
 80050a0:	e007      	b.n	80050b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005134 <HAL_I2C_Init+0x134>)
 80050be:	430b      	orrs	r3, r1
 80050c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69d9      	ldr	r1, [r3, #28]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1a      	ldr	r2, [r3, #32]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	02008000 	.word	0x02008000

08005138 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	@ 0x28
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	607a      	str	r2, [r7, #4]
 8005142:	461a      	mov	r2, r3
 8005144:	460b      	mov	r3, r1
 8005146:	817b      	strh	r3, [r7, #10]
 8005148:	4613      	mov	r3, r2
 800514a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b20      	cmp	r3, #32
 800515a:	f040 80ef 	bne.w	800533c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800516c:	d101      	bne.n	8005172 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
 8005170:	e0e5      	b.n	800533e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_I2C_Master_Transmit_DMA+0x48>
 800517c:	2302      	movs	r3, #2
 800517e:	e0de      	b.n	800533e <HAL_I2C_Master_Transmit_DMA+0x206>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2221      	movs	r2, #33	@ 0x21
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2210      	movs	r2, #16
 8005194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	893a      	ldrh	r2, [r7, #8]
 80051a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4a66      	ldr	r2, [pc, #408]	@ (8005348 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80051ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a66      	ldr	r2, [pc, #408]	@ (800534c <HAL_I2C_Master_Transmit_DMA+0x214>)
 80051b4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2bff      	cmp	r3, #255	@ 0xff
 80051be:	d906      	bls.n	80051ce <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	22ff      	movs	r2, #255	@ 0xff
 80051c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80051c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	e007      	b.n	80051de <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80051d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051dc:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01a      	beq.n	800521c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005200:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d074      	beq.n	800530e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005228:	2b00      	cmp	r3, #0
 800522a:	d022      	beq.n	8005272 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	4a47      	ldr	r2, [pc, #284]	@ (8005350 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005232:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005238:	4a46      	ldr	r2, [pc, #280]	@ (8005354 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800523a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	2200      	movs	r2, #0
 8005242:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	2200      	movs	r2, #0
 800524a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800525c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005262:	f7fd ff35 	bl	80030d0 <HAL_DMA_Start_IT>
 8005266:	4603      	mov	r3, r0
 8005268:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d13a      	bne.n	80052e6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005270:	e013      	b.n	800529a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e051      	b.n	800533e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	3301      	adds	r3, #1
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	8979      	ldrh	r1, [r7, #10]
 80052a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005358 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f001 ff3f 	bl	8007130 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80052cc:	2110      	movs	r1, #16
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f001 ff60 	bl	8007194 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e028      	b.n	8005338 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fa:	f043 0210 	orr.w	r2, r3, #16
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e017      	b.n	800533e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a12      	ldr	r2, [pc, #72]	@ (800535c <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005312:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	b2da      	uxtb	r2, r3
 8005318:	8979      	ldrh	r1, [r7, #10]
 800531a:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f001 ff04 	bl	8007130 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005330:	2101      	movs	r1, #1
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f001 ff2e 	bl	8007194 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	e000      	b.n	800533e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800533c:	2302      	movs	r3, #2
  }
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	ffff0000 	.word	0xffff0000
 800534c:	08005e87 	.word	0x08005e87
 8005350:	08006eb3 	.word	0x08006eb3
 8005354:	08007081 	.word	0x08007081
 8005358:	80002000 	.word	0x80002000
 800535c:	080059fb 	.word	0x080059fb

08005360 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	461a      	mov	r2, r3
 800536c:	460b      	mov	r3, r1
 800536e:	817b      	strh	r3, [r7, #10]
 8005370:	4613      	mov	r3, r2
 8005372:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b20      	cmp	r3, #32
 800537e:	f040 80cd 	bne.w	800551c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800538c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005390:	d101      	bne.n	8005396 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005392:	2302      	movs	r3, #2
 8005394:	e0c3      	b.n	800551e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_I2C_Master_Receive_DMA+0x44>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e0bc      	b.n	800551e <HAL_I2C_Master_Receive_DMA+0x1be>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2222      	movs	r2, #34	@ 0x22
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2210      	movs	r2, #16
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	893a      	ldrh	r2, [r7, #8]
 80053cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a55      	ldr	r2, [pc, #340]	@ (8005528 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80053d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a55      	ldr	r2, [pc, #340]	@ (800552c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80053d8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2bff      	cmp	r3, #255	@ 0xff
 80053e2:	d906      	bls.n	80053f2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80053ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e007      	b.n	8005402 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80053fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005400:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d070      	beq.n	80054ec <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d020      	beq.n	8005454 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005416:	4a46      	ldr	r2, [pc, #280]	@ (8005530 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005418:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	4a45      	ldr	r2, [pc, #276]	@ (8005534 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005420:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	2200      	movs	r2, #0
 8005428:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542e:	2200      	movs	r2, #0
 8005430:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3324      	adds	r3, #36	@ 0x24
 800543c:	4619      	mov	r1, r3
 800543e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005444:	f7fd fe44 	bl	80030d0 <HAL_DMA_Start_IT>
 8005448:	4603      	mov	r3, r0
 800544a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800544c:	7cfb      	ldrb	r3, [r7, #19]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d138      	bne.n	80054c4 <HAL_I2C_Master_Receive_DMA+0x164>
 8005452:	e013      	b.n	800547c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005468:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e050      	b.n	800551e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005480:	b2da      	uxtb	r2, r3
 8005482:	8979      	ldrh	r1, [r7, #10]
 8005484:	4b2c      	ldr	r3, [pc, #176]	@ (8005538 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f001 fe50 	bl	8007130 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80054aa:	2110      	movs	r1, #16
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f001 fe71 	bl	8007194 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e029      	b.n	8005518 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d8:	f043 0210 	orr.w	r2, r3, #16
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e018      	b.n	800551e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a13      	ldr	r2, [pc, #76]	@ (800553c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80054f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	8979      	ldrh	r1, [r7, #10]
 80054fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005538 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f001 fe14 	bl	8007130 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005510:	2102      	movs	r1, #2
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f001 fe3e 	bl	8007194 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	ffff0000 	.word	0xffff0000
 800552c:	08005e87 	.word	0x08005e87
 8005530:	08006f89 	.word	0x08006f89
 8005534:	08007081 	.word	0x08007081
 8005538:	80002400 	.word	0x80002400
 800553c:	080059fb 	.word	0x080059fb

08005540 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b20      	cmp	r3, #32
 8005558:	f040 80d1 	bne.w	80056fe <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800556e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0c5      	b.n	8005700 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_I2C_Slave_Transmit_DMA+0x42>
 800557e:	2302      	movs	r3, #2
 8005580:	e0be      	b.n	8005700 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2221      	movs	r2, #33	@ 0x21
 800558e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a53      	ldr	r2, [pc, #332]	@ (8005708 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 80055ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a53      	ldr	r2, [pc, #332]	@ (800570c <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 80055c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055ca:	d117      	bne.n	80055fc <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	781a      	ldrb	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d068      	beq.n	80056d8 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560a:	2b00      	cmp	r3, #0
 800560c:	d022      	beq.n	8005654 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	4a3f      	ldr	r2, [pc, #252]	@ (8005710 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8005614:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561a:	4a3e      	ldr	r2, [pc, #248]	@ (8005714 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 800561c:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005622:	2200      	movs	r2, #0
 8005624:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562a:	2200      	movs	r2, #0
 800562c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005636:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800563e:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005644:	f7fd fd44 	bl	80030d0 <HAL_DMA_Start_IT>
 8005648:	4603      	mov	r3, r0
 800564a:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800564c:	7dfb      	ldrb	r3, [r7, #23]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d12e      	bne.n	80056b0 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005652:	e013      	b.n	800567c <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2228      	movs	r2, #40	@ 0x28
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005668:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e041      	b.n	8005700 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800568a:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005694:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f001 fd7b 	bl	8007194 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e024      	b.n	80056fa <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2228      	movs	r2, #40	@ 0x28
 80056b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c4:	f043 0210 	orr.w	r2, r3, #16
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e013      	b.n	8005700 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056e6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f001 fd4d 	bl	8007194 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e000      	b.n	8005700 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
  }
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	ffff0000 	.word	0xffff0000
 800570c:	08006329 	.word	0x08006329
 8005710:	08006f49 	.word	0x08006f49
 8005714:	08007081 	.word	0x08007081

08005718 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	4613      	mov	r3, r2
 8005724:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b20      	cmp	r3, #32
 8005730:	f040 809b 	bne.w	800586a <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_I2C_Slave_Receive_DMA+0x28>
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d105      	bne.n	800574c <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005746:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e08f      	b.n	800586c <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_I2C_Slave_Receive_DMA+0x42>
 8005756:	2302      	movs	r3, #2
 8005758:	e088      	b.n	800586c <HAL_I2C_Slave_Receive_DMA+0x154>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2222      	movs	r2, #34	@ 0x22
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a38      	ldr	r2, [pc, #224]	@ (8005874 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005792:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a38      	ldr	r2, [pc, #224]	@ (8005878 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005798:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d020      	beq.n	80057e4 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a6:	4a35      	ldr	r2, [pc, #212]	@ (800587c <HAL_I2C_Slave_Receive_DMA+0x164>)
 80057a8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ae:	4a34      	ldr	r2, [pc, #208]	@ (8005880 <HAL_I2C_Slave_Receive_DMA+0x168>)
 80057b0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b6:	2200      	movs	r2, #0
 80057b8:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057be:	2200      	movs	r2, #0
 80057c0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3324      	adds	r3, #36	@ 0x24
 80057cc:	4619      	mov	r1, r3
 80057ce:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057d4:	f7fd fc7c 	bl	80030d0 <HAL_DMA_Start_IT>
 80057d8:	4603      	mov	r3, r0
 80057da:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d12f      	bne.n	8005842 <HAL_I2C_Slave_Receive_DMA+0x12a>
 80057e2:	e013      	b.n	800580c <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2228      	movs	r2, #40	@ 0x28
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e02f      	b.n	800586c <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800581a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f001 fcb3 	bl	8007194 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800583c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	e014      	b.n	800586c <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2228      	movs	r2, #40	@ 0x28
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005856:	f043 0210 	orr.w	r2, r3, #16
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800586a:	2302      	movs	r3, #2
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	ffff0000 	.word	0xffff0000
 8005878:	08006329 	.word	0x08006329
 800587c:	0800703b 	.word	0x0800703b
 8005880:	08007081 	.word	0x08007081

08005884 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
  }
}
 80058b0:	bf00      	nop
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d010      	beq.n	80058fe <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	09db      	lsrs	r3, r3, #7
 80058e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ec:	f043 0201 	orr.w	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058fc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	0a9b      	lsrs	r3, r3, #10
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d010      	beq.n	800592c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	09db      	lsrs	r3, r3, #7
 800590e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591a:	f043 0208 	orr.w	r2, r3, #8
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800592a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	0a5b      	lsrs	r3, r3, #9
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d010      	beq.n	800595a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	09db      	lsrs	r3, r3, #7
 800593c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005948:	f043 0202 	orr.w	r2, r3, #2
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005958:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 030b 	and.w	r3, r3, #11
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800596a:	68f9      	ldr	r1, [r7, #12]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f965 	bl	8006c3c <I2C_ITError>
  }
}
 8005972:	bf00      	nop
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
 8005986:	4613      	mov	r3, r2
 8005988:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b088      	sub	sp, #32
 80059fe:	af02      	add	r7, sp, #8
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <I2C_Master_ISR_IT+0x1e>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e12e      	b.n	8005c76 <I2C_Master_ISR_IT+0x27c>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d013      	beq.n	8005a54 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00d      	beq.n	8005a54 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2210      	movs	r2, #16
 8005a3e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a44:	f043 0204 	orr.w	r2, r3, #4
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f001 fa0c 	bl	8006e6a <I2C_Flush_TXDR>
 8005a52:	e0fb      	b.n	8005c4c <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d023      	beq.n	8005aa8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	089b      	lsrs	r3, r3, #2
 8005a64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01d      	beq.n	8005aa8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0304 	bic.w	r3, r3, #4
 8005a72:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005aa6:	e0d1      	b.n	8005c4c <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	099b      	lsrs	r3, r3, #6
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d12a      	bne.n	8005b0a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d024      	beq.n	8005b0a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01e      	beq.n	8005b0a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80ba 	beq.w	8005c4c <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	781a      	ldrb	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005b08:	e0a0      	b.n	8005c4c <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	09db      	lsrs	r3, r3, #7
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d06b      	beq.n	8005bee <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	099b      	lsrs	r3, r3, #6
 8005b1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d065      	beq.n	8005bee <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d04e      	beq.n	8005bca <I2C_Master_ISR_IT+0x1d0>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d14a      	bne.n	8005bca <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b40:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2bff      	cmp	r3, #255	@ 0xff
 8005b4a:	d91c      	bls.n	8005b86 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	0c1b      	lsrs	r3, r3, #16
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d103      	bne.n	8005b68 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005b66:	e002      	b.n	8005b6e <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	22ff      	movs	r2, #255	@ 0xff
 8005b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	8a79      	ldrh	r1, [r7, #18]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f001 fad6 	bl	8007130 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b84:	e032      	b.n	8005bec <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b98:	d00b      	beq.n	8005bb2 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ba4:	8a79      	ldrh	r1, [r7, #18]
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	9000      	str	r0, [sp, #0]
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f001 fac0 	bl	8007130 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bb0:	e01c      	b.n	8005bec <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	8a79      	ldrh	r1, [r7, #18]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f001 fab4 	bl	8007130 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc8:	e010      	b.n	8005bec <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bd8:	d003      	beq.n	8005be2 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fd09 	bl	80065f2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005be0:	e034      	b.n	8005c4c <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005be2:	2140      	movs	r1, #64	@ 0x40
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f001 f829 	bl	8006c3c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bea:	e02f      	b.n	8005c4c <I2C_Master_ISR_IT+0x252>
 8005bec:	e02e      	b.n	8005c4c <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	099b      	lsrs	r3, r3, #6
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d028      	beq.n	8005c4c <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	099b      	lsrs	r3, r3, #6
 8005bfe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d022      	beq.n	8005c4c <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d119      	bne.n	8005c44 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c1e:	d015      	beq.n	8005c4c <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c28:	d108      	bne.n	8005c3c <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c38:	605a      	str	r2, [r3, #4]
 8005c3a:	e007      	b.n	8005c4c <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fcd8 	bl	80065f2 <I2C_ITMasterSeqCplt>
 8005c42:	e003      	b.n	8005c4c <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c44:	2140      	movs	r1, #64	@ 0x40
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fff8 	bl	8006c3c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d009      	beq.n	8005c6c <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005c64:	6979      	ldr	r1, [r7, #20]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 fd5e 	bl	8006728 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <I2C_Slave_ISR_IT+0x24>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e0ed      	b.n	8005e7e <I2C_Slave_ISR_IT+0x200>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005cc2:	6939      	ldr	r1, [r7, #16]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fdf9 	bl	80068bc <I2C_ITSlaveCplt>
 8005cca:	e0d3      	b.n	8005e74 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d04d      	beq.n	8005d74 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	091b      	lsrs	r3, r3, #4
 8005cdc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d047      	beq.n	8005d74 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d128      	bne.n	8005d40 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b28      	cmp	r3, #40	@ 0x28
 8005cf8:	d108      	bne.n	8005d0c <I2C_Slave_ISR_IT+0x8e>
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d00:	d104      	bne.n	8005d0c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d02:	6939      	ldr	r1, [r7, #16]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 ff43 	bl	8006b90 <I2C_ITListenCplt>
 8005d0a:	e032      	b.n	8005d72 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b29      	cmp	r3, #41	@ 0x29
 8005d16:	d10e      	bne.n	8005d36 <I2C_Slave_ISR_IT+0xb8>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d1e:	d00a      	beq.n	8005d36 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2210      	movs	r2, #16
 8005d26:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f001 f89e 	bl	8006e6a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 fc9c 	bl	800666c <I2C_ITSlaveSeqCplt>
 8005d34:	e01d      	b.n	8005d72 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2210      	movs	r2, #16
 8005d3c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d3e:	e096      	b.n	8005e6e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2210      	movs	r2, #16
 8005d46:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4c:	f043 0204 	orr.w	r2, r3, #4
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <I2C_Slave_ISR_IT+0xe6>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d60:	f040 8085 	bne.w	8005e6e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	4619      	mov	r1, r3
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 ff66 	bl	8006c3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d70:	e07d      	b.n	8005e6e <I2C_Slave_ISR_IT+0x1f0>
 8005d72:	e07c      	b.n	8005e6e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d030      	beq.n	8005de2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	089b      	lsrs	r3, r3, #2
 8005d84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d02a      	beq.n	8005de2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d018      	beq.n	8005dc8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d14f      	bne.n	8005e72 <I2C_Slave_ISR_IT+0x1f4>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dd8:	d04b      	beq.n	8005e72 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fc46 	bl	800666c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005de0:	e047      	b.n	8005e72 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	08db      	lsrs	r3, r3, #3
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	08db      	lsrs	r3, r3, #3
 8005df2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d004      	beq.n	8005e04 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005dfa:	6939      	ldr	r1, [r7, #16]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fb74 	bl	80064ea <I2C_ITAddrCplt>
 8005e02:	e037      	b.n	8005e74 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d031      	beq.n	8005e74 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d02b      	beq.n	8005e74 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d018      	beq.n	8005e58 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005e56:	e00d      	b.n	8005e74 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e5e:	d002      	beq.n	8005e66 <I2C_Slave_ISR_IT+0x1e8>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fc00 	bl	800666c <I2C_ITSlaveSeqCplt>
 8005e6c:	e002      	b.n	8005e74 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8005e6e:	bf00      	nop
 8005e70:	e000      	b.n	8005e74 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8005e72:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b088      	sub	sp, #32
 8005e8a:	af02      	add	r7, sp, #8
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <I2C_Master_ISR_DMA+0x1a>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e0f0      	b.n	8006082 <I2C_Master_ISR_DMA+0x1fc>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d017      	beq.n	8005ee4 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	091b      	lsrs	r3, r3, #4
 8005eb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2210      	movs	r2, #16
 8005ec6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ecc:	f043 0204 	orr.w	r2, r3, #4
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ed4:	2120      	movs	r1, #32
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f001 f95c 	bl	8007194 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 ffc4 	bl	8006e6a <I2C_Flush_TXDR>
 8005ee2:	e0c9      	b.n	8006078 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	09db      	lsrs	r3, r3, #7
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8081 	beq.w	8005ff4 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	099b      	lsrs	r3, r3, #6
 8005ef6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d07a      	beq.n	8005ff4 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f0c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d05c      	beq.n	8005fd2 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f24:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2bff      	cmp	r3, #255	@ 0xff
 8005f2e:	d914      	bls.n	8005f5a <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	0c1b      	lsrs	r3, r3, #16
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d103      	bne.n	8005f4c <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f4a:	e002      	b.n	8005f52 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	22ff      	movs	r2, #255	@ 0xff
 8005f50:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8005f52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e010      	b.n	8005f7c <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f6c:	d003      	beq.n	8005f76 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	e002      	b.n	8005f7c <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005f76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f7a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	8a79      	ldrh	r1, [r7, #18]
 8005f84:	2300      	movs	r3, #0
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f001 f8d0 	bl	8007130 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b22      	cmp	r3, #34	@ 0x22
 8005fac:	d108      	bne.n	8005fc0 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fbc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fbe:	e05b      	b.n	8006078 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fd0:	e052      	b.n	8006078 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fe0:	d003      	beq.n	8005fea <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fb05 	bl	80065f2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005fe8:	e046      	b.n	8006078 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fea:	2140      	movs	r1, #64	@ 0x40
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fe25 	bl	8006c3c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005ff2:	e041      	b.n	8006078 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	099b      	lsrs	r3, r3, #6
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d029      	beq.n	8006054 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	099b      	lsrs	r3, r3, #6
 8006004:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006008:	2b00      	cmp	r3, #0
 800600a:	d023      	beq.n	8006054 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d119      	bne.n	800604a <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006020:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006024:	d027      	beq.n	8006076 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800602e:	d108      	bne.n	8006042 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800603e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006040:	e019      	b.n	8006076 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 fad5 	bl	80065f2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006048:	e015      	b.n	8006076 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800604a:	2140      	movs	r1, #64	@ 0x40
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fdf5 	bl	8006c3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006052:	e010      	b.n	8006076 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00b      	beq.n	8006078 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fb5a 	bl	8006728 <I2C_ITMasterCplt>
 8006074:	e000      	b.n	8006078 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8006076:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006098:	4b94      	ldr	r3, [pc, #592]	@ (80062ec <I2C_Mem_ISR_DMA+0x260>)
 800609a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <I2C_Mem_ISR_DMA+0x1e>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e139      	b.n	800631e <I2C_Mem_ISR_DMA+0x292>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d017      	beq.n	80060ee <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	091b      	lsrs	r3, r3, #4
 80060c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d011      	beq.n	80060ee <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2210      	movs	r2, #16
 80060d0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d6:	f043 0204 	orr.w	r2, r3, #4
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80060de:	2120      	movs	r1, #32
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f001 f857 	bl	8007194 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 febf 	bl	8006e6a <I2C_Flush_TXDR>
 80060ec:	e112      	b.n	8006314 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	085b      	lsrs	r3, r3, #1
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00f      	beq.n	800611a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006102:	2b00      	cmp	r3, #0
 8006104:	d009      	beq.n	800611a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800610e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006116:	651a      	str	r2, [r3, #80]	@ 0x50
 8006118:	e0fc      	b.n	8006314 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	09db      	lsrs	r3, r3, #7
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d06e      	beq.n	8006204 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	099b      	lsrs	r3, r3, #6
 800612a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800612e:	2b00      	cmp	r3, #0
 8006130:	d068      	beq.n	8006204 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006132:	2101      	movs	r1, #1
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f001 f8b1 	bl	800729c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800613a:	2110      	movs	r1, #16
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f001 f829 	bl	8007194 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d056      	beq.n	80061fa <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	2bff      	cmp	r3, #255	@ 0xff
 8006154:	d91e      	bls.n	8006194 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	0c1b      	lsrs	r3, r3, #16
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b01      	cmp	r3, #1
 8006168:	d103      	bne.n	8006172 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006170:	e002      	b.n	8006178 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	22ff      	movs	r2, #255	@ 0xff
 8006176:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617c:	b299      	uxth	r1, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006182:	b2da      	uxtb	r2, r3
 8006184:	2300      	movs	r3, #0
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 ffcf 	bl	8007130 <I2C_TransferConfig>
 8006192:	e011      	b.n	80061b8 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061a2:	b299      	uxth	r1, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 ffbc 	bl	8007130 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b22      	cmp	r3, #34	@ 0x22
 80061d4:	d108      	bne.n	80061e8 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80061e6:	e095      	b.n	8006314 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80061f8:	e08c      	b.n	8006314 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061fa:	2140      	movs	r1, #64	@ 0x40
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fd1d 	bl	8006c3c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006202:	e087      	b.n	8006314 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d071      	beq.n	80062f4 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	099b      	lsrs	r3, r3, #6
 8006214:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006218:	2b00      	cmp	r3, #0
 800621a:	d06b      	beq.n	80062f4 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800621c:	2101      	movs	r1, #1
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f001 f83c 	bl	800729c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006224:	2110      	movs	r1, #16
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 ffb4 	bl	8007194 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b22      	cmp	r3, #34	@ 0x22
 8006236:	d101      	bne.n	800623c <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006238:	4b2d      	ldr	r3, [pc, #180]	@ (80062f0 <I2C_Mem_ISR_DMA+0x264>)
 800623a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006240:	b29b      	uxth	r3, r3
 8006242:	2bff      	cmp	r3, #255	@ 0xff
 8006244:	d91e      	bls.n	8006284 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	d103      	bne.n	8006262 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006260:	e002      	b.n	8006268 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	22ff      	movs	r2, #255	@ 0xff
 8006266:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800626c:	b299      	uxth	r1, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006272:	b2da      	uxtb	r2, r3
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 ff57 	bl	8007130 <I2C_TransferConfig>
 8006282:	e011      	b.n	80062a8 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006288:	b29a      	uxth	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006292:	b299      	uxth	r1, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006298:	b2da      	uxtb	r2, r3
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 ff44 	bl	8007130 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b22      	cmp	r3, #34	@ 0x22
 80062c4:	d108      	bne.n	80062d8 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062d4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062d6:	e01d      	b.n	8006314 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062e6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062e8:	e014      	b.n	8006314 <I2C_Mem_ISR_DMA+0x288>
 80062ea:	bf00      	nop
 80062ec:	80002000 	.word	0x80002000
 80062f0:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fa0a 	bl	8006728 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop

08006328 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006338:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <I2C_Slave_ISR_DMA+0x24>
 8006348:	2302      	movs	r3, #2
 800634a:	e0ca      	b.n	80064e2 <I2C_Slave_ISR_DMA+0x1ba>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800636c:	68b9      	ldr	r1, [r7, #8]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 faa4 	bl	80068bc <I2C_ITSlaveCplt>
 8006374:	e0b0      	b.n	80064d8 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 809a 	beq.w	80064b8 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	091b      	lsrs	r3, r3, #4
 8006388:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8093 	beq.w	80064b8 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0b9b      	lsrs	r3, r3, #14
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d105      	bne.n	80063aa <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0bdb      	lsrs	r3, r3, #15
 80063a2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d07f      	beq.n	80064aa <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00d      	beq.n	80063ce <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	0bdb      	lsrs	r3, r3, #15
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80063ca:	2301      	movs	r3, #1
 80063cc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00d      	beq.n	80063f2 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	0b9b      	lsrs	r3, r3, #14
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80063ee:	2301      	movs	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d128      	bne.n	800644a <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b28      	cmp	r3, #40	@ 0x28
 8006402:	d108      	bne.n	8006416 <I2C_Slave_ISR_DMA+0xee>
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800640a:	d104      	bne.n	8006416 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fbbe 	bl	8006b90 <I2C_ITListenCplt>
 8006414:	e048      	b.n	80064a8 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b29      	cmp	r3, #41	@ 0x29
 8006420:	d10e      	bne.n	8006440 <I2C_Slave_ISR_DMA+0x118>
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006428:	d00a      	beq.n	8006440 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2210      	movs	r2, #16
 8006430:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fd19 	bl	8006e6a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f917 	bl	800666c <I2C_ITSlaveSeqCplt>
 800643e:	e033      	b.n	80064a8 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2210      	movs	r2, #16
 8006446:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006448:	e034      	b.n	80064b4 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2210      	movs	r2, #16
 8006450:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006456:	f043 0204 	orr.w	r2, r3, #4
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006464:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <I2C_Slave_ISR_DMA+0x14c>
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006472:	d11f      	bne.n	80064b4 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	2b21      	cmp	r3, #33	@ 0x21
 8006478:	d002      	beq.n	8006480 <I2C_Slave_ISR_DMA+0x158>
 800647a:	7dfb      	ldrb	r3, [r7, #23]
 800647c:	2b29      	cmp	r3, #41	@ 0x29
 800647e:	d103      	bne.n	8006488 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2221      	movs	r2, #33	@ 0x21
 8006484:	631a      	str	r2, [r3, #48]	@ 0x30
 8006486:	e008      	b.n	800649a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006488:	7dfb      	ldrb	r3, [r7, #23]
 800648a:	2b22      	cmp	r3, #34	@ 0x22
 800648c:	d002      	beq.n	8006494 <I2C_Slave_ISR_DMA+0x16c>
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	2b2a      	cmp	r3, #42	@ 0x2a
 8006492:	d102      	bne.n	800649a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2222      	movs	r2, #34	@ 0x22
 8006498:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649e:	4619      	mov	r1, r3
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fbcb 	bl	8006c3c <I2C_ITError>
      if (treatdmanack == 1U)
 80064a6:	e005      	b.n	80064b4 <I2C_Slave_ISR_DMA+0x18c>
 80064a8:	e004      	b.n	80064b4 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2210      	movs	r2, #16
 80064b0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80064b2:	e011      	b.n	80064d8 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80064b4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80064b6:	e00f      	b.n	80064d8 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	08db      	lsrs	r3, r3, #3
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	08db      	lsrs	r3, r3, #3
 80064c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 f809 	bl	80064ea <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006500:	2b28      	cmp	r3, #40	@ 0x28
 8006502:	d16a      	bne.n	80065da <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	0c1b      	lsrs	r3, r3, #16
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	0c1b      	lsrs	r3, r3, #16
 800651c:	b29b      	uxth	r3, r3
 800651e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006522:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006530:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800653e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d138      	bne.n	80065ba <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006548:	897b      	ldrh	r3, [r7, #10]
 800654a:	09db      	lsrs	r3, r3, #7
 800654c:	b29a      	uxth	r2, r3
 800654e:	89bb      	ldrh	r3, [r7, #12]
 8006550:	4053      	eors	r3, r2
 8006552:	b29b      	uxth	r3, r3
 8006554:	f003 0306 	and.w	r3, r3, #6
 8006558:	2b00      	cmp	r3, #0
 800655a:	d11c      	bne.n	8006596 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800655c:	897b      	ldrh	r3, [r7, #10]
 800655e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800656e:	2b02      	cmp	r3, #2
 8006570:	d13b      	bne.n	80065ea <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2208      	movs	r2, #8
 800657e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006588:	89ba      	ldrh	r2, [r7, #12]
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff f9f3 	bl	800597a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006594:	e029      	b.n	80065ea <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006596:	893b      	ldrh	r3, [r7, #8]
 8006598:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800659a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fe7c 	bl	800729c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065ac:	89ba      	ldrh	r2, [r7, #12]
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff f9e1 	bl	800597a <HAL_I2C_AddrCallback>
}
 80065b8:	e017      	b.n	80065ea <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fe6c 	bl	800729c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065cc:	89ba      	ldrh	r2, [r7, #12]
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff f9d1 	bl	800597a <HAL_I2C_AddrCallback>
}
 80065d8:	e007      	b.n	80065ea <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2208      	movs	r2, #8
 80065e0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b21      	cmp	r3, #33	@ 0x21
 800660c:	d115      	bne.n	800663a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2211      	movs	r2, #17
 800661a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006622:	2101      	movs	r1, #1
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fe39 	bl	800729c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f018 f924 	bl	801e880 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006638:	e014      	b.n	8006664 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2212      	movs	r2, #18
 8006646:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800664e:	2102      	movs	r1, #2
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fe23 	bl	800729c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f018 f924 	bl	801e8ac <HAL_I2C_MasterRxCpltCallback>
}
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	0b9b      	lsrs	r3, r3, #14
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	e00d      	b.n	80066be <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	0bdb      	lsrs	r3, r3, #15
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066bc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b29      	cmp	r3, #41	@ 0x29
 80066c8:	d112      	bne.n	80066f0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2228      	movs	r2, #40	@ 0x28
 80066ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2221      	movs	r2, #33	@ 0x21
 80066d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066d8:	2101      	movs	r1, #1
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fdde 	bl	800729c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f018 f8f5 	bl	801e8d8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80066ee:	e017      	b.n	8006720 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066fa:	d111      	bne.n	8006720 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2228      	movs	r2, #40	@ 0x28
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2222      	movs	r2, #34	@ 0x22
 8006708:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800670a:	2102      	movs	r1, #2
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fdc5 	bl	800729c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f018 f8f2 	bl	801e904 <HAL_I2C_SlaveRxCpltCallback>
}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2220      	movs	r2, #32
 800673c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b21      	cmp	r3, #33	@ 0x21
 8006748:	d107      	bne.n	800675a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800674a:	2101      	movs	r1, #1
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fda5 	bl	800729c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2211      	movs	r2, #17
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30
 8006758:	e00c      	b.n	8006774 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b22      	cmp	r3, #34	@ 0x22
 8006764:	d106      	bne.n	8006774 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006766:	2102      	movs	r1, #2
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fd97 	bl	800729c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2212      	movs	r2, #18
 8006772:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6859      	ldr	r1, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b4d      	ldr	r3, [pc, #308]	@ (80068b4 <I2C_ITMasterCplt+0x18c>)
 8006780:	400b      	ands	r3, r1
 8006782:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a4a      	ldr	r2, [pc, #296]	@ (80068b8 <I2C_ITMasterCplt+0x190>)
 800678e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	091b      	lsrs	r3, r3, #4
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d009      	beq.n	80067b0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2210      	movs	r2, #16
 80067a2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a8:	f043 0204 	orr.w	r2, r3, #4
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b60      	cmp	r3, #96	@ 0x60
 80067ba:	d10b      	bne.n	80067d4 <I2C_ITMasterCplt+0xac>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	089b      	lsrs	r3, r3, #2
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80067d2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fb48 	bl	8006e6a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067de:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b60      	cmp	r3, #96	@ 0x60
 80067ea:	d002      	beq.n	80067f2 <I2C_ITMasterCplt+0xca>
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d006      	beq.n	8006800 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fa1f 	bl	8006c3c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80067fe:	e054      	b.n	80068aa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b21      	cmp	r3, #33	@ 0x21
 800680a:	d124      	bne.n	8006856 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b40      	cmp	r3, #64	@ 0x40
 8006824:	d10b      	bne.n	800683e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff f8b7 	bl	80059aa <HAL_I2C_MemTxCpltCallback>
}
 800683c:	e035      	b.n	80068aa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f018 f816 	bl	801e880 <HAL_I2C_MasterTxCpltCallback>
}
 8006854:	e029      	b.n	80068aa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b22      	cmp	r3, #34	@ 0x22
 8006860:	d123      	bne.n	80068aa <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b40      	cmp	r3, #64	@ 0x40
 800687a:	d10b      	bne.n	8006894 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff f896 	bl	80059be <HAL_I2C_MemRxCpltCallback>
}
 8006892:	e00a      	b.n	80068aa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f018 f801 	bl	801e8ac <HAL_I2C_MasterRxCpltCallback>
}
 80068aa:	bf00      	nop
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	fe00e800 	.word	0xfe00e800
 80068b8:	ffff0000 	.word	0xffff0000

080068bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068de:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2220      	movs	r2, #32
 80068e6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068e8:	7afb      	ldrb	r3, [r7, #11]
 80068ea:	2b21      	cmp	r3, #33	@ 0x21
 80068ec:	d002      	beq.n	80068f4 <I2C_ITSlaveCplt+0x38>
 80068ee:	7afb      	ldrb	r3, [r7, #11]
 80068f0:	2b29      	cmp	r3, #41	@ 0x29
 80068f2:	d108      	bne.n	8006906 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80068f4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fccf 	bl	800729c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2221      	movs	r2, #33	@ 0x21
 8006902:	631a      	str	r2, [r3, #48]	@ 0x30
 8006904:	e019      	b.n	800693a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006906:	7afb      	ldrb	r3, [r7, #11]
 8006908:	2b22      	cmp	r3, #34	@ 0x22
 800690a:	d002      	beq.n	8006912 <I2C_ITSlaveCplt+0x56>
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006910:	d108      	bne.n	8006924 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006912:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fcc0 	bl	800729c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2222      	movs	r2, #34	@ 0x22
 8006920:	631a      	str	r2, [r3, #48]	@ 0x30
 8006922:	e00a      	b.n	800693a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006924:	7afb      	ldrb	r3, [r7, #11]
 8006926:	2b28      	cmp	r3, #40	@ 0x28
 8006928:	d107      	bne.n	800693a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800692a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fcb4 	bl	800729c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006948:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6859      	ldr	r1, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	4b8c      	ldr	r3, [pc, #560]	@ (8006b88 <I2C_ITSlaveCplt+0x2cc>)
 8006956:	400b      	ands	r3, r1
 8006958:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa85 	bl	8006e6a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	0b9b      	lsrs	r3, r3, #14
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d013      	beq.n	8006994 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800697a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006980:	2b00      	cmp	r3, #0
 8006982:	d020      	beq.n	80069c6 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	b29a      	uxth	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006992:	e018      	b.n	80069c6 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	0bdb      	lsrs	r3, r3, #15
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d012      	beq.n	80069c6 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d006      	beq.n	80069c6 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	089b      	lsrs	r3, r3, #2
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d020      	beq.n	8006a14 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f023 0304 	bic.w	r3, r3, #4
 80069d8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a22:	f043 0204 	orr.w	r2, r3, #4
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d04a      	beq.n	8006acc <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	091b      	lsrs	r3, r3, #4
 8006a3a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d044      	beq.n	8006acc <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d128      	bne.n	8006a9e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b28      	cmp	r3, #40	@ 0x28
 8006a56:	d108      	bne.n	8006a6a <I2C_ITSlaveCplt+0x1ae>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a5e:	d104      	bne.n	8006a6a <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a60:	6979      	ldr	r1, [r7, #20]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f894 	bl	8006b90 <I2C_ITListenCplt>
 8006a68:	e030      	b.n	8006acc <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b29      	cmp	r3, #41	@ 0x29
 8006a74:	d10e      	bne.n	8006a94 <I2C_ITSlaveCplt+0x1d8>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a7c:	d00a      	beq.n	8006a94 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2210      	movs	r2, #16
 8006a84:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9ef 	bl	8006e6a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff fded 	bl	800666c <I2C_ITSlaveSeqCplt>
 8006a92:	e01b      	b.n	8006acc <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2210      	movs	r2, #16
 8006a9a:	61da      	str	r2, [r3, #28]
 8006a9c:	e016      	b.n	8006acc <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2210      	movs	r2, #16
 8006aa4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aaa:	f043 0204 	orr.w	r2, r3, #4
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <I2C_ITSlaveCplt+0x204>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006abe:	d105      	bne.n	8006acc <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8b8 	bl	8006c3c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d010      	beq.n	8006b04 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f8a7 	bl	8006c3c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b28      	cmp	r3, #40	@ 0x28
 8006af8:	d141      	bne.n	8006b7e <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006afa:	6979      	ldr	r1, [r7, #20]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f847 	bl	8006b90 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b02:	e03c      	b.n	8006b7e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b0c:	d014      	beq.n	8006b38 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fdac 	bl	800666c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a1d      	ldr	r2, [pc, #116]	@ (8006b8c <I2C_ITSlaveCplt+0x2d0>)
 8006b18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fe ff30 	bl	8005996 <HAL_I2C_ListenCpltCallback>
}
 8006b36:	e022      	b.n	8006b7e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b22      	cmp	r3, #34	@ 0x22
 8006b42:	d10e      	bne.n	8006b62 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f017 fed2 	bl	801e904 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b60:	e00d      	b.n	8006b7e <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f017 fead 	bl	801e8d8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006b7e:	bf00      	nop
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	fe00e800 	.word	0xfe00e800
 8006b8c:	ffff0000 	.word	0xffff0000

08006b90 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a26      	ldr	r2, [pc, #152]	@ (8006c38 <I2C_ITListenCplt+0xa8>)
 8006b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	089b      	lsrs	r3, r3, #2
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d022      	beq.n	8006c0e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d012      	beq.n	8006c0e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c06:	f043 0204 	orr.w	r2, r3, #4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c0e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fb42 	bl	800729c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7fe feb4 	bl	8005996 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006c2e:	bf00      	nop
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	ffff0000 	.word	0xffff0000

08006c3c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c4c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a6d      	ldr	r2, [pc, #436]	@ (8006e10 <I2C_ITError+0x1d4>)
 8006c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	2b28      	cmp	r3, #40	@ 0x28
 8006c72:	d005      	beq.n	8006c80 <I2C_ITError+0x44>
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	2b29      	cmp	r3, #41	@ 0x29
 8006c78:	d002      	beq.n	8006c80 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c7e:	d10b      	bne.n	8006c98 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c80:	2103      	movs	r1, #3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fb0a 	bl	800729c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2228      	movs	r2, #40	@ 0x28
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a60      	ldr	r2, [pc, #384]	@ (8006e14 <I2C_ITError+0x1d8>)
 8006c94:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c96:	e030      	b.n	8006cfa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c98:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fafd 	bl	800729c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f8e1 	bl	8006e6a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b60      	cmp	r3, #96	@ 0x60
 8006cb2:	d01f      	beq.n	8006cf4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d114      	bne.n	8006cf4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	f003 0310 	and.w	r3, r3, #16
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d109      	bne.n	8006cec <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2210      	movs	r2, #16
 8006cde:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce4:	f043 0204 	orr.w	r2, r3, #4
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d039      	beq.n	8006d7c <I2C_ITError+0x140>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b11      	cmp	r3, #17
 8006d0c:	d002      	beq.n	8006d14 <I2C_ITError+0xd8>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b21      	cmp	r3, #33	@ 0x21
 8006d12:	d133      	bne.n	8006d7c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d22:	d107      	bne.n	8006d34 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fc fc45 	bl	80035c8 <HAL_DMA_GetState>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d017      	beq.n	8006d74 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d48:	4a33      	ldr	r2, [pc, #204]	@ (8006e18 <I2C_ITError+0x1dc>)
 8006d4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fc fa89 	bl	8003270 <HAL_DMA_Abort_IT>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d04d      	beq.n	8006e00 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d72:	e045      	b.n	8006e00 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f851 	bl	8006e1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d7a:	e041      	b.n	8006e00 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d039      	beq.n	8006df8 <I2C_ITError+0x1bc>
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b12      	cmp	r3, #18
 8006d88:	d002      	beq.n	8006d90 <I2C_ITError+0x154>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b22      	cmp	r3, #34	@ 0x22
 8006d8e:	d133      	bne.n	8006df8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d9e:	d107      	bne.n	8006db0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fc fc07 	bl	80035c8 <HAL_DMA_GetState>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d017      	beq.n	8006df0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc4:	4a14      	ldr	r2, [pc, #80]	@ (8006e18 <I2C_ITError+0x1dc>)
 8006dc6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fc fa4b 	bl	8003270 <HAL_DMA_Abort_IT>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d011      	beq.n	8006e04 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006dea:	4610      	mov	r0, r2
 8006dec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dee:	e009      	b.n	8006e04 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f813 	bl	8006e1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006df6:	e005      	b.n	8006e04 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f80f 	bl	8006e1c <I2C_TreatErrorCallback>
  }
}
 8006dfe:	e002      	b.n	8006e06 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e00:	bf00      	nop
 8006e02:	e000      	b.n	8006e06 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e04:	bf00      	nop
}
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	ffff0000 	.word	0xffff0000
 8006e14:	08005c7f 	.word	0x08005c7f
 8006e18:	080070f5 	.word	0x080070f5

08006e1c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b60      	cmp	r3, #96	@ 0x60
 8006e2e:	d10e      	bne.n	8006e4e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fe fdcd 	bl	80059e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e4c:	e009      	b.n	8006e62 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fe fdb8 	bl	80059d2 <HAL_I2C_ErrorCallback>
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d103      	bne.n	8006e88 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d007      	beq.n	8006ea6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699a      	ldr	r2, [r3, #24]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f042 0201 	orr.w	r2, r2, #1
 8006ea4:	619a      	str	r2, [r3, #24]
  }
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ece:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006eda:	2120      	movs	r1, #32
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 f959 	bl	8007194 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006ee2:	e02d      	b.n	8006f40 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006eec:	441a      	add	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2bff      	cmp	r3, #255	@ 0xff
 8006efa:	d903      	bls.n	8006f04 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	22ff      	movs	r2, #255	@ 0xff
 8006f00:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006f02:	e004      	b.n	8006f0e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	4619      	mov	r1, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3328      	adds	r3, #40	@ 0x28
 8006f1e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006f24:	f7fc f8d4 	bl	80030d0 <HAL_DMA_Start_IT>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d004      	beq.n	8006f38 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006f2e:	2110      	movs	r1, #16
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff fe83 	bl	8006c3c <I2C_ITError>
}
 8006f36:	e003      	b.n	8006f40 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006f38:	2140      	movs	r1, #64	@ 0x40
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f92a 	bl	8007194 <I2C_Enable_IRQ>
}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5a:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f62:	d002      	beq.n	8006f6a <I2C_DMASlaveTransmitCplt+0x22>
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f78:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff fb76 	bl	800666c <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fa4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d104      	bne.n	8006fba <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006fb0:	2120      	movs	r1, #32
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 f8ee 	bl	8007194 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006fb8:	e03b      	b.n	8007032 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006fc2:	441a      	add	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2bff      	cmp	r3, #255	@ 0xff
 8006fd0:	d911      	bls.n	8006ff6 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	0c1b      	lsrs	r3, r3, #16
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d103      	bne.n	8006fee <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006fec:	e008      	b.n	8007000 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	22ff      	movs	r2, #255	@ 0xff
 8006ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006ff4:	e004      	b.n	8007000 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3324      	adds	r3, #36	@ 0x24
 800700a:	4619      	mov	r1, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007010:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007016:	f7fc f85b 	bl	80030d0 <HAL_DMA_Start_IT>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007020:	2110      	movs	r1, #16
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff fe0a 	bl	8006c3c <I2C_ITError>
}
 8007028:	e003      	b.n	8007032 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800702a:	2140      	movs	r1, #64	@ 0x40
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f8b1 	bl	8007194 <I2C_Enable_IRQ>
}
 8007032:	bf00      	nop
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007046:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704c:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10e      	bne.n	8007078 <I2C_DMASlaveReceiveCplt+0x3e>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007060:	d00a      	beq.n	8007078 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007070:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff fafa 	bl	800666c <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007090:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80070a6:	2301      	movs	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80070be:	2301      	movs	r3, #1
 80070c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fc fa8e 	bl	80035e4 <HAL_DMA_GetError>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d00e      	beq.n	80070ec <I2C_DMAError+0x6c>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070e2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80070e4:	2110      	movs	r1, #16
 80070e6:	68b8      	ldr	r0, [r7, #8]
 80070e8:	f7ff fda8 	bl	8006c3c <I2C_ITError>
  }
}
 80070ec:	bf00      	nop
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007100:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710e:	2200      	movs	r2, #0
 8007110:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711e:	2200      	movs	r2, #0
 8007120:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff fe7a 	bl	8006e1c <I2C_TreatErrorCallback>
}
 8007128:	bf00      	nop
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	607b      	str	r3, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	817b      	strh	r3, [r7, #10]
 800713e:	4613      	mov	r3, r2
 8007140:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007142:	897b      	ldrh	r3, [r7, #10]
 8007144:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007148:	7a7b      	ldrb	r3, [r7, #9]
 800714a:	041b      	lsls	r3, r3, #16
 800714c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007150:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	4313      	orrs	r3, r2
 800715a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800715e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	0d5b      	lsrs	r3, r3, #21
 800716a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800716e:	4b08      	ldr	r3, [pc, #32]	@ (8007190 <I2C_TransferConfig+0x60>)
 8007170:	430b      	orrs	r3, r1
 8007172:	43db      	mvns	r3, r3
 8007174:	ea02 0103 	and.w	r1, r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	03ff63ff 	.word	0x03ff63ff

08007194 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a8:	4a39      	ldr	r2, [pc, #228]	@ (8007290 <I2C_Enable_IRQ+0xfc>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d032      	beq.n	8007214 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80071b2:	4a38      	ldr	r2, [pc, #224]	@ (8007294 <I2C_Enable_IRQ+0x100>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d02d      	beq.n	8007214 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80071bc:	4a36      	ldr	r2, [pc, #216]	@ (8007298 <I2C_Enable_IRQ+0x104>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d028      	beq.n	8007214 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80071c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	da03      	bge.n	80071d2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80071d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80071d2:	887b      	ldrh	r3, [r7, #2]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80071e2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80071e4:	887b      	ldrh	r3, [r7, #2]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80071f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80071f6:	887b      	ldrh	r3, [r7, #2]
 80071f8:	2b10      	cmp	r3, #16
 80071fa:	d103      	bne.n	8007204 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007202:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007204:	887b      	ldrh	r3, [r7, #2]
 8007206:	2b20      	cmp	r3, #32
 8007208:	d133      	bne.n	8007272 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f043 0320 	orr.w	r3, r3, #32
 8007210:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007212:	e02e      	b.n	8007272 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007218:	2b00      	cmp	r3, #0
 800721a:	da03      	bge.n	8007224 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007222:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007224:	887b      	ldrh	r3, [r7, #2]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007234:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007236:	887b      	ldrh	r3, [r7, #2]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007246:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007248:	887b      	ldrh	r3, [r7, #2]
 800724a:	2b10      	cmp	r3, #16
 800724c:	d103      	bne.n	8007256 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007254:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007256:	887b      	ldrh	r3, [r7, #2]
 8007258:	2b20      	cmp	r3, #32
 800725a:	d103      	bne.n	8007264 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007262:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007264:	887b      	ldrh	r3, [r7, #2]
 8007266:	2b40      	cmp	r3, #64	@ 0x40
 8007268:	d103      	bne.n	8007272 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007270:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6819      	ldr	r1, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	430a      	orrs	r2, r1
 8007280:	601a      	str	r2, [r3, #0]
}
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	08005e87 	.word	0x08005e87
 8007294:	08006329 	.word	0x08006329
 8007298:	0800608d 	.word	0x0800608d

0800729c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80072ac:	887b      	ldrh	r3, [r7, #2]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00f      	beq.n	80072d6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80072bc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072ca:	2b28      	cmp	r3, #40	@ 0x28
 80072cc:	d003      	beq.n	80072d6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80072d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80072d6:	887b      	ldrh	r3, [r7, #2]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00f      	beq.n	8007300 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80072e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072f4:	2b28      	cmp	r3, #40	@ 0x28
 80072f6:	d003      	beq.n	8007300 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80072fe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007304:	2b00      	cmp	r3, #0
 8007306:	da03      	bge.n	8007310 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800730e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007310:	887b      	ldrh	r3, [r7, #2]
 8007312:	2b10      	cmp	r3, #16
 8007314:	d103      	bne.n	800731e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800731c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800731e:	887b      	ldrh	r3, [r7, #2]
 8007320:	2b20      	cmp	r3, #32
 8007322:	d103      	bne.n	800732c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f043 0320 	orr.w	r3, r3, #32
 800732a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800732c:	887b      	ldrh	r3, [r7, #2]
 800732e:	2b40      	cmp	r3, #64	@ 0x40
 8007330:	d103      	bne.n	800733a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007338:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6819      	ldr	r1, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	43da      	mvns	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	400a      	ands	r2, r1
 800734a:	601a      	str	r2, [r3, #0]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b20      	cmp	r3, #32
 800736c:	d138      	bne.n	80073e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007378:	2302      	movs	r3, #2
 800737a:	e032      	b.n	80073e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2224      	movs	r2, #36	@ 0x24
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80073aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6819      	ldr	r1, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0201 	orr.w	r2, r2, #1
 80073ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	e000      	b.n	80073e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073e0:	2302      	movs	r3, #2
  }
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b20      	cmp	r3, #32
 8007402:	d139      	bne.n	8007478 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800740a:	2b01      	cmp	r3, #1
 800740c:	d101      	bne.n	8007412 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800740e:	2302      	movs	r3, #2
 8007410:	e033      	b.n	800747a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2224      	movs	r2, #36	@ 0x24
 800741e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0201 	bic.w	r2, r2, #1
 8007430:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007440:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	e000      	b.n	800747a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007478:	2302      	movs	r3, #2
  }
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
	...

08007488 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007492:	4b23      	ldr	r3, [pc, #140]	@ (8007520 <HAL_PWREx_EnableOverDrive+0x98>)
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	4a22      	ldr	r2, [pc, #136]	@ (8007520 <HAL_PWREx_EnableOverDrive+0x98>)
 8007498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800749c:	6413      	str	r3, [r2, #64]	@ 0x40
 800749e:	4b20      	ldr	r3, [pc, #128]	@ (8007520 <HAL_PWREx_EnableOverDrive+0x98>)
 80074a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80074aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074b6:	f7fa ffa9 	bl	800240c <HAL_GetTick>
 80074ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074bc:	e009      	b.n	80074d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074be:	f7fa ffa5 	bl	800240c <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074cc:	d901      	bls.n	80074d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e022      	b.n	8007518 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074d2:	4b14      	ldr	r3, [pc, #80]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074de:	d1ee      	bne.n	80074be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074e0:	4b10      	ldr	r3, [pc, #64]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a0f      	ldr	r2, [pc, #60]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074ec:	f7fa ff8e 	bl	800240c <HAL_GetTick>
 80074f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074f2:	e009      	b.n	8007508 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074f4:	f7fa ff8a 	bl	800240c <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007502:	d901      	bls.n	8007508 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e007      	b.n	8007518 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007508:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x9c>)
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007514:	d1ee      	bne.n	80074f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40023800 	.word	0x40023800
 8007524:	40007000 	.word	0x40007000

08007528 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007530:	2300      	movs	r3, #0
 8007532:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e291      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 8087 	beq.w	800765a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800754c:	4b96      	ldr	r3, [pc, #600]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 030c 	and.w	r3, r3, #12
 8007554:	2b04      	cmp	r3, #4
 8007556:	d00c      	beq.n	8007572 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007558:	4b93      	ldr	r3, [pc, #588]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f003 030c 	and.w	r3, r3, #12
 8007560:	2b08      	cmp	r3, #8
 8007562:	d112      	bne.n	800758a <HAL_RCC_OscConfig+0x62>
 8007564:	4b90      	ldr	r3, [pc, #576]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800756c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007570:	d10b      	bne.n	800758a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007572:	4b8d      	ldr	r3, [pc, #564]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d06c      	beq.n	8007658 <HAL_RCC_OscConfig+0x130>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d168      	bne.n	8007658 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e26b      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007592:	d106      	bne.n	80075a2 <HAL_RCC_OscConfig+0x7a>
 8007594:	4b84      	ldr	r3, [pc, #528]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a83      	ldr	r2, [pc, #524]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 800759a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	e02e      	b.n	8007600 <HAL_RCC_OscConfig+0xd8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCC_OscConfig+0x9c>
 80075aa:	4b7f      	ldr	r3, [pc, #508]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a7e      	ldr	r2, [pc, #504]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	4b7c      	ldr	r3, [pc, #496]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a7b      	ldr	r2, [pc, #492]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	e01d      	b.n	8007600 <HAL_RCC_OscConfig+0xd8>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075cc:	d10c      	bne.n	80075e8 <HAL_RCC_OscConfig+0xc0>
 80075ce:	4b76      	ldr	r3, [pc, #472]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a75      	ldr	r2, [pc, #468]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	4b73      	ldr	r3, [pc, #460]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a72      	ldr	r2, [pc, #456]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	e00b      	b.n	8007600 <HAL_RCC_OscConfig+0xd8>
 80075e8:	4b6f      	ldr	r3, [pc, #444]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a6e      	ldr	r2, [pc, #440]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	4b6c      	ldr	r3, [pc, #432]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a6b      	ldr	r2, [pc, #428]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80075fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d013      	beq.n	8007630 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fa ff00 	bl	800240c <HAL_GetTick>
 800760c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007610:	f7fa fefc 	bl	800240c <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b64      	cmp	r3, #100	@ 0x64
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e21f      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007622:	4b61      	ldr	r3, [pc, #388]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0f0      	beq.n	8007610 <HAL_RCC_OscConfig+0xe8>
 800762e:	e014      	b.n	800765a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007630:	f7fa feec 	bl	800240c <HAL_GetTick>
 8007634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007636:	e008      	b.n	800764a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007638:	f7fa fee8 	bl	800240c <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b64      	cmp	r3, #100	@ 0x64
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e20b      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800764a:	4b57      	ldr	r3, [pc, #348]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f0      	bne.n	8007638 <HAL_RCC_OscConfig+0x110>
 8007656:	e000      	b.n	800765a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d069      	beq.n	800773a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007666:	4b50      	ldr	r3, [pc, #320]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 030c 	and.w	r3, r3, #12
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007672:	4b4d      	ldr	r3, [pc, #308]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 030c 	and.w	r3, r3, #12
 800767a:	2b08      	cmp	r3, #8
 800767c:	d11c      	bne.n	80076b8 <HAL_RCC_OscConfig+0x190>
 800767e:	4b4a      	ldr	r3, [pc, #296]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d116      	bne.n	80076b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800768a:	4b47      	ldr	r3, [pc, #284]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d005      	beq.n	80076a2 <HAL_RCC_OscConfig+0x17a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d001      	beq.n	80076a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e1df      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076a2:	4b41      	ldr	r3, [pc, #260]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	493d      	ldr	r1, [pc, #244]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076b6:	e040      	b.n	800773a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d023      	beq.n	8007708 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076c0:	4b39      	ldr	r3, [pc, #228]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a38      	ldr	r2, [pc, #224]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076cc:	f7fa fe9e 	bl	800240c <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d2:	e008      	b.n	80076e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076d4:	f7fa fe9a 	bl	800240c <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e1bd      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e6:	4b30      	ldr	r3, [pc, #192]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f0      	beq.n	80076d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f2:	4b2d      	ldr	r3, [pc, #180]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	4929      	ldr	r1, [pc, #164]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007702:	4313      	orrs	r3, r2
 8007704:	600b      	str	r3, [r1, #0]
 8007706:	e018      	b.n	800773a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007708:	4b27      	ldr	r3, [pc, #156]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a26      	ldr	r2, [pc, #152]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 800770e:	f023 0301 	bic.w	r3, r3, #1
 8007712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fa fe7a 	bl	800240c <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800771c:	f7fa fe76 	bl	800240c <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e199      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800772e:	4b1e      	ldr	r3, [pc, #120]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1f0      	bne.n	800771c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0308 	and.w	r3, r3, #8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d038      	beq.n	80077b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d019      	beq.n	8007782 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800774e:	4b16      	ldr	r3, [pc, #88]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007752:	4a15      	ldr	r2, [pc, #84]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007754:	f043 0301 	orr.w	r3, r3, #1
 8007758:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775a:	f7fa fe57 	bl	800240c <HAL_GetTick>
 800775e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007760:	e008      	b.n	8007774 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007762:	f7fa fe53 	bl	800240c <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e176      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007774:	4b0c      	ldr	r3, [pc, #48]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0f0      	beq.n	8007762 <HAL_RCC_OscConfig+0x23a>
 8007780:	e01a      	b.n	80077b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007782:	4b09      	ldr	r3, [pc, #36]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007786:	4a08      	ldr	r2, [pc, #32]	@ (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007788:	f023 0301 	bic.w	r3, r3, #1
 800778c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778e:	f7fa fe3d 	bl	800240c <HAL_GetTick>
 8007792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007794:	e00a      	b.n	80077ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007796:	f7fa fe39 	bl	800240c <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d903      	bls.n	80077ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e15c      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
 80077a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077ac:	4b91      	ldr	r3, [pc, #580]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80077ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1ee      	bne.n	8007796 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80a4 	beq.w	800790e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077c6:	4b8b      	ldr	r3, [pc, #556]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10d      	bne.n	80077ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077d2:	4b88      	ldr	r3, [pc, #544]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80077d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d6:	4a87      	ldr	r2, [pc, #540]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80077d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80077de:	4b85      	ldr	r3, [pc, #532]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80077e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077e6:	60bb      	str	r3, [r7, #8]
 80077e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077ee:	4b82      	ldr	r3, [pc, #520]	@ (80079f8 <HAL_RCC_OscConfig+0x4d0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d118      	bne.n	800782c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80077fa:	4b7f      	ldr	r3, [pc, #508]	@ (80079f8 <HAL_RCC_OscConfig+0x4d0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a7e      	ldr	r2, [pc, #504]	@ (80079f8 <HAL_RCC_OscConfig+0x4d0>)
 8007800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007806:	f7fa fe01 	bl	800240c <HAL_GetTick>
 800780a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800780c:	e008      	b.n	8007820 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800780e:	f7fa fdfd 	bl	800240c <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b64      	cmp	r3, #100	@ 0x64
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e120      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007820:	4b75      	ldr	r3, [pc, #468]	@ (80079f8 <HAL_RCC_OscConfig+0x4d0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0f0      	beq.n	800780e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d106      	bne.n	8007842 <HAL_RCC_OscConfig+0x31a>
 8007834:	4b6f      	ldr	r3, [pc, #444]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007838:	4a6e      	ldr	r2, [pc, #440]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 800783a:	f043 0301 	orr.w	r3, r3, #1
 800783e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007840:	e02d      	b.n	800789e <HAL_RCC_OscConfig+0x376>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10c      	bne.n	8007864 <HAL_RCC_OscConfig+0x33c>
 800784a:	4b6a      	ldr	r3, [pc, #424]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 800784c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800784e:	4a69      	ldr	r2, [pc, #420]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	6713      	str	r3, [r2, #112]	@ 0x70
 8007856:	4b67      	ldr	r3, [pc, #412]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785a:	4a66      	ldr	r2, [pc, #408]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 800785c:	f023 0304 	bic.w	r3, r3, #4
 8007860:	6713      	str	r3, [r2, #112]	@ 0x70
 8007862:	e01c      	b.n	800789e <HAL_RCC_OscConfig+0x376>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b05      	cmp	r3, #5
 800786a:	d10c      	bne.n	8007886 <HAL_RCC_OscConfig+0x35e>
 800786c:	4b61      	ldr	r3, [pc, #388]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 800786e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007870:	4a60      	ldr	r2, [pc, #384]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007872:	f043 0304 	orr.w	r3, r3, #4
 8007876:	6713      	str	r3, [r2, #112]	@ 0x70
 8007878:	4b5e      	ldr	r3, [pc, #376]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 800787a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800787c:	4a5d      	ldr	r2, [pc, #372]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 800787e:	f043 0301 	orr.w	r3, r3, #1
 8007882:	6713      	str	r3, [r2, #112]	@ 0x70
 8007884:	e00b      	b.n	800789e <HAL_RCC_OscConfig+0x376>
 8007886:	4b5b      	ldr	r3, [pc, #364]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788a:	4a5a      	ldr	r2, [pc, #360]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 800788c:	f023 0301 	bic.w	r3, r3, #1
 8007890:	6713      	str	r3, [r2, #112]	@ 0x70
 8007892:	4b58      	ldr	r3, [pc, #352]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007896:	4a57      	ldr	r2, [pc, #348]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007898:	f023 0304 	bic.w	r3, r3, #4
 800789c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d015      	beq.n	80078d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a6:	f7fa fdb1 	bl	800240c <HAL_GetTick>
 80078aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ac:	e00a      	b.n	80078c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ae:	f7fa fdad 	bl	800240c <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078bc:	4293      	cmp	r3, r2
 80078be:	d901      	bls.n	80078c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e0ce      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c4:	4b4b      	ldr	r3, [pc, #300]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80078c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0ee      	beq.n	80078ae <HAL_RCC_OscConfig+0x386>
 80078d0:	e014      	b.n	80078fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d2:	f7fa fd9b 	bl	800240c <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078d8:	e00a      	b.n	80078f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078da:	f7fa fd97 	bl	800240c <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d901      	bls.n	80078f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e0b8      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f0:	4b40      	ldr	r3, [pc, #256]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80078f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1ee      	bne.n	80078da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d105      	bne.n	800790e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007902:	4b3c      	ldr	r3, [pc, #240]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007906:	4a3b      	ldr	r2, [pc, #236]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800790c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 80a4 	beq.w	8007a60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007918:	4b36      	ldr	r3, [pc, #216]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 030c 	and.w	r3, r3, #12
 8007920:	2b08      	cmp	r3, #8
 8007922:	d06b      	beq.n	80079fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	2b02      	cmp	r3, #2
 800792a:	d149      	bne.n	80079c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800792c:	4b31      	ldr	r3, [pc, #196]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a30      	ldr	r2, [pc, #192]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007938:	f7fa fd68 	bl	800240c <HAL_GetTick>
 800793c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007940:	f7fa fd64 	bl	800240c <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e087      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007952:	4b28      	ldr	r3, [pc, #160]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f0      	bne.n	8007940 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69da      	ldr	r2, [r3, #28]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796c:	019b      	lsls	r3, r3, #6
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007974:	085b      	lsrs	r3, r3, #1
 8007976:	3b01      	subs	r3, #1
 8007978:	041b      	lsls	r3, r3, #16
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	061b      	lsls	r3, r3, #24
 8007982:	4313      	orrs	r3, r2
 8007984:	4a1b      	ldr	r2, [pc, #108]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007986:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800798a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800798c:	4b19      	ldr	r3, [pc, #100]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a18      	ldr	r2, [pc, #96]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 8007992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007998:	f7fa fd38 	bl	800240c <HAL_GetTick>
 800799c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800799e:	e008      	b.n	80079b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079a0:	f7fa fd34 	bl	800240c <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d901      	bls.n	80079b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e057      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079b2:	4b10      	ldr	r3, [pc, #64]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0f0      	beq.n	80079a0 <HAL_RCC_OscConfig+0x478>
 80079be:	e04f      	b.n	8007a60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079c0:	4b0c      	ldr	r3, [pc, #48]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a0b      	ldr	r2, [pc, #44]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80079c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079cc:	f7fa fd1e 	bl	800240c <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d4:	f7fa fd1a 	bl	800240c <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e03d      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079e6:	4b03      	ldr	r3, [pc, #12]	@ (80079f4 <HAL_RCC_OscConfig+0x4cc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f0      	bne.n	80079d4 <HAL_RCC_OscConfig+0x4ac>
 80079f2:	e035      	b.n	8007a60 <HAL_RCC_OscConfig+0x538>
 80079f4:	40023800 	.word	0x40023800
 80079f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80079fc:	4b1b      	ldr	r3, [pc, #108]	@ (8007a6c <HAL_RCC_OscConfig+0x544>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d028      	beq.n	8007a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d121      	bne.n	8007a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d11a      	bne.n	8007a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d111      	bne.n	8007a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	3b01      	subs	r3, #1
 8007a46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d107      	bne.n	8007a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d001      	beq.n	8007a60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e000      	b.n	8007a62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40023800 	.word	0x40023800

08007a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e0d0      	b.n	8007c2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a88:	4b6a      	ldr	r3, [pc, #424]	@ (8007c34 <HAL_RCC_ClockConfig+0x1c4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d910      	bls.n	8007ab8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a96:	4b67      	ldr	r3, [pc, #412]	@ (8007c34 <HAL_RCC_ClockConfig+0x1c4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f023 020f 	bic.w	r2, r3, #15
 8007a9e:	4965      	ldr	r1, [pc, #404]	@ (8007c34 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa6:	4b63      	ldr	r3, [pc, #396]	@ (8007c34 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d001      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e0b8      	b.n	8007c2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d020      	beq.n	8007b06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ad0:	4b59      	ldr	r3, [pc, #356]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	4a58      	ldr	r2, [pc, #352]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007ad6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ada:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ae8:	4b53      	ldr	r3, [pc, #332]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	4a52      	ldr	r2, [pc, #328]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007aee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007af2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007af4:	4b50      	ldr	r3, [pc, #320]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	494d      	ldr	r1, [pc, #308]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d040      	beq.n	8007b94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d107      	bne.n	8007b2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b1a:	4b47      	ldr	r3, [pc, #284]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d115      	bne.n	8007b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e07f      	b.n	8007c2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d107      	bne.n	8007b42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b32:	4b41      	ldr	r3, [pc, #260]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d109      	bne.n	8007b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e073      	b.n	8007c2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b42:	4b3d      	ldr	r3, [pc, #244]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e06b      	b.n	8007c2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b52:	4b39      	ldr	r3, [pc, #228]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f023 0203 	bic.w	r2, r3, #3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	4936      	ldr	r1, [pc, #216]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b64:	f7fa fc52 	bl	800240c <HAL_GetTick>
 8007b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b6a:	e00a      	b.n	8007b82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b6c:	f7fa fc4e 	bl	800240c <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e053      	b.n	8007c2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b82:	4b2d      	ldr	r3, [pc, #180]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 020c 	and.w	r2, r3, #12
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d1eb      	bne.n	8007b6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b94:	4b27      	ldr	r3, [pc, #156]	@ (8007c34 <HAL_RCC_ClockConfig+0x1c4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 030f 	and.w	r3, r3, #15
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d210      	bcs.n	8007bc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba2:	4b24      	ldr	r3, [pc, #144]	@ (8007c34 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f023 020f 	bic.w	r2, r3, #15
 8007baa:	4922      	ldr	r1, [pc, #136]	@ (8007c34 <HAL_RCC_ClockConfig+0x1c4>)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb2:	4b20      	ldr	r3, [pc, #128]	@ (8007c34 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 030f 	and.w	r3, r3, #15
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e032      	b.n	8007c2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d008      	beq.n	8007be2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bd0:	4b19      	ldr	r3, [pc, #100]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	4916      	ldr	r1, [pc, #88]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d009      	beq.n	8007c02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bee:	4b12      	ldr	r3, [pc, #72]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	490e      	ldr	r1, [pc, #56]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c02:	f000 f821 	bl	8007c48 <HAL_RCC_GetSysClockFreq>
 8007c06:	4602      	mov	r2, r0
 8007c08:	4b0b      	ldr	r3, [pc, #44]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	091b      	lsrs	r3, r3, #4
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	490a      	ldr	r1, [pc, #40]	@ (8007c3c <HAL_RCC_ClockConfig+0x1cc>)
 8007c14:	5ccb      	ldrb	r3, [r1, r3]
 8007c16:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1a:	4a09      	ldr	r2, [pc, #36]	@ (8007c40 <HAL_RCC_ClockConfig+0x1d0>)
 8007c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c1e:	4b09      	ldr	r3, [pc, #36]	@ (8007c44 <HAL_RCC_ClockConfig+0x1d4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7f9 fd48 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40023c00 	.word	0x40023c00
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	080241bc 	.word	0x080241bc
 8007c40:	20000000 	.word	0x20000000
 8007c44:	20000004 	.word	0x20000004

08007c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c4c:	b090      	sub	sp, #64	@ 0x40
 8007c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c54:	2300      	movs	r3, #0
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c58:	2300      	movs	r3, #0
 8007c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c60:	4b59      	ldr	r3, [pc, #356]	@ (8007dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 030c 	and.w	r3, r3, #12
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d00d      	beq.n	8007c88 <HAL_RCC_GetSysClockFreq+0x40>
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	f200 80a1 	bhi.w	8007db4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <HAL_RCC_GetSysClockFreq+0x34>
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d003      	beq.n	8007c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c7a:	e09b      	b.n	8007db4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c7c:	4b53      	ldr	r3, [pc, #332]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8007c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c80:	e09b      	b.n	8007dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c82:	4b53      	ldr	r3, [pc, #332]	@ (8007dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c86:	e098      	b.n	8007dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c88:	4b4f      	ldr	r3, [pc, #316]	@ (8007dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c92:	4b4d      	ldr	r3, [pc, #308]	@ (8007dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d028      	beq.n	8007cf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8007dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	099b      	lsrs	r3, r3, #6
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	623b      	str	r3, [r7, #32]
 8007ca8:	627a      	str	r2, [r7, #36]	@ 0x24
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4b47      	ldr	r3, [pc, #284]	@ (8007dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cb4:	fb03 f201 	mul.w	r2, r3, r1
 8007cb8:	2300      	movs	r3, #0
 8007cba:	fb00 f303 	mul.w	r3, r0, r3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	4a43      	ldr	r2, [pc, #268]	@ (8007dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cc2:	fba0 1202 	umull	r1, r2, r0, r2
 8007cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cc8:	460a      	mov	r2, r1
 8007cca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cce:	4413      	add	r3, r2
 8007cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	61bb      	str	r3, [r7, #24]
 8007cd8:	61fa      	str	r2, [r7, #28]
 8007cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007ce2:	f7f8 fae5 	bl	80002b0 <__aeabi_uldivmod>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4613      	mov	r3, r2
 8007cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cee:	e053      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cf0:	4b35      	ldr	r3, [pc, #212]	@ (8007dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	099b      	lsrs	r3, r3, #6
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	613b      	str	r3, [r7, #16]
 8007cfa:	617a      	str	r2, [r7, #20]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007d02:	f04f 0b00 	mov.w	fp, #0
 8007d06:	4652      	mov	r2, sl
 8007d08:	465b      	mov	r3, fp
 8007d0a:	f04f 0000 	mov.w	r0, #0
 8007d0e:	f04f 0100 	mov.w	r1, #0
 8007d12:	0159      	lsls	r1, r3, #5
 8007d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d18:	0150      	lsls	r0, r2, #5
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	ebb2 080a 	subs.w	r8, r2, sl
 8007d22:	eb63 090b 	sbc.w	r9, r3, fp
 8007d26:	f04f 0200 	mov.w	r2, #0
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d3a:	ebb2 0408 	subs.w	r4, r2, r8
 8007d3e:	eb63 0509 	sbc.w	r5, r3, r9
 8007d42:	f04f 0200 	mov.w	r2, #0
 8007d46:	f04f 0300 	mov.w	r3, #0
 8007d4a:	00eb      	lsls	r3, r5, #3
 8007d4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d50:	00e2      	lsls	r2, r4, #3
 8007d52:	4614      	mov	r4, r2
 8007d54:	461d      	mov	r5, r3
 8007d56:	eb14 030a 	adds.w	r3, r4, sl
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	eb45 030b 	adc.w	r3, r5, fp
 8007d60:	607b      	str	r3, [r7, #4]
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d6e:	4629      	mov	r1, r5
 8007d70:	028b      	lsls	r3, r1, #10
 8007d72:	4621      	mov	r1, r4
 8007d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d78:	4621      	mov	r1, r4
 8007d7a:	028a      	lsls	r2, r1, #10
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d82:	2200      	movs	r2, #0
 8007d84:	60bb      	str	r3, [r7, #8]
 8007d86:	60fa      	str	r2, [r7, #12]
 8007d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d8c:	f7f8 fa90 	bl	80002b0 <__aeabi_uldivmod>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	4613      	mov	r3, r2
 8007d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d98:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	0c1b      	lsrs	r3, r3, #16
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	3301      	adds	r3, #1
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007da8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007db2:	e002      	b.n	8007dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007db4:	4b05      	ldr	r3, [pc, #20]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8007db6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3740      	adds	r7, #64	@ 0x40
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dc6:	bf00      	nop
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	00f42400 	.word	0x00f42400
 8007dd0:	017d7840 	.word	0x017d7840

08007dd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dd8:	4b03      	ldr	r3, [pc, #12]	@ (8007de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dda:	681b      	ldr	r3, [r3, #0]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	20000000 	.word	0x20000000

08007dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007df0:	f7ff fff0 	bl	8007dd4 <HAL_RCC_GetHCLKFreq>
 8007df4:	4602      	mov	r2, r0
 8007df6:	4b05      	ldr	r3, [pc, #20]	@ (8007e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	0a9b      	lsrs	r3, r3, #10
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	4903      	ldr	r1, [pc, #12]	@ (8007e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e02:	5ccb      	ldrb	r3, [r1, r3]
 8007e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	40023800 	.word	0x40023800
 8007e10:	080241cc 	.word	0x080241cc

08007e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e18:	f7ff ffdc 	bl	8007dd4 <HAL_RCC_GetHCLKFreq>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	4b05      	ldr	r3, [pc, #20]	@ (8007e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	0b5b      	lsrs	r3, r3, #13
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	4903      	ldr	r1, [pc, #12]	@ (8007e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e2a:	5ccb      	ldrb	r3, [r1, r3]
 8007e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	40023800 	.word	0x40023800
 8007e38:	080241cc 	.word	0x080241cc

08007e3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	220f      	movs	r2, #15
 8007e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e4c:	4b12      	ldr	r3, [pc, #72]	@ (8007e98 <HAL_RCC_GetClockConfig+0x5c>)
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f003 0203 	and.w	r2, r3, #3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e58:	4b0f      	ldr	r3, [pc, #60]	@ (8007e98 <HAL_RCC_GetClockConfig+0x5c>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e64:	4b0c      	ldr	r3, [pc, #48]	@ (8007e98 <HAL_RCC_GetClockConfig+0x5c>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e70:	4b09      	ldr	r3, [pc, #36]	@ (8007e98 <HAL_RCC_GetClockConfig+0x5c>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	08db      	lsrs	r3, r3, #3
 8007e76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e7e:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <HAL_RCC_GetClockConfig+0x60>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 020f 	and.w	r2, r3, #15
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	601a      	str	r2, [r3, #0]
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40023800 	.word	0x40023800
 8007e9c:	40023c00 	.word	0x40023c00

08007ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d012      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ec8:	4b69      	ldr	r3, [pc, #420]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	4a68      	ldr	r2, [pc, #416]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ece:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007ed2:	6093      	str	r3, [r2, #8]
 8007ed4:	4b66      	ldr	r3, [pc, #408]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007edc:	4964      	ldr	r1, [pc, #400]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007eea:	2301      	movs	r3, #1
 8007eec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d017      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007efa:	4b5d      	ldr	r3, [pc, #372]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f08:	4959      	ldr	r1, [pc, #356]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f18:	d101      	bne.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007f26:	2301      	movs	r3, #1
 8007f28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d017      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f36:	4b4e      	ldr	r3, [pc, #312]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f44:	494a      	ldr	r1, [pc, #296]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f54:	d101      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f56:	2301      	movs	r3, #1
 8007f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007f62:	2301      	movs	r3, #1
 8007f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f72:	2301      	movs	r3, #1
 8007f74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 808b 	beq.w	800809a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f84:	4b3a      	ldr	r3, [pc, #232]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f88:	4a39      	ldr	r2, [pc, #228]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f90:	4b37      	ldr	r3, [pc, #220]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f98:	60bb      	str	r3, [r7, #8]
 8007f9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f9c:	4b35      	ldr	r3, [pc, #212]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a34      	ldr	r2, [pc, #208]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa8:	f7fa fa30 	bl	800240c <HAL_GetTick>
 8007fac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fae:	e008      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fb0:	f7fa fa2c 	bl	800240c <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b64      	cmp	r3, #100	@ 0x64
 8007fbc:	d901      	bls.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e357      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0f0      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fce:	4b28      	ldr	r3, [pc, #160]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fd6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d035      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d02e      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fec:	4b20      	ldr	r3, [pc, #128]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008000:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008002:	4b1b      	ldr	r3, [pc, #108]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008006:	4a1a      	ldr	r2, [pc, #104]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800800c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800800e:	4a18      	ldr	r2, [pc, #96]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008014:	4b16      	ldr	r3, [pc, #88]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b01      	cmp	r3, #1
 800801e:	d114      	bne.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008020:	f7fa f9f4 	bl	800240c <HAL_GetTick>
 8008024:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008026:	e00a      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008028:	f7fa f9f0 	bl	800240c <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008036:	4293      	cmp	r3, r2
 8008038:	d901      	bls.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e319      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800803e:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0ee      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800804e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008056:	d111      	bne.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008058:	4b05      	ldr	r3, [pc, #20]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008064:	4b04      	ldr	r3, [pc, #16]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008066:	400b      	ands	r3, r1
 8008068:	4901      	ldr	r1, [pc, #4]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800806a:	4313      	orrs	r3, r2
 800806c:	608b      	str	r3, [r1, #8]
 800806e:	e00b      	b.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008070:	40023800 	.word	0x40023800
 8008074:	40007000 	.word	0x40007000
 8008078:	0ffffcff 	.word	0x0ffffcff
 800807c:	4baa      	ldr	r3, [pc, #680]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	4aa9      	ldr	r2, [pc, #676]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008082:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008086:	6093      	str	r3, [r2, #8]
 8008088:	4ba7      	ldr	r3, [pc, #668]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008094:	49a4      	ldr	r1, [pc, #656]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008096:	4313      	orrs	r3, r2
 8008098:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0310 	and.w	r3, r3, #16
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d010      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080a6:	4ba0      	ldr	r3, [pc, #640]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080ac:	4a9e      	ldr	r2, [pc, #632]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80080b6:	4b9c      	ldr	r3, [pc, #624]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c0:	4999      	ldr	r1, [pc, #612]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080d4:	4b94      	ldr	r3, [pc, #592]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080e2:	4991      	ldr	r1, [pc, #580]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080f6:	4b8c      	ldr	r3, [pc, #560]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008104:	4988      	ldr	r1, [pc, #544]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008118:	4b83      	ldr	r3, [pc, #524]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800811e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008126:	4980      	ldr	r1, [pc, #512]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008128:	4313      	orrs	r3, r2
 800812a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800813a:	4b7b      	ldr	r3, [pc, #492]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800813c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008140:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008148:	4977      	ldr	r1, [pc, #476]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800814a:	4313      	orrs	r3, r2
 800814c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800815c:	4b72      	ldr	r3, [pc, #456]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008162:	f023 0203 	bic.w	r2, r3, #3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816a:	496f      	ldr	r1, [pc, #444]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800816c:	4313      	orrs	r3, r2
 800816e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800817e:	4b6a      	ldr	r3, [pc, #424]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008184:	f023 020c 	bic.w	r2, r3, #12
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800818c:	4966      	ldr	r1, [pc, #408]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800818e:	4313      	orrs	r3, r2
 8008190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081a0:	4b61      	ldr	r3, [pc, #388]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ae:	495e      	ldr	r1, [pc, #376]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081c2:	4b59      	ldr	r3, [pc, #356]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d0:	4955      	ldr	r1, [pc, #340]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00a      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081e4:	4b50      	ldr	r3, [pc, #320]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f2:	494d      	ldr	r1, [pc, #308]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008206:	4b48      	ldr	r3, [pc, #288]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800820c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008214:	4944      	ldr	r1, [pc, #272]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008216:	4313      	orrs	r3, r2
 8008218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008228:	4b3f      	ldr	r3, [pc, #252]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800822a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800822e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008236:	493c      	ldr	r1, [pc, #240]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008238:	4313      	orrs	r3, r2
 800823a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800824a:	4b37      	ldr	r3, [pc, #220]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800824c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008250:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008258:	4933      	ldr	r1, [pc, #204]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800825a:	4313      	orrs	r3, r2
 800825c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00a      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800826c:	4b2e      	ldr	r3, [pc, #184]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800826e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008272:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800827a:	492b      	ldr	r1, [pc, #172]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800827c:	4313      	orrs	r3, r2
 800827e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d011      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800828e:	4b26      	ldr	r3, [pc, #152]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008294:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800829c:	4922      	ldr	r1, [pc, #136]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082ac:	d101      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80082ae:	2301      	movs	r3, #1
 80082b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0308 	and.w	r3, r3, #8
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80082be:	2301      	movs	r3, #1
 80082c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082ce:	4b16      	ldr	r3, [pc, #88]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082d4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082dc:	4912      	ldr	r1, [pc, #72]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80082f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008300:	4909      	ldr	r1, [pc, #36]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008302:	4313      	orrs	r3, r2
 8008304:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d006      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 80d9 	beq.w	80084ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800831c:	4b02      	ldr	r3, [pc, #8]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a01      	ldr	r2, [pc, #4]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008322:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008326:	e001      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008328:	40023800 	.word	0x40023800
 800832c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800832e:	f7fa f86d 	bl	800240c <HAL_GetTick>
 8008332:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008334:	e008      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008336:	f7fa f869 	bl	800240c <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b64      	cmp	r3, #100	@ 0x64
 8008342:	d901      	bls.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e194      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008348:	4b6c      	ldr	r3, [pc, #432]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f0      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d021      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008364:	2b00      	cmp	r3, #0
 8008366:	d11d      	bne.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008368:	4b64      	ldr	r3, [pc, #400]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800836a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800836e:	0c1b      	lsrs	r3, r3, #16
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008376:	4b61      	ldr	r3, [pc, #388]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800837c:	0e1b      	lsrs	r3, r3, #24
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	019a      	lsls	r2, r3, #6
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	041b      	lsls	r3, r3, #16
 800838e:	431a      	orrs	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	061b      	lsls	r3, r3, #24
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	071b      	lsls	r3, r3, #28
 800839c:	4957      	ldr	r1, [pc, #348]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d004      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083b8:	d00a      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d02e      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083ce:	d129      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083d0:	4b4a      	ldr	r3, [pc, #296]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083d6:	0c1b      	lsrs	r3, r3, #16
 80083d8:	f003 0303 	and.w	r3, r3, #3
 80083dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083de:	4b47      	ldr	r3, [pc, #284]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083e4:	0f1b      	lsrs	r3, r3, #28
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	019a      	lsls	r2, r3, #6
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	041b      	lsls	r3, r3, #16
 80083f6:	431a      	orrs	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	061b      	lsls	r3, r3, #24
 80083fe:	431a      	orrs	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	071b      	lsls	r3, r3, #28
 8008404:	493d      	ldr	r1, [pc, #244]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008406:	4313      	orrs	r3, r2
 8008408:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800840c:	4b3b      	ldr	r3, [pc, #236]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800840e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008412:	f023 021f 	bic.w	r2, r3, #31
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841a:	3b01      	subs	r3, #1
 800841c:	4937      	ldr	r1, [pc, #220]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01d      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008430:	4b32      	ldr	r3, [pc, #200]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008436:	0e1b      	lsrs	r3, r3, #24
 8008438:	f003 030f 	and.w	r3, r3, #15
 800843c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800843e:	4b2f      	ldr	r3, [pc, #188]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008444:	0f1b      	lsrs	r3, r3, #28
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	019a      	lsls	r2, r3, #6
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	041b      	lsls	r3, r3, #16
 8008458:	431a      	orrs	r2, r3
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	061b      	lsls	r3, r3, #24
 800845e:	431a      	orrs	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	071b      	lsls	r3, r3, #28
 8008464:	4925      	ldr	r1, [pc, #148]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008466:	4313      	orrs	r3, r2
 8008468:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d011      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	019a      	lsls	r2, r3, #6
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	041b      	lsls	r3, r3, #16
 8008484:	431a      	orrs	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	061b      	lsls	r3, r3, #24
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	071b      	lsls	r3, r3, #28
 8008494:	4919      	ldr	r1, [pc, #100]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008496:	4313      	orrs	r3, r2
 8008498:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800849c:	4b17      	ldr	r3, [pc, #92]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a16      	ldr	r2, [pc, #88]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084a8:	f7f9 ffb0 	bl	800240c <HAL_GetTick>
 80084ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084ae:	e008      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084b0:	f7f9 ffac 	bl	800240c <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b64      	cmp	r3, #100	@ 0x64
 80084bc:	d901      	bls.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e0d7      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084c2:	4b0e      	ldr	r3, [pc, #56]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0f0      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	f040 80cd 	bne.w	8008670 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80084d6:	4b09      	ldr	r3, [pc, #36]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a08      	ldr	r2, [pc, #32]	@ (80084fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e2:	f7f9 ff93 	bl	800240c <HAL_GetTick>
 80084e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084e8:	e00a      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084ea:	f7f9 ff8f 	bl	800240c <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b64      	cmp	r3, #100	@ 0x64
 80084f6:	d903      	bls.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e0ba      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80084fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008500:	4b5e      	ldr	r3, [pc, #376]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800850c:	d0ed      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d009      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800852a:	2b00      	cmp	r3, #0
 800852c:	d02e      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	d12a      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008536:	4b51      	ldr	r3, [pc, #324]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800853c:	0c1b      	lsrs	r3, r3, #16
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008544:	4b4d      	ldr	r3, [pc, #308]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800854a:	0f1b      	lsrs	r3, r3, #28
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	019a      	lsls	r2, r3, #6
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	041b      	lsls	r3, r3, #16
 800855c:	431a      	orrs	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	061b      	lsls	r3, r3, #24
 8008564:	431a      	orrs	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	071b      	lsls	r3, r3, #28
 800856a:	4944      	ldr	r1, [pc, #272]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800856c:	4313      	orrs	r3, r2
 800856e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008572:	4b42      	ldr	r3, [pc, #264]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008578:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008580:	3b01      	subs	r3, #1
 8008582:	021b      	lsls	r3, r3, #8
 8008584:	493d      	ldr	r1, [pc, #244]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008586:	4313      	orrs	r3, r2
 8008588:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d022      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800859c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085a0:	d11d      	bne.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085a2:	4b36      	ldr	r3, [pc, #216]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085a8:	0e1b      	lsrs	r3, r3, #24
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085b0:	4b32      	ldr	r3, [pc, #200]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085b6:	0f1b      	lsrs	r3, r3, #28
 80085b8:	f003 0307 	and.w	r3, r3, #7
 80085bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	019a      	lsls	r2, r3, #6
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	041b      	lsls	r3, r3, #16
 80085ca:	431a      	orrs	r2, r3
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	061b      	lsls	r3, r3, #24
 80085d0:	431a      	orrs	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	071b      	lsls	r3, r3, #28
 80085d6:	4929      	ldr	r1, [pc, #164]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0308 	and.w	r3, r3, #8
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d028      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085ea:	4b24      	ldr	r3, [pc, #144]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f0:	0e1b      	lsrs	r3, r3, #24
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085f8:	4b20      	ldr	r3, [pc, #128]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085fe:	0c1b      	lsrs	r3, r3, #16
 8008600:	f003 0303 	and.w	r3, r3, #3
 8008604:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	019a      	lsls	r2, r3, #6
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	041b      	lsls	r3, r3, #16
 8008610:	431a      	orrs	r2, r3
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	061b      	lsls	r3, r3, #24
 8008616:	431a      	orrs	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	071b      	lsls	r3, r3, #28
 800861e:	4917      	ldr	r1, [pc, #92]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008620:	4313      	orrs	r3, r2
 8008622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008626:	4b15      	ldr	r3, [pc, #84]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800862c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008634:	4911      	ldr	r1, [pc, #68]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008636:	4313      	orrs	r3, r2
 8008638:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800863c:	4b0f      	ldr	r3, [pc, #60]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a0e      	ldr	r2, [pc, #56]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008648:	f7f9 fee0 	bl	800240c <HAL_GetTick>
 800864c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800864e:	e008      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008650:	f7f9 fedc 	bl	800240c <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b64      	cmp	r3, #100	@ 0x64
 800865c:	d901      	bls.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e007      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008662:	4b06      	ldr	r3, [pc, #24]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800866a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800866e:	d1ef      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3720      	adds	r7, #32
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	40023800 	.word	0x40023800

08008680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e09d      	b.n	80087ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008696:	2b00      	cmp	r3, #0
 8008698:	d108      	bne.n	80086ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086a2:	d009      	beq.n	80086b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	61da      	str	r2, [r3, #28]
 80086aa:	e005      	b.n	80086b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7f8 fe5a 	bl	800138c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2202      	movs	r2, #2
 80086dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086f8:	d902      	bls.n	8008700 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80086fa:	2300      	movs	r3, #0
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	e002      	b.n	8008706 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008704:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800870e:	d007      	beq.n	8008720 <HAL_SPI_Init+0xa0>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008718:	d002      	beq.n	8008720 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	431a      	orrs	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	431a      	orrs	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008758:	431a      	orrs	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008762:	ea42 0103 	orr.w	r1, r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	0c1b      	lsrs	r3, r3, #16
 800877c:	f003 0204 	and.w	r2, r3, #4
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008784:	f003 0310 	and.w	r3, r3, #16
 8008788:	431a      	orrs	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800878e:	f003 0308 	and.w	r3, r3, #8
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800879c:	ea42 0103 	orr.w	r1, r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69da      	ldr	r2, [r3, #28]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80087bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	099b      	lsrs	r3, r3, #6
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10f      	bne.n	800881c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	099b      	lsrs	r3, r3, #6
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d004      	beq.n	800881c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	4798      	blx	r3
    return;
 800881a:	e0d7      	b.n	80089cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	085b      	lsrs	r3, r3, #1
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <HAL_SPI_IRQHandler+0x66>
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	09db      	lsrs	r3, r3, #7
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3
    return;
 800883c:	e0c6      	b.n	80089cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	095b      	lsrs	r3, r3, #5
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10c      	bne.n	8008864 <HAL_SPI_IRQHandler+0x8c>
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	099b      	lsrs	r3, r3, #6
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	0a1b      	lsrs	r3, r3, #8
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 80b4 	beq.w	80089cc <HAL_SPI_IRQHandler+0x1f4>
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80ad 	beq.w	80089cc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	099b      	lsrs	r3, r3, #6
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d023      	beq.n	80088c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b03      	cmp	r3, #3
 8008888:	d011      	beq.n	80088ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800888e:	f043 0204 	orr.w	r2, r3, #4
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	617b      	str	r3, [r7, #20]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	617b      	str	r3, [r7, #20]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	e00b      	b.n	80088c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088ae:	2300      	movs	r3, #0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	613b      	str	r3, [r7, #16]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	693b      	ldr	r3, [r7, #16]
        return;
 80088c4:	e082      	b.n	80089cc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	095b      	lsrs	r3, r3, #5
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d014      	beq.n	80088fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088d6:	f043 0201 	orr.w	r2, r3, #1
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	0a1b      	lsrs	r3, r3, #8
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00c      	beq.n	8008922 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800890c:	f043 0208 	orr.w	r2, r3, #8
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008914:	2300      	movs	r3, #0
 8008916:	60bb      	str	r3, [r7, #8]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	60bb      	str	r3, [r7, #8]
 8008920:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008926:	2b00      	cmp	r3, #0
 8008928:	d04f      	beq.n	80089ca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008938:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d104      	bne.n	8008956 <HAL_SPI_IRQHandler+0x17e>
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d034      	beq.n	80089c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0203 	bic.w	r2, r2, #3
 8008964:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896a:	2b00      	cmp	r3, #0
 800896c:	d011      	beq.n	8008992 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008972:	4a18      	ldr	r2, [pc, #96]	@ (80089d4 <HAL_SPI_IRQHandler+0x1fc>)
 8008974:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800897a:	4618      	mov	r0, r3
 800897c:	f7fa fc78 	bl	8003270 <HAL_DMA_Abort_IT>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d005      	beq.n	8008992 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800898a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008996:	2b00      	cmp	r3, #0
 8008998:	d016      	beq.n	80089c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800899e:	4a0d      	ldr	r2, [pc, #52]	@ (80089d4 <HAL_SPI_IRQHandler+0x1fc>)
 80089a0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fa fc62 	bl	8003270 <HAL_DMA_Abort_IT>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80089be:	e003      	b.n	80089c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f809 	bl	80089d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80089c6:	e000      	b.n	80089ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80089c8:	bf00      	nop
    return;
 80089ca:	bf00      	nop
  }
}
 80089cc:	3720      	adds	r7, #32
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	080089ed 	.word	0x080089ed

080089d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff ffe5 	bl	80089d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a0e:	bf00      	nop
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e049      	b.n	8008abc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7f9 f90f 	bl	8001c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2202      	movs	r2, #2
 8008a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f000 faa7 	bl	8008fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d001      	beq.n	8008adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e054      	b.n	8008b86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f042 0201 	orr.w	r2, r2, #1
 8008af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a26      	ldr	r2, [pc, #152]	@ (8008b94 <HAL_TIM_Base_Start_IT+0xd0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d022      	beq.n	8008b44 <HAL_TIM_Base_Start_IT+0x80>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b06:	d01d      	beq.n	8008b44 <HAL_TIM_Base_Start_IT+0x80>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a22      	ldr	r2, [pc, #136]	@ (8008b98 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d018      	beq.n	8008b44 <HAL_TIM_Base_Start_IT+0x80>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a21      	ldr	r2, [pc, #132]	@ (8008b9c <HAL_TIM_Base_Start_IT+0xd8>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d013      	beq.n	8008b44 <HAL_TIM_Base_Start_IT+0x80>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a1f      	ldr	r2, [pc, #124]	@ (8008ba0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00e      	beq.n	8008b44 <HAL_TIM_Base_Start_IT+0x80>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ba4 <HAL_TIM_Base_Start_IT+0xe0>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d009      	beq.n	8008b44 <HAL_TIM_Base_Start_IT+0x80>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d004      	beq.n	8008b44 <HAL_TIM_Base_Start_IT+0x80>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8008bac <HAL_TIM_Base_Start_IT+0xe8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d115      	bne.n	8008b70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	4b19      	ldr	r3, [pc, #100]	@ (8008bb0 <HAL_TIM_Base_Start_IT+0xec>)
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b06      	cmp	r3, #6
 8008b54:	d015      	beq.n	8008b82 <HAL_TIM_Base_Start_IT+0xbe>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b5c:	d011      	beq.n	8008b82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f042 0201 	orr.w	r2, r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b6e:	e008      	b.n	8008b82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0201 	orr.w	r2, r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	e000      	b.n	8008b84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40010000 	.word	0x40010000
 8008b98:	40000400 	.word	0x40000400
 8008b9c:	40000800 	.word	0x40000800
 8008ba0:	40000c00 	.word	0x40000c00
 8008ba4:	40010400 	.word	0x40010400
 8008ba8:	40014000 	.word	0x40014000
 8008bac:	40001800 	.word	0x40001800
 8008bb0:	00010007 	.word	0x00010007

08008bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f003 0302 	and.w	r3, r3, #2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d020      	beq.n	8008c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01b      	beq.n	8008c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f06f 0202 	mvn.w	r2, #2
 8008be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f9b4 	bl	8008f6c <HAL_TIM_IC_CaptureCallback>
 8008c04:	e005      	b.n	8008c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f9a6 	bl	8008f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f9b7 	bl	8008f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f003 0304 	and.w	r3, r3, #4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d020      	beq.n	8008c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01b      	beq.n	8008c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f06f 0204 	mvn.w	r2, #4
 8008c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f98e 	bl	8008f6c <HAL_TIM_IC_CaptureCallback>
 8008c50:	e005      	b.n	8008c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f980 	bl	8008f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f991 	bl	8008f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d020      	beq.n	8008cb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f003 0308 	and.w	r3, r3, #8
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01b      	beq.n	8008cb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f06f 0208 	mvn.w	r2, #8
 8008c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2204      	movs	r2, #4
 8008c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f968 	bl	8008f6c <HAL_TIM_IC_CaptureCallback>
 8008c9c:	e005      	b.n	8008caa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f95a 	bl	8008f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f96b 	bl	8008f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f003 0310 	and.w	r3, r3, #16
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d020      	beq.n	8008cfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f003 0310 	and.w	r3, r3, #16
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d01b      	beq.n	8008cfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f06f 0210 	mvn.w	r2, #16
 8008ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2208      	movs	r2, #8
 8008cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f942 	bl	8008f6c <HAL_TIM_IC_CaptureCallback>
 8008ce8:	e005      	b.n	8008cf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f934 	bl	8008f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f945 	bl	8008f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00c      	beq.n	8008d20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d007      	beq.n	8008d20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0201 	mvn.w	r2, #1
 8008d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7f8 faa8 	bl	8001270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d104      	bne.n	8008d34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00c      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d007      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fb05 	bl	8009358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00c      	beq.n	8008d72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fafd 	bl	800936c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00c      	beq.n	8008d96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d007      	beq.n	8008d96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f8ff 	bl	8008f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00c      	beq.n	8008dba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d007      	beq.n	8008dba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f06f 0220 	mvn.w	r2, #32
 8008db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fac5 	bl	8009344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dba:	bf00      	nop
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d101      	bne.n	8008de0 <HAL_TIM_ConfigClockSource+0x1c>
 8008ddc:	2302      	movs	r3, #2
 8008dde:	e0b4      	b.n	8008f4a <HAL_TIM_ConfigClockSource+0x186>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	4b56      	ldr	r3, [pc, #344]	@ (8008f54 <HAL_TIM_ConfigClockSource+0x190>)
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e18:	d03e      	beq.n	8008e98 <HAL_TIM_ConfigClockSource+0xd4>
 8008e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e1e:	f200 8087 	bhi.w	8008f30 <HAL_TIM_ConfigClockSource+0x16c>
 8008e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e26:	f000 8086 	beq.w	8008f36 <HAL_TIM_ConfigClockSource+0x172>
 8008e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e2e:	d87f      	bhi.n	8008f30 <HAL_TIM_ConfigClockSource+0x16c>
 8008e30:	2b70      	cmp	r3, #112	@ 0x70
 8008e32:	d01a      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0xa6>
 8008e34:	2b70      	cmp	r3, #112	@ 0x70
 8008e36:	d87b      	bhi.n	8008f30 <HAL_TIM_ConfigClockSource+0x16c>
 8008e38:	2b60      	cmp	r3, #96	@ 0x60
 8008e3a:	d050      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x11a>
 8008e3c:	2b60      	cmp	r3, #96	@ 0x60
 8008e3e:	d877      	bhi.n	8008f30 <HAL_TIM_ConfigClockSource+0x16c>
 8008e40:	2b50      	cmp	r3, #80	@ 0x50
 8008e42:	d03c      	beq.n	8008ebe <HAL_TIM_ConfigClockSource+0xfa>
 8008e44:	2b50      	cmp	r3, #80	@ 0x50
 8008e46:	d873      	bhi.n	8008f30 <HAL_TIM_ConfigClockSource+0x16c>
 8008e48:	2b40      	cmp	r3, #64	@ 0x40
 8008e4a:	d058      	beq.n	8008efe <HAL_TIM_ConfigClockSource+0x13a>
 8008e4c:	2b40      	cmp	r3, #64	@ 0x40
 8008e4e:	d86f      	bhi.n	8008f30 <HAL_TIM_ConfigClockSource+0x16c>
 8008e50:	2b30      	cmp	r3, #48	@ 0x30
 8008e52:	d064      	beq.n	8008f1e <HAL_TIM_ConfigClockSource+0x15a>
 8008e54:	2b30      	cmp	r3, #48	@ 0x30
 8008e56:	d86b      	bhi.n	8008f30 <HAL_TIM_ConfigClockSource+0x16c>
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	d060      	beq.n	8008f1e <HAL_TIM_ConfigClockSource+0x15a>
 8008e5c:	2b20      	cmp	r3, #32
 8008e5e:	d867      	bhi.n	8008f30 <HAL_TIM_ConfigClockSource+0x16c>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d05c      	beq.n	8008f1e <HAL_TIM_ConfigClockSource+0x15a>
 8008e64:	2b10      	cmp	r3, #16
 8008e66:	d05a      	beq.n	8008f1e <HAL_TIM_ConfigClockSource+0x15a>
 8008e68:	e062      	b.n	8008f30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e7a:	f000 f9b5 	bl	80091e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	609a      	str	r2, [r3, #8]
      break;
 8008e96:	e04f      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ea8:	f000 f99e 	bl	80091e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689a      	ldr	r2, [r3, #8]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008eba:	609a      	str	r2, [r3, #8]
      break;
 8008ebc:	e03c      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f000 f912 	bl	80090f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2150      	movs	r1, #80	@ 0x50
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 f96b 	bl	80091b2 <TIM_ITRx_SetConfig>
      break;
 8008edc:	e02c      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008eea:	461a      	mov	r2, r3
 8008eec:	f000 f931 	bl	8009152 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2160      	movs	r1, #96	@ 0x60
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f95b 	bl	80091b2 <TIM_ITRx_SetConfig>
      break;
 8008efc:	e01c      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f000 f8f2 	bl	80090f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2140      	movs	r1, #64	@ 0x40
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f94b 	bl	80091b2 <TIM_ITRx_SetConfig>
      break;
 8008f1c:	e00c      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4619      	mov	r1, r3
 8008f28:	4610      	mov	r0, r2
 8008f2a:	f000 f942 	bl	80091b2 <TIM_ITRx_SetConfig>
      break;
 8008f2e:	e003      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	73fb      	strb	r3, [r7, #15]
      break;
 8008f34:	e000      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	fffeff88 	.word	0xfffeff88

08008f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a43      	ldr	r2, [pc, #268]	@ (80090c8 <TIM_Base_SetConfig+0x120>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d013      	beq.n	8008fe8 <TIM_Base_SetConfig+0x40>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fc6:	d00f      	beq.n	8008fe8 <TIM_Base_SetConfig+0x40>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a40      	ldr	r2, [pc, #256]	@ (80090cc <TIM_Base_SetConfig+0x124>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00b      	beq.n	8008fe8 <TIM_Base_SetConfig+0x40>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80090d0 <TIM_Base_SetConfig+0x128>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d007      	beq.n	8008fe8 <TIM_Base_SetConfig+0x40>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a3e      	ldr	r2, [pc, #248]	@ (80090d4 <TIM_Base_SetConfig+0x12c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d003      	beq.n	8008fe8 <TIM_Base_SetConfig+0x40>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80090d8 <TIM_Base_SetConfig+0x130>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d108      	bne.n	8008ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a32      	ldr	r2, [pc, #200]	@ (80090c8 <TIM_Base_SetConfig+0x120>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d02b      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009008:	d027      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a2f      	ldr	r2, [pc, #188]	@ (80090cc <TIM_Base_SetConfig+0x124>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d023      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a2e      	ldr	r2, [pc, #184]	@ (80090d0 <TIM_Base_SetConfig+0x128>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d01f      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a2d      	ldr	r2, [pc, #180]	@ (80090d4 <TIM_Base_SetConfig+0x12c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d01b      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a2c      	ldr	r2, [pc, #176]	@ (80090d8 <TIM_Base_SetConfig+0x130>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d017      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a2b      	ldr	r2, [pc, #172]	@ (80090dc <TIM_Base_SetConfig+0x134>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d013      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a2a      	ldr	r2, [pc, #168]	@ (80090e0 <TIM_Base_SetConfig+0x138>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00f      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a29      	ldr	r2, [pc, #164]	@ (80090e4 <TIM_Base_SetConfig+0x13c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00b      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a28      	ldr	r2, [pc, #160]	@ (80090e8 <TIM_Base_SetConfig+0x140>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d007      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a27      	ldr	r2, [pc, #156]	@ (80090ec <TIM_Base_SetConfig+0x144>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d003      	beq.n	800905a <TIM_Base_SetConfig+0xb2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a26      	ldr	r2, [pc, #152]	@ (80090f0 <TIM_Base_SetConfig+0x148>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d108      	bne.n	800906c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	689a      	ldr	r2, [r3, #8]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a0e      	ldr	r2, [pc, #56]	@ (80090c8 <TIM_Base_SetConfig+0x120>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d003      	beq.n	800909a <TIM_Base_SetConfig+0xf2>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a10      	ldr	r2, [pc, #64]	@ (80090d8 <TIM_Base_SetConfig+0x130>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d103      	bne.n	80090a2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	691a      	ldr	r2, [r3, #16]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f043 0204 	orr.w	r2, r3, #4
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	601a      	str	r2, [r3, #0]
}
 80090ba:	bf00      	nop
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	40010000 	.word	0x40010000
 80090cc:	40000400 	.word	0x40000400
 80090d0:	40000800 	.word	0x40000800
 80090d4:	40000c00 	.word	0x40000c00
 80090d8:	40010400 	.word	0x40010400
 80090dc:	40014000 	.word	0x40014000
 80090e0:	40014400 	.word	0x40014400
 80090e4:	40014800 	.word	0x40014800
 80090e8:	40001800 	.word	0x40001800
 80090ec:	40001c00 	.word	0x40001c00
 80090f0:	40002000 	.word	0x40002000

080090f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	f023 0201 	bic.w	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800911e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	4313      	orrs	r3, r2
 8009128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f023 030a 	bic.w	r3, r3, #10
 8009130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	621a      	str	r2, [r3, #32]
}
 8009146:	bf00      	nop
 8009148:	371c      	adds	r7, #28
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009152:	b480      	push	{r7}
 8009154:	b087      	sub	sp, #28
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	f023 0210 	bic.w	r2, r3, #16
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800917c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	031b      	lsls	r3, r3, #12
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4313      	orrs	r3, r2
 8009186:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800918e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	011b      	lsls	r3, r3, #4
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	4313      	orrs	r3, r2
 8009198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	621a      	str	r2, [r3, #32]
}
 80091a6:	bf00      	nop
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f043 0307 	orr.w	r3, r3, #7
 80091d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	609a      	str	r2, [r3, #8]
}
 80091dc:	bf00      	nop
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	021a      	lsls	r2, r3, #8
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	431a      	orrs	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	4313      	orrs	r3, r2
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	609a      	str	r2, [r3, #8]
}
 800921c:	bf00      	nop
 800921e:	371c      	adds	r7, #28
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800923c:	2302      	movs	r3, #2
 800923e:	e06d      	b.n	800931c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a30      	ldr	r2, [pc, #192]	@ (8009328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d004      	beq.n	8009274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a2f      	ldr	r2, [pc, #188]	@ (800932c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d108      	bne.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800927a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	4313      	orrs	r3, r2
 8009284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800928c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a20      	ldr	r2, [pc, #128]	@ (8009328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d022      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092b2:	d01d      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009330 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d018      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009334 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d013      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1a      	ldr	r2, [pc, #104]	@ (8009338 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d00e      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a15      	ldr	r2, [pc, #84]	@ (800932c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d009      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a16      	ldr	r2, [pc, #88]	@ (800933c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d004      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a15      	ldr	r2, [pc, #84]	@ (8009340 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d10c      	bne.n	800930a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	4313      	orrs	r3, r2
 8009300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	40010000 	.word	0x40010000
 800932c:	40010400 	.word	0x40010400
 8009330:	40000400 	.word	0x40000400
 8009334:	40000800 	.word	0x40000800
 8009338:	40000c00 	.word	0x40000c00
 800933c:	40014000 	.word	0x40014000
 8009340:	40001800 	.word	0x40001800

08009344 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e040      	b.n	8009414 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7f8 fd58 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2224      	movs	r2, #36	@ 0x24
 80093ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0201 	bic.w	r2, r2, #1
 80093bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fece 	bl	800a168 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fc67 	bl	8009ca0 <UART_SetConfig>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d101      	bne.n	80093dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e01b      	b.n	8009414 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689a      	ldr	r2, [r3, #8]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f042 0201 	orr.w	r2, r2, #1
 800940a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 ff4d 	bl	800a2ac <UART_CheckIdleState>
 8009412:	4603      	mov	r3, r0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08a      	sub	sp, #40	@ 0x28
 8009420:	af02      	add	r7, sp, #8
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	4613      	mov	r3, r2
 800942a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009430:	2b20      	cmp	r3, #32
 8009432:	d177      	bne.n	8009524 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <HAL_UART_Transmit+0x24>
 800943a:	88fb      	ldrh	r3, [r7, #6]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e070      	b.n	8009526 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2221      	movs	r2, #33	@ 0x21
 8009450:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009452:	f7f8 ffdb 	bl	800240c <HAL_GetTick>
 8009456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	88fa      	ldrh	r2, [r7, #6]
 800945c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	88fa      	ldrh	r2, [r7, #6]
 8009464:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009470:	d108      	bne.n	8009484 <HAL_UART_Transmit+0x68>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d104      	bne.n	8009484 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	61bb      	str	r3, [r7, #24]
 8009482:	e003      	b.n	800948c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009488:	2300      	movs	r3, #0
 800948a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800948c:	e02f      	b.n	80094ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2200      	movs	r2, #0
 8009496:	2180      	movs	r1, #128	@ 0x80
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 ff5e 	bl	800a35a <UART_WaitOnFlagUntilTimeout>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d004      	beq.n	80094ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2220      	movs	r2, #32
 80094a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e03b      	b.n	8009526 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10b      	bne.n	80094cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	461a      	mov	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	3302      	adds	r3, #2
 80094c8:	61bb      	str	r3, [r7, #24]
 80094ca:	e007      	b.n	80094dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	781a      	ldrb	r2, [r3, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	3301      	adds	r3, #1
 80094da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1c9      	bne.n	800948e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2200      	movs	r2, #0
 8009502:	2140      	movs	r1, #64	@ 0x40
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 ff28 	bl	800a35a <UART_WaitOnFlagUntilTimeout>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d004      	beq.n	800951a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2220      	movs	r2, #32
 8009514:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e005      	b.n	8009526 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2220      	movs	r2, #32
 800951e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	e000      	b.n	8009526 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009524:	2302      	movs	r3, #2
  }
}
 8009526:	4618      	mov	r0, r3
 8009528:	3720      	adds	r7, #32
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009530:	b480      	push	{r7}
 8009532:	b08b      	sub	sp, #44	@ 0x2c
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	4613      	mov	r3, r2
 800953c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009542:	2b20      	cmp	r3, #32
 8009544:	d147      	bne.n	80095d6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <HAL_UART_Transmit_IT+0x22>
 800954c:	88fb      	ldrh	r3, [r7, #6]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e040      	b.n	80095d8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2221      	movs	r2, #33	@ 0x21
 800957e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009588:	d107      	bne.n	800959a <HAL_UART_Transmit_IT+0x6a>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d103      	bne.n	800959a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	4a13      	ldr	r2, [pc, #76]	@ (80095e4 <HAL_UART_Transmit_IT+0xb4>)
 8009596:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009598:	e002      	b.n	80095a0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4a12      	ldr	r2, [pc, #72]	@ (80095e8 <HAL_UART_Transmit_IT+0xb8>)
 800959e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	613b      	str	r3, [r7, #16]
   return(result);
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095be:	623b      	str	r3, [r7, #32]
 80095c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	69f9      	ldr	r1, [r7, #28]
 80095c4:	6a3a      	ldr	r2, [r7, #32]
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e6      	bne.n	80095a0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	e000      	b.n	80095d8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80095d6:	2302      	movs	r3, #2
  }
}
 80095d8:	4618      	mov	r0, r3
 80095da:	372c      	adds	r7, #44	@ 0x2c
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	0800a9b1 	.word	0x0800a9b1
 80095e8:	0800a8fb 	.word	0x0800a8fb

080095ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	@ 0x28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	4613      	mov	r3, r2
 80095f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009600:	2b20      	cmp	r3, #32
 8009602:	d132      	bne.n	800966a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <HAL_UART_Receive_DMA+0x24>
 800960a:	88fb      	ldrh	r3, [r7, #6]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e02b      	b.n	800966c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d018      	beq.n	800965a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	613b      	str	r3, [r7, #16]
   return(result);
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009646:	623b      	str	r3, [r7, #32]
 8009648:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	69f9      	ldr	r1, [r7, #28]
 800964c:	6a3a      	ldr	r2, [r7, #32]
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	61bb      	str	r3, [r7, #24]
   return(result);
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e6      	bne.n	8009628 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800965a:	88fb      	ldrh	r3, [r7, #6]
 800965c:	461a      	mov	r2, r3
 800965e:	68b9      	ldr	r1, [r7, #8]
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 fee7 	bl	800a434 <UART_Start_Receive_DMA>
 8009666:	4603      	mov	r3, r0
 8009668:	e000      	b.n	800966c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800966a:	2302      	movs	r3, #2
  }
}
 800966c:	4618      	mov	r0, r3
 800966e:	3728      	adds	r7, #40	@ 0x28
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b0ba      	sub	sp, #232	@ 0xe8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800969a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800969e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80096a2:	4013      	ands	r3, r2
 80096a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80096a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d115      	bne.n	80096dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00f      	beq.n	80096dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c0:	f003 0320 	and.w	r3, r3, #32
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d009      	beq.n	80096dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 82b1 	beq.w	8009c34 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	4798      	blx	r3
      }
      return;
 80096da:	e2ab      	b.n	8009c34 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 8117 	beq.w	8009914 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80096e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80096f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80096f6:	4b85      	ldr	r3, [pc, #532]	@ (800990c <HAL_UART_IRQHandler+0x298>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 810a 	beq.w	8009914 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d011      	beq.n	8009730 <HAL_UART_IRQHandler+0xbc>
 800970c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2201      	movs	r2, #1
 800971e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009726:	f043 0201 	orr.w	r2, r3, #1
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d011      	beq.n	8009760 <HAL_UART_IRQHandler+0xec>
 800973c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2202      	movs	r2, #2
 800974e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009756:	f043 0204 	orr.w	r2, r3, #4
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d011      	beq.n	8009790 <HAL_UART_IRQHandler+0x11c>
 800976c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2204      	movs	r2, #4
 800977e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009786:	f043 0202 	orr.w	r2, r3, #2
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b00      	cmp	r3, #0
 800979a:	d017      	beq.n	80097cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800979c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d105      	bne.n	80097b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80097a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00b      	beq.n	80097cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2208      	movs	r2, #8
 80097ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097c2:	f043 0208 	orr.w	r2, r3, #8
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d012      	beq.n	80097fe <HAL_UART_IRQHandler+0x18a>
 80097d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00c      	beq.n	80097fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097f4:	f043 0220 	orr.w	r2, r3, #32
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8217 	beq.w	8009c38 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800980a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00d      	beq.n	8009832 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009838:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009846:	2b40      	cmp	r3, #64	@ 0x40
 8009848:	d005      	beq.n	8009856 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800984a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800984e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009852:	2b00      	cmp	r3, #0
 8009854:	d04f      	beq.n	80098f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 feb2 	bl	800a5c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009866:	2b40      	cmp	r3, #64	@ 0x40
 8009868:	d141      	bne.n	80098ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3308      	adds	r3, #8
 8009870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3308      	adds	r3, #8
 8009892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009896:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800989a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1d9      	bne.n	800986a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d013      	beq.n	80098e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098c2:	4a13      	ldr	r2, [pc, #76]	@ (8009910 <HAL_UART_IRQHandler+0x29c>)
 80098c4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7f9 fcd0 	bl	8003270 <HAL_DMA_Abort_IT>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d017      	beq.n	8009906 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80098e0:	4610      	mov	r0, r2
 80098e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e4:	e00f      	b.n	8009906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f9c4 	bl	8009c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ec:	e00b      	b.n	8009906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f9c0 	bl	8009c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f4:	e007      	b.n	8009906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f9bc 	bl	8009c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009904:	e198      	b.n	8009c38 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009906:	bf00      	nop
    return;
 8009908:	e196      	b.n	8009c38 <HAL_UART_IRQHandler+0x5c4>
 800990a:	bf00      	nop
 800990c:	04000120 	.word	0x04000120
 8009910:	0800a8d7 	.word	0x0800a8d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009918:	2b01      	cmp	r3, #1
 800991a:	f040 8166 	bne.w	8009bea <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800991e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009922:	f003 0310 	and.w	r3, r3, #16
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 815f 	beq.w	8009bea <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800992c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 8158 	beq.w	8009bea <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2210      	movs	r2, #16
 8009940:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994c:	2b40      	cmp	r3, #64	@ 0x40
 800994e:	f040 80d0 	bne.w	8009af2 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800995e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 80ab 	beq.w	8009abe <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800996e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009972:	429a      	cmp	r2, r3
 8009974:	f080 80a3 	bcs.w	8009abe <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800997e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800998c:	f000 8086 	beq.w	8009a9c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009998:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	461a      	mov	r2, r3
 80099b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1da      	bne.n	8009990 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3308      	adds	r3, #8
 80099e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80099ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099ec:	f023 0301 	bic.w	r3, r3, #1
 80099f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3308      	adds	r3, #8
 80099fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80099fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e1      	bne.n	80099da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3308      	adds	r3, #8
 8009a36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e3      	bne.n	8009a16 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a64:	e853 3f00 	ldrex	r3, [r3]
 8009a68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a6c:	f023 0310 	bic.w	r3, r3, #16
 8009a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e4      	bne.n	8009a5c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7f9 fb7a 	bl	8003190 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f8e6 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009abc:	e0be      	b.n	8009c3c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ac4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	f040 80b7 	bne.w	8009c3c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ad8:	f040 80b0 	bne.w	8009c3c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f8cc 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
      return;
 8009af0:	e0a4      	b.n	8009c3c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 8096 	beq.w	8009c40 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8009b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 8091 	beq.w	8009c40 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e4      	bne.n	8009b1e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	3308      	adds	r3, #8
 8009b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	623b      	str	r3, [r7, #32]
   return(result);
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	f023 0301 	bic.w	r3, r3, #1
 8009b6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3308      	adds	r3, #8
 8009b74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b78:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b80:	e841 2300 	strex	r3, r2, [r1]
 8009b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1e3      	bne.n	8009b54 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2220      	movs	r2, #32
 8009b90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f023 0310 	bic.w	r3, r3, #16
 8009bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009bc2:	61fb      	str	r3, [r7, #28]
 8009bc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc6:	69b9      	ldr	r1, [r7, #24]
 8009bc8:	69fa      	ldr	r2, [r7, #28]
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	617b      	str	r3, [r7, #20]
   return(result);
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e4      	bne.n	8009ba0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009be0:	4619      	mov	r1, r3
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f850 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009be8:	e02a      	b.n	8009c40 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00e      	beq.n	8009c14 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d008      	beq.n	8009c14 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d01c      	beq.n	8009c44 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	4798      	blx	r3
    }
    return;
 8009c12:	e017      	b.n	8009c44 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d012      	beq.n	8009c46 <HAL_UART_IRQHandler+0x5d2>
 8009c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00c      	beq.n	8009c46 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 ff1f 	bl	800aa70 <UART_EndTransmit_IT>
    return;
 8009c32:	e008      	b.n	8009c46 <HAL_UART_IRQHandler+0x5d2>
      return;
 8009c34:	bf00      	nop
 8009c36:	e006      	b.n	8009c46 <HAL_UART_IRQHandler+0x5d2>
    return;
 8009c38:	bf00      	nop
 8009c3a:	e004      	b.n	8009c46 <HAL_UART_IRQHandler+0x5d2>
      return;
 8009c3c:	bf00      	nop
 8009c3e:	e002      	b.n	8009c46 <HAL_UART_IRQHandler+0x5d2>
      return;
 8009c40:	bf00      	nop
 8009c42:	e000      	b.n	8009c46 <HAL_UART_IRQHandler+0x5d2>
    return;
 8009c44:	bf00      	nop
  }

}
 8009c46:	37e8      	adds	r7, #232	@ 0xe8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4ba6      	ldr	r3, [pc, #664]	@ (8009f64 <UART_SetConfig+0x2c4>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6812      	ldr	r2, [r2, #0]
 8009cd2:	6979      	ldr	r1, [r7, #20]
 8009cd4:	430b      	orrs	r3, r1
 8009cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a94      	ldr	r2, [pc, #592]	@ (8009f68 <UART_SetConfig+0x2c8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d120      	bne.n	8009d5e <UART_SetConfig+0xbe>
 8009d1c:	4b93      	ldr	r3, [pc, #588]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d816      	bhi.n	8009d58 <UART_SetConfig+0xb8>
 8009d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <UART_SetConfig+0x90>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d41 	.word	0x08009d41
 8009d34:	08009d4d 	.word	0x08009d4d
 8009d38:	08009d47 	.word	0x08009d47
 8009d3c:	08009d53 	.word	0x08009d53
 8009d40:	2301      	movs	r3, #1
 8009d42:	77fb      	strb	r3, [r7, #31]
 8009d44:	e150      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009d46:	2302      	movs	r3, #2
 8009d48:	77fb      	strb	r3, [r7, #31]
 8009d4a:	e14d      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009d4c:	2304      	movs	r3, #4
 8009d4e:	77fb      	strb	r3, [r7, #31]
 8009d50:	e14a      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009d52:	2308      	movs	r3, #8
 8009d54:	77fb      	strb	r3, [r7, #31]
 8009d56:	e147      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009d58:	2310      	movs	r3, #16
 8009d5a:	77fb      	strb	r3, [r7, #31]
 8009d5c:	e144      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a83      	ldr	r2, [pc, #524]	@ (8009f70 <UART_SetConfig+0x2d0>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d132      	bne.n	8009dce <UART_SetConfig+0x12e>
 8009d68:	4b80      	ldr	r3, [pc, #512]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d6e:	f003 030c 	and.w	r3, r3, #12
 8009d72:	2b0c      	cmp	r3, #12
 8009d74:	d828      	bhi.n	8009dc8 <UART_SetConfig+0x128>
 8009d76:	a201      	add	r2, pc, #4	@ (adr r2, 8009d7c <UART_SetConfig+0xdc>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009db1 	.word	0x08009db1
 8009d80:	08009dc9 	.word	0x08009dc9
 8009d84:	08009dc9 	.word	0x08009dc9
 8009d88:	08009dc9 	.word	0x08009dc9
 8009d8c:	08009dbd 	.word	0x08009dbd
 8009d90:	08009dc9 	.word	0x08009dc9
 8009d94:	08009dc9 	.word	0x08009dc9
 8009d98:	08009dc9 	.word	0x08009dc9
 8009d9c:	08009db7 	.word	0x08009db7
 8009da0:	08009dc9 	.word	0x08009dc9
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009dc9 	.word	0x08009dc9
 8009dac:	08009dc3 	.word	0x08009dc3
 8009db0:	2300      	movs	r3, #0
 8009db2:	77fb      	strb	r3, [r7, #31]
 8009db4:	e118      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009db6:	2302      	movs	r3, #2
 8009db8:	77fb      	strb	r3, [r7, #31]
 8009dba:	e115      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	77fb      	strb	r3, [r7, #31]
 8009dc0:	e112      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	77fb      	strb	r3, [r7, #31]
 8009dc6:	e10f      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	77fb      	strb	r3, [r7, #31]
 8009dcc:	e10c      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a68      	ldr	r2, [pc, #416]	@ (8009f74 <UART_SetConfig+0x2d4>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d120      	bne.n	8009e1a <UART_SetConfig+0x17a>
 8009dd8:	4b64      	ldr	r3, [pc, #400]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dde:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009de2:	2b30      	cmp	r3, #48	@ 0x30
 8009de4:	d013      	beq.n	8009e0e <UART_SetConfig+0x16e>
 8009de6:	2b30      	cmp	r3, #48	@ 0x30
 8009de8:	d814      	bhi.n	8009e14 <UART_SetConfig+0x174>
 8009dea:	2b20      	cmp	r3, #32
 8009dec:	d009      	beq.n	8009e02 <UART_SetConfig+0x162>
 8009dee:	2b20      	cmp	r3, #32
 8009df0:	d810      	bhi.n	8009e14 <UART_SetConfig+0x174>
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <UART_SetConfig+0x15c>
 8009df6:	2b10      	cmp	r3, #16
 8009df8:	d006      	beq.n	8009e08 <UART_SetConfig+0x168>
 8009dfa:	e00b      	b.n	8009e14 <UART_SetConfig+0x174>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	77fb      	strb	r3, [r7, #31]
 8009e00:	e0f2      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e02:	2302      	movs	r3, #2
 8009e04:	77fb      	strb	r3, [r7, #31]
 8009e06:	e0ef      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	77fb      	strb	r3, [r7, #31]
 8009e0c:	e0ec      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e0e:	2308      	movs	r3, #8
 8009e10:	77fb      	strb	r3, [r7, #31]
 8009e12:	e0e9      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e14:	2310      	movs	r3, #16
 8009e16:	77fb      	strb	r3, [r7, #31]
 8009e18:	e0e6      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a56      	ldr	r2, [pc, #344]	@ (8009f78 <UART_SetConfig+0x2d8>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d120      	bne.n	8009e66 <UART_SetConfig+0x1c6>
 8009e24:	4b51      	ldr	r3, [pc, #324]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009e2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e30:	d013      	beq.n	8009e5a <UART_SetConfig+0x1ba>
 8009e32:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e34:	d814      	bhi.n	8009e60 <UART_SetConfig+0x1c0>
 8009e36:	2b80      	cmp	r3, #128	@ 0x80
 8009e38:	d009      	beq.n	8009e4e <UART_SetConfig+0x1ae>
 8009e3a:	2b80      	cmp	r3, #128	@ 0x80
 8009e3c:	d810      	bhi.n	8009e60 <UART_SetConfig+0x1c0>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <UART_SetConfig+0x1a8>
 8009e42:	2b40      	cmp	r3, #64	@ 0x40
 8009e44:	d006      	beq.n	8009e54 <UART_SetConfig+0x1b4>
 8009e46:	e00b      	b.n	8009e60 <UART_SetConfig+0x1c0>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	77fb      	strb	r3, [r7, #31]
 8009e4c:	e0cc      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e4e:	2302      	movs	r3, #2
 8009e50:	77fb      	strb	r3, [r7, #31]
 8009e52:	e0c9      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e54:	2304      	movs	r3, #4
 8009e56:	77fb      	strb	r3, [r7, #31]
 8009e58:	e0c6      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e5a:	2308      	movs	r3, #8
 8009e5c:	77fb      	strb	r3, [r7, #31]
 8009e5e:	e0c3      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e60:	2310      	movs	r3, #16
 8009e62:	77fb      	strb	r3, [r7, #31]
 8009e64:	e0c0      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a44      	ldr	r2, [pc, #272]	@ (8009f7c <UART_SetConfig+0x2dc>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d125      	bne.n	8009ebc <UART_SetConfig+0x21c>
 8009e70:	4b3e      	ldr	r3, [pc, #248]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e7e:	d017      	beq.n	8009eb0 <UART_SetConfig+0x210>
 8009e80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e84:	d817      	bhi.n	8009eb6 <UART_SetConfig+0x216>
 8009e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e8a:	d00b      	beq.n	8009ea4 <UART_SetConfig+0x204>
 8009e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e90:	d811      	bhi.n	8009eb6 <UART_SetConfig+0x216>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d003      	beq.n	8009e9e <UART_SetConfig+0x1fe>
 8009e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e9a:	d006      	beq.n	8009eaa <UART_SetConfig+0x20a>
 8009e9c:	e00b      	b.n	8009eb6 <UART_SetConfig+0x216>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	77fb      	strb	r3, [r7, #31]
 8009ea2:	e0a1      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	77fb      	strb	r3, [r7, #31]
 8009ea8:	e09e      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009eaa:	2304      	movs	r3, #4
 8009eac:	77fb      	strb	r3, [r7, #31]
 8009eae:	e09b      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	77fb      	strb	r3, [r7, #31]
 8009eb4:	e098      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009eb6:	2310      	movs	r3, #16
 8009eb8:	77fb      	strb	r3, [r7, #31]
 8009eba:	e095      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8009f80 <UART_SetConfig+0x2e0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d125      	bne.n	8009f12 <UART_SetConfig+0x272>
 8009ec6:	4b29      	ldr	r3, [pc, #164]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ecc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ed0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ed4:	d017      	beq.n	8009f06 <UART_SetConfig+0x266>
 8009ed6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009eda:	d817      	bhi.n	8009f0c <UART_SetConfig+0x26c>
 8009edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ee0:	d00b      	beq.n	8009efa <UART_SetConfig+0x25a>
 8009ee2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ee6:	d811      	bhi.n	8009f0c <UART_SetConfig+0x26c>
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d003      	beq.n	8009ef4 <UART_SetConfig+0x254>
 8009eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ef0:	d006      	beq.n	8009f00 <UART_SetConfig+0x260>
 8009ef2:	e00b      	b.n	8009f0c <UART_SetConfig+0x26c>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	77fb      	strb	r3, [r7, #31]
 8009ef8:	e076      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009efa:	2302      	movs	r3, #2
 8009efc:	77fb      	strb	r3, [r7, #31]
 8009efe:	e073      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f00:	2304      	movs	r3, #4
 8009f02:	77fb      	strb	r3, [r7, #31]
 8009f04:	e070      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f06:	2308      	movs	r3, #8
 8009f08:	77fb      	strb	r3, [r7, #31]
 8009f0a:	e06d      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	77fb      	strb	r3, [r7, #31]
 8009f10:	e06a      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a1b      	ldr	r2, [pc, #108]	@ (8009f84 <UART_SetConfig+0x2e4>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d138      	bne.n	8009f8e <UART_SetConfig+0x2ee>
 8009f1c:	4b13      	ldr	r3, [pc, #76]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009f26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f2a:	d017      	beq.n	8009f5c <UART_SetConfig+0x2bc>
 8009f2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f30:	d82a      	bhi.n	8009f88 <UART_SetConfig+0x2e8>
 8009f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f36:	d00b      	beq.n	8009f50 <UART_SetConfig+0x2b0>
 8009f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f3c:	d824      	bhi.n	8009f88 <UART_SetConfig+0x2e8>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <UART_SetConfig+0x2aa>
 8009f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f46:	d006      	beq.n	8009f56 <UART_SetConfig+0x2b6>
 8009f48:	e01e      	b.n	8009f88 <UART_SetConfig+0x2e8>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	77fb      	strb	r3, [r7, #31]
 8009f4e:	e04b      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f50:	2302      	movs	r3, #2
 8009f52:	77fb      	strb	r3, [r7, #31]
 8009f54:	e048      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f56:	2304      	movs	r3, #4
 8009f58:	77fb      	strb	r3, [r7, #31]
 8009f5a:	e045      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f5c:	2308      	movs	r3, #8
 8009f5e:	77fb      	strb	r3, [r7, #31]
 8009f60:	e042      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f62:	bf00      	nop
 8009f64:	efff69f3 	.word	0xefff69f3
 8009f68:	40011000 	.word	0x40011000
 8009f6c:	40023800 	.word	0x40023800
 8009f70:	40004400 	.word	0x40004400
 8009f74:	40004800 	.word	0x40004800
 8009f78:	40004c00 	.word	0x40004c00
 8009f7c:	40005000 	.word	0x40005000
 8009f80:	40011400 	.word	0x40011400
 8009f84:	40007800 	.word	0x40007800
 8009f88:	2310      	movs	r3, #16
 8009f8a:	77fb      	strb	r3, [r7, #31]
 8009f8c:	e02c      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a72      	ldr	r2, [pc, #456]	@ (800a15c <UART_SetConfig+0x4bc>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d125      	bne.n	8009fe4 <UART_SetConfig+0x344>
 8009f98:	4b71      	ldr	r3, [pc, #452]	@ (800a160 <UART_SetConfig+0x4c0>)
 8009f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009fa2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009fa6:	d017      	beq.n	8009fd8 <UART_SetConfig+0x338>
 8009fa8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009fac:	d817      	bhi.n	8009fde <UART_SetConfig+0x33e>
 8009fae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fb2:	d00b      	beq.n	8009fcc <UART_SetConfig+0x32c>
 8009fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fb8:	d811      	bhi.n	8009fde <UART_SetConfig+0x33e>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <UART_SetConfig+0x326>
 8009fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fc2:	d006      	beq.n	8009fd2 <UART_SetConfig+0x332>
 8009fc4:	e00b      	b.n	8009fde <UART_SetConfig+0x33e>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	77fb      	strb	r3, [r7, #31]
 8009fca:	e00d      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	77fb      	strb	r3, [r7, #31]
 8009fd0:	e00a      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009fd2:	2304      	movs	r3, #4
 8009fd4:	77fb      	strb	r3, [r7, #31]
 8009fd6:	e007      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009fd8:	2308      	movs	r3, #8
 8009fda:	77fb      	strb	r3, [r7, #31]
 8009fdc:	e004      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009fde:	2310      	movs	r3, #16
 8009fe0:	77fb      	strb	r3, [r7, #31]
 8009fe2:	e001      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ff0:	d15b      	bne.n	800a0aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009ff2:	7ffb      	ldrb	r3, [r7, #31]
 8009ff4:	2b08      	cmp	r3, #8
 8009ff6:	d828      	bhi.n	800a04a <UART_SetConfig+0x3aa>
 8009ff8:	a201      	add	r2, pc, #4	@ (adr r2, 800a000 <UART_SetConfig+0x360>)
 8009ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffe:	bf00      	nop
 800a000:	0800a025 	.word	0x0800a025
 800a004:	0800a02d 	.word	0x0800a02d
 800a008:	0800a035 	.word	0x0800a035
 800a00c:	0800a04b 	.word	0x0800a04b
 800a010:	0800a03b 	.word	0x0800a03b
 800a014:	0800a04b 	.word	0x0800a04b
 800a018:	0800a04b 	.word	0x0800a04b
 800a01c:	0800a04b 	.word	0x0800a04b
 800a020:	0800a043 	.word	0x0800a043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a024:	f7fd fee2 	bl	8007dec <HAL_RCC_GetPCLK1Freq>
 800a028:	61b8      	str	r0, [r7, #24]
        break;
 800a02a:	e013      	b.n	800a054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a02c:	f7fd fef2 	bl	8007e14 <HAL_RCC_GetPCLK2Freq>
 800a030:	61b8      	str	r0, [r7, #24]
        break;
 800a032:	e00f      	b.n	800a054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a034:	4b4b      	ldr	r3, [pc, #300]	@ (800a164 <UART_SetConfig+0x4c4>)
 800a036:	61bb      	str	r3, [r7, #24]
        break;
 800a038:	e00c      	b.n	800a054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a03a:	f7fd fe05 	bl	8007c48 <HAL_RCC_GetSysClockFreq>
 800a03e:	61b8      	str	r0, [r7, #24]
        break;
 800a040:	e008      	b.n	800a054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a046:	61bb      	str	r3, [r7, #24]
        break;
 800a048:	e004      	b.n	800a054 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	77bb      	strb	r3, [r7, #30]
        break;
 800a052:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d074      	beq.n	800a144 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	005a      	lsls	r2, r3, #1
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	085b      	lsrs	r3, r3, #1
 800a064:	441a      	add	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a06e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	2b0f      	cmp	r3, #15
 800a074:	d916      	bls.n	800a0a4 <UART_SetConfig+0x404>
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a07c:	d212      	bcs.n	800a0a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	b29b      	uxth	r3, r3
 800a082:	f023 030f 	bic.w	r3, r3, #15
 800a086:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	085b      	lsrs	r3, r3, #1
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f003 0307 	and.w	r3, r3, #7
 800a092:	b29a      	uxth	r2, r3
 800a094:	89fb      	ldrh	r3, [r7, #14]
 800a096:	4313      	orrs	r3, r2
 800a098:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	89fa      	ldrh	r2, [r7, #14]
 800a0a0:	60da      	str	r2, [r3, #12]
 800a0a2:	e04f      	b.n	800a144 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	77bb      	strb	r3, [r7, #30]
 800a0a8:	e04c      	b.n	800a144 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0aa:	7ffb      	ldrb	r3, [r7, #31]
 800a0ac:	2b08      	cmp	r3, #8
 800a0ae:	d828      	bhi.n	800a102 <UART_SetConfig+0x462>
 800a0b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b8 <UART_SetConfig+0x418>)
 800a0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b6:	bf00      	nop
 800a0b8:	0800a0dd 	.word	0x0800a0dd
 800a0bc:	0800a0e5 	.word	0x0800a0e5
 800a0c0:	0800a0ed 	.word	0x0800a0ed
 800a0c4:	0800a103 	.word	0x0800a103
 800a0c8:	0800a0f3 	.word	0x0800a0f3
 800a0cc:	0800a103 	.word	0x0800a103
 800a0d0:	0800a103 	.word	0x0800a103
 800a0d4:	0800a103 	.word	0x0800a103
 800a0d8:	0800a0fb 	.word	0x0800a0fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0dc:	f7fd fe86 	bl	8007dec <HAL_RCC_GetPCLK1Freq>
 800a0e0:	61b8      	str	r0, [r7, #24]
        break;
 800a0e2:	e013      	b.n	800a10c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0e4:	f7fd fe96 	bl	8007e14 <HAL_RCC_GetPCLK2Freq>
 800a0e8:	61b8      	str	r0, [r7, #24]
        break;
 800a0ea:	e00f      	b.n	800a10c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a164 <UART_SetConfig+0x4c4>)
 800a0ee:	61bb      	str	r3, [r7, #24]
        break;
 800a0f0:	e00c      	b.n	800a10c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0f2:	f7fd fda9 	bl	8007c48 <HAL_RCC_GetSysClockFreq>
 800a0f6:	61b8      	str	r0, [r7, #24]
        break;
 800a0f8:	e008      	b.n	800a10c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0fe:	61bb      	str	r3, [r7, #24]
        break;
 800a100:	e004      	b.n	800a10c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	77bb      	strb	r3, [r7, #30]
        break;
 800a10a:	bf00      	nop
    }

    if (pclk != 0U)
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d018      	beq.n	800a144 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	085a      	lsrs	r2, r3, #1
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	441a      	add	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	fbb2 f3f3 	udiv	r3, r2, r3
 800a124:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	2b0f      	cmp	r3, #15
 800a12a:	d909      	bls.n	800a140 <UART_SetConfig+0x4a0>
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a132:	d205      	bcs.n	800a140 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	b29a      	uxth	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60da      	str	r2, [r3, #12]
 800a13e:	e001      	b.n	800a144 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a150:	7fbb      	ldrb	r3, [r7, #30]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3720      	adds	r7, #32
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	40007c00 	.word	0x40007c00
 800a160:	40023800 	.word	0x40023800
 800a164:	00f42400 	.word	0x00f42400

0800a168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a174:	f003 0308 	and.w	r3, r3, #8
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00a      	beq.n	800a192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	430a      	orrs	r2, r1
 800a190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00a      	beq.n	800a1b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b8:	f003 0302 	and.w	r3, r3, #2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00a      	beq.n	800a1d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1da:	f003 0304 	and.w	r3, r3, #4
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00a      	beq.n	800a1f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	430a      	orrs	r2, r1
 800a1f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1fc:	f003 0310 	and.w	r3, r3, #16
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00a      	beq.n	800a21a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	430a      	orrs	r2, r1
 800a218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21e:	f003 0320 	and.w	r3, r3, #32
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	430a      	orrs	r2, r1
 800a23a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a244:	2b00      	cmp	r3, #0
 800a246:	d01a      	beq.n	800a27e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a266:	d10a      	bne.n	800a27e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	605a      	str	r2, [r3, #4]
  }
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08c      	sub	sp, #48	@ 0x30
 800a2b0:	af02      	add	r7, sp, #8
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2bc:	f7f8 f8a6 	bl	800240c <HAL_GetTick>
 800a2c0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0308 	and.w	r3, r3, #8
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d12e      	bne.n	800a32e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f83b 	bl	800a35a <UART_WaitOnFlagUntilTimeout>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d021      	beq.n	800a32e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2fe:	623b      	str	r3, [r7, #32]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	461a      	mov	r2, r3
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	61fb      	str	r3, [r7, #28]
 800a30a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	69b9      	ldr	r1, [r7, #24]
 800a30e:	69fa      	ldr	r2, [r7, #28]
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	617b      	str	r3, [r7, #20]
   return(result);
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e6      	bne.n	800a2ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2220      	movs	r2, #32
 800a320:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e011      	b.n	800a352 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2220      	movs	r2, #32
 800a332:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2220      	movs	r2, #32
 800a338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3728      	adds	r7, #40	@ 0x28
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	60f8      	str	r0, [r7, #12]
 800a362:	60b9      	str	r1, [r7, #8]
 800a364:	603b      	str	r3, [r7, #0]
 800a366:	4613      	mov	r3, r2
 800a368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a36a:	e04f      	b.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a372:	d04b      	beq.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a374:	f7f8 f84a 	bl	800240c <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	429a      	cmp	r2, r3
 800a382:	d302      	bcc.n	800a38a <UART_WaitOnFlagUntilTimeout+0x30>
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e04e      	b.n	800a42c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0304 	and.w	r3, r3, #4
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d037      	beq.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b80      	cmp	r3, #128	@ 0x80
 800a3a0:	d034      	beq.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b40      	cmp	r3, #64	@ 0x40
 800a3a6:	d031      	beq.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	f003 0308 	and.w	r3, r3, #8
 800a3b2:	2b08      	cmp	r3, #8
 800a3b4:	d110      	bne.n	800a3d8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2208      	movs	r2, #8
 800a3bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f8fe 	bl	800a5c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2208      	movs	r2, #8
 800a3c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e029      	b.n	800a42c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3e6:	d111      	bne.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 f8e4 	bl	800a5c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2220      	movs	r2, #32
 800a3fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e00f      	b.n	800a42c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	69da      	ldr	r2, [r3, #28]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	4013      	ands	r3, r2
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	429a      	cmp	r2, r3
 800a41a:	bf0c      	ite	eq
 800a41c:	2301      	moveq	r3, #1
 800a41e:	2300      	movne	r3, #0
 800a420:	b2db      	uxtb	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	429a      	cmp	r2, r3
 800a428:	d0a0      	beq.n	800a36c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b096      	sub	sp, #88	@ 0x58
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	88fa      	ldrh	r2, [r7, #6]
 800a44c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2222      	movs	r2, #34	@ 0x22
 800a45c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a464:	2b00      	cmp	r3, #0
 800a466:	d028      	beq.n	800a4ba <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a46c:	4a3e      	ldr	r2, [pc, #248]	@ (800a568 <UART_Start_Receive_DMA+0x134>)
 800a46e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a474:	4a3d      	ldr	r2, [pc, #244]	@ (800a56c <UART_Start_Receive_DMA+0x138>)
 800a476:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a47c:	4a3c      	ldr	r2, [pc, #240]	@ (800a570 <UART_Start_Receive_DMA+0x13c>)
 800a47e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a484:	2200      	movs	r2, #0
 800a486:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3324      	adds	r3, #36	@ 0x24
 800a492:	4619      	mov	r1, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a498:	461a      	mov	r2, r3
 800a49a:	88fb      	ldrh	r3, [r7, #6]
 800a49c:	f7f8 fe18 	bl	80030d0 <HAL_DMA_Start_IT>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d009      	beq.n	800a4ba <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2210      	movs	r2, #16
 800a4aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e051      	b.n	800a55e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d018      	beq.n	800a4f4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4e2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a4e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a4ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e6      	bne.n	800a4c2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	e853 3f00 	ldrex	r3, [r3]
 800a502:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a506:	f043 0301 	orr.w	r3, r3, #1
 800a50a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	3308      	adds	r3, #8
 800a512:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a514:	637a      	str	r2, [r7, #52]	@ 0x34
 800a516:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a518:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a51a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a51c:	e841 2300 	strex	r3, r2, [r1]
 800a520:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1e5      	bne.n	800a4f4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	3308      	adds	r3, #8
 800a52e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	e853 3f00 	ldrex	r3, [r3]
 800a536:	613b      	str	r3, [r7, #16]
   return(result);
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a53e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3308      	adds	r3, #8
 800a546:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a548:	623a      	str	r2, [r7, #32]
 800a54a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54c:	69f9      	ldr	r1, [r7, #28]
 800a54e:	6a3a      	ldr	r2, [r7, #32]
 800a550:	e841 2300 	strex	r3, r2, [r1]
 800a554:	61bb      	str	r3, [r7, #24]
   return(result);
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e5      	bne.n	800a528 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3758      	adds	r7, #88	@ 0x58
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	0800a689 	.word	0x0800a689
 800a56c:	0800a7e7 	.word	0x0800a7e7
 800a570:	0800a859 	.word	0x0800a859

0800a574 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a574:	b480      	push	{r7}
 800a576:	b089      	sub	sp, #36	@ 0x24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	60bb      	str	r3, [r7, #8]
   return(result);
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a590:	61fb      	str	r3, [r7, #28]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	61bb      	str	r3, [r7, #24]
 800a59c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59e:	6979      	ldr	r1, [r7, #20]
 800a5a0:	69ba      	ldr	r2, [r7, #24]
 800a5a2:	e841 2300 	strex	r3, r2, [r1]
 800a5a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1e6      	bne.n	800a57c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a5b4:	bf00      	nop
 800a5b6:	3724      	adds	r7, #36	@ 0x24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b095      	sub	sp, #84	@ 0x54
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d0:	e853 3f00 	ldrex	r3, [r3]
 800a5d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a5ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5ee:	e841 2300 	strex	r3, r2, [r1]
 800a5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1e6      	bne.n	800a5c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	3308      	adds	r3, #8
 800a600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	e853 3f00 	ldrex	r3, [r3]
 800a608:	61fb      	str	r3, [r7, #28]
   return(result);
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	f023 0301 	bic.w	r3, r3, #1
 800a610:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3308      	adds	r3, #8
 800a618:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a61a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a61c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a622:	e841 2300 	strex	r3, r2, [r1]
 800a626:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1e5      	bne.n	800a5fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a632:	2b01      	cmp	r3, #1
 800a634:	d118      	bne.n	800a668 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	e853 3f00 	ldrex	r3, [r3]
 800a642:	60bb      	str	r3, [r7, #8]
   return(result);
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f023 0310 	bic.w	r3, r3, #16
 800a64a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	461a      	mov	r2, r3
 800a652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a654:	61bb      	str	r3, [r7, #24]
 800a656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a658:	6979      	ldr	r1, [r7, #20]
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	e841 2300 	strex	r3, r2, [r1]
 800a660:	613b      	str	r3, [r7, #16]
   return(result);
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e6      	bne.n	800a636 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a67c:	bf00      	nop
 800a67e:	3754      	adds	r7, #84	@ 0x54
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b09c      	sub	sp, #112	@ 0x70
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a694:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a69e:	d071      	beq.n	800a784 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a6a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a6b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a6cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a6d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e6      	bne.n	800a6a8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ec:	f023 0301 	bic.w	r3, r3, #1
 800a6f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a6f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a6fa:	643a      	str	r2, [r7, #64]	@ 0x40
 800a6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a700:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e5      	bne.n	800a6da <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a70e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3308      	adds	r3, #8
 800a714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a724:	663b      	str	r3, [r7, #96]	@ 0x60
 800a726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3308      	adds	r3, #8
 800a72c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a72e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a730:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e5      	bne.n	800a70e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a744:	2220      	movs	r2, #32
 800a746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a74a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a74c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d118      	bne.n	800a784 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	e853 3f00 	ldrex	r3, [r3]
 800a75e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	f023 0310 	bic.w	r3, r3, #16
 800a766:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a770:	61bb      	str	r3, [r7, #24]
 800a772:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a774:	6979      	ldr	r1, [r7, #20]
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	e841 2300 	strex	r3, r2, [r1]
 800a77c:	613b      	str	r3, [r7, #16]
   return(result);
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1e6      	bne.n	800a752 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a786:	2200      	movs	r2, #0
 800a788:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a78a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a78c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d122      	bne.n	800a7d8 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800a792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a794:	2200      	movs	r2, #0
 800a796:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800a7a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a7aa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d204      	bcs.n	800a7bc <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800a7b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7b4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800a7b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a7c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a7d2:	f7ff fa59 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7d6:	e002      	b.n	800a7de <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800a7d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a7da:	f014 f9b7 	bl	801eb4c <HAL_UART_RxCpltCallback>
}
 800a7de:	bf00      	nop
 800a7e0:	3770      	adds	r7, #112	@ 0x70
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b084      	sub	sp, #16
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d123      	bne.n	800a84a <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a808:	085b      	lsrs	r3, r3, #1
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a820:	897a      	ldrh	r2, [r7, #10]
 800a822:	429a      	cmp	r2, r3
 800a824:	d803      	bhi.n	800a82e <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	897a      	ldrh	r2, [r7, #10]
 800a82a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	b29b      	uxth	r3, r3
 800a840:	4619      	mov	r1, r3
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff fa20 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a848:	e002      	b.n	800a850 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f7ff fa08 	bl	8009c60 <HAL_UART_RxHalfCpltCallback>
}
 800a850:	bf00      	nop
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a864:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a86a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a872:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a87e:	2b80      	cmp	r3, #128	@ 0x80
 800a880:	d109      	bne.n	800a896 <UART_DMAError+0x3e>
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	2b21      	cmp	r3, #33	@ 0x21
 800a886:	d106      	bne.n	800a896 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a890:	6978      	ldr	r0, [r7, #20]
 800a892:	f7ff fe6f 	bl	800a574 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a0:	2b40      	cmp	r3, #64	@ 0x40
 800a8a2:	d109      	bne.n	800a8b8 <UART_DMAError+0x60>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b22      	cmp	r3, #34	@ 0x22
 800a8a8:	d106      	bne.n	800a8b8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a8b2:	6978      	ldr	r0, [r7, #20]
 800a8b4:	f7ff fe84 	bl	800a5c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8be:	f043 0210 	orr.w	r2, r3, #16
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8c8:	6978      	ldr	r0, [r7, #20]
 800a8ca:	f7ff f9d3 	bl	8009c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8ce:	bf00      	nop
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f7ff f9c1 	bl	8009c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b08f      	sub	sp, #60	@ 0x3c
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a906:	2b21      	cmp	r3, #33	@ 0x21
 800a908:	d14c      	bne.n	800a9a4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a910:	b29b      	uxth	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	d132      	bne.n	800a97c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	e853 3f00 	ldrex	r3, [r3]
 800a922:	61fb      	str	r3, [r7, #28]
   return(result);
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a92a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	461a      	mov	r2, r3
 800a932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a936:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a93a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a93c:	e841 2300 	strex	r3, r2, [r1]
 800a940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e6      	bne.n	800a916 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	e853 3f00 	ldrex	r3, [r3]
 800a954:	60bb      	str	r3, [r7, #8]
   return(result);
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a95c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a966:	61bb      	str	r3, [r7, #24]
 800a968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96a:	6979      	ldr	r1, [r7, #20]
 800a96c:	69ba      	ldr	r2, [r7, #24]
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	613b      	str	r3, [r7, #16]
   return(result);
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1e6      	bne.n	800a948 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a97a:	e013      	b.n	800a9a4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a980:	781a      	ldrb	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a98c:	1c5a      	adds	r2, r3, #1
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a998:	b29b      	uxth	r3, r3
 800a99a:	3b01      	subs	r3, #1
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800a9a4:	bf00      	nop
 800a9a6:	373c      	adds	r7, #60	@ 0x3c
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b091      	sub	sp, #68	@ 0x44
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9bc:	2b21      	cmp	r3, #33	@ 0x21
 800a9be:	d151      	bne.n	800aa64 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d132      	bne.n	800aa32 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a9da:	6a3b      	ldr	r3, [r7, #32]
 800a9dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e6      	bne.n	800a9cc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	e853 3f00 	ldrex	r3, [r3]
 800aa0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa12:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1c:	61fb      	str	r3, [r7, #28]
 800aa1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa20:	69b9      	ldr	r1, [r7, #24]
 800aa22:	69fa      	ldr	r2, [r7, #28]
 800aa24:	e841 2300 	strex	r3, r2, [r1]
 800aa28:	617b      	str	r3, [r7, #20]
   return(result);
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1e6      	bne.n	800a9fe <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800aa30:	e018      	b.n	800aa64 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aa38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa3a:	881b      	ldrh	r3, [r3, #0]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa46:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa4c:	1c9a      	adds	r2, r3, #2
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800aa64:	bf00      	nop
 800aa66:	3744      	adds	r7, #68	@ 0x44
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	e853 3f00 	ldrex	r3, [r3]
 800aa84:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa8c:	61fb      	str	r3, [r7, #28]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	61bb      	str	r3, [r7, #24]
 800aa98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9a:	6979      	ldr	r1, [r7, #20]
 800aa9c:	69ba      	ldr	r2, [r7, #24]
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	613b      	str	r3, [r7, #16]
   return(result);
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e6      	bne.n	800aa78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2220      	movs	r2, #32
 800aaae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff f8c8 	bl	8009c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aabc:	bf00      	nop
 800aabe:	3720      	adds	r7, #32
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800aaca:	4b92      	ldr	r3, [pc, #584]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800aacc:	220a      	movs	r2, #10
 800aace:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800aad0:	4b90      	ldr	r3, [pc, #576]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800aad6:	4b8f      	ldr	r3, [pc, #572]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800aad8:	2201      	movs	r2, #1
 800aada:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800aadc:	4b8d      	ldr	r3, [pc, #564]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800aade:	2264      	movs	r2, #100	@ 0x64
 800aae0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800aae2:	4b8d      	ldr	r3, [pc, #564]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800aae4:	22ff      	movs	r2, #255	@ 0xff
 800aae6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800aae8:	4b8b      	ldr	r3, [pc, #556]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800aaea:	22ff      	movs	r2, #255	@ 0xff
 800aaec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800aaee:	4b8a      	ldr	r3, [pc, #552]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800aaf0:	22ff      	movs	r2, #255	@ 0xff
 800aaf2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800aaf4:	4b88      	ldr	r3, [pc, #544]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800aafa:	4b88      	ldr	r3, [pc, #544]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800aafc:	220a      	movs	r2, #10
 800aafe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800ab00:	4b86      	ldr	r3, [pc, #536]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ab06:	4b85      	ldr	r3, [pc, #532]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ab08:	2201      	movs	r2, #1
 800ab0a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800ab0c:	4b83      	ldr	r3, [pc, #524]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ab0e:	2265      	movs	r2, #101	@ 0x65
 800ab10:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ab12:	2100      	movs	r1, #0
 800ab14:	2000      	movs	r0, #0
 800ab16:	f007 fc1b 	bl	8012350 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ab1a:	4b7e      	ldr	r3, [pc, #504]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	061a      	lsls	r2, r3, #24
 800ab20:	4b7c      	ldr	r3, [pc, #496]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab22:	785b      	ldrb	r3, [r3, #1]
 800ab24:	041b      	lsls	r3, r3, #16
 800ab26:	431a      	orrs	r2, r3
 800ab28:	4b7a      	ldr	r3, [pc, #488]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab2a:	789b      	ldrb	r3, [r3, #2]
 800ab2c:	021b      	lsls	r3, r3, #8
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	4a78      	ldr	r2, [pc, #480]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab32:	78d2      	ldrb	r2, [r2, #3]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	061a      	lsls	r2, r3, #24
 800ab38:	4b76      	ldr	r3, [pc, #472]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	0619      	lsls	r1, r3, #24
 800ab3e:	4b75      	ldr	r3, [pc, #468]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab40:	785b      	ldrb	r3, [r3, #1]
 800ab42:	041b      	lsls	r3, r3, #16
 800ab44:	4319      	orrs	r1, r3
 800ab46:	4b73      	ldr	r3, [pc, #460]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab48:	789b      	ldrb	r3, [r3, #2]
 800ab4a:	021b      	lsls	r3, r3, #8
 800ab4c:	430b      	orrs	r3, r1
 800ab4e:	4971      	ldr	r1, [pc, #452]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab50:	78c9      	ldrb	r1, [r1, #3]
 800ab52:	430b      	orrs	r3, r1
 800ab54:	021b      	lsls	r3, r3, #8
 800ab56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	4b6d      	ldr	r3, [pc, #436]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	0619      	lsls	r1, r3, #24
 800ab62:	4b6c      	ldr	r3, [pc, #432]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab64:	785b      	ldrb	r3, [r3, #1]
 800ab66:	041b      	lsls	r3, r3, #16
 800ab68:	4319      	orrs	r1, r3
 800ab6a:	4b6a      	ldr	r3, [pc, #424]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab6c:	789b      	ldrb	r3, [r3, #2]
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	430b      	orrs	r3, r1
 800ab72:	4968      	ldr	r1, [pc, #416]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab74:	78c9      	ldrb	r1, [r1, #3]
 800ab76:	430b      	orrs	r3, r1
 800ab78:	0a1b      	lsrs	r3, r3, #8
 800ab7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	4b64      	ldr	r3, [pc, #400]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	0619      	lsls	r1, r3, #24
 800ab86:	4b63      	ldr	r3, [pc, #396]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab88:	785b      	ldrb	r3, [r3, #1]
 800ab8a:	041b      	lsls	r3, r3, #16
 800ab8c:	4319      	orrs	r1, r3
 800ab8e:	4b61      	ldr	r3, [pc, #388]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab90:	789b      	ldrb	r3, [r3, #2]
 800ab92:	021b      	lsls	r3, r3, #8
 800ab94:	430b      	orrs	r3, r1
 800ab96:	495f      	ldr	r1, [pc, #380]	@ (800ad14 <MX_LWIP_Init+0x250>)
 800ab98:	78c9      	ldrb	r1, [r1, #3]
 800ab9a:	430b      	orrs	r3, r1
 800ab9c:	0e1b      	lsrs	r3, r3, #24
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	4a5f      	ldr	r2, [pc, #380]	@ (800ad20 <MX_LWIP_Init+0x25c>)
 800aba2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800aba4:	4b5c      	ldr	r3, [pc, #368]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	061a      	lsls	r2, r3, #24
 800abaa:	4b5b      	ldr	r3, [pc, #364]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abac:	785b      	ldrb	r3, [r3, #1]
 800abae:	041b      	lsls	r3, r3, #16
 800abb0:	431a      	orrs	r2, r3
 800abb2:	4b59      	ldr	r3, [pc, #356]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abb4:	789b      	ldrb	r3, [r3, #2]
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	4313      	orrs	r3, r2
 800abba:	4a57      	ldr	r2, [pc, #348]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abbc:	78d2      	ldrb	r2, [r2, #3]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	061a      	lsls	r2, r3, #24
 800abc2:	4b55      	ldr	r3, [pc, #340]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	0619      	lsls	r1, r3, #24
 800abc8:	4b53      	ldr	r3, [pc, #332]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abca:	785b      	ldrb	r3, [r3, #1]
 800abcc:	041b      	lsls	r3, r3, #16
 800abce:	4319      	orrs	r1, r3
 800abd0:	4b51      	ldr	r3, [pc, #324]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abd2:	789b      	ldrb	r3, [r3, #2]
 800abd4:	021b      	lsls	r3, r3, #8
 800abd6:	430b      	orrs	r3, r1
 800abd8:	494f      	ldr	r1, [pc, #316]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abda:	78c9      	ldrb	r1, [r1, #3]
 800abdc:	430b      	orrs	r3, r1
 800abde:	021b      	lsls	r3, r3, #8
 800abe0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800abe4:	431a      	orrs	r2, r3
 800abe6:	4b4c      	ldr	r3, [pc, #304]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	0619      	lsls	r1, r3, #24
 800abec:	4b4a      	ldr	r3, [pc, #296]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abee:	785b      	ldrb	r3, [r3, #1]
 800abf0:	041b      	lsls	r3, r3, #16
 800abf2:	4319      	orrs	r1, r3
 800abf4:	4b48      	ldr	r3, [pc, #288]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abf6:	789b      	ldrb	r3, [r3, #2]
 800abf8:	021b      	lsls	r3, r3, #8
 800abfa:	430b      	orrs	r3, r1
 800abfc:	4946      	ldr	r1, [pc, #280]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800abfe:	78c9      	ldrb	r1, [r1, #3]
 800ac00:	430b      	orrs	r3, r1
 800ac02:	0a1b      	lsrs	r3, r3, #8
 800ac04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ac08:	431a      	orrs	r2, r3
 800ac0a:	4b43      	ldr	r3, [pc, #268]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	0619      	lsls	r1, r3, #24
 800ac10:	4b41      	ldr	r3, [pc, #260]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800ac12:	785b      	ldrb	r3, [r3, #1]
 800ac14:	041b      	lsls	r3, r3, #16
 800ac16:	4319      	orrs	r1, r3
 800ac18:	4b3f      	ldr	r3, [pc, #252]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800ac1a:	789b      	ldrb	r3, [r3, #2]
 800ac1c:	021b      	lsls	r3, r3, #8
 800ac1e:	430b      	orrs	r3, r1
 800ac20:	493d      	ldr	r1, [pc, #244]	@ (800ad18 <MX_LWIP_Init+0x254>)
 800ac22:	78c9      	ldrb	r1, [r1, #3]
 800ac24:	430b      	orrs	r3, r1
 800ac26:	0e1b      	lsrs	r3, r3, #24
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	4a3e      	ldr	r2, [pc, #248]	@ (800ad24 <MX_LWIP_Init+0x260>)
 800ac2c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ac2e:	4b3b      	ldr	r3, [pc, #236]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	061a      	lsls	r2, r3, #24
 800ac34:	4b39      	ldr	r3, [pc, #228]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac36:	785b      	ldrb	r3, [r3, #1]
 800ac38:	041b      	lsls	r3, r3, #16
 800ac3a:	431a      	orrs	r2, r3
 800ac3c:	4b37      	ldr	r3, [pc, #220]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac3e:	789b      	ldrb	r3, [r3, #2]
 800ac40:	021b      	lsls	r3, r3, #8
 800ac42:	4313      	orrs	r3, r2
 800ac44:	4a35      	ldr	r2, [pc, #212]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac46:	78d2      	ldrb	r2, [r2, #3]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	061a      	lsls	r2, r3, #24
 800ac4c:	4b33      	ldr	r3, [pc, #204]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	0619      	lsls	r1, r3, #24
 800ac52:	4b32      	ldr	r3, [pc, #200]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac54:	785b      	ldrb	r3, [r3, #1]
 800ac56:	041b      	lsls	r3, r3, #16
 800ac58:	4319      	orrs	r1, r3
 800ac5a:	4b30      	ldr	r3, [pc, #192]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac5c:	789b      	ldrb	r3, [r3, #2]
 800ac5e:	021b      	lsls	r3, r3, #8
 800ac60:	430b      	orrs	r3, r1
 800ac62:	492e      	ldr	r1, [pc, #184]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac64:	78c9      	ldrb	r1, [r1, #3]
 800ac66:	430b      	orrs	r3, r1
 800ac68:	021b      	lsls	r3, r3, #8
 800ac6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	4b2a      	ldr	r3, [pc, #168]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	0619      	lsls	r1, r3, #24
 800ac76:	4b29      	ldr	r3, [pc, #164]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac78:	785b      	ldrb	r3, [r3, #1]
 800ac7a:	041b      	lsls	r3, r3, #16
 800ac7c:	4319      	orrs	r1, r3
 800ac7e:	4b27      	ldr	r3, [pc, #156]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac80:	789b      	ldrb	r3, [r3, #2]
 800ac82:	021b      	lsls	r3, r3, #8
 800ac84:	430b      	orrs	r3, r1
 800ac86:	4925      	ldr	r1, [pc, #148]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac88:	78c9      	ldrb	r1, [r1, #3]
 800ac8a:	430b      	orrs	r3, r1
 800ac8c:	0a1b      	lsrs	r3, r3, #8
 800ac8e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ac92:	431a      	orrs	r2, r3
 800ac94:	4b21      	ldr	r3, [pc, #132]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	0619      	lsls	r1, r3, #24
 800ac9a:	4b20      	ldr	r3, [pc, #128]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800ac9c:	785b      	ldrb	r3, [r3, #1]
 800ac9e:	041b      	lsls	r3, r3, #16
 800aca0:	4319      	orrs	r1, r3
 800aca2:	4b1e      	ldr	r3, [pc, #120]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800aca4:	789b      	ldrb	r3, [r3, #2]
 800aca6:	021b      	lsls	r3, r3, #8
 800aca8:	430b      	orrs	r3, r1
 800acaa:	491c      	ldr	r1, [pc, #112]	@ (800ad1c <MX_LWIP_Init+0x258>)
 800acac:	78c9      	ldrb	r1, [r1, #3]
 800acae:	430b      	orrs	r3, r1
 800acb0:	0e1b      	lsrs	r3, r3, #24
 800acb2:	4313      	orrs	r3, r2
 800acb4:	4a1c      	ldr	r2, [pc, #112]	@ (800ad28 <MX_LWIP_Init+0x264>)
 800acb6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800acb8:	4b1c      	ldr	r3, [pc, #112]	@ (800ad2c <MX_LWIP_Init+0x268>)
 800acba:	9302      	str	r3, [sp, #8]
 800acbc:	4b1c      	ldr	r3, [pc, #112]	@ (800ad30 <MX_LWIP_Init+0x26c>)
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	2300      	movs	r3, #0
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	4b18      	ldr	r3, [pc, #96]	@ (800ad28 <MX_LWIP_Init+0x264>)
 800acc6:	4a17      	ldr	r2, [pc, #92]	@ (800ad24 <MX_LWIP_Init+0x260>)
 800acc8:	4915      	ldr	r1, [pc, #84]	@ (800ad20 <MX_LWIP_Init+0x25c>)
 800acca:	481a      	ldr	r0, [pc, #104]	@ (800ad34 <MX_LWIP_Init+0x270>)
 800accc:	f008 f906 	bl	8012edc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800acd0:	4818      	ldr	r0, [pc, #96]	@ (800ad34 <MX_LWIP_Init+0x270>)
 800acd2:	f008 fb97 	bl	8013404 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800acd6:	4817      	ldr	r0, [pc, #92]	@ (800ad34 <MX_LWIP_Init+0x270>)
 800acd8:	f008 fbb8 	bl	801344c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800acdc:	4916      	ldr	r1, [pc, #88]	@ (800ad38 <MX_LWIP_Init+0x274>)
 800acde:	4815      	ldr	r0, [pc, #84]	@ (800ad34 <MX_LWIP_Init+0x270>)
 800ace0:	f008 fcb6 	bl	8013650 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800ace4:	2224      	movs	r2, #36	@ 0x24
 800ace6:	2100      	movs	r1, #0
 800ace8:	4814      	ldr	r0, [pc, #80]	@ (800ad3c <MX_LWIP_Init+0x278>)
 800acea:	f014 f9af 	bl	801f04c <memset>
  attributes.name = "EthLink";
 800acee:	4b13      	ldr	r3, [pc, #76]	@ (800ad3c <MX_LWIP_Init+0x278>)
 800acf0:	4a13      	ldr	r2, [pc, #76]	@ (800ad40 <MX_LWIP_Init+0x27c>)
 800acf2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800acf4:	4b11      	ldr	r3, [pc, #68]	@ (800ad3c <MX_LWIP_Init+0x278>)
 800acf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800acfa:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800acfc:	4b0f      	ldr	r3, [pc, #60]	@ (800ad3c <MX_LWIP_Init+0x278>)
 800acfe:	2210      	movs	r2, #16
 800ad00:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800ad02:	4a0e      	ldr	r2, [pc, #56]	@ (800ad3c <MX_LWIP_Init+0x278>)
 800ad04:	490b      	ldr	r1, [pc, #44]	@ (800ad34 <MX_LWIP_Init+0x270>)
 800ad06:	480f      	ldr	r0, [pc, #60]	@ (800ad44 <MX_LWIP_Init+0x280>)
 800ad08:	f000 fdce 	bl	800b8a8 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ad0c:	bf00      	nop
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	20000b98 	.word	0x20000b98
 800ad18:	20000b9c 	.word	0x20000b9c
 800ad1c:	20000ba0 	.word	0x20000ba0
 800ad20:	20000b8c 	.word	0x20000b8c
 800ad24:	20000b90 	.word	0x20000b90
 800ad28:	20000b94 	.word	0x20000b94
 800ad2c:	08012261 	.word	0x08012261
 800ad30:	0800b289 	.word	0x0800b289
 800ad34:	20000b58 	.word	0x20000b58
 800ad38:	0800ad49 	.word	0x0800ad49
 800ad3c:	20000ba4 	.word	0x20000ba4
 800ad40:	0801fe78 	.word	0x0801fe78
 800ad44:	0800b561 	.word	0x0800b561

0800ad48 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800ad6e:	2320      	movs	r3, #32
 800ad70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ad72:	f3bf 8f4f 	dsb	sy
}
 800ad76:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800ad78:	e00b      	b.n	800ad92 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800ad7a:	4a0d      	ldr	r2, [pc, #52]	@ (800adb0 <SCB_InvalidateDCache_by_Addr+0x54>)
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	4413      	add	r3, r2
 800ad88:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	dcf0      	bgt.n	800ad7a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800ad98:	f3bf 8f4f 	dsb	sy
}
 800ad9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ad9e:	f3bf 8f6f 	isb	sy
}
 800ada2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800ada4:	bf00      	nop
 800ada6:	371c      	adds	r7, #28
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	e000ed00 	.word	0xe000ed00

0800adb4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800adbc:	4b04      	ldr	r3, [pc, #16]	@ (800add0 <HAL_ETH_RxCpltCallback+0x1c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 f9ad 	bl	800c120 <osSemaphoreRelease>
}
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20005554 	.word	0x20005554

0800add4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800addc:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <HAL_ETH_TxCpltCallback+0x1c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f001 f99d 	bl	800c120 <osSemaphoreRelease>
}
 800ade6:	bf00      	nop
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	20005558 	.word	0x20005558

0800adf4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7f9 fb26 	bl	800444e <HAL_ETH_GetDMAError>
 800ae02:	4603      	mov	r3, r0
 800ae04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae08:	2b80      	cmp	r3, #128	@ 0x80
 800ae0a:	d104      	bne.n	800ae16 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800ae0c:	4b04      	ldr	r3, [pc, #16]	@ (800ae20 <HAL_ETH_ErrorCallback+0x2c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f001 f985 	bl	800c120 <osSemaphoreRelease>
  }
}
 800ae16:	bf00      	nop
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	20005554 	.word	0x20005554

0800ae24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b0aa      	sub	sp, #168	@ 0xa8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800ae3e:	f107 0310 	add.w	r3, r7, #16
 800ae42:	2264      	movs	r2, #100	@ 0x64
 800ae44:	2100      	movs	r1, #0
 800ae46:	4618      	mov	r0, r3
 800ae48:	f014 f900 	bl	801f04c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ae4c:	4b89      	ldr	r3, [pc, #548]	@ (800b074 <low_level_init+0x250>)
 800ae4e:	4a8a      	ldr	r2, [pc, #552]	@ (800b078 <low_level_init+0x254>)
 800ae50:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ae52:	2300      	movs	r3, #0
 800ae54:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ae56:	2380      	movs	r3, #128	@ 0x80
 800ae58:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800ae5a:	23e1      	movs	r3, #225	@ 0xe1
 800ae5c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ae62:	2300      	movs	r3, #0
 800ae64:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ae66:	2300      	movs	r3, #0
 800ae68:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ae6a:	4a82      	ldr	r2, [pc, #520]	@ (800b074 <low_level_init+0x250>)
 800ae6c:	f107 0308 	add.w	r3, r7, #8
 800ae70:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ae72:	4b80      	ldr	r3, [pc, #512]	@ (800b074 <low_level_init+0x250>)
 800ae74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800ae78:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ae7a:	4b7e      	ldr	r3, [pc, #504]	@ (800b074 <low_level_init+0x250>)
 800ae7c:	4a7f      	ldr	r2, [pc, #508]	@ (800b07c <low_level_init+0x258>)
 800ae7e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ae80:	4b7c      	ldr	r3, [pc, #496]	@ (800b074 <low_level_init+0x250>)
 800ae82:	4a7f      	ldr	r2, [pc, #508]	@ (800b080 <low_level_init+0x25c>)
 800ae84:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ae86:	4b7b      	ldr	r3, [pc, #492]	@ (800b074 <low_level_init+0x250>)
 800ae88:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ae8c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ae8e:	4879      	ldr	r0, [pc, #484]	@ (800b074 <low_level_init+0x250>)
 800ae90:	f7f8 fc94 	bl	80037bc <HAL_ETH_Init>
 800ae94:	4603      	mov	r3, r0
 800ae96:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ae9a:	2238      	movs	r2, #56	@ 0x38
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	4879      	ldr	r0, [pc, #484]	@ (800b084 <low_level_init+0x260>)
 800aea0:	f014 f8d4 	bl	801f04c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800aea4:	4b77      	ldr	r3, [pc, #476]	@ (800b084 <low_level_init+0x260>)
 800aea6:	2221      	movs	r2, #33	@ 0x21
 800aea8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800aeaa:	4b76      	ldr	r3, [pc, #472]	@ (800b084 <low_level_init+0x260>)
 800aeac:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800aeb0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800aeb2:	4b74      	ldr	r3, [pc, #464]	@ (800b084 <low_level_init+0x260>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800aeb8:	4873      	ldr	r0, [pc, #460]	@ (800b088 <low_level_init+0x264>)
 800aeba:	f007 fec9 	bl	8012c50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2206      	movs	r2, #6
 800aec2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aec6:	4b6b      	ldr	r3, [pc, #428]	@ (800b074 <low_level_init+0x250>)
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	781a      	ldrb	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800aed2:	4b68      	ldr	r3, [pc, #416]	@ (800b074 <low_level_init+0x250>)
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	785a      	ldrb	r2, [r3, #1]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800aede:	4b65      	ldr	r3, [pc, #404]	@ (800b074 <low_level_init+0x250>)
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	789a      	ldrb	r2, [r3, #2]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800aeea:	4b62      	ldr	r3, [pc, #392]	@ (800b074 <low_level_init+0x250>)
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	78da      	ldrb	r2, [r3, #3]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800aef6:	4b5f      	ldr	r3, [pc, #380]	@ (800b074 <low_level_init+0x250>)
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	791a      	ldrb	r2, [r3, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800af02:	4b5c      	ldr	r3, [pc, #368]	@ (800b074 <low_level_init+0x250>)
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	795a      	ldrb	r2, [r3, #5]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800af14:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af1c:	f043 030a 	orr.w	r3, r3, #10
 800af20:	b2da      	uxtb	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800af28:	2200      	movs	r2, #0
 800af2a:	2100      	movs	r1, #0
 800af2c:	2001      	movs	r0, #1
 800af2e:	f000 fff5 	bl	800bf1c <osSemaphoreNew>
 800af32:	4603      	mov	r3, r0
 800af34:	4a55      	ldr	r2, [pc, #340]	@ (800b08c <low_level_init+0x268>)
 800af36:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800af38:	2200      	movs	r2, #0
 800af3a:	2100      	movs	r1, #0
 800af3c:	2001      	movs	r0, #1
 800af3e:	f000 ffed 	bl	800bf1c <osSemaphoreNew>
 800af42:	4603      	mov	r3, r0
 800af44:	4a52      	ldr	r2, [pc, #328]	@ (800b090 <low_level_init+0x26c>)
 800af46:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800af48:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800af4c:	2224      	movs	r2, #36	@ 0x24
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f014 f87b 	bl	801f04c <memset>
  attributes.name = "EthIf";
 800af56:	4b4f      	ldr	r3, [pc, #316]	@ (800b094 <low_level_init+0x270>)
 800af58:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800af5a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800af5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800af62:	2330      	movs	r3, #48	@ 0x30
 800af64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800af68:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800af6c:	461a      	mov	r2, r3
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	4849      	ldr	r0, [pc, #292]	@ (800b098 <low_level_init+0x274>)
 800af72:	f000 fc99 	bl	800b8a8 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800af76:	4949      	ldr	r1, [pc, #292]	@ (800b09c <low_level_init+0x278>)
 800af78:	4849      	ldr	r0, [pc, #292]	@ (800b0a0 <low_level_init+0x27c>)
 800af7a:	f7f7 f920 	bl	80021be <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800af7e:	4848      	ldr	r0, [pc, #288]	@ (800b0a0 <low_level_init+0x27c>)
 800af80:	f7f7 f94f 	bl	8002222 <LAN8742_Init>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d006      	beq.n	800af98 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f008 fb30 	bl	80135f0 <netif_set_link_down>
    netif_set_down(netif);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f008 fac7 	bl	8013524 <netif_set_down>
 800af96:	e06a      	b.n	800b06e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800af98:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d164      	bne.n	800b06a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800afa0:	483f      	ldr	r0, [pc, #252]	@ (800b0a0 <low_level_init+0x27c>)
 800afa2:	f7f7 f98b 	bl	80022bc <LAN8742_GetLinkState>
 800afa6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800afaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afae:	2b01      	cmp	r3, #1
 800afb0:	dc06      	bgt.n	800afc0 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f008 fb1c 	bl	80135f0 <netif_set_link_down>
      netif_set_down(netif);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f008 fab3 	bl	8013524 <netif_set_down>
 800afbe:	e056      	b.n	800b06e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800afc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afc4:	3b02      	subs	r3, #2
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d82a      	bhi.n	800b020 <low_level_init+0x1fc>
 800afca:	a201      	add	r2, pc, #4	@ (adr r2, 800afd0 <low_level_init+0x1ac>)
 800afcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd0:	0800afe1 	.word	0x0800afe1
 800afd4:	0800aff3 	.word	0x0800aff3
 800afd8:	0800b003 	.word	0x0800b003
 800afdc:	0800b013 	.word	0x0800b013
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800afe0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800afe4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800afe8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800afec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800aff0:	e01f      	b.n	800b032 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800aff2:	2300      	movs	r3, #0
 800aff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800aff8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800affc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b000:	e017      	b.n	800b032 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b002:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b00a:	2300      	movs	r3, #0
 800b00c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b010:	e00f      	b.n	800b032 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b012:	2300      	movs	r3, #0
 800b014:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b018:	2300      	movs	r3, #0
 800b01a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b01e:	e008      	b.n	800b032 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800b020:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b024:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b028:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b02c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b030:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b032:	f107 0310 	add.w	r3, r7, #16
 800b036:	4619      	mov	r1, r3
 800b038:	480e      	ldr	r0, [pc, #56]	@ (800b074 <low_level_init+0x250>)
 800b03a:	f7f9 f8a7 	bl	800418c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b03e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b042:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800b044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b04a:	f107 0310 	add.w	r3, r7, #16
 800b04e:	4619      	mov	r1, r3
 800b050:	4808      	ldr	r0, [pc, #32]	@ (800b074 <low_level_init+0x250>)
 800b052:	f7f9 f992 	bl	800437a <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800b056:	4807      	ldr	r0, [pc, #28]	@ (800b074 <low_level_init+0x250>)
 800b058:	f7f8 fc4a 	bl	80038f0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f008 f9f5 	bl	801344c <netif_set_up>
    netif_set_link_up(netif);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f008 fa90 	bl	8013588 <netif_set_link_up>
 800b068:	e001      	b.n	800b06e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800b06a:	f7f6 f913 	bl	8001294 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800b06e:	37a8      	adds	r7, #168	@ 0xa8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	2000555c 	.word	0x2000555c
 800b078:	40028000 	.word	0x40028000
 800b07c:	20000170 	.word	0x20000170
 800b080:	200000d0 	.word	0x200000d0
 800b084:	2000560c 	.word	0x2000560c
 800b088:	080241dc 	.word	0x080241dc
 800b08c:	20005554 	.word	0x20005554
 800b090:	20005558 	.word	0x20005558
 800b094:	0801fe98 	.word	0x0801fe98
 800b098:	0800b235 	.word	0x0800b235
 800b09c:	2000000c 	.word	0x2000000c
 800b0a0:	20005644 	.word	0x20005644

0800b0a4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b092      	sub	sp, #72	@ 0x48
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b0bc:	f107 030c 	add.w	r3, r7, #12
 800b0c0:	2230      	movs	r2, #48	@ 0x30
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f013 ffc1 	bl	801f04c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b0ca:	f107 030c 	add.w	r3, r7, #12
 800b0ce:	2230      	movs	r2, #48	@ 0x30
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f013 ffba 	bl	801f04c <memset>

  for(q = p; q != NULL; q = q->next)
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0dc:	e045      	b.n	800b16a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b0de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d902      	bls.n	800b0ea <low_level_output+0x46>
      return ERR_IF;
 800b0e4:	f06f 030b 	mvn.w	r3, #11
 800b0e8:	e07f      	b.n	800b1ea <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800b0ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ec:	6859      	ldr	r1, [r3, #4]
 800b0ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	005b      	lsls	r3, r3, #1
 800b0f4:	4413      	add	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	3348      	adds	r3, #72	@ 0x48
 800b0fa:	443b      	add	r3, r7
 800b0fc:	3b3c      	subs	r3, #60	@ 0x3c
 800b0fe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b102:	895b      	ldrh	r3, [r3, #10]
 800b104:	4619      	mov	r1, r3
 800b106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b108:	4613      	mov	r3, r2
 800b10a:	005b      	lsls	r3, r3, #1
 800b10c:	4413      	add	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	3348      	adds	r3, #72	@ 0x48
 800b112:	443b      	add	r3, r7
 800b114:	3b38      	subs	r3, #56	@ 0x38
 800b116:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d011      	beq.n	800b142 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b11e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b120:	1e5a      	subs	r2, r3, #1
 800b122:	f107 000c 	add.w	r0, r7, #12
 800b126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b128:	460b      	mov	r3, r1
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	440b      	add	r3, r1
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	18c1      	adds	r1, r0, r3
 800b132:	4613      	mov	r3, r2
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	4413      	add	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	3348      	adds	r3, #72	@ 0x48
 800b13c:	443b      	add	r3, r7
 800b13e:	3b34      	subs	r3, #52	@ 0x34
 800b140:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d109      	bne.n	800b15e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b14a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b14c:	4613      	mov	r3, r2
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	4413      	add	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	3348      	adds	r3, #72	@ 0x48
 800b156:	443b      	add	r3, r7
 800b158:	3b34      	subs	r3, #52	@ 0x34
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b15e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b160:	3301      	adds	r3, #1
 800b162:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800b164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	643b      	str	r3, [r7, #64]	@ 0x40
 800b16a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1b6      	bne.n	800b0de <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	891b      	ldrh	r3, [r3, #8]
 800b174:	461a      	mov	r2, r3
 800b176:	4b1f      	ldr	r3, [pc, #124]	@ (800b1f4 <low_level_output+0x150>)
 800b178:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b17a:	4a1e      	ldr	r2, [pc, #120]	@ (800b1f4 <low_level_output+0x150>)
 800b17c:	f107 030c 	add.w	r3, r7, #12
 800b180:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b182:	4a1c      	ldr	r2, [pc, #112]	@ (800b1f4 <low_level_output+0x150>)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800b188:	6838      	ldr	r0, [r7, #0]
 800b18a:	f008 feb5 	bl	8013ef8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800b18e:	4919      	ldr	r1, [pc, #100]	@ (800b1f4 <low_level_output+0x150>)
 800b190:	4819      	ldr	r0, [pc, #100]	@ (800b1f8 <low_level_output+0x154>)
 800b192:	f7f8 fc9d 	bl	8003ad0 <HAL_ETH_Transmit_IT>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d103      	bne.n	800b1a4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b1a2:	e01b      	b.n	800b1dc <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800b1a4:	4814      	ldr	r0, [pc, #80]	@ (800b1f8 <low_level_output+0x154>)
 800b1a6:	f7f9 f945 	bl	8004434 <HAL_ETH_GetError>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	f003 0302 	and.w	r3, r3, #2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00d      	beq.n	800b1d0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800b1b4:	4b11      	ldr	r3, [pc, #68]	@ (800b1fc <low_level_output+0x158>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 ff49 	bl	800c054 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800b1c2:	480d      	ldr	r0, [pc, #52]	@ (800b1f8 <low_level_output+0x154>)
 800b1c4:	f7f8 fe24 	bl	8003e10 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800b1c8:	23fe      	movs	r3, #254	@ 0xfe
 800b1ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b1ce:	e005      	b.n	800b1dc <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800b1d0:	6838      	ldr	r0, [r7, #0]
 800b1d2:	f008 fdeb 	bl	8013dac <pbuf_free>
        errval =  ERR_IF;
 800b1d6:	23f4      	movs	r3, #244	@ 0xf4
 800b1d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800b1dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b1e0:	f113 0f02 	cmn.w	r3, #2
 800b1e4:	d0d3      	beq.n	800b18e <low_level_output+0xea>

  return errval;
 800b1e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3748      	adds	r7, #72	@ 0x48
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	2000560c 	.word	0x2000560c
 800b1f8:	2000555c 	.word	0x2000555c
 800b1fc:	20005558 	.word	0x20005558

0800b200 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b208:	2300      	movs	r3, #0
 800b20a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b20c:	4b07      	ldr	r3, [pc, #28]	@ (800b22c <low_level_input+0x2c>)
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d105      	bne.n	800b220 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b214:	f107 030c 	add.w	r3, r7, #12
 800b218:	4619      	mov	r1, r3
 800b21a:	4805      	ldr	r0, [pc, #20]	@ (800b230 <low_level_input+0x30>)
 800b21c:	f7f8 fcb4 	bl	8003b88 <HAL_ETH_ReadData>
  }

  return p;
 800b220:	68fb      	ldr	r3, [r7, #12]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20005550 	.word	0x20005550
 800b230:	2000555c 	.word	0x2000555c

0800b234 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b23c:	2300      	movs	r3, #0
 800b23e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b244:	4b0f      	ldr	r3, [pc, #60]	@ (800b284 <ethernetif_input+0x50>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 ff01 	bl	800c054 <osSemaphoreAcquire>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1f5      	bne.n	800b244 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800b258:	68b8      	ldr	r0, [r7, #8]
 800b25a:	f7ff ffd1 	bl	800b200 <low_level_input>
 800b25e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00a      	beq.n	800b27c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	68b9      	ldr	r1, [r7, #8]
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	4798      	blx	r3
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f008 fd98 	bl	8013dac <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1ea      	bne.n	800b258 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b282:	e7df      	b.n	800b244 <ethernetif_input+0x10>
 800b284:	20005554 	.word	0x20005554

0800b288 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d106      	bne.n	800b2a4 <ethernetif_init+0x1c>
 800b296:	4b0e      	ldr	r3, [pc, #56]	@ (800b2d0 <ethernetif_init+0x48>)
 800b298:	f240 220d 	movw	r2, #525	@ 0x20d
 800b29c:	490d      	ldr	r1, [pc, #52]	@ (800b2d4 <ethernetif_init+0x4c>)
 800b29e:	480e      	ldr	r0, [pc, #56]	@ (800b2d8 <ethernetif_init+0x50>)
 800b2a0:	f013 fd74 	bl	801ed8c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2273      	movs	r2, #115	@ 0x73
 800b2a8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2274      	movs	r2, #116	@ 0x74
 800b2b0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a09      	ldr	r2, [pc, #36]	@ (800b2dc <ethernetif_init+0x54>)
 800b2b8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a08      	ldr	r2, [pc, #32]	@ (800b2e0 <ethernetif_init+0x58>)
 800b2be:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7ff fdaf 	bl	800ae24 <low_level_init>

  return ERR_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	0801fea0 	.word	0x0801fea0
 800b2d4:	0801febc 	.word	0x0801febc
 800b2d8:	0801fecc 	.word	0x0801fecc
 800b2dc:	0801c05d 	.word	0x0801c05d
 800b2e0:	0800b0a5 	.word	0x0800b0a5

0800b2e4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b2f0:	68f9      	ldr	r1, [r7, #12]
 800b2f2:	4809      	ldr	r0, [pc, #36]	@ (800b318 <pbuf_free_custom+0x34>)
 800b2f4:	f007 fd9c 	bl	8012e30 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b2f8:	4b08      	ldr	r3, [pc, #32]	@ (800b31c <pbuf_free_custom+0x38>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d107      	bne.n	800b310 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b300:	4b06      	ldr	r3, [pc, #24]	@ (800b31c <pbuf_free_custom+0x38>)
 800b302:	2200      	movs	r2, #0
 800b304:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800b306:	4b06      	ldr	r3, [pc, #24]	@ (800b320 <pbuf_free_custom+0x3c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f000 ff08 	bl	800c120 <osSemaphoreRelease>
  }
}
 800b310:	bf00      	nop
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	080241dc 	.word	0x080241dc
 800b31c:	20005550 	.word	0x20005550
 800b320:	20005554 	.word	0x20005554

0800b324 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b328:	f7f7 f870 	bl	800240c <HAL_GetTick>
 800b32c:	4603      	mov	r3, r0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08e      	sub	sp, #56	@ 0x38
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b33c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b340:	2200      	movs	r2, #0
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	605a      	str	r2, [r3, #4]
 800b346:	609a      	str	r2, [r3, #8]
 800b348:	60da      	str	r2, [r3, #12]
 800b34a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a56      	ldr	r2, [pc, #344]	@ (800b4ac <HAL_ETH_MspInit+0x178>)
 800b352:	4293      	cmp	r3, r2
 800b354:	f040 80a6 	bne.w	800b4a4 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b358:	4b55      	ldr	r3, [pc, #340]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b35a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b35c:	4a54      	ldr	r2, [pc, #336]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b35e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b362:	6313      	str	r3, [r2, #48]	@ 0x30
 800b364:	4b52      	ldr	r3, [pc, #328]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b36c:	623b      	str	r3, [r7, #32]
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	4b4f      	ldr	r3, [pc, #316]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b374:	4a4e      	ldr	r2, [pc, #312]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b376:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b37a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b37c:	4b4c      	ldr	r3, [pc, #304]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b380:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b384:	61fb      	str	r3, [r7, #28]
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	4b49      	ldr	r3, [pc, #292]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b38a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b38c:	4a48      	ldr	r2, [pc, #288]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b38e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b392:	6313      	str	r3, [r2, #48]	@ 0x30
 800b394:	4b46      	ldr	r3, [pc, #280]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b39c:	61bb      	str	r3, [r7, #24]
 800b39e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b3a0:	4b43      	ldr	r3, [pc, #268]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3a4:	4a42      	ldr	r2, [pc, #264]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3a6:	f043 0304 	orr.w	r3, r3, #4
 800b3aa:	6313      	str	r3, [r2, #48]	@ 0x30
 800b3ac:	4b40      	ldr	r3, [pc, #256]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	617b      	str	r3, [r7, #20]
 800b3b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3b8:	4b3d      	ldr	r3, [pc, #244]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3bc:	4a3c      	ldr	r2, [pc, #240]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3be:	f043 0301 	orr.w	r3, r3, #1
 800b3c2:	6313      	str	r3, [r2, #48]	@ 0x30
 800b3c4:	4b3a      	ldr	r3, [pc, #232]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	613b      	str	r3, [r7, #16]
 800b3ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3d0:	4b37      	ldr	r3, [pc, #220]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3d4:	4a36      	ldr	r2, [pc, #216]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3d6:	f043 0302 	orr.w	r3, r3, #2
 800b3da:	6313      	str	r3, [r2, #48]	@ 0x30
 800b3dc:	4b34      	ldr	r3, [pc, #208]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	60fb      	str	r3, [r7, #12]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b3e8:	4b31      	ldr	r3, [pc, #196]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ec:	4a30      	ldr	r2, [pc, #192]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3f2:	6313      	str	r3, [r2, #48]	@ 0x30
 800b3f4:	4b2e      	ldr	r3, [pc, #184]	@ (800b4b0 <HAL_ETH_MspInit+0x17c>)
 800b3f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3fc:	60bb      	str	r3, [r7, #8]
 800b3fe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b400:	2332      	movs	r3, #50	@ 0x32
 800b402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b404:	2302      	movs	r3, #2
 800b406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b408:	2300      	movs	r3, #0
 800b40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b40c:	2303      	movs	r3, #3
 800b40e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b410:	230b      	movs	r3, #11
 800b412:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b418:	4619      	mov	r1, r3
 800b41a:	4826      	ldr	r0, [pc, #152]	@ (800b4b4 <HAL_ETH_MspInit+0x180>)
 800b41c:	f7f9 fc44 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b420:	2386      	movs	r3, #134	@ 0x86
 800b422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b424:	2302      	movs	r3, #2
 800b426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b428:	2300      	movs	r3, #0
 800b42a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b42c:	2303      	movs	r3, #3
 800b42e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b430:	230b      	movs	r3, #11
 800b432:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b438:	4619      	mov	r1, r3
 800b43a:	481f      	ldr	r0, [pc, #124]	@ (800b4b8 <HAL_ETH_MspInit+0x184>)
 800b43c:	f7f9 fc34 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b444:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b446:	2302      	movs	r3, #2
 800b448:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b44e:	2303      	movs	r3, #3
 800b450:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b452:	230b      	movs	r3, #11
 800b454:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b45a:	4619      	mov	r1, r3
 800b45c:	4817      	ldr	r0, [pc, #92]	@ (800b4bc <HAL_ETH_MspInit+0x188>)
 800b45e:	f7f9 fc23 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800b462:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800b466:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b468:	2302      	movs	r3, #2
 800b46a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b46c:	2300      	movs	r3, #0
 800b46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b470:	2303      	movs	r3, #3
 800b472:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b474:	230b      	movs	r3, #11
 800b476:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b47c:	4619      	mov	r1, r3
 800b47e:	4810      	ldr	r0, [pc, #64]	@ (800b4c0 <HAL_ETH_MspInit+0x18c>)
 800b480:	f7f9 fc12 	bl	8004ca8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b484:	2200      	movs	r2, #0
 800b486:	2105      	movs	r1, #5
 800b488:	203d      	movs	r0, #61	@ 0x3d
 800b48a:	f7f7 fb3f 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b48e:	203d      	movs	r0, #61	@ 0x3d
 800b490:	f7f7 fb58 	bl	8002b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800b494:	2200      	movs	r2, #0
 800b496:	2105      	movs	r1, #5
 800b498:	203e      	movs	r0, #62	@ 0x3e
 800b49a:	f7f7 fb37 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800b49e:	203e      	movs	r0, #62	@ 0x3e
 800b4a0:	f7f7 fb50 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b4a4:	bf00      	nop
 800b4a6:	3738      	adds	r7, #56	@ 0x38
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	40028000 	.word	0x40028000
 800b4b0:	40023800 	.word	0x40023800
 800b4b4:	40020800 	.word	0x40020800
 800b4b8:	40020000 	.word	0x40020000
 800b4bc:	40020400 	.word	0x40020400
 800b4c0:	40021800 	.word	0x40021800

0800b4c4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b4c8:	4802      	ldr	r0, [pc, #8]	@ (800b4d4 <ETH_PHY_IO_Init+0x10>)
 800b4ca:	f7f8 ff71 	bl	80043b0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	2000555c 	.word	0x2000555c

0800b4d8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	af00      	add	r7, sp, #0
  return 0;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	68f9      	ldr	r1, [r7, #12]
 800b4fa:	4807      	ldr	r0, [pc, #28]	@ (800b518 <ETH_PHY_IO_ReadReg+0x30>)
 800b4fc:	f7f8 fdb2 	bl	8004064 <HAL_ETH_ReadPHYRegister>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d002      	beq.n	800b50c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b50a:	e000      	b.n	800b50e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	2000555c 	.word	0x2000555c

0800b51c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	68f9      	ldr	r1, [r7, #12]
 800b52e:	4807      	ldr	r0, [pc, #28]	@ (800b54c <ETH_PHY_IO_WriteReg+0x30>)
 800b530:	f7f8 fde3 	bl	80040fa <HAL_ETH_WritePHYRegister>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b53a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b53e:	e000      	b.n	800b542 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	2000555c 	.word	0x2000555c

0800b550 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b554:	f7f6 ff5a 	bl	800240c <HAL_GetTick>
 800b558:	4603      	mov	r3, r0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	bd80      	pop	{r7, pc}
	...

0800b560 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b0a0      	sub	sp, #128	@ 0x80
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b568:	f107 0308 	add.w	r3, r7, #8
 800b56c:	2264      	movs	r2, #100	@ 0x64
 800b56e:	2100      	movs	r1, #0
 800b570:	4618      	mov	r0, r3
 800b572:	f013 fd6b 	bl	801f04c <memset>
  int32_t PHYLinkState = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b57e:	2300      	movs	r3, #0
 800b580:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b582:	2300      	movs	r3, #0
 800b584:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b58a:	483a      	ldr	r0, [pc, #232]	@ (800b674 <ethernet_link_thread+0x114>)
 800b58c:	f7f6 fe96 	bl	80022bc <LAN8742_GetLinkState>
 800b590:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b594:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b598:	089b      	lsrs	r3, r3, #2
 800b59a:	f003 0301 	and.w	r3, r3, #1
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00c      	beq.n	800b5be <ethernet_link_thread+0x5e>
 800b5a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	dc09      	bgt.n	800b5be <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800b5aa:	4833      	ldr	r0, [pc, #204]	@ (800b678 <ethernet_link_thread+0x118>)
 800b5ac:	f7f8 fa10 	bl	80039d0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b5b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5b2:	f007 ffb7 	bl	8013524 <netif_set_down>
    netif_set_link_down(netif);
 800b5b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5b8:	f008 f81a 	bl	80135f0 <netif_set_link_down>
 800b5bc:	e055      	b.n	800b66a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b5be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d14e      	bne.n	800b66a <ethernet_link_thread+0x10a>
 800b5cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	dd4b      	ble.n	800b66a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800b5d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5d4:	3b02      	subs	r3, #2
 800b5d6:	2b03      	cmp	r3, #3
 800b5d8:	d82a      	bhi.n	800b630 <ethernet_link_thread+0xd0>
 800b5da:	a201      	add	r2, pc, #4	@ (adr r2, 800b5e0 <ethernet_link_thread+0x80>)
 800b5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e0:	0800b5f1 	.word	0x0800b5f1
 800b5e4:	0800b603 	.word	0x0800b603
 800b5e8:	0800b613 	.word	0x0800b613
 800b5ec:	0800b623 	.word	0x0800b623
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b5f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b5f4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b5f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b5fa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b600:	e017      	b.n	800b632 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b602:	2300      	movs	r3, #0
 800b604:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b606:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b60a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b60c:	2301      	movs	r3, #1
 800b60e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b610:	e00f      	b.n	800b632 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b612:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b616:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b618:	2300      	movs	r3, #0
 800b61a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b61c:	2301      	movs	r3, #1
 800b61e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b620:	e007      	b.n	800b632 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b622:	2300      	movs	r3, #0
 800b624:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b626:	2300      	movs	r3, #0
 800b628:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b62a:	2301      	movs	r3, #1
 800b62c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b62e:	e000      	b.n	800b632 <ethernet_link_thread+0xd2>
    default:
      break;
 800b630:	bf00      	nop
    }

    if(linkchanged)
 800b632:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b634:	2b00      	cmp	r3, #0
 800b636:	d018      	beq.n	800b66a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b638:	f107 0308 	add.w	r3, r7, #8
 800b63c:	4619      	mov	r1, r3
 800b63e:	480e      	ldr	r0, [pc, #56]	@ (800b678 <ethernet_link_thread+0x118>)
 800b640:	f7f8 fda4 	bl	800418c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b646:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b64a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b64c:	f107 0308 	add.w	r3, r7, #8
 800b650:	4619      	mov	r1, r3
 800b652:	4809      	ldr	r0, [pc, #36]	@ (800b678 <ethernet_link_thread+0x118>)
 800b654:	f7f8 fe91 	bl	800437a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800b658:	4807      	ldr	r0, [pc, #28]	@ (800b678 <ethernet_link_thread+0x118>)
 800b65a:	f7f8 f949 	bl	80038f0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800b65e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b660:	f007 fef4 	bl	801344c <netif_set_up>
      netif_set_link_up(netif);
 800b664:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b666:	f007 ff8f 	bl	8013588 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b66a:	2064      	movs	r0, #100	@ 0x64
 800b66c:	f000 f9c2 	bl	800b9f4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b670:	e78b      	b.n	800b58a <ethernet_link_thread+0x2a>
 800b672:	bf00      	nop
 800b674:	20005644 	.word	0x20005644
 800b678:	2000555c 	.word	0x2000555c

0800b67c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af02      	add	r7, sp, #8
 800b682:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b684:	4812      	ldr	r0, [pc, #72]	@ (800b6d0 <HAL_ETH_RxAllocateCallback+0x54>)
 800b686:	f007 fb5f 	bl	8012d48 <memp_malloc_pool>
 800b68a:	60f8      	str	r0, [r7, #12]
  if (p)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d014      	beq.n	800b6bc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f103 0220 	add.w	r2, r3, #32
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4a0d      	ldr	r2, [pc, #52]	@ (800b6d4 <HAL_ETH_RxAllocateCallback+0x58>)
 800b6a0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b6aa:	9201      	str	r2, [sp, #4]
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2241      	movs	r2, #65	@ 0x41
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f008 f9bf 	bl	8013a38 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b6ba:	e005      	b.n	800b6c8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b6bc:	4b06      	ldr	r3, [pc, #24]	@ (800b6d8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800b6be:	2201      	movs	r2, #1
 800b6c0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]
}
 800b6c8:	bf00      	nop
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	080241dc 	.word	0x080241dc
 800b6d4:	0800b2e5 	.word	0x0800b2e5
 800b6d8:	20005550 	.word	0x20005550

0800b6dc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b088      	sub	sp, #32
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	3b20      	subs	r3, #32
 800b6fa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	2200      	movs	r2, #0
 800b700:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	2200      	movs	r2, #0
 800b706:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	887a      	ldrh	r2, [r7, #2]
 800b70c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d103      	bne.n	800b71e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	69fa      	ldr	r2, [r7, #28]
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	e003      	b.n	800b726 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	69fa      	ldr	r2, [r7, #28]
 800b724:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	69fa      	ldr	r2, [r7, #28]
 800b72a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	61fb      	str	r3, [r7, #28]
 800b732:	e009      	b.n	800b748 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	891a      	ldrh	r2, [r3, #8]
 800b738:	887b      	ldrh	r3, [r7, #2]
 800b73a:	4413      	add	r3, r2
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	61fb      	str	r3, [r7, #28]
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1f2      	bne.n	800b734 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800b74e:	887b      	ldrh	r3, [r7, #2]
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7ff fb02 	bl	800ad5c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b758:	bf00      	nop
 800b75a:	3720      	adds	r7, #32
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f008 fb1f 	bl	8013dac <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800b76e:	bf00      	nop
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b776:	b480      	push	{r7}
 800b778:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b77a:	bf00      	nop
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b78a:	f3ef 8305 	mrs	r3, IPSR
 800b78e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b790:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10f      	bne.n	800b7b6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b796:	f3ef 8310 	mrs	r3, PRIMASK
 800b79a:	607b      	str	r3, [r7, #4]
  return(result);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d105      	bne.n	800b7ae <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b7a2:	f3ef 8311 	mrs	r3, BASEPRI
 800b7a6:	603b      	str	r3, [r7, #0]
  return(result);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d007      	beq.n	800b7be <osKernelInitialize+0x3a>
 800b7ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b7e8 <osKernelInitialize+0x64>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d103      	bne.n	800b7be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b7b6:	f06f 0305 	mvn.w	r3, #5
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	e00c      	b.n	800b7d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b7be:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e8 <osKernelInitialize+0x64>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d105      	bne.n	800b7d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b7c6:	4b08      	ldr	r3, [pc, #32]	@ (800b7e8 <osKernelInitialize+0x64>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	60fb      	str	r3, [r7, #12]
 800b7d0:	e002      	b.n	800b7d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b7d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	20005664 	.word	0x20005664

0800b7ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7f2:	f3ef 8305 	mrs	r3, IPSR
 800b7f6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10f      	bne.n	800b81e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b802:	607b      	str	r3, [r7, #4]
  return(result);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d105      	bne.n	800b816 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b80a:	f3ef 8311 	mrs	r3, BASEPRI
 800b80e:	603b      	str	r3, [r7, #0]
  return(result);
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d007      	beq.n	800b826 <osKernelStart+0x3a>
 800b816:	4b0f      	ldr	r3, [pc, #60]	@ (800b854 <osKernelStart+0x68>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d103      	bne.n	800b826 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b81e:	f06f 0305 	mvn.w	r3, #5
 800b822:	60fb      	str	r3, [r7, #12]
 800b824:	e010      	b.n	800b848 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b826:	4b0b      	ldr	r3, [pc, #44]	@ (800b854 <osKernelStart+0x68>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d109      	bne.n	800b842 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b82e:	f7ff ffa2 	bl	800b776 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b832:	4b08      	ldr	r3, [pc, #32]	@ (800b854 <osKernelStart+0x68>)
 800b834:	2202      	movs	r2, #2
 800b836:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b838:	f002 fd32 	bl	800e2a0 <vTaskStartScheduler>
      stat = osOK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	60fb      	str	r3, [r7, #12]
 800b840:	e002      	b.n	800b848 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b846:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b848:	68fb      	ldr	r3, [r7, #12]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20005664 	.word	0x20005664

0800b858 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b85e:	f3ef 8305 	mrs	r3, IPSR
 800b862:	60bb      	str	r3, [r7, #8]
  return(result);
 800b864:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10f      	bne.n	800b88a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b86a:	f3ef 8310 	mrs	r3, PRIMASK
 800b86e:	607b      	str	r3, [r7, #4]
  return(result);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d105      	bne.n	800b882 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b876:	f3ef 8311 	mrs	r3, BASEPRI
 800b87a:	603b      	str	r3, [r7, #0]
  return(result);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d007      	beq.n	800b892 <osKernelGetTickCount+0x3a>
 800b882:	4b08      	ldr	r3, [pc, #32]	@ (800b8a4 <osKernelGetTickCount+0x4c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b02      	cmp	r3, #2
 800b888:	d103      	bne.n	800b892 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800b88a:	f002 fe3b 	bl	800e504 <xTaskGetTickCountFromISR>
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	e002      	b.n	800b898 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800b892:	f002 fe27 	bl	800e4e4 <xTaskGetTickCount>
 800b896:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800b898:	68fb      	ldr	r3, [r7, #12]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20005664 	.word	0x20005664

0800b8a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b090      	sub	sp, #64	@ 0x40
 800b8ac:	af04      	add	r7, sp, #16
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8b8:	f3ef 8305 	mrs	r3, IPSR
 800b8bc:	61fb      	str	r3, [r7, #28]
  return(result);
 800b8be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f040 8090 	bne.w	800b9e6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d105      	bne.n	800b8de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b8d2:	f3ef 8311 	mrs	r3, BASEPRI
 800b8d6:	617b      	str	r3, [r7, #20]
  return(result);
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d003      	beq.n	800b8e6 <osThreadNew+0x3e>
 800b8de:	4b44      	ldr	r3, [pc, #272]	@ (800b9f0 <osThreadNew+0x148>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d07f      	beq.n	800b9e6 <osThreadNew+0x13e>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d07c      	beq.n	800b9e6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800b8ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b8f2:	2318      	movs	r3, #24
 800b8f4:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800b8fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8fe:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d045      	beq.n	800b992 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d002      	beq.n	800b914 <osThreadNew+0x6c>
        name = attr->name;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d002      	beq.n	800b922 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	699b      	ldr	r3, [r3, #24]
 800b920:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b924:	2b00      	cmp	r3, #0
 800b926:	d008      	beq.n	800b93a <osThreadNew+0x92>
 800b928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92a:	2b38      	cmp	r3, #56	@ 0x38
 800b92c:	d805      	bhi.n	800b93a <osThreadNew+0x92>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	f003 0301 	and.w	r3, r3, #1
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <osThreadNew+0x96>
        return (NULL);
 800b93a:	2300      	movs	r3, #0
 800b93c:	e054      	b.n	800b9e8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d003      	beq.n	800b94e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	089b      	lsrs	r3, r3, #2
 800b94c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00e      	beq.n	800b974 <osThreadNew+0xcc>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	2ba7      	cmp	r3, #167	@ 0xa7
 800b95c:	d90a      	bls.n	800b974 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b962:	2b00      	cmp	r3, #0
 800b964:	d006      	beq.n	800b974 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d002      	beq.n	800b974 <osThreadNew+0xcc>
        mem = 1;
 800b96e:	2301      	movs	r3, #1
 800b970:	623b      	str	r3, [r7, #32]
 800b972:	e010      	b.n	800b996 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10c      	bne.n	800b996 <osThreadNew+0xee>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d108      	bne.n	800b996 <osThreadNew+0xee>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d104      	bne.n	800b996 <osThreadNew+0xee>
          mem = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	623b      	str	r3, [r7, #32]
 800b990:	e001      	b.n	800b996 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d110      	bne.n	800b9be <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9a4:	9202      	str	r2, [sp, #8]
 800b9a6:	9301      	str	r3, [sp, #4]
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f002 fa76 	bl	800dea4 <xTaskCreateStatic>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	613b      	str	r3, [r7, #16]
 800b9bc:	e013      	b.n	800b9e6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d110      	bne.n	800b9e6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	f107 0310 	add.w	r3, r7, #16
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f002 faca 	bl	800df70 <xTaskCreate>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d001      	beq.n	800b9e6 <osThreadNew+0x13e>
          hTask = NULL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b9e6:	693b      	ldr	r3, [r7, #16]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3730      	adds	r7, #48	@ 0x30
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	20005664 	.word	0x20005664

0800b9f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9fc:	f3ef 8305 	mrs	r3, IPSR
 800ba00:	613b      	str	r3, [r7, #16]
  return(result);
 800ba02:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10f      	bne.n	800ba28 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba08:	f3ef 8310 	mrs	r3, PRIMASK
 800ba0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d105      	bne.n	800ba20 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba14:	f3ef 8311 	mrs	r3, BASEPRI
 800ba18:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d007      	beq.n	800ba30 <osDelay+0x3c>
 800ba20:	4b0a      	ldr	r3, [pc, #40]	@ (800ba4c <osDelay+0x58>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	d103      	bne.n	800ba30 <osDelay+0x3c>
    stat = osErrorISR;
 800ba28:	f06f 0305 	mvn.w	r3, #5
 800ba2c:	617b      	str	r3, [r7, #20]
 800ba2e:	e007      	b.n	800ba40 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d002      	beq.n	800ba40 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f002 fbf8 	bl	800e230 <vTaskDelay>
    }
  }

  return (stat);
 800ba40:	697b      	ldr	r3, [r7, #20]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20005664 	.word	0x20005664

0800ba50 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba5c:	f3ef 8305 	mrs	r3, IPSR
 800ba60:	617b      	str	r3, [r7, #20]
  return(result);
 800ba62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d13d      	bne.n	800bae4 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba68:	f3ef 8310 	mrs	r3, PRIMASK
 800ba6c:	613b      	str	r3, [r7, #16]
  return(result);
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d105      	bne.n	800ba80 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba74:	f3ef 8311 	mrs	r3, BASEPRI
 800ba78:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d003      	beq.n	800ba88 <osEventFlagsNew+0x38>
 800ba80:	4b1b      	ldr	r3, [pc, #108]	@ (800baf0 <osEventFlagsNew+0xa0>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d02d      	beq.n	800bae4 <osEventFlagsNew+0x94>
    mem = -1;
 800ba88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba8c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d015      	beq.n	800bac0 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d006      	beq.n	800baaa <osEventFlagsNew+0x5a>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	2b1f      	cmp	r3, #31
 800baa2:	d902      	bls.n	800baaa <osEventFlagsNew+0x5a>
        mem = 1;
 800baa4:	2301      	movs	r3, #1
 800baa6:	61bb      	str	r3, [r7, #24]
 800baa8:	e00c      	b.n	800bac4 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d108      	bne.n	800bac4 <osEventFlagsNew+0x74>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d104      	bne.n	800bac4 <osEventFlagsNew+0x74>
          mem = 0;
 800baba:	2300      	movs	r3, #0
 800babc:	61bb      	str	r3, [r7, #24]
 800babe:	e001      	b.n	800bac4 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d106      	bne.n	800bad8 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 fdbc 	bl	800c64c <xEventGroupCreateStatic>
 800bad4:	61f8      	str	r0, [r7, #28]
 800bad6:	e005      	b.n	800bae4 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d102      	bne.n	800bae4 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800bade:	f000 fdf2 	bl	800c6c6 <xEventGroupCreate>
 800bae2:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800bae4:	69fb      	ldr	r3, [r7, #28]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3720      	adds	r7, #32
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	20005664 	.word	0x20005664

0800baf4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b088      	sub	sp, #32
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <osEventFlagsSet+0x1c>
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb0e:	d303      	bcc.n	800bb18 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800bb10:	f06f 0303 	mvn.w	r3, #3
 800bb14:	61fb      	str	r3, [r7, #28]
 800bb16:	e03a      	b.n	800bb8e <osEventFlagsSet+0x9a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb18:	f3ef 8305 	mrs	r3, IPSR
 800bb1c:	617b      	str	r3, [r7, #20]
  return(result);
 800bb1e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10f      	bne.n	800bb44 <osEventFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb24:	f3ef 8310 	mrs	r3, PRIMASK
 800bb28:	613b      	str	r3, [r7, #16]
  return(result);
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d105      	bne.n	800bb3c <osEventFlagsSet+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bb30:	f3ef 8311 	mrs	r3, BASEPRI
 800bb34:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d021      	beq.n	800bb80 <osEventFlagsSet+0x8c>
 800bb3c:	4b16      	ldr	r3, [pc, #88]	@ (800bb98 <osEventFlagsSet+0xa4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d11d      	bne.n	800bb80 <osEventFlagsSet+0x8c>
    yield = pdFALSE;
 800bb44:	2300      	movs	r3, #0
 800bb46:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800bb48:	f107 0308 	add.w	r3, r7, #8
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	69b8      	ldr	r0, [r7, #24]
 800bb52:	f000 ff6d 	bl	800ca30 <xEventGroupSetBitsFromISR>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d103      	bne.n	800bb64 <osEventFlagsSet+0x70>
      rflags = (uint32_t)osErrorResource;
 800bb5c:	f06f 0302 	mvn.w	r3, #2
 800bb60:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800bb62:	e013      	b.n	800bb8c <osEventFlagsSet+0x98>
    } else {
      rflags = flags;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00e      	beq.n	800bb8c <osEventFlagsSet+0x98>
 800bb6e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb9c <osEventFlagsSet+0xa8>)
 800bb70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800bb7e:	e005      	b.n	800bb8c <osEventFlagsSet+0x98>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	69b8      	ldr	r0, [r7, #24]
 800bb84:	f000 fe94 	bl	800c8b0 <xEventGroupSetBits>
 800bb88:	61f8      	str	r0, [r7, #28]
 800bb8a:	e000      	b.n	800bb8e <osEventFlagsSet+0x9a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800bb8c:	bf00      	nop
  }

  return (rflags);
 800bb8e:	69fb      	ldr	r3, [r7, #28]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3720      	adds	r7, #32
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	20005664 	.word	0x20005664
 800bb9c:	e000ed04 	.word	0xe000ed04

0800bba0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b08e      	sub	sp, #56	@ 0x38
 800bba4:	af02      	add	r7, sp, #8
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
 800bbac:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d003      	beq.n	800bbc0 <osEventFlagsWait+0x20>
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbbe:	d303      	bcc.n	800bbc8 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800bbc0:	f06f 0303 	mvn.w	r3, #3
 800bbc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc6:	e059      	b.n	800bc7c <osEventFlagsWait+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbc8:	f3ef 8305 	mrs	r3, IPSR
 800bbcc:	61fb      	str	r3, [r7, #28]
  return(result);
 800bbce:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10f      	bne.n	800bbf4 <osEventFlagsWait+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbd4:	f3ef 8310 	mrs	r3, PRIMASK
 800bbd8:	61bb      	str	r3, [r7, #24]
  return(result);
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d105      	bne.n	800bbec <osEventFlagsWait+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bbe0:	f3ef 8311 	mrs	r3, BASEPRI
 800bbe4:	617b      	str	r3, [r7, #20]
  return(result);
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d007      	beq.n	800bbfc <osEventFlagsWait+0x5c>
 800bbec:	4b26      	ldr	r3, [pc, #152]	@ (800bc88 <osEventFlagsWait+0xe8>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d103      	bne.n	800bbfc <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorISR;
 800bbf4:	f06f 0305 	mvn.w	r3, #5
 800bbf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbfa:	e03f      	b.n	800bc7c <osEventFlagsWait+0xdc>
  }
  else {
    if (options & osFlagsWaitAll) {
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d002      	beq.n	800bc0c <osEventFlagsWait+0x6c>
      wait_all = pdTRUE;
 800bc06:	2301      	movs	r3, #1
 800bc08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc0a:	e001      	b.n	800bc10 <osEventFlagsWait+0x70>
    } else {
      wait_all = pdFAIL;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if (options & osFlagsNoClear) {
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f003 0302 	and.w	r3, r3, #2
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d002      	beq.n	800bc20 <osEventFlagsWait+0x80>
      exit_clr = pdFAIL;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc1e:	e001      	b.n	800bc24 <osEventFlagsWait+0x84>
    } else {
      exit_clr = pdTRUE;
 800bc20:	2301      	movs	r3, #1
 800bc22:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	6a38      	ldr	r0, [r7, #32]
 800bc30:	f000 fd64 	bl	800c6fc <xEventGroupWaitBits>
 800bc34:	6278      	str	r0, [r7, #36]	@ 0x24

    if (options & osFlagsWaitAll) {
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00e      	beq.n	800bc5e <osEventFlagsWait+0xbe>
      if (flags != rflags) {
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d019      	beq.n	800bc7c <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d003      	beq.n	800bc56 <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 800bc4e:	f06f 0301 	mvn.w	r3, #1
 800bc52:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc54:	e012      	b.n	800bc7c <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bc56:	f06f 0302 	mvn.w	r3, #2
 800bc5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc5c:	e00e      	b.n	800bc7c <osEventFlagsWait+0xdc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc62:	4013      	ands	r3, r2
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d109      	bne.n	800bc7c <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d003      	beq.n	800bc76 <osEventFlagsWait+0xd6>
          rflags = (uint32_t)osErrorTimeout;
 800bc6e:	f06f 0301 	mvn.w	r3, #1
 800bc72:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc74:	e002      	b.n	800bc7c <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bc76:	f06f 0302 	mvn.w	r3, #2
 800bc7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
  }

  return (rflags);
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3730      	adds	r7, #48	@ 0x30
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20005664 	.word	0x20005664

0800bc8c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b08a      	sub	sp, #40	@ 0x28
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bc94:	2300      	movs	r3, #0
 800bc96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc98:	f3ef 8305 	mrs	r3, IPSR
 800bc9c:	613b      	str	r3, [r7, #16]
  return(result);
 800bc9e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f040 8085 	bne.w	800bdb0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bca6:	f3ef 8310 	mrs	r3, PRIMASK
 800bcaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d105      	bne.n	800bcbe <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bcb2:	f3ef 8311 	mrs	r3, BASEPRI
 800bcb6:	60bb      	str	r3, [r7, #8]
  return(result);
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d003      	beq.n	800bcc6 <osMutexNew+0x3a>
 800bcbe:	4b3f      	ldr	r3, [pc, #252]	@ (800bdbc <osMutexNew+0x130>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d074      	beq.n	800bdb0 <osMutexNew+0x124>
    if (attr != NULL) {
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d003      	beq.n	800bcd4 <osMutexNew+0x48>
      type = attr->attr_bits;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	623b      	str	r3, [r7, #32]
 800bcd2:	e001      	b.n	800bcd8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d002      	beq.n	800bce8 <osMutexNew+0x5c>
      rmtx = 1U;
 800bce2:	2301      	movs	r3, #1
 800bce4:	61fb      	str	r3, [r7, #28]
 800bce6:	e001      	b.n	800bcec <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800bce8:	2300      	movs	r3, #0
 800bcea:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	f003 0308 	and.w	r3, r3, #8
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d15c      	bne.n	800bdb0 <osMutexNew+0x124>
      mem = -1;
 800bcf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcfa:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d015      	beq.n	800bd2e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d006      	beq.n	800bd18 <osMutexNew+0x8c>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	2b4f      	cmp	r3, #79	@ 0x4f
 800bd10:	d902      	bls.n	800bd18 <osMutexNew+0x8c>
          mem = 1;
 800bd12:	2301      	movs	r3, #1
 800bd14:	61bb      	str	r3, [r7, #24]
 800bd16:	e00c      	b.n	800bd32 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d108      	bne.n	800bd32 <osMutexNew+0xa6>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d104      	bne.n	800bd32 <osMutexNew+0xa6>
            mem = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	61bb      	str	r3, [r7, #24]
 800bd2c:	e001      	b.n	800bd32 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d112      	bne.n	800bd5e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d007      	beq.n	800bd4e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	4619      	mov	r1, r3
 800bd44:	2004      	movs	r0, #4
 800bd46:	f001 f8c6 	bl	800ced6 <xQueueCreateMutexStatic>
 800bd4a:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd4c:	e016      	b.n	800bd7c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	4619      	mov	r1, r3
 800bd54:	2001      	movs	r0, #1
 800bd56:	f001 f8be 	bl	800ced6 <xQueueCreateMutexStatic>
 800bd5a:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd5c:	e00e      	b.n	800bd7c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10b      	bne.n	800bd7c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d004      	beq.n	800bd74 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800bd6a:	2004      	movs	r0, #4
 800bd6c:	f001 f89b 	bl	800cea6 <xQueueCreateMutex>
 800bd70:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd72:	e003      	b.n	800bd7c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800bd74:	2001      	movs	r0, #1
 800bd76:	f001 f896 	bl	800cea6 <xQueueCreateMutex>
 800bd7a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00c      	beq.n	800bd9c <osMutexNew+0x110>
        if (attr != NULL) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d003      	beq.n	800bd90 <osMutexNew+0x104>
          name = attr->name;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	617b      	str	r3, [r7, #20]
 800bd8e:	e001      	b.n	800bd94 <osMutexNew+0x108>
        } else {
          name = NULL;
 800bd90:	2300      	movs	r3, #0
 800bd92:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800bd94:	6979      	ldr	r1, [r7, #20]
 800bd96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd98:	f001 fffc 	bl	800dd94 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d006      	beq.n	800bdb0 <osMutexNew+0x124>
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d003      	beq.n	800bdb0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdaa:	f043 0301 	orr.w	r3, r3, #1
 800bdae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3728      	adds	r7, #40	@ 0x28
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20005664 	.word	0x20005664

0800bdc0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f023 0301 	bic.w	r3, r3, #1
 800bdd0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f003 0301 	and.w	r3, r3, #1
 800bdd8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdde:	f3ef 8305 	mrs	r3, IPSR
 800bde2:	613b      	str	r3, [r7, #16]
  return(result);
 800bde4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10f      	bne.n	800be0a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdea:	f3ef 8310 	mrs	r3, PRIMASK
 800bdee:	60fb      	str	r3, [r7, #12]
  return(result);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d105      	bne.n	800be02 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bdf6:	f3ef 8311 	mrs	r3, BASEPRI
 800bdfa:	60bb      	str	r3, [r7, #8]
  return(result);
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d007      	beq.n	800be12 <osMutexAcquire+0x52>
 800be02:	4b1d      	ldr	r3, [pc, #116]	@ (800be78 <osMutexAcquire+0xb8>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b02      	cmp	r3, #2
 800be08:	d103      	bne.n	800be12 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800be0a:	f06f 0305 	mvn.w	r3, #5
 800be0e:	61fb      	str	r3, [r7, #28]
 800be10:	e02c      	b.n	800be6c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d103      	bne.n	800be20 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800be18:	f06f 0303 	mvn.w	r3, #3
 800be1c:	61fb      	str	r3, [r7, #28]
 800be1e:	e025      	b.n	800be6c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d011      	beq.n	800be4a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	69b8      	ldr	r0, [r7, #24]
 800be2a:	f001 f8a6 	bl	800cf7a <xQueueTakeMutexRecursive>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b01      	cmp	r3, #1
 800be32:	d01b      	beq.n	800be6c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d003      	beq.n	800be42 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800be3a:	f06f 0301 	mvn.w	r3, #1
 800be3e:	61fb      	str	r3, [r7, #28]
 800be40:	e014      	b.n	800be6c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800be42:	f06f 0302 	mvn.w	r3, #2
 800be46:	61fb      	str	r3, [r7, #28]
 800be48:	e010      	b.n	800be6c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	69b8      	ldr	r0, [r7, #24]
 800be4e:	f001 fc71 	bl	800d734 <xQueueSemaphoreTake>
 800be52:	4603      	mov	r3, r0
 800be54:	2b01      	cmp	r3, #1
 800be56:	d009      	beq.n	800be6c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d003      	beq.n	800be66 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800be5e:	f06f 0301 	mvn.w	r3, #1
 800be62:	61fb      	str	r3, [r7, #28]
 800be64:	e002      	b.n	800be6c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800be66:	f06f 0302 	mvn.w	r3, #2
 800be6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800be6c:	69fb      	ldr	r3, [r7, #28]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3720      	adds	r7, #32
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20005664 	.word	0x20005664

0800be7c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f023 0301 	bic.w	r3, r3, #1
 800be8a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800be94:	2300      	movs	r3, #0
 800be96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be98:	f3ef 8305 	mrs	r3, IPSR
 800be9c:	613b      	str	r3, [r7, #16]
  return(result);
 800be9e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10f      	bne.n	800bec4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bea4:	f3ef 8310 	mrs	r3, PRIMASK
 800bea8:	60fb      	str	r3, [r7, #12]
  return(result);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d105      	bne.n	800bebc <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800beb0:	f3ef 8311 	mrs	r3, BASEPRI
 800beb4:	60bb      	str	r3, [r7, #8]
  return(result);
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d007      	beq.n	800becc <osMutexRelease+0x50>
 800bebc:	4b16      	ldr	r3, [pc, #88]	@ (800bf18 <osMutexRelease+0x9c>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d103      	bne.n	800becc <osMutexRelease+0x50>
    stat = osErrorISR;
 800bec4:	f06f 0305 	mvn.w	r3, #5
 800bec8:	61fb      	str	r3, [r7, #28]
 800beca:	e01f      	b.n	800bf0c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d103      	bne.n	800beda <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800bed2:	f06f 0303 	mvn.w	r3, #3
 800bed6:	61fb      	str	r3, [r7, #28]
 800bed8:	e018      	b.n	800bf0c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d009      	beq.n	800bef4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800bee0:	69b8      	ldr	r0, [r7, #24]
 800bee2:	f001 f813 	bl	800cf0c <xQueueGiveMutexRecursive>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d00f      	beq.n	800bf0c <osMutexRelease+0x90>
        stat = osErrorResource;
 800beec:	f06f 0302 	mvn.w	r3, #2
 800bef0:	61fb      	str	r3, [r7, #28]
 800bef2:	e00b      	b.n	800bf0c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bef4:	2300      	movs	r3, #0
 800bef6:	2200      	movs	r2, #0
 800bef8:	2100      	movs	r1, #0
 800befa:	69b8      	ldr	r0, [r7, #24]
 800befc:	f001 f8ec 	bl	800d0d8 <xQueueGenericSend>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d002      	beq.n	800bf0c <osMutexRelease+0x90>
        stat = osErrorResource;
 800bf06:	f06f 0302 	mvn.w	r3, #2
 800bf0a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800bf0c:	69fb      	ldr	r3, [r7, #28]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3720      	adds	r7, #32
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	20005664 	.word	0x20005664

0800bf1c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08c      	sub	sp, #48	@ 0x30
 800bf20:	af02      	add	r7, sp, #8
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf2c:	f3ef 8305 	mrs	r3, IPSR
 800bf30:	61bb      	str	r3, [r7, #24]
  return(result);
 800bf32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f040 8086 	bne.w	800c046 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf3a:	f3ef 8310 	mrs	r3, PRIMASK
 800bf3e:	617b      	str	r3, [r7, #20]
  return(result);
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d105      	bne.n	800bf52 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bf46:	f3ef 8311 	mrs	r3, BASEPRI
 800bf4a:	613b      	str	r3, [r7, #16]
  return(result);
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d003      	beq.n	800bf5a <osSemaphoreNew+0x3e>
 800bf52:	4b3f      	ldr	r3, [pc, #252]	@ (800c050 <osSemaphoreNew+0x134>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d075      	beq.n	800c046 <osSemaphoreNew+0x12a>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d072      	beq.n	800c046 <osSemaphoreNew+0x12a>
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d86e      	bhi.n	800c046 <osSemaphoreNew+0x12a>
    mem = -1;
 800bf68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d015      	beq.n	800bfa0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d006      	beq.n	800bf8a <osSemaphoreNew+0x6e>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	2b4f      	cmp	r3, #79	@ 0x4f
 800bf82:	d902      	bls.n	800bf8a <osSemaphoreNew+0x6e>
        mem = 1;
 800bf84:	2301      	movs	r3, #1
 800bf86:	623b      	str	r3, [r7, #32]
 800bf88:	e00c      	b.n	800bfa4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d108      	bne.n	800bfa4 <osSemaphoreNew+0x88>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d104      	bne.n	800bfa4 <osSemaphoreNew+0x88>
          mem = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	623b      	str	r3, [r7, #32]
 800bf9e:	e001      	b.n	800bfa4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfaa:	d04c      	beq.n	800c046 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d128      	bne.n	800c004 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800bfb2:	6a3b      	ldr	r3, [r7, #32]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d10a      	bne.n	800bfce <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	9200      	str	r2, [sp, #0]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	f000 fe67 	bl	800cc98 <xQueueGenericCreateStatic>
 800bfca:	6278      	str	r0, [r7, #36]	@ 0x24
 800bfcc:	e005      	b.n	800bfda <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800bfce:	2203      	movs	r2, #3
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	f000 fee7 	bl	800cda6 <xQueueGenericCreate>
 800bfd8:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d022      	beq.n	800c026 <osSemaphoreNew+0x10a>
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d01f      	beq.n	800c026 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2100      	movs	r1, #0
 800bfec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bfee:	f001 f873 	bl	800d0d8 <xQueueGenericSend>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d016      	beq.n	800c026 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800bff8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bffa:	f001 fd7d 	bl	800daf8 <vQueueDelete>
            hSemaphore = NULL;
 800bffe:	2300      	movs	r3, #0
 800c000:	627b      	str	r3, [r7, #36]	@ 0x24
 800c002:	e010      	b.n	800c026 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d108      	bne.n	800c01c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	461a      	mov	r2, r3
 800c010:	68b9      	ldr	r1, [r7, #8]
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f000 ffea 	bl	800cfec <xQueueCreateCountingSemaphoreStatic>
 800c018:	6278      	str	r0, [r7, #36]	@ 0x24
 800c01a:	e004      	b.n	800c026 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c01c:	68b9      	ldr	r1, [r7, #8]
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f001 f821 	bl	800d066 <xQueueCreateCountingSemaphore>
 800c024:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00c      	beq.n	800c046 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d003      	beq.n	800c03a <osSemaphoreNew+0x11e>
          name = attr->name;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	61fb      	str	r3, [r7, #28]
 800c038:	e001      	b.n	800c03e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800c03a:	2300      	movs	r3, #0
 800c03c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c03e:	69f9      	ldr	r1, [r7, #28]
 800c040:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c042:	f001 fea7 	bl	800dd94 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3728      	adds	r7, #40	@ 0x28
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	20005664 	.word	0x20005664

0800c054 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c062:	2300      	movs	r3, #0
 800c064:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d103      	bne.n	800c074 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c06c:	f06f 0303 	mvn.w	r3, #3
 800c070:	61fb      	str	r3, [r7, #28]
 800c072:	e04b      	b.n	800c10c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c074:	f3ef 8305 	mrs	r3, IPSR
 800c078:	617b      	str	r3, [r7, #20]
  return(result);
 800c07a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10f      	bne.n	800c0a0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c080:	f3ef 8310 	mrs	r3, PRIMASK
 800c084:	613b      	str	r3, [r7, #16]
  return(result);
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d105      	bne.n	800c098 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c08c:	f3ef 8311 	mrs	r3, BASEPRI
 800c090:	60fb      	str	r3, [r7, #12]
  return(result);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d026      	beq.n	800c0e6 <osSemaphoreAcquire+0x92>
 800c098:	4b1f      	ldr	r3, [pc, #124]	@ (800c118 <osSemaphoreAcquire+0xc4>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d122      	bne.n	800c0e6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800c0a6:	f06f 0303 	mvn.w	r3, #3
 800c0aa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800c0ac:	e02d      	b.n	800c10a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c0b2:	f107 0308 	add.w	r3, r7, #8
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	69b8      	ldr	r0, [r7, #24]
 800c0bc:	f001 fc52 	bl	800d964 <xQueueReceiveFromISR>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d003      	beq.n	800c0ce <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800c0c6:	f06f 0302 	mvn.w	r3, #2
 800c0ca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800c0cc:	e01d      	b.n	800c10a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d01a      	beq.n	800c10a <osSemaphoreAcquire+0xb6>
 800c0d4:	4b11      	ldr	r3, [pc, #68]	@ (800c11c <osSemaphoreAcquire+0xc8>)
 800c0d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800c0e4:	e011      	b.n	800c10a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	69b8      	ldr	r0, [r7, #24]
 800c0ea:	f001 fb23 	bl	800d734 <xQueueSemaphoreTake>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d00b      	beq.n	800c10c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d003      	beq.n	800c102 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800c0fa:	f06f 0301 	mvn.w	r3, #1
 800c0fe:	61fb      	str	r3, [r7, #28]
 800c100:	e004      	b.n	800c10c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800c102:	f06f 0302 	mvn.w	r3, #2
 800c106:	61fb      	str	r3, [r7, #28]
 800c108:	e000      	b.n	800c10c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800c10a:	bf00      	nop
      }
    }
  }

  return (stat);
 800c10c:	69fb      	ldr	r3, [r7, #28]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3720      	adds	r7, #32
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20005664 	.word	0x20005664
 800c11c:	e000ed04 	.word	0xe000ed04

0800c120 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d103      	bne.n	800c13e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c136:	f06f 0303 	mvn.w	r3, #3
 800c13a:	61fb      	str	r3, [r7, #28]
 800c13c:	e03e      	b.n	800c1bc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c13e:	f3ef 8305 	mrs	r3, IPSR
 800c142:	617b      	str	r3, [r7, #20]
  return(result);
 800c144:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10f      	bne.n	800c16a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c14a:	f3ef 8310 	mrs	r3, PRIMASK
 800c14e:	613b      	str	r3, [r7, #16]
  return(result);
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d105      	bne.n	800c162 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c156:	f3ef 8311 	mrs	r3, BASEPRI
 800c15a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d01e      	beq.n	800c1a0 <osSemaphoreRelease+0x80>
 800c162:	4b19      	ldr	r3, [pc, #100]	@ (800c1c8 <osSemaphoreRelease+0xa8>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b02      	cmp	r3, #2
 800c168:	d11a      	bne.n	800c1a0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800c16a:	2300      	movs	r3, #0
 800c16c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c16e:	f107 0308 	add.w	r3, r7, #8
 800c172:	4619      	mov	r1, r3
 800c174:	69b8      	ldr	r0, [r7, #24]
 800c176:	f001 f95c 	bl	800d432 <xQueueGiveFromISR>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d003      	beq.n	800c188 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800c180:	f06f 0302 	mvn.w	r3, #2
 800c184:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c186:	e018      	b.n	800c1ba <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d015      	beq.n	800c1ba <osSemaphoreRelease+0x9a>
 800c18e:	4b0f      	ldr	r3, [pc, #60]	@ (800c1cc <osSemaphoreRelease+0xac>)
 800c190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c19e:	e00c      	b.n	800c1ba <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	69b8      	ldr	r0, [r7, #24]
 800c1a8:	f000 ff96 	bl	800d0d8 <xQueueGenericSend>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d004      	beq.n	800c1bc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800c1b2:	f06f 0302 	mvn.w	r3, #2
 800c1b6:	61fb      	str	r3, [r7, #28]
 800c1b8:	e000      	b.n	800c1bc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c1ba:	bf00      	nop
    }
  }

  return (stat);
 800c1bc:	69fb      	ldr	r3, [r7, #28]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3720      	adds	r7, #32
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20005664 	.word	0x20005664
 800c1cc:	e000ed04 	.word	0xe000ed04

0800c1d0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1dc:	f3ef 8305 	mrs	r3, IPSR
 800c1e0:	617b      	str	r3, [r7, #20]
  return(result);
 800c1e2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d10f      	bne.n	800c208 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1e8:	f3ef 8310 	mrs	r3, PRIMASK
 800c1ec:	613b      	str	r3, [r7, #16]
  return(result);
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d105      	bne.n	800c200 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c1f4:	f3ef 8311 	mrs	r3, BASEPRI
 800c1f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d007      	beq.n	800c210 <osSemaphoreDelete+0x40>
 800c200:	4b0d      	ldr	r3, [pc, #52]	@ (800c238 <osSemaphoreDelete+0x68>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b02      	cmp	r3, #2
 800c206:	d103      	bne.n	800c210 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800c208:	f06f 0305 	mvn.w	r3, #5
 800c20c:	61fb      	str	r3, [r7, #28]
 800c20e:	e00e      	b.n	800c22e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d103      	bne.n	800c21e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800c216:	f06f 0303 	mvn.w	r3, #3
 800c21a:	61fb      	str	r3, [r7, #28]
 800c21c:	e007      	b.n	800c22e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800c21e:	69b8      	ldr	r0, [r7, #24]
 800c220:	f001 fde2 	bl	800dde8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c224:	2300      	movs	r3, #0
 800c226:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800c228:	69b8      	ldr	r0, [r7, #24]
 800c22a:	f001 fc65 	bl	800daf8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c22e:	69fb      	ldr	r3, [r7, #28]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3720      	adds	r7, #32
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	20005664 	.word	0x20005664

0800c23c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b08c      	sub	sp, #48	@ 0x30
 800c240:	af02      	add	r7, sp, #8
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c248:	2300      	movs	r3, #0
 800c24a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c24c:	f3ef 8305 	mrs	r3, IPSR
 800c250:	61bb      	str	r3, [r7, #24]
  return(result);
 800c252:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c254:	2b00      	cmp	r3, #0
 800c256:	d16f      	bne.n	800c338 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c258:	f3ef 8310 	mrs	r3, PRIMASK
 800c25c:	617b      	str	r3, [r7, #20]
  return(result);
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d105      	bne.n	800c270 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c264:	f3ef 8311 	mrs	r3, BASEPRI
 800c268:	613b      	str	r3, [r7, #16]
  return(result);
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <osMessageQueueNew+0x3c>
 800c270:	4b34      	ldr	r3, [pc, #208]	@ (800c344 <osMessageQueueNew+0x108>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b02      	cmp	r3, #2
 800c276:	d05f      	beq.n	800c338 <osMessageQueueNew+0xfc>
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d05c      	beq.n	800c338 <osMessageQueueNew+0xfc>
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d059      	beq.n	800c338 <osMessageQueueNew+0xfc>
    mem = -1;
 800c284:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c288:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d029      	beq.n	800c2e4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d012      	beq.n	800c2be <osMessageQueueNew+0x82>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	2b4f      	cmp	r3, #79	@ 0x4f
 800c29e:	d90e      	bls.n	800c2be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00a      	beq.n	800c2be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	695a      	ldr	r2, [r3, #20]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	68b9      	ldr	r1, [r7, #8]
 800c2b0:	fb01 f303 	mul.w	r3, r1, r3
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d302      	bcc.n	800c2be <osMessageQueueNew+0x82>
        mem = 1;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	623b      	str	r3, [r7, #32]
 800c2bc:	e014      	b.n	800c2e8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d110      	bne.n	800c2e8 <osMessageQueueNew+0xac>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10c      	bne.n	800c2e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d108      	bne.n	800c2e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	695b      	ldr	r3, [r3, #20]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d104      	bne.n	800c2e8 <osMessageQueueNew+0xac>
          mem = 0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	623b      	str	r3, [r7, #32]
 800c2e2:	e001      	b.n	800c2e8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d10b      	bne.n	800c306 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	691a      	ldr	r2, [r3, #16]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	9100      	str	r1, [sp, #0]
 800c2fa:	68b9      	ldr	r1, [r7, #8]
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f000 fccb 	bl	800cc98 <xQueueGenericCreateStatic>
 800c302:	6278      	str	r0, [r7, #36]	@ 0x24
 800c304:	e008      	b.n	800c318 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d105      	bne.n	800c318 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800c30c:	2200      	movs	r2, #0
 800c30e:	68b9      	ldr	r1, [r7, #8]
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 fd48 	bl	800cda6 <xQueueGenericCreate>
 800c316:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00c      	beq.n	800c338 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d003      	beq.n	800c32c <osMessageQueueNew+0xf0>
        name = attr->name;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	61fb      	str	r3, [r7, #28]
 800c32a:	e001      	b.n	800c330 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800c32c:	2300      	movs	r3, #0
 800c32e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800c330:	69f9      	ldr	r1, [r7, #28]
 800c332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c334:	f001 fd2e 	bl	800dd94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3728      	adds	r7, #40	@ 0x28
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	20005664 	.word	0x20005664

0800c348 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c348:	b580      	push	{r7, lr}
 800c34a:	b08a      	sub	sp, #40	@ 0x28
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	4613      	mov	r3, r2
 800c356:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c360:	f3ef 8305 	mrs	r3, IPSR
 800c364:	61fb      	str	r3, [r7, #28]
  return(result);
 800c366:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10f      	bne.n	800c38c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c36c:	f3ef 8310 	mrs	r3, PRIMASK
 800c370:	61bb      	str	r3, [r7, #24]
  return(result);
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d105      	bne.n	800c384 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c378:	f3ef 8311 	mrs	r3, BASEPRI
 800c37c:	617b      	str	r3, [r7, #20]
  return(result);
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d02c      	beq.n	800c3de <osMessageQueuePut+0x96>
 800c384:	4b28      	ldr	r3, [pc, #160]	@ (800c428 <osMessageQueuePut+0xe0>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d128      	bne.n	800c3de <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c38c:	6a3b      	ldr	r3, [r7, #32]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d005      	beq.n	800c39e <osMessageQueuePut+0x56>
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <osMessageQueuePut+0x56>
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d003      	beq.n	800c3a6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800c39e:	f06f 0303 	mvn.w	r3, #3
 800c3a2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c3a4:	e039      	b.n	800c41a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c3aa:	f107 0210 	add.w	r2, r7, #16
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	68b9      	ldr	r1, [r7, #8]
 800c3b2:	6a38      	ldr	r0, [r7, #32]
 800c3b4:	f000 ff9a 	bl	800d2ec <xQueueGenericSendFromISR>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d003      	beq.n	800c3c6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800c3be:	f06f 0302 	mvn.w	r3, #2
 800c3c2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c3c4:	e029      	b.n	800c41a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d026      	beq.n	800c41a <osMessageQueuePut+0xd2>
 800c3cc:	4b17      	ldr	r3, [pc, #92]	@ (800c42c <osMessageQueuePut+0xe4>)
 800c3ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c3dc:	e01d      	b.n	800c41a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <osMessageQueuePut+0xa2>
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d103      	bne.n	800c3f2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800c3ea:	f06f 0303 	mvn.w	r3, #3
 800c3ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3f0:	e014      	b.n	800c41c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	68b9      	ldr	r1, [r7, #8]
 800c3f8:	6a38      	ldr	r0, [r7, #32]
 800c3fa:	f000 fe6d 	bl	800d0d8 <xQueueGenericSend>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b01      	cmp	r3, #1
 800c402:	d00b      	beq.n	800c41c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d003      	beq.n	800c412 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800c40a:	f06f 0301 	mvn.w	r3, #1
 800c40e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c410:	e004      	b.n	800c41c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800c412:	f06f 0302 	mvn.w	r3, #2
 800c416:	627b      	str	r3, [r7, #36]	@ 0x24
 800c418:	e000      	b.n	800c41c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c41a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800c41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3728      	adds	r7, #40	@ 0x28
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	20005664 	.word	0x20005664
 800c42c:	e000ed04 	.word	0xe000ed04

0800c430 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c430:	b580      	push	{r7, lr}
 800c432:	b08a      	sub	sp, #40	@ 0x28
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c442:	2300      	movs	r3, #0
 800c444:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c446:	f3ef 8305 	mrs	r3, IPSR
 800c44a:	61fb      	str	r3, [r7, #28]
  return(result);
 800c44c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10f      	bne.n	800c472 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c452:	f3ef 8310 	mrs	r3, PRIMASK
 800c456:	61bb      	str	r3, [r7, #24]
  return(result);
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d105      	bne.n	800c46a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c45e:	f3ef 8311 	mrs	r3, BASEPRI
 800c462:	617b      	str	r3, [r7, #20]
  return(result);
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d02c      	beq.n	800c4c4 <osMessageQueueGet+0x94>
 800c46a:	4b28      	ldr	r3, [pc, #160]	@ (800c50c <osMessageQueueGet+0xdc>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d128      	bne.n	800c4c4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c472:	6a3b      	ldr	r3, [r7, #32]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d005      	beq.n	800c484 <osMessageQueueGet+0x54>
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d002      	beq.n	800c484 <osMessageQueueGet+0x54>
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d003      	beq.n	800c48c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800c484:	f06f 0303 	mvn.w	r3, #3
 800c488:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c48a:	e038      	b.n	800c4fe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800c48c:	2300      	movs	r3, #0
 800c48e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c490:	f107 0310 	add.w	r3, r7, #16
 800c494:	461a      	mov	r2, r3
 800c496:	68b9      	ldr	r1, [r7, #8]
 800c498:	6a38      	ldr	r0, [r7, #32]
 800c49a:	f001 fa63 	bl	800d964 <xQueueReceiveFromISR>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d003      	beq.n	800c4ac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800c4a4:	f06f 0302 	mvn.w	r3, #2
 800c4a8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c4aa:	e028      	b.n	800c4fe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d025      	beq.n	800c4fe <osMessageQueueGet+0xce>
 800c4b2:	4b17      	ldr	r3, [pc, #92]	@ (800c510 <osMessageQueueGet+0xe0>)
 800c4b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4b8:	601a      	str	r2, [r3, #0]
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c4c2:	e01c      	b.n	800c4fe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c4c4:	6a3b      	ldr	r3, [r7, #32]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <osMessageQueueGet+0xa0>
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d103      	bne.n	800c4d8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800c4d0:	f06f 0303 	mvn.w	r3, #3
 800c4d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4d6:	e013      	b.n	800c500 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c4d8:	683a      	ldr	r2, [r7, #0]
 800c4da:	68b9      	ldr	r1, [r7, #8]
 800c4dc:	6a38      	ldr	r0, [r7, #32]
 800c4de:	f001 f841 	bl	800d564 <xQueueReceive>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d00b      	beq.n	800c500 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800c4ee:	f06f 0301 	mvn.w	r3, #1
 800c4f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4f4:	e004      	b.n	800c500 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800c4f6:	f06f 0302 	mvn.w	r3, #2
 800c4fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4fc:	e000      	b.n	800c500 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c4fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800c500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c502:	4618      	mov	r0, r3
 800c504:	3728      	adds	r7, #40	@ 0x28
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	20005664 	.word	0x20005664
 800c510:	e000ed04 	.word	0xe000ed04

0800c514 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d102      	bne.n	800c52c <osMessageQueueGetCount+0x18>
    count = 0U;
 800c526:	2300      	movs	r3, #0
 800c528:	61fb      	str	r3, [r7, #28]
 800c52a:	e01e      	b.n	800c56a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c52c:	f3ef 8305 	mrs	r3, IPSR
 800c530:	617b      	str	r3, [r7, #20]
  return(result);
 800c532:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10f      	bne.n	800c558 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c538:	f3ef 8310 	mrs	r3, PRIMASK
 800c53c:	613b      	str	r3, [r7, #16]
  return(result);
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d105      	bne.n	800c550 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c544:	f3ef 8311 	mrs	r3, BASEPRI
 800c548:	60fb      	str	r3, [r7, #12]
  return(result);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d008      	beq.n	800c562 <osMessageQueueGetCount+0x4e>
 800c550:	4b08      	ldr	r3, [pc, #32]	@ (800c574 <osMessageQueueGetCount+0x60>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b02      	cmp	r3, #2
 800c556:	d104      	bne.n	800c562 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800c558:	69b8      	ldr	r0, [r7, #24]
 800c55a:	f001 faac 	bl	800dab6 <uxQueueMessagesWaitingFromISR>
 800c55e:	61f8      	str	r0, [r7, #28]
 800c560:	e003      	b.n	800c56a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800c562:	69b8      	ldr	r0, [r7, #24]
 800c564:	f001 fa86 	bl	800da74 <uxQueueMessagesWaiting>
 800c568:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800c56a:	69fb      	ldr	r3, [r7, #28]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3720      	adds	r7, #32
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20005664 	.word	0x20005664

0800c578 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c584:	f3ef 8305 	mrs	r3, IPSR
 800c588:	617b      	str	r3, [r7, #20]
  return(result);
 800c58a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10f      	bne.n	800c5b0 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c590:	f3ef 8310 	mrs	r3, PRIMASK
 800c594:	613b      	str	r3, [r7, #16]
  return(result);
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d105      	bne.n	800c5a8 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c59c:	f3ef 8311 	mrs	r3, BASEPRI
 800c5a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d007      	beq.n	800c5b8 <osMessageQueueDelete+0x40>
 800c5a8:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e0 <osMessageQueueDelete+0x68>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d103      	bne.n	800c5b8 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800c5b0:	f06f 0305 	mvn.w	r3, #5
 800c5b4:	61fb      	str	r3, [r7, #28]
 800c5b6:	e00e      	b.n	800c5d6 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d103      	bne.n	800c5c6 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800c5be:	f06f 0303 	mvn.w	r3, #3
 800c5c2:	61fb      	str	r3, [r7, #28]
 800c5c4:	e007      	b.n	800c5d6 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800c5c6:	69b8      	ldr	r0, [r7, #24]
 800c5c8:	f001 fc0e 	bl	800dde8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800c5d0:	69b8      	ldr	r0, [r7, #24]
 800c5d2:	f001 fa91 	bl	800daf8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c5d6:	69fb      	ldr	r3, [r7, #28]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3720      	adds	r7, #32
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20005664 	.word	0x20005664

0800c5e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	4a07      	ldr	r2, [pc, #28]	@ (800c610 <vApplicationGetIdleTaskMemory+0x2c>)
 800c5f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	4a06      	ldr	r2, [pc, #24]	@ (800c614 <vApplicationGetIdleTaskMemory+0x30>)
 800c5fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c602:	601a      	str	r2, [r3, #0]
}
 800c604:	bf00      	nop
 800c606:	3714      	adds	r7, #20
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr
 800c610:	20005668 	.word	0x20005668
 800c614:	20005710 	.word	0x20005710

0800c618 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	4a07      	ldr	r2, [pc, #28]	@ (800c644 <vApplicationGetTimerTaskMemory+0x2c>)
 800c628:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	4a06      	ldr	r2, [pc, #24]	@ (800c648 <vApplicationGetTimerTaskMemory+0x30>)
 800c62e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c636:	601a      	str	r2, [r3, #0]
}
 800c638:	bf00      	nop
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	20005f10 	.word	0x20005f10
 800c648:	20005fb8 	.word	0x20005fb8

0800c64c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10d      	bne.n	800c676 <xEventGroupCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c65e:	b672      	cpsid	i
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	b662      	cpsie	i
 800c66e:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c670:	bf00      	nop
 800c672:	bf00      	nop
 800c674:	e7fd      	b.n	800c672 <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c676:	2320      	movs	r3, #32
 800c678:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	2b20      	cmp	r3, #32
 800c67e:	d00d      	beq.n	800c69c <xEventGroupCreateStatic+0x50>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c684:	b672      	cpsid	i
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	b662      	cpsie	i
 800c694:	60fb      	str	r3, [r7, #12]
}
 800c696:	bf00      	nop
 800c698:	bf00      	nop
 800c69a:	e7fd      	b.n	800c698 <xEventGroupCreateStatic+0x4c>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00a      	beq.n	800c6bc <xEventGroupCreateStatic+0x70>
		{
			pxEventBits->uxEventBits = 0;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 f9d1 	bl	800ca58 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c6bc:	697b      	ldr	r3, [r7, #20]
	}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3718      	adds	r7, #24
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c6cc:	2020      	movs	r0, #32
 800c6ce:	f003 fab3 	bl	800fc38 <pvPortMalloc>
 800c6d2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00a      	beq.n	800c6f0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3304      	adds	r3, #4
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 f9b7 	bl	800ca58 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c6f0:	687b      	ldr	r3, [r7, #4]
	}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
	...

0800c6fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b090      	sub	sp, #64	@ 0x40
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c70e:	2300      	movs	r3, #0
 800c710:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c712:	2300      	movs	r3, #0
 800c714:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d10d      	bne.n	800c738 <xEventGroupWaitBits+0x3c>
	__asm volatile
 800c71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c720:	b672      	cpsid	i
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	b662      	cpsie	i
 800c730:	623b      	str	r3, [r7, #32]
}
 800c732:	bf00      	nop
 800c734:	bf00      	nop
 800c736:	e7fd      	b.n	800c734 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c73e:	d30d      	bcc.n	800c75c <xEventGroupWaitBits+0x60>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c744:	b672      	cpsid	i
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	b662      	cpsie	i
 800c754:	61fb      	str	r3, [r7, #28]
}
 800c756:	bf00      	nop
 800c758:	bf00      	nop
 800c75a:	e7fd      	b.n	800c758 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10d      	bne.n	800c77e <xEventGroupWaitBits+0x82>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c766:	b672      	cpsid	i
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	b662      	cpsie	i
 800c776:	61bb      	str	r3, [r7, #24]
}
 800c778:	bf00      	nop
 800c77a:	bf00      	nop
 800c77c:	e7fd      	b.n	800c77a <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c77e:	f002 fa95 	bl	800ecac <xTaskGetSchedulerState>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <xEventGroupWaitBits+0x92>
 800c788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d101      	bne.n	800c792 <xEventGroupWaitBits+0x96>
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <xEventGroupWaitBits+0x98>
 800c792:	2300      	movs	r3, #0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10d      	bne.n	800c7b4 <xEventGroupWaitBits+0xb8>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c79c:	b672      	cpsid	i
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	b662      	cpsie	i
 800c7ac:	617b      	str	r3, [r7, #20]
}
 800c7ae:	bf00      	nop
 800c7b0:	bf00      	nop
 800c7b2:	e7fd      	b.n	800c7b0 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 800c7b4:	f001 fde8 	bl	800e388 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c7be:	683a      	ldr	r2, [r7, #0]
 800c7c0:	68b9      	ldr	r1, [r7, #8]
 800c7c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7c4:	f000 f911 	bl	800c9ea <prvTestWaitCondition>
 800c7c8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800c7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00e      	beq.n	800c7ee <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d028      	beq.n	800c830 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c7de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	43db      	mvns	r3, r3
 800c7e6:	401a      	ands	r2, r3
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ea:	601a      	str	r2, [r3, #0]
 800c7ec:	e020      	b.n	800c830 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c7ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d104      	bne.n	800c7fe <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7fc:	e018      	b.n	800c830 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d003      	beq.n	800c80c <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c80a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d003      	beq.n	800c81a <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c814:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c818:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c81c:	1d18      	adds	r0, r3, #4
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c822:	4313      	orrs	r3, r2
 800c824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c826:	4619      	mov	r1, r3
 800c828:	f001 ffee 	bl	800e808 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c82c:	2300      	movs	r3, #0
 800c82e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c830:	f001 fdb8 	bl	800e3a4 <xTaskResumeAll>
 800c834:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d031      	beq.n	800c8a0 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 800c83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d107      	bne.n	800c852 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 800c842:	4b1a      	ldr	r3, [pc, #104]	@ (800c8ac <xEventGroupWaitBits+0x1b0>)
 800c844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c848:	601a      	str	r2, [r3, #0]
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c852:	f002 fbad 	bl	800efb0 <uxTaskResetEventItemValue>
 800c856:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c85a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d11a      	bne.n	800c898 <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 800c862:	f003 f8bb 	bl	800f9dc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c86c:	683a      	ldr	r2, [r7, #0]
 800c86e:	68b9      	ldr	r1, [r7, #8]
 800c870:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c872:	f000 f8ba 	bl	800c9ea <prvTestWaitCondition>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d009      	beq.n	800c890 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d006      	beq.n	800c890 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	43db      	mvns	r3, r3
 800c88a:	401a      	ands	r2, r3
 800c88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c88e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c890:	2301      	movs	r3, #1
 800c892:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800c894:	f003 f8d8 	bl	800fa48 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c89a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3740      	adds	r7, #64	@ 0x40
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	e000ed04 	.word	0xe000ed04

0800c8b0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08e      	sub	sp, #56	@ 0x38
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10d      	bne.n	800c8e8 <xEventGroupSetBits+0x38>
	__asm volatile
 800c8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d0:	b672      	cpsid	i
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	b662      	cpsie	i
 800c8e0:	613b      	str	r3, [r7, #16]
}
 800c8e2:	bf00      	nop
 800c8e4:	bf00      	nop
 800c8e6:	e7fd      	b.n	800c8e4 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8ee:	d30d      	bcc.n	800c90c <xEventGroupSetBits+0x5c>
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f4:	b672      	cpsid	i
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	b662      	cpsie	i
 800c904:	60fb      	str	r3, [r7, #12]
}
 800c906:	bf00      	nop
 800c908:	bf00      	nop
 800c90a:	e7fd      	b.n	800c908 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c90e:	3304      	adds	r3, #4
 800c910:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c914:	3308      	adds	r3, #8
 800c916:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c918:	f001 fd36 	bl	800e388 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	431a      	orrs	r2, r3
 800c92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c92c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c92e:	e03c      	b.n	800c9aa <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c93c:	2300      	movs	r3, #0
 800c93e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c946:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c94e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c956:	2b00      	cmp	r3, #0
 800c958:	d108      	bne.n	800c96c <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	4013      	ands	r3, r2
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00b      	beq.n	800c97e <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 800c966:	2301      	movs	r3, #1
 800c968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c96a:	e008      	b.n	800c97e <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	4013      	ands	r3, r2
 800c974:	69ba      	ldr	r2, [r7, #24]
 800c976:	429a      	cmp	r2, r3
 800c978:	d101      	bne.n	800c97e <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c97a:	2301      	movs	r3, #1
 800c97c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c980:	2b00      	cmp	r3, #0
 800c982:	d010      	beq.n	800c9a6 <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d003      	beq.n	800c996 <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c98e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	4313      	orrs	r3, r2
 800c994:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c99e:	4619      	mov	r1, r3
 800c9a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c9a2:	f002 f807 	bl	800e9b4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800c9aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9ac:	6a3b      	ldr	r3, [r7, #32]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d1be      	bne.n	800c930 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b8:	43db      	mvns	r3, r3
 800c9ba:	401a      	ands	r2, r3
 800c9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9be:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c9c0:	f001 fcf0 	bl	800e3a4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c6:	681b      	ldr	r3, [r3, #0]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3738      	adds	r7, #56	@ 0x38
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c9da:	6839      	ldr	r1, [r7, #0]
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7ff ff67 	bl	800c8b0 <xEventGroupSetBits>
}
 800c9e2:	bf00      	nop
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c9ea:	b480      	push	{r7}
 800c9ec:	b087      	sub	sp, #28
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	60f8      	str	r0, [r7, #12]
 800c9f2:	60b9      	str	r1, [r7, #8]
 800c9f4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d107      	bne.n	800ca10 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	4013      	ands	r3, r2
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00a      	beq.n	800ca20 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	617b      	str	r3, [r7, #20]
 800ca0e:	e007      	b.n	800ca20 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	4013      	ands	r3, r2
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d101      	bne.n	800ca20 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800ca20:	697b      	ldr	r3, [r7, #20]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	371c      	adds	r7, #28
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
	...

0800ca30 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	68f9      	ldr	r1, [r7, #12]
 800ca42:	4804      	ldr	r0, [pc, #16]	@ (800ca54 <xEventGroupSetBitsFromISR+0x24>)
 800ca44:	f002 fe9c 	bl	800f780 <xTimerPendFunctionCallFromISR>
 800ca48:	6178      	str	r0, [r7, #20]

		return xReturn;
 800ca4a:	697b      	ldr	r3, [r7, #20]
	}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3718      	adds	r7, #24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	0800c9d1 	.word	0x0800c9d1

0800ca58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f103 0208 	add.w	r2, r3, #8
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f103 0208 	add.w	r2, r3, #8
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f103 0208 	add.w	r2, r3, #8
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca8c:	bf00      	nop
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800caa6:	bf00      	nop
 800caa8:	370c      	adds	r7, #12
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cab2:	b480      	push	{r7}
 800cab4:	b085      	sub	sp, #20
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
 800caba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	689a      	ldr	r2, [r3, #8]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	1c5a      	adds	r2, r3, #1
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	601a      	str	r2, [r3, #0]
}
 800caee:	bf00      	nop
 800caf0:	3714      	adds	r7, #20
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr

0800cafa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cafa:	b480      	push	{r7}
 800cafc:	b085      	sub	sp, #20
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb10:	d103      	bne.n	800cb1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	e00c      	b.n	800cb34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	60fb      	str	r3, [r7, #12]
 800cb20:	e002      	b.n	800cb28 <vListInsert+0x2e>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	60fb      	str	r3, [r7, #12]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d2f6      	bcs.n	800cb22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	685a      	ldr	r2, [r3, #4]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	1c5a      	adds	r2, r3, #1
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	601a      	str	r2, [r3, #0]
}
 800cb60:	bf00      	nop
 800cb62:	3714      	adds	r7, #20
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	691b      	ldr	r3, [r3, #16]
 800cb78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	6892      	ldr	r2, [r2, #8]
 800cb82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	6852      	ldr	r2, [r2, #4]
 800cb8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d103      	bne.n	800cba0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	689a      	ldr	r2, [r3, #8]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	1e5a      	subs	r2, r3, #1
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3714      	adds	r7, #20
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10d      	bne.n	800cbf0 <xQueueGenericReset+0x30>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd8:	b672      	cpsid	i
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	b662      	cpsie	i
 800cbe8:	60bb      	str	r3, [r7, #8]
}
 800cbea:	bf00      	nop
 800cbec:	bf00      	nop
 800cbee:	e7fd      	b.n	800cbec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cbf0:	f002 fef4 	bl	800f9dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbfc:	68f9      	ldr	r1, [r7, #12]
 800cbfe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc00:	fb01 f303 	mul.w	r3, r1, r3
 800cc04:	441a      	add	r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc20:	3b01      	subs	r3, #1
 800cc22:	68f9      	ldr	r1, [r7, #12]
 800cc24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc26:	fb01 f303 	mul.w	r3, r1, r3
 800cc2a:	441a      	add	r2, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	22ff      	movs	r2, #255	@ 0xff
 800cc34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	22ff      	movs	r2, #255	@ 0xff
 800cc3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d114      	bne.n	800cc70 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d01a      	beq.n	800cc84 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3310      	adds	r3, #16
 800cc52:	4618      	mov	r0, r3
 800cc54:	f001 fe48 	bl	800e8e8 <xTaskRemoveFromEventList>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d012      	beq.n	800cc84 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc94 <xQueueGenericReset+0xd4>)
 800cc60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc64:	601a      	str	r2, [r3, #0]
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	e009      	b.n	800cc84 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	3310      	adds	r3, #16
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7ff feef 	bl	800ca58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	3324      	adds	r3, #36	@ 0x24
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7ff feea 	bl	800ca58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc84:	f002 fee0 	bl	800fa48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc88:	2301      	movs	r3, #1
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3710      	adds	r7, #16
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	e000ed04 	.word	0xe000ed04

0800cc98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b08e      	sub	sp, #56	@ 0x38
 800cc9c:	af02      	add	r7, sp, #8
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
 800cca4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10d      	bne.n	800ccc8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800ccac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb0:	b672      	cpsid	i
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	b662      	cpsie	i
 800ccc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ccc2:	bf00      	nop
 800ccc4:	bf00      	nop
 800ccc6:	e7fd      	b.n	800ccc4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10d      	bne.n	800ccea <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd2:	b672      	cpsid	i
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	b662      	cpsie	i
 800cce2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop
 800cce8:	e7fd      	b.n	800cce6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d002      	beq.n	800ccf6 <xQueueGenericCreateStatic+0x5e>
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d001      	beq.n	800ccfa <xQueueGenericCreateStatic+0x62>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e000      	b.n	800ccfc <xQueueGenericCreateStatic+0x64>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10d      	bne.n	800cd1c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd04:	b672      	cpsid	i
 800cd06:	f383 8811 	msr	BASEPRI, r3
 800cd0a:	f3bf 8f6f 	isb	sy
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	b662      	cpsie	i
 800cd14:	623b      	str	r3, [r7, #32]
}
 800cd16:	bf00      	nop
 800cd18:	bf00      	nop
 800cd1a:	e7fd      	b.n	800cd18 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d102      	bne.n	800cd28 <xQueueGenericCreateStatic+0x90>
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <xQueueGenericCreateStatic+0x94>
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e000      	b.n	800cd2e <xQueueGenericCreateStatic+0x96>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10d      	bne.n	800cd4e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800cd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd36:	b672      	cpsid	i
 800cd38:	f383 8811 	msr	BASEPRI, r3
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	b662      	cpsie	i
 800cd46:	61fb      	str	r3, [r7, #28]
}
 800cd48:	bf00      	nop
 800cd4a:	bf00      	nop
 800cd4c:	e7fd      	b.n	800cd4a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd4e:	2350      	movs	r3, #80	@ 0x50
 800cd50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	2b50      	cmp	r3, #80	@ 0x50
 800cd56:	d00d      	beq.n	800cd74 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800cd58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd5c:	b672      	cpsid	i
 800cd5e:	f383 8811 	msr	BASEPRI, r3
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	b662      	cpsie	i
 800cd6c:	61bb      	str	r3, [r7, #24]
}
 800cd6e:	bf00      	nop
 800cd70:	bf00      	nop
 800cd72:	e7fd      	b.n	800cd70 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00d      	beq.n	800cd9c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	4613      	mov	r3, r2
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	68b9      	ldr	r1, [r7, #8]
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f000 f848 	bl	800ce2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3730      	adds	r7, #48	@ 0x30
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b08a      	sub	sp, #40	@ 0x28
 800cdaa:	af02      	add	r7, sp, #8
 800cdac:	60f8      	str	r0, [r7, #12]
 800cdae:	60b9      	str	r1, [r7, #8]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10d      	bne.n	800cdd6 <xQueueGenericCreate+0x30>
	__asm volatile
 800cdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdbe:	b672      	cpsid	i
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	b662      	cpsie	i
 800cdce:	613b      	str	r3, [r7, #16]
}
 800cdd0:	bf00      	nop
 800cdd2:	bf00      	nop
 800cdd4:	e7fd      	b.n	800cdd2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d102      	bne.n	800cde2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	61fb      	str	r3, [r7, #28]
 800cde0:	e004      	b.n	800cdec <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	fb02 f303 	mul.w	r3, r2, r3
 800cdea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	3350      	adds	r3, #80	@ 0x50
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f002 ff21 	bl	800fc38 <pvPortMalloc>
 800cdf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d011      	beq.n	800ce22 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	3350      	adds	r3, #80	@ 0x50
 800ce06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce10:	79fa      	ldrb	r2, [r7, #7]
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	4613      	mov	r3, r2
 800ce18:	697a      	ldr	r2, [r7, #20]
 800ce1a:	68b9      	ldr	r1, [r7, #8]
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 f805 	bl	800ce2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce22:	69bb      	ldr	r3, [r7, #24]
	}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3720      	adds	r7, #32
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
 800ce38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d103      	bne.n	800ce48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	69ba      	ldr	r2, [r7, #24]
 800ce44:	601a      	str	r2, [r3, #0]
 800ce46:	e002      	b.n	800ce4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	68ba      	ldr	r2, [r7, #8]
 800ce58:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce5a:	2101      	movs	r1, #1
 800ce5c:	69b8      	ldr	r0, [r7, #24]
 800ce5e:	f7ff feaf 	bl	800cbc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	78fa      	ldrb	r2, [r7, #3]
 800ce66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce6a:	bf00      	nop
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b082      	sub	sp, #8
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00e      	beq.n	800ce9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ce92:	2300      	movs	r3, #0
 800ce94:	2200      	movs	r2, #0
 800ce96:	2100      	movs	r1, #0
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 f91d 	bl	800d0d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ce9e:	bf00      	nop
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b086      	sub	sp, #24
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	4603      	mov	r3, r0
 800ceae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	617b      	str	r3, [r7, #20]
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ceb8:	79fb      	ldrb	r3, [r7, #7]
 800ceba:	461a      	mov	r2, r3
 800cebc:	6939      	ldr	r1, [r7, #16]
 800cebe:	6978      	ldr	r0, [r7, #20]
 800cec0:	f7ff ff71 	bl	800cda6 <xQueueGenericCreate>
 800cec4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f7ff ffd3 	bl	800ce72 <prvInitialiseMutex>

		return xNewQueue;
 800cecc:	68fb      	ldr	r3, [r7, #12]
	}
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b088      	sub	sp, #32
 800ceda:	af02      	add	r7, sp, #8
 800cedc:	4603      	mov	r3, r0
 800cede:	6039      	str	r1, [r7, #0]
 800cee0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cee2:	2301      	movs	r3, #1
 800cee4:	617b      	str	r3, [r7, #20]
 800cee6:	2300      	movs	r3, #0
 800cee8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ceea:	79fb      	ldrb	r3, [r7, #7]
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2200      	movs	r2, #0
 800cef2:	6939      	ldr	r1, [r7, #16]
 800cef4:	6978      	ldr	r0, [r7, #20]
 800cef6:	f7ff fecf 	bl	800cc98 <xQueueGenericCreateStatic>
 800cefa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f7ff ffb8 	bl	800ce72 <prvInitialiseMutex>

		return xNewQueue;
 800cf02:	68fb      	ldr	r3, [r7, #12]
	}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3718      	adds	r7, #24
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cf0c:	b590      	push	{r4, r7, lr}
 800cf0e:	b087      	sub	sp, #28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10d      	bne.n	800cf3a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf22:	b672      	cpsid	i
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	b662      	cpsie	i
 800cf32:	60fb      	str	r3, [r7, #12]
}
 800cf34:	bf00      	nop
 800cf36:	bf00      	nop
 800cf38:	e7fd      	b.n	800cf36 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	689c      	ldr	r4, [r3, #8]
 800cf3e:	f001 fea5 	bl	800ec8c <xTaskGetCurrentTaskHandle>
 800cf42:	4603      	mov	r3, r0
 800cf44:	429c      	cmp	r4, r3
 800cf46:	d111      	bne.n	800cf6c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	1e5a      	subs	r2, r3, #1
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d105      	bne.n	800cf66 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	2100      	movs	r1, #0
 800cf60:	6938      	ldr	r0, [r7, #16]
 800cf62:	f000 f8b9 	bl	800d0d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cf66:	2301      	movs	r3, #1
 800cf68:	617b      	str	r3, [r7, #20]
 800cf6a:	e001      	b.n	800cf70 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cf70:	697b      	ldr	r3, [r7, #20]
	}
 800cf72:	4618      	mov	r0, r3
 800cf74:	371c      	adds	r7, #28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd90      	pop	{r4, r7, pc}

0800cf7a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cf7a:	b590      	push	{r4, r7, lr}
 800cf7c:	b087      	sub	sp, #28
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10d      	bne.n	800cfaa <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf92:	b672      	cpsid	i
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	b662      	cpsie	i
 800cfa2:	60fb      	str	r3, [r7, #12]
}
 800cfa4:	bf00      	nop
 800cfa6:	bf00      	nop
 800cfa8:	e7fd      	b.n	800cfa6 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	689c      	ldr	r4, [r3, #8]
 800cfae:	f001 fe6d 	bl	800ec8c <xTaskGetCurrentTaskHandle>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	429c      	cmp	r4, r3
 800cfb6:	d107      	bne.n	800cfc8 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	1c5a      	adds	r2, r3, #1
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	617b      	str	r3, [r7, #20]
 800cfc6:	e00c      	b.n	800cfe2 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cfc8:	6839      	ldr	r1, [r7, #0]
 800cfca:	6938      	ldr	r0, [r7, #16]
 800cfcc:	f000 fbb2 	bl	800d734 <xQueueSemaphoreTake>
 800cfd0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d004      	beq.n	800cfe2 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	1c5a      	adds	r2, r3, #1
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cfe2:	697b      	ldr	r3, [r7, #20]
	}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	371c      	adds	r7, #28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd90      	pop	{r4, r7, pc}

0800cfec <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b08a      	sub	sp, #40	@ 0x28
 800cff0:	af02      	add	r7, sp, #8
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d10d      	bne.n	800d01a <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800cffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d002:	b672      	cpsid	i
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	b662      	cpsie	i
 800d012:	61bb      	str	r3, [r7, #24]
}
 800d014:	bf00      	nop
 800d016:	bf00      	nop
 800d018:	e7fd      	b.n	800d016 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d90d      	bls.n	800d03e <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800d022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d026:	b672      	cpsid	i
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	b662      	cpsie	i
 800d036:	617b      	str	r3, [r7, #20]
}
 800d038:	bf00      	nop
 800d03a:	bf00      	nop
 800d03c:	e7fd      	b.n	800d03a <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d03e:	2302      	movs	r3, #2
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	2100      	movs	r1, #0
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f7ff fe25 	bl	800cc98 <xQueueGenericCreateStatic>
 800d04e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d002      	beq.n	800d05c <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d05c:	69fb      	ldr	r3, [r7, #28]
	}
 800d05e:	4618      	mov	r0, r3
 800d060:	3720      	adds	r7, #32
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d066:	b580      	push	{r7, lr}
 800d068:	b086      	sub	sp, #24
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10d      	bne.n	800d092 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07a:	b672      	cpsid	i
 800d07c:	f383 8811 	msr	BASEPRI, r3
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	b662      	cpsie	i
 800d08a:	613b      	str	r3, [r7, #16]
}
 800d08c:	bf00      	nop
 800d08e:	bf00      	nop
 800d090:	e7fd      	b.n	800d08e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	429a      	cmp	r2, r3
 800d098:	d90d      	bls.n	800d0b6 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800d09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d09e:	b672      	cpsid	i
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	b662      	cpsie	i
 800d0ae:	60fb      	str	r3, [r7, #12]
}
 800d0b0:	bf00      	nop
 800d0b2:	bf00      	nop
 800d0b4:	e7fd      	b.n	800d0b2 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d0b6:	2202      	movs	r2, #2
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7ff fe73 	bl	800cda6 <xQueueGenericCreate>
 800d0c0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d002      	beq.n	800d0ce <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	683a      	ldr	r2, [r7, #0]
 800d0cc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d0ce:	697b      	ldr	r3, [r7, #20]
	}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3718      	adds	r7, #24
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08e      	sub	sp, #56	@ 0x38
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
 800d0e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10d      	bne.n	800d110 <xQueueGenericSend+0x38>
	__asm volatile
 800d0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f8:	b672      	cpsid	i
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	b662      	cpsie	i
 800d108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d10a:	bf00      	nop
 800d10c:	bf00      	nop
 800d10e:	e7fd      	b.n	800d10c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d103      	bne.n	800d11e <xQueueGenericSend+0x46>
 800d116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <xQueueGenericSend+0x4a>
 800d11e:	2301      	movs	r3, #1
 800d120:	e000      	b.n	800d124 <xQueueGenericSend+0x4c>
 800d122:	2300      	movs	r3, #0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10d      	bne.n	800d144 <xQueueGenericSend+0x6c>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12c:	b672      	cpsid	i
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	b662      	cpsie	i
 800d13c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d13e:	bf00      	nop
 800d140:	bf00      	nop
 800d142:	e7fd      	b.n	800d140 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	2b02      	cmp	r3, #2
 800d148:	d103      	bne.n	800d152 <xQueueGenericSend+0x7a>
 800d14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d101      	bne.n	800d156 <xQueueGenericSend+0x7e>
 800d152:	2301      	movs	r3, #1
 800d154:	e000      	b.n	800d158 <xQueueGenericSend+0x80>
 800d156:	2300      	movs	r3, #0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10d      	bne.n	800d178 <xQueueGenericSend+0xa0>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d160:	b672      	cpsid	i
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	b662      	cpsie	i
 800d170:	623b      	str	r3, [r7, #32]
}
 800d172:	bf00      	nop
 800d174:	bf00      	nop
 800d176:	e7fd      	b.n	800d174 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d178:	f001 fd98 	bl	800ecac <xTaskGetSchedulerState>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d102      	bne.n	800d188 <xQueueGenericSend+0xb0>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d101      	bne.n	800d18c <xQueueGenericSend+0xb4>
 800d188:	2301      	movs	r3, #1
 800d18a:	e000      	b.n	800d18e <xQueueGenericSend+0xb6>
 800d18c:	2300      	movs	r3, #0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10d      	bne.n	800d1ae <xQueueGenericSend+0xd6>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d196:	b672      	cpsid	i
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	b662      	cpsie	i
 800d1a6:	61fb      	str	r3, [r7, #28]
}
 800d1a8:	bf00      	nop
 800d1aa:	bf00      	nop
 800d1ac:	e7fd      	b.n	800d1aa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1ae:	f002 fc15 	bl	800f9dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d302      	bcc.n	800d1c4 <xQueueGenericSend+0xec>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d129      	bne.n	800d218 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1c4:	683a      	ldr	r2, [r7, #0]
 800d1c6:	68b9      	ldr	r1, [r7, #8]
 800d1c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1ca:	f000 fcd3 	bl	800db74 <prvCopyDataToQueue>
 800d1ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d010      	beq.n	800d1fa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1da:	3324      	adds	r3, #36	@ 0x24
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f001 fb83 	bl	800e8e8 <xTaskRemoveFromEventList>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d013      	beq.n	800d210 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1e8:	4b3f      	ldr	r3, [pc, #252]	@ (800d2e8 <xQueueGenericSend+0x210>)
 800d1ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	e00a      	b.n	800d210 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d007      	beq.n	800d210 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d200:	4b39      	ldr	r3, [pc, #228]	@ (800d2e8 <xQueueGenericSend+0x210>)
 800d202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d210:	f002 fc1a 	bl	800fa48 <vPortExitCritical>
				return pdPASS;
 800d214:	2301      	movs	r3, #1
 800d216:	e063      	b.n	800d2e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d103      	bne.n	800d226 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d21e:	f002 fc13 	bl	800fa48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d222:	2300      	movs	r3, #0
 800d224:	e05c      	b.n	800d2e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d106      	bne.n	800d23a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d22c:	f107 0314 	add.w	r3, r7, #20
 800d230:	4618      	mov	r0, r3
 800d232:	f001 fc27 	bl	800ea84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d236:	2301      	movs	r3, #1
 800d238:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d23a:	f002 fc05 	bl	800fa48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d23e:	f001 f8a3 	bl	800e388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d242:	f002 fbcb 	bl	800f9dc <vPortEnterCritical>
 800d246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d248:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d24c:	b25b      	sxtb	r3, r3
 800d24e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d252:	d103      	bne.n	800d25c <xQueueGenericSend+0x184>
 800d254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d256:	2200      	movs	r2, #0
 800d258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d262:	b25b      	sxtb	r3, r3
 800d264:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d268:	d103      	bne.n	800d272 <xQueueGenericSend+0x19a>
 800d26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d272:	f002 fbe9 	bl	800fa48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d276:	1d3a      	adds	r2, r7, #4
 800d278:	f107 0314 	add.w	r3, r7, #20
 800d27c:	4611      	mov	r1, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f001 fc16 	bl	800eab0 <xTaskCheckForTimeOut>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d124      	bne.n	800d2d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d28a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d28c:	f000 fd6a 	bl	800dd64 <prvIsQueueFull>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d018      	beq.n	800d2c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	3310      	adds	r3, #16
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	4611      	mov	r1, r2
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f001 fa8a 	bl	800e7b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2a6:	f000 fcf5 	bl	800dc94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2aa:	f001 f87b 	bl	800e3a4 <xTaskResumeAll>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f47f af7c 	bne.w	800d1ae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800d2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d2e8 <xQueueGenericSend+0x210>)
 800d2b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2bc:	601a      	str	r2, [r3, #0]
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	e772      	b.n	800d1ae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2ca:	f000 fce3 	bl	800dc94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2ce:	f001 f869 	bl	800e3a4 <xTaskResumeAll>
 800d2d2:	e76c      	b.n	800d1ae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2d6:	f000 fcdd 	bl	800dc94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2da:	f001 f863 	bl	800e3a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3738      	adds	r7, #56	@ 0x38
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	e000ed04 	.word	0xe000ed04

0800d2ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b08e      	sub	sp, #56	@ 0x38
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10d      	bne.n	800d320 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d308:	b672      	cpsid	i
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	b662      	cpsie	i
 800d318:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d31a:	bf00      	nop
 800d31c:	bf00      	nop
 800d31e:	e7fd      	b.n	800d31c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d103      	bne.n	800d32e <xQueueGenericSendFromISR+0x42>
 800d326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <xQueueGenericSendFromISR+0x46>
 800d32e:	2301      	movs	r3, #1
 800d330:	e000      	b.n	800d334 <xQueueGenericSendFromISR+0x48>
 800d332:	2300      	movs	r3, #0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10d      	bne.n	800d354 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800d338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d33c:	b672      	cpsid	i
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	b662      	cpsie	i
 800d34c:	623b      	str	r3, [r7, #32]
}
 800d34e:	bf00      	nop
 800d350:	bf00      	nop
 800d352:	e7fd      	b.n	800d350 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	2b02      	cmp	r3, #2
 800d358:	d103      	bne.n	800d362 <xQueueGenericSendFromISR+0x76>
 800d35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d101      	bne.n	800d366 <xQueueGenericSendFromISR+0x7a>
 800d362:	2301      	movs	r3, #1
 800d364:	e000      	b.n	800d368 <xQueueGenericSendFromISR+0x7c>
 800d366:	2300      	movs	r3, #0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d10d      	bne.n	800d388 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800d36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d370:	b672      	cpsid	i
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	b662      	cpsie	i
 800d380:	61fb      	str	r3, [r7, #28]
}
 800d382:	bf00      	nop
 800d384:	bf00      	nop
 800d386:	e7fd      	b.n	800d384 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d388:	f002 fc10 	bl	800fbac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d38c:	f3ef 8211 	mrs	r2, BASEPRI
 800d390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d394:	b672      	cpsid	i
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	b662      	cpsie	i
 800d3a4:	61ba      	str	r2, [r7, #24]
 800d3a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d302      	bcc.n	800d3be <xQueueGenericSendFromISR+0xd2>
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	d12c      	bne.n	800d418 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3c8:	683a      	ldr	r2, [r7, #0]
 800d3ca:	68b9      	ldr	r1, [r7, #8]
 800d3cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3ce:	f000 fbd1 	bl	800db74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800d3d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3da:	d112      	bne.n	800d402 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d016      	beq.n	800d412 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e6:	3324      	adds	r3, #36	@ 0x24
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f001 fa7d 	bl	800e8e8 <xTaskRemoveFromEventList>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00e      	beq.n	800d412 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00b      	beq.n	800d412 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	601a      	str	r2, [r3, #0]
 800d400:	e007      	b.n	800d412 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d402:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d406:	3301      	adds	r3, #1
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	b25a      	sxtb	r2, r3
 800d40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d412:	2301      	movs	r3, #1
 800d414:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800d416:	e001      	b.n	800d41c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d418:	2300      	movs	r3, #0
 800d41a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d41e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d426:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3738      	adds	r7, #56	@ 0x38
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b08e      	sub	sp, #56	@ 0x38
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
 800d43a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10d      	bne.n	800d462 <xQueueGiveFromISR+0x30>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44a:	b672      	cpsid	i
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	b662      	cpsie	i
 800d45a:	623b      	str	r3, [r7, #32]
}
 800d45c:	bf00      	nop
 800d45e:	bf00      	nop
 800d460:	e7fd      	b.n	800d45e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00d      	beq.n	800d486 <xQueueGiveFromISR+0x54>
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46e:	b672      	cpsid	i
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	b662      	cpsie	i
 800d47e:	61fb      	str	r3, [r7, #28]
}
 800d480:	bf00      	nop
 800d482:	bf00      	nop
 800d484:	e7fd      	b.n	800d482 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d103      	bne.n	800d496 <xQueueGiveFromISR+0x64>
 800d48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <xQueueGiveFromISR+0x68>
 800d496:	2301      	movs	r3, #1
 800d498:	e000      	b.n	800d49c <xQueueGiveFromISR+0x6a>
 800d49a:	2300      	movs	r3, #0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10d      	bne.n	800d4bc <xQueueGiveFromISR+0x8a>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a4:	b672      	cpsid	i
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	b662      	cpsie	i
 800d4b4:	61bb      	str	r3, [r7, #24]
}
 800d4b6:	bf00      	nop
 800d4b8:	bf00      	nop
 800d4ba:	e7fd      	b.n	800d4b8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4bc:	f002 fb76 	bl	800fbac <vPortValidateInterruptPriority>
	__asm volatile
 800d4c0:	f3ef 8211 	mrs	r2, BASEPRI
 800d4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c8:	b672      	cpsid	i
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	b662      	cpsie	i
 800d4d8:	617a      	str	r2, [r7, #20]
 800d4da:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d4dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4e4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d22b      	bcs.n	800d548 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fc:	1c5a      	adds	r2, r3, #1
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d500:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d502:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d50a:	d112      	bne.n	800d532 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d510:	2b00      	cmp	r3, #0
 800d512:	d016      	beq.n	800d542 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d516:	3324      	adds	r3, #36	@ 0x24
 800d518:	4618      	mov	r0, r3
 800d51a:	f001 f9e5 	bl	800e8e8 <xTaskRemoveFromEventList>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00e      	beq.n	800d542 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00b      	beq.n	800d542 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2201      	movs	r2, #1
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	e007      	b.n	800d542 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d532:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d536:	3301      	adds	r3, #1
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	b25a      	sxtb	r2, r3
 800d53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d53e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d542:	2301      	movs	r3, #1
 800d544:	637b      	str	r3, [r7, #52]	@ 0x34
 800d546:	e001      	b.n	800d54c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d548:	2300      	movs	r3, #0
 800d54a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d54e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f383 8811 	msr	BASEPRI, r3
}
 800d556:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3738      	adds	r7, #56	@ 0x38
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
	...

0800d564 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08c      	sub	sp, #48	@ 0x30
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d570:	2300      	movs	r3, #0
 800d572:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10d      	bne.n	800d59a <xQueueReceive+0x36>
	__asm volatile
 800d57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d582:	b672      	cpsid	i
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	b662      	cpsie	i
 800d592:	623b      	str	r3, [r7, #32]
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop
 800d598:	e7fd      	b.n	800d596 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d103      	bne.n	800d5a8 <xQueueReceive+0x44>
 800d5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d101      	bne.n	800d5ac <xQueueReceive+0x48>
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	e000      	b.n	800d5ae <xQueueReceive+0x4a>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10d      	bne.n	800d5ce <xQueueReceive+0x6a>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b6:	b672      	cpsid	i
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	b662      	cpsie	i
 800d5c6:	61fb      	str	r3, [r7, #28]
}
 800d5c8:	bf00      	nop
 800d5ca:	bf00      	nop
 800d5cc:	e7fd      	b.n	800d5ca <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5ce:	f001 fb6d 	bl	800ecac <xTaskGetSchedulerState>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d102      	bne.n	800d5de <xQueueReceive+0x7a>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d101      	bne.n	800d5e2 <xQueueReceive+0x7e>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e000      	b.n	800d5e4 <xQueueReceive+0x80>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10d      	bne.n	800d604 <xQueueReceive+0xa0>
	__asm volatile
 800d5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ec:	b672      	cpsid	i
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	b662      	cpsie	i
 800d5fc:	61bb      	str	r3, [r7, #24]
}
 800d5fe:	bf00      	nop
 800d600:	bf00      	nop
 800d602:	e7fd      	b.n	800d600 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d604:	f002 f9ea 	bl	800f9dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d60c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d610:	2b00      	cmp	r3, #0
 800d612:	d01f      	beq.n	800d654 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d614:	68b9      	ldr	r1, [r7, #8]
 800d616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d618:	f000 fb16 	bl	800dc48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61e:	1e5a      	subs	r2, r3, #1
 800d620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d622:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00f      	beq.n	800d64c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62e:	3310      	adds	r3, #16
 800d630:	4618      	mov	r0, r3
 800d632:	f001 f959 	bl	800e8e8 <xTaskRemoveFromEventList>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d007      	beq.n	800d64c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d63c:	4b3c      	ldr	r3, [pc, #240]	@ (800d730 <xQueueReceive+0x1cc>)
 800d63e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d642:	601a      	str	r2, [r3, #0]
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d64c:	f002 f9fc 	bl	800fa48 <vPortExitCritical>
				return pdPASS;
 800d650:	2301      	movs	r3, #1
 800d652:	e069      	b.n	800d728 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d103      	bne.n	800d662 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d65a:	f002 f9f5 	bl	800fa48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d65e:	2300      	movs	r3, #0
 800d660:	e062      	b.n	800d728 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d664:	2b00      	cmp	r3, #0
 800d666:	d106      	bne.n	800d676 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d668:	f107 0310 	add.w	r3, r7, #16
 800d66c:	4618      	mov	r0, r3
 800d66e:	f001 fa09 	bl	800ea84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d672:	2301      	movs	r3, #1
 800d674:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d676:	f002 f9e7 	bl	800fa48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d67a:	f000 fe85 	bl	800e388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d67e:	f002 f9ad 	bl	800f9dc <vPortEnterCritical>
 800d682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d688:	b25b      	sxtb	r3, r3
 800d68a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d68e:	d103      	bne.n	800d698 <xQueueReceive+0x134>
 800d690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d692:	2200      	movs	r2, #0
 800d694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d69a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d69e:	b25b      	sxtb	r3, r3
 800d6a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6a4:	d103      	bne.n	800d6ae <xQueueReceive+0x14a>
 800d6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6ae:	f002 f9cb 	bl	800fa48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6b2:	1d3a      	adds	r2, r7, #4
 800d6b4:	f107 0310 	add.w	r3, r7, #16
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f001 f9f8 	bl	800eab0 <xTaskCheckForTimeOut>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d123      	bne.n	800d70e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6c8:	f000 fb36 	bl	800dd38 <prvIsQueueEmpty>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d017      	beq.n	800d702 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d4:	3324      	adds	r3, #36	@ 0x24
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	4611      	mov	r1, r2
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f001 f86c 	bl	800e7b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6e2:	f000 fad7 	bl	800dc94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6e6:	f000 fe5d 	bl	800e3a4 <xTaskResumeAll>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d189      	bne.n	800d604 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800d6f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d730 <xQueueReceive+0x1cc>)
 800d6f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	e780      	b.n	800d604 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d704:	f000 fac6 	bl	800dc94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d708:	f000 fe4c 	bl	800e3a4 <xTaskResumeAll>
 800d70c:	e77a      	b.n	800d604 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d70e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d710:	f000 fac0 	bl	800dc94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d714:	f000 fe46 	bl	800e3a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d71a:	f000 fb0d 	bl	800dd38 <prvIsQueueEmpty>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	f43f af6f 	beq.w	800d604 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d726:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3730      	adds	r7, #48	@ 0x30
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	e000ed04 	.word	0xe000ed04

0800d734 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b08e      	sub	sp, #56	@ 0x38
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d73e:	2300      	movs	r3, #0
 800d740:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d746:	2300      	movs	r3, #0
 800d748:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d10d      	bne.n	800d76c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800d750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d754:	b672      	cpsid	i
 800d756:	f383 8811 	msr	BASEPRI, r3
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	b662      	cpsie	i
 800d764:	623b      	str	r3, [r7, #32]
}
 800d766:	bf00      	nop
 800d768:	bf00      	nop
 800d76a:	e7fd      	b.n	800d768 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00d      	beq.n	800d790 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d778:	b672      	cpsid	i
 800d77a:	f383 8811 	msr	BASEPRI, r3
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	b662      	cpsie	i
 800d788:	61fb      	str	r3, [r7, #28]
}
 800d78a:	bf00      	nop
 800d78c:	bf00      	nop
 800d78e:	e7fd      	b.n	800d78c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d790:	f001 fa8c 	bl	800ecac <xTaskGetSchedulerState>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d102      	bne.n	800d7a0 <xQueueSemaphoreTake+0x6c>
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d101      	bne.n	800d7a4 <xQueueSemaphoreTake+0x70>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e000      	b.n	800d7a6 <xQueueSemaphoreTake+0x72>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10d      	bne.n	800d7c6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800d7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ae:	b672      	cpsid	i
 800d7b0:	f383 8811 	msr	BASEPRI, r3
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	b662      	cpsie	i
 800d7be:	61bb      	str	r3, [r7, #24]
}
 800d7c0:	bf00      	nop
 800d7c2:	bf00      	nop
 800d7c4:	e7fd      	b.n	800d7c2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7c6:	f002 f909 	bl	800f9dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d024      	beq.n	800d820 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d8:	1e5a      	subs	r2, r3, #1
 800d7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d104      	bne.n	800d7f0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d7e6:	f001 fbfb 	bl	800efe0 <pvTaskIncrementMutexHeldCount>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d00f      	beq.n	800d818 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7fa:	3310      	adds	r3, #16
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f001 f873 	bl	800e8e8 <xTaskRemoveFromEventList>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d007      	beq.n	800d818 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d808:	4b55      	ldr	r3, [pc, #340]	@ (800d960 <xQueueSemaphoreTake+0x22c>)
 800d80a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d80e:	601a      	str	r2, [r3, #0]
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d818:	f002 f916 	bl	800fa48 <vPortExitCritical>
				return pdPASS;
 800d81c:	2301      	movs	r3, #1
 800d81e:	e09a      	b.n	800d956 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d114      	bne.n	800d850 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00d      	beq.n	800d848 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800d82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d830:	b672      	cpsid	i
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	b662      	cpsie	i
 800d840:	617b      	str	r3, [r7, #20]
}
 800d842:	bf00      	nop
 800d844:	bf00      	nop
 800d846:	e7fd      	b.n	800d844 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d848:	f002 f8fe 	bl	800fa48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d84c:	2300      	movs	r3, #0
 800d84e:	e082      	b.n	800d956 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d852:	2b00      	cmp	r3, #0
 800d854:	d106      	bne.n	800d864 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d856:	f107 030c 	add.w	r3, r7, #12
 800d85a:	4618      	mov	r0, r3
 800d85c:	f001 f912 	bl	800ea84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d860:	2301      	movs	r3, #1
 800d862:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d864:	f002 f8f0 	bl	800fa48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d868:	f000 fd8e 	bl	800e388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d86c:	f002 f8b6 	bl	800f9dc <vPortEnterCritical>
 800d870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d872:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d876:	b25b      	sxtb	r3, r3
 800d878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d87c:	d103      	bne.n	800d886 <xQueueSemaphoreTake+0x152>
 800d87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d880:	2200      	movs	r2, #0
 800d882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d888:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d88c:	b25b      	sxtb	r3, r3
 800d88e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d892:	d103      	bne.n	800d89c <xQueueSemaphoreTake+0x168>
 800d894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d89c:	f002 f8d4 	bl	800fa48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8a0:	463a      	mov	r2, r7
 800d8a2:	f107 030c 	add.w	r3, r7, #12
 800d8a6:	4611      	mov	r1, r2
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f001 f901 	bl	800eab0 <xTaskCheckForTimeOut>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d132      	bne.n	800d91a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8b6:	f000 fa3f 	bl	800dd38 <prvIsQueueEmpty>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d026      	beq.n	800d90e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d109      	bne.n	800d8dc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800d8c8:	f002 f888 	bl	800f9dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f001 fa09 	bl	800ece8 <xTaskPriorityInherit>
 800d8d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d8d8:	f002 f8b6 	bl	800fa48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8de:	3324      	adds	r3, #36	@ 0x24
 800d8e0:	683a      	ldr	r2, [r7, #0]
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f000 ff67 	bl	800e7b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8ec:	f000 f9d2 	bl	800dc94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8f0:	f000 fd58 	bl	800e3a4 <xTaskResumeAll>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f47f af65 	bne.w	800d7c6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800d8fc:	4b18      	ldr	r3, [pc, #96]	@ (800d960 <xQueueSemaphoreTake+0x22c>)
 800d8fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d902:	601a      	str	r2, [r3, #0]
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	e75b      	b.n	800d7c6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d90e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d910:	f000 f9c0 	bl	800dc94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d914:	f000 fd46 	bl	800e3a4 <xTaskResumeAll>
 800d918:	e755      	b.n	800d7c6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d91a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d91c:	f000 f9ba 	bl	800dc94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d920:	f000 fd40 	bl	800e3a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d924:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d926:	f000 fa07 	bl	800dd38 <prvIsQueueEmpty>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f43f af4a 	beq.w	800d7c6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00d      	beq.n	800d954 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800d938:	f002 f850 	bl	800f9dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d93c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d93e:	f000 f901 	bl	800db44 <prvGetDisinheritPriorityAfterTimeout>
 800d942:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d94a:	4618      	mov	r0, r3
 800d94c:	f001 faa8 	bl	800eea0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d950:	f002 f87a 	bl	800fa48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d956:	4618      	mov	r0, r3
 800d958:	3738      	adds	r7, #56	@ 0x38
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	e000ed04 	.word	0xe000ed04

0800d964 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08e      	sub	sp, #56	@ 0x38
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10d      	bne.n	800d996 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800d97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d97e:	b672      	cpsid	i
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	b662      	cpsie	i
 800d98e:	623b      	str	r3, [r7, #32]
}
 800d990:	bf00      	nop
 800d992:	bf00      	nop
 800d994:	e7fd      	b.n	800d992 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d103      	bne.n	800d9a4 <xQueueReceiveFromISR+0x40>
 800d99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d101      	bne.n	800d9a8 <xQueueReceiveFromISR+0x44>
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e000      	b.n	800d9aa <xQueueReceiveFromISR+0x46>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d10d      	bne.n	800d9ca <xQueueReceiveFromISR+0x66>
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b2:	b672      	cpsid	i
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	b662      	cpsie	i
 800d9c2:	61fb      	str	r3, [r7, #28]
}
 800d9c4:	bf00      	nop
 800d9c6:	bf00      	nop
 800d9c8:	e7fd      	b.n	800d9c6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9ca:	f002 f8ef 	bl	800fbac <vPortValidateInterruptPriority>
	__asm volatile
 800d9ce:	f3ef 8211 	mrs	r2, BASEPRI
 800d9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d6:	b672      	cpsid	i
 800d9d8:	f383 8811 	msr	BASEPRI, r3
 800d9dc:	f3bf 8f6f 	isb	sy
 800d9e0:	f3bf 8f4f 	dsb	sy
 800d9e4:	b662      	cpsie	i
 800d9e6:	61ba      	str	r2, [r7, #24]
 800d9e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d9ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d02f      	beq.n	800da5a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da04:	68b9      	ldr	r1, [r7, #8]
 800da06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da08:	f000 f91e 	bl	800dc48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0e:	1e5a      	subs	r2, r3, #1
 800da10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800da14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da1c:	d112      	bne.n	800da44 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d016      	beq.n	800da54 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da28:	3310      	adds	r3, #16
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 ff5c 	bl	800e8e8 <xTaskRemoveFromEventList>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00e      	beq.n	800da54 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d00b      	beq.n	800da54 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	e007      	b.n	800da54 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800da44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da48:	3301      	adds	r3, #1
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	b25a      	sxtb	r2, r3
 800da4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800da54:	2301      	movs	r3, #1
 800da56:	637b      	str	r3, [r7, #52]	@ 0x34
 800da58:	e001      	b.n	800da5e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800da5a:	2300      	movs	r3, #0
 800da5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800da5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da60:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	f383 8811 	msr	BASEPRI, r3
}
 800da68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3738      	adds	r7, #56	@ 0x38
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10d      	bne.n	800da9e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da86:	b672      	cpsid	i
 800da88:	f383 8811 	msr	BASEPRI, r3
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	b662      	cpsie	i
 800da96:	60bb      	str	r3, [r7, #8]
}
 800da98:	bf00      	nop
 800da9a:	bf00      	nop
 800da9c:	e7fd      	b.n	800da9a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800da9e:	f001 ff9d 	bl	800f9dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800daa8:	f001 ffce 	bl	800fa48 <vPortExitCritical>

	return uxReturn;
 800daac:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800daae:	4618      	mov	r0, r3
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800dab6:	b480      	push	{r7}
 800dab8:	b087      	sub	sp, #28
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10d      	bne.n	800dae4 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800dac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dacc:	b672      	cpsid	i
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	b662      	cpsie	i
 800dadc:	60fb      	str	r3, [r7, #12]
}
 800dade:	bf00      	nop
 800dae0:	bf00      	nop
 800dae2:	e7fd      	b.n	800dae0 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dae8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800daea:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800daec:	4618      	mov	r0, r3
 800daee:	371c      	adds	r7, #28
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d10d      	bne.n	800db26 <vQueueDelete+0x2e>
	__asm volatile
 800db0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db0e:	b672      	cpsid	i
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	b662      	cpsie	i
 800db1e:	60bb      	str	r3, [r7, #8]
}
 800db20:	bf00      	nop
 800db22:	bf00      	nop
 800db24:	e7fd      	b.n	800db22 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f000 f95e 	bl	800dde8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800db32:	2b00      	cmp	r3, #0
 800db34:	d102      	bne.n	800db3c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f002 f950 	bl	800fddc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800db3c:	bf00      	nop
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db50:	2b00      	cmp	r3, #0
 800db52:	d006      	beq.n	800db62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800db5e:	60fb      	str	r3, [r7, #12]
 800db60:	e001      	b.n	800db66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800db62:	2300      	movs	r3, #0
 800db64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800db66:	68fb      	ldr	r3, [r7, #12]
	}
 800db68:	4618      	mov	r0, r3
 800db6a:	3714      	adds	r7, #20
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800db80:	2300      	movs	r3, #0
 800db82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10d      	bne.n	800dbae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d14d      	bne.n	800dc36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	689b      	ldr	r3, [r3, #8]
 800db9e:	4618      	mov	r0, r3
 800dba0:	f001 f90a 	bl	800edb8 <xTaskPriorityDisinherit>
 800dba4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	609a      	str	r2, [r3, #8]
 800dbac:	e043      	b.n	800dc36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d119      	bne.n	800dbe8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	6858      	ldr	r0, [r3, #4]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	68b9      	ldr	r1, [r7, #8]
 800dbc0:	f011 fab9 	bl	801f136 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	685a      	ldr	r2, [r3, #4]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbcc:	441a      	add	r2, r3
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	685a      	ldr	r2, [r3, #4]
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d32b      	bcc.n	800dc36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	605a      	str	r2, [r3, #4]
 800dbe6:	e026      	b.n	800dc36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	68d8      	ldr	r0, [r3, #12]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	68b9      	ldr	r1, [r7, #8]
 800dbf4:	f011 fa9f 	bl	801f136 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	68da      	ldr	r2, [r3, #12]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc00:	425b      	negs	r3, r3
 800dc02:	441a      	add	r2, r3
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	68da      	ldr	r2, [r3, #12]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d207      	bcs.n	800dc24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	689a      	ldr	r2, [r3, #8]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc1c:	425b      	negs	r3, r3
 800dc1e:	441a      	add	r2, r3
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d105      	bne.n	800dc36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d002      	beq.n	800dc36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	3b01      	subs	r3, #1
 800dc34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	1c5a      	adds	r2, r3, #1
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dc3e:	697b      	ldr	r3, [r7, #20]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3718      	adds	r7, #24
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d018      	beq.n	800dc8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	68da      	ldr	r2, [r3, #12]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc62:	441a      	add	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	68da      	ldr	r2, [r3, #12]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d303      	bcc.n	800dc7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	68d9      	ldr	r1, [r3, #12]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc84:	461a      	mov	r2, r3
 800dc86:	6838      	ldr	r0, [r7, #0]
 800dc88:	f011 fa55 	bl	801f136 <memcpy>
	}
}
 800dc8c:	bf00      	nop
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc9c:	f001 fe9e 	bl	800f9dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dca6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dca8:	e011      	b.n	800dcce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d012      	beq.n	800dcd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	3324      	adds	r3, #36	@ 0x24
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f000 fe16 	bl	800e8e8 <xTaskRemoveFromEventList>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d001      	beq.n	800dcc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dcc2:	f000 ff5d 	bl	800eb80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dcc6:	7bfb      	ldrb	r3, [r7, #15]
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	dce9      	bgt.n	800dcaa <prvUnlockQueue+0x16>
 800dcd6:	e000      	b.n	800dcda <prvUnlockQueue+0x46>
					break;
 800dcd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	22ff      	movs	r2, #255	@ 0xff
 800dcde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dce2:	f001 feb1 	bl	800fa48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dce6:	f001 fe79 	bl	800f9dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dcf2:	e011      	b.n	800dd18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d012      	beq.n	800dd22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	3310      	adds	r3, #16
 800dd00:	4618      	mov	r0, r3
 800dd02:	f000 fdf1 	bl	800e8e8 <xTaskRemoveFromEventList>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd0c:	f000 ff38 	bl	800eb80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd10:	7bbb      	ldrb	r3, [r7, #14]
 800dd12:	3b01      	subs	r3, #1
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	dce9      	bgt.n	800dcf4 <prvUnlockQueue+0x60>
 800dd20:	e000      	b.n	800dd24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	22ff      	movs	r2, #255	@ 0xff
 800dd28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dd2c:	f001 fe8c 	bl	800fa48 <vPortExitCritical>
}
 800dd30:	bf00      	nop
 800dd32:	3710      	adds	r7, #16
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd40:	f001 fe4c 	bl	800f9dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d102      	bne.n	800dd52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	60fb      	str	r3, [r7, #12]
 800dd50:	e001      	b.n	800dd56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd52:	2300      	movs	r3, #0
 800dd54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd56:	f001 fe77 	bl	800fa48 <vPortExitCritical>

	return xReturn;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd6c:	f001 fe36 	bl	800f9dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d102      	bne.n	800dd82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	60fb      	str	r3, [r7, #12]
 800dd80:	e001      	b.n	800dd86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dd82:	2300      	movs	r3, #0
 800dd84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd86:	f001 fe5f 	bl	800fa48 <vPortExitCritical>

	return xReturn;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dd94:	b480      	push	{r7}
 800dd96:	b085      	sub	sp, #20
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd9e:	2300      	movs	r3, #0
 800dda0:	60fb      	str	r3, [r7, #12]
 800dda2:	e014      	b.n	800ddce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dda4:	4a0f      	ldr	r2, [pc, #60]	@ (800dde4 <vQueueAddToRegistry+0x50>)
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d10b      	bne.n	800ddc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ddb0:	490c      	ldr	r1, [pc, #48]	@ (800dde4 <vQueueAddToRegistry+0x50>)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	683a      	ldr	r2, [r7, #0]
 800ddb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ddba:	4a0a      	ldr	r2, [pc, #40]	@ (800dde4 <vQueueAddToRegistry+0x50>)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	00db      	lsls	r3, r3, #3
 800ddc0:	4413      	add	r3, r2
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ddc6:	e006      	b.n	800ddd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	60fb      	str	r3, [r7, #12]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2b0b      	cmp	r3, #11
 800ddd2:	d9e7      	bls.n	800dda4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ddd4:	bf00      	nop
 800ddd6:	bf00      	nop
 800ddd8:	3714      	adds	r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	20006fb8 	.word	0x20006fb8

0800dde8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	60fb      	str	r3, [r7, #12]
 800ddf4:	e016      	b.n	800de24 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ddf6:	4a10      	ldr	r2, [pc, #64]	@ (800de38 <vQueueUnregisterQueue+0x50>)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	00db      	lsls	r3, r3, #3
 800ddfc:	4413      	add	r3, r2
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	429a      	cmp	r2, r3
 800de04:	d10b      	bne.n	800de1e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800de06:	4a0c      	ldr	r2, [pc, #48]	@ (800de38 <vQueueUnregisterQueue+0x50>)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2100      	movs	r1, #0
 800de0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800de10:	4a09      	ldr	r2, [pc, #36]	@ (800de38 <vQueueUnregisterQueue+0x50>)
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	00db      	lsls	r3, r3, #3
 800de16:	4413      	add	r3, r2
 800de18:	2200      	movs	r2, #0
 800de1a:	605a      	str	r2, [r3, #4]
				break;
 800de1c:	e006      	b.n	800de2c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	3301      	adds	r3, #1
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2b0b      	cmp	r3, #11
 800de28:	d9e5      	bls.n	800ddf6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800de2a:	bf00      	nop
 800de2c:	bf00      	nop
 800de2e:	3714      	adds	r7, #20
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr
 800de38:	20006fb8 	.word	0x20006fb8

0800de3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de4c:	f001 fdc6 	bl	800f9dc <vPortEnterCritical>
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de56:	b25b      	sxtb	r3, r3
 800de58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de5c:	d103      	bne.n	800de66 <vQueueWaitForMessageRestricted+0x2a>
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de6c:	b25b      	sxtb	r3, r3
 800de6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de72:	d103      	bne.n	800de7c <vQueueWaitForMessageRestricted+0x40>
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	2200      	movs	r2, #0
 800de78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de7c:	f001 fde4 	bl	800fa48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de84:	2b00      	cmp	r3, #0
 800de86:	d106      	bne.n	800de96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	3324      	adds	r3, #36	@ 0x24
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	68b9      	ldr	r1, [r7, #8]
 800de90:	4618      	mov	r0, r3
 800de92:	f000 fcfb 	bl	800e88c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800de96:	6978      	ldr	r0, [r7, #20]
 800de98:	f7ff fefc 	bl	800dc94 <prvUnlockQueue>
	}
 800de9c:	bf00      	nop
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b08e      	sub	sp, #56	@ 0x38
 800dea8:	af04      	add	r7, sp, #16
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
 800deb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800deb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10d      	bne.n	800ded4 <xTaskCreateStatic+0x30>
	__asm volatile
 800deb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800debc:	b672      	cpsid	i
 800debe:	f383 8811 	msr	BASEPRI, r3
 800dec2:	f3bf 8f6f 	isb	sy
 800dec6:	f3bf 8f4f 	dsb	sy
 800deca:	b662      	cpsie	i
 800decc:	623b      	str	r3, [r7, #32]
}
 800dece:	bf00      	nop
 800ded0:	bf00      	nop
 800ded2:	e7fd      	b.n	800ded0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ded4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d10d      	bne.n	800def6 <xTaskCreateStatic+0x52>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dede:	b672      	cpsid	i
 800dee0:	f383 8811 	msr	BASEPRI, r3
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	b662      	cpsie	i
 800deee:	61fb      	str	r3, [r7, #28]
}
 800def0:	bf00      	nop
 800def2:	bf00      	nop
 800def4:	e7fd      	b.n	800def2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800def6:	23a8      	movs	r3, #168	@ 0xa8
 800def8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	2ba8      	cmp	r3, #168	@ 0xa8
 800defe:	d00d      	beq.n	800df1c <xTaskCreateStatic+0x78>
	__asm volatile
 800df00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df04:	b672      	cpsid	i
 800df06:	f383 8811 	msr	BASEPRI, r3
 800df0a:	f3bf 8f6f 	isb	sy
 800df0e:	f3bf 8f4f 	dsb	sy
 800df12:	b662      	cpsie	i
 800df14:	61bb      	str	r3, [r7, #24]
}
 800df16:	bf00      	nop
 800df18:	bf00      	nop
 800df1a:	e7fd      	b.n	800df18 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df20:	2b00      	cmp	r3, #0
 800df22:	d01e      	beq.n	800df62 <xTaskCreateStatic+0xbe>
 800df24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df26:	2b00      	cmp	r3, #0
 800df28:	d01b      	beq.n	800df62 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df36:	2202      	movs	r2, #2
 800df38:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df3c:	2300      	movs	r3, #0
 800df3e:	9303      	str	r3, [sp, #12]
 800df40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df42:	9302      	str	r3, [sp, #8]
 800df44:	f107 0314 	add.w	r3, r7, #20
 800df48:	9301      	str	r3, [sp, #4]
 800df4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	68b9      	ldr	r1, [r7, #8]
 800df54:	68f8      	ldr	r0, [r7, #12]
 800df56:	f000 f851 	bl	800dffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df5c:	f000 f8f8 	bl	800e150 <prvAddNewTaskToReadyList>
 800df60:	e001      	b.n	800df66 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800df62:	2300      	movs	r3, #0
 800df64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df66:	697b      	ldr	r3, [r7, #20]
	}
 800df68:	4618      	mov	r0, r3
 800df6a:	3728      	adds	r7, #40	@ 0x28
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df70:	b580      	push	{r7, lr}
 800df72:	b08c      	sub	sp, #48	@ 0x30
 800df74:	af04      	add	r7, sp, #16
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	603b      	str	r3, [r7, #0]
 800df7c:	4613      	mov	r3, r2
 800df7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df80:	88fb      	ldrh	r3, [r7, #6]
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	4618      	mov	r0, r3
 800df86:	f001 fe57 	bl	800fc38 <pvPortMalloc>
 800df8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00e      	beq.n	800dfb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df92:	20a8      	movs	r0, #168	@ 0xa8
 800df94:	f001 fe50 	bl	800fc38 <pvPortMalloc>
 800df98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d003      	beq.n	800dfa8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	697a      	ldr	r2, [r7, #20]
 800dfa4:	631a      	str	r2, [r3, #48]	@ 0x30
 800dfa6:	e005      	b.n	800dfb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dfa8:	6978      	ldr	r0, [r7, #20]
 800dfaa:	f001 ff17 	bl	800fddc <vPortFree>
 800dfae:	e001      	b.n	800dfb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d017      	beq.n	800dfea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dfc2:	88fa      	ldrh	r2, [r7, #6]
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	9303      	str	r3, [sp, #12]
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	9302      	str	r3, [sp, #8]
 800dfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfce:	9301      	str	r3, [sp, #4]
 800dfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	68b9      	ldr	r1, [r7, #8]
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f000 f80f 	bl	800dffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfde:	69f8      	ldr	r0, [r7, #28]
 800dfe0:	f000 f8b6 	bl	800e150 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	61bb      	str	r3, [r7, #24]
 800dfe8:	e002      	b.n	800dff0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dff0:	69bb      	ldr	r3, [r7, #24]
	}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3720      	adds	r7, #32
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
	...

0800dffc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b088      	sub	sp, #32
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	607a      	str	r2, [r7, #4]
 800e008:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	461a      	mov	r2, r3
 800e014:	21a5      	movs	r1, #165	@ 0xa5
 800e016:	f011 f819 	bl	801f04c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e01e:	6879      	ldr	r1, [r7, #4]
 800e020:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e024:	440b      	add	r3, r1
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4413      	add	r3, r2
 800e02a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	f023 0307 	bic.w	r3, r3, #7
 800e032:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	f003 0307 	and.w	r3, r3, #7
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d00d      	beq.n	800e05a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800e03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e042:	b672      	cpsid	i
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	b662      	cpsie	i
 800e052:	617b      	str	r3, [r7, #20]
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop
 800e058:	e7fd      	b.n	800e056 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d01f      	beq.n	800e0a0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e060:	2300      	movs	r3, #0
 800e062:	61fb      	str	r3, [r7, #28]
 800e064:	e012      	b.n	800e08c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e066:	68ba      	ldr	r2, [r7, #8]
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	4413      	add	r3, r2
 800e06c:	7819      	ldrb	r1, [r3, #0]
 800e06e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	4413      	add	r3, r2
 800e074:	3334      	adds	r3, #52	@ 0x34
 800e076:	460a      	mov	r2, r1
 800e078:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	4413      	add	r3, r2
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d006      	beq.n	800e094 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	3301      	adds	r3, #1
 800e08a:	61fb      	str	r3, [r7, #28]
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	2b0f      	cmp	r3, #15
 800e090:	d9e9      	bls.n	800e066 <prvInitialiseNewTask+0x6a>
 800e092:	e000      	b.n	800e096 <prvInitialiseNewTask+0x9a>
			{
				break;
 800e094:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e098:	2200      	movs	r2, #0
 800e09a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e09e:	e003      	b.n	800e0a8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0aa:	2b37      	cmp	r3, #55	@ 0x37
 800e0ac:	d901      	bls.n	800e0b2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e0ae:	2337      	movs	r3, #55	@ 0x37
 800e0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fe fce5 	bl	800ca98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d0:	3318      	adds	r3, #24
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fe fce0 	bl	800ca98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e100:	3354      	adds	r3, #84	@ 0x54
 800e102:	224c      	movs	r2, #76	@ 0x4c
 800e104:	2100      	movs	r1, #0
 800e106:	4618      	mov	r0, r3
 800e108:	f010 ffa0 	bl	801f04c <memset>
 800e10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e10e:	4a0d      	ldr	r2, [pc, #52]	@ (800e144 <prvInitialiseNewTask+0x148>)
 800e110:	659a      	str	r2, [r3, #88]	@ 0x58
 800e112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e114:	4a0c      	ldr	r2, [pc, #48]	@ (800e148 <prvInitialiseNewTask+0x14c>)
 800e116:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e11a:	4a0c      	ldr	r2, [pc, #48]	@ (800e14c <prvInitialiseNewTask+0x150>)
 800e11c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e11e:	683a      	ldr	r2, [r7, #0]
 800e120:	68f9      	ldr	r1, [r7, #12]
 800e122:	69b8      	ldr	r0, [r7, #24]
 800e124:	f001 fb4c 	bl	800f7c0 <pxPortInitialiseStack>
 800e128:	4602      	mov	r2, r0
 800e12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e12c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e138:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e13a:	bf00      	nop
 800e13c:	3720      	adds	r7, #32
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	2002290c 	.word	0x2002290c
 800e148:	20022974 	.word	0x20022974
 800e14c:	200229dc 	.word	0x200229dc

0800e150 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e158:	f001 fc40 	bl	800f9dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e15c:	4b2d      	ldr	r3, [pc, #180]	@ (800e214 <prvAddNewTaskToReadyList+0xc4>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	3301      	adds	r3, #1
 800e162:	4a2c      	ldr	r2, [pc, #176]	@ (800e214 <prvAddNewTaskToReadyList+0xc4>)
 800e164:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e166:	4b2c      	ldr	r3, [pc, #176]	@ (800e218 <prvAddNewTaskToReadyList+0xc8>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d109      	bne.n	800e182 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e16e:	4a2a      	ldr	r2, [pc, #168]	@ (800e218 <prvAddNewTaskToReadyList+0xc8>)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e174:	4b27      	ldr	r3, [pc, #156]	@ (800e214 <prvAddNewTaskToReadyList+0xc4>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d110      	bne.n	800e19e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e17c:	f000 fd24 	bl	800ebc8 <prvInitialiseTaskLists>
 800e180:	e00d      	b.n	800e19e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e182:	4b26      	ldr	r3, [pc, #152]	@ (800e21c <prvAddNewTaskToReadyList+0xcc>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d109      	bne.n	800e19e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e18a:	4b23      	ldr	r3, [pc, #140]	@ (800e218 <prvAddNewTaskToReadyList+0xc8>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e194:	429a      	cmp	r2, r3
 800e196:	d802      	bhi.n	800e19e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e198:	4a1f      	ldr	r2, [pc, #124]	@ (800e218 <prvAddNewTaskToReadyList+0xc8>)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e19e:	4b20      	ldr	r3, [pc, #128]	@ (800e220 <prvAddNewTaskToReadyList+0xd0>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	4a1e      	ldr	r2, [pc, #120]	@ (800e220 <prvAddNewTaskToReadyList+0xd0>)
 800e1a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e1a8:	4b1d      	ldr	r3, [pc, #116]	@ (800e220 <prvAddNewTaskToReadyList+0xd0>)
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1b4:	4b1b      	ldr	r3, [pc, #108]	@ (800e224 <prvAddNewTaskToReadyList+0xd4>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d903      	bls.n	800e1c4 <prvAddNewTaskToReadyList+0x74>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c0:	4a18      	ldr	r2, [pc, #96]	@ (800e224 <prvAddNewTaskToReadyList+0xd4>)
 800e1c2:	6013      	str	r3, [r2, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	4a15      	ldr	r2, [pc, #84]	@ (800e228 <prvAddNewTaskToReadyList+0xd8>)
 800e1d2:	441a      	add	r2, r3
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	3304      	adds	r3, #4
 800e1d8:	4619      	mov	r1, r3
 800e1da:	4610      	mov	r0, r2
 800e1dc:	f7fe fc69 	bl	800cab2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e1e0:	f001 fc32 	bl	800fa48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e1e4:	4b0d      	ldr	r3, [pc, #52]	@ (800e21c <prvAddNewTaskToReadyList+0xcc>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00e      	beq.n	800e20a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e218 <prvAddNewTaskToReadyList+0xc8>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d207      	bcs.n	800e20a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1fa:	4b0c      	ldr	r3, [pc, #48]	@ (800e22c <prvAddNewTaskToReadyList+0xdc>)
 800e1fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e200:	601a      	str	r2, [r3, #0]
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e20a:	bf00      	nop
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	200074d4 	.word	0x200074d4
 800e218:	20007018 	.word	0x20007018
 800e21c:	200074e0 	.word	0x200074e0
 800e220:	200074f0 	.word	0x200074f0
 800e224:	200074dc 	.word	0x200074dc
 800e228:	2000701c 	.word	0x2000701c
 800e22c:	e000ed04 	.word	0xe000ed04

0800e230 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e238:	2300      	movs	r3, #0
 800e23a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d01a      	beq.n	800e278 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e242:	4b15      	ldr	r3, [pc, #84]	@ (800e298 <vTaskDelay+0x68>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d00d      	beq.n	800e266 <vTaskDelay+0x36>
	__asm volatile
 800e24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e24e:	b672      	cpsid	i
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	b662      	cpsie	i
 800e25e:	60bb      	str	r3, [r7, #8]
}
 800e260:	bf00      	nop
 800e262:	bf00      	nop
 800e264:	e7fd      	b.n	800e262 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e266:	f000 f88f 	bl	800e388 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e26a:	2100      	movs	r1, #0
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f000 fecb 	bl	800f008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e272:	f000 f897 	bl	800e3a4 <xTaskResumeAll>
 800e276:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d107      	bne.n	800e28e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800e27e:	4b07      	ldr	r3, [pc, #28]	@ (800e29c <vTaskDelay+0x6c>)
 800e280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e284:	601a      	str	r2, [r3, #0]
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e28e:	bf00      	nop
 800e290:	3710      	adds	r7, #16
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	200074fc 	.word	0x200074fc
 800e29c:	e000ed04 	.word	0xe000ed04

0800e2a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b08a      	sub	sp, #40	@ 0x28
 800e2a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2ae:	463a      	mov	r2, r7
 800e2b0:	1d39      	adds	r1, r7, #4
 800e2b2:	f107 0308 	add.w	r3, r7, #8
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fe f994 	bl	800c5e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e2bc:	6839      	ldr	r1, [r7, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	68ba      	ldr	r2, [r7, #8]
 800e2c2:	9202      	str	r2, [sp, #8]
 800e2c4:	9301      	str	r3, [sp, #4]
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	460a      	mov	r2, r1
 800e2ce:	4926      	ldr	r1, [pc, #152]	@ (800e368 <vTaskStartScheduler+0xc8>)
 800e2d0:	4826      	ldr	r0, [pc, #152]	@ (800e36c <vTaskStartScheduler+0xcc>)
 800e2d2:	f7ff fde7 	bl	800dea4 <xTaskCreateStatic>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	4a25      	ldr	r2, [pc, #148]	@ (800e370 <vTaskStartScheduler+0xd0>)
 800e2da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e2dc:	4b24      	ldr	r3, [pc, #144]	@ (800e370 <vTaskStartScheduler+0xd0>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	617b      	str	r3, [r7, #20]
 800e2e8:	e001      	b.n	800e2ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d102      	bne.n	800e2fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e2f4:	f000 fedc 	bl	800f0b0 <xTimerCreateTimerTask>
 800e2f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d11d      	bne.n	800e33c <vTaskStartScheduler+0x9c>
	__asm volatile
 800e300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e304:	b672      	cpsid	i
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	b662      	cpsie	i
 800e314:	613b      	str	r3, [r7, #16]
}
 800e316:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e318:	4b16      	ldr	r3, [pc, #88]	@ (800e374 <vTaskStartScheduler+0xd4>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	3354      	adds	r3, #84	@ 0x54
 800e31e:	4a16      	ldr	r2, [pc, #88]	@ (800e378 <vTaskStartScheduler+0xd8>)
 800e320:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e322:	4b16      	ldr	r3, [pc, #88]	@ (800e37c <vTaskStartScheduler+0xdc>)
 800e324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e328:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e32a:	4b15      	ldr	r3, [pc, #84]	@ (800e380 <vTaskStartScheduler+0xe0>)
 800e32c:	2201      	movs	r2, #1
 800e32e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e330:	4b14      	ldr	r3, [pc, #80]	@ (800e384 <vTaskStartScheduler+0xe4>)
 800e332:	2200      	movs	r2, #0
 800e334:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e336:	f001 fad3 	bl	800f8e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e33a:	e011      	b.n	800e360 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e342:	d10d      	bne.n	800e360 <vTaskStartScheduler+0xc0>
	__asm volatile
 800e344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e348:	b672      	cpsid	i
 800e34a:	f383 8811 	msr	BASEPRI, r3
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	f3bf 8f4f 	dsb	sy
 800e356:	b662      	cpsie	i
 800e358:	60fb      	str	r3, [r7, #12]
}
 800e35a:	bf00      	nop
 800e35c:	bf00      	nop
 800e35e:	e7fd      	b.n	800e35c <vTaskStartScheduler+0xbc>
}
 800e360:	bf00      	nop
 800e362:	3718      	adds	r7, #24
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	0801fef4 	.word	0x0801fef4
 800e36c:	0800eb99 	.word	0x0800eb99
 800e370:	200074f8 	.word	0x200074f8
 800e374:	20007018 	.word	0x20007018
 800e378:	20000080 	.word	0x20000080
 800e37c:	200074f4 	.word	0x200074f4
 800e380:	200074e0 	.word	0x200074e0
 800e384:	200074d8 	.word	0x200074d8

0800e388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e388:	b480      	push	{r7}
 800e38a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e38c:	4b04      	ldr	r3, [pc, #16]	@ (800e3a0 <vTaskSuspendAll+0x18>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	3301      	adds	r3, #1
 800e392:	4a03      	ldr	r2, [pc, #12]	@ (800e3a0 <vTaskSuspendAll+0x18>)
 800e394:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e396:	bf00      	nop
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr
 800e3a0:	200074fc 	.word	0x200074fc

0800e3a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e3b2:	4b43      	ldr	r3, [pc, #268]	@ (800e4c0 <xTaskResumeAll+0x11c>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d10d      	bne.n	800e3d6 <xTaskResumeAll+0x32>
	__asm volatile
 800e3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3be:	b672      	cpsid	i
 800e3c0:	f383 8811 	msr	BASEPRI, r3
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	b662      	cpsie	i
 800e3ce:	603b      	str	r3, [r7, #0]
}
 800e3d0:	bf00      	nop
 800e3d2:	bf00      	nop
 800e3d4:	e7fd      	b.n	800e3d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e3d6:	f001 fb01 	bl	800f9dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e3da:	4b39      	ldr	r3, [pc, #228]	@ (800e4c0 <xTaskResumeAll+0x11c>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	4a37      	ldr	r2, [pc, #220]	@ (800e4c0 <xTaskResumeAll+0x11c>)
 800e3e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3e4:	4b36      	ldr	r3, [pc, #216]	@ (800e4c0 <xTaskResumeAll+0x11c>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d162      	bne.n	800e4b2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3ec:	4b35      	ldr	r3, [pc, #212]	@ (800e4c4 <xTaskResumeAll+0x120>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d05e      	beq.n	800e4b2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3f4:	e02f      	b.n	800e456 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3f6:	4b34      	ldr	r3, [pc, #208]	@ (800e4c8 <xTaskResumeAll+0x124>)
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	3318      	adds	r3, #24
 800e402:	4618      	mov	r0, r3
 800e404:	f7fe fbb2 	bl	800cb6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3304      	adds	r3, #4
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fe fbad 	bl	800cb6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e416:	4b2d      	ldr	r3, [pc, #180]	@ (800e4cc <xTaskResumeAll+0x128>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d903      	bls.n	800e426 <xTaskResumeAll+0x82>
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e422:	4a2a      	ldr	r2, [pc, #168]	@ (800e4cc <xTaskResumeAll+0x128>)
 800e424:	6013      	str	r3, [r2, #0]
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e42a:	4613      	mov	r3, r2
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	4413      	add	r3, r2
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4a27      	ldr	r2, [pc, #156]	@ (800e4d0 <xTaskResumeAll+0x12c>)
 800e434:	441a      	add	r2, r3
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	3304      	adds	r3, #4
 800e43a:	4619      	mov	r1, r3
 800e43c:	4610      	mov	r0, r2
 800e43e:	f7fe fb38 	bl	800cab2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e446:	4b23      	ldr	r3, [pc, #140]	@ (800e4d4 <xTaskResumeAll+0x130>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d302      	bcc.n	800e456 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800e450:	4b21      	ldr	r3, [pc, #132]	@ (800e4d8 <xTaskResumeAll+0x134>)
 800e452:	2201      	movs	r2, #1
 800e454:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e456:	4b1c      	ldr	r3, [pc, #112]	@ (800e4c8 <xTaskResumeAll+0x124>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1cb      	bne.n	800e3f6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d001      	beq.n	800e468 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e464:	f000 fbf2 	bl	800ec4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e468:	4b1c      	ldr	r3, [pc, #112]	@ (800e4dc <xTaskResumeAll+0x138>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d010      	beq.n	800e496 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e474:	f000 f858 	bl	800e528 <xTaskIncrementTick>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d002      	beq.n	800e484 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800e47e:	4b16      	ldr	r3, [pc, #88]	@ (800e4d8 <xTaskResumeAll+0x134>)
 800e480:	2201      	movs	r2, #1
 800e482:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	3b01      	subs	r3, #1
 800e488:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1f1      	bne.n	800e474 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800e490:	4b12      	ldr	r3, [pc, #72]	@ (800e4dc <xTaskResumeAll+0x138>)
 800e492:	2200      	movs	r2, #0
 800e494:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e496:	4b10      	ldr	r3, [pc, #64]	@ (800e4d8 <xTaskResumeAll+0x134>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d009      	beq.n	800e4b2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4a2:	4b0f      	ldr	r3, [pc, #60]	@ (800e4e0 <xTaskResumeAll+0x13c>)
 800e4a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4a8:	601a      	str	r2, [r3, #0]
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4b2:	f001 fac9 	bl	800fa48 <vPortExitCritical>

	return xAlreadyYielded;
 800e4b6:	68bb      	ldr	r3, [r7, #8]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3710      	adds	r7, #16
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	200074fc 	.word	0x200074fc
 800e4c4:	200074d4 	.word	0x200074d4
 800e4c8:	200074ac 	.word	0x200074ac
 800e4cc:	200074dc 	.word	0x200074dc
 800e4d0:	2000701c 	.word	0x2000701c
 800e4d4:	20007018 	.word	0x20007018
 800e4d8:	200074e8 	.word	0x200074e8
 800e4dc:	200074e4 	.word	0x200074e4
 800e4e0:	e000ed04 	.word	0xe000ed04

0800e4e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e4ea:	4b05      	ldr	r3, [pc, #20]	@ (800e500 <xTaskGetTickCount+0x1c>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e4f0:	687b      	ldr	r3, [r7, #4]
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	370c      	adds	r7, #12
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	200074d8 	.word	0x200074d8

0800e504 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e50a:	f001 fb4f 	bl	800fbac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e50e:	2300      	movs	r3, #0
 800e510:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e512:	4b04      	ldr	r3, [pc, #16]	@ (800e524 <xTaskGetTickCountFromISR+0x20>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e518:	683b      	ldr	r3, [r7, #0]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	200074d8 	.word	0x200074d8

0800e528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e52e:	2300      	movs	r3, #0
 800e530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e532:	4b50      	ldr	r3, [pc, #320]	@ (800e674 <xTaskIncrementTick+0x14c>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	f040 808c 	bne.w	800e654 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e53c:	4b4e      	ldr	r3, [pc, #312]	@ (800e678 <xTaskIncrementTick+0x150>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3301      	adds	r3, #1
 800e542:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e544:	4a4c      	ldr	r2, [pc, #304]	@ (800e678 <xTaskIncrementTick+0x150>)
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d123      	bne.n	800e598 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800e550:	4b4a      	ldr	r3, [pc, #296]	@ (800e67c <xTaskIncrementTick+0x154>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00d      	beq.n	800e576 <xTaskIncrementTick+0x4e>
	__asm volatile
 800e55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e55e:	b672      	cpsid	i
 800e560:	f383 8811 	msr	BASEPRI, r3
 800e564:	f3bf 8f6f 	isb	sy
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	b662      	cpsie	i
 800e56e:	603b      	str	r3, [r7, #0]
}
 800e570:	bf00      	nop
 800e572:	bf00      	nop
 800e574:	e7fd      	b.n	800e572 <xTaskIncrementTick+0x4a>
 800e576:	4b41      	ldr	r3, [pc, #260]	@ (800e67c <xTaskIncrementTick+0x154>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	4b40      	ldr	r3, [pc, #256]	@ (800e680 <xTaskIncrementTick+0x158>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a3e      	ldr	r2, [pc, #248]	@ (800e67c <xTaskIncrementTick+0x154>)
 800e582:	6013      	str	r3, [r2, #0]
 800e584:	4a3e      	ldr	r2, [pc, #248]	@ (800e680 <xTaskIncrementTick+0x158>)
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6013      	str	r3, [r2, #0]
 800e58a:	4b3e      	ldr	r3, [pc, #248]	@ (800e684 <xTaskIncrementTick+0x15c>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	3301      	adds	r3, #1
 800e590:	4a3c      	ldr	r2, [pc, #240]	@ (800e684 <xTaskIncrementTick+0x15c>)
 800e592:	6013      	str	r3, [r2, #0]
 800e594:	f000 fb5a 	bl	800ec4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e598:	4b3b      	ldr	r3, [pc, #236]	@ (800e688 <xTaskIncrementTick+0x160>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	693a      	ldr	r2, [r7, #16]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d349      	bcc.n	800e636 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5a2:	4b36      	ldr	r3, [pc, #216]	@ (800e67c <xTaskIncrementTick+0x154>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d104      	bne.n	800e5b6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5ac:	4b36      	ldr	r3, [pc, #216]	@ (800e688 <xTaskIncrementTick+0x160>)
 800e5ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e5b2:	601a      	str	r2, [r3, #0]
					break;
 800e5b4:	e03f      	b.n	800e636 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5b6:	4b31      	ldr	r3, [pc, #196]	@ (800e67c <xTaskIncrementTick+0x154>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5c6:	693a      	ldr	r2, [r7, #16]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d203      	bcs.n	800e5d6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5ce:	4a2e      	ldr	r2, [pc, #184]	@ (800e688 <xTaskIncrementTick+0x160>)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5d4:	e02f      	b.n	800e636 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	3304      	adds	r3, #4
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fe fac6 	bl	800cb6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d004      	beq.n	800e5f2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	3318      	adds	r3, #24
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7fe fabd 	bl	800cb6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5f6:	4b25      	ldr	r3, [pc, #148]	@ (800e68c <xTaskIncrementTick+0x164>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d903      	bls.n	800e606 <xTaskIncrementTick+0xde>
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e602:	4a22      	ldr	r2, [pc, #136]	@ (800e68c <xTaskIncrementTick+0x164>)
 800e604:	6013      	str	r3, [r2, #0]
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e60a:	4613      	mov	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4413      	add	r3, r2
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	4a1f      	ldr	r2, [pc, #124]	@ (800e690 <xTaskIncrementTick+0x168>)
 800e614:	441a      	add	r2, r3
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	3304      	adds	r3, #4
 800e61a:	4619      	mov	r1, r3
 800e61c:	4610      	mov	r0, r2
 800e61e:	f7fe fa48 	bl	800cab2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e626:	4b1b      	ldr	r3, [pc, #108]	@ (800e694 <xTaskIncrementTick+0x16c>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d3b8      	bcc.n	800e5a2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800e630:	2301      	movs	r3, #1
 800e632:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e634:	e7b5      	b.n	800e5a2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e636:	4b17      	ldr	r3, [pc, #92]	@ (800e694 <xTaskIncrementTick+0x16c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e63c:	4914      	ldr	r1, [pc, #80]	@ (800e690 <xTaskIncrementTick+0x168>)
 800e63e:	4613      	mov	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	4413      	add	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	440b      	add	r3, r1
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d907      	bls.n	800e65e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800e64e:	2301      	movs	r3, #1
 800e650:	617b      	str	r3, [r7, #20]
 800e652:	e004      	b.n	800e65e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e654:	4b10      	ldr	r3, [pc, #64]	@ (800e698 <xTaskIncrementTick+0x170>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	3301      	adds	r3, #1
 800e65a:	4a0f      	ldr	r2, [pc, #60]	@ (800e698 <xTaskIncrementTick+0x170>)
 800e65c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e65e:	4b0f      	ldr	r3, [pc, #60]	@ (800e69c <xTaskIncrementTick+0x174>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d001      	beq.n	800e66a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800e666:	2301      	movs	r3, #1
 800e668:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e66a:	697b      	ldr	r3, [r7, #20]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3718      	adds	r7, #24
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	200074fc 	.word	0x200074fc
 800e678:	200074d8 	.word	0x200074d8
 800e67c:	200074a4 	.word	0x200074a4
 800e680:	200074a8 	.word	0x200074a8
 800e684:	200074ec 	.word	0x200074ec
 800e688:	200074f4 	.word	0x200074f4
 800e68c:	200074dc 	.word	0x200074dc
 800e690:	2000701c 	.word	0x2000701c
 800e694:	20007018 	.word	0x20007018
 800e698:	200074e4 	.word	0x200074e4
 800e69c:	200074e8 	.word	0x200074e8

0800e6a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6a6:	4b3e      	ldr	r3, [pc, #248]	@ (800e7a0 <vTaskSwitchContext+0x100>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6ae:	4b3d      	ldr	r3, [pc, #244]	@ (800e7a4 <vTaskSwitchContext+0x104>)
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6b4:	e070      	b.n	800e798 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800e6b6:	4b3b      	ldr	r3, [pc, #236]	@ (800e7a4 <vTaskSwitchContext+0x104>)
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e6bc:	4b3a      	ldr	r3, [pc, #232]	@ (800e7a8 <vTaskSwitchContext+0x108>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6c2:	613b      	str	r3, [r7, #16]
 800e6c4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800e6c8:	60fb      	str	r3, [r7, #12]
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d111      	bne.n	800e6f8 <vTaskSwitchContext+0x58>
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	3304      	adds	r3, #4
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	68fa      	ldr	r2, [r7, #12]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d10b      	bne.n	800e6f8 <vTaskSwitchContext+0x58>
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	3308      	adds	r3, #8
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d105      	bne.n	800e6f8 <vTaskSwitchContext+0x58>
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	330c      	adds	r3, #12
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d008      	beq.n	800e70a <vTaskSwitchContext+0x6a>
 800e6f8:	4b2b      	ldr	r3, [pc, #172]	@ (800e7a8 <vTaskSwitchContext+0x108>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	4b2a      	ldr	r3, [pc, #168]	@ (800e7a8 <vTaskSwitchContext+0x108>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	3334      	adds	r3, #52	@ 0x34
 800e702:	4619      	mov	r1, r3
 800e704:	4610      	mov	r0, r2
 800e706:	f7f2 f8f1 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e70a:	4b28      	ldr	r3, [pc, #160]	@ (800e7ac <vTaskSwitchContext+0x10c>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	617b      	str	r3, [r7, #20]
 800e710:	e013      	b.n	800e73a <vTaskSwitchContext+0x9a>
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d10d      	bne.n	800e734 <vTaskSwitchContext+0x94>
	__asm volatile
 800e718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e71c:	b672      	cpsid	i
 800e71e:	f383 8811 	msr	BASEPRI, r3
 800e722:	f3bf 8f6f 	isb	sy
 800e726:	f3bf 8f4f 	dsb	sy
 800e72a:	b662      	cpsie	i
 800e72c:	607b      	str	r3, [r7, #4]
}
 800e72e:	bf00      	nop
 800e730:	bf00      	nop
 800e732:	e7fd      	b.n	800e730 <vTaskSwitchContext+0x90>
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	3b01      	subs	r3, #1
 800e738:	617b      	str	r3, [r7, #20]
 800e73a:	491d      	ldr	r1, [pc, #116]	@ (800e7b0 <vTaskSwitchContext+0x110>)
 800e73c:	697a      	ldr	r2, [r7, #20]
 800e73e:	4613      	mov	r3, r2
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	4413      	add	r3, r2
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	440b      	add	r3, r1
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d0e1      	beq.n	800e712 <vTaskSwitchContext+0x72>
 800e74e:	697a      	ldr	r2, [r7, #20]
 800e750:	4613      	mov	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	4a15      	ldr	r2, [pc, #84]	@ (800e7b0 <vTaskSwitchContext+0x110>)
 800e75a:	4413      	add	r3, r2
 800e75c:	60bb      	str	r3, [r7, #8]
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	605a      	str	r2, [r3, #4]
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	685a      	ldr	r2, [r3, #4]
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	3308      	adds	r3, #8
 800e770:	429a      	cmp	r2, r3
 800e772:	d104      	bne.n	800e77e <vTaskSwitchContext+0xde>
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	685a      	ldr	r2, [r3, #4]
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	605a      	str	r2, [r3, #4]
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	4a08      	ldr	r2, [pc, #32]	@ (800e7a8 <vTaskSwitchContext+0x108>)
 800e786:	6013      	str	r3, [r2, #0]
 800e788:	4a08      	ldr	r2, [pc, #32]	@ (800e7ac <vTaskSwitchContext+0x10c>)
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e78e:	4b06      	ldr	r3, [pc, #24]	@ (800e7a8 <vTaskSwitchContext+0x108>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	3354      	adds	r3, #84	@ 0x54
 800e794:	4a07      	ldr	r2, [pc, #28]	@ (800e7b4 <vTaskSwitchContext+0x114>)
 800e796:	6013      	str	r3, [r2, #0]
}
 800e798:	bf00      	nop
 800e79a:	3718      	adds	r7, #24
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	200074fc 	.word	0x200074fc
 800e7a4:	200074e8 	.word	0x200074e8
 800e7a8:	20007018 	.word	0x20007018
 800e7ac:	200074dc 	.word	0x200074dc
 800e7b0:	2000701c 	.word	0x2000701c
 800e7b4:	20000080 	.word	0x20000080

0800e7b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d10d      	bne.n	800e7e4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800e7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7cc:	b672      	cpsid	i
 800e7ce:	f383 8811 	msr	BASEPRI, r3
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	f3bf 8f4f 	dsb	sy
 800e7da:	b662      	cpsie	i
 800e7dc:	60fb      	str	r3, [r7, #12]
}
 800e7de:	bf00      	nop
 800e7e0:	bf00      	nop
 800e7e2:	e7fd      	b.n	800e7e0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7e4:	4b07      	ldr	r3, [pc, #28]	@ (800e804 <vTaskPlaceOnEventList+0x4c>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	3318      	adds	r3, #24
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7fe f984 	bl	800cafa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7f2:	2101      	movs	r1, #1
 800e7f4:	6838      	ldr	r0, [r7, #0]
 800e7f6:	f000 fc07 	bl	800f008 <prvAddCurrentTaskToDelayedList>
}
 800e7fa:	bf00      	nop
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	20007018 	.word	0x20007018

0800e808 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d10d      	bne.n	800e836 <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 800e81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e81e:	b672      	cpsid	i
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	b662      	cpsie	i
 800e82e:	617b      	str	r3, [r7, #20]
}
 800e830:	bf00      	nop
 800e832:	bf00      	nop
 800e834:	e7fd      	b.n	800e832 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e836:	4b13      	ldr	r3, [pc, #76]	@ (800e884 <vTaskPlaceOnUnorderedEventList+0x7c>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d10d      	bne.n	800e85a <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e842:	b672      	cpsid	i
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	b662      	cpsie	i
 800e852:	613b      	str	r3, [r7, #16]
}
 800e854:	bf00      	nop
 800e856:	bf00      	nop
 800e858:	e7fd      	b.n	800e856 <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e85a:	4b0b      	ldr	r3, [pc, #44]	@ (800e888 <vTaskPlaceOnUnorderedEventList+0x80>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	68ba      	ldr	r2, [r7, #8]
 800e860:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e864:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e866:	4b08      	ldr	r3, [pc, #32]	@ (800e888 <vTaskPlaceOnUnorderedEventList+0x80>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3318      	adds	r3, #24
 800e86c:	4619      	mov	r1, r3
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f7fe f91f 	bl	800cab2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e874:	2101      	movs	r1, #1
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fbc6 	bl	800f008 <prvAddCurrentTaskToDelayedList>
}
 800e87c:	bf00      	nop
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	200074fc 	.word	0x200074fc
 800e888:	20007018 	.word	0x20007018

0800e88c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	60b9      	str	r1, [r7, #8]
 800e896:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10d      	bne.n	800e8ba <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800e89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a2:	b672      	cpsid	i
 800e8a4:	f383 8811 	msr	BASEPRI, r3
 800e8a8:	f3bf 8f6f 	isb	sy
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	b662      	cpsie	i
 800e8b2:	617b      	str	r3, [r7, #20]
}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	e7fd      	b.n	800e8b6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e8e4 <vTaskPlaceOnEventListRestricted+0x58>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3318      	adds	r3, #24
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f7fe f8f5 	bl	800cab2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d002      	beq.n	800e8d4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800e8ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e8d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e8d4:	6879      	ldr	r1, [r7, #4]
 800e8d6:	68b8      	ldr	r0, [r7, #8]
 800e8d8:	f000 fb96 	bl	800f008 <prvAddCurrentTaskToDelayedList>
	}
 800e8dc:	bf00      	nop
 800e8de:	3718      	adds	r7, #24
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	20007018 	.word	0x20007018

0800e8e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d10d      	bne.n	800e91a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800e8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e902:	b672      	cpsid	i
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	b662      	cpsie	i
 800e912:	60fb      	str	r3, [r7, #12]
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop
 800e918:	e7fd      	b.n	800e916 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	3318      	adds	r3, #24
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe f924 	bl	800cb6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e924:	4b1d      	ldr	r3, [pc, #116]	@ (800e99c <xTaskRemoveFromEventList+0xb4>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d11d      	bne.n	800e968 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	3304      	adds	r3, #4
 800e930:	4618      	mov	r0, r3
 800e932:	f7fe f91b 	bl	800cb6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e93a:	4b19      	ldr	r3, [pc, #100]	@ (800e9a0 <xTaskRemoveFromEventList+0xb8>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d903      	bls.n	800e94a <xTaskRemoveFromEventList+0x62>
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e946:	4a16      	ldr	r2, [pc, #88]	@ (800e9a0 <xTaskRemoveFromEventList+0xb8>)
 800e948:	6013      	str	r3, [r2, #0]
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e94e:	4613      	mov	r3, r2
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	4413      	add	r3, r2
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	4a13      	ldr	r2, [pc, #76]	@ (800e9a4 <xTaskRemoveFromEventList+0xbc>)
 800e958:	441a      	add	r2, r3
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	3304      	adds	r3, #4
 800e95e:	4619      	mov	r1, r3
 800e960:	4610      	mov	r0, r2
 800e962:	f7fe f8a6 	bl	800cab2 <vListInsertEnd>
 800e966:	e005      	b.n	800e974 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	3318      	adds	r3, #24
 800e96c:	4619      	mov	r1, r3
 800e96e:	480e      	ldr	r0, [pc, #56]	@ (800e9a8 <xTaskRemoveFromEventList+0xc0>)
 800e970:	f7fe f89f 	bl	800cab2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e978:	4b0c      	ldr	r3, [pc, #48]	@ (800e9ac <xTaskRemoveFromEventList+0xc4>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e97e:	429a      	cmp	r2, r3
 800e980:	d905      	bls.n	800e98e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e982:	2301      	movs	r3, #1
 800e984:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e986:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b0 <xTaskRemoveFromEventList+0xc8>)
 800e988:	2201      	movs	r2, #1
 800e98a:	601a      	str	r2, [r3, #0]
 800e98c:	e001      	b.n	800e992 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800e98e:	2300      	movs	r3, #0
 800e990:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e992:	697b      	ldr	r3, [r7, #20]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3718      	adds	r7, #24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	200074fc 	.word	0x200074fc
 800e9a0:	200074dc 	.word	0x200074dc
 800e9a4:	2000701c 	.word	0x2000701c
 800e9a8:	200074ac 	.word	0x200074ac
 800e9ac:	20007018 	.word	0x20007018
 800e9b0:	200074e8 	.word	0x200074e8

0800e9b4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b086      	sub	sp, #24
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e9be:	4b2c      	ldr	r3, [pc, #176]	@ (800ea70 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d10d      	bne.n	800e9e2 <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 800e9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ca:	b672      	cpsid	i
 800e9cc:	f383 8811 	msr	BASEPRI, r3
 800e9d0:	f3bf 8f6f 	isb	sy
 800e9d4:	f3bf 8f4f 	dsb	sy
 800e9d8:	b662      	cpsie	i
 800e9da:	613b      	str	r3, [r7, #16]
}
 800e9dc:	bf00      	nop
 800e9de:	bf00      	nop
 800e9e0:	e7fd      	b.n	800e9de <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d10d      	bne.n	800ea14 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 800e9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9fc:	b672      	cpsid	i
 800e9fe:	f383 8811 	msr	BASEPRI, r3
 800ea02:	f3bf 8f6f 	isb	sy
 800ea06:	f3bf 8f4f 	dsb	sy
 800ea0a:	b662      	cpsie	i
 800ea0c:	60fb      	str	r3, [r7, #12]
}
 800ea0e:	bf00      	nop
 800ea10:	bf00      	nop
 800ea12:	e7fd      	b.n	800ea10 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7fe f8a9 	bl	800cb6c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe f8a4 	bl	800cb6c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea28:	4b12      	ldr	r3, [pc, #72]	@ (800ea74 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d903      	bls.n	800ea38 <vTaskRemoveFromUnorderedEventList+0x84>
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea34:	4a0f      	ldr	r2, [pc, #60]	@ (800ea74 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ea36:	6013      	str	r3, [r2, #0]
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea3c:	4613      	mov	r3, r2
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	4413      	add	r3, r2
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	4a0c      	ldr	r2, [pc, #48]	@ (800ea78 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800ea46:	441a      	add	r2, r3
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	3304      	adds	r3, #4
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	4610      	mov	r0, r2
 800ea50:	f7fe f82f 	bl	800cab2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea58:	4b08      	ldr	r3, [pc, #32]	@ (800ea7c <vTaskRemoveFromUnorderedEventList+0xc8>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d902      	bls.n	800ea68 <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800ea62:	4b07      	ldr	r3, [pc, #28]	@ (800ea80 <vTaskRemoveFromUnorderedEventList+0xcc>)
 800ea64:	2201      	movs	r2, #1
 800ea66:	601a      	str	r2, [r3, #0]
	}
}
 800ea68:	bf00      	nop
 800ea6a:	3718      	adds	r7, #24
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	200074fc 	.word	0x200074fc
 800ea74:	200074dc 	.word	0x200074dc
 800ea78:	2000701c 	.word	0x2000701c
 800ea7c:	20007018 	.word	0x20007018
 800ea80:	200074e8 	.word	0x200074e8

0800ea84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea8c:	4b06      	ldr	r3, [pc, #24]	@ (800eaa8 <vTaskInternalSetTimeOutState+0x24>)
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea94:	4b05      	ldr	r3, [pc, #20]	@ (800eaac <vTaskInternalSetTimeOutState+0x28>)
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	605a      	str	r2, [r3, #4]
}
 800ea9c:	bf00      	nop
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr
 800eaa8:	200074ec 	.word	0x200074ec
 800eaac:	200074d8 	.word	0x200074d8

0800eab0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b088      	sub	sp, #32
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10d      	bne.n	800eadc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800eac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac4:	b672      	cpsid	i
 800eac6:	f383 8811 	msr	BASEPRI, r3
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	b662      	cpsie	i
 800ead4:	613b      	str	r3, [r7, #16]
}
 800ead6:	bf00      	nop
 800ead8:	bf00      	nop
 800eada:	e7fd      	b.n	800ead8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10d      	bne.n	800eafe <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae6:	b672      	cpsid	i
 800eae8:	f383 8811 	msr	BASEPRI, r3
 800eaec:	f3bf 8f6f 	isb	sy
 800eaf0:	f3bf 8f4f 	dsb	sy
 800eaf4:	b662      	cpsie	i
 800eaf6:	60fb      	str	r3, [r7, #12]
}
 800eaf8:	bf00      	nop
 800eafa:	bf00      	nop
 800eafc:	e7fd      	b.n	800eafa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800eafe:	f000 ff6d 	bl	800f9dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb02:	4b1d      	ldr	r3, [pc, #116]	@ (800eb78 <xTaskCheckForTimeOut+0xc8>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	69ba      	ldr	r2, [r7, #24]
 800eb0e:	1ad3      	subs	r3, r2, r3
 800eb10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb1a:	d102      	bne.n	800eb22 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	61fb      	str	r3, [r7, #28]
 800eb20:	e023      	b.n	800eb6a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	4b15      	ldr	r3, [pc, #84]	@ (800eb7c <xTaskCheckForTimeOut+0xcc>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d007      	beq.n	800eb3e <xTaskCheckForTimeOut+0x8e>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	69ba      	ldr	r2, [r7, #24]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d302      	bcc.n	800eb3e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	61fb      	str	r3, [r7, #28]
 800eb3c:	e015      	b.n	800eb6a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	697a      	ldr	r2, [r7, #20]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d20b      	bcs.n	800eb60 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	1ad2      	subs	r2, r2, r3
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff ff95 	bl	800ea84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	61fb      	str	r3, [r7, #28]
 800eb5e:	e004      	b.n	800eb6a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2200      	movs	r2, #0
 800eb64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb66:	2301      	movs	r3, #1
 800eb68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb6a:	f000 ff6d 	bl	800fa48 <vPortExitCritical>

	return xReturn;
 800eb6e:	69fb      	ldr	r3, [r7, #28]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3720      	adds	r7, #32
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	200074d8 	.word	0x200074d8
 800eb7c:	200074ec 	.word	0x200074ec

0800eb80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb80:	b480      	push	{r7}
 800eb82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb84:	4b03      	ldr	r3, [pc, #12]	@ (800eb94 <vTaskMissedYield+0x14>)
 800eb86:	2201      	movs	r2, #1
 800eb88:	601a      	str	r2, [r3, #0]
}
 800eb8a:	bf00      	nop
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	200074e8 	.word	0x200074e8

0800eb98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eba0:	f000 f84c 	bl	800ec3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eba4:	4b06      	ldr	r3, [pc, #24]	@ (800ebc0 <prvIdleTask+0x28>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d9f9      	bls.n	800eba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ebac:	4b05      	ldr	r3, [pc, #20]	@ (800ebc4 <prvIdleTask+0x2c>)
 800ebae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebb2:	601a      	str	r2, [r3, #0]
 800ebb4:	f3bf 8f4f 	dsb	sy
 800ebb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ebbc:	e7f0      	b.n	800eba0 <prvIdleTask+0x8>
 800ebbe:	bf00      	nop
 800ebc0:	2000701c 	.word	0x2000701c
 800ebc4:	e000ed04 	.word	0xe000ed04

0800ebc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebce:	2300      	movs	r3, #0
 800ebd0:	607b      	str	r3, [r7, #4]
 800ebd2:	e00c      	b.n	800ebee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4413      	add	r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	4a10      	ldr	r2, [pc, #64]	@ (800ec20 <prvInitialiseTaskLists+0x58>)
 800ebe0:	4413      	add	r3, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fd ff38 	bl	800ca58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	3301      	adds	r3, #1
 800ebec:	607b      	str	r3, [r7, #4]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2b37      	cmp	r3, #55	@ 0x37
 800ebf2:	d9ef      	bls.n	800ebd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ebf4:	480b      	ldr	r0, [pc, #44]	@ (800ec24 <prvInitialiseTaskLists+0x5c>)
 800ebf6:	f7fd ff2f 	bl	800ca58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ebfa:	480b      	ldr	r0, [pc, #44]	@ (800ec28 <prvInitialiseTaskLists+0x60>)
 800ebfc:	f7fd ff2c 	bl	800ca58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec00:	480a      	ldr	r0, [pc, #40]	@ (800ec2c <prvInitialiseTaskLists+0x64>)
 800ec02:	f7fd ff29 	bl	800ca58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec06:	480a      	ldr	r0, [pc, #40]	@ (800ec30 <prvInitialiseTaskLists+0x68>)
 800ec08:	f7fd ff26 	bl	800ca58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec0c:	4b09      	ldr	r3, [pc, #36]	@ (800ec34 <prvInitialiseTaskLists+0x6c>)
 800ec0e:	4a05      	ldr	r2, [pc, #20]	@ (800ec24 <prvInitialiseTaskLists+0x5c>)
 800ec10:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec12:	4b09      	ldr	r3, [pc, #36]	@ (800ec38 <prvInitialiseTaskLists+0x70>)
 800ec14:	4a04      	ldr	r2, [pc, #16]	@ (800ec28 <prvInitialiseTaskLists+0x60>)
 800ec16:	601a      	str	r2, [r3, #0]
}
 800ec18:	bf00      	nop
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	2000701c 	.word	0x2000701c
 800ec24:	2000747c 	.word	0x2000747c
 800ec28:	20007490 	.word	0x20007490
 800ec2c:	200074ac 	.word	0x200074ac
 800ec30:	200074c0 	.word	0x200074c0
 800ec34:	200074a4 	.word	0x200074a4
 800ec38:	200074a8 	.word	0x200074a8

0800ec3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec40:	bf00      	nop
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr
	...

0800ec4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec52:	4b0c      	ldr	r3, [pc, #48]	@ (800ec84 <prvResetNextTaskUnblockTime+0x38>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d104      	bne.n	800ec66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec88 <prvResetNextTaskUnblockTime+0x3c>)
 800ec5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ec62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec64:	e008      	b.n	800ec78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec66:	4b07      	ldr	r3, [pc, #28]	@ (800ec84 <prvResetNextTaskUnblockTime+0x38>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	4a04      	ldr	r2, [pc, #16]	@ (800ec88 <prvResetNextTaskUnblockTime+0x3c>)
 800ec76:	6013      	str	r3, [r2, #0]
}
 800ec78:	bf00      	nop
 800ec7a:	370c      	adds	r7, #12
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr
 800ec84:	200074a4 	.word	0x200074a4
 800ec88:	200074f4 	.word	0x200074f4

0800ec8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ec92:	4b05      	ldr	r3, [pc, #20]	@ (800eca8 <xTaskGetCurrentTaskHandle+0x1c>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ec98:	687b      	ldr	r3, [r7, #4]
	}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	370c      	adds	r7, #12
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	20007018 	.word	0x20007018

0800ecac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ece0 <xTaskGetSchedulerState+0x34>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d102      	bne.n	800ecc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	607b      	str	r3, [r7, #4]
 800ecbe:	e008      	b.n	800ecd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecc0:	4b08      	ldr	r3, [pc, #32]	@ (800ece4 <xTaskGetSchedulerState+0x38>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d102      	bne.n	800ecce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ecc8:	2302      	movs	r3, #2
 800ecca:	607b      	str	r3, [r7, #4]
 800eccc:	e001      	b.n	800ecd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ecd2:	687b      	ldr	r3, [r7, #4]
	}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	200074e0 	.word	0x200074e0
 800ece4:	200074fc 	.word	0x200074fc

0800ece8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d051      	beq.n	800eda2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed02:	4b2a      	ldr	r3, [pc, #168]	@ (800edac <xTaskPriorityInherit+0xc4>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d241      	bcs.n	800ed90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	699b      	ldr	r3, [r3, #24]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	db06      	blt.n	800ed22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed14:	4b25      	ldr	r3, [pc, #148]	@ (800edac <xTaskPriorityInherit+0xc4>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	6959      	ldr	r1, [r3, #20]
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed2a:	4613      	mov	r3, r2
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	4413      	add	r3, r2
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	4a1f      	ldr	r2, [pc, #124]	@ (800edb0 <xTaskPriorityInherit+0xc8>)
 800ed34:	4413      	add	r3, r2
 800ed36:	4299      	cmp	r1, r3
 800ed38:	d122      	bne.n	800ed80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	3304      	adds	r3, #4
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fd ff14 	bl	800cb6c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed44:	4b19      	ldr	r3, [pc, #100]	@ (800edac <xTaskPriorityInherit+0xc4>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed52:	4b18      	ldr	r3, [pc, #96]	@ (800edb4 <xTaskPriorityInherit+0xcc>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d903      	bls.n	800ed62 <xTaskPriorityInherit+0x7a>
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed5e:	4a15      	ldr	r2, [pc, #84]	@ (800edb4 <xTaskPriorityInherit+0xcc>)
 800ed60:	6013      	str	r3, [r2, #0]
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed66:	4613      	mov	r3, r2
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	4413      	add	r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	4a10      	ldr	r2, [pc, #64]	@ (800edb0 <xTaskPriorityInherit+0xc8>)
 800ed70:	441a      	add	r2, r3
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	3304      	adds	r3, #4
 800ed76:	4619      	mov	r1, r3
 800ed78:	4610      	mov	r0, r2
 800ed7a:	f7fd fe9a 	bl	800cab2 <vListInsertEnd>
 800ed7e:	e004      	b.n	800ed8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed80:	4b0a      	ldr	r3, [pc, #40]	@ (800edac <xTaskPriorityInherit+0xc4>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	60fb      	str	r3, [r7, #12]
 800ed8e:	e008      	b.n	800eda2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed94:	4b05      	ldr	r3, [pc, #20]	@ (800edac <xTaskPriorityInherit+0xc4>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d201      	bcs.n	800eda2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eda2:	68fb      	ldr	r3, [r7, #12]
	}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3710      	adds	r7, #16
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	20007018 	.word	0x20007018
 800edb0:	2000701c 	.word	0x2000701c
 800edb4:	200074dc 	.word	0x200074dc

0800edb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b086      	sub	sp, #24
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800edc4:	2300      	movs	r3, #0
 800edc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d05c      	beq.n	800ee88 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edce:	4b31      	ldr	r3, [pc, #196]	@ (800ee94 <xTaskPriorityDisinherit+0xdc>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	693a      	ldr	r2, [r7, #16]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d00d      	beq.n	800edf4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800edd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eddc:	b672      	cpsid	i
 800edde:	f383 8811 	msr	BASEPRI, r3
 800ede2:	f3bf 8f6f 	isb	sy
 800ede6:	f3bf 8f4f 	dsb	sy
 800edea:	b662      	cpsie	i
 800edec:	60fb      	str	r3, [r7, #12]
}
 800edee:	bf00      	nop
 800edf0:	bf00      	nop
 800edf2:	e7fd      	b.n	800edf0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d10d      	bne.n	800ee18 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800edfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee00:	b672      	cpsid	i
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	b662      	cpsie	i
 800ee10:	60bb      	str	r3, [r7, #8]
}
 800ee12:	bf00      	nop
 800ee14:	bf00      	nop
 800ee16:	e7fd      	b.n	800ee14 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee1c:	1e5a      	subs	r2, r3, #1
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d02c      	beq.n	800ee88 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d128      	bne.n	800ee88 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	3304      	adds	r3, #4
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fd fe96 	bl	800cb6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee58:	4b0f      	ldr	r3, [pc, #60]	@ (800ee98 <xTaskPriorityDisinherit+0xe0>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d903      	bls.n	800ee68 <xTaskPriorityDisinherit+0xb0>
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee64:	4a0c      	ldr	r2, [pc, #48]	@ (800ee98 <xTaskPriorityDisinherit+0xe0>)
 800ee66:	6013      	str	r3, [r2, #0]
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4413      	add	r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4a09      	ldr	r2, [pc, #36]	@ (800ee9c <xTaskPriorityDisinherit+0xe4>)
 800ee76:	441a      	add	r2, r3
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4610      	mov	r0, r2
 800ee80:	f7fd fe17 	bl	800cab2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee84:	2301      	movs	r3, #1
 800ee86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee88:	697b      	ldr	r3, [r7, #20]
	}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3718      	adds	r7, #24
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	20007018 	.word	0x20007018
 800ee98:	200074dc 	.word	0x200074dc
 800ee9c:	2000701c 	.word	0x2000701c

0800eea0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b088      	sub	sp, #32
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d070      	beq.n	800ef9a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d10d      	bne.n	800eedc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800eec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec4:	b672      	cpsid	i
 800eec6:	f383 8811 	msr	BASEPRI, r3
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	f3bf 8f4f 	dsb	sy
 800eed2:	b662      	cpsie	i
 800eed4:	60fb      	str	r3, [r7, #12]
}
 800eed6:	bf00      	nop
 800eed8:	bf00      	nop
 800eeda:	e7fd      	b.n	800eed8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eedc:	69bb      	ldr	r3, [r7, #24]
 800eede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eee0:	683a      	ldr	r2, [r7, #0]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d902      	bls.n	800eeec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	61fb      	str	r3, [r7, #28]
 800eeea:	e002      	b.n	800eef2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eef0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eef6:	69fa      	ldr	r2, [r7, #28]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d04e      	beq.n	800ef9a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef00:	697a      	ldr	r2, [r7, #20]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d149      	bne.n	800ef9a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ef06:	4b27      	ldr	r3, [pc, #156]	@ (800efa4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	69ba      	ldr	r2, [r7, #24]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d10d      	bne.n	800ef2c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800ef10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef14:	b672      	cpsid	i
 800ef16:	f383 8811 	msr	BASEPRI, r3
 800ef1a:	f3bf 8f6f 	isb	sy
 800ef1e:	f3bf 8f4f 	dsb	sy
 800ef22:	b662      	cpsie	i
 800ef24:	60bb      	str	r3, [r7, #8]
}
 800ef26:	bf00      	nop
 800ef28:	bf00      	nop
 800ef2a:	e7fd      	b.n	800ef28 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	69fa      	ldr	r2, [r7, #28]
 800ef36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	699b      	ldr	r3, [r3, #24]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	db04      	blt.n	800ef4a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	6959      	ldr	r1, [r3, #20]
 800ef4e:	693a      	ldr	r2, [r7, #16]
 800ef50:	4613      	mov	r3, r2
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	4413      	add	r3, r2
 800ef56:	009b      	lsls	r3, r3, #2
 800ef58:	4a13      	ldr	r2, [pc, #76]	@ (800efa8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ef5a:	4413      	add	r3, r2
 800ef5c:	4299      	cmp	r1, r3
 800ef5e:	d11c      	bne.n	800ef9a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	3304      	adds	r3, #4
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fd fe01 	bl	800cb6c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef6e:	4b0f      	ldr	r3, [pc, #60]	@ (800efac <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d903      	bls.n	800ef7e <vTaskPriorityDisinheritAfterTimeout+0xde>
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef7a:	4a0c      	ldr	r2, [pc, #48]	@ (800efac <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800ef7c:	6013      	str	r3, [r2, #0]
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef82:	4613      	mov	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	4a07      	ldr	r2, [pc, #28]	@ (800efa8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ef8c:	441a      	add	r2, r3
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	3304      	adds	r3, #4
 800ef92:	4619      	mov	r1, r3
 800ef94:	4610      	mov	r0, r2
 800ef96:	f7fd fd8c 	bl	800cab2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef9a:	bf00      	nop
 800ef9c:	3720      	adds	r7, #32
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	20007018 	.word	0x20007018
 800efa8:	2000701c 	.word	0x2000701c
 800efac:	200074dc 	.word	0x200074dc

0800efb0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800efb6:	4b09      	ldr	r3, [pc, #36]	@ (800efdc <uxTaskResetEventItemValue+0x2c>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	699b      	ldr	r3, [r3, #24]
 800efbc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efbe:	4b07      	ldr	r3, [pc, #28]	@ (800efdc <uxTaskResetEventItemValue+0x2c>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efc4:	4b05      	ldr	r3, [pc, #20]	@ (800efdc <uxTaskResetEventItemValue+0x2c>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800efcc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800efce:	687b      	ldr	r3, [r7, #4]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr
 800efdc:	20007018 	.word	0x20007018

0800efe0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800efe0:	b480      	push	{r7}
 800efe2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800efe4:	4b07      	ldr	r3, [pc, #28]	@ (800f004 <pvTaskIncrementMutexHeldCount+0x24>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d004      	beq.n	800eff6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800efec:	4b05      	ldr	r3, [pc, #20]	@ (800f004 <pvTaskIncrementMutexHeldCount+0x24>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eff2:	3201      	adds	r2, #1
 800eff4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800eff6:	4b03      	ldr	r3, [pc, #12]	@ (800f004 <pvTaskIncrementMutexHeldCount+0x24>)
 800eff8:	681b      	ldr	r3, [r3, #0]
	}
 800effa:	4618      	mov	r0, r3
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr
 800f004:	20007018 	.word	0x20007018

0800f008 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f012:	4b21      	ldr	r3, [pc, #132]	@ (800f098 <prvAddCurrentTaskToDelayedList+0x90>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f018:	4b20      	ldr	r3, [pc, #128]	@ (800f09c <prvAddCurrentTaskToDelayedList+0x94>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	3304      	adds	r3, #4
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fd fda4 	bl	800cb6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f02a:	d10a      	bne.n	800f042 <prvAddCurrentTaskToDelayedList+0x3a>
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d007      	beq.n	800f042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f032:	4b1a      	ldr	r3, [pc, #104]	@ (800f09c <prvAddCurrentTaskToDelayedList+0x94>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	3304      	adds	r3, #4
 800f038:	4619      	mov	r1, r3
 800f03a:	4819      	ldr	r0, [pc, #100]	@ (800f0a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800f03c:	f7fd fd39 	bl	800cab2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f040:	e026      	b.n	800f090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f042:	68fa      	ldr	r2, [r7, #12]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4413      	add	r3, r2
 800f048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f04a:	4b14      	ldr	r3, [pc, #80]	@ (800f09c <prvAddCurrentTaskToDelayedList+0x94>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	429a      	cmp	r2, r3
 800f058:	d209      	bcs.n	800f06e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f05a:	4b12      	ldr	r3, [pc, #72]	@ (800f0a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	4b0f      	ldr	r3, [pc, #60]	@ (800f09c <prvAddCurrentTaskToDelayedList+0x94>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	3304      	adds	r3, #4
 800f064:	4619      	mov	r1, r3
 800f066:	4610      	mov	r0, r2
 800f068:	f7fd fd47 	bl	800cafa <vListInsert>
}
 800f06c:	e010      	b.n	800f090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f06e:	4b0e      	ldr	r3, [pc, #56]	@ (800f0a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	4b0a      	ldr	r3, [pc, #40]	@ (800f09c <prvAddCurrentTaskToDelayedList+0x94>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	3304      	adds	r3, #4
 800f078:	4619      	mov	r1, r3
 800f07a:	4610      	mov	r0, r2
 800f07c:	f7fd fd3d 	bl	800cafa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f080:	4b0a      	ldr	r3, [pc, #40]	@ (800f0ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	429a      	cmp	r2, r3
 800f088:	d202      	bcs.n	800f090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f08a:	4a08      	ldr	r2, [pc, #32]	@ (800f0ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	6013      	str	r3, [r2, #0]
}
 800f090:	bf00      	nop
 800f092:	3710      	adds	r7, #16
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	200074d8 	.word	0x200074d8
 800f09c:	20007018 	.word	0x20007018
 800f0a0:	200074c0 	.word	0x200074c0
 800f0a4:	200074a8 	.word	0x200074a8
 800f0a8:	200074a4 	.word	0x200074a4
 800f0ac:	200074f4 	.word	0x200074f4

0800f0b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b08a      	sub	sp, #40	@ 0x28
 800f0b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f0ba:	f000 fb21 	bl	800f700 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f0be:	4b1e      	ldr	r3, [pc, #120]	@ (800f138 <xTimerCreateTimerTask+0x88>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d021      	beq.n	800f10a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f0ce:	1d3a      	adds	r2, r7, #4
 800f0d0:	f107 0108 	add.w	r1, r7, #8
 800f0d4:	f107 030c 	add.w	r3, r7, #12
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fd fa9d 	bl	800c618 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0de:	6879      	ldr	r1, [r7, #4]
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	9202      	str	r2, [sp, #8]
 800f0e6:	9301      	str	r3, [sp, #4]
 800f0e8:	2302      	movs	r3, #2
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	460a      	mov	r2, r1
 800f0f0:	4912      	ldr	r1, [pc, #72]	@ (800f13c <xTimerCreateTimerTask+0x8c>)
 800f0f2:	4813      	ldr	r0, [pc, #76]	@ (800f140 <xTimerCreateTimerTask+0x90>)
 800f0f4:	f7fe fed6 	bl	800dea4 <xTaskCreateStatic>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	4a12      	ldr	r2, [pc, #72]	@ (800f144 <xTimerCreateTimerTask+0x94>)
 800f0fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f0fe:	4b11      	ldr	r3, [pc, #68]	@ (800f144 <xTimerCreateTimerTask+0x94>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d001      	beq.n	800f10a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f106:	2301      	movs	r3, #1
 800f108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d10d      	bne.n	800f12c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800f110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f114:	b672      	cpsid	i
 800f116:	f383 8811 	msr	BASEPRI, r3
 800f11a:	f3bf 8f6f 	isb	sy
 800f11e:	f3bf 8f4f 	dsb	sy
 800f122:	b662      	cpsie	i
 800f124:	613b      	str	r3, [r7, #16]
}
 800f126:	bf00      	nop
 800f128:	bf00      	nop
 800f12a:	e7fd      	b.n	800f128 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800f12c:	697b      	ldr	r3, [r7, #20]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3718      	adds	r7, #24
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20007530 	.word	0x20007530
 800f13c:	0801fefc 	.word	0x0801fefc
 800f140:	0800f289 	.word	0x0800f289
 800f144:	20007534 	.word	0x20007534

0800f148 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b08a      	sub	sp, #40	@ 0x28
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	607a      	str	r2, [r7, #4]
 800f154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f156:	2300      	movs	r3, #0
 800f158:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10d      	bne.n	800f17c <xTimerGenericCommand+0x34>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f164:	b672      	cpsid	i
 800f166:	f383 8811 	msr	BASEPRI, r3
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	b662      	cpsie	i
 800f174:	623b      	str	r3, [r7, #32]
}
 800f176:	bf00      	nop
 800f178:	bf00      	nop
 800f17a:	e7fd      	b.n	800f178 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f17c:	4b19      	ldr	r3, [pc, #100]	@ (800f1e4 <xTimerGenericCommand+0x9c>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d02a      	beq.n	800f1da <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	2b05      	cmp	r3, #5
 800f194:	dc18      	bgt.n	800f1c8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f196:	f7ff fd89 	bl	800ecac <xTaskGetSchedulerState>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	d109      	bne.n	800f1b4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f1a0:	4b10      	ldr	r3, [pc, #64]	@ (800f1e4 <xTimerGenericCommand+0x9c>)
 800f1a2:	6818      	ldr	r0, [r3, #0]
 800f1a4:	f107 0110 	add.w	r1, r7, #16
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1ac:	f7fd ff94 	bl	800d0d8 <xQueueGenericSend>
 800f1b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800f1b2:	e012      	b.n	800f1da <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f1e4 <xTimerGenericCommand+0x9c>)
 800f1b6:	6818      	ldr	r0, [r3, #0]
 800f1b8:	f107 0110 	add.w	r1, r7, #16
 800f1bc:	2300      	movs	r3, #0
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f7fd ff8a 	bl	800d0d8 <xQueueGenericSend>
 800f1c4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f1c6:	e008      	b.n	800f1da <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1c8:	4b06      	ldr	r3, [pc, #24]	@ (800f1e4 <xTimerGenericCommand+0x9c>)
 800f1ca:	6818      	ldr	r0, [r3, #0]
 800f1cc:	f107 0110 	add.w	r1, r7, #16
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	f7fe f88a 	bl	800d2ec <xQueueGenericSendFromISR>
 800f1d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3728      	adds	r7, #40	@ 0x28
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	20007530 	.word	0x20007530

0800f1e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b088      	sub	sp, #32
 800f1ec:	af02      	add	r7, sp, #8
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1f2:	4b24      	ldr	r3, [pc, #144]	@ (800f284 <prvProcessExpiredTimer+0x9c>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	3304      	adds	r3, #4
 800f200:	4618      	mov	r0, r3
 800f202:	f7fd fcb3 	bl	800cb6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f20c:	f003 0304 	and.w	r3, r3, #4
 800f210:	2b00      	cmp	r3, #0
 800f212:	d025      	beq.n	800f260 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	699a      	ldr	r2, [r3, #24]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	18d1      	adds	r1, r2, r3
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	683a      	ldr	r2, [r7, #0]
 800f220:	6978      	ldr	r0, [r7, #20]
 800f222:	f000 f8d7 	bl	800f3d4 <prvInsertTimerInActiveList>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d022      	beq.n	800f272 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f22c:	2300      	movs	r3, #0
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	2300      	movs	r3, #0
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	2100      	movs	r1, #0
 800f236:	6978      	ldr	r0, [r7, #20]
 800f238:	f7ff ff86 	bl	800f148 <xTimerGenericCommand>
 800f23c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d116      	bne.n	800f272 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800f244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f248:	b672      	cpsid	i
 800f24a:	f383 8811 	msr	BASEPRI, r3
 800f24e:	f3bf 8f6f 	isb	sy
 800f252:	f3bf 8f4f 	dsb	sy
 800f256:	b662      	cpsie	i
 800f258:	60fb      	str	r3, [r7, #12]
}
 800f25a:	bf00      	nop
 800f25c:	bf00      	nop
 800f25e:	e7fd      	b.n	800f25c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f266:	f023 0301 	bic.w	r3, r3, #1
 800f26a:	b2da      	uxtb	r2, r3
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	6a1b      	ldr	r3, [r3, #32]
 800f276:	6978      	ldr	r0, [r7, #20]
 800f278:	4798      	blx	r3
}
 800f27a:	bf00      	nop
 800f27c:	3718      	adds	r7, #24
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	20007528 	.word	0x20007528

0800f288 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f290:	f107 0308 	add.w	r3, r7, #8
 800f294:	4618      	mov	r0, r3
 800f296:	f000 f859 	bl	800f34c <prvGetNextExpireTime>
 800f29a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	4619      	mov	r1, r3
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f000 f805 	bl	800f2b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f2a6:	f000 f8d7 	bl	800f458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2aa:	bf00      	nop
 800f2ac:	e7f0      	b.n	800f290 <prvTimerTask+0x8>
	...

0800f2b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f2ba:	f7ff f865 	bl	800e388 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2be:	f107 0308 	add.w	r3, r7, #8
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f000 f866 	bl	800f394 <prvSampleTimeNow>
 800f2c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d130      	bne.n	800f332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d10a      	bne.n	800f2ec <prvProcessTimerOrBlockTask+0x3c>
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d806      	bhi.n	800f2ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2de:	f7ff f861 	bl	800e3a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2e2:	68f9      	ldr	r1, [r7, #12]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff ff7f 	bl	800f1e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2ea:	e024      	b.n	800f336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d008      	beq.n	800f304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2f2:	4b13      	ldr	r3, [pc, #76]	@ (800f340 <prvProcessTimerOrBlockTask+0x90>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d101      	bne.n	800f300 <prvProcessTimerOrBlockTask+0x50>
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e000      	b.n	800f302 <prvProcessTimerOrBlockTask+0x52>
 800f300:	2300      	movs	r3, #0
 800f302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f304:	4b0f      	ldr	r3, [pc, #60]	@ (800f344 <prvProcessTimerOrBlockTask+0x94>)
 800f306:	6818      	ldr	r0, [r3, #0]
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	1ad3      	subs	r3, r2, r3
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	4619      	mov	r1, r3
 800f312:	f7fe fd93 	bl	800de3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f316:	f7ff f845 	bl	800e3a4 <xTaskResumeAll>
 800f31a:	4603      	mov	r3, r0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d10a      	bne.n	800f336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f320:	4b09      	ldr	r3, [pc, #36]	@ (800f348 <prvProcessTimerOrBlockTask+0x98>)
 800f322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f326:	601a      	str	r2, [r3, #0]
 800f328:	f3bf 8f4f 	dsb	sy
 800f32c:	f3bf 8f6f 	isb	sy
}
 800f330:	e001      	b.n	800f336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f332:	f7ff f837 	bl	800e3a4 <xTaskResumeAll>
}
 800f336:	bf00      	nop
 800f338:	3710      	adds	r7, #16
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	2000752c 	.word	0x2000752c
 800f344:	20007530 	.word	0x20007530
 800f348:	e000ed04 	.word	0xe000ed04

0800f34c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f354:	4b0e      	ldr	r3, [pc, #56]	@ (800f390 <prvGetNextExpireTime+0x44>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d101      	bne.n	800f362 <prvGetNextExpireTime+0x16>
 800f35e:	2201      	movs	r2, #1
 800f360:	e000      	b.n	800f364 <prvGetNextExpireTime+0x18>
 800f362:	2200      	movs	r2, #0
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d105      	bne.n	800f37c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f370:	4b07      	ldr	r3, [pc, #28]	@ (800f390 <prvGetNextExpireTime+0x44>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	68db      	ldr	r3, [r3, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	60fb      	str	r3, [r7, #12]
 800f37a:	e001      	b.n	800f380 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f37c:	2300      	movs	r3, #0
 800f37e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f380:	68fb      	ldr	r3, [r7, #12]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3714      	adds	r7, #20
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	20007528 	.word	0x20007528

0800f394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f39c:	f7ff f8a2 	bl	800e4e4 <xTaskGetTickCount>
 800f3a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f3a2:	4b0b      	ldr	r3, [pc, #44]	@ (800f3d0 <prvSampleTimeNow+0x3c>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d205      	bcs.n	800f3b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f3ac:	f000 f940 	bl	800f630 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	601a      	str	r2, [r3, #0]
 800f3b6:	e002      	b.n	800f3be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f3be:	4a04      	ldr	r2, [pc, #16]	@ (800f3d0 <prvSampleTimeNow+0x3c>)
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	20007538 	.word	0x20007538

0800f3d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b086      	sub	sp, #24
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	607a      	str	r2, [r7, #4]
 800f3e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d812      	bhi.n	800f420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	1ad2      	subs	r2, r2, r3
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	699b      	ldr	r3, [r3, #24]
 800f404:	429a      	cmp	r2, r3
 800f406:	d302      	bcc.n	800f40e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f408:	2301      	movs	r3, #1
 800f40a:	617b      	str	r3, [r7, #20]
 800f40c:	e01b      	b.n	800f446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f40e:	4b10      	ldr	r3, [pc, #64]	@ (800f450 <prvInsertTimerInActiveList+0x7c>)
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	3304      	adds	r3, #4
 800f416:	4619      	mov	r1, r3
 800f418:	4610      	mov	r0, r2
 800f41a:	f7fd fb6e 	bl	800cafa <vListInsert>
 800f41e:	e012      	b.n	800f446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	429a      	cmp	r2, r3
 800f426:	d206      	bcs.n	800f436 <prvInsertTimerInActiveList+0x62>
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d302      	bcc.n	800f436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f430:	2301      	movs	r3, #1
 800f432:	617b      	str	r3, [r7, #20]
 800f434:	e007      	b.n	800f446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f436:	4b07      	ldr	r3, [pc, #28]	@ (800f454 <prvInsertTimerInActiveList+0x80>)
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	3304      	adds	r3, #4
 800f43e:	4619      	mov	r1, r3
 800f440:	4610      	mov	r0, r2
 800f442:	f7fd fb5a 	bl	800cafa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f446:	697b      	ldr	r3, [r7, #20]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3718      	adds	r7, #24
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	2000752c 	.word	0x2000752c
 800f454:	20007528 	.word	0x20007528

0800f458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b08e      	sub	sp, #56	@ 0x38
 800f45c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f45e:	e0d4      	b.n	800f60a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2b00      	cmp	r3, #0
 800f464:	da1b      	bge.n	800f49e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f466:	1d3b      	adds	r3, r7, #4
 800f468:	3304      	adds	r3, #4
 800f46a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d10d      	bne.n	800f48e <prvProcessReceivedCommands+0x36>
	__asm volatile
 800f472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f476:	b672      	cpsid	i
 800f478:	f383 8811 	msr	BASEPRI, r3
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	b662      	cpsie	i
 800f486:	61fb      	str	r3, [r7, #28]
}
 800f488:	bf00      	nop
 800f48a:	bf00      	nop
 800f48c:	e7fd      	b.n	800f48a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f494:	6850      	ldr	r0, [r2, #4]
 800f496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f498:	6892      	ldr	r2, [r2, #8]
 800f49a:	4611      	mov	r1, r2
 800f49c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	f2c0 80b2 	blt.w	800f60a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ac:	695b      	ldr	r3, [r3, #20]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d004      	beq.n	800f4bc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b4:	3304      	adds	r3, #4
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7fd fb58 	bl	800cb6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4bc:	463b      	mov	r3, r7
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7ff ff68 	bl	800f394 <prvSampleTimeNow>
 800f4c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2b09      	cmp	r3, #9
 800f4ca:	f200 809b 	bhi.w	800f604 <prvProcessReceivedCommands+0x1ac>
 800f4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800f4d4 <prvProcessReceivedCommands+0x7c>)
 800f4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d4:	0800f4fd 	.word	0x0800f4fd
 800f4d8:	0800f4fd 	.word	0x0800f4fd
 800f4dc:	0800f4fd 	.word	0x0800f4fd
 800f4e0:	0800f577 	.word	0x0800f577
 800f4e4:	0800f58b 	.word	0x0800f58b
 800f4e8:	0800f5db 	.word	0x0800f5db
 800f4ec:	0800f4fd 	.word	0x0800f4fd
 800f4f0:	0800f4fd 	.word	0x0800f4fd
 800f4f4:	0800f577 	.word	0x0800f577
 800f4f8:	0800f58b 	.word	0x0800f58b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f502:	f043 0301 	orr.w	r3, r3, #1
 800f506:	b2da      	uxtb	r2, r3
 800f508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f50a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f50e:	68ba      	ldr	r2, [r7, #8]
 800f510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f512:	699b      	ldr	r3, [r3, #24]
 800f514:	18d1      	adds	r1, r2, r3
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f51a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f51c:	f7ff ff5a 	bl	800f3d4 <prvInsertTimerInActiveList>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d070      	beq.n	800f608 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f528:	6a1b      	ldr	r3, [r3, #32]
 800f52a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f52c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f534:	f003 0304 	and.w	r3, r3, #4
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d065      	beq.n	800f608 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f53c:	68ba      	ldr	r2, [r7, #8]
 800f53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f540:	699b      	ldr	r3, [r3, #24]
 800f542:	441a      	add	r2, r3
 800f544:	2300      	movs	r3, #0
 800f546:	9300      	str	r3, [sp, #0]
 800f548:	2300      	movs	r3, #0
 800f54a:	2100      	movs	r1, #0
 800f54c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f54e:	f7ff fdfb 	bl	800f148 <xTimerGenericCommand>
 800f552:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f554:	6a3b      	ldr	r3, [r7, #32]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d156      	bne.n	800f608 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800f55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f55e:	b672      	cpsid	i
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	b662      	cpsie	i
 800f56e:	61bb      	str	r3, [r7, #24]
}
 800f570:	bf00      	nop
 800f572:	bf00      	nop
 800f574:	e7fd      	b.n	800f572 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f57c:	f023 0301 	bic.w	r3, r3, #1
 800f580:	b2da      	uxtb	r2, r3
 800f582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f584:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f588:	e03f      	b.n	800f60a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f58c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f590:	f043 0301 	orr.w	r3, r3, #1
 800f594:	b2da      	uxtb	r2, r3
 800f596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f598:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f59c:	68ba      	ldr	r2, [r7, #8]
 800f59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5a4:	699b      	ldr	r3, [r3, #24]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d10d      	bne.n	800f5c6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ae:	b672      	cpsid	i
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	b662      	cpsie	i
 800f5be:	617b      	str	r3, [r7, #20]
}
 800f5c0:	bf00      	nop
 800f5c2:	bf00      	nop
 800f5c4:	e7fd      	b.n	800f5c2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5c8:	699a      	ldr	r2, [r3, #24]
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5cc:	18d1      	adds	r1, r2, r3
 800f5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5d4:	f7ff fefe 	bl	800f3d4 <prvInsertTimerInActiveList>
					break;
 800f5d8:	e017      	b.n	800f60a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5e0:	f003 0302 	and.w	r3, r3, #2
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d103      	bne.n	800f5f0 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800f5e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5ea:	f000 fbf7 	bl	800fddc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f5ee:	e00c      	b.n	800f60a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5f6:	f023 0301 	bic.w	r3, r3, #1
 800f5fa:	b2da      	uxtb	r2, r3
 800f5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f602:	e002      	b.n	800f60a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800f604:	bf00      	nop
 800f606:	e000      	b.n	800f60a <prvProcessReceivedCommands+0x1b2>
					break;
 800f608:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f60a:	4b08      	ldr	r3, [pc, #32]	@ (800f62c <prvProcessReceivedCommands+0x1d4>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	1d39      	adds	r1, r7, #4
 800f610:	2200      	movs	r2, #0
 800f612:	4618      	mov	r0, r3
 800f614:	f7fd ffa6 	bl	800d564 <xQueueReceive>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	f47f af20 	bne.w	800f460 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f620:	bf00      	nop
 800f622:	bf00      	nop
 800f624:	3730      	adds	r7, #48	@ 0x30
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	20007530 	.word	0x20007530

0800f630 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b088      	sub	sp, #32
 800f634:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f636:	e04b      	b.n	800f6d0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f638:	4b2f      	ldr	r3, [pc, #188]	@ (800f6f8 <prvSwitchTimerLists+0xc8>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f642:	4b2d      	ldr	r3, [pc, #180]	@ (800f6f8 <prvSwitchTimerLists+0xc8>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	3304      	adds	r3, #4
 800f650:	4618      	mov	r0, r3
 800f652:	f7fd fa8b 	bl	800cb6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	68f8      	ldr	r0, [r7, #12]
 800f65c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f664:	f003 0304 	and.w	r3, r3, #4
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d031      	beq.n	800f6d0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	699b      	ldr	r3, [r3, #24]
 800f670:	693a      	ldr	r2, [r7, #16]
 800f672:	4413      	add	r3, r2
 800f674:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d90e      	bls.n	800f69c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	68ba      	ldr	r2, [r7, #8]
 800f682:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	68fa      	ldr	r2, [r7, #12]
 800f688:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f68a:	4b1b      	ldr	r3, [pc, #108]	@ (800f6f8 <prvSwitchTimerLists+0xc8>)
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	3304      	adds	r3, #4
 800f692:	4619      	mov	r1, r3
 800f694:	4610      	mov	r0, r2
 800f696:	f7fd fa30 	bl	800cafa <vListInsert>
 800f69a:	e019      	b.n	800f6d0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f69c:	2300      	movs	r3, #0
 800f69e:	9300      	str	r3, [sp, #0]
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	693a      	ldr	r2, [r7, #16]
 800f6a4:	2100      	movs	r1, #0
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	f7ff fd4e 	bl	800f148 <xTimerGenericCommand>
 800f6ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d10d      	bne.n	800f6d0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800f6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6b8:	b672      	cpsid	i
 800f6ba:	f383 8811 	msr	BASEPRI, r3
 800f6be:	f3bf 8f6f 	isb	sy
 800f6c2:	f3bf 8f4f 	dsb	sy
 800f6c6:	b662      	cpsie	i
 800f6c8:	603b      	str	r3, [r7, #0]
}
 800f6ca:	bf00      	nop
 800f6cc:	bf00      	nop
 800f6ce:	e7fd      	b.n	800f6cc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6d0:	4b09      	ldr	r3, [pc, #36]	@ (800f6f8 <prvSwitchTimerLists+0xc8>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d1ae      	bne.n	800f638 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f6da:	4b07      	ldr	r3, [pc, #28]	@ (800f6f8 <prvSwitchTimerLists+0xc8>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f6e0:	4b06      	ldr	r3, [pc, #24]	@ (800f6fc <prvSwitchTimerLists+0xcc>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a04      	ldr	r2, [pc, #16]	@ (800f6f8 <prvSwitchTimerLists+0xc8>)
 800f6e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f6e8:	4a04      	ldr	r2, [pc, #16]	@ (800f6fc <prvSwitchTimerLists+0xcc>)
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	6013      	str	r3, [r2, #0]
}
 800f6ee:	bf00      	nop
 800f6f0:	3718      	adds	r7, #24
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	20007528 	.word	0x20007528
 800f6fc:	2000752c 	.word	0x2000752c

0800f700 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f706:	f000 f969 	bl	800f9dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f70a:	4b15      	ldr	r3, [pc, #84]	@ (800f760 <prvCheckForValidListAndQueue+0x60>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d120      	bne.n	800f754 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f712:	4814      	ldr	r0, [pc, #80]	@ (800f764 <prvCheckForValidListAndQueue+0x64>)
 800f714:	f7fd f9a0 	bl	800ca58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f718:	4813      	ldr	r0, [pc, #76]	@ (800f768 <prvCheckForValidListAndQueue+0x68>)
 800f71a:	f7fd f99d 	bl	800ca58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f71e:	4b13      	ldr	r3, [pc, #76]	@ (800f76c <prvCheckForValidListAndQueue+0x6c>)
 800f720:	4a10      	ldr	r2, [pc, #64]	@ (800f764 <prvCheckForValidListAndQueue+0x64>)
 800f722:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f724:	4b12      	ldr	r3, [pc, #72]	@ (800f770 <prvCheckForValidListAndQueue+0x70>)
 800f726:	4a10      	ldr	r2, [pc, #64]	@ (800f768 <prvCheckForValidListAndQueue+0x68>)
 800f728:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f72a:	2300      	movs	r3, #0
 800f72c:	9300      	str	r3, [sp, #0]
 800f72e:	4b11      	ldr	r3, [pc, #68]	@ (800f774 <prvCheckForValidListAndQueue+0x74>)
 800f730:	4a11      	ldr	r2, [pc, #68]	@ (800f778 <prvCheckForValidListAndQueue+0x78>)
 800f732:	2110      	movs	r1, #16
 800f734:	200a      	movs	r0, #10
 800f736:	f7fd faaf 	bl	800cc98 <xQueueGenericCreateStatic>
 800f73a:	4603      	mov	r3, r0
 800f73c:	4a08      	ldr	r2, [pc, #32]	@ (800f760 <prvCheckForValidListAndQueue+0x60>)
 800f73e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f740:	4b07      	ldr	r3, [pc, #28]	@ (800f760 <prvCheckForValidListAndQueue+0x60>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d005      	beq.n	800f754 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f748:	4b05      	ldr	r3, [pc, #20]	@ (800f760 <prvCheckForValidListAndQueue+0x60>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	490b      	ldr	r1, [pc, #44]	@ (800f77c <prvCheckForValidListAndQueue+0x7c>)
 800f74e:	4618      	mov	r0, r3
 800f750:	f7fe fb20 	bl	800dd94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f754:	f000 f978 	bl	800fa48 <vPortExitCritical>
}
 800f758:	bf00      	nop
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	20007530 	.word	0x20007530
 800f764:	20007500 	.word	0x20007500
 800f768:	20007514 	.word	0x20007514
 800f76c:	20007528 	.word	0x20007528
 800f770:	2000752c 	.word	0x2000752c
 800f774:	200075dc 	.word	0x200075dc
 800f778:	2000753c 	.word	0x2000753c
 800f77c:	0801ff04 	.word	0x0801ff04

0800f780 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f780:	b580      	push	{r7, lr}
 800f782:	b08a      	sub	sp, #40	@ 0x28
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	607a      	str	r2, [r7, #4]
 800f78c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f78e:	f06f 0301 	mvn.w	r3, #1
 800f792:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f7a0:	4b06      	ldr	r3, [pc, #24]	@ (800f7bc <xTimerPendFunctionCallFromISR+0x3c>)
 800f7a2:	6818      	ldr	r0, [r3, #0]
 800f7a4:	f107 0114 	add.w	r1, r7, #20
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	683a      	ldr	r2, [r7, #0]
 800f7ac:	f7fd fd9e 	bl	800d2ec <xQueueGenericSendFromISR>
 800f7b0:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3728      	adds	r7, #40	@ 0x28
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	20007530 	.word	0x20007530

0800f7c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	3b04      	subs	r3, #4
 800f7d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f7d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	3b04      	subs	r3, #4
 800f7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	f023 0201 	bic.w	r2, r3, #1
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	3b04      	subs	r3, #4
 800f7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f7f0:	4a0c      	ldr	r2, [pc, #48]	@ (800f824 <pxPortInitialiseStack+0x64>)
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	3b14      	subs	r3, #20
 800f7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	3b04      	subs	r3, #4
 800f806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f06f 0202 	mvn.w	r2, #2
 800f80e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	3b20      	subs	r3, #32
 800f814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f816:	68fb      	ldr	r3, [r7, #12]
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3714      	adds	r7, #20
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr
 800f824:	0800f829 	.word	0x0800f829

0800f828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f82e:	2300      	movs	r3, #0
 800f830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f832:	4b15      	ldr	r3, [pc, #84]	@ (800f888 <prvTaskExitError+0x60>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f83a:	d00d      	beq.n	800f858 <prvTaskExitError+0x30>
	__asm volatile
 800f83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f840:	b672      	cpsid	i
 800f842:	f383 8811 	msr	BASEPRI, r3
 800f846:	f3bf 8f6f 	isb	sy
 800f84a:	f3bf 8f4f 	dsb	sy
 800f84e:	b662      	cpsie	i
 800f850:	60fb      	str	r3, [r7, #12]
}
 800f852:	bf00      	nop
 800f854:	bf00      	nop
 800f856:	e7fd      	b.n	800f854 <prvTaskExitError+0x2c>
	__asm volatile
 800f858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f85c:	b672      	cpsid	i
 800f85e:	f383 8811 	msr	BASEPRI, r3
 800f862:	f3bf 8f6f 	isb	sy
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	b662      	cpsie	i
 800f86c:	60bb      	str	r3, [r7, #8]
}
 800f86e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f870:	bf00      	nop
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d0fc      	beq.n	800f872 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f878:	bf00      	nop
 800f87a:	bf00      	nop
 800f87c:	3714      	adds	r7, #20
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop
 800f888:	20000020 	.word	0x20000020
 800f88c:	00000000 	.word	0x00000000

0800f890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f890:	4b07      	ldr	r3, [pc, #28]	@ (800f8b0 <pxCurrentTCBConst2>)
 800f892:	6819      	ldr	r1, [r3, #0]
 800f894:	6808      	ldr	r0, [r1, #0]
 800f896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89a:	f380 8809 	msr	PSP, r0
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	f04f 0000 	mov.w	r0, #0
 800f8a6:	f380 8811 	msr	BASEPRI, r0
 800f8aa:	4770      	bx	lr
 800f8ac:	f3af 8000 	nop.w

0800f8b0 <pxCurrentTCBConst2>:
 800f8b0:	20007018 	.word	0x20007018
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f8b4:	bf00      	nop
 800f8b6:	bf00      	nop

0800f8b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f8b8:	4808      	ldr	r0, [pc, #32]	@ (800f8dc <prvPortStartFirstTask+0x24>)
 800f8ba:	6800      	ldr	r0, [r0, #0]
 800f8bc:	6800      	ldr	r0, [r0, #0]
 800f8be:	f380 8808 	msr	MSP, r0
 800f8c2:	f04f 0000 	mov.w	r0, #0
 800f8c6:	f380 8814 	msr	CONTROL, r0
 800f8ca:	b662      	cpsie	i
 800f8cc:	b661      	cpsie	f
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	f3bf 8f6f 	isb	sy
 800f8d6:	df00      	svc	0
 800f8d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f8da:	bf00      	nop
 800f8dc:	e000ed08 	.word	0xe000ed08

0800f8e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f8e6:	4b37      	ldr	r3, [pc, #220]	@ (800f9c4 <xPortStartScheduler+0xe4>)
 800f8e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	22ff      	movs	r2, #255	@ 0xff
 800f8f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f900:	78fb      	ldrb	r3, [r7, #3]
 800f902:	b2db      	uxtb	r3, r3
 800f904:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f908:	b2da      	uxtb	r2, r3
 800f90a:	4b2f      	ldr	r3, [pc, #188]	@ (800f9c8 <xPortStartScheduler+0xe8>)
 800f90c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f90e:	4b2f      	ldr	r3, [pc, #188]	@ (800f9cc <xPortStartScheduler+0xec>)
 800f910:	2207      	movs	r2, #7
 800f912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f914:	e009      	b.n	800f92a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f916:	4b2d      	ldr	r3, [pc, #180]	@ (800f9cc <xPortStartScheduler+0xec>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	3b01      	subs	r3, #1
 800f91c:	4a2b      	ldr	r2, [pc, #172]	@ (800f9cc <xPortStartScheduler+0xec>)
 800f91e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f920:	78fb      	ldrb	r3, [r7, #3]
 800f922:	b2db      	uxtb	r3, r3
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	b2db      	uxtb	r3, r3
 800f928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f92a:	78fb      	ldrb	r3, [r7, #3]
 800f92c:	b2db      	uxtb	r3, r3
 800f92e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f932:	2b80      	cmp	r3, #128	@ 0x80
 800f934:	d0ef      	beq.n	800f916 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f936:	4b25      	ldr	r3, [pc, #148]	@ (800f9cc <xPortStartScheduler+0xec>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f1c3 0307 	rsb	r3, r3, #7
 800f93e:	2b04      	cmp	r3, #4
 800f940:	d00d      	beq.n	800f95e <xPortStartScheduler+0x7e>
	__asm volatile
 800f942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f946:	b672      	cpsid	i
 800f948:	f383 8811 	msr	BASEPRI, r3
 800f94c:	f3bf 8f6f 	isb	sy
 800f950:	f3bf 8f4f 	dsb	sy
 800f954:	b662      	cpsie	i
 800f956:	60bb      	str	r3, [r7, #8]
}
 800f958:	bf00      	nop
 800f95a:	bf00      	nop
 800f95c:	e7fd      	b.n	800f95a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f95e:	4b1b      	ldr	r3, [pc, #108]	@ (800f9cc <xPortStartScheduler+0xec>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	021b      	lsls	r3, r3, #8
 800f964:	4a19      	ldr	r2, [pc, #100]	@ (800f9cc <xPortStartScheduler+0xec>)
 800f966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f968:	4b18      	ldr	r3, [pc, #96]	@ (800f9cc <xPortStartScheduler+0xec>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f970:	4a16      	ldr	r2, [pc, #88]	@ (800f9cc <xPortStartScheduler+0xec>)
 800f972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	b2da      	uxtb	r2, r3
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f97c:	4b14      	ldr	r3, [pc, #80]	@ (800f9d0 <xPortStartScheduler+0xf0>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4a13      	ldr	r2, [pc, #76]	@ (800f9d0 <xPortStartScheduler+0xf0>)
 800f982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f988:	4b11      	ldr	r3, [pc, #68]	@ (800f9d0 <xPortStartScheduler+0xf0>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	4a10      	ldr	r2, [pc, #64]	@ (800f9d0 <xPortStartScheduler+0xf0>)
 800f98e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f994:	f000 f8dc 	bl	800fb50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f998:	4b0e      	ldr	r3, [pc, #56]	@ (800f9d4 <xPortStartScheduler+0xf4>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f99e:	f000 f8fb 	bl	800fb98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f9d8 <xPortStartScheduler+0xf8>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4a0c      	ldr	r2, [pc, #48]	@ (800f9d8 <xPortStartScheduler+0xf8>)
 800f9a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f9ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f9ae:	f7ff ff83 	bl	800f8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f9b2:	f7fe fe75 	bl	800e6a0 <vTaskSwitchContext>
	prvTaskExitError();
 800f9b6:	f7ff ff37 	bl	800f828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f9ba:	2300      	movs	r3, #0
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	e000e400 	.word	0xe000e400
 800f9c8:	2000762c 	.word	0x2000762c
 800f9cc:	20007630 	.word	0x20007630
 800f9d0:	e000ed20 	.word	0xe000ed20
 800f9d4:	20000020 	.word	0x20000020
 800f9d8:	e000ef34 	.word	0xe000ef34

0800f9dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
	__asm volatile
 800f9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e6:	b672      	cpsid	i
 800f9e8:	f383 8811 	msr	BASEPRI, r3
 800f9ec:	f3bf 8f6f 	isb	sy
 800f9f0:	f3bf 8f4f 	dsb	sy
 800f9f4:	b662      	cpsie	i
 800f9f6:	607b      	str	r3, [r7, #4]
}
 800f9f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f9fa:	4b11      	ldr	r3, [pc, #68]	@ (800fa40 <vPortEnterCritical+0x64>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	4a0f      	ldr	r2, [pc, #60]	@ (800fa40 <vPortEnterCritical+0x64>)
 800fa02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fa04:	4b0e      	ldr	r3, [pc, #56]	@ (800fa40 <vPortEnterCritical+0x64>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d112      	bne.n	800fa32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa0c:	4b0d      	ldr	r3, [pc, #52]	@ (800fa44 <vPortEnterCritical+0x68>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	b2db      	uxtb	r3, r3
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00d      	beq.n	800fa32 <vPortEnterCritical+0x56>
	__asm volatile
 800fa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa1a:	b672      	cpsid	i
 800fa1c:	f383 8811 	msr	BASEPRI, r3
 800fa20:	f3bf 8f6f 	isb	sy
 800fa24:	f3bf 8f4f 	dsb	sy
 800fa28:	b662      	cpsie	i
 800fa2a:	603b      	str	r3, [r7, #0]
}
 800fa2c:	bf00      	nop
 800fa2e:	bf00      	nop
 800fa30:	e7fd      	b.n	800fa2e <vPortEnterCritical+0x52>
	}
}
 800fa32:	bf00      	nop
 800fa34:	370c      	adds	r7, #12
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	20000020 	.word	0x20000020
 800fa44:	e000ed04 	.word	0xe000ed04

0800fa48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa4e:	4b13      	ldr	r3, [pc, #76]	@ (800fa9c <vPortExitCritical+0x54>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d10d      	bne.n	800fa72 <vPortExitCritical+0x2a>
	__asm volatile
 800fa56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa5a:	b672      	cpsid	i
 800fa5c:	f383 8811 	msr	BASEPRI, r3
 800fa60:	f3bf 8f6f 	isb	sy
 800fa64:	f3bf 8f4f 	dsb	sy
 800fa68:	b662      	cpsie	i
 800fa6a:	607b      	str	r3, [r7, #4]
}
 800fa6c:	bf00      	nop
 800fa6e:	bf00      	nop
 800fa70:	e7fd      	b.n	800fa6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800fa72:	4b0a      	ldr	r3, [pc, #40]	@ (800fa9c <vPortExitCritical+0x54>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	3b01      	subs	r3, #1
 800fa78:	4a08      	ldr	r2, [pc, #32]	@ (800fa9c <vPortExitCritical+0x54>)
 800fa7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa7c:	4b07      	ldr	r3, [pc, #28]	@ (800fa9c <vPortExitCritical+0x54>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d105      	bne.n	800fa90 <vPortExitCritical+0x48>
 800fa84:	2300      	movs	r3, #0
 800fa86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	f383 8811 	msr	BASEPRI, r3
}
 800fa8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa90:	bf00      	nop
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr
 800fa9c:	20000020 	.word	0x20000020

0800faa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800faa0:	f3ef 8009 	mrs	r0, PSP
 800faa4:	f3bf 8f6f 	isb	sy
 800faa8:	4b15      	ldr	r3, [pc, #84]	@ (800fb00 <pxCurrentTCBConst>)
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	f01e 0f10 	tst.w	lr, #16
 800fab0:	bf08      	it	eq
 800fab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faba:	6010      	str	r0, [r2, #0]
 800fabc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fac4:	b672      	cpsid	i
 800fac6:	f380 8811 	msr	BASEPRI, r0
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	f3bf 8f6f 	isb	sy
 800fad2:	b662      	cpsie	i
 800fad4:	f7fe fde4 	bl	800e6a0 <vTaskSwitchContext>
 800fad8:	f04f 0000 	mov.w	r0, #0
 800fadc:	f380 8811 	msr	BASEPRI, r0
 800fae0:	bc09      	pop	{r0, r3}
 800fae2:	6819      	ldr	r1, [r3, #0]
 800fae4:	6808      	ldr	r0, [r1, #0]
 800fae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faea:	f01e 0f10 	tst.w	lr, #16
 800faee:	bf08      	it	eq
 800faf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800faf4:	f380 8809 	msr	PSP, r0
 800faf8:	f3bf 8f6f 	isb	sy
 800fafc:	4770      	bx	lr
 800fafe:	bf00      	nop

0800fb00 <pxCurrentTCBConst>:
 800fb00:	20007018 	.word	0x20007018
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fb04:	bf00      	nop
 800fb06:	bf00      	nop

0800fb08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb12:	b672      	cpsid	i
 800fb14:	f383 8811 	msr	BASEPRI, r3
 800fb18:	f3bf 8f6f 	isb	sy
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	b662      	cpsie	i
 800fb22:	607b      	str	r3, [r7, #4]
}
 800fb24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb26:	f7fe fcff 	bl	800e528 <xTaskIncrementTick>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d003      	beq.n	800fb38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb30:	4b06      	ldr	r3, [pc, #24]	@ (800fb4c <SysTick_Handler+0x44>)
 800fb32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb36:	601a      	str	r2, [r3, #0]
 800fb38:	2300      	movs	r3, #0
 800fb3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	f383 8811 	msr	BASEPRI, r3
}
 800fb42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb44:	bf00      	nop
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	e000ed04 	.word	0xe000ed04

0800fb50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb50:	b480      	push	{r7}
 800fb52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb54:	4b0b      	ldr	r3, [pc, #44]	@ (800fb84 <vPortSetupTimerInterrupt+0x34>)
 800fb56:	2200      	movs	r2, #0
 800fb58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800fb88 <vPortSetupTimerInterrupt+0x38>)
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb60:	4b0a      	ldr	r3, [pc, #40]	@ (800fb8c <vPortSetupTimerInterrupt+0x3c>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a0a      	ldr	r2, [pc, #40]	@ (800fb90 <vPortSetupTimerInterrupt+0x40>)
 800fb66:	fba2 2303 	umull	r2, r3, r2, r3
 800fb6a:	099b      	lsrs	r3, r3, #6
 800fb6c:	4a09      	ldr	r2, [pc, #36]	@ (800fb94 <vPortSetupTimerInterrupt+0x44>)
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fb72:	4b04      	ldr	r3, [pc, #16]	@ (800fb84 <vPortSetupTimerInterrupt+0x34>)
 800fb74:	2207      	movs	r2, #7
 800fb76:	601a      	str	r2, [r3, #0]
}
 800fb78:	bf00      	nop
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	e000e010 	.word	0xe000e010
 800fb88:	e000e018 	.word	0xe000e018
 800fb8c:	20000000 	.word	0x20000000
 800fb90:	10624dd3 	.word	0x10624dd3
 800fb94:	e000e014 	.word	0xe000e014

0800fb98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fba8 <vPortEnableVFP+0x10>
 800fb9c:	6801      	ldr	r1, [r0, #0]
 800fb9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fba2:	6001      	str	r1, [r0, #0]
 800fba4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fba6:	bf00      	nop
 800fba8:	e000ed88 	.word	0xe000ed88

0800fbac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fbac:	b480      	push	{r7}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fbb2:	f3ef 8305 	mrs	r3, IPSR
 800fbb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2b0f      	cmp	r3, #15
 800fbbc:	d917      	bls.n	800fbee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fbbe:	4a1a      	ldr	r2, [pc, #104]	@ (800fc28 <vPortValidateInterruptPriority+0x7c>)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	4413      	add	r3, r2
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fbc8:	4b18      	ldr	r3, [pc, #96]	@ (800fc2c <vPortValidateInterruptPriority+0x80>)
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	7afa      	ldrb	r2, [r7, #11]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d20d      	bcs.n	800fbee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800fbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbd6:	b672      	cpsid	i
 800fbd8:	f383 8811 	msr	BASEPRI, r3
 800fbdc:	f3bf 8f6f 	isb	sy
 800fbe0:	f3bf 8f4f 	dsb	sy
 800fbe4:	b662      	cpsie	i
 800fbe6:	607b      	str	r3, [r7, #4]
}
 800fbe8:	bf00      	nop
 800fbea:	bf00      	nop
 800fbec:	e7fd      	b.n	800fbea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fbee:	4b10      	ldr	r3, [pc, #64]	@ (800fc30 <vPortValidateInterruptPriority+0x84>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fbf6:	4b0f      	ldr	r3, [pc, #60]	@ (800fc34 <vPortValidateInterruptPriority+0x88>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d90d      	bls.n	800fc1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800fbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc02:	b672      	cpsid	i
 800fc04:	f383 8811 	msr	BASEPRI, r3
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	b662      	cpsie	i
 800fc12:	603b      	str	r3, [r7, #0]
}
 800fc14:	bf00      	nop
 800fc16:	bf00      	nop
 800fc18:	e7fd      	b.n	800fc16 <vPortValidateInterruptPriority+0x6a>
	}
 800fc1a:	bf00      	nop
 800fc1c:	3714      	adds	r7, #20
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	e000e3f0 	.word	0xe000e3f0
 800fc2c:	2000762c 	.word	0x2000762c
 800fc30:	e000ed0c 	.word	0xe000ed0c
 800fc34:	20007630 	.word	0x20007630

0800fc38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b08a      	sub	sp, #40	@ 0x28
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc40:	2300      	movs	r3, #0
 800fc42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc44:	f7fe fba0 	bl	800e388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc48:	4b5f      	ldr	r3, [pc, #380]	@ (800fdc8 <pvPortMalloc+0x190>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d101      	bne.n	800fc54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc50:	f000 f924 	bl	800fe9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc54:	4b5d      	ldr	r3, [pc, #372]	@ (800fdcc <pvPortMalloc+0x194>)
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f040 8094 	bne.w	800fd8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d020      	beq.n	800fcaa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800fc68:	2208      	movs	r2, #8
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f003 0307 	and.w	r3, r3, #7
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d017      	beq.n	800fcaa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f023 0307 	bic.w	r3, r3, #7
 800fc80:	3308      	adds	r3, #8
 800fc82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f003 0307 	and.w	r3, r3, #7
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00d      	beq.n	800fcaa <pvPortMalloc+0x72>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc92:	b672      	cpsid	i
 800fc94:	f383 8811 	msr	BASEPRI, r3
 800fc98:	f3bf 8f6f 	isb	sy
 800fc9c:	f3bf 8f4f 	dsb	sy
 800fca0:	b662      	cpsie	i
 800fca2:	617b      	str	r3, [r7, #20]
}
 800fca4:	bf00      	nop
 800fca6:	bf00      	nop
 800fca8:	e7fd      	b.n	800fca6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d06c      	beq.n	800fd8a <pvPortMalloc+0x152>
 800fcb0:	4b47      	ldr	r3, [pc, #284]	@ (800fdd0 <pvPortMalloc+0x198>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d867      	bhi.n	800fd8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fcba:	4b46      	ldr	r3, [pc, #280]	@ (800fdd4 <pvPortMalloc+0x19c>)
 800fcbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fcbe:	4b45      	ldr	r3, [pc, #276]	@ (800fdd4 <pvPortMalloc+0x19c>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcc4:	e004      	b.n	800fcd0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fcca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d903      	bls.n	800fce2 <pvPortMalloc+0xaa>
 800fcda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d1f1      	bne.n	800fcc6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fce2:	4b39      	ldr	r3, [pc, #228]	@ (800fdc8 <pvPortMalloc+0x190>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d04e      	beq.n	800fd8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fcec:	6a3b      	ldr	r3, [r7, #32]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2208      	movs	r2, #8
 800fcf2:	4413      	add	r3, r2
 800fcf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	6a3b      	ldr	r3, [r7, #32]
 800fcfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd00:	685a      	ldr	r2, [r3, #4]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	1ad2      	subs	r2, r2, r3
 800fd06:	2308      	movs	r3, #8
 800fd08:	005b      	lsls	r3, r3, #1
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d922      	bls.n	800fd54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4413      	add	r3, r2
 800fd14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd16:	69bb      	ldr	r3, [r7, #24]
 800fd18:	f003 0307 	and.w	r3, r3, #7
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d00d      	beq.n	800fd3c <pvPortMalloc+0x104>
	__asm volatile
 800fd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd24:	b672      	cpsid	i
 800fd26:	f383 8811 	msr	BASEPRI, r3
 800fd2a:	f3bf 8f6f 	isb	sy
 800fd2e:	f3bf 8f4f 	dsb	sy
 800fd32:	b662      	cpsie	i
 800fd34:	613b      	str	r3, [r7, #16]
}
 800fd36:	bf00      	nop
 800fd38:	bf00      	nop
 800fd3a:	e7fd      	b.n	800fd38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3e:	685a      	ldr	r2, [r3, #4]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	1ad2      	subs	r2, r2, r3
 800fd44:	69bb      	ldr	r3, [r7, #24]
 800fd46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd4e:	69b8      	ldr	r0, [r7, #24]
 800fd50:	f000 f906 	bl	800ff60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd54:	4b1e      	ldr	r3, [pc, #120]	@ (800fdd0 <pvPortMalloc+0x198>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	4a1c      	ldr	r2, [pc, #112]	@ (800fdd0 <pvPortMalloc+0x198>)
 800fd60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd62:	4b1b      	ldr	r3, [pc, #108]	@ (800fdd0 <pvPortMalloc+0x198>)
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	4b1c      	ldr	r3, [pc, #112]	@ (800fdd8 <pvPortMalloc+0x1a0>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d203      	bcs.n	800fd76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd6e:	4b18      	ldr	r3, [pc, #96]	@ (800fdd0 <pvPortMalloc+0x198>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a19      	ldr	r2, [pc, #100]	@ (800fdd8 <pvPortMalloc+0x1a0>)
 800fd74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd78:	685a      	ldr	r2, [r3, #4]
 800fd7a:	4b14      	ldr	r3, [pc, #80]	@ (800fdcc <pvPortMalloc+0x194>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	431a      	orrs	r2, r3
 800fd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd86:	2200      	movs	r2, #0
 800fd88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd8a:	f7fe fb0b 	bl	800e3a4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d101      	bne.n	800fd98 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800fd94:	f7f0 fdba 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	f003 0307 	and.w	r3, r3, #7
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00d      	beq.n	800fdbe <pvPortMalloc+0x186>
	__asm volatile
 800fda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda6:	b672      	cpsid	i
 800fda8:	f383 8811 	msr	BASEPRI, r3
 800fdac:	f3bf 8f6f 	isb	sy
 800fdb0:	f3bf 8f4f 	dsb	sy
 800fdb4:	b662      	cpsie	i
 800fdb6:	60fb      	str	r3, [r7, #12]
}
 800fdb8:	bf00      	nop
 800fdba:	bf00      	nop
 800fdbc:	e7fd      	b.n	800fdba <pvPortMalloc+0x182>
	return pvReturn;
 800fdbe:	69fb      	ldr	r3, [r7, #28]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3728      	adds	r7, #40	@ 0x28
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	2001f63c 	.word	0x2001f63c
 800fdcc:	2001f648 	.word	0x2001f648
 800fdd0:	2001f640 	.word	0x2001f640
 800fdd4:	2001f634 	.word	0x2001f634
 800fdd8:	2001f644 	.word	0x2001f644

0800fddc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b086      	sub	sp, #24
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d04e      	beq.n	800fe8c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fdee:	2308      	movs	r3, #8
 800fdf0:	425b      	negs	r3, r3
 800fdf2:	697a      	ldr	r2, [r7, #20]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	685a      	ldr	r2, [r3, #4]
 800fe00:	4b24      	ldr	r3, [pc, #144]	@ (800fe94 <vPortFree+0xb8>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4013      	ands	r3, r2
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d10d      	bne.n	800fe26 <vPortFree+0x4a>
	__asm volatile
 800fe0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe0e:	b672      	cpsid	i
 800fe10:	f383 8811 	msr	BASEPRI, r3
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	f3bf 8f4f 	dsb	sy
 800fe1c:	b662      	cpsie	i
 800fe1e:	60fb      	str	r3, [r7, #12]
}
 800fe20:	bf00      	nop
 800fe22:	bf00      	nop
 800fe24:	e7fd      	b.n	800fe22 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d00d      	beq.n	800fe4a <vPortFree+0x6e>
	__asm volatile
 800fe2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe32:	b672      	cpsid	i
 800fe34:	f383 8811 	msr	BASEPRI, r3
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	b662      	cpsie	i
 800fe42:	60bb      	str	r3, [r7, #8]
}
 800fe44:	bf00      	nop
 800fe46:	bf00      	nop
 800fe48:	e7fd      	b.n	800fe46 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	4b11      	ldr	r3, [pc, #68]	@ (800fe94 <vPortFree+0xb8>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4013      	ands	r3, r2
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d019      	beq.n	800fe8c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d115      	bne.n	800fe8c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	685a      	ldr	r2, [r3, #4]
 800fe64:	4b0b      	ldr	r3, [pc, #44]	@ (800fe94 <vPortFree+0xb8>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	43db      	mvns	r3, r3
 800fe6a:	401a      	ands	r2, r3
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe70:	f7fe fa8a 	bl	800e388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	685a      	ldr	r2, [r3, #4]
 800fe78:	4b07      	ldr	r3, [pc, #28]	@ (800fe98 <vPortFree+0xbc>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	4a06      	ldr	r2, [pc, #24]	@ (800fe98 <vPortFree+0xbc>)
 800fe80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe82:	6938      	ldr	r0, [r7, #16]
 800fe84:	f000 f86c 	bl	800ff60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fe88:	f7fe fa8c 	bl	800e3a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe8c:	bf00      	nop
 800fe8e:	3718      	adds	r7, #24
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	2001f648 	.word	0x2001f648
 800fe98:	2001f640 	.word	0x2001f640

0800fe9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fea2:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 800fea6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fea8:	4b27      	ldr	r3, [pc, #156]	@ (800ff48 <prvHeapInit+0xac>)
 800feaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f003 0307 	and.w	r3, r3, #7
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00c      	beq.n	800fed0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	3307      	adds	r3, #7
 800feba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f023 0307 	bic.w	r3, r3, #7
 800fec2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fec4:	68ba      	ldr	r2, [r7, #8]
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	4a1f      	ldr	r2, [pc, #124]	@ (800ff48 <prvHeapInit+0xac>)
 800fecc:	4413      	add	r3, r2
 800fece:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fed4:	4a1d      	ldr	r2, [pc, #116]	@ (800ff4c <prvHeapInit+0xb0>)
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800feda:	4b1c      	ldr	r3, [pc, #112]	@ (800ff4c <prvHeapInit+0xb0>)
 800fedc:	2200      	movs	r2, #0
 800fede:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	68ba      	ldr	r2, [r7, #8]
 800fee4:	4413      	add	r3, r2
 800fee6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fee8:	2208      	movs	r2, #8
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	1a9b      	subs	r3, r3, r2
 800feee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f023 0307 	bic.w	r3, r3, #7
 800fef6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	4a15      	ldr	r2, [pc, #84]	@ (800ff50 <prvHeapInit+0xb4>)
 800fefc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fefe:	4b14      	ldr	r3, [pc, #80]	@ (800ff50 <prvHeapInit+0xb4>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2200      	movs	r2, #0
 800ff04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff06:	4b12      	ldr	r3, [pc, #72]	@ (800ff50 <prvHeapInit+0xb4>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	1ad2      	subs	r2, r2, r3
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ff50 <prvHeapInit+0xb4>)
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	4a0a      	ldr	r2, [pc, #40]	@ (800ff54 <prvHeapInit+0xb8>)
 800ff2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	685b      	ldr	r3, [r3, #4]
 800ff30:	4a09      	ldr	r2, [pc, #36]	@ (800ff58 <prvHeapInit+0xbc>)
 800ff32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff34:	4b09      	ldr	r3, [pc, #36]	@ (800ff5c <prvHeapInit+0xc0>)
 800ff36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ff3a:	601a      	str	r2, [r3, #0]
}
 800ff3c:	bf00      	nop
 800ff3e:	3714      	adds	r7, #20
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr
 800ff48:	20007634 	.word	0x20007634
 800ff4c:	2001f634 	.word	0x2001f634
 800ff50:	2001f63c 	.word	0x2001f63c
 800ff54:	2001f644 	.word	0x2001f644
 800ff58:	2001f640 	.word	0x2001f640
 800ff5c:	2001f648 	.word	0x2001f648

0800ff60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff60:	b480      	push	{r7}
 800ff62:	b085      	sub	sp, #20
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff68:	4b28      	ldr	r3, [pc, #160]	@ (801000c <prvInsertBlockIntoFreeList+0xac>)
 800ff6a:	60fb      	str	r3, [r7, #12]
 800ff6c:	e002      	b.n	800ff74 <prvInsertBlockIntoFreeList+0x14>
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	60fb      	str	r3, [r7, #12]
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d8f7      	bhi.n	800ff6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	4413      	add	r3, r2
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d108      	bne.n	800ffa2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	685a      	ldr	r2, [r3, #4]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	441a      	add	r2, r3
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	68ba      	ldr	r2, [r7, #8]
 800ffac:	441a      	add	r2, r3
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d118      	bne.n	800ffe8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	4b15      	ldr	r3, [pc, #84]	@ (8010010 <prvInsertBlockIntoFreeList+0xb0>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d00d      	beq.n	800ffde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	685a      	ldr	r2, [r3, #4]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	441a      	add	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	681a      	ldr	r2, [r3, #0]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	601a      	str	r2, [r3, #0]
 800ffdc:	e008      	b.n	800fff0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ffde:	4b0c      	ldr	r3, [pc, #48]	@ (8010010 <prvInsertBlockIntoFreeList+0xb0>)
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	e003      	b.n	800fff0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fff0:	68fa      	ldr	r2, [r7, #12]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d002      	beq.n	800fffe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fffe:	bf00      	nop
 8010000:	3714      	adds	r7, #20
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	2001f634 	.word	0x2001f634
 8010010:	2001f63c 	.word	0x2001f63c

08010014 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	22fa      	movs	r2, #250	@ 0xfa
 8010022:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	330c      	adds	r3, #12
 801002a:	461a      	mov	r2, r3
 801002c:	6839      	ldr	r1, [r7, #0]
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f002 f978 	bl	8012324 <tcpip_send_msg_wait_sem>
 8010034:	4603      	mov	r3, r0
 8010036:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d103      	bne.n	8010048 <netconn_apimsg+0x34>
    return apimsg->err;
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010046:	e001      	b.n	801004c <netconn_apimsg+0x38>
  }
  return err;
 8010048:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801004c:	4618      	mov	r0, r3
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b08c      	sub	sp, #48	@ 0x30
 8010058:	af00      	add	r7, sp, #0
 801005a:	4603      	mov	r3, r0
 801005c:	603a      	str	r2, [r7, #0]
 801005e:	71fb      	strb	r3, [r7, #7]
 8010060:	460b      	mov	r3, r1
 8010062:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010064:	79fb      	ldrb	r3, [r7, #7]
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	4618      	mov	r0, r3
 801006a:	f000 ff61 	bl	8010f30 <netconn_alloc>
 801006e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8010070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010072:	2b00      	cmp	r3, #0
 8010074:	d054      	beq.n	8010120 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010076:	79bb      	ldrb	r3, [r7, #6]
 8010078:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801007a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801007c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801007e:	f107 0308 	add.w	r3, r7, #8
 8010082:	4619      	mov	r1, r3
 8010084:	4829      	ldr	r0, [pc, #164]	@ (801012c <netconn_new_with_proto_and_callback+0xd8>)
 8010086:	f7ff ffc5 	bl	8010014 <netconn_apimsg>
 801008a:	4603      	mov	r3, r0
 801008c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8010090:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010094:	2b00      	cmp	r3, #0
 8010096:	d043      	beq.n	8010120 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d005      	beq.n	80100ac <netconn_new_with_proto_and_callback+0x58>
 80100a0:	4b23      	ldr	r3, [pc, #140]	@ (8010130 <netconn_new_with_proto_and_callback+0xdc>)
 80100a2:	22a3      	movs	r2, #163	@ 0xa3
 80100a4:	4923      	ldr	r1, [pc, #140]	@ (8010134 <netconn_new_with_proto_and_callback+0xe0>)
 80100a6:	4824      	ldr	r0, [pc, #144]	@ (8010138 <netconn_new_with_proto_and_callback+0xe4>)
 80100a8:	f00e fe70 	bl	801ed8c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80100ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ae:	3310      	adds	r3, #16
 80100b0:	4618      	mov	r0, r3
 80100b2:	f00d ff6d 	bl	801df90 <sys_mbox_valid>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d105      	bne.n	80100c8 <netconn_new_with_proto_and_callback+0x74>
 80100bc:	4b1c      	ldr	r3, [pc, #112]	@ (8010130 <netconn_new_with_proto_and_callback+0xdc>)
 80100be:	22a4      	movs	r2, #164	@ 0xa4
 80100c0:	491e      	ldr	r1, [pc, #120]	@ (801013c <netconn_new_with_proto_and_callback+0xe8>)
 80100c2:	481d      	ldr	r0, [pc, #116]	@ (8010138 <netconn_new_with_proto_and_callback+0xe4>)
 80100c4:	f00e fe62 	bl	801ed8c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80100c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ca:	3314      	adds	r3, #20
 80100cc:	4618      	mov	r0, r3
 80100ce:	f00d ff5f 	bl	801df90 <sys_mbox_valid>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d005      	beq.n	80100e4 <netconn_new_with_proto_and_callback+0x90>
 80100d8:	4b15      	ldr	r3, [pc, #84]	@ (8010130 <netconn_new_with_proto_and_callback+0xdc>)
 80100da:	22a6      	movs	r2, #166	@ 0xa6
 80100dc:	4918      	ldr	r1, [pc, #96]	@ (8010140 <netconn_new_with_proto_and_callback+0xec>)
 80100de:	4816      	ldr	r0, [pc, #88]	@ (8010138 <netconn_new_with_proto_and_callback+0xe4>)
 80100e0:	f00e fe54 	bl	801ed8c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80100e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100e6:	330c      	adds	r3, #12
 80100e8:	4618      	mov	r0, r3
 80100ea:	f00d ffdf 	bl	801e0ac <sys_sem_valid>
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d105      	bne.n	8010100 <netconn_new_with_proto_and_callback+0xac>
 80100f4:	4b0e      	ldr	r3, [pc, #56]	@ (8010130 <netconn_new_with_proto_and_callback+0xdc>)
 80100f6:	22a9      	movs	r2, #169	@ 0xa9
 80100f8:	4912      	ldr	r1, [pc, #72]	@ (8010144 <netconn_new_with_proto_and_callback+0xf0>)
 80100fa:	480f      	ldr	r0, [pc, #60]	@ (8010138 <netconn_new_with_proto_and_callback+0xe4>)
 80100fc:	f00e fe46 	bl	801ed8c <iprintf>
      sys_sem_free(&conn->op_completed);
 8010100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010102:	330c      	adds	r3, #12
 8010104:	4618      	mov	r0, r3
 8010106:	f00d ffc4 	bl	801e092 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801010a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801010c:	3310      	adds	r3, #16
 801010e:	4618      	mov	r0, r3
 8010110:	f00d feca 	bl	801dea8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010114:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010116:	2007      	movs	r0, #7
 8010118:	f002 feae 	bl	8012e78 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801011c:	2300      	movs	r3, #0
 801011e:	e000      	b.n	8010122 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010122:	4618      	mov	r0, r3
 8010124:	3730      	adds	r7, #48	@ 0x30
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	08010f05 	.word	0x08010f05
 8010130:	0801ff0c 	.word	0x0801ff0c
 8010134:	0801ff40 	.word	0x0801ff40
 8010138:	0801ff64 	.word	0x0801ff64
 801013c:	0801ff8c 	.word	0x0801ff8c
 8010140:	0801ffa4 	.word	0x0801ffa4
 8010144:	0801ffc8 	.word	0x0801ffc8

08010148 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b08c      	sub	sp, #48	@ 0x30
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d101      	bne.n	801015a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8010156:	2300      	movs	r3, #0
 8010158:	e014      	b.n	8010184 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801015e:	2329      	movs	r3, #41	@ 0x29
 8010160:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010162:	f107 030c 	add.w	r3, r7, #12
 8010166:	4619      	mov	r1, r3
 8010168:	4808      	ldr	r0, [pc, #32]	@ (801018c <netconn_prepare_delete+0x44>)
 801016a:	f7ff ff53 	bl	8010014 <netconn_apimsg>
 801016e:	4603      	mov	r3, r0
 8010170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010174:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010178:	2b00      	cmp	r3, #0
 801017a:	d002      	beq.n	8010182 <netconn_prepare_delete+0x3a>
    return err;
 801017c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010180:	e000      	b.n	8010184 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010182:	2300      	movs	r3, #0
}
 8010184:	4618      	mov	r0, r3
 8010186:	3730      	adds	r7, #48	@ 0x30
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	08011471 	.word	0x08011471

08010190 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d101      	bne.n	80101a2 <netconn_delete+0x12>
    return ERR_OK;
 801019e:	2300      	movs	r3, #0
 80101a0:	e00d      	b.n	80101be <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f7ff ffd0 	bl	8010148 <netconn_prepare_delete>
 80101a8:	4603      	mov	r3, r0
 80101aa:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80101ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d102      	bne.n	80101ba <netconn_delete+0x2a>
    netconn_free(conn);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f000 ff29 	bl	801100c <netconn_free>
  }
  return err;
 80101ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3710      	adds	r7, #16
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
	...

080101c8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b08e      	sub	sp, #56	@ 0x38
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	4613      	mov	r3, r2
 80101d4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d109      	bne.n	80101f0 <netconn_bind+0x28>
 80101dc:	4b11      	ldr	r3, [pc, #68]	@ (8010224 <netconn_bind+0x5c>)
 80101de:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80101e2:	4911      	ldr	r1, [pc, #68]	@ (8010228 <netconn_bind+0x60>)
 80101e4:	4811      	ldr	r0, [pc, #68]	@ (801022c <netconn_bind+0x64>)
 80101e6:	f00e fdd1 	bl	801ed8c <iprintf>
 80101ea:	f06f 030f 	mvn.w	r3, #15
 80101ee:	e015      	b.n	801021c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d101      	bne.n	80101fa <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80101f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010230 <netconn_bind+0x68>)
 80101f8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010202:	88fb      	ldrh	r3, [r7, #6]
 8010204:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8010206:	f107 0314 	add.w	r3, r7, #20
 801020a:	4619      	mov	r1, r3
 801020c:	4809      	ldr	r0, [pc, #36]	@ (8010234 <netconn_bind+0x6c>)
 801020e:	f7ff ff01 	bl	8010014 <netconn_apimsg>
 8010212:	4603      	mov	r3, r0
 8010214:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8010218:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801021c:	4618      	mov	r0, r3
 801021e:	3738      	adds	r7, #56	@ 0x38
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	0801ff0c 	.word	0x0801ff0c
 8010228:	08020044 	.word	0x08020044
 801022c:	0801ff64 	.word	0x0801ff64
 8010230:	08024334 	.word	0x08024334
 8010234:	08011639 	.word	0x08011639

08010238 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b08e      	sub	sp, #56	@ 0x38
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	4613      	mov	r3, r2
 8010244:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d109      	bne.n	8010260 <netconn_connect+0x28>
 801024c:	4b11      	ldr	r3, [pc, #68]	@ (8010294 <netconn_connect+0x5c>)
 801024e:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8010252:	4911      	ldr	r1, [pc, #68]	@ (8010298 <netconn_connect+0x60>)
 8010254:	4811      	ldr	r0, [pc, #68]	@ (801029c <netconn_connect+0x64>)
 8010256:	f00e fd99 	bl	801ed8c <iprintf>
 801025a:	f06f 030f 	mvn.w	r3, #15
 801025e:	e015      	b.n	801028c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d101      	bne.n	801026a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8010266:	4b0e      	ldr	r3, [pc, #56]	@ (80102a0 <netconn_connect+0x68>)
 8010268:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010272:	88fb      	ldrh	r3, [r7, #6]
 8010274:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8010276:	f107 0314 	add.w	r3, r7, #20
 801027a:	4619      	mov	r1, r3
 801027c:	4809      	ldr	r0, [pc, #36]	@ (80102a4 <netconn_connect+0x6c>)
 801027e:	f7ff fec9 	bl	8010014 <netconn_apimsg>
 8010282:	4603      	mov	r3, r0
 8010284:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8010288:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801028c:	4618      	mov	r0, r3
 801028e:	3738      	adds	r7, #56	@ 0x38
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	0801ff0c 	.word	0x0801ff0c
 8010298:	08020080 	.word	0x08020080
 801029c:	0801ff64 	.word	0x0801ff64
 80102a0:	08024334 	.word	0x08024334
 80102a4:	080117cd 	.word	0x080117cd

080102a8 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b08c      	sub	sp, #48	@ 0x30
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d109      	bne.n	80102ca <netconn_disconnect+0x22>
 80102b6:	4b0d      	ldr	r3, [pc, #52]	@ (80102ec <netconn_disconnect+0x44>)
 80102b8:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80102bc:	490c      	ldr	r1, [pc, #48]	@ (80102f0 <netconn_disconnect+0x48>)
 80102be:	480d      	ldr	r0, [pc, #52]	@ (80102f4 <netconn_disconnect+0x4c>)
 80102c0:	f00e fd64 	bl	801ed8c <iprintf>
 80102c4:	f06f 030f 	mvn.w	r3, #15
 80102c8:	e00c      	b.n	80102e4 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 80102ce:	f107 030c 	add.w	r3, r7, #12
 80102d2:	4619      	mov	r1, r3
 80102d4:	4808      	ldr	r0, [pc, #32]	@ (80102f8 <netconn_disconnect+0x50>)
 80102d6:	f7ff fe9d 	bl	8010014 <netconn_apimsg>
 80102da:	4603      	mov	r3, r0
 80102dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80102e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3730      	adds	r7, #48	@ 0x30
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	0801ff0c 	.word	0x0801ff0c
 80102f0:	080200a0 	.word	0x080200a0
 80102f4:	0801ff64 	.word	0x0801ff64
 80102f8:	08011949 	.word	0x08011949

080102fc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b088      	sub	sp, #32
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	4613      	mov	r3, r2
 8010308:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801030a:	2300      	movs	r3, #0
 801030c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d109      	bne.n	8010328 <netconn_recv_data+0x2c>
 8010314:	4b58      	ldr	r3, [pc, #352]	@ (8010478 <netconn_recv_data+0x17c>)
 8010316:	f44f 7212 	mov.w	r2, #584	@ 0x248
 801031a:	4958      	ldr	r1, [pc, #352]	@ (801047c <netconn_recv_data+0x180>)
 801031c:	4858      	ldr	r0, [pc, #352]	@ (8010480 <netconn_recv_data+0x184>)
 801031e:	f00e fd35 	bl	801ed8c <iprintf>
 8010322:	f06f 030f 	mvn.w	r3, #15
 8010326:	e0a2      	b.n	801046e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2200      	movs	r2, #0
 801032c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d109      	bne.n	8010348 <netconn_recv_data+0x4c>
 8010334:	4b50      	ldr	r3, [pc, #320]	@ (8010478 <netconn_recv_data+0x17c>)
 8010336:	f240 224a 	movw	r2, #586	@ 0x24a
 801033a:	4952      	ldr	r1, [pc, #328]	@ (8010484 <netconn_recv_data+0x188>)
 801033c:	4850      	ldr	r0, [pc, #320]	@ (8010480 <netconn_recv_data+0x184>)
 801033e:	f00e fd25 	bl	801ed8c <iprintf>
 8010342:	f06f 030f 	mvn.w	r3, #15
 8010346:	e092      	b.n	801046e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	3310      	adds	r3, #16
 801034c:	4618      	mov	r0, r3
 801034e:	f00d fe1f 	bl	801df90 <sys_mbox_valid>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d10e      	bne.n	8010376 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8010358:	68f8      	ldr	r0, [r7, #12]
 801035a:	f000 fa23 	bl	80107a4 <netconn_err>
 801035e:	4603      	mov	r3, r0
 8010360:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8010362:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d002      	beq.n	8010370 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801036a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801036e:	e07e      	b.n	801046e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8010370:	f06f 030a 	mvn.w	r3, #10
 8010374:	e07b      	b.n	801046e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	7f1b      	ldrb	r3, [r3, #28]
 801037a:	f003 0302 	and.w	r3, r3, #2
 801037e:	2b00      	cmp	r3, #0
 8010380:	d10f      	bne.n	80103a2 <netconn_recv_data+0xa6>
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	f003 0304 	and.w	r3, r3, #4
 8010388:	2b00      	cmp	r3, #0
 801038a:	d10a      	bne.n	80103a2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	7f1b      	ldrb	r3, [r3, #28]
 8010390:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010394:	2b00      	cmp	r3, #0
 8010396:	d104      	bne.n	80103a2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d023      	beq.n	80103ea <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	3310      	adds	r3, #16
 80103a6:	f107 0218 	add.w	r2, r7, #24
 80103aa:	4611      	mov	r1, r2
 80103ac:	4618      	mov	r0, r3
 80103ae:	f00d fdd8 	bl	801df62 <sys_arch_mbox_tryfetch>
 80103b2:	4603      	mov	r3, r0
 80103b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80103b8:	d11f      	bne.n	80103fa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80103ba:	68f8      	ldr	r0, [r7, #12]
 80103bc:	f000 f9f2 	bl	80107a4 <netconn_err>
 80103c0:	4603      	mov	r3, r0
 80103c2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80103c4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d002      	beq.n	80103d2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80103cc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80103d0:	e04d      	b.n	801046e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	7f1b      	ldrb	r3, [r3, #28]
 80103d6:	f003 0301 	and.w	r3, r3, #1
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d002      	beq.n	80103e4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80103de:	f06f 030a 	mvn.w	r3, #10
 80103e2:	e044      	b.n	801046e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80103e4:	f06f 0306 	mvn.w	r3, #6
 80103e8:	e041      	b.n	801046e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	3310      	adds	r3, #16
 80103ee:	f107 0118 	add.w	r1, r7, #24
 80103f2:	2200      	movs	r2, #0
 80103f4:	4618      	mov	r0, r3
 80103f6:	f00d fd83 	bl	801df00 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010402:	2b10      	cmp	r3, #16
 8010404:	d117      	bne.n	8010436 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	f107 0217 	add.w	r2, r7, #23
 801040c:	4611      	mov	r1, r2
 801040e:	4618      	mov	r0, r3
 8010410:	f000 fa1a 	bl	8010848 <lwip_netconn_is_err_msg>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d009      	beq.n	801042e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 801041a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801041e:	f113 0f0f 	cmn.w	r3, #15
 8010422:	d101      	bne.n	8010428 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8010424:	2300      	movs	r3, #0
 8010426:	e022      	b.n	801046e <netconn_recv_data+0x172>
      }
      return err;
 8010428:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801042c:	e01f      	b.n	801046e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 801042e:	69bb      	ldr	r3, [r7, #24]
 8010430:	891b      	ldrh	r3, [r3, #8]
 8010432:	83fb      	strh	r3, [r7, #30]
 8010434:	e00d      	b.n	8010452 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d106      	bne.n	801044a <netconn_recv_data+0x14e>
 801043c:	4b0e      	ldr	r3, [pc, #56]	@ (8010478 <netconn_recv_data+0x17c>)
 801043e:	f240 2291 	movw	r2, #657	@ 0x291
 8010442:	4911      	ldr	r1, [pc, #68]	@ (8010488 <netconn_recv_data+0x18c>)
 8010444:	480e      	ldr	r0, [pc, #56]	@ (8010480 <netconn_recv_data+0x184>)
 8010446:	f00e fca1 	bl	801ed8c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	891b      	ldrh	r3, [r3, #8]
 8010450:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010456:	2b00      	cmp	r3, #0
 8010458:	d005      	beq.n	8010466 <netconn_recv_data+0x16a>
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801045e:	8bfa      	ldrh	r2, [r7, #30]
 8010460:	2101      	movs	r1, #1
 8010462:	68f8      	ldr	r0, [r7, #12]
 8010464:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8010466:	69ba      	ldr	r2, [r7, #24]
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801046c:	2300      	movs	r3, #0
}
 801046e:	4618      	mov	r0, r3
 8010470:	3720      	adds	r7, #32
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	0801ff0c 	.word	0x0801ff0c
 801047c:	08020124 	.word	0x08020124
 8010480:	0801ff64 	.word	0x0801ff64
 8010484:	08020144 	.word	0x08020144
 8010488:	08020160 	.word	0x08020160

0801048c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	60b9      	str	r1, [r7, #8]
 8010496:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d005      	beq.n	80104aa <netconn_tcp_recvd_msg+0x1e>
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80104a6:	2b10      	cmp	r3, #16
 80104a8:	d009      	beq.n	80104be <netconn_tcp_recvd_msg+0x32>
 80104aa:	4b0c      	ldr	r3, [pc, #48]	@ (80104dc <netconn_tcp_recvd_msg+0x50>)
 80104ac:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80104b0:	490b      	ldr	r1, [pc, #44]	@ (80104e0 <netconn_tcp_recvd_msg+0x54>)
 80104b2:	480c      	ldr	r0, [pc, #48]	@ (80104e4 <netconn_tcp_recvd_msg+0x58>)
 80104b4:	f00e fc6a 	bl	801ed8c <iprintf>
 80104b8:	f06f 030f 	mvn.w	r3, #15
 80104bc:	e00a      	b.n	80104d4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	68fa      	ldr	r2, [r7, #12]
 80104c2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	68ba      	ldr	r2, [r7, #8]
 80104c8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80104ca:	6879      	ldr	r1, [r7, #4]
 80104cc:	4806      	ldr	r0, [pc, #24]	@ (80104e8 <netconn_tcp_recvd_msg+0x5c>)
 80104ce:	f7ff fda1 	bl	8010014 <netconn_apimsg>
 80104d2:	4603      	mov	r3, r0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	0801ff0c 	.word	0x0801ff0c
 80104e0:	0802016c 	.word	0x0802016c
 80104e4:	0801ff64 	.word	0x0801ff64
 80104e8:	08011a1f 	.word	0x08011a1f

080104ec <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b090      	sub	sp, #64	@ 0x40
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	4613      	mov	r3, r2
 80104f8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	3310      	adds	r3, #16
 80104fe:	4618      	mov	r0, r3
 8010500:	f00d fd46 	bl	801df90 <sys_mbox_valid>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d102      	bne.n	8010510 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801050a:	f06f 030a 	mvn.w	r3, #10
 801050e:	e06d      	b.n	80105ec <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	7f1b      	ldrb	r3, [r3, #28]
 8010514:	b25b      	sxtb	r3, r3
 8010516:	2b00      	cmp	r3, #0
 8010518:	da07      	bge.n	801052a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	7f1b      	ldrb	r3, [r3, #28]
 801051e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010522:	b2da      	uxtb	r2, r3
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8010528:	e039      	b.n	801059e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 801052a:	79fb      	ldrb	r3, [r7, #7]
 801052c:	461a      	mov	r2, r3
 801052e:	68b9      	ldr	r1, [r7, #8]
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	f7ff fee3 	bl	80102fc <netconn_recv_data>
 8010536:	4603      	mov	r3, r0
 8010538:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 801053c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8010540:	2b00      	cmp	r3, #0
 8010542:	d002      	beq.n	801054a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8010544:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8010548:	e050      	b.n	80105ec <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8010550:	79fb      	ldrb	r3, [r7, #7]
 8010552:	f003 0308 	and.w	r3, r3, #8
 8010556:	2b00      	cmp	r3, #0
 8010558:	d10e      	bne.n	8010578 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 801055a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801055c:	2b00      	cmp	r3, #0
 801055e:	d002      	beq.n	8010566 <netconn_recv_data_tcp+0x7a>
 8010560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010562:	891b      	ldrh	r3, [r3, #8]
 8010564:	e000      	b.n	8010568 <netconn_recv_data_tcp+0x7c>
 8010566:	2301      	movs	r3, #1
 8010568:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 801056a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801056c:	f107 0214 	add.w	r2, r7, #20
 8010570:	4619      	mov	r1, r3
 8010572:	68f8      	ldr	r0, [r7, #12]
 8010574:	f7ff ff8a 	bl	801048c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8010578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801057a:	2b00      	cmp	r3, #0
 801057c:	d134      	bne.n	80105e8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801057e:	79fb      	ldrb	r3, [r7, #7]
 8010580:	f003 0310 	and.w	r3, r3, #16
 8010584:	2b00      	cmp	r3, #0
 8010586:	d009      	beq.n	801059c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	7f1b      	ldrb	r3, [r3, #28]
 801058c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010590:	b2da      	uxtb	r2, r3
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8010596:	f06f 0306 	mvn.w	r3, #6
 801059a:	e027      	b.n	80105ec <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 801059c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d005      	beq.n	80105b2 <netconn_recv_data_tcp+0xc6>
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105aa:	2200      	movs	r2, #0
 80105ac:	2101      	movs	r1, #1
 80105ae:	68f8      	ldr	r0, [r7, #12]
 80105b0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d10f      	bne.n	80105da <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80105ba:	68f8      	ldr	r0, [r7, #12]
 80105bc:	f000 f8f2 	bl	80107a4 <netconn_err>
 80105c0:	4603      	mov	r3, r0
 80105c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80105c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d002      	beq.n	80105d4 <netconn_recv_data_tcp+0xe8>
          return err;
 80105ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80105d2:	e00b      	b.n	80105ec <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80105d4:	f06f 030d 	mvn.w	r3, #13
 80105d8:	e008      	b.n	80105ec <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80105da:	2101      	movs	r1, #1
 80105dc:	68f8      	ldr	r0, [r7, #12]
 80105de:	f000 f8b1 	bl	8010744 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80105e2:	f06f 030e 	mvn.w	r3, #14
 80105e6:	e001      	b.n	80105ec <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80105e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3740      	adds	r7, #64	@ 0x40
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b086      	sub	sp, #24
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80105fe:	2300      	movs	r3, #0
 8010600:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d109      	bne.n	801061c <netconn_recv+0x28>
 8010608:	4b32      	ldr	r3, [pc, #200]	@ (80106d4 <netconn_recv+0xe0>)
 801060a:	f240 3263 	movw	r2, #867	@ 0x363
 801060e:	4932      	ldr	r1, [pc, #200]	@ (80106d8 <netconn_recv+0xe4>)
 8010610:	4832      	ldr	r0, [pc, #200]	@ (80106dc <netconn_recv+0xe8>)
 8010612:	f00e fbbb 	bl	801ed8c <iprintf>
 8010616:	f06f 030f 	mvn.w	r3, #15
 801061a:	e056      	b.n	80106ca <netconn_recv+0xd6>
  *new_buf = NULL;
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	2200      	movs	r2, #0
 8010620:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d109      	bne.n	801063c <netconn_recv+0x48>
 8010628:	4b2a      	ldr	r3, [pc, #168]	@ (80106d4 <netconn_recv+0xe0>)
 801062a:	f240 3265 	movw	r2, #869	@ 0x365
 801062e:	492c      	ldr	r1, [pc, #176]	@ (80106e0 <netconn_recv+0xec>)
 8010630:	482a      	ldr	r0, [pc, #168]	@ (80106dc <netconn_recv+0xe8>)
 8010632:	f00e fbab 	bl	801ed8c <iprintf>
 8010636:	f06f 030f 	mvn.w	r3, #15
 801063a:	e046      	b.n	80106ca <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010644:	2b10      	cmp	r3, #16
 8010646:	d13a      	bne.n	80106be <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8010648:	2300      	movs	r3, #0
 801064a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801064c:	2006      	movs	r0, #6
 801064e:	f002 fb9d 	bl	8012d8c <memp_malloc>
 8010652:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d102      	bne.n	8010660 <netconn_recv+0x6c>
      return ERR_MEM;
 801065a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801065e:	e034      	b.n	80106ca <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8010660:	f107 030c 	add.w	r3, r7, #12
 8010664:	2200      	movs	r2, #0
 8010666:	4619      	mov	r1, r3
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7ff ff3f 	bl	80104ec <netconn_recv_data_tcp>
 801066e:	4603      	mov	r3, r0
 8010670:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010672:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d006      	beq.n	8010688 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 801067a:	6979      	ldr	r1, [r7, #20]
 801067c:	2006      	movs	r0, #6
 801067e:	f002 fbfb 	bl	8012e78 <memp_free>
      return err;
 8010682:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010686:	e020      	b.n	80106ca <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d106      	bne.n	801069c <netconn_recv+0xa8>
 801068e:	4b11      	ldr	r3, [pc, #68]	@ (80106d4 <netconn_recv+0xe0>)
 8010690:	f240 3279 	movw	r2, #889	@ 0x379
 8010694:	4913      	ldr	r1, [pc, #76]	@ (80106e4 <netconn_recv+0xf0>)
 8010696:	4811      	ldr	r0, [pc, #68]	@ (80106dc <netconn_recv+0xe8>)
 8010698:	f00e fb78 	bl	801ed8c <iprintf>

    buf->p = p;
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80106a2:	68fa      	ldr	r2, [r7, #12]
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	2200      	movs	r2, #0
 80106ac:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	2200      	movs	r2, #0
 80106b2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80106ba:	2300      	movs	r3, #0
 80106bc:	e005      	b.n	80106ca <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80106be:	2200      	movs	r2, #0
 80106c0:	6839      	ldr	r1, [r7, #0]
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7ff fe1a 	bl	80102fc <netconn_recv_data>
 80106c8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3718      	adds	r7, #24
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	0801ff0c 	.word	0x0801ff0c
 80106d8:	08020124 	.word	0x08020124
 80106dc:	0801ff64 	.word	0x0801ff64
 80106e0:	08020144 	.word	0x08020144
 80106e4:	080201bc 	.word	0x080201bc

080106e8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b08c      	sub	sp, #48	@ 0x30
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d109      	bne.n	801070c <netconn_send+0x24>
 80106f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010734 <netconn_send+0x4c>)
 80106fa:	f240 32b2 	movw	r2, #946	@ 0x3b2
 80106fe:	490e      	ldr	r1, [pc, #56]	@ (8010738 <netconn_send+0x50>)
 8010700:	480e      	ldr	r0, [pc, #56]	@ (801073c <netconn_send+0x54>)
 8010702:	f00e fb43 	bl	801ed8c <iprintf>
 8010706:	f06f 030f 	mvn.w	r3, #15
 801070a:	e00e      	b.n	801072a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8010714:	f107 030c 	add.w	r3, r7, #12
 8010718:	4619      	mov	r1, r3
 801071a:	4809      	ldr	r0, [pc, #36]	@ (8010740 <netconn_send+0x58>)
 801071c:	f7ff fc7a 	bl	8010014 <netconn_apimsg>
 8010720:	4603      	mov	r3, r0
 8010722:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010726:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 801072a:	4618      	mov	r0, r3
 801072c:	3730      	adds	r7, #48	@ 0x30
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	0801ff0c 	.word	0x0801ff0c
 8010738:	080201c8 	.word	0x080201c8
 801073c:	0801ff64 	.word	0x0801ff64
 8010740:	08011985 	.word	0x08011985

08010744 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b08c      	sub	sp, #48	@ 0x30
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	460b      	mov	r3, r1
 801074e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d109      	bne.n	801076a <netconn_close_shutdown+0x26>
 8010756:	4b0f      	ldr	r3, [pc, #60]	@ (8010794 <netconn_close_shutdown+0x50>)
 8010758:	f240 4247 	movw	r2, #1095	@ 0x447
 801075c:	490e      	ldr	r1, [pc, #56]	@ (8010798 <netconn_close_shutdown+0x54>)
 801075e:	480f      	ldr	r0, [pc, #60]	@ (801079c <netconn_close_shutdown+0x58>)
 8010760:	f00e fb14 	bl	801ed8c <iprintf>
 8010764:	f06f 030f 	mvn.w	r3, #15
 8010768:	e010      	b.n	801078c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801076e:	78fb      	ldrb	r3, [r7, #3]
 8010770:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010772:	2329      	movs	r3, #41	@ 0x29
 8010774:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8010776:	f107 030c 	add.w	r3, r7, #12
 801077a:	4619      	mov	r1, r3
 801077c:	4808      	ldr	r0, [pc, #32]	@ (80107a0 <netconn_close_shutdown+0x5c>)
 801077e:	f7ff fc49 	bl	8010014 <netconn_apimsg>
 8010782:	4603      	mov	r3, r0
 8010784:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010788:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 801078c:	4618      	mov	r0, r3
 801078e:	3730      	adds	r7, #48	@ 0x30
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	0801ff0c 	.word	0x0801ff0c
 8010798:	08020248 	.word	0x08020248
 801079c:	0801ff64 	.word	0x0801ff64
 80107a0:	08011e21 	.word	0x08011e21

080107a4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d101      	bne.n	80107b6 <netconn_err+0x12>
    return ERR_OK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	e00d      	b.n	80107d2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80107b6:	f00d fcf5 	bl	801e1a4 <sys_arch_protect>
 80107ba:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	7a1b      	ldrb	r3, [r3, #8]
 80107c0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2200      	movs	r2, #0
 80107c6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80107c8:	68f8      	ldr	r0, [r7, #12]
 80107ca:	f00d fcf9 	bl	801e1c0 <sys_arch_unprotect>
  return err;
 80107ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3710      	adds	r7, #16
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
	...

080107dc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	4603      	mov	r3, r0
 80107e4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80107e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107ea:	f113 0f0d 	cmn.w	r3, #13
 80107ee:	d009      	beq.n	8010804 <lwip_netconn_err_to_msg+0x28>
 80107f0:	f113 0f0d 	cmn.w	r3, #13
 80107f4:	dc0c      	bgt.n	8010810 <lwip_netconn_err_to_msg+0x34>
 80107f6:	f113 0f0f 	cmn.w	r3, #15
 80107fa:	d007      	beq.n	801080c <lwip_netconn_err_to_msg+0x30>
 80107fc:	f113 0f0e 	cmn.w	r3, #14
 8010800:	d002      	beq.n	8010808 <lwip_netconn_err_to_msg+0x2c>
 8010802:	e005      	b.n	8010810 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8010804:	4b0a      	ldr	r3, [pc, #40]	@ (8010830 <lwip_netconn_err_to_msg+0x54>)
 8010806:	e00e      	b.n	8010826 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8010808:	4b0a      	ldr	r3, [pc, #40]	@ (8010834 <lwip_netconn_err_to_msg+0x58>)
 801080a:	e00c      	b.n	8010826 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 801080c:	4b0a      	ldr	r3, [pc, #40]	@ (8010838 <lwip_netconn_err_to_msg+0x5c>)
 801080e:	e00a      	b.n	8010826 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8010810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d005      	beq.n	8010824 <lwip_netconn_err_to_msg+0x48>
 8010818:	4b08      	ldr	r3, [pc, #32]	@ (801083c <lwip_netconn_err_to_msg+0x60>)
 801081a:	227d      	movs	r2, #125	@ 0x7d
 801081c:	4908      	ldr	r1, [pc, #32]	@ (8010840 <lwip_netconn_err_to_msg+0x64>)
 801081e:	4809      	ldr	r0, [pc, #36]	@ (8010844 <lwip_netconn_err_to_msg+0x68>)
 8010820:	f00e fab4 	bl	801ed8c <iprintf>
      return NULL;
 8010824:	2300      	movs	r3, #0
  }
}
 8010826:	4618      	mov	r0, r3
 8010828:	3708      	adds	r7, #8
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	080241ec 	.word	0x080241ec
 8010834:	080241ed 	.word	0x080241ed
 8010838:	080241ee 	.word	0x080241ee
 801083c:	08020264 	.word	0x08020264
 8010840:	08020298 	.word	0x08020298
 8010844:	080202a8 	.word	0x080202a8

08010848 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d105      	bne.n	8010864 <lwip_netconn_is_err_msg+0x1c>
 8010858:	4b12      	ldr	r3, [pc, #72]	@ (80108a4 <lwip_netconn_is_err_msg+0x5c>)
 801085a:	2285      	movs	r2, #133	@ 0x85
 801085c:	4912      	ldr	r1, [pc, #72]	@ (80108a8 <lwip_netconn_is_err_msg+0x60>)
 801085e:	4813      	ldr	r0, [pc, #76]	@ (80108ac <lwip_netconn_is_err_msg+0x64>)
 8010860:	f00e fa94 	bl	801ed8c <iprintf>

  if (msg == &netconn_aborted) {
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4a12      	ldr	r2, [pc, #72]	@ (80108b0 <lwip_netconn_is_err_msg+0x68>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d104      	bne.n	8010876 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	22f3      	movs	r2, #243	@ 0xf3
 8010870:	701a      	strb	r2, [r3, #0]
    return 1;
 8010872:	2301      	movs	r3, #1
 8010874:	e012      	b.n	801089c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	4a0e      	ldr	r2, [pc, #56]	@ (80108b4 <lwip_netconn_is_err_msg+0x6c>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d104      	bne.n	8010888 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	22f2      	movs	r2, #242	@ 0xf2
 8010882:	701a      	strb	r2, [r3, #0]
    return 1;
 8010884:	2301      	movs	r3, #1
 8010886:	e009      	b.n	801089c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	4a0b      	ldr	r2, [pc, #44]	@ (80108b8 <lwip_netconn_is_err_msg+0x70>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d104      	bne.n	801089a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	22f1      	movs	r2, #241	@ 0xf1
 8010894:	701a      	strb	r2, [r3, #0]
    return 1;
 8010896:	2301      	movs	r3, #1
 8010898:	e000      	b.n	801089c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3708      	adds	r7, #8
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}
 80108a4:	08020264 	.word	0x08020264
 80108a8:	080202d0 	.word	0x080202d0
 80108ac:	080202a8 	.word	0x080202a8
 80108b0:	080241ec 	.word	0x080241ec
 80108b4:	080241ed 	.word	0x080241ed
 80108b8:	080241ee 	.word	0x080241ee

080108bc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b088      	sub	sp, #32
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	60b9      	str	r1, [r7, #8]
 80108c6:	607a      	str	r2, [r7, #4]
 80108c8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d105      	bne.n	80108dc <recv_udp+0x20>
 80108d0:	4b34      	ldr	r3, [pc, #208]	@ (80109a4 <recv_udp+0xe8>)
 80108d2:	22e5      	movs	r2, #229	@ 0xe5
 80108d4:	4934      	ldr	r1, [pc, #208]	@ (80109a8 <recv_udp+0xec>)
 80108d6:	4835      	ldr	r0, [pc, #212]	@ (80109ac <recv_udp+0xf0>)
 80108d8:	f00e fa58 	bl	801ed8c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d105      	bne.n	80108ee <recv_udp+0x32>
 80108e2:	4b30      	ldr	r3, [pc, #192]	@ (80109a4 <recv_udp+0xe8>)
 80108e4:	22e6      	movs	r2, #230	@ 0xe6
 80108e6:	4932      	ldr	r1, [pc, #200]	@ (80109b0 <recv_udp+0xf4>)
 80108e8:	4830      	ldr	r0, [pc, #192]	@ (80109ac <recv_udp+0xf0>)
 80108ea:	f00e fa4f 	bl	801ed8c <iprintf>
  conn = (struct netconn *)arg;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d103      	bne.n	8010900 <recv_udp+0x44>
    pbuf_free(p);
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f003 fa57 	bl	8013dac <pbuf_free>
    return;
 80108fe:	e04d      	b.n	801099c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	429a      	cmp	r2, r3
 8010908:	d005      	beq.n	8010916 <recv_udp+0x5a>
 801090a:	4b26      	ldr	r3, [pc, #152]	@ (80109a4 <recv_udp+0xe8>)
 801090c:	22ee      	movs	r2, #238	@ 0xee
 801090e:	4929      	ldr	r1, [pc, #164]	@ (80109b4 <recv_udp+0xf8>)
 8010910:	4826      	ldr	r0, [pc, #152]	@ (80109ac <recv_udp+0xf0>)
 8010912:	f00e fa3b 	bl	801ed8c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	3310      	adds	r3, #16
 801091a:	4618      	mov	r0, r3
 801091c:	f00d fb38 	bl	801df90 <sys_mbox_valid>
 8010920:	4603      	mov	r3, r0
 8010922:	2b00      	cmp	r3, #0
 8010924:	d103      	bne.n	801092e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f003 fa40 	bl	8013dac <pbuf_free>
    return;
 801092c:	e036      	b.n	801099c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801092e:	2006      	movs	r0, #6
 8010930:	f002 fa2c 	bl	8012d8c <memp_malloc>
 8010934:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d103      	bne.n	8010944 <recv_udp+0x88>
    pbuf_free(p);
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f003 fa35 	bl	8013dac <pbuf_free>
    return;
 8010942:	e02b      	b.n	801099c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	687a      	ldr	r2, [r7, #4]
 8010948:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801094a:	69bb      	ldr	r3, [r7, #24]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d002      	beq.n	801095c <recv_udp+0xa0>
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	e000      	b.n	801095e <recv_udp+0xa2>
 801095c:	2300      	movs	r3, #0
 801095e:	69ba      	ldr	r2, [r7, #24]
 8010960:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8010962:	69bb      	ldr	r3, [r7, #24]
 8010964:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010966:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	891b      	ldrh	r3, [r3, #8]
 801096c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	3310      	adds	r3, #16
 8010972:	69b9      	ldr	r1, [r7, #24]
 8010974:	4618      	mov	r0, r3
 8010976:	f00d faa9 	bl	801decc <sys_mbox_trypost>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d003      	beq.n	8010988 <recv_udp+0xcc>
    netbuf_delete(buf);
 8010980:	69b8      	ldr	r0, [r7, #24]
 8010982:	f001 fb0d 	bl	8011fa0 <netbuf_delete>
    return;
 8010986:	e009      	b.n	801099c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801098c:	2b00      	cmp	r3, #0
 801098e:	d005      	beq.n	801099c <recv_udp+0xe0>
 8010990:	69fb      	ldr	r3, [r7, #28]
 8010992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010994:	8afa      	ldrh	r2, [r7, #22]
 8010996:	2100      	movs	r1, #0
 8010998:	69f8      	ldr	r0, [r7, #28]
 801099a:	4798      	blx	r3
  }
}
 801099c:	3720      	adds	r7, #32
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	08020264 	.word	0x08020264
 80109a8:	080202dc 	.word	0x080202dc
 80109ac:	080202a8 	.word	0x080202a8
 80109b0:	08020300 	.word	0x08020300
 80109b4:	08020320 	.word	0x08020320

080109b8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b088      	sub	sp, #32
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
 80109c4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d106      	bne.n	80109da <recv_tcp+0x22>
 80109cc:	4b36      	ldr	r3, [pc, #216]	@ (8010aa8 <recv_tcp+0xf0>)
 80109ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80109d2:	4936      	ldr	r1, [pc, #216]	@ (8010aac <recv_tcp+0xf4>)
 80109d4:	4836      	ldr	r0, [pc, #216]	@ (8010ab0 <recv_tcp+0xf8>)
 80109d6:	f00e f9d9 	bl	801ed8c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d106      	bne.n	80109ee <recv_tcp+0x36>
 80109e0:	4b31      	ldr	r3, [pc, #196]	@ (8010aa8 <recv_tcp+0xf0>)
 80109e2:	f240 122d 	movw	r2, #301	@ 0x12d
 80109e6:	4933      	ldr	r1, [pc, #204]	@ (8010ab4 <recv_tcp+0xfc>)
 80109e8:	4831      	ldr	r0, [pc, #196]	@ (8010ab0 <recv_tcp+0xf8>)
 80109ea:	f00e f9cf 	bl	801ed8c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80109ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d006      	beq.n	8010a04 <recv_tcp+0x4c>
 80109f6:	4b2c      	ldr	r3, [pc, #176]	@ (8010aa8 <recv_tcp+0xf0>)
 80109f8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80109fc:	492e      	ldr	r1, [pc, #184]	@ (8010ab8 <recv_tcp+0x100>)
 80109fe:	482c      	ldr	r0, [pc, #176]	@ (8010ab0 <recv_tcp+0xf8>)
 8010a00:	f00e f9c4 	bl	801ed8c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d102      	bne.n	8010a14 <recv_tcp+0x5c>
    return ERR_VAL;
 8010a0e:	f06f 0305 	mvn.w	r3, #5
 8010a12:	e045      	b.n	8010aa0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	68ba      	ldr	r2, [r7, #8]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d006      	beq.n	8010a2c <recv_tcp+0x74>
 8010a1e:	4b22      	ldr	r3, [pc, #136]	@ (8010aa8 <recv_tcp+0xf0>)
 8010a20:	f240 1235 	movw	r2, #309	@ 0x135
 8010a24:	4925      	ldr	r1, [pc, #148]	@ (8010abc <recv_tcp+0x104>)
 8010a26:	4822      	ldr	r0, [pc, #136]	@ (8010ab0 <recv_tcp+0xf8>)
 8010a28:	f00e f9b0 	bl	801ed8c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	3310      	adds	r3, #16
 8010a30:	4618      	mov	r0, r3
 8010a32:	f00d faad 	bl	801df90 <sys_mbox_valid>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d10d      	bne.n	8010a58 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d008      	beq.n	8010a54 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	891b      	ldrh	r3, [r3, #8]
 8010a46:	4619      	mov	r1, r3
 8010a48:	68b8      	ldr	r0, [r7, #8]
 8010a4a:	f004 f8ad 	bl	8014ba8 <tcp_recved>
      pbuf_free(p);
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f003 f9ac 	bl	8013dac <pbuf_free>
    }
    return ERR_OK;
 8010a54:	2300      	movs	r3, #0
 8010a56:	e023      	b.n	8010aa0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d005      	beq.n	8010a6a <recv_tcp+0xb2>
    msg = p;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	891b      	ldrh	r3, [r3, #8]
 8010a66:	83fb      	strh	r3, [r7, #30]
 8010a68:	e003      	b.n	8010a72 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8010a6a:	4b15      	ldr	r3, [pc, #84]	@ (8010ac0 <recv_tcp+0x108>)
 8010a6c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	3310      	adds	r3, #16
 8010a76:	69b9      	ldr	r1, [r7, #24]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f00d fa27 	bl	801decc <sys_mbox_trypost>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d002      	beq.n	8010a8a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8010a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010a88:	e00a      	b.n	8010aa0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d005      	beq.n	8010a9e <recv_tcp+0xe6>
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a96:	8bfa      	ldrh	r2, [r7, #30]
 8010a98:	2100      	movs	r1, #0
 8010a9a:	6978      	ldr	r0, [r7, #20]
 8010a9c:	4798      	blx	r3
  }

  return ERR_OK;
 8010a9e:	2300      	movs	r3, #0
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3720      	adds	r7, #32
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	08020264 	.word	0x08020264
 8010aac:	08020340 	.word	0x08020340
 8010ab0:	080202a8 	.word	0x080202a8
 8010ab4:	08020364 	.word	0x08020364
 8010ab8:	08020384 	.word	0x08020384
 8010abc:	0802039c 	.word	0x0802039c
 8010ac0:	080241ee 	.word	0x080241ee

08010ac4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d106      	bne.n	8010ae6 <poll_tcp+0x22>
 8010ad8:	4b29      	ldr	r3, [pc, #164]	@ (8010b80 <poll_tcp+0xbc>)
 8010ada:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8010ade:	4929      	ldr	r1, [pc, #164]	@ (8010b84 <poll_tcp+0xc0>)
 8010ae0:	4829      	ldr	r0, [pc, #164]	@ (8010b88 <poll_tcp+0xc4>)
 8010ae2:	f00e f953 	bl	801ed8c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	785b      	ldrb	r3, [r3, #1]
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d104      	bne.n	8010af8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8010aee:	2101      	movs	r1, #1
 8010af0:	68f8      	ldr	r0, [r7, #12]
 8010af2:	f000 ffc9 	bl	8011a88 <lwip_netconn_do_writemore>
 8010af6:	e016      	b.n	8010b26 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	785b      	ldrb	r3, [r3, #1]
 8010afc:	2b04      	cmp	r3, #4
 8010afe:	d112      	bne.n	8010b26 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6a1b      	ldr	r3, [r3, #32]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d00a      	beq.n	8010b1e <poll_tcp+0x5a>
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	6a1b      	ldr	r3, [r3, #32]
 8010b0c:	7a5b      	ldrb	r3, [r3, #9]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d005      	beq.n	8010b1e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6a1b      	ldr	r3, [r3, #32]
 8010b16:	7a5a      	ldrb	r2, [r3, #9]
 8010b18:	3a01      	subs	r2, #1
 8010b1a:	b2d2      	uxtb	r2, r2
 8010b1c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010b1e:	2101      	movs	r1, #1
 8010b20:	68f8      	ldr	r0, [r7, #12]
 8010b22:	f000 fb3b 	bl	801119c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	7f1b      	ldrb	r3, [r3, #28]
 8010b2a:	f003 0310 	and.w	r3, r3, #16
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d021      	beq.n	8010b76 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d01d      	beq.n	8010b76 <poll_tcp+0xb2>
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010b42:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8010b46:	d316      	bcc.n	8010b76 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	685b      	ldr	r3, [r3, #4]
 8010b4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010b50:	2b04      	cmp	r3, #4
 8010b52:	d810      	bhi.n	8010b76 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	7f1b      	ldrb	r3, [r3, #28]
 8010b58:	f023 0310 	bic.w	r3, r3, #16
 8010b5c:	b2da      	uxtb	r2, r3
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d005      	beq.n	8010b76 <poll_tcp+0xb2>
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b6e:	2200      	movs	r2, #0
 8010b70:	2102      	movs	r1, #2
 8010b72:	68f8      	ldr	r0, [r7, #12]
 8010b74:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010b76:	2300      	movs	r3, #0
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3710      	adds	r7, #16
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	08020264 	.word	0x08020264
 8010b84:	080203bc 	.word	0x080203bc
 8010b88:	080202a8 	.word	0x080202a8

08010b8c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b086      	sub	sp, #24
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	60b9      	str	r1, [r7, #8]
 8010b96:	4613      	mov	r3, r2
 8010b98:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d106      	bne.n	8010bb2 <sent_tcp+0x26>
 8010ba4:	4b20      	ldr	r3, [pc, #128]	@ (8010c28 <sent_tcp+0x9c>)
 8010ba6:	f240 1293 	movw	r2, #403	@ 0x193
 8010baa:	4920      	ldr	r1, [pc, #128]	@ (8010c2c <sent_tcp+0xa0>)
 8010bac:	4820      	ldr	r0, [pc, #128]	@ (8010c30 <sent_tcp+0xa4>)
 8010bae:	f00e f8ed 	bl	801ed8c <iprintf>

  if (conn) {
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d032      	beq.n	8010c1e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	785b      	ldrb	r3, [r3, #1]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d104      	bne.n	8010bca <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8010bc0:	2101      	movs	r1, #1
 8010bc2:	6978      	ldr	r0, [r7, #20]
 8010bc4:	f000 ff60 	bl	8011a88 <lwip_netconn_do_writemore>
 8010bc8:	e007      	b.n	8010bda <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	785b      	ldrb	r3, [r3, #1]
 8010bce:	2b04      	cmp	r3, #4
 8010bd0:	d103      	bne.n	8010bda <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010bd2:	2101      	movs	r1, #1
 8010bd4:	6978      	ldr	r0, [r7, #20]
 8010bd6:	f000 fae1 	bl	801119c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d01d      	beq.n	8010c1e <sent_tcp+0x92>
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010bea:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8010bee:	d316      	bcc.n	8010c1e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010bf8:	2b04      	cmp	r3, #4
 8010bfa:	d810      	bhi.n	8010c1e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	7f1b      	ldrb	r3, [r3, #28]
 8010c00:	f023 0310 	bic.w	r3, r3, #16
 8010c04:	b2da      	uxtb	r2, r3
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d005      	beq.n	8010c1e <sent_tcp+0x92>
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c16:	88fa      	ldrh	r2, [r7, #6]
 8010c18:	2102      	movs	r1, #2
 8010c1a:	6978      	ldr	r0, [r7, #20]
 8010c1c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010c1e:	2300      	movs	r3, #0
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3718      	adds	r7, #24
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	08020264 	.word	0x08020264
 8010c2c:	080203bc 	.word	0x080203bc
 8010c30:	080202a8 	.word	0x080202a8

08010c34 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b088      	sub	sp, #32
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d106      	bne.n	8010c58 <err_tcp+0x24>
 8010c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8010dc8 <err_tcp+0x194>)
 8010c4c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8010c50:	495e      	ldr	r1, [pc, #376]	@ (8010dcc <err_tcp+0x198>)
 8010c52:	485f      	ldr	r0, [pc, #380]	@ (8010dd0 <err_tcp+0x19c>)
 8010c54:	f00e f89a 	bl	801ed8c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8010c58:	f00d faa4 	bl	801e1a4 <sys_arch_protect>
 8010c5c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8010c5e:	69fb      	ldr	r3, [r7, #28]
 8010c60:	2200      	movs	r2, #0
 8010c62:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8010c64:	69fb      	ldr	r3, [r7, #28]
 8010c66:	78fa      	ldrb	r2, [r7, #3]
 8010c68:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	7f1b      	ldrb	r3, [r3, #28]
 8010c6e:	f043 0301 	orr.w	r3, r3, #1
 8010c72:	b2da      	uxtb	r2, r3
 8010c74:	69fb      	ldr	r3, [r7, #28]
 8010c76:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	785b      	ldrb	r3, [r3, #1]
 8010c7c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8010c7e:	69fb      	ldr	r3, [r7, #28]
 8010c80:	2200      	movs	r2, #0
 8010c82:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8010c84:	69b8      	ldr	r0, [r7, #24]
 8010c86:	f00d fa9b 	bl	801e1c0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d005      	beq.n	8010c9e <err_tcp+0x6a>
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c96:	2200      	movs	r2, #0
 8010c98:	2104      	movs	r1, #4
 8010c9a:	69f8      	ldr	r0, [r7, #28]
 8010c9c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d005      	beq.n	8010cb2 <err_tcp+0x7e>
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010caa:	2200      	movs	r2, #0
 8010cac:	2100      	movs	r1, #0
 8010cae:	69f8      	ldr	r0, [r7, #28]
 8010cb0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010cb2:	69fb      	ldr	r3, [r7, #28]
 8010cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d005      	beq.n	8010cc6 <err_tcp+0x92>
 8010cba:	69fb      	ldr	r3, [r7, #28]
 8010cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	2102      	movs	r1, #2
 8010cc2:	69f8      	ldr	r0, [r7, #28]
 8010cc4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7ff fd86 	bl	80107dc <lwip_netconn_err_to_msg>
 8010cd0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	3310      	adds	r3, #16
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f00d f95a 	bl	801df90 <sys_mbox_valid>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d005      	beq.n	8010cee <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8010ce2:	69fb      	ldr	r3, [r7, #28]
 8010ce4:	3310      	adds	r3, #16
 8010ce6:	6939      	ldr	r1, [r7, #16]
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f00d f8ef 	bl	801decc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010cee:	69fb      	ldr	r3, [r7, #28]
 8010cf0:	3314      	adds	r3, #20
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f00d f94c 	bl	801df90 <sys_mbox_valid>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d005      	beq.n	8010d0a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8010cfe:	69fb      	ldr	r3, [r7, #28]
 8010d00:	3314      	adds	r3, #20
 8010d02:	6939      	ldr	r1, [r7, #16]
 8010d04:	4618      	mov	r0, r3
 8010d06:	f00d f8e1 	bl	801decc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8010d0a:	7dfb      	ldrb	r3, [r7, #23]
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d005      	beq.n	8010d1c <err_tcp+0xe8>
 8010d10:	7dfb      	ldrb	r3, [r7, #23]
 8010d12:	2b04      	cmp	r3, #4
 8010d14:	d002      	beq.n	8010d1c <err_tcp+0xe8>
 8010d16:	7dfb      	ldrb	r3, [r7, #23]
 8010d18:	2b03      	cmp	r3, #3
 8010d1a:	d143      	bne.n	8010da4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	7f1b      	ldrb	r3, [r3, #28]
 8010d20:	f003 0304 	and.w	r3, r3, #4
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	bf14      	ite	ne
 8010d28:	2301      	movne	r3, #1
 8010d2a:	2300      	moveq	r3, #0
 8010d2c:	b2db      	uxtb	r3, r3
 8010d2e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	7f1b      	ldrb	r3, [r3, #28]
 8010d34:	f023 0304 	bic.w	r3, r3, #4
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	69fb      	ldr	r3, [r7, #28]
 8010d3c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d13b      	bne.n	8010dbc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	6a1b      	ldr	r3, [r3, #32]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d106      	bne.n	8010d5a <err_tcp+0x126>
 8010d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8010dc8 <err_tcp+0x194>)
 8010d4e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010d52:	4920      	ldr	r1, [pc, #128]	@ (8010dd4 <err_tcp+0x1a0>)
 8010d54:	481e      	ldr	r0, [pc, #120]	@ (8010dd0 <err_tcp+0x19c>)
 8010d56:	f00e f819 	bl	801ed8c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
 8010d5c:	2b04      	cmp	r3, #4
 8010d5e:	d104      	bne.n	8010d6a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8010d60:	69fb      	ldr	r3, [r7, #28]
 8010d62:	6a1b      	ldr	r3, [r3, #32]
 8010d64:	2200      	movs	r2, #0
 8010d66:	711a      	strb	r2, [r3, #4]
 8010d68:	e003      	b.n	8010d72 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	6a1b      	ldr	r3, [r3, #32]
 8010d6e:	78fa      	ldrb	r2, [r7, #3]
 8010d70:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010d72:	69fb      	ldr	r3, [r7, #28]
 8010d74:	6a1b      	ldr	r3, [r3, #32]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	330c      	adds	r3, #12
 8010d7a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8010d7c:	68b8      	ldr	r0, [r7, #8]
 8010d7e:	f00d f995 	bl	801e0ac <sys_sem_valid>
 8010d82:	4603      	mov	r3, r0
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d106      	bne.n	8010d96 <err_tcp+0x162>
 8010d88:	4b0f      	ldr	r3, [pc, #60]	@ (8010dc8 <err_tcp+0x194>)
 8010d8a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8010d8e:	4912      	ldr	r1, [pc, #72]	@ (8010dd8 <err_tcp+0x1a4>)
 8010d90:	480f      	ldr	r0, [pc, #60]	@ (8010dd0 <err_tcp+0x19c>)
 8010d92:	f00d fffb 	bl	801ed8c <iprintf>
      conn->current_msg = NULL;
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8010d9c:	68b8      	ldr	r0, [r7, #8]
 8010d9e:	f00d f96b 	bl	801e078 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8010da2:	e00b      	b.n	8010dbc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	6a1b      	ldr	r3, [r3, #32]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d008      	beq.n	8010dbe <err_tcp+0x18a>
 8010dac:	4b06      	ldr	r3, [pc, #24]	@ (8010dc8 <err_tcp+0x194>)
 8010dae:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8010db2:	490a      	ldr	r1, [pc, #40]	@ (8010ddc <err_tcp+0x1a8>)
 8010db4:	4806      	ldr	r0, [pc, #24]	@ (8010dd0 <err_tcp+0x19c>)
 8010db6:	f00d ffe9 	bl	801ed8c <iprintf>
  }
}
 8010dba:	e000      	b.n	8010dbe <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8010dbc:	bf00      	nop
}
 8010dbe:	bf00      	nop
 8010dc0:	3720      	adds	r7, #32
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	08020264 	.word	0x08020264
 8010dcc:	080203bc 	.word	0x080203bc
 8010dd0:	080202a8 	.word	0x080202a8
 8010dd4:	080203cc 	.word	0x080203cc
 8010dd8:	080203e8 	.word	0x080203e8
 8010ddc:	08020404 	.word	0x08020404

08010de0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b084      	sub	sp, #16
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8010dee:	6879      	ldr	r1, [r7, #4]
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f004 feb9 	bl	8015b68 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010df6:	490a      	ldr	r1, [pc, #40]	@ (8010e20 <setup_tcp+0x40>)
 8010df8:	68f8      	ldr	r0, [r7, #12]
 8010dfa:	f004 fec7 	bl	8015b8c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8010dfe:	4909      	ldr	r1, [pc, #36]	@ (8010e24 <setup_tcp+0x44>)
 8010e00:	68f8      	ldr	r0, [r7, #12]
 8010e02:	f004 fee5 	bl	8015bd0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010e06:	2202      	movs	r2, #2
 8010e08:	4907      	ldr	r1, [pc, #28]	@ (8010e28 <setup_tcp+0x48>)
 8010e0a:	68f8      	ldr	r0, [r7, #12]
 8010e0c:	f004 ff3c 	bl	8015c88 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8010e10:	4906      	ldr	r1, [pc, #24]	@ (8010e2c <setup_tcp+0x4c>)
 8010e12:	68f8      	ldr	r0, [r7, #12]
 8010e14:	f004 fefe 	bl	8015c14 <tcp_err>
}
 8010e18:	bf00      	nop
 8010e1a:	3710      	adds	r7, #16
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	080109b9 	.word	0x080109b9
 8010e24:	08010b8d 	.word	0x08010b8d
 8010e28:	08010ac5 	.word	0x08010ac5
 8010e2c:	08010c35 	.word	0x08010c35

08010e30 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8010e30:	b590      	push	{r4, r7, lr}
 8010e32:	b085      	sub	sp, #20
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d006      	beq.n	8010e54 <pcb_new+0x24>
 8010e46:	4b2b      	ldr	r3, [pc, #172]	@ (8010ef4 <pcb_new+0xc4>)
 8010e48:	f240 2265 	movw	r2, #613	@ 0x265
 8010e4c:	492a      	ldr	r1, [pc, #168]	@ (8010ef8 <pcb_new+0xc8>)
 8010e4e:	482b      	ldr	r0, [pc, #172]	@ (8010efc <pcb_new+0xcc>)
 8010e50:	f00d ff9c 	bl	801ed8c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010e5e:	2b10      	cmp	r3, #16
 8010e60:	d022      	beq.n	8010ea8 <pcb_new+0x78>
 8010e62:	2b20      	cmp	r3, #32
 8010e64:	d133      	bne.n	8010ece <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681c      	ldr	r4, [r3, #0]
 8010e6a:	7bfb      	ldrb	r3, [r7, #15]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f00a fbfa 	bl	801b666 <udp_new_ip_type>
 8010e72:	4603      	mov	r3, r0
 8010e74:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d02a      	beq.n	8010ed6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	2b22      	cmp	r3, #34	@ 0x22
 8010e88:	d104      	bne.n	8010e94 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	2201      	movs	r2, #1
 8010e92:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	6858      	ldr	r0, [r3, #4]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	4917      	ldr	r1, [pc, #92]	@ (8010f00 <pcb_new+0xd0>)
 8010ea2:	f00a fb67 	bl	801b574 <udp_recv>
      }
      break;
 8010ea6:	e016      	b.n	8010ed6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681c      	ldr	r4, [r3, #0]
 8010eac:	7bfb      	ldrb	r3, [r7, #15]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f004 fe4c 	bl	8015b4c <tcp_new_ip_type>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00b      	beq.n	8010eda <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7ff ff8a 	bl	8010de0 <setup_tcp>
      }
      break;
 8010ecc:	e005      	b.n	8010eda <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	22fa      	movs	r2, #250	@ 0xfa
 8010ed2:	711a      	strb	r2, [r3, #4]
      return;
 8010ed4:	e00a      	b.n	8010eec <pcb_new+0xbc>
      break;
 8010ed6:	bf00      	nop
 8010ed8:	e000      	b.n	8010edc <pcb_new+0xac>
      break;
 8010eda:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d102      	bne.n	8010eec <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	22ff      	movs	r2, #255	@ 0xff
 8010eea:	711a      	strb	r2, [r3, #4]
  }
}
 8010eec:	3714      	adds	r7, #20
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd90      	pop	{r4, r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	08020264 	.word	0x08020264
 8010ef8:	08020448 	.word	0x08020448
 8010efc:	080202a8 	.word	0x080202a8
 8010f00:	080108bd 	.word	0x080108bd

08010f04 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2200      	movs	r2, #0
 8010f14:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d102      	bne.n	8010f26 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010f20:	68f8      	ldr	r0, [r7, #12]
 8010f22:	f7ff ff85 	bl	8010e30 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010f26:	bf00      	nop
 8010f28:	3710      	adds	r7, #16
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
	...

08010f30 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b086      	sub	sp, #24
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	4603      	mov	r3, r0
 8010f38:	6039      	str	r1, [r7, #0]
 8010f3a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8010f40:	2007      	movs	r0, #7
 8010f42:	f001 ff23 	bl	8012d8c <memp_malloc>
 8010f46:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d101      	bne.n	8010f52 <netconn_alloc+0x22>
    return NULL;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	e052      	b.n	8010ff8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2200      	movs	r2, #0
 8010f56:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	79fa      	ldrb	r2, [r7, #7]
 8010f5c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2200      	movs	r2, #0
 8010f62:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8010f64:	79fb      	ldrb	r3, [r7, #7]
 8010f66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010f6a:	2b10      	cmp	r3, #16
 8010f6c:	d004      	beq.n	8010f78 <netconn_alloc+0x48>
 8010f6e:	2b20      	cmp	r3, #32
 8010f70:	d105      	bne.n	8010f7e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8010f72:	2306      	movs	r3, #6
 8010f74:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8010f76:	e00a      	b.n	8010f8e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010f78:	2306      	movs	r3, #6
 8010f7a:	617b      	str	r3, [r7, #20]
      break;
 8010f7c:	e007      	b.n	8010f8e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010f7e:	4b20      	ldr	r3, [pc, #128]	@ (8011000 <netconn_alloc+0xd0>)
 8010f80:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8010f84:	491f      	ldr	r1, [pc, #124]	@ (8011004 <netconn_alloc+0xd4>)
 8010f86:	4820      	ldr	r0, [pc, #128]	@ (8011008 <netconn_alloc+0xd8>)
 8010f88:	f00d ff00 	bl	801ed8c <iprintf>
      goto free_and_return;
 8010f8c:	e02f      	b.n	8010fee <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	3310      	adds	r3, #16
 8010f92:	6979      	ldr	r1, [r7, #20]
 8010f94:	4618      	mov	r0, r3
 8010f96:	f00c ff6d 	bl	801de74 <sys_mbox_new>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d125      	bne.n	8010fec <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	330c      	adds	r3, #12
 8010fa4:	2100      	movs	r1, #0
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f00d f810 	bl	801dfcc <sys_sem_new>
 8010fac:	4603      	mov	r3, r0
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d005      	beq.n	8010fbe <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	3310      	adds	r3, #16
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f00c ff76 	bl	801dea8 <sys_mbox_free>
    goto free_and_return;
 8010fbc:	e017      	b.n	8010fee <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	3314      	adds	r3, #20
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f00c fff5 	bl	801dfb2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010fd4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	683a      	ldr	r2, [r7, #0]
 8010fda:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	7cfa      	ldrb	r2, [r7, #19]
 8010fe6:	771a      	strb	r2, [r3, #28]
  return conn;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	e005      	b.n	8010ff8 <netconn_alloc+0xc8>
    goto free_and_return;
 8010fec:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8010fee:	68f9      	ldr	r1, [r7, #12]
 8010ff0:	2007      	movs	r0, #7
 8010ff2:	f001 ff41 	bl	8012e78 <memp_free>
  return NULL;
 8010ff6:	2300      	movs	r3, #0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3718      	adds	r7, #24
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	08020264 	.word	0x08020264
 8011004:	08020468 	.word	0x08020468
 8011008:	080202a8 	.word	0x080202a8

0801100c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d006      	beq.n	801102a <netconn_free+0x1e>
 801101c:	4b1b      	ldr	r3, [pc, #108]	@ (801108c <netconn_free+0x80>)
 801101e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011022:	491b      	ldr	r1, [pc, #108]	@ (8011090 <netconn_free+0x84>)
 8011024:	481b      	ldr	r0, [pc, #108]	@ (8011094 <netconn_free+0x88>)
 8011026:	f00d feb1 	bl	801ed8c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	3310      	adds	r3, #16
 801102e:	4618      	mov	r0, r3
 8011030:	f00c ffae 	bl	801df90 <sys_mbox_valid>
 8011034:	4603      	mov	r3, r0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d006      	beq.n	8011048 <netconn_free+0x3c>
 801103a:	4b14      	ldr	r3, [pc, #80]	@ (801108c <netconn_free+0x80>)
 801103c:	f240 3223 	movw	r2, #803	@ 0x323
 8011040:	4915      	ldr	r1, [pc, #84]	@ (8011098 <netconn_free+0x8c>)
 8011042:	4814      	ldr	r0, [pc, #80]	@ (8011094 <netconn_free+0x88>)
 8011044:	f00d fea2 	bl	801ed8c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	3314      	adds	r3, #20
 801104c:	4618      	mov	r0, r3
 801104e:	f00c ff9f 	bl	801df90 <sys_mbox_valid>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d006      	beq.n	8011066 <netconn_free+0x5a>
 8011058:	4b0c      	ldr	r3, [pc, #48]	@ (801108c <netconn_free+0x80>)
 801105a:	f240 3226 	movw	r2, #806	@ 0x326
 801105e:	490f      	ldr	r1, [pc, #60]	@ (801109c <netconn_free+0x90>)
 8011060:	480c      	ldr	r0, [pc, #48]	@ (8011094 <netconn_free+0x88>)
 8011062:	f00d fe93 	bl	801ed8c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	330c      	adds	r3, #12
 801106a:	4618      	mov	r0, r3
 801106c:	f00d f811 	bl	801e092 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	330c      	adds	r3, #12
 8011074:	4618      	mov	r0, r3
 8011076:	f00d f82a 	bl	801e0ce <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801107a:	6879      	ldr	r1, [r7, #4]
 801107c:	2007      	movs	r0, #7
 801107e:	f001 fefb 	bl	8012e78 <memp_free>
}
 8011082:	bf00      	nop
 8011084:	3708      	adds	r7, #8
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
 801108a:	bf00      	nop
 801108c:	08020264 	.word	0x08020264
 8011090:	08020490 	.word	0x08020490
 8011094:	080202a8 	.word	0x080202a8
 8011098:	080204c0 	.word	0x080204c0
 801109c:	080204fc 	.word	0x080204fc

080110a0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b086      	sub	sp, #24
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	3310      	adds	r3, #16
 80110ac:	4618      	mov	r0, r3
 80110ae:	f00c ff6f 	bl	801df90 <sys_mbox_valid>
 80110b2:	4603      	mov	r3, r0
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d02f      	beq.n	8011118 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80110b8:	e018      	b.n	80110ec <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80110c2:	2b10      	cmp	r3, #16
 80110c4:	d10e      	bne.n	80110e4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	f107 020f 	add.w	r2, r7, #15
 80110cc:	4611      	mov	r1, r2
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7ff fbba 	bl	8010848 <lwip_netconn_is_err_msg>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d108      	bne.n	80110ec <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	4618      	mov	r0, r3
 80110de:	f002 fe65 	bl	8013dac <pbuf_free>
 80110e2:	e003      	b.n	80110ec <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	4618      	mov	r0, r3
 80110e8:	f000 ff5a 	bl	8011fa0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	3310      	adds	r3, #16
 80110f0:	f107 0210 	add.w	r2, r7, #16
 80110f4:	4611      	mov	r1, r2
 80110f6:	4618      	mov	r0, r3
 80110f8:	f00c ff33 	bl	801df62 <sys_arch_mbox_tryfetch>
 80110fc:	4603      	mov	r3, r0
 80110fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011102:	d1da      	bne.n	80110ba <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	3310      	adds	r3, #16
 8011108:	4618      	mov	r0, r3
 801110a:	f00c fecd 	bl	801dea8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	3310      	adds	r3, #16
 8011112:	4618      	mov	r0, r3
 8011114:	f00c ff4d 	bl	801dfb2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	3314      	adds	r3, #20
 801111c:	4618      	mov	r0, r3
 801111e:	f00c ff37 	bl	801df90 <sys_mbox_valid>
 8011122:	4603      	mov	r3, r0
 8011124:	2b00      	cmp	r3, #0
 8011126:	d034      	beq.n	8011192 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011128:	e01d      	b.n	8011166 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 801112a:	693b      	ldr	r3, [r7, #16]
 801112c:	f107 020e 	add.w	r2, r7, #14
 8011130:	4611      	mov	r1, r2
 8011132:	4618      	mov	r0, r3
 8011134:	f7ff fb88 	bl	8010848 <lwip_netconn_is_err_msg>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d113      	bne.n	8011166 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011142:	6978      	ldr	r0, [r7, #20]
 8011144:	f7ff ffac 	bl	80110a0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d007      	beq.n	8011160 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	4618      	mov	r0, r3
 8011156:	f003 fc29 	bl	80149ac <tcp_abort>
            newconn->pcb.tcp = NULL;
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	2200      	movs	r2, #0
 801115e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011160:	6978      	ldr	r0, [r7, #20]
 8011162:	f7ff ff53 	bl	801100c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	3314      	adds	r3, #20
 801116a:	f107 0210 	add.w	r2, r7, #16
 801116e:	4611      	mov	r1, r2
 8011170:	4618      	mov	r0, r3
 8011172:	f00c fef6 	bl	801df62 <sys_arch_mbox_tryfetch>
 8011176:	4603      	mov	r3, r0
 8011178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801117c:	d1d5      	bne.n	801112a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	3314      	adds	r3, #20
 8011182:	4618      	mov	r0, r3
 8011184:	f00c fe90 	bl	801dea8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	3314      	adds	r3, #20
 801118c:	4618      	mov	r0, r3
 801118e:	f00c ff10 	bl	801dfb2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011192:	bf00      	nop
 8011194:	3718      	adds	r7, #24
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
	...

0801119c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b086      	sub	sp, #24
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	460b      	mov	r3, r1
 80111a6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80111a8:	2300      	movs	r3, #0
 80111aa:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d106      	bne.n	80111c0 <lwip_netconn_do_close_internal+0x24>
 80111b2:	4b87      	ldr	r3, [pc, #540]	@ (80113d0 <lwip_netconn_do_close_internal+0x234>)
 80111b4:	f240 32a2 	movw	r2, #930	@ 0x3a2
 80111b8:	4986      	ldr	r1, [pc, #536]	@ (80113d4 <lwip_netconn_do_close_internal+0x238>)
 80111ba:	4887      	ldr	r0, [pc, #540]	@ (80113d8 <lwip_netconn_do_close_internal+0x23c>)
 80111bc:	f00d fde6 	bl	801ed8c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80111c8:	2b10      	cmp	r3, #16
 80111ca:	d006      	beq.n	80111da <lwip_netconn_do_close_internal+0x3e>
 80111cc:	4b80      	ldr	r3, [pc, #512]	@ (80113d0 <lwip_netconn_do_close_internal+0x234>)
 80111ce:	f240 32a3 	movw	r2, #931	@ 0x3a3
 80111d2:	4982      	ldr	r1, [pc, #520]	@ (80113dc <lwip_netconn_do_close_internal+0x240>)
 80111d4:	4880      	ldr	r0, [pc, #512]	@ (80113d8 <lwip_netconn_do_close_internal+0x23c>)
 80111d6:	f00d fdd9 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	785b      	ldrb	r3, [r3, #1]
 80111de:	2b04      	cmp	r3, #4
 80111e0:	d006      	beq.n	80111f0 <lwip_netconn_do_close_internal+0x54>
 80111e2:	4b7b      	ldr	r3, [pc, #492]	@ (80113d0 <lwip_netconn_do_close_internal+0x234>)
 80111e4:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 80111e8:	497d      	ldr	r1, [pc, #500]	@ (80113e0 <lwip_netconn_do_close_internal+0x244>)
 80111ea:	487b      	ldr	r0, [pc, #492]	@ (80113d8 <lwip_netconn_do_close_internal+0x23c>)
 80111ec:	f00d fdce 	bl	801ed8c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d106      	bne.n	8011206 <lwip_netconn_do_close_internal+0x6a>
 80111f8:	4b75      	ldr	r3, [pc, #468]	@ (80113d0 <lwip_netconn_do_close_internal+0x234>)
 80111fa:	f240 32a5 	movw	r2, #933	@ 0x3a5
 80111fe:	4979      	ldr	r1, [pc, #484]	@ (80113e4 <lwip_netconn_do_close_internal+0x248>)
 8011200:	4875      	ldr	r0, [pc, #468]	@ (80113d8 <lwip_netconn_do_close_internal+0x23c>)
 8011202:	f00d fdc3 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6a1b      	ldr	r3, [r3, #32]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d106      	bne.n	801121c <lwip_netconn_do_close_internal+0x80>
 801120e:	4b70      	ldr	r3, [pc, #448]	@ (80113d0 <lwip_netconn_do_close_internal+0x234>)
 8011210:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011214:	4974      	ldr	r1, [pc, #464]	@ (80113e8 <lwip_netconn_do_close_internal+0x24c>)
 8011216:	4870      	ldr	r0, [pc, #448]	@ (80113d8 <lwip_netconn_do_close_internal+0x23c>)
 8011218:	f00d fdb8 	bl	801ed8c <iprintf>

  tpcb = conn->pcb.tcp;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6a1b      	ldr	r3, [r3, #32]
 8011226:	7a1b      	ldrb	r3, [r3, #8]
 8011228:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801122a:	7bfb      	ldrb	r3, [r7, #15]
 801122c:	f003 0301 	and.w	r3, r3, #1
 8011230:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8011232:	7bfb      	ldrb	r3, [r7, #15]
 8011234:	f003 0302 	and.w	r3, r3, #2
 8011238:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801123a:	7bfb      	ldrb	r3, [r7, #15]
 801123c:	2b03      	cmp	r3, #3
 801123e:	d102      	bne.n	8011246 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011240:	2301      	movs	r3, #1
 8011242:	75bb      	strb	r3, [r7, #22]
 8011244:	e01f      	b.n	8011286 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8011246:	7bbb      	ldrb	r3, [r7, #14]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00e      	beq.n	801126a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011250:	2b05      	cmp	r3, #5
 8011252:	d007      	beq.n	8011264 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011258:	2b06      	cmp	r3, #6
 801125a:	d003      	beq.n	8011264 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011260:	2b08      	cmp	r3, #8
 8011262:	d102      	bne.n	801126a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011264:	2301      	movs	r3, #1
 8011266:	75bb      	strb	r3, [r7, #22]
 8011268:	e00d      	b.n	8011286 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801126a:	7b7b      	ldrb	r3, [r7, #13]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d008      	beq.n	8011282 <lwip_netconn_do_close_internal+0xe6>
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	8b5b      	ldrh	r3, [r3, #26]
 8011274:	f003 0310 	and.w	r3, r3, #16
 8011278:	2b00      	cmp	r3, #0
 801127a:	d002      	beq.n	8011282 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 801127c:	2301      	movs	r3, #1
 801127e:	75bb      	strb	r3, [r7, #22]
 8011280:	e001      	b.n	8011286 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011282:	2300      	movs	r3, #0
 8011284:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011286:	7dbb      	ldrb	r3, [r7, #22]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d003      	beq.n	8011294 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 801128c:	2100      	movs	r1, #0
 801128e:	6938      	ldr	r0, [r7, #16]
 8011290:	f004 fc6a 	bl	8015b68 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	7d1b      	ldrb	r3, [r3, #20]
 8011298:	2b01      	cmp	r3, #1
 801129a:	d104      	bne.n	80112a6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801129c:	2100      	movs	r1, #0
 801129e:	6938      	ldr	r0, [r7, #16]
 80112a0:	f004 fcda 	bl	8015c58 <tcp_accept>
 80112a4:	e01d      	b.n	80112e2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80112a6:	7bbb      	ldrb	r3, [r7, #14]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d007      	beq.n	80112bc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80112ac:	2100      	movs	r1, #0
 80112ae:	6938      	ldr	r0, [r7, #16]
 80112b0:	f004 fc6c 	bl	8015b8c <tcp_recv>
      tcp_accept(tpcb, NULL);
 80112b4:	2100      	movs	r1, #0
 80112b6:	6938      	ldr	r0, [r7, #16]
 80112b8:	f004 fcce 	bl	8015c58 <tcp_accept>
    }
    if (shut_tx) {
 80112bc:	7b7b      	ldrb	r3, [r7, #13]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d003      	beq.n	80112ca <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80112c2:	2100      	movs	r1, #0
 80112c4:	6938      	ldr	r0, [r7, #16]
 80112c6:	f004 fc83 	bl	8015bd0 <tcp_sent>
    }
    if (shut_close) {
 80112ca:	7dbb      	ldrb	r3, [r7, #22]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d008      	beq.n	80112e2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80112d0:	2200      	movs	r2, #0
 80112d2:	2100      	movs	r1, #0
 80112d4:	6938      	ldr	r0, [r7, #16]
 80112d6:	f004 fcd7 	bl	8015c88 <tcp_poll>
      tcp_err(tpcb, NULL);
 80112da:	2100      	movs	r1, #0
 80112dc:	6938      	ldr	r0, [r7, #16]
 80112de:	f004 fc99 	bl	8015c14 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80112e2:	7dbb      	ldrb	r3, [r7, #22]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d005      	beq.n	80112f4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80112e8:	6938      	ldr	r0, [r7, #16]
 80112ea:	f003 fa19 	bl	8014720 <tcp_close>
 80112ee:	4603      	mov	r3, r0
 80112f0:	75fb      	strb	r3, [r7, #23]
 80112f2:	e007      	b.n	8011304 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80112f4:	7bbb      	ldrb	r3, [r7, #14]
 80112f6:	7b7a      	ldrb	r2, [r7, #13]
 80112f8:	4619      	mov	r1, r3
 80112fa:	6938      	ldr	r0, [r7, #16]
 80112fc:	f003 fa3c 	bl	8014778 <tcp_shutdown>
 8011300:	4603      	mov	r3, r0
 8011302:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d102      	bne.n	8011312 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 801130c:	2301      	movs	r3, #1
 801130e:	757b      	strb	r3, [r7, #21]
 8011310:	e016      	b.n	8011340 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011316:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801131a:	d10f      	bne.n	801133c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6a1b      	ldr	r3, [r3, #32]
 8011320:	7a5b      	ldrb	r3, [r3, #9]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d10c      	bne.n	8011340 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8011326:	2301      	movs	r3, #1
 8011328:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801132a:	7dbb      	ldrb	r3, [r7, #22]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d007      	beq.n	8011340 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011330:	6938      	ldr	r0, [r7, #16]
 8011332:	f003 fb3b 	bl	80149ac <tcp_abort>
          err = ERR_OK;
 8011336:	2300      	movs	r3, #0
 8011338:	75fb      	strb	r3, [r7, #23]
 801133a:	e001      	b.n	8011340 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 801133c:	2301      	movs	r3, #1
 801133e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011340:	7d7b      	ldrb	r3, [r7, #21]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d052      	beq.n	80113ec <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6a1b      	ldr	r3, [r3, #32]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	330c      	adds	r3, #12
 801134e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6a1b      	ldr	r3, [r3, #32]
 8011354:	7dfa      	ldrb	r2, [r7, #23]
 8011356:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2200      	movs	r2, #0
 801135c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2200      	movs	r2, #0
 8011362:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d129      	bne.n	80113c0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 801136c:	7dbb      	ldrb	r3, [r7, #22]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d00c      	beq.n	801138c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2200      	movs	r2, #0
 8011376:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801137c:	2b00      	cmp	r3, #0
 801137e:	d005      	beq.n	801138c <lwip_netconn_do_close_internal+0x1f0>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011384:	2200      	movs	r2, #0
 8011386:	2104      	movs	r1, #4
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	4798      	blx	r3
      }
      if (shut_rx) {
 801138c:	7bbb      	ldrb	r3, [r7, #14]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d009      	beq.n	80113a6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011396:	2b00      	cmp	r3, #0
 8011398:	d005      	beq.n	80113a6 <lwip_netconn_do_close_internal+0x20a>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801139e:	2200      	movs	r2, #0
 80113a0:	2100      	movs	r1, #0
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	4798      	blx	r3
      }
      if (shut_tx) {
 80113a6:	7b7b      	ldrb	r3, [r7, #13]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d009      	beq.n	80113c0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d005      	beq.n	80113c0 <lwip_netconn_do_close_internal+0x224>
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b8:	2200      	movs	r2, #0
 80113ba:	2102      	movs	r1, #2
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80113c0:	78fb      	ldrb	r3, [r7, #3]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d002      	beq.n	80113cc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80113c6:	68b8      	ldr	r0, [r7, #8]
 80113c8:	f00c fe56 	bl	801e078 <sys_sem_signal>
    }
    return ERR_OK;
 80113cc:	2300      	movs	r3, #0
 80113ce:	e03c      	b.n	801144a <lwip_netconn_do_close_internal+0x2ae>
 80113d0:	08020264 	.word	0x08020264
 80113d4:	08020538 	.word	0x08020538
 80113d8:	080202a8 	.word	0x080202a8
 80113dc:	08020548 	.word	0x08020548
 80113e0:	08020568 	.word	0x08020568
 80113e4:	0802058c 	.word	0x0802058c
 80113e8:	080203cc 	.word	0x080203cc
  }
  if (!close_finished) {
 80113ec:	7d7b      	ldrb	r3, [r7, #21]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d11e      	bne.n	8011430 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	7d1b      	ldrb	r3, [r3, #20]
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d106      	bne.n	8011408 <lwip_netconn_do_close_internal+0x26c>
 80113fa:	4b16      	ldr	r3, [pc, #88]	@ (8011454 <lwip_netconn_do_close_internal+0x2b8>)
 80113fc:	f240 4241 	movw	r2, #1089	@ 0x441
 8011400:	4915      	ldr	r1, [pc, #84]	@ (8011458 <lwip_netconn_do_close_internal+0x2bc>)
 8011402:	4816      	ldr	r0, [pc, #88]	@ (801145c <lwip_netconn_do_close_internal+0x2c0>)
 8011404:	f00d fcc2 	bl	801ed8c <iprintf>
    if (shut_tx) {
 8011408:	7b7b      	ldrb	r3, [r7, #13]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d003      	beq.n	8011416 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801140e:	4914      	ldr	r1, [pc, #80]	@ (8011460 <lwip_netconn_do_close_internal+0x2c4>)
 8011410:	6938      	ldr	r0, [r7, #16]
 8011412:	f004 fbdd 	bl	8015bd0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8011416:	2201      	movs	r2, #1
 8011418:	4912      	ldr	r1, [pc, #72]	@ (8011464 <lwip_netconn_do_close_internal+0x2c8>)
 801141a:	6938      	ldr	r0, [r7, #16]
 801141c:	f004 fc34 	bl	8015c88 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8011420:	4911      	ldr	r1, [pc, #68]	@ (8011468 <lwip_netconn_do_close_internal+0x2cc>)
 8011422:	6938      	ldr	r0, [r7, #16]
 8011424:	f004 fbf6 	bl	8015c14 <tcp_err>
    tcp_arg(tpcb, conn);
 8011428:	6879      	ldr	r1, [r7, #4]
 801142a:	6938      	ldr	r0, [r7, #16]
 801142c:	f004 fb9c 	bl	8015b68 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8011430:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d106      	bne.n	8011446 <lwip_netconn_do_close_internal+0x2aa>
 8011438:	4b06      	ldr	r3, [pc, #24]	@ (8011454 <lwip_netconn_do_close_internal+0x2b8>)
 801143a:	f240 424d 	movw	r2, #1101	@ 0x44d
 801143e:	490b      	ldr	r1, [pc, #44]	@ (801146c <lwip_netconn_do_close_internal+0x2d0>)
 8011440:	4806      	ldr	r0, [pc, #24]	@ (801145c <lwip_netconn_do_close_internal+0x2c0>)
 8011442:	f00d fca3 	bl	801ed8c <iprintf>
  return err;
 8011446:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801144a:	4618      	mov	r0, r3
 801144c:	3718      	adds	r7, #24
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
 8011452:	bf00      	nop
 8011454:	08020264 	.word	0x08020264
 8011458:	080205a0 	.word	0x080205a0
 801145c:	080202a8 	.word	0x080202a8
 8011460:	08010b8d 	.word	0x08010b8d
 8011464:	08010ac5 	.word	0x08010ac5
 8011468:	08010c35 	.word	0x08010c35
 801146c:	080205c4 	.word	0x080205c4

08011470 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	785b      	ldrb	r3, [r3, #1]
 8011482:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8011484:	7afb      	ldrb	r3, [r7, #11]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d00d      	beq.n	80114a6 <lwip_netconn_do_delconn+0x36>
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	781b      	ldrb	r3, [r3, #0]
 8011490:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011494:	2b10      	cmp	r3, #16
 8011496:	d006      	beq.n	80114a6 <lwip_netconn_do_delconn+0x36>
 8011498:	4b60      	ldr	r3, [pc, #384]	@ (801161c <lwip_netconn_do_delconn+0x1ac>)
 801149a:	f240 425e 	movw	r2, #1118	@ 0x45e
 801149e:	4960      	ldr	r1, [pc, #384]	@ (8011620 <lwip_netconn_do_delconn+0x1b0>)
 80114a0:	4860      	ldr	r0, [pc, #384]	@ (8011624 <lwip_netconn_do_delconn+0x1b4>)
 80114a2:	f00d fc73 	bl	801ed8c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80114a6:	7afb      	ldrb	r3, [r7, #11]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d005      	beq.n	80114b8 <lwip_netconn_do_delconn+0x48>
 80114ac:	7afb      	ldrb	r3, [r7, #11]
 80114ae:	2b02      	cmp	r3, #2
 80114b0:	d002      	beq.n	80114b8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80114b2:	7afb      	ldrb	r3, [r7, #11]
 80114b4:	2b03      	cmp	r3, #3
 80114b6:	d109      	bne.n	80114cc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80114b8:	7afb      	ldrb	r3, [r7, #11]
 80114ba:	2b03      	cmp	r3, #3
 80114bc:	d10a      	bne.n	80114d4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	7f1b      	ldrb	r3, [r3, #28]
 80114c4:	f003 0304 	and.w	r3, r3, #4
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d103      	bne.n	80114d4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	22fb      	movs	r2, #251	@ 0xfb
 80114d0:	711a      	strb	r2, [r3, #4]
 80114d2:	e097      	b.n	8011604 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80114d4:	7afb      	ldrb	r3, [r7, #11]
 80114d6:	2b03      	cmp	r3, #3
 80114d8:	d10d      	bne.n	80114f6 <lwip_netconn_do_delconn+0x86>
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	7f1b      	ldrb	r3, [r3, #28]
 80114e0:	f003 0304 	and.w	r3, r3, #4
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d106      	bne.n	80114f6 <lwip_netconn_do_delconn+0x86>
 80114e8:	4b4c      	ldr	r3, [pc, #304]	@ (801161c <lwip_netconn_do_delconn+0x1ac>)
 80114ea:	f240 427a 	movw	r2, #1146	@ 0x47a
 80114ee:	494e      	ldr	r1, [pc, #312]	@ (8011628 <lwip_netconn_do_delconn+0x1b8>)
 80114f0:	484c      	ldr	r0, [pc, #304]	@ (8011624 <lwip_netconn_do_delconn+0x1b4>)
 80114f2:	f00d fc4b 	bl	801ed8c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	2200      	movs	r2, #0
 80114fa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4618      	mov	r0, r3
 8011502:	f7ff fdcd 	bl	80110a0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d05f      	beq.n	80115d0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801151a:	2b10      	cmp	r3, #16
 801151c:	d00d      	beq.n	801153a <lwip_netconn_do_delconn+0xca>
 801151e:	2b20      	cmp	r3, #32
 8011520:	d151      	bne.n	80115c6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	2200      	movs	r2, #0
 801152a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	4618      	mov	r0, r3
 8011534:	f00a f83e 	bl	801b5b4 <udp_remove>
          break;
 8011538:	e046      	b.n	80115c8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	6a1b      	ldr	r3, [r3, #32]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d006      	beq.n	8011552 <lwip_netconn_do_delconn+0xe2>
 8011544:	4b35      	ldr	r3, [pc, #212]	@ (801161c <lwip_netconn_do_delconn+0x1ac>)
 8011546:	f240 4294 	movw	r2, #1172	@ 0x494
 801154a:	4938      	ldr	r1, [pc, #224]	@ (801162c <lwip_netconn_do_delconn+0x1bc>)
 801154c:	4835      	ldr	r0, [pc, #212]	@ (8011624 <lwip_netconn_do_delconn+0x1b4>)
 801154e:	f00d fc1d 	bl	801ed8c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	2204      	movs	r2, #4
 8011558:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2203      	movs	r2, #3
 801155e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	68fa      	ldr	r2, [r7, #12]
 8011566:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	2100      	movs	r1, #0
 801156e:	4618      	mov	r0, r3
 8011570:	f7ff fe14 	bl	801119c <lwip_netconn_do_close_internal>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d04b      	beq.n	8011612 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	785b      	ldrb	r3, [r3, #1]
 8011580:	2b04      	cmp	r3, #4
 8011582:	d006      	beq.n	8011592 <lwip_netconn_do_delconn+0x122>
 8011584:	4b25      	ldr	r3, [pc, #148]	@ (801161c <lwip_netconn_do_delconn+0x1ac>)
 8011586:	f240 429a 	movw	r2, #1178	@ 0x49a
 801158a:	4929      	ldr	r1, [pc, #164]	@ (8011630 <lwip_netconn_do_delconn+0x1c0>)
 801158c:	4825      	ldr	r0, [pc, #148]	@ (8011624 <lwip_netconn_do_delconn+0x1b4>)
 801158e:	f00d fbfd 	bl	801ed8c <iprintf>
            UNLOCK_TCPIP_CORE();
 8011592:	4828      	ldr	r0, [pc, #160]	@ (8011634 <lwip_netconn_do_delconn+0x1c4>)
 8011594:	f00c fdd9 	bl	801e14a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	330c      	adds	r3, #12
 801159e:	2100      	movs	r1, #0
 80115a0:	4618      	mov	r0, r3
 80115a2:	f00c fd38 	bl	801e016 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80115a6:	4823      	ldr	r0, [pc, #140]	@ (8011634 <lwip_netconn_do_delconn+0x1c4>)
 80115a8:	f00c fdc0 	bl	801e12c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	785b      	ldrb	r3, [r3, #1]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d02d      	beq.n	8011612 <lwip_netconn_do_delconn+0x1a2>
 80115b6:	4b19      	ldr	r3, [pc, #100]	@ (801161c <lwip_netconn_do_delconn+0x1ac>)
 80115b8:	f240 429e 	movw	r2, #1182	@ 0x49e
 80115bc:	491c      	ldr	r1, [pc, #112]	@ (8011630 <lwip_netconn_do_delconn+0x1c0>)
 80115be:	4819      	ldr	r0, [pc, #100]	@ (8011624 <lwip_netconn_do_delconn+0x1b4>)
 80115c0:	f00d fbe4 	bl	801ed8c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80115c4:	e025      	b.n	8011612 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80115c6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2200      	movs	r2, #0
 80115ce:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d007      	beq.n	80115ea <lwip_netconn_do_delconn+0x17a>
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115e0:	68fa      	ldr	r2, [r7, #12]
 80115e2:	6810      	ldr	r0, [r2, #0]
 80115e4:	2200      	movs	r2, #0
 80115e6:	2100      	movs	r1, #0
 80115e8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d007      	beq.n	8011604 <lwip_netconn_do_delconn+0x194>
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115fa:	68fa      	ldr	r2, [r7, #12]
 80115fc:	6810      	ldr	r0, [r2, #0]
 80115fe:	2200      	movs	r2, #0
 8011600:	2102      	movs	r1, #2
 8011602:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	330c      	adds	r3, #12
 801160a:	4618      	mov	r0, r3
 801160c:	f00c fd4e 	bl	801e0ac <sys_sem_valid>
 8011610:	e000      	b.n	8011614 <lwip_netconn_do_delconn+0x1a4>
          return;
 8011612:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8011614:	3710      	adds	r7, #16
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	08020264 	.word	0x08020264
 8011620:	080205d4 	.word	0x080205d4
 8011624:	080202a8 	.word	0x080202a8
 8011628:	080205e8 	.word	0x080205e8
 801162c:	08020608 	.word	0x08020608
 8011630:	08020624 	.word	0x08020624
 8011634:	2001f658 	.word	0x2001f658

08011638 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d025      	beq.n	801169a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011658:	2b10      	cmp	r3, #16
 801165a:	d00e      	beq.n	801167a <lwip_netconn_do_bind+0x42>
 801165c:	2b20      	cmp	r3, #32
 801165e:	d119      	bne.n	8011694 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	6858      	ldr	r0, [r3, #4]
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	6899      	ldr	r1, [r3, #8]
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	899b      	ldrh	r3, [r3, #12]
 801166e:	461a      	mov	r2, r3
 8011670:	f009 fdd6 	bl	801b220 <udp_bind>
 8011674:	4603      	mov	r3, r0
 8011676:	73fb      	strb	r3, [r7, #15]
        break;
 8011678:	e011      	b.n	801169e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	6858      	ldr	r0, [r3, #4]
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	6899      	ldr	r1, [r3, #8]
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	899b      	ldrh	r3, [r3, #12]
 8011688:	461a      	mov	r2, r3
 801168a:	f003 f99b 	bl	80149c4 <tcp_bind>
 801168e:	4603      	mov	r3, r0
 8011690:	73fb      	strb	r3, [r7, #15]
        break;
 8011692:	e004      	b.n	801169e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8011694:	23fa      	movs	r3, #250	@ 0xfa
 8011696:	73fb      	strb	r3, [r7, #15]
        break;
 8011698:	e001      	b.n	801169e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 801169a:	23fa      	movs	r3, #250	@ 0xfa
 801169c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	7bfa      	ldrb	r2, [r7, #15]
 80116a2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80116a4:	bf00      	nop
 80116a6:	3710      	adds	r7, #16
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b088      	sub	sp, #32
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	4613      	mov	r3, r2
 80116b8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80116ba:	2300      	movs	r3, #0
 80116bc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d102      	bne.n	80116ce <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80116c8:	f06f 0305 	mvn.w	r3, #5
 80116cc:	e070      	b.n	80117b0 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	785b      	ldrb	r3, [r3, #1]
 80116d2:	2b03      	cmp	r3, #3
 80116d4:	d006      	beq.n	80116e4 <lwip_netconn_do_connected+0x38>
 80116d6:	4b38      	ldr	r3, [pc, #224]	@ (80117b8 <lwip_netconn_do_connected+0x10c>)
 80116d8:	f240 5223 	movw	r2, #1315	@ 0x523
 80116dc:	4937      	ldr	r1, [pc, #220]	@ (80117bc <lwip_netconn_do_connected+0x110>)
 80116de:	4838      	ldr	r0, [pc, #224]	@ (80117c0 <lwip_netconn_do_connected+0x114>)
 80116e0:	f00d fb54 	bl	801ed8c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	6a1b      	ldr	r3, [r3, #32]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d10c      	bne.n	8011706 <lwip_netconn_do_connected+0x5a>
 80116ec:	69bb      	ldr	r3, [r7, #24]
 80116ee:	7f1b      	ldrb	r3, [r3, #28]
 80116f0:	f003 0304 	and.w	r3, r3, #4
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d106      	bne.n	8011706 <lwip_netconn_do_connected+0x5a>
 80116f8:	4b2f      	ldr	r3, [pc, #188]	@ (80117b8 <lwip_netconn_do_connected+0x10c>)
 80116fa:	f240 5224 	movw	r2, #1316	@ 0x524
 80116fe:	4931      	ldr	r1, [pc, #196]	@ (80117c4 <lwip_netconn_do_connected+0x118>)
 8011700:	482f      	ldr	r0, [pc, #188]	@ (80117c0 <lwip_netconn_do_connected+0x114>)
 8011702:	f00d fb43 	bl	801ed8c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	6a1b      	ldr	r3, [r3, #32]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d008      	beq.n	8011720 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	6a1b      	ldr	r3, [r3, #32]
 8011712:	79fa      	ldrb	r2, [r7, #7]
 8011714:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011716:	69bb      	ldr	r3, [r7, #24]
 8011718:	6a1b      	ldr	r3, [r3, #32]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	330c      	adds	r3, #12
 801171e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8011720:	69bb      	ldr	r3, [r7, #24]
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011728:	2b10      	cmp	r3, #16
 801172a:	d106      	bne.n	801173a <lwip_netconn_do_connected+0x8e>
 801172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d102      	bne.n	801173a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8011734:	69b8      	ldr	r0, [r7, #24]
 8011736:	f7ff fb53 	bl	8010de0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	7f1b      	ldrb	r3, [r3, #28]
 801173e:	f003 0304 	and.w	r3, r3, #4
 8011742:	2b00      	cmp	r3, #0
 8011744:	bf0c      	ite	eq
 8011746:	2301      	moveq	r3, #1
 8011748:	2300      	movne	r3, #0
 801174a:	b2db      	uxtb	r3, r3
 801174c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	7f1b      	ldrb	r3, [r3, #28]
 8011752:	f023 0304 	bic.w	r3, r3, #4
 8011756:	b2da      	uxtb	r2, r3
 8011758:	69bb      	ldr	r3, [r7, #24]
 801175a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d002      	beq.n	8011768 <lwip_netconn_do_connected+0xbc>
 8011762:	69fb      	ldr	r3, [r7, #28]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d10c      	bne.n	8011782 <lwip_netconn_do_connected+0xd6>
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d102      	bne.n	8011774 <lwip_netconn_do_connected+0xc8>
 801176e:	69fb      	ldr	r3, [r7, #28]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d006      	beq.n	8011782 <lwip_netconn_do_connected+0xd6>
 8011774:	4b10      	ldr	r3, [pc, #64]	@ (80117b8 <lwip_netconn_do_connected+0x10c>)
 8011776:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 801177a:	4913      	ldr	r1, [pc, #76]	@ (80117c8 <lwip_netconn_do_connected+0x11c>)
 801177c:	4810      	ldr	r0, [pc, #64]	@ (80117c0 <lwip_netconn_do_connected+0x114>)
 801177e:	f00d fb05 	bl	801ed8c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	2200      	movs	r2, #0
 8011786:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	2200      	movs	r2, #0
 801178c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011792:	2b00      	cmp	r3, #0
 8011794:	d005      	beq.n	80117a2 <lwip_netconn_do_connected+0xf6>
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801179a:	2200      	movs	r2, #0
 801179c:	2102      	movs	r1, #2
 801179e:	69b8      	ldr	r0, [r7, #24]
 80117a0:	4798      	blx	r3

  if (was_blocking) {
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d002      	beq.n	80117ae <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 80117a8:	69f8      	ldr	r0, [r7, #28]
 80117aa:	f00c fc65 	bl	801e078 <sys_sem_signal>
  }
  return ERR_OK;
 80117ae:	2300      	movs	r3, #0
}
 80117b0:	4618      	mov	r0, r3
 80117b2:	3720      	adds	r7, #32
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	08020264 	.word	0x08020264
 80117bc:	0802062c 	.word	0x0802062c
 80117c0:	080202a8 	.word	0x080202a8
 80117c4:	0802064c 	.word	0x0802064c
 80117c8:	0802068c 	.word	0x0802068c

080117cc <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b086      	sub	sp, #24
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d102      	bne.n	80117e8 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 80117e2:	23f1      	movs	r3, #241	@ 0xf1
 80117e4:	75fb      	strb	r3, [r7, #23]
 80117e6:	e09b      	b.n	8011920 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80117f2:	2b10      	cmp	r3, #16
 80117f4:	d00f      	beq.n	8011816 <lwip_netconn_do_connect+0x4a>
 80117f6:	2b20      	cmp	r3, #32
 80117f8:	f040 8087 	bne.w	801190a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	6858      	ldr	r0, [r3, #4]
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	6899      	ldr	r1, [r3, #8]
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	899b      	ldrh	r3, [r3, #12]
 801180a:	461a      	mov	r2, r3
 801180c:	f009 fdf6 	bl	801b3fc <udp_connect>
 8011810:	4603      	mov	r3, r0
 8011812:	75fb      	strb	r3, [r7, #23]
        break;
 8011814:	e084      	b.n	8011920 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	785b      	ldrb	r3, [r3, #1]
 801181c:	2b03      	cmp	r3, #3
 801181e:	d102      	bne.n	8011826 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8011820:	23f7      	movs	r3, #247	@ 0xf7
 8011822:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8011824:	e07b      	b.n	801191e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	785b      	ldrb	r3, [r3, #1]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d002      	beq.n	8011836 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8011830:	23f6      	movs	r3, #246	@ 0xf6
 8011832:	75fb      	strb	r3, [r7, #23]
        break;
 8011834:	e073      	b.n	801191e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4618      	mov	r0, r3
 801183c:	f7ff fad0 	bl	8010de0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	6858      	ldr	r0, [r3, #4]
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	6899      	ldr	r1, [r3, #8]
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	899a      	ldrh	r2, [r3, #12]
 801184e:	4b38      	ldr	r3, [pc, #224]	@ (8011930 <lwip_netconn_do_connect+0x164>)
 8011850:	f003 fa40 	bl	8014cd4 <tcp_connect>
 8011854:	4603      	mov	r3, r0
 8011856:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8011858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d15e      	bne.n	801191e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	7f1b      	ldrb	r3, [r3, #28]
 8011866:	f003 0302 	and.w	r3, r3, #2
 801186a:	2b00      	cmp	r3, #0
 801186c:	bf14      	ite	ne
 801186e:	2301      	movne	r3, #1
 8011870:	2300      	moveq	r3, #0
 8011872:	b2db      	uxtb	r3, r3
 8011874:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2203      	movs	r2, #3
 801187c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 801187e:	7bfb      	ldrb	r3, [r7, #15]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d009      	beq.n	8011898 <lwip_netconn_do_connect+0xcc>
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	7f1a      	ldrb	r2, [r3, #28]
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f042 0204 	orr.w	r2, r2, #4
 8011892:	b2d2      	uxtb	r2, r2
 8011894:	771a      	strb	r2, [r3, #28]
 8011896:	e008      	b.n	80118aa <lwip_netconn_do_connect+0xde>
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	7f1a      	ldrb	r2, [r3, #28]
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	f022 0204 	bic.w	r2, r2, #4
 80118a6:	b2d2      	uxtb	r2, r2
 80118a8:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80118aa:	7bfb      	ldrb	r3, [r7, #15]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d002      	beq.n	80118b6 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80118b0:	23fb      	movs	r3, #251	@ 0xfb
 80118b2:	75fb      	strb	r3, [r7, #23]
        break;
 80118b4:	e033      	b.n	801191e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	693a      	ldr	r2, [r7, #16]
 80118bc:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	785b      	ldrb	r3, [r3, #1]
 80118c4:	2b03      	cmp	r3, #3
 80118c6:	d006      	beq.n	80118d6 <lwip_netconn_do_connect+0x10a>
 80118c8:	4b1a      	ldr	r3, [pc, #104]	@ (8011934 <lwip_netconn_do_connect+0x168>)
 80118ca:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 80118ce:	491a      	ldr	r1, [pc, #104]	@ (8011938 <lwip_netconn_do_connect+0x16c>)
 80118d0:	481a      	ldr	r0, [pc, #104]	@ (801193c <lwip_netconn_do_connect+0x170>)
 80118d2:	f00d fa5b 	bl	801ed8c <iprintf>
              UNLOCK_TCPIP_CORE();
 80118d6:	481a      	ldr	r0, [pc, #104]	@ (8011940 <lwip_netconn_do_connect+0x174>)
 80118d8:	f00c fc37 	bl	801e14a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	330c      	adds	r3, #12
 80118e2:	2100      	movs	r1, #0
 80118e4:	4618      	mov	r0, r3
 80118e6:	f00c fb96 	bl	801e016 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 80118ea:	4815      	ldr	r0, [pc, #84]	@ (8011940 <lwip_netconn_do_connect+0x174>)
 80118ec:	f00c fc1e 	bl	801e12c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	785b      	ldrb	r3, [r3, #1]
 80118f6:	2b03      	cmp	r3, #3
 80118f8:	d116      	bne.n	8011928 <lwip_netconn_do_connect+0x15c>
 80118fa:	4b0e      	ldr	r3, [pc, #56]	@ (8011934 <lwip_netconn_do_connect+0x168>)
 80118fc:	f240 5274 	movw	r2, #1396	@ 0x574
 8011900:	490d      	ldr	r1, [pc, #52]	@ (8011938 <lwip_netconn_do_connect+0x16c>)
 8011902:	480e      	ldr	r0, [pc, #56]	@ (801193c <lwip_netconn_do_connect+0x170>)
 8011904:	f00d fa42 	bl	801ed8c <iprintf>
              return;
 8011908:	e00e      	b.n	8011928 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 801190a:	4b0a      	ldr	r3, [pc, #40]	@ (8011934 <lwip_netconn_do_connect+0x168>)
 801190c:	f240 527d 	movw	r2, #1405	@ 0x57d
 8011910:	490c      	ldr	r1, [pc, #48]	@ (8011944 <lwip_netconn_do_connect+0x178>)
 8011912:	480a      	ldr	r0, [pc, #40]	@ (801193c <lwip_netconn_do_connect+0x170>)
 8011914:	f00d fa3a 	bl	801ed8c <iprintf>
 8011918:	23fa      	movs	r3, #250	@ 0xfa
 801191a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 801191c:	e000      	b.n	8011920 <lwip_netconn_do_connect+0x154>
        break;
 801191e:	bf00      	nop
    }
  }
  msg->err = err;
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	7dfa      	ldrb	r2, [r7, #23]
 8011924:	711a      	strb	r2, [r3, #4]
 8011926:	e000      	b.n	801192a <lwip_netconn_do_connect+0x15e>
              return;
 8011928:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 801192a:	3718      	adds	r7, #24
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}
 8011930:	080116ad 	.word	0x080116ad
 8011934:	08020264 	.word	0x08020264
 8011938:	08020624 	.word	0x08020624
 801193c:	080202a8 	.word	0x080202a8
 8011940:	2001f658 	.word	0x2001f658
 8011944:	080206ac 	.word	0x080206ac

08011948 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b084      	sub	sp, #16
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801195e:	2b20      	cmp	r3, #32
 8011960:	d109      	bne.n	8011976 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	4618      	mov	r0, r3
 801196a:	f009 fddb 	bl	801b524 <udp_disconnect>
    msg->err = ERR_OK;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2200      	movs	r2, #0
 8011972:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011974:	e002      	b.n	801197c <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	22fa      	movs	r2, #250	@ 0xfa
 801197a:	711a      	strb	r2, [r3, #4]
}
 801197c:	bf00      	nop
 801197e:	3710      	adds	r7, #16
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4618      	mov	r0, r3
 8011996:	f7fe ff05 	bl	80107a4 <netconn_err>
 801199a:	4603      	mov	r3, r0
 801199c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d134      	bne.n	8011a10 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d02d      	beq.n	8011a0c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80119ba:	2b20      	cmp	r3, #32
 80119bc:	d123      	bne.n	8011a06 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	689b      	ldr	r3, [r3, #8]
 80119c2:	689b      	ldr	r3, [r3, #8]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d10c      	bne.n	80119e2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	685a      	ldr	r2, [r3, #4]
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	689b      	ldr	r3, [r3, #8]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	4619      	mov	r1, r3
 80119d6:	4610      	mov	r0, r2
 80119d8:	f009 f9c6 	bl	801ad68 <udp_send>
 80119dc:	4603      	mov	r3, r0
 80119de:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80119e0:	e016      	b.n	8011a10 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	6858      	ldr	r0, [r3, #4]
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	689b      	ldr	r3, [r3, #8]
 80119ec:	6819      	ldr	r1, [r3, #0]
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	689b      	ldr	r3, [r3, #8]
 80119f2:	f103 0208 	add.w	r2, r3, #8
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	689b      	ldr	r3, [r3, #8]
 80119fa:	899b      	ldrh	r3, [r3, #12]
 80119fc:	f009 f9e8 	bl	801add0 <udp_sendto>
 8011a00:	4603      	mov	r3, r0
 8011a02:	73fb      	strb	r3, [r7, #15]
          break;
 8011a04:	e004      	b.n	8011a10 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8011a06:	23f5      	movs	r3, #245	@ 0xf5
 8011a08:	73fb      	strb	r3, [r7, #15]
          break;
 8011a0a:	e001      	b.n	8011a10 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8011a0c:	23f5      	movs	r3, #245	@ 0xf5
 8011a0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	7bfa      	ldrb	r2, [r7, #15]
 8011a14:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8011a16:	bf00      	nop
 8011a18:	3710      	adds	r7, #16
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}

08011a1e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8011a1e:	b580      	push	{r7, lr}
 8011a20:	b086      	sub	sp, #24
 8011a22:	af00      	add	r7, sp, #0
 8011a24:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d022      	beq.n	8011a80 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011a44:	2b10      	cmp	r3, #16
 8011a46:	d11b      	bne.n	8011a80 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011a54:	d202      	bcs.n	8011a5c <lwip_netconn_do_recv+0x3e>
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	b29b      	uxth	r3, r3
 8011a5a:	e001      	b.n	8011a60 <lwip_netconn_do_recv+0x42>
 8011a5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a60:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	89fa      	ldrh	r2, [r7, #14]
 8011a6a:	4611      	mov	r1, r2
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f003 f89b 	bl	8014ba8 <tcp_recved>
        remaining -= recved;
 8011a72:	89fb      	ldrh	r3, [r7, #14]
 8011a74:	697a      	ldr	r2, [r7, #20]
 8011a76:	1ad3      	subs	r3, r2, r3
 8011a78:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d1e6      	bne.n	8011a4e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011a80:	bf00      	nop
 8011a82:	3718      	adds	r7, #24
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}

08011a88 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b088      	sub	sp, #32
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
 8011a90:	460b      	mov	r3, r1
 8011a92:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8011a94:	2300      	movs	r3, #0
 8011a96:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d106      	bne.n	8011aac <lwip_netconn_do_writemore+0x24>
 8011a9e:	4b96      	ldr	r3, [pc, #600]	@ (8011cf8 <lwip_netconn_do_writemore+0x270>)
 8011aa0:	f240 6273 	movw	r2, #1651	@ 0x673
 8011aa4:	4995      	ldr	r1, [pc, #596]	@ (8011cfc <lwip_netconn_do_writemore+0x274>)
 8011aa6:	4896      	ldr	r0, [pc, #600]	@ (8011d00 <lwip_netconn_do_writemore+0x278>)
 8011aa8:	f00d f970 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	785b      	ldrb	r3, [r3, #1]
 8011ab0:	2b01      	cmp	r3, #1
 8011ab2:	d006      	beq.n	8011ac2 <lwip_netconn_do_writemore+0x3a>
 8011ab4:	4b90      	ldr	r3, [pc, #576]	@ (8011cf8 <lwip_netconn_do_writemore+0x270>)
 8011ab6:	f240 6274 	movw	r2, #1652	@ 0x674
 8011aba:	4992      	ldr	r1, [pc, #584]	@ (8011d04 <lwip_netconn_do_writemore+0x27c>)
 8011abc:	4890      	ldr	r0, [pc, #576]	@ (8011d00 <lwip_netconn_do_writemore+0x278>)
 8011abe:	f00d f965 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6a1b      	ldr	r3, [r3, #32]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d106      	bne.n	8011ad8 <lwip_netconn_do_writemore+0x50>
 8011aca:	4b8b      	ldr	r3, [pc, #556]	@ (8011cf8 <lwip_netconn_do_writemore+0x270>)
 8011acc:	f240 6275 	movw	r2, #1653	@ 0x675
 8011ad0:	498d      	ldr	r1, [pc, #564]	@ (8011d08 <lwip_netconn_do_writemore+0x280>)
 8011ad2:	488b      	ldr	r0, [pc, #556]	@ (8011d00 <lwip_netconn_do_writemore+0x278>)
 8011ad4:	f00d f95a 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d106      	bne.n	8011aee <lwip_netconn_do_writemore+0x66>
 8011ae0:	4b85      	ldr	r3, [pc, #532]	@ (8011cf8 <lwip_netconn_do_writemore+0x270>)
 8011ae2:	f240 6276 	movw	r2, #1654	@ 0x676
 8011ae6:	4989      	ldr	r1, [pc, #548]	@ (8011d0c <lwip_netconn_do_writemore+0x284>)
 8011ae8:	4885      	ldr	r0, [pc, #532]	@ (8011d00 <lwip_netconn_do_writemore+0x278>)
 8011aea:	f00d f94f 	bl	801ed8c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a1b      	ldr	r3, [r3, #32]
 8011af2:	699a      	ldr	r2, [r3, #24]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6a1b      	ldr	r3, [r3, #32]
 8011af8:	695b      	ldr	r3, [r3, #20]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d306      	bcc.n	8011b0c <lwip_netconn_do_writemore+0x84>
 8011afe:	4b7e      	ldr	r3, [pc, #504]	@ (8011cf8 <lwip_netconn_do_writemore+0x270>)
 8011b00:	f240 6277 	movw	r2, #1655	@ 0x677
 8011b04:	4982      	ldr	r1, [pc, #520]	@ (8011d10 <lwip_netconn_do_writemore+0x288>)
 8011b06:	487e      	ldr	r0, [pc, #504]	@ (8011d00 <lwip_netconn_do_writemore+0x278>)
 8011b08:	f00d f940 	bl	801ed8c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6a1b      	ldr	r3, [r3, #32]
 8011b10:	899b      	ldrh	r3, [r3, #12]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d106      	bne.n	8011b24 <lwip_netconn_do_writemore+0x9c>
 8011b16:	4b78      	ldr	r3, [pc, #480]	@ (8011cf8 <lwip_netconn_do_writemore+0x270>)
 8011b18:	f240 6279 	movw	r2, #1657	@ 0x679
 8011b1c:	497d      	ldr	r1, [pc, #500]	@ (8011d14 <lwip_netconn_do_writemore+0x28c>)
 8011b1e:	4878      	ldr	r0, [pc, #480]	@ (8011d00 <lwip_netconn_do_writemore+0x278>)
 8011b20:	f00d f934 	bl	801ed8c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6a1b      	ldr	r3, [r3, #32]
 8011b28:	7f1b      	ldrb	r3, [r3, #28]
 8011b2a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	7f1b      	ldrb	r3, [r3, #28]
 8011b30:	f003 0302 	and.w	r3, r3, #2
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d104      	bne.n	8011b42 <lwip_netconn_do_writemore+0xba>
 8011b38:	7ebb      	ldrb	r3, [r7, #26]
 8011b3a:	f003 0304 	and.w	r3, r3, #4
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d001      	beq.n	8011b46 <lwip_netconn_do_writemore+0xbe>
 8011b42:	2301      	movs	r3, #1
 8011b44:	e000      	b.n	8011b48 <lwip_netconn_do_writemore+0xc0>
 8011b46:	2300      	movs	r3, #0
 8011b48:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6a1b      	ldr	r3, [r3, #32]
 8011b4e:	689b      	ldr	r3, [r3, #8]
 8011b50:	681a      	ldr	r2, [r3, #0]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6a1b      	ldr	r3, [r3, #32]
 8011b56:	691b      	ldr	r3, [r3, #16]
 8011b58:	4413      	add	r3, r2
 8011b5a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6a1b      	ldr	r3, [r3, #32]
 8011b60:	689b      	ldr	r3, [r3, #8]
 8011b62:	685a      	ldr	r2, [r3, #4]
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6a1b      	ldr	r3, [r3, #32]
 8011b68:	691b      	ldr	r3, [r3, #16]
 8011b6a:	1ad3      	subs	r3, r2, r3
 8011b6c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011b74:	d307      	bcc.n	8011b86 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8011b76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011b7a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011b7c:	7ebb      	ldrb	r3, [r7, #26]
 8011b7e:	f043 0302 	orr.w	r3, r3, #2
 8011b82:	76bb      	strb	r3, [r7, #26]
 8011b84:	e001      	b.n	8011b8a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011b92:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8011b94:	89fa      	ldrh	r2, [r7, #14]
 8011b96:	8bbb      	ldrh	r3, [r7, #28]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d216      	bcs.n	8011bca <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8011b9c:	89fb      	ldrh	r3, [r7, #14]
 8011b9e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8011ba0:	7e3b      	ldrb	r3, [r7, #24]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d00d      	beq.n	8011bc2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8011ba6:	8bbb      	ldrh	r3, [r7, #28]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d10e      	bne.n	8011bca <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6a1b      	ldr	r3, [r3, #32]
 8011bb0:	699b      	ldr	r3, [r3, #24]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d102      	bne.n	8011bbc <lwip_netconn_do_writemore+0x134>
 8011bb6:	f06f 0306 	mvn.w	r3, #6
 8011bba:	e000      	b.n	8011bbe <lwip_netconn_do_writemore+0x136>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8011bc0:	e07d      	b.n	8011cbe <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8011bc2:	7ebb      	ldrb	r3, [r7, #26]
 8011bc4:	f043 0302 	orr.w	r3, r3, #2
 8011bc8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6a1b      	ldr	r3, [r3, #32]
 8011bce:	691a      	ldr	r2, [r3, #16]
 8011bd0:	8bbb      	ldrh	r3, [r7, #28]
 8011bd2:	441a      	add	r2, r3
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6a1b      	ldr	r3, [r3, #32]
 8011bd8:	689b      	ldr	r3, [r3, #8]
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d906      	bls.n	8011bee <lwip_netconn_do_writemore+0x166>
 8011be0:	4b45      	ldr	r3, [pc, #276]	@ (8011cf8 <lwip_netconn_do_writemore+0x270>)
 8011be2:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8011be6:	494c      	ldr	r1, [pc, #304]	@ (8011d18 <lwip_netconn_do_writemore+0x290>)
 8011be8:	4845      	ldr	r0, [pc, #276]	@ (8011d00 <lwip_netconn_do_writemore+0x278>)
 8011bea:	f00d f8cf 	bl	801ed8c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011bee:	8bbb      	ldrh	r3, [r7, #28]
 8011bf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	d103      	bne.n	8011c00 <lwip_netconn_do_writemore+0x178>
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011bfe:	d209      	bcs.n	8011c14 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011c04:	8bba      	ldrh	r2, [r7, #28]
 8011c06:	429a      	cmp	r2, r3
 8011c08:	d10b      	bne.n	8011c22 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6a1b      	ldr	r3, [r3, #32]
 8011c0e:	899b      	ldrh	r3, [r3, #12]
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	d906      	bls.n	8011c22 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8011c14:	2301      	movs	r3, #1
 8011c16:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011c18:	7ebb      	ldrb	r3, [r7, #26]
 8011c1a:	f043 0302 	orr.w	r3, r3, #2
 8011c1e:	76bb      	strb	r3, [r7, #26]
 8011c20:	e001      	b.n	8011c26 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8011c22:	2300      	movs	r3, #0
 8011c24:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6858      	ldr	r0, [r3, #4]
 8011c2a:	7ebb      	ldrb	r3, [r7, #26]
 8011c2c:	8bba      	ldrh	r2, [r7, #28]
 8011c2e:	6979      	ldr	r1, [r7, #20]
 8011c30:	f006 fee0 	bl	80189f4 <tcp_write>
 8011c34:	4603      	mov	r3, r0
 8011c36:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8011c38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d12c      	bne.n	8011c9a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6a1b      	ldr	r3, [r3, #32]
 8011c44:	6999      	ldr	r1, [r3, #24]
 8011c46:	8bba      	ldrh	r2, [r7, #28]
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6a1b      	ldr	r3, [r3, #32]
 8011c4c:	440a      	add	r2, r1
 8011c4e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6a1b      	ldr	r3, [r3, #32]
 8011c54:	6919      	ldr	r1, [r3, #16]
 8011c56:	8bba      	ldrh	r2, [r7, #28]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6a1b      	ldr	r3, [r3, #32]
 8011c5c:	440a      	add	r2, r1
 8011c5e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6a1b      	ldr	r3, [r3, #32]
 8011c64:	691a      	ldr	r2, [r3, #16]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6a1b      	ldr	r3, [r3, #32]
 8011c6a:	689b      	ldr	r3, [r3, #8]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d113      	bne.n	8011c9a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6a1b      	ldr	r3, [r3, #32]
 8011c76:	899a      	ldrh	r2, [r3, #12]
 8011c78:	3a01      	subs	r2, #1
 8011c7a:	b292      	uxth	r2, r2
 8011c7c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6a1b      	ldr	r3, [r3, #32]
 8011c82:	899b      	ldrh	r3, [r3, #12]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d008      	beq.n	8011c9a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6a1b      	ldr	r3, [r3, #32]
 8011c8c:	689a      	ldr	r2, [r3, #8]
 8011c8e:	3208      	adds	r2, #8
 8011c90:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6a1b      	ldr	r3, [r3, #32]
 8011c96:	2200      	movs	r2, #0
 8011c98:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8011c9a:	7e7b      	ldrb	r3, [r7, #25]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d004      	beq.n	8011caa <lwip_netconn_do_writemore+0x222>
 8011ca0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	f43f af50 	beq.w	8011b4a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8011caa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d004      	beq.n	8011cbc <lwip_netconn_do_writemore+0x234>
 8011cb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011cba:	d146      	bne.n	8011d4a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8011cbc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8011cbe:	7e3b      	ldrb	r3, [r7, #24]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d02b      	beq.n	8011d1c <lwip_netconn_do_writemore+0x294>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6a1b      	ldr	r3, [r3, #32]
 8011cc8:	699a      	ldr	r2, [r3, #24]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6a1b      	ldr	r3, [r3, #32]
 8011cce:	695b      	ldr	r3, [r3, #20]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d223      	bcs.n	8011d1c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d005      	beq.n	8011ce8 <lwip_netconn_do_writemore+0x260>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	2103      	movs	r1, #3
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	7f1b      	ldrb	r3, [r3, #28]
 8011cec:	f043 0310 	orr.w	r3, r3, #16
 8011cf0:	b2da      	uxtb	r2, r3
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	771a      	strb	r2, [r3, #28]
 8011cf6:	e028      	b.n	8011d4a <lwip_netconn_do_writemore+0x2c2>
 8011cf8:	08020264 	.word	0x08020264
 8011cfc:	080203bc 	.word	0x080203bc
 8011d00:	080202a8 	.word	0x080202a8
 8011d04:	080206c4 	.word	0x080206c4
 8011d08:	080203cc 	.word	0x080203cc
 8011d0c:	080206e4 	.word	0x080206e4
 8011d10:	080206fc 	.word	0x080206fc
 8011d14:	0802073c 	.word	0x0802073c
 8011d18:	08020764 	.word	0x08020764
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011d24:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011d28:	d305      	bcc.n	8011d36 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011d32:	2b04      	cmp	r3, #4
 8011d34:	d909      	bls.n	8011d4a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d005      	beq.n	8011d4a <lwip_netconn_do_writemore+0x2c2>
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d42:	2200      	movs	r2, #0
 8011d44:	2103      	movs	r1, #3
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8011d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d11d      	bne.n	8011d8e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6a1b      	ldr	r3, [r3, #32]
 8011d56:	699a      	ldr	r2, [r3, #24]
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6a1b      	ldr	r3, [r3, #32]
 8011d5c:	695b      	ldr	r3, [r3, #20]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d002      	beq.n	8011d68 <lwip_netconn_do_writemore+0x2e0>
 8011d62:	7e3b      	ldrb	r3, [r7, #24]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d001      	beq.n	8011d6c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8011d68:	2301      	movs	r3, #1
 8011d6a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	4618      	mov	r0, r3
 8011d72:	f007 fc87 	bl	8019684 <tcp_output>
 8011d76:	4603      	mov	r3, r0
 8011d78:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8011d7a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011d7e:	f113 0f04 	cmn.w	r3, #4
 8011d82:	d12c      	bne.n	8011dde <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011d84:	7b3b      	ldrb	r3, [r7, #12]
 8011d86:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011d88:	2301      	movs	r3, #1
 8011d8a:	76fb      	strb	r3, [r7, #27]
 8011d8c:	e027      	b.n	8011dde <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8011d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011d92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d96:	d120      	bne.n	8011dda <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f007 fc71 	bl	8019684 <tcp_output>
 8011da2:	4603      	mov	r3, r0
 8011da4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8011da6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011daa:	f113 0f04 	cmn.w	r3, #4
 8011dae:	d104      	bne.n	8011dba <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011db0:	7b7b      	ldrb	r3, [r7, #13]
 8011db2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011db4:	2301      	movs	r3, #1
 8011db6:	76fb      	strb	r3, [r7, #27]
 8011db8:	e011      	b.n	8011dde <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8011dba:	7e3b      	ldrb	r3, [r7, #24]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d00e      	beq.n	8011dde <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6a1b      	ldr	r3, [r3, #32]
 8011dc4:	699b      	ldr	r3, [r3, #24]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d102      	bne.n	8011dd0 <lwip_netconn_do_writemore+0x348>
 8011dca:	f06f 0306 	mvn.w	r3, #6
 8011dce:	e000      	b.n	8011dd2 <lwip_netconn_do_writemore+0x34a>
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	76fb      	strb	r3, [r7, #27]
 8011dd8:	e001      	b.n	8011dde <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8011dda:	2301      	movs	r3, #1
 8011ddc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8011dde:	7efb      	ldrb	r3, [r7, #27]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d015      	beq.n	8011e10 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6a1b      	ldr	r3, [r3, #32]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	330c      	adds	r3, #12
 8011dec:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6a1b      	ldr	r3, [r3, #32]
 8011df2:	7ffa      	ldrb	r2, [r7, #31]
 8011df4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2200      	movs	r2, #0
 8011e00:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011e02:	78fb      	ldrb	r3, [r7, #3]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d006      	beq.n	8011e16 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8011e08:	68b8      	ldr	r0, [r7, #8]
 8011e0a:	f00c f935 	bl	801e078 <sys_sem_signal>
 8011e0e:	e002      	b.n	8011e16 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8011e10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011e14:	e000      	b.n	8011e18 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8011e16:	2300      	movs	r3, #0
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3720      	adds	r7, #32
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	785b      	ldrb	r3, [r3, #1]
 8011e32:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d069      	beq.n	8011f12 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8011e48:	2b10      	cmp	r3, #16
 8011e4a:	d162      	bne.n	8011f12 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011e50:	2b03      	cmp	r3, #3
 8011e52:	d002      	beq.n	8011e5a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011e54:	7afb      	ldrb	r3, [r7, #11]
 8011e56:	2b02      	cmp	r3, #2
 8011e58:	d05b      	beq.n	8011f12 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8011e5a:	7afb      	ldrb	r3, [r7, #11]
 8011e5c:	2b03      	cmp	r3, #3
 8011e5e:	d103      	bne.n	8011e68 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	22f5      	movs	r2, #245	@ 0xf5
 8011e64:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011e66:	e059      	b.n	8011f1c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8011e68:	7afb      	ldrb	r3, [r7, #11]
 8011e6a:	2b01      	cmp	r3, #1
 8011e6c:	d103      	bne.n	8011e76 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	22fb      	movs	r2, #251	@ 0xfb
 8011e72:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011e74:	e052      	b.n	8011f1c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	7a1b      	ldrb	r3, [r3, #8]
 8011e7a:	f003 0301 	and.w	r3, r3, #1
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d004      	beq.n	8011e8c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7ff f90a 	bl	80110a0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	6a1b      	ldr	r3, [r3, #32]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d006      	beq.n	8011ea4 <lwip_netconn_do_close+0x84>
 8011e96:	4b23      	ldr	r3, [pc, #140]	@ (8011f24 <lwip_netconn_do_close+0x104>)
 8011e98:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8011e9c:	4922      	ldr	r1, [pc, #136]	@ (8011f28 <lwip_netconn_do_close+0x108>)
 8011e9e:	4823      	ldr	r0, [pc, #140]	@ (8011f2c <lwip_netconn_do_close+0x10c>)
 8011ea0:	f00c ff74 	bl	801ed8c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2204      	movs	r2, #4
 8011eaa:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	68fa      	ldr	r2, [r7, #12]
 8011eb2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	2100      	movs	r1, #0
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7ff f96e 	bl	801119c <lwip_netconn_do_close_internal>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d029      	beq.n	8011f1a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	785b      	ldrb	r3, [r3, #1]
 8011ecc:	2b04      	cmp	r3, #4
 8011ece:	d006      	beq.n	8011ede <lwip_netconn_do_close+0xbe>
 8011ed0:	4b14      	ldr	r3, [pc, #80]	@ (8011f24 <lwip_netconn_do_close+0x104>)
 8011ed2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8011ed6:	4916      	ldr	r1, [pc, #88]	@ (8011f30 <lwip_netconn_do_close+0x110>)
 8011ed8:	4814      	ldr	r0, [pc, #80]	@ (8011f2c <lwip_netconn_do_close+0x10c>)
 8011eda:	f00c ff57 	bl	801ed8c <iprintf>
        UNLOCK_TCPIP_CORE();
 8011ede:	4815      	ldr	r0, [pc, #84]	@ (8011f34 <lwip_netconn_do_close+0x114>)
 8011ee0:	f00c f933 	bl	801e14a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	330c      	adds	r3, #12
 8011eea:	2100      	movs	r1, #0
 8011eec:	4618      	mov	r0, r3
 8011eee:	f00c f892 	bl	801e016 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8011ef2:	4810      	ldr	r0, [pc, #64]	@ (8011f34 <lwip_netconn_do_close+0x114>)
 8011ef4:	f00c f91a 	bl	801e12c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	785b      	ldrb	r3, [r3, #1]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d00b      	beq.n	8011f1a <lwip_netconn_do_close+0xfa>
 8011f02:	4b08      	ldr	r3, [pc, #32]	@ (8011f24 <lwip_netconn_do_close+0x104>)
 8011f04:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8011f08:	4909      	ldr	r1, [pc, #36]	@ (8011f30 <lwip_netconn_do_close+0x110>)
 8011f0a:	4808      	ldr	r0, [pc, #32]	@ (8011f2c <lwip_netconn_do_close+0x10c>)
 8011f0c:	f00c ff3e 	bl	801ed8c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8011f10:	e003      	b.n	8011f1a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	22f5      	movs	r2, #245	@ 0xf5
 8011f16:	711a      	strb	r2, [r3, #4]
 8011f18:	e000      	b.n	8011f1c <lwip_netconn_do_close+0xfc>
      return;
 8011f1a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	08020264 	.word	0x08020264
 8011f28:	08020608 	.word	0x08020608
 8011f2c:	080202a8 	.word	0x080202a8
 8011f30:	08020624 	.word	0x08020624
 8011f34:	2001f658 	.word	0x2001f658

08011f38 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	4603      	mov	r3, r0
 8011f40:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8011f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	dc04      	bgt.n	8011f54 <lwip_strerr+0x1c>
 8011f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f4e:	f113 0f10 	cmn.w	r3, #16
 8011f52:	da01      	bge.n	8011f58 <lwip_strerr+0x20>
    return "Unknown error.";
 8011f54:	4b06      	ldr	r3, [pc, #24]	@ (8011f70 <lwip_strerr+0x38>)
 8011f56:	e005      	b.n	8011f64 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8011f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f5c:	425b      	negs	r3, r3
 8011f5e:	4a05      	ldr	r2, [pc, #20]	@ (8011f74 <lwip_strerr+0x3c>)
 8011f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	370c      	adds	r7, #12
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr
 8011f70:	080208f8 	.word	0x080208f8
 8011f74:	20000024 	.word	0x20000024

08011f78 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011f7e:	2006      	movs	r0, #6
 8011f80:	f000 ff04 	bl	8012d8c <memp_malloc>
 8011f84:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d004      	beq.n	8011f96 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8011f8c:	2210      	movs	r2, #16
 8011f8e:	2100      	movs	r1, #0
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f00d f85b 	bl	801f04c <memset>
  }
  return buf;
 8011f96:	687b      	ldr	r3, [r7, #4]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3708      	adds	r7, #8
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d013      	beq.n	8011fd6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d00b      	beq.n	8011fce <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f001 fef6 	bl	8013dac <pbuf_free>
      buf->p = buf->ptr = NULL;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	605a      	str	r2, [r3, #4]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	685a      	ldr	r2, [r3, #4]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011fce:	6879      	ldr	r1, [r7, #4]
 8011fd0:	2006      	movs	r0, #6
 8011fd2:	f000 ff51 	bl	8012e78 <memp_free>
  }
}
 8011fd6:	bf00      	nop
 8011fd8:	3708      	adds	r7, #8
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
	...

08011fe0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	4613      	mov	r3, r2
 8011fec:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d108      	bne.n	8012006 <netbuf_ref+0x26>
 8011ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8012068 <netbuf_ref+0x88>)
 8011ff6:	2299      	movs	r2, #153	@ 0x99
 8011ff8:	491c      	ldr	r1, [pc, #112]	@ (801206c <netbuf_ref+0x8c>)
 8011ffa:	481d      	ldr	r0, [pc, #116]	@ (8012070 <netbuf_ref+0x90>)
 8011ffc:	f00c fec6 	bl	801ed8c <iprintf>
 8012000:	f06f 030f 	mvn.w	r3, #15
 8012004:	e02b      	b.n	801205e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d004      	beq.n	8012018 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	4618      	mov	r0, r3
 8012014:	f001 feca 	bl	8013dac <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8012018:	2241      	movs	r2, #65	@ 0x41
 801201a:	2100      	movs	r1, #0
 801201c:	2036      	movs	r0, #54	@ 0x36
 801201e:	f001 fbe1 	bl	80137e4 <pbuf_alloc>
 8012022:	4602      	mov	r2, r0
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d105      	bne.n	801203c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	2200      	movs	r2, #0
 8012034:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8012036:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801203a:	e010      	b.n	801205e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	68ba      	ldr	r2, [r7, #8]
 8012042:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	88fa      	ldrh	r2, [r7, #6]
 801204a:	811a      	strh	r2, [r3, #8]
 801204c:	68fa      	ldr	r2, [r7, #12]
 801204e:	6812      	ldr	r2, [r2, #0]
 8012050:	891b      	ldrh	r3, [r3, #8]
 8012052:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 801205c:	2300      	movs	r3, #0
}
 801205e:	4618      	mov	r0, r3
 8012060:	3710      	adds	r7, #16
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	08020908 	.word	0x08020908
 801206c:	080209c0 	.word	0x080209c0
 8012070:	08020958 	.word	0x08020958

08012074 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b084      	sub	sp, #16
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801207e:	f008 fbc5 	bl	801a80c <sys_timeouts_sleeptime>
 8012082:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801208a:	d10b      	bne.n	80120a4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801208c:	4813      	ldr	r0, [pc, #76]	@ (80120dc <tcpip_timeouts_mbox_fetch+0x68>)
 801208e:	f00c f85c 	bl	801e14a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012092:	2200      	movs	r2, #0
 8012094:	6839      	ldr	r1, [r7, #0]
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f00b ff32 	bl	801df00 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801209c:	480f      	ldr	r0, [pc, #60]	@ (80120dc <tcpip_timeouts_mbox_fetch+0x68>)
 801209e:	f00c f845 	bl	801e12c <sys_mutex_lock>
    return;
 80120a2:	e018      	b.n	80120d6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d102      	bne.n	80120b0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80120aa:	f008 fb75 	bl	801a798 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80120ae:	e7e6      	b.n	801207e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80120b0:	480a      	ldr	r0, [pc, #40]	@ (80120dc <tcpip_timeouts_mbox_fetch+0x68>)
 80120b2:	f00c f84a 	bl	801e14a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80120b6:	68fa      	ldr	r2, [r7, #12]
 80120b8:	6839      	ldr	r1, [r7, #0]
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f00b ff20 	bl	801df00 <sys_arch_mbox_fetch>
 80120c0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80120c2:	4806      	ldr	r0, [pc, #24]	@ (80120dc <tcpip_timeouts_mbox_fetch+0x68>)
 80120c4:	f00c f832 	bl	801e12c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80120ce:	d102      	bne.n	80120d6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80120d0:	f008 fb62 	bl	801a798 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80120d4:	e7d3      	b.n	801207e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80120d6:	3710      	adds	r7, #16
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	2001f658 	.word	0x2001f658

080120e0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80120e8:	4810      	ldr	r0, [pc, #64]	@ (801212c <tcpip_thread+0x4c>)
 80120ea:	f00c f81f 	bl	801e12c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80120ee:	4b10      	ldr	r3, [pc, #64]	@ (8012130 <tcpip_thread+0x50>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d005      	beq.n	8012102 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80120f6:	4b0e      	ldr	r3, [pc, #56]	@ (8012130 <tcpip_thread+0x50>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	4a0e      	ldr	r2, [pc, #56]	@ (8012134 <tcpip_thread+0x54>)
 80120fc:	6812      	ldr	r2, [r2, #0]
 80120fe:	4610      	mov	r0, r2
 8012100:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012102:	f107 030c 	add.w	r3, r7, #12
 8012106:	4619      	mov	r1, r3
 8012108:	480b      	ldr	r0, [pc, #44]	@ (8012138 <tcpip_thread+0x58>)
 801210a:	f7ff ffb3 	bl	8012074 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d106      	bne.n	8012122 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012114:	4b09      	ldr	r3, [pc, #36]	@ (801213c <tcpip_thread+0x5c>)
 8012116:	2291      	movs	r2, #145	@ 0x91
 8012118:	4909      	ldr	r1, [pc, #36]	@ (8012140 <tcpip_thread+0x60>)
 801211a:	480a      	ldr	r0, [pc, #40]	@ (8012144 <tcpip_thread+0x64>)
 801211c:	f00c fe36 	bl	801ed8c <iprintf>
      continue;
 8012120:	e003      	b.n	801212a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	4618      	mov	r0, r3
 8012126:	f000 f80f 	bl	8012148 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801212a:	e7ea      	b.n	8012102 <tcpip_thread+0x22>
 801212c:	2001f658 	.word	0x2001f658
 8012130:	2001f64c 	.word	0x2001f64c
 8012134:	2001f650 	.word	0x2001f650
 8012138:	2001f654 	.word	0x2001f654
 801213c:	08020aa0 	.word	0x08020aa0
 8012140:	08020ad0 	.word	0x08020ad0
 8012144:	08020af0 	.word	0x08020af0

08012148 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	2b02      	cmp	r3, #2
 8012156:	d026      	beq.n	80121a6 <tcpip_thread_handle_msg+0x5e>
 8012158:	2b02      	cmp	r3, #2
 801215a:	dc2b      	bgt.n	80121b4 <tcpip_thread_handle_msg+0x6c>
 801215c:	2b00      	cmp	r3, #0
 801215e:	d002      	beq.n	8012166 <tcpip_thread_handle_msg+0x1e>
 8012160:	2b01      	cmp	r3, #1
 8012162:	d015      	beq.n	8012190 <tcpip_thread_handle_msg+0x48>
 8012164:	e026      	b.n	80121b4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	68db      	ldr	r3, [r3, #12]
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	6850      	ldr	r0, [r2, #4]
 801216e:	687a      	ldr	r2, [r7, #4]
 8012170:	6892      	ldr	r2, [r2, #8]
 8012172:	4611      	mov	r1, r2
 8012174:	4798      	blx	r3
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	d004      	beq.n	8012186 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	685b      	ldr	r3, [r3, #4]
 8012180:	4618      	mov	r0, r3
 8012182:	f001 fe13 	bl	8013dac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012186:	6879      	ldr	r1, [r7, #4]
 8012188:	2009      	movs	r0, #9
 801218a:	f000 fe75 	bl	8012e78 <memp_free>
      break;
 801218e:	e018      	b.n	80121c2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	687a      	ldr	r2, [r7, #4]
 8012196:	6892      	ldr	r2, [r2, #8]
 8012198:	4610      	mov	r0, r2
 801219a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801219c:	6879      	ldr	r1, [r7, #4]
 801219e:	2008      	movs	r0, #8
 80121a0:	f000 fe6a 	bl	8012e78 <memp_free>
      break;
 80121a4:	e00d      	b.n	80121c2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	6892      	ldr	r2, [r2, #8]
 80121ae:	4610      	mov	r0, r2
 80121b0:	4798      	blx	r3
      break;
 80121b2:	e006      	b.n	80121c2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80121b4:	4b05      	ldr	r3, [pc, #20]	@ (80121cc <tcpip_thread_handle_msg+0x84>)
 80121b6:	22cf      	movs	r2, #207	@ 0xcf
 80121b8:	4905      	ldr	r1, [pc, #20]	@ (80121d0 <tcpip_thread_handle_msg+0x88>)
 80121ba:	4806      	ldr	r0, [pc, #24]	@ (80121d4 <tcpip_thread_handle_msg+0x8c>)
 80121bc:	f00c fde6 	bl	801ed8c <iprintf>
      break;
 80121c0:	bf00      	nop
  }
}
 80121c2:	bf00      	nop
 80121c4:	3708      	adds	r7, #8
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	08020aa0 	.word	0x08020aa0
 80121d0:	08020ad0 	.word	0x08020ad0
 80121d4:	08020af0 	.word	0x08020af0

080121d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b086      	sub	sp, #24
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80121e4:	481a      	ldr	r0, [pc, #104]	@ (8012250 <tcpip_inpkt+0x78>)
 80121e6:	f00b fed3 	bl	801df90 <sys_mbox_valid>
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d105      	bne.n	80121fc <tcpip_inpkt+0x24>
 80121f0:	4b18      	ldr	r3, [pc, #96]	@ (8012254 <tcpip_inpkt+0x7c>)
 80121f2:	22fc      	movs	r2, #252	@ 0xfc
 80121f4:	4918      	ldr	r1, [pc, #96]	@ (8012258 <tcpip_inpkt+0x80>)
 80121f6:	4819      	ldr	r0, [pc, #100]	@ (801225c <tcpip_inpkt+0x84>)
 80121f8:	f00c fdc8 	bl	801ed8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80121fc:	2009      	movs	r0, #9
 80121fe:	f000 fdc5 	bl	8012d8c <memp_malloc>
 8012202:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d102      	bne.n	8012210 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801220a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801220e:	e01a      	b.n	8012246 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	2200      	movs	r2, #0
 8012214:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	68fa      	ldr	r2, [r7, #12]
 801221a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	687a      	ldr	r2, [r7, #4]
 8012226:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012228:	6979      	ldr	r1, [r7, #20]
 801222a:	4809      	ldr	r0, [pc, #36]	@ (8012250 <tcpip_inpkt+0x78>)
 801222c:	f00b fe4e 	bl	801decc <sys_mbox_trypost>
 8012230:	4603      	mov	r3, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	d006      	beq.n	8012244 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012236:	6979      	ldr	r1, [r7, #20]
 8012238:	2009      	movs	r0, #9
 801223a:	f000 fe1d 	bl	8012e78 <memp_free>
    return ERR_MEM;
 801223e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012242:	e000      	b.n	8012246 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012244:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012246:	4618      	mov	r0, r3
 8012248:	3718      	adds	r7, #24
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	2001f654 	.word	0x2001f654
 8012254:	08020aa0 	.word	0x08020aa0
 8012258:	08020b18 	.word	0x08020b18
 801225c:	08020af0 	.word	0x08020af0

08012260 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012270:	f003 0318 	and.w	r3, r3, #24
 8012274:	2b00      	cmp	r3, #0
 8012276:	d006      	beq.n	8012286 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012278:	4a08      	ldr	r2, [pc, #32]	@ (801229c <tcpip_input+0x3c>)
 801227a:	6839      	ldr	r1, [r7, #0]
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7ff ffab 	bl	80121d8 <tcpip_inpkt>
 8012282:	4603      	mov	r3, r0
 8012284:	e005      	b.n	8012292 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012286:	4a06      	ldr	r2, [pc, #24]	@ (80122a0 <tcpip_input+0x40>)
 8012288:	6839      	ldr	r1, [r7, #0]
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f7ff ffa4 	bl	80121d8 <tcpip_inpkt>
 8012290:	4603      	mov	r3, r0
}
 8012292:	4618      	mov	r0, r3
 8012294:	3708      	adds	r7, #8
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	0801dcc9 	.word	0x0801dcc9
 80122a0:	0801cbd1 	.word	0x0801cbd1

080122a4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80122ae:	4819      	ldr	r0, [pc, #100]	@ (8012314 <tcpip_try_callback+0x70>)
 80122b0:	f00b fe6e 	bl	801df90 <sys_mbox_valid>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d106      	bne.n	80122c8 <tcpip_try_callback+0x24>
 80122ba:	4b17      	ldr	r3, [pc, #92]	@ (8012318 <tcpip_try_callback+0x74>)
 80122bc:	f240 125d 	movw	r2, #349	@ 0x15d
 80122c0:	4916      	ldr	r1, [pc, #88]	@ (801231c <tcpip_try_callback+0x78>)
 80122c2:	4817      	ldr	r0, [pc, #92]	@ (8012320 <tcpip_try_callback+0x7c>)
 80122c4:	f00c fd62 	bl	801ed8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80122c8:	2008      	movs	r0, #8
 80122ca:	f000 fd5f 	bl	8012d8c <memp_malloc>
 80122ce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d102      	bne.n	80122dc <tcpip_try_callback+0x38>
    return ERR_MEM;
 80122d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80122da:	e017      	b.n	801230c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2201      	movs	r2, #1
 80122e0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	683a      	ldr	r2, [r7, #0]
 80122ec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80122ee:	68f9      	ldr	r1, [r7, #12]
 80122f0:	4808      	ldr	r0, [pc, #32]	@ (8012314 <tcpip_try_callback+0x70>)
 80122f2:	f00b fdeb 	bl	801decc <sys_mbox_trypost>
 80122f6:	4603      	mov	r3, r0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d006      	beq.n	801230a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80122fc:	68f9      	ldr	r1, [r7, #12]
 80122fe:	2008      	movs	r0, #8
 8012300:	f000 fdba 	bl	8012e78 <memp_free>
    return ERR_MEM;
 8012304:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012308:	e000      	b.n	801230c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801230a:	2300      	movs	r3, #0
}
 801230c:	4618      	mov	r0, r3
 801230e:	3710      	adds	r7, #16
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}
 8012314:	2001f654 	.word	0x2001f654
 8012318:	08020aa0 	.word	0x08020aa0
 801231c:	08020b18 	.word	0x08020b18
 8012320:	08020af0 	.word	0x08020af0

08012324 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b084      	sub	sp, #16
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012330:	4806      	ldr	r0, [pc, #24]	@ (801234c <tcpip_send_msg_wait_sem+0x28>)
 8012332:	f00b fefb 	bl	801e12c <sys_mutex_lock>
  fn(apimsg);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	68b8      	ldr	r0, [r7, #8]
 801233a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801233c:	4803      	ldr	r0, [pc, #12]	@ (801234c <tcpip_send_msg_wait_sem+0x28>)
 801233e:	f00b ff04 	bl	801e14a <sys_mutex_unlock>
  return ERR_OK;
 8012342:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8012344:	4618      	mov	r0, r3
 8012346:	3710      	adds	r7, #16
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}
 801234c:	2001f658 	.word	0x2001f658

08012350 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b084      	sub	sp, #16
 8012354:	af02      	add	r7, sp, #8
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	6039      	str	r1, [r7, #0]
  lwip_init();
 801235a:	f000 f872 	bl	8012442 <lwip_init>

  tcpip_init_done = initfunc;
 801235e:	4a17      	ldr	r2, [pc, #92]	@ (80123bc <tcpip_init+0x6c>)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012364:	4a16      	ldr	r2, [pc, #88]	@ (80123c0 <tcpip_init+0x70>)
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801236a:	2106      	movs	r1, #6
 801236c:	4815      	ldr	r0, [pc, #84]	@ (80123c4 <tcpip_init+0x74>)
 801236e:	f00b fd81 	bl	801de74 <sys_mbox_new>
 8012372:	4603      	mov	r3, r0
 8012374:	2b00      	cmp	r3, #0
 8012376:	d006      	beq.n	8012386 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012378:	4b13      	ldr	r3, [pc, #76]	@ (80123c8 <tcpip_init+0x78>)
 801237a:	f240 2261 	movw	r2, #609	@ 0x261
 801237e:	4913      	ldr	r1, [pc, #76]	@ (80123cc <tcpip_init+0x7c>)
 8012380:	4813      	ldr	r0, [pc, #76]	@ (80123d0 <tcpip_init+0x80>)
 8012382:	f00c fd03 	bl	801ed8c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012386:	4813      	ldr	r0, [pc, #76]	@ (80123d4 <tcpip_init+0x84>)
 8012388:	f00b feba 	bl	801e100 <sys_mutex_new>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d006      	beq.n	80123a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012392:	4b0d      	ldr	r3, [pc, #52]	@ (80123c8 <tcpip_init+0x78>)
 8012394:	f240 2265 	movw	r2, #613	@ 0x265
 8012398:	490f      	ldr	r1, [pc, #60]	@ (80123d8 <tcpip_init+0x88>)
 801239a:	480d      	ldr	r0, [pc, #52]	@ (80123d0 <tcpip_init+0x80>)
 801239c:	f00c fcf6 	bl	801ed8c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80123a0:	2318      	movs	r3, #24
 80123a2:	9300      	str	r3, [sp, #0]
 80123a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80123a8:	2200      	movs	r2, #0
 80123aa:	490c      	ldr	r1, [pc, #48]	@ (80123dc <tcpip_init+0x8c>)
 80123ac:	480c      	ldr	r0, [pc, #48]	@ (80123e0 <tcpip_init+0x90>)
 80123ae:	f00b fed9 	bl	801e164 <sys_thread_new>
}
 80123b2:	bf00      	nop
 80123b4:	3708      	adds	r7, #8
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	2001f64c 	.word	0x2001f64c
 80123c0:	2001f650 	.word	0x2001f650
 80123c4:	2001f654 	.word	0x2001f654
 80123c8:	08020aa0 	.word	0x08020aa0
 80123cc:	08020b28 	.word	0x08020b28
 80123d0:	08020af0 	.word	0x08020af0
 80123d4:	2001f658 	.word	0x2001f658
 80123d8:	08020b4c 	.word	0x08020b4c
 80123dc:	080120e1 	.word	0x080120e1
 80123e0:	08020b70 	.word	0x08020b70

080123e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80123e4:	b480      	push	{r7}
 80123e6:	b083      	sub	sp, #12
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	4603      	mov	r3, r0
 80123ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80123ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123f2:	021b      	lsls	r3, r3, #8
 80123f4:	b21a      	sxth	r2, r3
 80123f6:	88fb      	ldrh	r3, [r7, #6]
 80123f8:	0a1b      	lsrs	r3, r3, #8
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	b21b      	sxth	r3, r3
 80123fe:	4313      	orrs	r3, r2
 8012400:	b21b      	sxth	r3, r3
 8012402:	b29b      	uxth	r3, r3
}
 8012404:	4618      	mov	r0, r3
 8012406:	370c      	adds	r7, #12
 8012408:	46bd      	mov	sp, r7
 801240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240e:	4770      	bx	lr

08012410 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	061a      	lsls	r2, r3, #24
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	021b      	lsls	r3, r3, #8
 8012420:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012424:	431a      	orrs	r2, r3
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	0a1b      	lsrs	r3, r3, #8
 801242a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801242e:	431a      	orrs	r2, r3
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	0e1b      	lsrs	r3, r3, #24
 8012434:	4313      	orrs	r3, r2
}
 8012436:	4618      	mov	r0, r3
 8012438:	370c      	adds	r7, #12
 801243a:	46bd      	mov	sp, r7
 801243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012440:	4770      	bx	lr

08012442 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012442:	b580      	push	{r7, lr}
 8012444:	b082      	sub	sp, #8
 8012446:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012448:	2300      	movs	r3, #0
 801244a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801244c:	f00b fe4c 	bl	801e0e8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012450:	f000 f8d4 	bl	80125fc <mem_init>
  memp_init();
 8012454:	f000 fc2c 	bl	8012cb0 <memp_init>
  pbuf_init();
  netif_init();
 8012458:	f000 fd38 	bl	8012ecc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801245c:	f008 fa0e 	bl	801a87c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012460:	f001 ff4e 	bl	8014300 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012464:	f008 f950 	bl	801a708 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012468:	bf00      	nop
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012470:	b480      	push	{r7}
 8012472:	b083      	sub	sp, #12
 8012474:	af00      	add	r7, sp, #0
 8012476:	4603      	mov	r3, r0
 8012478:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801247a:	4b05      	ldr	r3, [pc, #20]	@ (8012490 <ptr_to_mem+0x20>)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	88fb      	ldrh	r3, [r7, #6]
 8012480:	4413      	add	r3, r2
}
 8012482:	4618      	mov	r0, r3
 8012484:	370c      	adds	r7, #12
 8012486:	46bd      	mov	sp, r7
 8012488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop
 8012490:	2001f674 	.word	0x2001f674

08012494 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801249c:	4b05      	ldr	r3, [pc, #20]	@ (80124b4 <mem_to_ptr+0x20>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	687a      	ldr	r2, [r7, #4]
 80124a2:	1ad3      	subs	r3, r2, r3
 80124a4:	b29b      	uxth	r3, r3
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	370c      	adds	r7, #12
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop
 80124b4:	2001f674 	.word	0x2001f674

080124b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80124b8:	b590      	push	{r4, r7, lr}
 80124ba:	b085      	sub	sp, #20
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80124c0:	4b45      	ldr	r3, [pc, #276]	@ (80125d8 <plug_holes+0x120>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	687a      	ldr	r2, [r7, #4]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d206      	bcs.n	80124d8 <plug_holes+0x20>
 80124ca:	4b44      	ldr	r3, [pc, #272]	@ (80125dc <plug_holes+0x124>)
 80124cc:	f240 12df 	movw	r2, #479	@ 0x1df
 80124d0:	4943      	ldr	r1, [pc, #268]	@ (80125e0 <plug_holes+0x128>)
 80124d2:	4844      	ldr	r0, [pc, #272]	@ (80125e4 <plug_holes+0x12c>)
 80124d4:	f00c fc5a 	bl	801ed8c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80124d8:	4b43      	ldr	r3, [pc, #268]	@ (80125e8 <plug_holes+0x130>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d306      	bcc.n	80124f0 <plug_holes+0x38>
 80124e2:	4b3e      	ldr	r3, [pc, #248]	@ (80125dc <plug_holes+0x124>)
 80124e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80124e8:	4940      	ldr	r1, [pc, #256]	@ (80125ec <plug_holes+0x134>)
 80124ea:	483e      	ldr	r0, [pc, #248]	@ (80125e4 <plug_holes+0x12c>)
 80124ec:	f00c fc4e 	bl	801ed8c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	791b      	ldrb	r3, [r3, #4]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d006      	beq.n	8012506 <plug_holes+0x4e>
 80124f8:	4b38      	ldr	r3, [pc, #224]	@ (80125dc <plug_holes+0x124>)
 80124fa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80124fe:	493c      	ldr	r1, [pc, #240]	@ (80125f0 <plug_holes+0x138>)
 8012500:	4838      	ldr	r0, [pc, #224]	@ (80125e4 <plug_holes+0x12c>)
 8012502:	f00c fc43 	bl	801ed8c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	881b      	ldrh	r3, [r3, #0]
 801250a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801250e:	d906      	bls.n	801251e <plug_holes+0x66>
 8012510:	4b32      	ldr	r3, [pc, #200]	@ (80125dc <plug_holes+0x124>)
 8012512:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012516:	4937      	ldr	r1, [pc, #220]	@ (80125f4 <plug_holes+0x13c>)
 8012518:	4832      	ldr	r0, [pc, #200]	@ (80125e4 <plug_holes+0x12c>)
 801251a:	f00c fc37 	bl	801ed8c <iprintf>

  nmem = ptr_to_mem(mem->next);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	881b      	ldrh	r3, [r3, #0]
 8012522:	4618      	mov	r0, r3
 8012524:	f7ff ffa4 	bl	8012470 <ptr_to_mem>
 8012528:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	429a      	cmp	r2, r3
 8012530:	d024      	beq.n	801257c <plug_holes+0xc4>
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	791b      	ldrb	r3, [r3, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d120      	bne.n	801257c <plug_holes+0xc4>
 801253a:	4b2b      	ldr	r3, [pc, #172]	@ (80125e8 <plug_holes+0x130>)
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	68fa      	ldr	r2, [r7, #12]
 8012540:	429a      	cmp	r2, r3
 8012542:	d01b      	beq.n	801257c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012544:	4b2c      	ldr	r3, [pc, #176]	@ (80125f8 <plug_holes+0x140>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	68fa      	ldr	r2, [r7, #12]
 801254a:	429a      	cmp	r2, r3
 801254c:	d102      	bne.n	8012554 <plug_holes+0x9c>
      lfree = mem;
 801254e:	4a2a      	ldr	r2, [pc, #168]	@ (80125f8 <plug_holes+0x140>)
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	881a      	ldrh	r2, [r3, #0]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	881b      	ldrh	r3, [r3, #0]
 8012560:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012564:	d00a      	beq.n	801257c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	881b      	ldrh	r3, [r3, #0]
 801256a:	4618      	mov	r0, r3
 801256c:	f7ff ff80 	bl	8012470 <ptr_to_mem>
 8012570:	4604      	mov	r4, r0
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f7ff ff8e 	bl	8012494 <mem_to_ptr>
 8012578:	4603      	mov	r3, r0
 801257a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	885b      	ldrh	r3, [r3, #2]
 8012580:	4618      	mov	r0, r3
 8012582:	f7ff ff75 	bl	8012470 <ptr_to_mem>
 8012586:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012588:	68ba      	ldr	r2, [r7, #8]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	429a      	cmp	r2, r3
 801258e:	d01f      	beq.n	80125d0 <plug_holes+0x118>
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	791b      	ldrb	r3, [r3, #4]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d11b      	bne.n	80125d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012598:	4b17      	ldr	r3, [pc, #92]	@ (80125f8 <plug_holes+0x140>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	429a      	cmp	r2, r3
 80125a0:	d102      	bne.n	80125a8 <plug_holes+0xf0>
      lfree = pmem;
 80125a2:	4a15      	ldr	r2, [pc, #84]	@ (80125f8 <plug_holes+0x140>)
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	881a      	ldrh	r2, [r3, #0]
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	881b      	ldrh	r3, [r3, #0]
 80125b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80125b8:	d00a      	beq.n	80125d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	881b      	ldrh	r3, [r3, #0]
 80125be:	4618      	mov	r0, r3
 80125c0:	f7ff ff56 	bl	8012470 <ptr_to_mem>
 80125c4:	4604      	mov	r4, r0
 80125c6:	68b8      	ldr	r0, [r7, #8]
 80125c8:	f7ff ff64 	bl	8012494 <mem_to_ptr>
 80125cc:	4603      	mov	r3, r0
 80125ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80125d0:	bf00      	nop
 80125d2:	3714      	adds	r7, #20
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd90      	pop	{r4, r7, pc}
 80125d8:	2001f674 	.word	0x2001f674
 80125dc:	08020b80 	.word	0x08020b80
 80125e0:	08020bb0 	.word	0x08020bb0
 80125e4:	08020bc8 	.word	0x08020bc8
 80125e8:	2001f678 	.word	0x2001f678
 80125ec:	08020bf0 	.word	0x08020bf0
 80125f0:	08020c0c 	.word	0x08020c0c
 80125f4:	08020c28 	.word	0x08020c28
 80125f8:	2001f680 	.word	0x2001f680

080125fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012602:	4b1d      	ldr	r3, [pc, #116]	@ (8012678 <mem_init+0x7c>)
 8012604:	4a1d      	ldr	r2, [pc, #116]	@ (801267c <mem_init+0x80>)
 8012606:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012608:	4b1b      	ldr	r3, [pc, #108]	@ (8012678 <mem_init+0x7c>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8012614:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2200      	movs	r2, #0
 801261a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2200      	movs	r2, #0
 8012620:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012622:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8012626:	f7ff ff23 	bl	8012470 <ptr_to_mem>
 801262a:	4603      	mov	r3, r0
 801262c:	4a14      	ldr	r2, [pc, #80]	@ (8012680 <mem_init+0x84>)
 801262e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012630:	4b13      	ldr	r3, [pc, #76]	@ (8012680 <mem_init+0x84>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2201      	movs	r2, #1
 8012636:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012638:	4b11      	ldr	r3, [pc, #68]	@ (8012680 <mem_init+0x84>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8012640:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012642:	4b0f      	ldr	r3, [pc, #60]	@ (8012680 <mem_init+0x84>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 801264a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801264c:	4b0a      	ldr	r3, [pc, #40]	@ (8012678 <mem_init+0x7c>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4a0c      	ldr	r2, [pc, #48]	@ (8012684 <mem_init+0x88>)
 8012652:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012654:	480c      	ldr	r0, [pc, #48]	@ (8012688 <mem_init+0x8c>)
 8012656:	f00b fd53 	bl	801e100 <sys_mutex_new>
 801265a:	4603      	mov	r3, r0
 801265c:	2b00      	cmp	r3, #0
 801265e:	d006      	beq.n	801266e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012660:	4b0a      	ldr	r3, [pc, #40]	@ (801268c <mem_init+0x90>)
 8012662:	f240 221f 	movw	r2, #543	@ 0x21f
 8012666:	490a      	ldr	r1, [pc, #40]	@ (8012690 <mem_init+0x94>)
 8012668:	480a      	ldr	r0, [pc, #40]	@ (8012694 <mem_init+0x98>)
 801266a:	f00c fb8f 	bl	801ed8c <iprintf>
  }
}
 801266e:	bf00      	nop
 8012670:	3708      	adds	r7, #8
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}
 8012676:	bf00      	nop
 8012678:	2001f674 	.word	0x2001f674
 801267c:	20048000 	.word	0x20048000
 8012680:	2001f678 	.word	0x2001f678
 8012684:	2001f680 	.word	0x2001f680
 8012688:	2001f67c 	.word	0x2001f67c
 801268c:	08020b80 	.word	0x08020b80
 8012690:	08020c54 	.word	0x08020c54
 8012694:	08020bc8 	.word	0x08020bc8

08012698 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b086      	sub	sp, #24
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f7ff fef7 	bl	8012494 <mem_to_ptr>
 80126a6:	4603      	mov	r3, r0
 80126a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	881b      	ldrh	r3, [r3, #0]
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7ff fede 	bl	8012470 <ptr_to_mem>
 80126b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	885b      	ldrh	r3, [r3, #2]
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7ff fed8 	bl	8012470 <ptr_to_mem>
 80126c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	881b      	ldrh	r3, [r3, #0]
 80126c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80126ca:	d818      	bhi.n	80126fe <mem_link_valid+0x66>
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	885b      	ldrh	r3, [r3, #2]
 80126d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80126d4:	d813      	bhi.n	80126fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80126da:	8afa      	ldrh	r2, [r7, #22]
 80126dc:	429a      	cmp	r2, r3
 80126de:	d004      	beq.n	80126ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	881b      	ldrh	r3, [r3, #0]
 80126e4:	8afa      	ldrh	r2, [r7, #22]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d109      	bne.n	80126fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80126ea:	4b08      	ldr	r3, [pc, #32]	@ (801270c <mem_link_valid+0x74>)
 80126ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80126ee:	693a      	ldr	r2, [r7, #16]
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d006      	beq.n	8012702 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	885b      	ldrh	r3, [r3, #2]
 80126f8:	8afa      	ldrh	r2, [r7, #22]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d001      	beq.n	8012702 <mem_link_valid+0x6a>
    return 0;
 80126fe:	2300      	movs	r3, #0
 8012700:	e000      	b.n	8012704 <mem_link_valid+0x6c>
  }
  return 1;
 8012702:	2301      	movs	r3, #1
}
 8012704:	4618      	mov	r0, r3
 8012706:	3718      	adds	r7, #24
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}
 801270c:	2001f678 	.word	0x2001f678

08012710 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b088      	sub	sp, #32
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d070      	beq.n	8012800 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f003 0303 	and.w	r3, r3, #3
 8012724:	2b00      	cmp	r3, #0
 8012726:	d00d      	beq.n	8012744 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012728:	4b37      	ldr	r3, [pc, #220]	@ (8012808 <mem_free+0xf8>)
 801272a:	f240 2273 	movw	r2, #627	@ 0x273
 801272e:	4937      	ldr	r1, [pc, #220]	@ (801280c <mem_free+0xfc>)
 8012730:	4837      	ldr	r0, [pc, #220]	@ (8012810 <mem_free+0x100>)
 8012732:	f00c fb2b 	bl	801ed8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012736:	f00b fd35 	bl	801e1a4 <sys_arch_protect>
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	68f8      	ldr	r0, [r7, #12]
 801273e:	f00b fd3f 	bl	801e1c0 <sys_arch_unprotect>
    return;
 8012742:	e05e      	b.n	8012802 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	3b08      	subs	r3, #8
 8012748:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801274a:	4b32      	ldr	r3, [pc, #200]	@ (8012814 <mem_free+0x104>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	69fa      	ldr	r2, [r7, #28]
 8012750:	429a      	cmp	r2, r3
 8012752:	d306      	bcc.n	8012762 <mem_free+0x52>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f103 020c 	add.w	r2, r3, #12
 801275a:	4b2f      	ldr	r3, [pc, #188]	@ (8012818 <mem_free+0x108>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	429a      	cmp	r2, r3
 8012760:	d90d      	bls.n	801277e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012762:	4b29      	ldr	r3, [pc, #164]	@ (8012808 <mem_free+0xf8>)
 8012764:	f240 227f 	movw	r2, #639	@ 0x27f
 8012768:	492c      	ldr	r1, [pc, #176]	@ (801281c <mem_free+0x10c>)
 801276a:	4829      	ldr	r0, [pc, #164]	@ (8012810 <mem_free+0x100>)
 801276c:	f00c fb0e 	bl	801ed8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012770:	f00b fd18 	bl	801e1a4 <sys_arch_protect>
 8012774:	6138      	str	r0, [r7, #16]
 8012776:	6938      	ldr	r0, [r7, #16]
 8012778:	f00b fd22 	bl	801e1c0 <sys_arch_unprotect>
    return;
 801277c:	e041      	b.n	8012802 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801277e:	4828      	ldr	r0, [pc, #160]	@ (8012820 <mem_free+0x110>)
 8012780:	f00b fcd4 	bl	801e12c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	791b      	ldrb	r3, [r3, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d110      	bne.n	80127ae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801278c:	4b1e      	ldr	r3, [pc, #120]	@ (8012808 <mem_free+0xf8>)
 801278e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8012792:	4924      	ldr	r1, [pc, #144]	@ (8012824 <mem_free+0x114>)
 8012794:	481e      	ldr	r0, [pc, #120]	@ (8012810 <mem_free+0x100>)
 8012796:	f00c faf9 	bl	801ed8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801279a:	4821      	ldr	r0, [pc, #132]	@ (8012820 <mem_free+0x110>)
 801279c:	f00b fcd5 	bl	801e14a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80127a0:	f00b fd00 	bl	801e1a4 <sys_arch_protect>
 80127a4:	6178      	str	r0, [r7, #20]
 80127a6:	6978      	ldr	r0, [r7, #20]
 80127a8:	f00b fd0a 	bl	801e1c0 <sys_arch_unprotect>
    return;
 80127ac:	e029      	b.n	8012802 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80127ae:	69f8      	ldr	r0, [r7, #28]
 80127b0:	f7ff ff72 	bl	8012698 <mem_link_valid>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d110      	bne.n	80127dc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80127ba:	4b13      	ldr	r3, [pc, #76]	@ (8012808 <mem_free+0xf8>)
 80127bc:	f240 2295 	movw	r2, #661	@ 0x295
 80127c0:	4919      	ldr	r1, [pc, #100]	@ (8012828 <mem_free+0x118>)
 80127c2:	4813      	ldr	r0, [pc, #76]	@ (8012810 <mem_free+0x100>)
 80127c4:	f00c fae2 	bl	801ed8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80127c8:	4815      	ldr	r0, [pc, #84]	@ (8012820 <mem_free+0x110>)
 80127ca:	f00b fcbe 	bl	801e14a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80127ce:	f00b fce9 	bl	801e1a4 <sys_arch_protect>
 80127d2:	61b8      	str	r0, [r7, #24]
 80127d4:	69b8      	ldr	r0, [r7, #24]
 80127d6:	f00b fcf3 	bl	801e1c0 <sys_arch_unprotect>
    return;
 80127da:	e012      	b.n	8012802 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80127dc:	69fb      	ldr	r3, [r7, #28]
 80127de:	2200      	movs	r2, #0
 80127e0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80127e2:	4b12      	ldr	r3, [pc, #72]	@ (801282c <mem_free+0x11c>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	69fa      	ldr	r2, [r7, #28]
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d202      	bcs.n	80127f2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80127ec:	4a0f      	ldr	r2, [pc, #60]	@ (801282c <mem_free+0x11c>)
 80127ee:	69fb      	ldr	r3, [r7, #28]
 80127f0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80127f2:	69f8      	ldr	r0, [r7, #28]
 80127f4:	f7ff fe60 	bl	80124b8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80127f8:	4809      	ldr	r0, [pc, #36]	@ (8012820 <mem_free+0x110>)
 80127fa:	f00b fca6 	bl	801e14a <sys_mutex_unlock>
 80127fe:	e000      	b.n	8012802 <mem_free+0xf2>
    return;
 8012800:	bf00      	nop
}
 8012802:	3720      	adds	r7, #32
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}
 8012808:	08020b80 	.word	0x08020b80
 801280c:	08020c70 	.word	0x08020c70
 8012810:	08020bc8 	.word	0x08020bc8
 8012814:	2001f674 	.word	0x2001f674
 8012818:	2001f678 	.word	0x2001f678
 801281c:	08020c94 	.word	0x08020c94
 8012820:	2001f67c 	.word	0x2001f67c
 8012824:	08020cb0 	.word	0x08020cb0
 8012828:	08020cd8 	.word	0x08020cd8
 801282c:	2001f680 	.word	0x2001f680

08012830 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b088      	sub	sp, #32
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	460b      	mov	r3, r1
 801283a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801283c:	887b      	ldrh	r3, [r7, #2]
 801283e:	3303      	adds	r3, #3
 8012840:	b29b      	uxth	r3, r3
 8012842:	f023 0303 	bic.w	r3, r3, #3
 8012846:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012848:	8bfb      	ldrh	r3, [r7, #30]
 801284a:	2b0b      	cmp	r3, #11
 801284c:	d801      	bhi.n	8012852 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801284e:	230c      	movs	r3, #12
 8012850:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012852:	8bfb      	ldrh	r3, [r7, #30]
 8012854:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012858:	d803      	bhi.n	8012862 <mem_trim+0x32>
 801285a:	8bfa      	ldrh	r2, [r7, #30]
 801285c:	887b      	ldrh	r3, [r7, #2]
 801285e:	429a      	cmp	r2, r3
 8012860:	d201      	bcs.n	8012866 <mem_trim+0x36>
    return NULL;
 8012862:	2300      	movs	r3, #0
 8012864:	e0d8      	b.n	8012a18 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012866:	4b6e      	ldr	r3, [pc, #440]	@ (8012a20 <mem_trim+0x1f0>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	687a      	ldr	r2, [r7, #4]
 801286c:	429a      	cmp	r2, r3
 801286e:	d304      	bcc.n	801287a <mem_trim+0x4a>
 8012870:	4b6c      	ldr	r3, [pc, #432]	@ (8012a24 <mem_trim+0x1f4>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	429a      	cmp	r2, r3
 8012878:	d306      	bcc.n	8012888 <mem_trim+0x58>
 801287a:	4b6b      	ldr	r3, [pc, #428]	@ (8012a28 <mem_trim+0x1f8>)
 801287c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012880:	496a      	ldr	r1, [pc, #424]	@ (8012a2c <mem_trim+0x1fc>)
 8012882:	486b      	ldr	r0, [pc, #428]	@ (8012a30 <mem_trim+0x200>)
 8012884:	f00c fa82 	bl	801ed8c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012888:	4b65      	ldr	r3, [pc, #404]	@ (8012a20 <mem_trim+0x1f0>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	687a      	ldr	r2, [r7, #4]
 801288e:	429a      	cmp	r2, r3
 8012890:	d304      	bcc.n	801289c <mem_trim+0x6c>
 8012892:	4b64      	ldr	r3, [pc, #400]	@ (8012a24 <mem_trim+0x1f4>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	429a      	cmp	r2, r3
 801289a:	d307      	bcc.n	80128ac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801289c:	f00b fc82 	bl	801e1a4 <sys_arch_protect>
 80128a0:	60b8      	str	r0, [r7, #8]
 80128a2:	68b8      	ldr	r0, [r7, #8]
 80128a4:	f00b fc8c 	bl	801e1c0 <sys_arch_unprotect>
    return rmem;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	e0b5      	b.n	8012a18 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	3b08      	subs	r3, #8
 80128b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80128b2:	69b8      	ldr	r0, [r7, #24]
 80128b4:	f7ff fdee 	bl	8012494 <mem_to_ptr>
 80128b8:	4603      	mov	r3, r0
 80128ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	881a      	ldrh	r2, [r3, #0]
 80128c0:	8afb      	ldrh	r3, [r7, #22]
 80128c2:	1ad3      	subs	r3, r2, r3
 80128c4:	b29b      	uxth	r3, r3
 80128c6:	3b08      	subs	r3, #8
 80128c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80128ca:	8bfa      	ldrh	r2, [r7, #30]
 80128cc:	8abb      	ldrh	r3, [r7, #20]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d906      	bls.n	80128e0 <mem_trim+0xb0>
 80128d2:	4b55      	ldr	r3, [pc, #340]	@ (8012a28 <mem_trim+0x1f8>)
 80128d4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80128d8:	4956      	ldr	r1, [pc, #344]	@ (8012a34 <mem_trim+0x204>)
 80128da:	4855      	ldr	r0, [pc, #340]	@ (8012a30 <mem_trim+0x200>)
 80128dc:	f00c fa56 	bl	801ed8c <iprintf>
  if (newsize > size) {
 80128e0:	8bfa      	ldrh	r2, [r7, #30]
 80128e2:	8abb      	ldrh	r3, [r7, #20]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d901      	bls.n	80128ec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80128e8:	2300      	movs	r3, #0
 80128ea:	e095      	b.n	8012a18 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80128ec:	8bfa      	ldrh	r2, [r7, #30]
 80128ee:	8abb      	ldrh	r3, [r7, #20]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d101      	bne.n	80128f8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	e08f      	b.n	8012a18 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80128f8:	484f      	ldr	r0, [pc, #316]	@ (8012a38 <mem_trim+0x208>)
 80128fa:	f00b fc17 	bl	801e12c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	881b      	ldrh	r3, [r3, #0]
 8012902:	4618      	mov	r0, r3
 8012904:	f7ff fdb4 	bl	8012470 <ptr_to_mem>
 8012908:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	791b      	ldrb	r3, [r3, #4]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d13f      	bne.n	8012992 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012912:	69bb      	ldr	r3, [r7, #24]
 8012914:	881b      	ldrh	r3, [r3, #0]
 8012916:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801291a:	d106      	bne.n	801292a <mem_trim+0xfa>
 801291c:	4b42      	ldr	r3, [pc, #264]	@ (8012a28 <mem_trim+0x1f8>)
 801291e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8012922:	4946      	ldr	r1, [pc, #280]	@ (8012a3c <mem_trim+0x20c>)
 8012924:	4842      	ldr	r0, [pc, #264]	@ (8012a30 <mem_trim+0x200>)
 8012926:	f00c fa31 	bl	801ed8c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	881b      	ldrh	r3, [r3, #0]
 801292e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012930:	8afa      	ldrh	r2, [r7, #22]
 8012932:	8bfb      	ldrh	r3, [r7, #30]
 8012934:	4413      	add	r3, r2
 8012936:	b29b      	uxth	r3, r3
 8012938:	3308      	adds	r3, #8
 801293a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801293c:	4b40      	ldr	r3, [pc, #256]	@ (8012a40 <mem_trim+0x210>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	693a      	ldr	r2, [r7, #16]
 8012942:	429a      	cmp	r2, r3
 8012944:	d106      	bne.n	8012954 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012946:	89fb      	ldrh	r3, [r7, #14]
 8012948:	4618      	mov	r0, r3
 801294a:	f7ff fd91 	bl	8012470 <ptr_to_mem>
 801294e:	4603      	mov	r3, r0
 8012950:	4a3b      	ldr	r2, [pc, #236]	@ (8012a40 <mem_trim+0x210>)
 8012952:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012954:	89fb      	ldrh	r3, [r7, #14]
 8012956:	4618      	mov	r0, r3
 8012958:	f7ff fd8a 	bl	8012470 <ptr_to_mem>
 801295c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	2200      	movs	r2, #0
 8012962:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	89ba      	ldrh	r2, [r7, #12]
 8012968:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	8afa      	ldrh	r2, [r7, #22]
 801296e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012970:	69bb      	ldr	r3, [r7, #24]
 8012972:	89fa      	ldrh	r2, [r7, #14]
 8012974:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	881b      	ldrh	r3, [r3, #0]
 801297a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801297e:	d047      	beq.n	8012a10 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	881b      	ldrh	r3, [r3, #0]
 8012984:	4618      	mov	r0, r3
 8012986:	f7ff fd73 	bl	8012470 <ptr_to_mem>
 801298a:	4602      	mov	r2, r0
 801298c:	89fb      	ldrh	r3, [r7, #14]
 801298e:	8053      	strh	r3, [r2, #2]
 8012990:	e03e      	b.n	8012a10 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012992:	8bfb      	ldrh	r3, [r7, #30]
 8012994:	f103 0214 	add.w	r2, r3, #20
 8012998:	8abb      	ldrh	r3, [r7, #20]
 801299a:	429a      	cmp	r2, r3
 801299c:	d838      	bhi.n	8012a10 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801299e:	8afa      	ldrh	r2, [r7, #22]
 80129a0:	8bfb      	ldrh	r3, [r7, #30]
 80129a2:	4413      	add	r3, r2
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	3308      	adds	r3, #8
 80129a8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80129aa:	69bb      	ldr	r3, [r7, #24]
 80129ac:	881b      	ldrh	r3, [r3, #0]
 80129ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80129b2:	d106      	bne.n	80129c2 <mem_trim+0x192>
 80129b4:	4b1c      	ldr	r3, [pc, #112]	@ (8012a28 <mem_trim+0x1f8>)
 80129b6:	f240 3216 	movw	r2, #790	@ 0x316
 80129ba:	4920      	ldr	r1, [pc, #128]	@ (8012a3c <mem_trim+0x20c>)
 80129bc:	481c      	ldr	r0, [pc, #112]	@ (8012a30 <mem_trim+0x200>)
 80129be:	f00c f9e5 	bl	801ed8c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80129c2:	89fb      	ldrh	r3, [r7, #14]
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7ff fd53 	bl	8012470 <ptr_to_mem>
 80129ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80129cc:	4b1c      	ldr	r3, [pc, #112]	@ (8012a40 <mem_trim+0x210>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	693a      	ldr	r2, [r7, #16]
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d202      	bcs.n	80129dc <mem_trim+0x1ac>
      lfree = mem2;
 80129d6:	4a1a      	ldr	r2, [pc, #104]	@ (8012a40 <mem_trim+0x210>)
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	2200      	movs	r2, #0
 80129e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80129e2:	69bb      	ldr	r3, [r7, #24]
 80129e4:	881a      	ldrh	r2, [r3, #0]
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	8afa      	ldrh	r2, [r7, #22]
 80129ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	89fa      	ldrh	r2, [r7, #14]
 80129f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	881b      	ldrh	r3, [r3, #0]
 80129fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80129fe:	d007      	beq.n	8012a10 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	881b      	ldrh	r3, [r3, #0]
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7ff fd33 	bl	8012470 <ptr_to_mem>
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	89fb      	ldrh	r3, [r7, #14]
 8012a0e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012a10:	4809      	ldr	r0, [pc, #36]	@ (8012a38 <mem_trim+0x208>)
 8012a12:	f00b fb9a 	bl	801e14a <sys_mutex_unlock>
  return rmem;
 8012a16:	687b      	ldr	r3, [r7, #4]
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3720      	adds	r7, #32
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	2001f674 	.word	0x2001f674
 8012a24:	2001f678 	.word	0x2001f678
 8012a28:	08020b80 	.word	0x08020b80
 8012a2c:	08020d0c 	.word	0x08020d0c
 8012a30:	08020bc8 	.word	0x08020bc8
 8012a34:	08020d24 	.word	0x08020d24
 8012a38:	2001f67c 	.word	0x2001f67c
 8012a3c:	08020d44 	.word	0x08020d44
 8012a40:	2001f680 	.word	0x2001f680

08012a44 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b088      	sub	sp, #32
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012a4e:	88fb      	ldrh	r3, [r7, #6]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d101      	bne.n	8012a58 <mem_malloc+0x14>
    return NULL;
 8012a54:	2300      	movs	r3, #0
 8012a56:	e0e2      	b.n	8012c1e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012a58:	88fb      	ldrh	r3, [r7, #6]
 8012a5a:	3303      	adds	r3, #3
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	f023 0303 	bic.w	r3, r3, #3
 8012a62:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012a64:	8bbb      	ldrh	r3, [r7, #28]
 8012a66:	2b0b      	cmp	r3, #11
 8012a68:	d801      	bhi.n	8012a6e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012a6a:	230c      	movs	r3, #12
 8012a6c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012a6e:	8bbb      	ldrh	r3, [r7, #28]
 8012a70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012a74:	d803      	bhi.n	8012a7e <mem_malloc+0x3a>
 8012a76:	8bba      	ldrh	r2, [r7, #28]
 8012a78:	88fb      	ldrh	r3, [r7, #6]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d201      	bcs.n	8012a82 <mem_malloc+0x3e>
    return NULL;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	e0cd      	b.n	8012c1e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012a82:	4869      	ldr	r0, [pc, #420]	@ (8012c28 <mem_malloc+0x1e4>)
 8012a84:	f00b fb52 	bl	801e12c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012a88:	4b68      	ldr	r3, [pc, #416]	@ (8012c2c <mem_malloc+0x1e8>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7ff fd01 	bl	8012494 <mem_to_ptr>
 8012a92:	4603      	mov	r3, r0
 8012a94:	83fb      	strh	r3, [r7, #30]
 8012a96:	e0b7      	b.n	8012c08 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012a98:	8bfb      	ldrh	r3, [r7, #30]
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7ff fce8 	bl	8012470 <ptr_to_mem>
 8012aa0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	791b      	ldrb	r3, [r3, #4]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	f040 80a7 	bne.w	8012bfa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	881b      	ldrh	r3, [r3, #0]
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	8bfb      	ldrh	r3, [r7, #30]
 8012ab4:	1ad3      	subs	r3, r2, r3
 8012ab6:	f1a3 0208 	sub.w	r2, r3, #8
 8012aba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012abc:	429a      	cmp	r2, r3
 8012abe:	f0c0 809c 	bcc.w	8012bfa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	881b      	ldrh	r3, [r3, #0]
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	8bfb      	ldrh	r3, [r7, #30]
 8012aca:	1ad3      	subs	r3, r2, r3
 8012acc:	f1a3 0208 	sub.w	r2, r3, #8
 8012ad0:	8bbb      	ldrh	r3, [r7, #28]
 8012ad2:	3314      	adds	r3, #20
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d333      	bcc.n	8012b40 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012ad8:	8bfa      	ldrh	r2, [r7, #30]
 8012ada:	8bbb      	ldrh	r3, [r7, #28]
 8012adc:	4413      	add	r3, r2
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	3308      	adds	r3, #8
 8012ae2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012ae4:	8a7b      	ldrh	r3, [r7, #18]
 8012ae6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012aea:	d106      	bne.n	8012afa <mem_malloc+0xb6>
 8012aec:	4b50      	ldr	r3, [pc, #320]	@ (8012c30 <mem_malloc+0x1ec>)
 8012aee:	f240 3287 	movw	r2, #903	@ 0x387
 8012af2:	4950      	ldr	r1, [pc, #320]	@ (8012c34 <mem_malloc+0x1f0>)
 8012af4:	4850      	ldr	r0, [pc, #320]	@ (8012c38 <mem_malloc+0x1f4>)
 8012af6:	f00c f949 	bl	801ed8c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012afa:	8a7b      	ldrh	r3, [r7, #18]
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7ff fcb7 	bl	8012470 <ptr_to_mem>
 8012b02:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2200      	movs	r2, #0
 8012b08:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	881a      	ldrh	r2, [r3, #0]
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	8bfa      	ldrh	r2, [r7, #30]
 8012b16:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	8a7a      	ldrh	r2, [r7, #18]
 8012b1c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	2201      	movs	r2, #1
 8012b22:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	881b      	ldrh	r3, [r3, #0]
 8012b28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012b2c:	d00b      	beq.n	8012b46 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	881b      	ldrh	r3, [r3, #0]
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7ff fc9c 	bl	8012470 <ptr_to_mem>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	8a7b      	ldrh	r3, [r7, #18]
 8012b3c:	8053      	strh	r3, [r2, #2]
 8012b3e:	e002      	b.n	8012b46 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012b40:	697b      	ldr	r3, [r7, #20]
 8012b42:	2201      	movs	r2, #1
 8012b44:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012b46:	4b39      	ldr	r3, [pc, #228]	@ (8012c2c <mem_malloc+0x1e8>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	697a      	ldr	r2, [r7, #20]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d127      	bne.n	8012ba0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8012b50:	4b36      	ldr	r3, [pc, #216]	@ (8012c2c <mem_malloc+0x1e8>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012b56:	e005      	b.n	8012b64 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012b58:	69bb      	ldr	r3, [r7, #24]
 8012b5a:	881b      	ldrh	r3, [r3, #0]
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7ff fc87 	bl	8012470 <ptr_to_mem>
 8012b62:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	791b      	ldrb	r3, [r3, #4]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d004      	beq.n	8012b76 <mem_malloc+0x132>
 8012b6c:	4b33      	ldr	r3, [pc, #204]	@ (8012c3c <mem_malloc+0x1f8>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	69ba      	ldr	r2, [r7, #24]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d1f0      	bne.n	8012b58 <mem_malloc+0x114>
          }
          lfree = cur;
 8012b76:	4a2d      	ldr	r2, [pc, #180]	@ (8012c2c <mem_malloc+0x1e8>)
 8012b78:	69bb      	ldr	r3, [r7, #24]
 8012b7a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8012c2c <mem_malloc+0x1e8>)
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	4b2e      	ldr	r3, [pc, #184]	@ (8012c3c <mem_malloc+0x1f8>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d00b      	beq.n	8012ba0 <mem_malloc+0x15c>
 8012b88:	4b28      	ldr	r3, [pc, #160]	@ (8012c2c <mem_malloc+0x1e8>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	791b      	ldrb	r3, [r3, #4]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d006      	beq.n	8012ba0 <mem_malloc+0x15c>
 8012b92:	4b27      	ldr	r3, [pc, #156]	@ (8012c30 <mem_malloc+0x1ec>)
 8012b94:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8012b98:	4929      	ldr	r1, [pc, #164]	@ (8012c40 <mem_malloc+0x1fc>)
 8012b9a:	4827      	ldr	r0, [pc, #156]	@ (8012c38 <mem_malloc+0x1f4>)
 8012b9c:	f00c f8f6 	bl	801ed8c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012ba0:	4821      	ldr	r0, [pc, #132]	@ (8012c28 <mem_malloc+0x1e4>)
 8012ba2:	f00b fad2 	bl	801e14a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012ba6:	8bba      	ldrh	r2, [r7, #28]
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	4413      	add	r3, r2
 8012bac:	3308      	adds	r3, #8
 8012bae:	4a23      	ldr	r2, [pc, #140]	@ (8012c3c <mem_malloc+0x1f8>)
 8012bb0:	6812      	ldr	r2, [r2, #0]
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d906      	bls.n	8012bc4 <mem_malloc+0x180>
 8012bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8012c30 <mem_malloc+0x1ec>)
 8012bb8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8012bbc:	4921      	ldr	r1, [pc, #132]	@ (8012c44 <mem_malloc+0x200>)
 8012bbe:	481e      	ldr	r0, [pc, #120]	@ (8012c38 <mem_malloc+0x1f4>)
 8012bc0:	f00c f8e4 	bl	801ed8c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	f003 0303 	and.w	r3, r3, #3
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d006      	beq.n	8012bdc <mem_malloc+0x198>
 8012bce:	4b18      	ldr	r3, [pc, #96]	@ (8012c30 <mem_malloc+0x1ec>)
 8012bd0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8012bd4:	491c      	ldr	r1, [pc, #112]	@ (8012c48 <mem_malloc+0x204>)
 8012bd6:	4818      	ldr	r0, [pc, #96]	@ (8012c38 <mem_malloc+0x1f4>)
 8012bd8:	f00c f8d8 	bl	801ed8c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	f003 0303 	and.w	r3, r3, #3
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d006      	beq.n	8012bf4 <mem_malloc+0x1b0>
 8012be6:	4b12      	ldr	r3, [pc, #72]	@ (8012c30 <mem_malloc+0x1ec>)
 8012be8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8012bec:	4917      	ldr	r1, [pc, #92]	@ (8012c4c <mem_malloc+0x208>)
 8012bee:	4812      	ldr	r0, [pc, #72]	@ (8012c38 <mem_malloc+0x1f4>)
 8012bf0:	f00c f8cc 	bl	801ed8c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	3308      	adds	r3, #8
 8012bf8:	e011      	b.n	8012c1e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8012bfa:	8bfb      	ldrh	r3, [r7, #30]
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7ff fc37 	bl	8012470 <ptr_to_mem>
 8012c02:	4603      	mov	r3, r0
 8012c04:	881b      	ldrh	r3, [r3, #0]
 8012c06:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012c08:	8bfa      	ldrh	r2, [r7, #30]
 8012c0a:	8bbb      	ldrh	r3, [r7, #28]
 8012c0c:	f5c3 5340 	rsb	r3, r3, #12288	@ 0x3000
 8012c10:	429a      	cmp	r2, r3
 8012c12:	f4ff af41 	bcc.w	8012a98 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012c16:	4804      	ldr	r0, [pc, #16]	@ (8012c28 <mem_malloc+0x1e4>)
 8012c18:	f00b fa97 	bl	801e14a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012c1c:	2300      	movs	r3, #0
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3720      	adds	r7, #32
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	2001f67c 	.word	0x2001f67c
 8012c2c:	2001f680 	.word	0x2001f680
 8012c30:	08020b80 	.word	0x08020b80
 8012c34:	08020d44 	.word	0x08020d44
 8012c38:	08020bc8 	.word	0x08020bc8
 8012c3c:	2001f678 	.word	0x2001f678
 8012c40:	08020d58 	.word	0x08020d58
 8012c44:	08020d74 	.word	0x08020d74
 8012c48:	08020da4 	.word	0x08020da4
 8012c4c:	08020dd4 	.word	0x08020dd4

08012c50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012c50:	b480      	push	{r7}
 8012c52:	b085      	sub	sp, #20
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	68db      	ldr	r3, [r3, #12]
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	689b      	ldr	r3, [r3, #8]
 8012c64:	3303      	adds	r3, #3
 8012c66:	f023 0303 	bic.w	r3, r3, #3
 8012c6a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	60fb      	str	r3, [r7, #12]
 8012c70:	e011      	b.n	8012c96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	68db      	ldr	r3, [r3, #12]
 8012c76:	681a      	ldr	r2, [r3, #0]
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	68ba      	ldr	r2, [r7, #8]
 8012c82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	889b      	ldrh	r3, [r3, #4]
 8012c88:	461a      	mov	r2, r3
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	3301      	adds	r3, #1
 8012c94:	60fb      	str	r3, [r7, #12]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	88db      	ldrh	r3, [r3, #6]
 8012c9a:	461a      	mov	r2, r3
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	4293      	cmp	r3, r2
 8012ca0:	dbe7      	blt.n	8012c72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012ca2:	bf00      	nop
 8012ca4:	bf00      	nop
 8012ca6:	3714      	adds	r7, #20
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr

08012cb0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	80fb      	strh	r3, [r7, #6]
 8012cba:	e009      	b.n	8012cd0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012cbc:	88fb      	ldrh	r3, [r7, #6]
 8012cbe:	4a08      	ldr	r2, [pc, #32]	@ (8012ce0 <memp_init+0x30>)
 8012cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7ff ffc3 	bl	8012c50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012cca:	88fb      	ldrh	r3, [r7, #6]
 8012ccc:	3301      	adds	r3, #1
 8012cce:	80fb      	strh	r3, [r7, #6]
 8012cd0:	88fb      	ldrh	r3, [r7, #6]
 8012cd2:	2b0c      	cmp	r3, #12
 8012cd4:	d9f2      	bls.n	8012cbc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012cd6:	bf00      	nop
 8012cd8:	bf00      	nop
 8012cda:	3708      	adds	r7, #8
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}
 8012ce0:	080242c0 	.word	0x080242c0

08012ce4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012cec:	f00b fa5a 	bl	801e1a4 <sys_arch_protect>
 8012cf0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d015      	beq.n	8012d2c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	68db      	ldr	r3, [r3, #12]
 8012d04:	68ba      	ldr	r2, [r7, #8]
 8012d06:	6812      	ldr	r2, [r2, #0]
 8012d08:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	f003 0303 	and.w	r3, r3, #3
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d006      	beq.n	8012d22 <do_memp_malloc_pool+0x3e>
 8012d14:	4b09      	ldr	r3, [pc, #36]	@ (8012d3c <do_memp_malloc_pool+0x58>)
 8012d16:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8012d1a:	4909      	ldr	r1, [pc, #36]	@ (8012d40 <do_memp_malloc_pool+0x5c>)
 8012d1c:	4809      	ldr	r0, [pc, #36]	@ (8012d44 <do_memp_malloc_pool+0x60>)
 8012d1e:	f00c f835 	bl	801ed8c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012d22:	68f8      	ldr	r0, [r7, #12]
 8012d24:	f00b fa4c 	bl	801e1c0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012d28:	68bb      	ldr	r3, [r7, #8]
 8012d2a:	e003      	b.n	8012d34 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012d2c:	68f8      	ldr	r0, [r7, #12]
 8012d2e:	f00b fa47 	bl	801e1c0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8012d32:	2300      	movs	r3, #0
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3710      	adds	r7, #16
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}
 8012d3c:	08020e90 	.word	0x08020e90
 8012d40:	08020ec0 	.word	0x08020ec0
 8012d44:	08020ee4 	.word	0x08020ee4

08012d48 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d106      	bne.n	8012d64 <memp_malloc_pool+0x1c>
 8012d56:	4b0a      	ldr	r3, [pc, #40]	@ (8012d80 <memp_malloc_pool+0x38>)
 8012d58:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8012d5c:	4909      	ldr	r1, [pc, #36]	@ (8012d84 <memp_malloc_pool+0x3c>)
 8012d5e:	480a      	ldr	r0, [pc, #40]	@ (8012d88 <memp_malloc_pool+0x40>)
 8012d60:	f00c f814 	bl	801ed8c <iprintf>
  if (desc == NULL) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d101      	bne.n	8012d6e <memp_malloc_pool+0x26>
    return NULL;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	e003      	b.n	8012d76 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f7ff ffb8 	bl	8012ce4 <do_memp_malloc_pool>
 8012d74:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3708      	adds	r7, #8
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	08020e90 	.word	0x08020e90
 8012d84:	08020f0c 	.word	0x08020f0c
 8012d88:	08020ee4 	.word	0x08020ee4

08012d8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b084      	sub	sp, #16
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	4603      	mov	r3, r0
 8012d94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8012d96:	79fb      	ldrb	r3, [r7, #7]
 8012d98:	2b0c      	cmp	r3, #12
 8012d9a:	d908      	bls.n	8012dae <memp_malloc+0x22>
 8012d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8012dc8 <memp_malloc+0x3c>)
 8012d9e:	f240 1257 	movw	r2, #343	@ 0x157
 8012da2:	490a      	ldr	r1, [pc, #40]	@ (8012dcc <memp_malloc+0x40>)
 8012da4:	480a      	ldr	r0, [pc, #40]	@ (8012dd0 <memp_malloc+0x44>)
 8012da6:	f00b fff1 	bl	801ed8c <iprintf>
 8012daa:	2300      	movs	r3, #0
 8012dac:	e008      	b.n	8012dc0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8012dae:	79fb      	ldrb	r3, [r7, #7]
 8012db0:	4a08      	ldr	r2, [pc, #32]	@ (8012dd4 <memp_malloc+0x48>)
 8012db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7ff ff94 	bl	8012ce4 <do_memp_malloc_pool>
 8012dbc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3710      	adds	r7, #16
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}
 8012dc8:	08020e90 	.word	0x08020e90
 8012dcc:	08020f20 	.word	0x08020f20
 8012dd0:	08020ee4 	.word	0x08020ee4
 8012dd4:	080242c0 	.word	0x080242c0

08012dd8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b084      	sub	sp, #16
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	f003 0303 	and.w	r3, r3, #3
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d006      	beq.n	8012dfa <do_memp_free_pool+0x22>
 8012dec:	4b0d      	ldr	r3, [pc, #52]	@ (8012e24 <do_memp_free_pool+0x4c>)
 8012dee:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8012df2:	490d      	ldr	r1, [pc, #52]	@ (8012e28 <do_memp_free_pool+0x50>)
 8012df4:	480d      	ldr	r0, [pc, #52]	@ (8012e2c <do_memp_free_pool+0x54>)
 8012df6:	f00b ffc9 	bl	801ed8c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012dfe:	f00b f9d1 	bl	801e1a4 <sys_arch_protect>
 8012e02:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	68db      	ldr	r3, [r3, #12]
 8012e12:	68fa      	ldr	r2, [r7, #12]
 8012e14:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012e16:	68b8      	ldr	r0, [r7, #8]
 8012e18:	f00b f9d2 	bl	801e1c0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012e1c:	bf00      	nop
 8012e1e:	3710      	adds	r7, #16
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}
 8012e24:	08020e90 	.word	0x08020e90
 8012e28:	08020f40 	.word	0x08020f40
 8012e2c:	08020ee4 	.word	0x08020ee4

08012e30 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b082      	sub	sp, #8
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d106      	bne.n	8012e4e <memp_free_pool+0x1e>
 8012e40:	4b0a      	ldr	r3, [pc, #40]	@ (8012e6c <memp_free_pool+0x3c>)
 8012e42:	f240 1295 	movw	r2, #405	@ 0x195
 8012e46:	490a      	ldr	r1, [pc, #40]	@ (8012e70 <memp_free_pool+0x40>)
 8012e48:	480a      	ldr	r0, [pc, #40]	@ (8012e74 <memp_free_pool+0x44>)
 8012e4a:	f00b ff9f 	bl	801ed8c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d007      	beq.n	8012e64 <memp_free_pool+0x34>
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d004      	beq.n	8012e64 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012e5a:	6839      	ldr	r1, [r7, #0]
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f7ff ffbb 	bl	8012dd8 <do_memp_free_pool>
 8012e62:	e000      	b.n	8012e66 <memp_free_pool+0x36>
    return;
 8012e64:	bf00      	nop
}
 8012e66:	3708      	adds	r7, #8
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}
 8012e6c:	08020e90 	.word	0x08020e90
 8012e70:	08020f0c 	.word	0x08020f0c
 8012e74:	08020ee4 	.word	0x08020ee4

08012e78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	4603      	mov	r3, r0
 8012e80:	6039      	str	r1, [r7, #0]
 8012e82:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012e84:	79fb      	ldrb	r3, [r7, #7]
 8012e86:	2b0c      	cmp	r3, #12
 8012e88:	d907      	bls.n	8012e9a <memp_free+0x22>
 8012e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8012ebc <memp_free+0x44>)
 8012e8c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8012e90:	490b      	ldr	r1, [pc, #44]	@ (8012ec0 <memp_free+0x48>)
 8012e92:	480c      	ldr	r0, [pc, #48]	@ (8012ec4 <memp_free+0x4c>)
 8012e94:	f00b ff7a 	bl	801ed8c <iprintf>
 8012e98:	e00c      	b.n	8012eb4 <memp_free+0x3c>

  if (mem == NULL) {
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d008      	beq.n	8012eb2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012ea0:	79fb      	ldrb	r3, [r7, #7]
 8012ea2:	4a09      	ldr	r2, [pc, #36]	@ (8012ec8 <memp_free+0x50>)
 8012ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ea8:	6839      	ldr	r1, [r7, #0]
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7ff ff94 	bl	8012dd8 <do_memp_free_pool>
 8012eb0:	e000      	b.n	8012eb4 <memp_free+0x3c>
    return;
 8012eb2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012eb4:	3708      	adds	r7, #8
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	08020e90 	.word	0x08020e90
 8012ec0:	08020f60 	.word	0x08020f60
 8012ec4:	08020ee4 	.word	0x08020ee4
 8012ec8:	080242c0 	.word	0x080242c0

08012ecc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012ecc:	b480      	push	{r7}
 8012ece:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012ed0:	bf00      	nop
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr
	...

08012edc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b088      	sub	sp, #32
 8012ee0:	af02      	add	r7, sp, #8
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	607a      	str	r2, [r7, #4]
 8012ee8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d108      	bne.n	8012f02 <netif_add+0x26>
 8012ef0:	4b96      	ldr	r3, [pc, #600]	@ (801314c <netif_add+0x270>)
 8012ef2:	f240 1227 	movw	r2, #295	@ 0x127
 8012ef6:	4996      	ldr	r1, [pc, #600]	@ (8013150 <netif_add+0x274>)
 8012ef8:	4896      	ldr	r0, [pc, #600]	@ (8013154 <netif_add+0x278>)
 8012efa:	f00b ff47 	bl	801ed8c <iprintf>
 8012efe:	2300      	movs	r3, #0
 8012f00:	e14c      	b.n	801319c <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8012f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d108      	bne.n	8012f1a <netif_add+0x3e>
 8012f08:	4b90      	ldr	r3, [pc, #576]	@ (801314c <netif_add+0x270>)
 8012f0a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8012f0e:	4992      	ldr	r1, [pc, #584]	@ (8013158 <netif_add+0x27c>)
 8012f10:	4890      	ldr	r0, [pc, #576]	@ (8013154 <netif_add+0x278>)
 8012f12:	f00b ff3b 	bl	801ed8c <iprintf>
 8012f16:	2300      	movs	r3, #0
 8012f18:	e140      	b.n	801319c <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d101      	bne.n	8012f24 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012f20:	4b8e      	ldr	r3, [pc, #568]	@ (801315c <netif_add+0x280>)
 8012f22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d101      	bne.n	8012f2e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012f2a:	4b8c      	ldr	r3, [pc, #560]	@ (801315c <netif_add+0x280>)
 8012f2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d101      	bne.n	8012f38 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8012f34:	4b89      	ldr	r3, [pc, #548]	@ (801315c <netif_add+0x280>)
 8012f36:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	2200      	movs	r2, #0
 8012f42:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2200      	movs	r2, #0
 8012f48:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	4a84      	ldr	r2, [pc, #528]	@ (8013160 <netif_add+0x284>)
 8012f4e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	2200      	movs	r2, #0
 8012f54:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2200      	movs	r2, #0
 8012f62:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	6a3a      	ldr	r2, [r7, #32]
 8012f68:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012f6a:	4b7e      	ldr	r3, [pc, #504]	@ (8013164 <netif_add+0x288>)
 8012f6c:	781a      	ldrb	r2, [r3, #0]
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012f78:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	687a      	ldr	r2, [r7, #4]
 8012f7e:	68b9      	ldr	r1, [r7, #8]
 8012f80:	68f8      	ldr	r0, [r7, #12]
 8012f82:	f000 f9f5 	bl	8013370 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8012f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	4798      	blx	r3
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d001      	beq.n	8012f96 <netif_add+0xba>
    return NULL;
 8012f92:	2300      	movs	r3, #0
 8012f94:	e102      	b.n	801319c <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012f9c:	2bff      	cmp	r3, #255	@ 0xff
 8012f9e:	d103      	bne.n	8012fa8 <netif_add+0xcc>
        netif->num = 0;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012fac:	4b6e      	ldr	r3, [pc, #440]	@ (8013168 <netif_add+0x28c>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	617b      	str	r3, [r7, #20]
 8012fb2:	e02b      	b.n	801300c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012fb4:	697a      	ldr	r2, [r7, #20]
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d106      	bne.n	8012fca <netif_add+0xee>
 8012fbc:	4b63      	ldr	r3, [pc, #396]	@ (801314c <netif_add+0x270>)
 8012fbe:	f240 128b 	movw	r2, #395	@ 0x18b
 8012fc2:	496a      	ldr	r1, [pc, #424]	@ (801316c <netif_add+0x290>)
 8012fc4:	4863      	ldr	r0, [pc, #396]	@ (8013154 <netif_add+0x278>)
 8012fc6:	f00b fee1 	bl	801ed8c <iprintf>
        num_netifs++;
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	3301      	adds	r3, #1
 8012fce:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	2bff      	cmp	r3, #255	@ 0xff
 8012fd4:	dd06      	ble.n	8012fe4 <netif_add+0x108>
 8012fd6:	4b5d      	ldr	r3, [pc, #372]	@ (801314c <netif_add+0x270>)
 8012fd8:	f240 128d 	movw	r2, #397	@ 0x18d
 8012fdc:	4964      	ldr	r1, [pc, #400]	@ (8013170 <netif_add+0x294>)
 8012fde:	485d      	ldr	r0, [pc, #372]	@ (8013154 <netif_add+0x278>)
 8012fe0:	f00b fed4 	bl	801ed8c <iprintf>
        if (netif2->num == netif->num) {
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d108      	bne.n	8013006 <netif_add+0x12a>
          netif->num++;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	b2da      	uxtb	r2, r3
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013004:	e005      	b.n	8013012 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	617b      	str	r3, [r7, #20]
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d1d0      	bne.n	8012fb4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d1be      	bne.n	8012f96 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801301e:	2bfe      	cmp	r3, #254	@ 0xfe
 8013020:	d103      	bne.n	801302a <netif_add+0x14e>
    netif_num = 0;
 8013022:	4b50      	ldr	r3, [pc, #320]	@ (8013164 <netif_add+0x288>)
 8013024:	2200      	movs	r2, #0
 8013026:	701a      	strb	r2, [r3, #0]
 8013028:	e006      	b.n	8013038 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013030:	3301      	adds	r3, #1
 8013032:	b2da      	uxtb	r2, r3
 8013034:	4b4b      	ldr	r3, [pc, #300]	@ (8013164 <netif_add+0x288>)
 8013036:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013038:	4b4b      	ldr	r3, [pc, #300]	@ (8013168 <netif_add+0x28c>)
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013040:	4a49      	ldr	r2, [pc, #292]	@ (8013168 <netif_add+0x28c>)
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801304c:	4619      	mov	r1, r3
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013054:	461a      	mov	r2, r3
 8013056:	4847      	ldr	r0, [pc, #284]	@ (8013174 <netif_add+0x298>)
 8013058:	f00b fe98 	bl	801ed8c <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 801305c:	4846      	ldr	r0, [pc, #280]	@ (8013178 <netif_add+0x29c>)
 801305e:	f00b fe95 	bl	801ed8c <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d003      	beq.n	8013070 <netif_add+0x194>
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	4619      	mov	r1, r3
 801306e:	e000      	b.n	8013072 <netif_add+0x196>
 8013070:	2100      	movs	r1, #0
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d004      	beq.n	8013082 <netif_add+0x1a6>
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	3301      	adds	r3, #1
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	461a      	mov	r2, r3
 8013080:	e000      	b.n	8013084 <netif_add+0x1a8>
 8013082:	2200      	movs	r2, #0
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d004      	beq.n	8013094 <netif_add+0x1b8>
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	3302      	adds	r3, #2
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	4618      	mov	r0, r3
 8013092:	e000      	b.n	8013096 <netif_add+0x1ba>
 8013094:	2000      	movs	r0, #0
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d003      	beq.n	80130a4 <netif_add+0x1c8>
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	3303      	adds	r3, #3
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	e000      	b.n	80130a6 <netif_add+0x1ca>
 80130a4:	2300      	movs	r3, #0
 80130a6:	9300      	str	r3, [sp, #0]
 80130a8:	4603      	mov	r3, r0
 80130aa:	4834      	ldr	r0, [pc, #208]	@ (801317c <netif_add+0x2a0>)
 80130ac:	f00b fe6e 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 80130b0:	4833      	ldr	r0, [pc, #204]	@ (8013180 <netif_add+0x2a4>)
 80130b2:	f00b fe6b 	bl	801ed8c <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d003      	beq.n	80130c4 <netif_add+0x1e8>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	781b      	ldrb	r3, [r3, #0]
 80130c0:	4619      	mov	r1, r3
 80130c2:	e000      	b.n	80130c6 <netif_add+0x1ea>
 80130c4:	2100      	movs	r1, #0
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d004      	beq.n	80130d6 <netif_add+0x1fa>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	3301      	adds	r3, #1
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	461a      	mov	r2, r3
 80130d4:	e000      	b.n	80130d8 <netif_add+0x1fc>
 80130d6:	2200      	movs	r2, #0
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d004      	beq.n	80130e8 <netif_add+0x20c>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	3302      	adds	r3, #2
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	4618      	mov	r0, r3
 80130e6:	e000      	b.n	80130ea <netif_add+0x20e>
 80130e8:	2000      	movs	r0, #0
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d003      	beq.n	80130f8 <netif_add+0x21c>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	3303      	adds	r3, #3
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	e000      	b.n	80130fa <netif_add+0x21e>
 80130f8:	2300      	movs	r3, #0
 80130fa:	9300      	str	r3, [sp, #0]
 80130fc:	4603      	mov	r3, r0
 80130fe:	481f      	ldr	r0, [pc, #124]	@ (801317c <netif_add+0x2a0>)
 8013100:	f00b fe44 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8013104:	481f      	ldr	r0, [pc, #124]	@ (8013184 <netif_add+0x2a8>)
 8013106:	f00b fe41 	bl	801ed8c <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d003      	beq.n	8013118 <netif_add+0x23c>
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	781b      	ldrb	r3, [r3, #0]
 8013114:	4619      	mov	r1, r3
 8013116:	e000      	b.n	801311a <netif_add+0x23e>
 8013118:	2100      	movs	r1, #0
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d004      	beq.n	801312a <netif_add+0x24e>
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	3301      	adds	r3, #1
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	461a      	mov	r2, r3
 8013128:	e000      	b.n	801312c <netif_add+0x250>
 801312a:	2200      	movs	r2, #0
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d004      	beq.n	801313c <netif_add+0x260>
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	3302      	adds	r3, #2
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	4618      	mov	r0, r3
 801313a:	e000      	b.n	801313e <netif_add+0x262>
 801313c:	2000      	movs	r0, #0
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d021      	beq.n	8013188 <netif_add+0x2ac>
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	3303      	adds	r3, #3
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	e01e      	b.n	801318a <netif_add+0x2ae>
 801314c:	08020f7c 	.word	0x08020f7c
 8013150:	08021010 	.word	0x08021010
 8013154:	08020fcc 	.word	0x08020fcc
 8013158:	0802102c 	.word	0x0802102c
 801315c:	08024334 	.word	0x08024334
 8013160:	08013673 	.word	0x08013673
 8013164:	20022798 	.word	0x20022798
 8013168:	20022790 	.word	0x20022790
 801316c:	08021050 	.word	0x08021050
 8013170:	08021064 	.word	0x08021064
 8013174:	08021094 	.word	0x08021094
 8013178:	080210b4 	.word	0x080210b4
 801317c:	080210bc 	.word	0x080210bc
 8013180:	080210cc 	.word	0x080210cc
 8013184:	080210d8 	.word	0x080210d8
 8013188:	2300      	movs	r3, #0
 801318a:	9300      	str	r3, [sp, #0]
 801318c:	4603      	mov	r3, r0
 801318e:	4805      	ldr	r0, [pc, #20]	@ (80131a4 <netif_add+0x2c8>)
 8013190:	f00b fdfc 	bl	801ed8c <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8013194:	200a      	movs	r0, #10
 8013196:	f00b fe0b 	bl	801edb0 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801319a:	68fb      	ldr	r3, [r7, #12]
}
 801319c:	4618      	mov	r0, r3
 801319e:	3718      	adds	r7, #24
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	080210bc 	.word	0x080210bc

080131a8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80131b2:	6839      	ldr	r1, [r7, #0]
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f002 ff13 	bl	8015fe0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80131ba:	6839      	ldr	r1, [r7, #0]
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f008 fa5f 	bl	801b680 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80131c2:	bf00      	nop
 80131c4:	3708      	adds	r7, #8
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
	...

080131cc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b086      	sub	sp, #24
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	60f8      	str	r0, [r7, #12]
 80131d4:	60b9      	str	r1, [r7, #8]
 80131d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d106      	bne.n	80131ec <netif_do_set_ipaddr+0x20>
 80131de:	4b1e      	ldr	r3, [pc, #120]	@ (8013258 <netif_do_set_ipaddr+0x8c>)
 80131e0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80131e4:	491d      	ldr	r1, [pc, #116]	@ (801325c <netif_do_set_ipaddr+0x90>)
 80131e6:	481e      	ldr	r0, [pc, #120]	@ (8013260 <netif_do_set_ipaddr+0x94>)
 80131e8:	f00b fdd0 	bl	801ed8c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d106      	bne.n	8013200 <netif_do_set_ipaddr+0x34>
 80131f2:	4b19      	ldr	r3, [pc, #100]	@ (8013258 <netif_do_set_ipaddr+0x8c>)
 80131f4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80131f8:	4918      	ldr	r1, [pc, #96]	@ (801325c <netif_do_set_ipaddr+0x90>)
 80131fa:	4819      	ldr	r0, [pc, #100]	@ (8013260 <netif_do_set_ipaddr+0x94>)
 80131fc:	f00b fdc6 	bl	801ed8c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	3304      	adds	r3, #4
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	429a      	cmp	r2, r3
 801320c:	d01f      	beq.n	801324e <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	3304      	adds	r3, #4
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 801321e:	4811      	ldr	r0, [pc, #68]	@ (8013264 <netif_do_set_ipaddr+0x98>)
 8013220:	f00b fe24 	bl	801ee6c <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013224:	f107 0314 	add.w	r3, r7, #20
 8013228:	4619      	mov	r1, r3
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f7ff ffbc 	bl	80131a8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d002      	beq.n	801323c <netif_do_set_ipaddr+0x70>
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	e000      	b.n	801323e <netif_do_set_ipaddr+0x72>
 801323c:	2300      	movs	r3, #0
 801323e:	68fa      	ldr	r2, [r7, #12]
 8013240:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013242:	2101      	movs	r1, #1
 8013244:	68f8      	ldr	r0, [r7, #12]
 8013246:	f000 f92d 	bl	80134a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801324a:	2301      	movs	r3, #1
 801324c:	e000      	b.n	8013250 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 801324e:	2300      	movs	r3, #0
}
 8013250:	4618      	mov	r0, r3
 8013252:	3718      	adds	r7, #24
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}
 8013258:	08020f7c 	.word	0x08020f7c
 801325c:	080210e0 	.word	0x080210e0
 8013260:	08020fcc 	.word	0x08020fcc
 8013264:	080210f0 	.word	0x080210f0

08013268 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013268:	b5b0      	push	{r4, r5, r7, lr}
 801326a:	b088      	sub	sp, #32
 801326c:	af04      	add	r7, sp, #16
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	681a      	ldr	r2, [r3, #0]
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	3308      	adds	r3, #8
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	429a      	cmp	r2, r3
 8013280:	d02d      	beq.n	80132de <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d002      	beq.n	801328e <netif_do_set_netmask+0x26>
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	e000      	b.n	8013290 <netif_do_set_netmask+0x28>
 801328e:	2300      	movs	r3, #0
 8013290:	68fa      	ldr	r2, [r7, #12]
 8013292:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801329a:	4618      	mov	r0, r3
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80132a2:	461c      	mov	r4, r3
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	3308      	adds	r3, #8
 80132a8:	781b      	ldrb	r3, [r3, #0]
 80132aa:	461d      	mov	r5, r3
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	3308      	adds	r3, #8
 80132b0:	3301      	adds	r3, #1
 80132b2:	781b      	ldrb	r3, [r3, #0]
 80132b4:	461a      	mov	r2, r3
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	3308      	adds	r3, #8
 80132ba:	3302      	adds	r3, #2
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	4619      	mov	r1, r3
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	3308      	adds	r3, #8
 80132c4:	3303      	adds	r3, #3
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	9302      	str	r3, [sp, #8]
 80132ca:	9101      	str	r1, [sp, #4]
 80132cc:	9200      	str	r2, [sp, #0]
 80132ce:	462b      	mov	r3, r5
 80132d0:	4622      	mov	r2, r4
 80132d2:	4601      	mov	r1, r0
 80132d4:	4804      	ldr	r0, [pc, #16]	@ (80132e8 <netif_do_set_netmask+0x80>)
 80132d6:	f00b fd59 	bl	801ed8c <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80132da:	2301      	movs	r3, #1
 80132dc:	e000      	b.n	80132e0 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 80132de:	2300      	movs	r3, #0
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3710      	adds	r7, #16
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bdb0      	pop	{r4, r5, r7, pc}
 80132e8:	08021140 	.word	0x08021140

080132ec <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80132ec:	b5b0      	push	{r4, r5, r7, lr}
 80132ee:	b088      	sub	sp, #32
 80132f0:	af04      	add	r7, sp, #16
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	330c      	adds	r3, #12
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	429a      	cmp	r2, r3
 8013304:	d02d      	beq.n	8013362 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d002      	beq.n	8013312 <netif_do_set_gw+0x26>
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	e000      	b.n	8013314 <netif_do_set_gw+0x28>
 8013312:	2300      	movs	r3, #0
 8013314:	68fa      	ldr	r2, [r7, #12]
 8013316:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801331e:	4618      	mov	r0, r3
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013326:	461c      	mov	r4, r3
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	330c      	adds	r3, #12
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	461d      	mov	r5, r3
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	330c      	adds	r3, #12
 8013334:	3301      	adds	r3, #1
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	461a      	mov	r2, r3
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	330c      	adds	r3, #12
 801333e:	3302      	adds	r3, #2
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	4619      	mov	r1, r3
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	330c      	adds	r3, #12
 8013348:	3303      	adds	r3, #3
 801334a:	781b      	ldrb	r3, [r3, #0]
 801334c:	9302      	str	r3, [sp, #8]
 801334e:	9101      	str	r1, [sp, #4]
 8013350:	9200      	str	r2, [sp, #0]
 8013352:	462b      	mov	r3, r5
 8013354:	4622      	mov	r2, r4
 8013356:	4601      	mov	r1, r0
 8013358:	4804      	ldr	r0, [pc, #16]	@ (801336c <netif_do_set_gw+0x80>)
 801335a:	f00b fd17 	bl	801ed8c <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801335e:	2301      	movs	r3, #1
 8013360:	e000      	b.n	8013364 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8013362:	2300      	movs	r3, #0
}
 8013364:	4618      	mov	r0, r3
 8013366:	3710      	adds	r7, #16
 8013368:	46bd      	mov	sp, r7
 801336a:	bdb0      	pop	{r4, r5, r7, pc}
 801336c:	080211a0 	.word	0x080211a0

08013370 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b088      	sub	sp, #32
 8013374:	af00      	add	r7, sp, #0
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801337e:	2300      	movs	r3, #0
 8013380:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013382:	2300      	movs	r3, #0
 8013384:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d101      	bne.n	8013390 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801338c:	4b1c      	ldr	r3, [pc, #112]	@ (8013400 <netif_set_addr+0x90>)
 801338e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d101      	bne.n	801339a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013396:	4b1a      	ldr	r3, [pc, #104]	@ (8013400 <netif_set_addr+0x90>)
 8013398:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d101      	bne.n	80133a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80133a0:	4b17      	ldr	r3, [pc, #92]	@ (8013400 <netif_set_addr+0x90>)
 80133a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d003      	beq.n	80133b2 <netif_set_addr+0x42>
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d101      	bne.n	80133b6 <netif_set_addr+0x46>
 80133b2:	2301      	movs	r3, #1
 80133b4:	e000      	b.n	80133b8 <netif_set_addr+0x48>
 80133b6:	2300      	movs	r3, #0
 80133b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d006      	beq.n	80133ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80133c0:	f107 0310 	add.w	r3, r7, #16
 80133c4:	461a      	mov	r2, r3
 80133c6:	68b9      	ldr	r1, [r7, #8]
 80133c8:	68f8      	ldr	r0, [r7, #12]
 80133ca:	f7ff feff 	bl	80131cc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80133ce:	69fa      	ldr	r2, [r7, #28]
 80133d0:	6879      	ldr	r1, [r7, #4]
 80133d2:	68f8      	ldr	r0, [r7, #12]
 80133d4:	f7ff ff48 	bl	8013268 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80133d8:	69ba      	ldr	r2, [r7, #24]
 80133da:	6839      	ldr	r1, [r7, #0]
 80133dc:	68f8      	ldr	r0, [r7, #12]
 80133de:	f7ff ff85 	bl	80132ec <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d106      	bne.n	80133f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80133e8:	f107 0310 	add.w	r3, r7, #16
 80133ec:	461a      	mov	r2, r3
 80133ee:	68b9      	ldr	r1, [r7, #8]
 80133f0:	68f8      	ldr	r0, [r7, #12]
 80133f2:	f7ff feeb 	bl	80131cc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80133f6:	bf00      	nop
 80133f8:	3720      	adds	r7, #32
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}
 80133fe:	bf00      	nop
 8013400:	08024334 	.word	0x08024334

08013404 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801340c:	4a0d      	ldr	r2, [pc, #52]	@ (8013444 <netif_set_default+0x40>)
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d004      	beq.n	8013422 <netif_set_default+0x1e>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801341e:	4619      	mov	r1, r3
 8013420:	e000      	b.n	8013424 <netif_set_default+0x20>
 8013422:	2127      	movs	r1, #39	@ 0x27
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d003      	beq.n	8013432 <netif_set_default+0x2e>
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013430:	e000      	b.n	8013434 <netif_set_default+0x30>
 8013432:	2327      	movs	r3, #39	@ 0x27
 8013434:	461a      	mov	r2, r3
 8013436:	4804      	ldr	r0, [pc, #16]	@ (8013448 <netif_set_default+0x44>)
 8013438:	f00b fca8 	bl	801ed8c <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801343c:	bf00      	nop
 801343e:	3708      	adds	r7, #8
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}
 8013444:	20022794 	.word	0x20022794
 8013448:	08021214 	.word	0x08021214

0801344c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b082      	sub	sp, #8
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d107      	bne.n	801346a <netif_set_up+0x1e>
 801345a:	4b0f      	ldr	r3, [pc, #60]	@ (8013498 <netif_set_up+0x4c>)
 801345c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013460:	490e      	ldr	r1, [pc, #56]	@ (801349c <netif_set_up+0x50>)
 8013462:	480f      	ldr	r0, [pc, #60]	@ (80134a0 <netif_set_up+0x54>)
 8013464:	f00b fc92 	bl	801ed8c <iprintf>
 8013468:	e013      	b.n	8013492 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013470:	f003 0301 	and.w	r3, r3, #1
 8013474:	2b00      	cmp	r3, #0
 8013476:	d10c      	bne.n	8013492 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801347e:	f043 0301 	orr.w	r3, r3, #1
 8013482:	b2da      	uxtb	r2, r3
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801348a:	2103      	movs	r1, #3
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f000 f809 	bl	80134a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013492:	3708      	adds	r7, #8
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}
 8013498:	08020f7c 	.word	0x08020f7c
 801349c:	0802123c 	.word	0x0802123c
 80134a0:	08020fcc 	.word	0x08020fcc

080134a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	460b      	mov	r3, r1
 80134ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d106      	bne.n	80134c4 <netif_issue_reports+0x20>
 80134b6:	4b18      	ldr	r3, [pc, #96]	@ (8013518 <netif_issue_reports+0x74>)
 80134b8:	f240 326d 	movw	r2, #877	@ 0x36d
 80134bc:	4917      	ldr	r1, [pc, #92]	@ (801351c <netif_issue_reports+0x78>)
 80134be:	4818      	ldr	r0, [pc, #96]	@ (8013520 <netif_issue_reports+0x7c>)
 80134c0:	f00b fc64 	bl	801ed8c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80134ca:	f003 0304 	and.w	r3, r3, #4
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d01e      	beq.n	8013510 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80134d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d017      	beq.n	8013510 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80134e0:	78fb      	ldrb	r3, [r7, #3]
 80134e2:	f003 0301 	and.w	r3, r3, #1
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d013      	beq.n	8013512 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	3304      	adds	r3, #4
 80134ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d00e      	beq.n	8013512 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80134fa:	f003 0308 	and.w	r3, r3, #8
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d007      	beq.n	8013512 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	3304      	adds	r3, #4
 8013506:	4619      	mov	r1, r3
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f009 f895 	bl	801c638 <etharp_request>
 801350e:	e000      	b.n	8013512 <netif_issue_reports+0x6e>
    return;
 8013510:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013512:	3708      	adds	r7, #8
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}
 8013518:	08020f7c 	.word	0x08020f7c
 801351c:	08021258 	.word	0x08021258
 8013520:	08020fcc 	.word	0x08020fcc

08013524 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d107      	bne.n	8013542 <netif_set_down+0x1e>
 8013532:	4b12      	ldr	r3, [pc, #72]	@ (801357c <netif_set_down+0x58>)
 8013534:	f240 329b 	movw	r2, #923	@ 0x39b
 8013538:	4911      	ldr	r1, [pc, #68]	@ (8013580 <netif_set_down+0x5c>)
 801353a:	4812      	ldr	r0, [pc, #72]	@ (8013584 <netif_set_down+0x60>)
 801353c:	f00b fc26 	bl	801ed8c <iprintf>
 8013540:	e019      	b.n	8013576 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013548:	f003 0301 	and.w	r3, r3, #1
 801354c:	2b00      	cmp	r3, #0
 801354e:	d012      	beq.n	8013576 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013556:	f023 0301 	bic.w	r3, r3, #1
 801355a:	b2da      	uxtb	r2, r3
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013568:	f003 0308 	and.w	r3, r3, #8
 801356c:	2b00      	cmp	r3, #0
 801356e:	d002      	beq.n	8013576 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f008 fc1f 	bl	801bdb4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013576:	3708      	adds	r7, #8
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}
 801357c:	08020f7c 	.word	0x08020f7c
 8013580:	0802127c 	.word	0x0802127c
 8013584:	08020fcc 	.word	0x08020fcc

08013588 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b082      	sub	sp, #8
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d107      	bne.n	80135a6 <netif_set_link_up+0x1e>
 8013596:	4b13      	ldr	r3, [pc, #76]	@ (80135e4 <netif_set_link_up+0x5c>)
 8013598:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801359c:	4912      	ldr	r1, [pc, #72]	@ (80135e8 <netif_set_link_up+0x60>)
 801359e:	4813      	ldr	r0, [pc, #76]	@ (80135ec <netif_set_link_up+0x64>)
 80135a0:	f00b fbf4 	bl	801ed8c <iprintf>
 80135a4:	e01b      	b.n	80135de <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80135ac:	f003 0304 	and.w	r3, r3, #4
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d114      	bne.n	80135de <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80135ba:	f043 0304 	orr.w	r3, r3, #4
 80135be:	b2da      	uxtb	r2, r3
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80135c6:	2103      	movs	r1, #3
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7ff ff6b 	bl	80134a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	69db      	ldr	r3, [r3, #28]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d003      	beq.n	80135de <netif_set_link_up+0x56>
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	69db      	ldr	r3, [r3, #28]
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80135de:	3708      	adds	r7, #8
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}
 80135e4:	08020f7c 	.word	0x08020f7c
 80135e8:	0802129c 	.word	0x0802129c
 80135ec:	08020fcc 	.word	0x08020fcc

080135f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d107      	bne.n	801360e <netif_set_link_down+0x1e>
 80135fe:	4b11      	ldr	r3, [pc, #68]	@ (8013644 <netif_set_link_down+0x54>)
 8013600:	f240 4206 	movw	r2, #1030	@ 0x406
 8013604:	4910      	ldr	r1, [pc, #64]	@ (8013648 <netif_set_link_down+0x58>)
 8013606:	4811      	ldr	r0, [pc, #68]	@ (801364c <netif_set_link_down+0x5c>)
 8013608:	f00b fbc0 	bl	801ed8c <iprintf>
 801360c:	e017      	b.n	801363e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013614:	f003 0304 	and.w	r3, r3, #4
 8013618:	2b00      	cmp	r3, #0
 801361a:	d010      	beq.n	801363e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013622:	f023 0304 	bic.w	r3, r3, #4
 8013626:	b2da      	uxtb	r2, r3
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	69db      	ldr	r3, [r3, #28]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d003      	beq.n	801363e <netif_set_link_down+0x4e>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	69db      	ldr	r3, [r3, #28]
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801363e:	3708      	adds	r7, #8
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}
 8013644:	08020f7c 	.word	0x08020f7c
 8013648:	080212c0 	.word	0x080212c0
 801364c:	08020fcc 	.word	0x08020fcc

08013650 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013650:	b480      	push	{r7}
 8013652:	b083      	sub	sp, #12
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d002      	beq.n	8013666 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	683a      	ldr	r2, [r7, #0]
 8013664:	61da      	str	r2, [r3, #28]
  }
}
 8013666:	bf00      	nop
 8013668:	370c      	adds	r7, #12
 801366a:	46bd      	mov	sp, r7
 801366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013670:	4770      	bx	lr

08013672 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013672:	b480      	push	{r7}
 8013674:	b085      	sub	sp, #20
 8013676:	af00      	add	r7, sp, #0
 8013678:	60f8      	str	r0, [r7, #12]
 801367a:	60b9      	str	r1, [r7, #8]
 801367c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801367e:	f06f 030b 	mvn.w	r3, #11
}
 8013682:	4618      	mov	r0, r3
 8013684:	3714      	adds	r7, #20
 8013686:	46bd      	mov	sp, r7
 8013688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368c:	4770      	bx	lr
	...

08013690 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013690:	b480      	push	{r7}
 8013692:	b085      	sub	sp, #20
 8013694:	af00      	add	r7, sp, #0
 8013696:	4603      	mov	r3, r0
 8013698:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801369a:	79fb      	ldrb	r3, [r7, #7]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d013      	beq.n	80136c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80136a0:	4b0d      	ldr	r3, [pc, #52]	@ (80136d8 <netif_get_by_index+0x48>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	60fb      	str	r3, [r7, #12]
 80136a6:	e00c      	b.n	80136c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80136ae:	3301      	adds	r3, #1
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	79fa      	ldrb	r2, [r7, #7]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d101      	bne.n	80136bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	e006      	b.n	80136ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	60fb      	str	r3, [r7, #12]
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d1ef      	bne.n	80136a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80136c8:	2300      	movs	r3, #0
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3714      	adds	r7, #20
 80136ce:	46bd      	mov	sp, r7
 80136d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d4:	4770      	bx	lr
 80136d6:	bf00      	nop
 80136d8:	20022790 	.word	0x20022790

080136dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b082      	sub	sp, #8
 80136e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80136e2:	f00a fd5f 	bl	801e1a4 <sys_arch_protect>
 80136e6:	6038      	str	r0, [r7, #0]
 80136e8:	4b0d      	ldr	r3, [pc, #52]	@ (8013720 <pbuf_free_ooseq+0x44>)
 80136ea:	2200      	movs	r2, #0
 80136ec:	701a      	strb	r2, [r3, #0]
 80136ee:	6838      	ldr	r0, [r7, #0]
 80136f0:	f00a fd66 	bl	801e1c0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80136f4:	4b0b      	ldr	r3, [pc, #44]	@ (8013724 <pbuf_free_ooseq+0x48>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	607b      	str	r3, [r7, #4]
 80136fa:	e00a      	b.n	8013712 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013700:	2b00      	cmp	r3, #0
 8013702:	d003      	beq.n	801370c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f002 fca9 	bl	801605c <tcp_free_ooseq>
      return;
 801370a:	e005      	b.n	8013718 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	607b      	str	r3, [r7, #4]
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d1f1      	bne.n	80136fc <pbuf_free_ooseq+0x20>
    }
  }
}
 8013718:	3708      	adds	r7, #8
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}
 801371e:	bf00      	nop
 8013720:	20022799 	.word	0x20022799
 8013724:	200227a8 	.word	0x200227a8

08013728 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013730:	f7ff ffd4 	bl	80136dc <pbuf_free_ooseq>
}
 8013734:	bf00      	nop
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013742:	f00a fd2f 	bl	801e1a4 <sys_arch_protect>
 8013746:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013748:	4b0f      	ldr	r3, [pc, #60]	@ (8013788 <pbuf_pool_is_empty+0x4c>)
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801374e:	4b0e      	ldr	r3, [pc, #56]	@ (8013788 <pbuf_pool_is_empty+0x4c>)
 8013750:	2201      	movs	r2, #1
 8013752:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f00a fd33 	bl	801e1c0 <sys_arch_unprotect>

  if (!queued) {
 801375a:	78fb      	ldrb	r3, [r7, #3]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d10f      	bne.n	8013780 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013760:	2100      	movs	r1, #0
 8013762:	480a      	ldr	r0, [pc, #40]	@ (801378c <pbuf_pool_is_empty+0x50>)
 8013764:	f7fe fd9e 	bl	80122a4 <tcpip_try_callback>
 8013768:	4603      	mov	r3, r0
 801376a:	2b00      	cmp	r3, #0
 801376c:	d008      	beq.n	8013780 <pbuf_pool_is_empty+0x44>
 801376e:	f00a fd19 	bl	801e1a4 <sys_arch_protect>
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	4b04      	ldr	r3, [pc, #16]	@ (8013788 <pbuf_pool_is_empty+0x4c>)
 8013776:	2200      	movs	r2, #0
 8013778:	701a      	strb	r2, [r3, #0]
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f00a fd20 	bl	801e1c0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013780:	bf00      	nop
 8013782:	3708      	adds	r7, #8
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}
 8013788:	20022799 	.word	0x20022799
 801378c:	08013729 	.word	0x08013729

08013790 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013790:	b480      	push	{r7}
 8013792:	b085      	sub	sp, #20
 8013794:	af00      	add	r7, sp, #0
 8013796:	60f8      	str	r0, [r7, #12]
 8013798:	60b9      	str	r1, [r7, #8]
 801379a:	4611      	mov	r1, r2
 801379c:	461a      	mov	r2, r3
 801379e:	460b      	mov	r3, r1
 80137a0:	80fb      	strh	r3, [r7, #6]
 80137a2:	4613      	mov	r3, r2
 80137a4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2200      	movs	r2, #0
 80137aa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	68ba      	ldr	r2, [r7, #8]
 80137b0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	88fa      	ldrh	r2, [r7, #6]
 80137b6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	88ba      	ldrh	r2, [r7, #4]
 80137bc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80137be:	8b3b      	ldrh	r3, [r7, #24]
 80137c0:	b2da      	uxtb	r2, r3
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	7f3a      	ldrb	r2, [r7, #28]
 80137ca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	2201      	movs	r2, #1
 80137d0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	2200      	movs	r2, #0
 80137d6:	73da      	strb	r2, [r3, #15]
}
 80137d8:	bf00      	nop
 80137da:	3714      	adds	r7, #20
 80137dc:	46bd      	mov	sp, r7
 80137de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e2:	4770      	bx	lr

080137e4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b08c      	sub	sp, #48	@ 0x30
 80137e8:	af02      	add	r7, sp, #8
 80137ea:	4603      	mov	r3, r0
 80137ec:	71fb      	strb	r3, [r7, #7]
 80137ee:	460b      	mov	r3, r1
 80137f0:	80bb      	strh	r3, [r7, #4]
 80137f2:	4613      	mov	r3, r2
 80137f4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80137f6:	79fb      	ldrb	r3, [r7, #7]
 80137f8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80137fa:	887b      	ldrh	r3, [r7, #2]
 80137fc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013800:	d07f      	beq.n	8013902 <pbuf_alloc+0x11e>
 8013802:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013806:	f300 80c8 	bgt.w	801399a <pbuf_alloc+0x1b6>
 801380a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801380e:	d010      	beq.n	8013832 <pbuf_alloc+0x4e>
 8013810:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013814:	f300 80c1 	bgt.w	801399a <pbuf_alloc+0x1b6>
 8013818:	2b01      	cmp	r3, #1
 801381a:	d002      	beq.n	8013822 <pbuf_alloc+0x3e>
 801381c:	2b41      	cmp	r3, #65	@ 0x41
 801381e:	f040 80bc 	bne.w	801399a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013822:	887a      	ldrh	r2, [r7, #2]
 8013824:	88bb      	ldrh	r3, [r7, #4]
 8013826:	4619      	mov	r1, r3
 8013828:	2000      	movs	r0, #0
 801382a:	f000 f8d1 	bl	80139d0 <pbuf_alloc_reference>
 801382e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013830:	e0bd      	b.n	80139ae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013832:	2300      	movs	r3, #0
 8013834:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013836:	2300      	movs	r3, #0
 8013838:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801383a:	88bb      	ldrh	r3, [r7, #4]
 801383c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801383e:	200c      	movs	r0, #12
 8013840:	f7ff faa4 	bl	8012d8c <memp_malloc>
 8013844:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d109      	bne.n	8013860 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801384c:	f7ff ff76 	bl	801373c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013852:	2b00      	cmp	r3, #0
 8013854:	d002      	beq.n	801385c <pbuf_alloc+0x78>
            pbuf_free(p);
 8013856:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013858:	f000 faa8 	bl	8013dac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801385c:	2300      	movs	r3, #0
 801385e:	e0a7      	b.n	80139b0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013860:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013862:	3303      	adds	r3, #3
 8013864:	b29b      	uxth	r3, r3
 8013866:	f023 0303 	bic.w	r3, r3, #3
 801386a:	b29b      	uxth	r3, r3
 801386c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013870:	b29b      	uxth	r3, r3
 8013872:	8b7a      	ldrh	r2, [r7, #26]
 8013874:	4293      	cmp	r3, r2
 8013876:	bf28      	it	cs
 8013878:	4613      	movcs	r3, r2
 801387a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801387c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801387e:	3310      	adds	r3, #16
 8013880:	693a      	ldr	r2, [r7, #16]
 8013882:	4413      	add	r3, r2
 8013884:	3303      	adds	r3, #3
 8013886:	f023 0303 	bic.w	r3, r3, #3
 801388a:	4618      	mov	r0, r3
 801388c:	89f9      	ldrh	r1, [r7, #14]
 801388e:	8b7a      	ldrh	r2, [r7, #26]
 8013890:	2300      	movs	r3, #0
 8013892:	9301      	str	r3, [sp, #4]
 8013894:	887b      	ldrh	r3, [r7, #2]
 8013896:	9300      	str	r3, [sp, #0]
 8013898:	460b      	mov	r3, r1
 801389a:	4601      	mov	r1, r0
 801389c:	6938      	ldr	r0, [r7, #16]
 801389e:	f7ff ff77 	bl	8013790 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	f003 0303 	and.w	r3, r3, #3
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d006      	beq.n	80138bc <pbuf_alloc+0xd8>
 80138ae:	4b42      	ldr	r3, [pc, #264]	@ (80139b8 <pbuf_alloc+0x1d4>)
 80138b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80138b4:	4941      	ldr	r1, [pc, #260]	@ (80139bc <pbuf_alloc+0x1d8>)
 80138b6:	4842      	ldr	r0, [pc, #264]	@ (80139c0 <pbuf_alloc+0x1dc>)
 80138b8:	f00b fa68 	bl	801ed8c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80138bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80138be:	3303      	adds	r3, #3
 80138c0:	f023 0303 	bic.w	r3, r3, #3
 80138c4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80138c8:	d106      	bne.n	80138d8 <pbuf_alloc+0xf4>
 80138ca:	4b3b      	ldr	r3, [pc, #236]	@ (80139b8 <pbuf_alloc+0x1d4>)
 80138cc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80138d0:	493c      	ldr	r1, [pc, #240]	@ (80139c4 <pbuf_alloc+0x1e0>)
 80138d2:	483b      	ldr	r0, [pc, #236]	@ (80139c0 <pbuf_alloc+0x1dc>)
 80138d4:	f00b fa5a 	bl	801ed8c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80138d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d102      	bne.n	80138e4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80138e2:	e002      	b.n	80138ea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80138e4:	69fb      	ldr	r3, [r7, #28]
 80138e6:	693a      	ldr	r2, [r7, #16]
 80138e8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80138ea:	693b      	ldr	r3, [r7, #16]
 80138ec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80138ee:	8b7a      	ldrh	r2, [r7, #26]
 80138f0:	89fb      	ldrh	r3, [r7, #14]
 80138f2:	1ad3      	subs	r3, r2, r3
 80138f4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80138f6:	2300      	movs	r3, #0
 80138f8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80138fa:	8b7b      	ldrh	r3, [r7, #26]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d19e      	bne.n	801383e <pbuf_alloc+0x5a>
      break;
 8013900:	e055      	b.n	80139ae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013902:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013904:	3303      	adds	r3, #3
 8013906:	b29b      	uxth	r3, r3
 8013908:	f023 0303 	bic.w	r3, r3, #3
 801390c:	b29a      	uxth	r2, r3
 801390e:	88bb      	ldrh	r3, [r7, #4]
 8013910:	3303      	adds	r3, #3
 8013912:	b29b      	uxth	r3, r3
 8013914:	f023 0303 	bic.w	r3, r3, #3
 8013918:	b29b      	uxth	r3, r3
 801391a:	4413      	add	r3, r2
 801391c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801391e:	8b3b      	ldrh	r3, [r7, #24]
 8013920:	3310      	adds	r3, #16
 8013922:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013924:	8b3a      	ldrh	r2, [r7, #24]
 8013926:	88bb      	ldrh	r3, [r7, #4]
 8013928:	3303      	adds	r3, #3
 801392a:	f023 0303 	bic.w	r3, r3, #3
 801392e:	429a      	cmp	r2, r3
 8013930:	d306      	bcc.n	8013940 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013932:	8afa      	ldrh	r2, [r7, #22]
 8013934:	88bb      	ldrh	r3, [r7, #4]
 8013936:	3303      	adds	r3, #3
 8013938:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801393c:	429a      	cmp	r2, r3
 801393e:	d201      	bcs.n	8013944 <pbuf_alloc+0x160>
        return NULL;
 8013940:	2300      	movs	r3, #0
 8013942:	e035      	b.n	80139b0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013944:	8afb      	ldrh	r3, [r7, #22]
 8013946:	4618      	mov	r0, r3
 8013948:	f7ff f87c 	bl	8012a44 <mem_malloc>
 801394c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013950:	2b00      	cmp	r3, #0
 8013952:	d101      	bne.n	8013958 <pbuf_alloc+0x174>
        return NULL;
 8013954:	2300      	movs	r3, #0
 8013956:	e02b      	b.n	80139b0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013958:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801395a:	3310      	adds	r3, #16
 801395c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801395e:	4413      	add	r3, r2
 8013960:	3303      	adds	r3, #3
 8013962:	f023 0303 	bic.w	r3, r3, #3
 8013966:	4618      	mov	r0, r3
 8013968:	88b9      	ldrh	r1, [r7, #4]
 801396a:	88ba      	ldrh	r2, [r7, #4]
 801396c:	2300      	movs	r3, #0
 801396e:	9301      	str	r3, [sp, #4]
 8013970:	887b      	ldrh	r3, [r7, #2]
 8013972:	9300      	str	r3, [sp, #0]
 8013974:	460b      	mov	r3, r1
 8013976:	4601      	mov	r1, r0
 8013978:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801397a:	f7ff ff09 	bl	8013790 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013980:	685b      	ldr	r3, [r3, #4]
 8013982:	f003 0303 	and.w	r3, r3, #3
 8013986:	2b00      	cmp	r3, #0
 8013988:	d010      	beq.n	80139ac <pbuf_alloc+0x1c8>
 801398a:	4b0b      	ldr	r3, [pc, #44]	@ (80139b8 <pbuf_alloc+0x1d4>)
 801398c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8013990:	490d      	ldr	r1, [pc, #52]	@ (80139c8 <pbuf_alloc+0x1e4>)
 8013992:	480b      	ldr	r0, [pc, #44]	@ (80139c0 <pbuf_alloc+0x1dc>)
 8013994:	f00b f9fa 	bl	801ed8c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013998:	e008      	b.n	80139ac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801399a:	4b07      	ldr	r3, [pc, #28]	@ (80139b8 <pbuf_alloc+0x1d4>)
 801399c:	f240 1227 	movw	r2, #295	@ 0x127
 80139a0:	490a      	ldr	r1, [pc, #40]	@ (80139cc <pbuf_alloc+0x1e8>)
 80139a2:	4807      	ldr	r0, [pc, #28]	@ (80139c0 <pbuf_alloc+0x1dc>)
 80139a4:	f00b f9f2 	bl	801ed8c <iprintf>
      return NULL;
 80139a8:	2300      	movs	r3, #0
 80139aa:	e001      	b.n	80139b0 <pbuf_alloc+0x1cc>
      break;
 80139ac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80139ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3728      	adds	r7, #40	@ 0x28
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	0802131c 	.word	0x0802131c
 80139bc:	0802134c 	.word	0x0802134c
 80139c0:	0802137c 	.word	0x0802137c
 80139c4:	080213a4 	.word	0x080213a4
 80139c8:	080213d8 	.word	0x080213d8
 80139cc:	08021404 	.word	0x08021404

080139d0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b086      	sub	sp, #24
 80139d4:	af02      	add	r7, sp, #8
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	460b      	mov	r3, r1
 80139da:	807b      	strh	r3, [r7, #2]
 80139dc:	4613      	mov	r3, r2
 80139de:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80139e0:	883b      	ldrh	r3, [r7, #0]
 80139e2:	2b41      	cmp	r3, #65	@ 0x41
 80139e4:	d009      	beq.n	80139fa <pbuf_alloc_reference+0x2a>
 80139e6:	883b      	ldrh	r3, [r7, #0]
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d006      	beq.n	80139fa <pbuf_alloc_reference+0x2a>
 80139ec:	4b0f      	ldr	r3, [pc, #60]	@ (8013a2c <pbuf_alloc_reference+0x5c>)
 80139ee:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80139f2:	490f      	ldr	r1, [pc, #60]	@ (8013a30 <pbuf_alloc_reference+0x60>)
 80139f4:	480f      	ldr	r0, [pc, #60]	@ (8013a34 <pbuf_alloc_reference+0x64>)
 80139f6:	f00b f9c9 	bl	801ed8c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80139fa:	200b      	movs	r0, #11
 80139fc:	f7ff f9c6 	bl	8012d8c <memp_malloc>
 8013a00:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d101      	bne.n	8013a0c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	e00b      	b.n	8013a24 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013a0c:	8879      	ldrh	r1, [r7, #2]
 8013a0e:	887a      	ldrh	r2, [r7, #2]
 8013a10:	2300      	movs	r3, #0
 8013a12:	9301      	str	r3, [sp, #4]
 8013a14:	883b      	ldrh	r3, [r7, #0]
 8013a16:	9300      	str	r3, [sp, #0]
 8013a18:	460b      	mov	r3, r1
 8013a1a:	6879      	ldr	r1, [r7, #4]
 8013a1c:	68f8      	ldr	r0, [r7, #12]
 8013a1e:	f7ff feb7 	bl	8013790 <pbuf_init_alloced_pbuf>
  return p;
 8013a22:	68fb      	ldr	r3, [r7, #12]
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3710      	adds	r7, #16
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	0802131c 	.word	0x0802131c
 8013a30:	08021420 	.word	0x08021420
 8013a34:	0802137c 	.word	0x0802137c

08013a38 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b088      	sub	sp, #32
 8013a3c:	af02      	add	r7, sp, #8
 8013a3e:	607b      	str	r3, [r7, #4]
 8013a40:	4603      	mov	r3, r0
 8013a42:	73fb      	strb	r3, [r7, #15]
 8013a44:	460b      	mov	r3, r1
 8013a46:	81bb      	strh	r3, [r7, #12]
 8013a48:	4613      	mov	r3, r2
 8013a4a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013a4c:	7bfb      	ldrb	r3, [r7, #15]
 8013a4e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013a50:	8a7b      	ldrh	r3, [r7, #18]
 8013a52:	3303      	adds	r3, #3
 8013a54:	f023 0203 	bic.w	r2, r3, #3
 8013a58:	89bb      	ldrh	r3, [r7, #12]
 8013a5a:	441a      	add	r2, r3
 8013a5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d901      	bls.n	8013a66 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013a62:	2300      	movs	r3, #0
 8013a64:	e018      	b.n	8013a98 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013a66:	6a3b      	ldr	r3, [r7, #32]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d007      	beq.n	8013a7c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013a6c:	8a7b      	ldrh	r3, [r7, #18]
 8013a6e:	3303      	adds	r3, #3
 8013a70:	f023 0303 	bic.w	r3, r3, #3
 8013a74:	6a3a      	ldr	r2, [r7, #32]
 8013a76:	4413      	add	r3, r2
 8013a78:	617b      	str	r3, [r7, #20]
 8013a7a:	e001      	b.n	8013a80 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013a80:	6878      	ldr	r0, [r7, #4]
 8013a82:	89b9      	ldrh	r1, [r7, #12]
 8013a84:	89ba      	ldrh	r2, [r7, #12]
 8013a86:	2302      	movs	r3, #2
 8013a88:	9301      	str	r3, [sp, #4]
 8013a8a:	897b      	ldrh	r3, [r7, #10]
 8013a8c:	9300      	str	r3, [sp, #0]
 8013a8e:	460b      	mov	r3, r1
 8013a90:	6979      	ldr	r1, [r7, #20]
 8013a92:	f7ff fe7d 	bl	8013790 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013a96:	687b      	ldr	r3, [r7, #4]
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3718      	adds	r7, #24
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	460b      	mov	r3, r1
 8013aaa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d106      	bne.n	8013ac0 <pbuf_realloc+0x20>
 8013ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8013b9c <pbuf_realloc+0xfc>)
 8013ab4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8013ab8:	4939      	ldr	r1, [pc, #228]	@ (8013ba0 <pbuf_realloc+0x100>)
 8013aba:	483a      	ldr	r0, [pc, #232]	@ (8013ba4 <pbuf_realloc+0x104>)
 8013abc:	f00b f966 	bl	801ed8c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	891b      	ldrh	r3, [r3, #8]
 8013ac4:	887a      	ldrh	r2, [r7, #2]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d263      	bcs.n	8013b92 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	891a      	ldrh	r2, [r3, #8]
 8013ace:	887b      	ldrh	r3, [r7, #2]
 8013ad0:	1ad3      	subs	r3, r2, r3
 8013ad2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013ad4:	887b      	ldrh	r3, [r7, #2]
 8013ad6:	817b      	strh	r3, [r7, #10]
  q = p;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013adc:	e018      	b.n	8013b10 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	895b      	ldrh	r3, [r3, #10]
 8013ae2:	897a      	ldrh	r2, [r7, #10]
 8013ae4:	1ad3      	subs	r3, r2, r3
 8013ae6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	891a      	ldrh	r2, [r3, #8]
 8013aec:	893b      	ldrh	r3, [r7, #8]
 8013aee:	1ad3      	subs	r3, r2, r3
 8013af0:	b29a      	uxth	r2, r3
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d106      	bne.n	8013b10 <pbuf_realloc+0x70>
 8013b02:	4b26      	ldr	r3, [pc, #152]	@ (8013b9c <pbuf_realloc+0xfc>)
 8013b04:	f240 12af 	movw	r2, #431	@ 0x1af
 8013b08:	4927      	ldr	r1, [pc, #156]	@ (8013ba8 <pbuf_realloc+0x108>)
 8013b0a:	4826      	ldr	r0, [pc, #152]	@ (8013ba4 <pbuf_realloc+0x104>)
 8013b0c:	f00b f93e 	bl	801ed8c <iprintf>
  while (rem_len > q->len) {
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	895b      	ldrh	r3, [r3, #10]
 8013b14:	897a      	ldrh	r2, [r7, #10]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d8e1      	bhi.n	8013ade <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	7b1b      	ldrb	r3, [r3, #12]
 8013b1e:	f003 030f 	and.w	r3, r3, #15
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d121      	bne.n	8013b6a <pbuf_realloc+0xca>
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	895b      	ldrh	r3, [r3, #10]
 8013b2a:	897a      	ldrh	r2, [r7, #10]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d01c      	beq.n	8013b6a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	7b5b      	ldrb	r3, [r3, #13]
 8013b34:	f003 0302 	and.w	r3, r3, #2
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d116      	bne.n	8013b6a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	685a      	ldr	r2, [r3, #4]
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	1ad3      	subs	r3, r2, r3
 8013b44:	b29a      	uxth	r2, r3
 8013b46:	897b      	ldrh	r3, [r7, #10]
 8013b48:	4413      	add	r3, r2
 8013b4a:	b29b      	uxth	r3, r3
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	68f8      	ldr	r0, [r7, #12]
 8013b50:	f7fe fe6e 	bl	8012830 <mem_trim>
 8013b54:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d106      	bne.n	8013b6a <pbuf_realloc+0xca>
 8013b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8013b9c <pbuf_realloc+0xfc>)
 8013b5e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8013b62:	4912      	ldr	r1, [pc, #72]	@ (8013bac <pbuf_realloc+0x10c>)
 8013b64:	480f      	ldr	r0, [pc, #60]	@ (8013ba4 <pbuf_realloc+0x104>)
 8013b66:	f00b f911 	bl	801ed8c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	897a      	ldrh	r2, [r7, #10]
 8013b6e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	895a      	ldrh	r2, [r3, #10]
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d004      	beq.n	8013b8a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f000 f911 	bl	8013dac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	601a      	str	r2, [r3, #0]
 8013b90:	e000      	b.n	8013b94 <pbuf_realloc+0xf4>
    return;
 8013b92:	bf00      	nop

}
 8013b94:	3710      	adds	r7, #16
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	0802131c 	.word	0x0802131c
 8013ba0:	08021434 	.word	0x08021434
 8013ba4:	0802137c 	.word	0x0802137c
 8013ba8:	0802144c 	.word	0x0802144c
 8013bac:	08021464 	.word	0x08021464

08013bb0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b086      	sub	sp, #24
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	60f8      	str	r0, [r7, #12]
 8013bb8:	60b9      	str	r1, [r7, #8]
 8013bba:	4613      	mov	r3, r2
 8013bbc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d106      	bne.n	8013bd2 <pbuf_add_header_impl+0x22>
 8013bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8013c74 <pbuf_add_header_impl+0xc4>)
 8013bc6:	f240 12df 	movw	r2, #479	@ 0x1df
 8013bca:	492b      	ldr	r1, [pc, #172]	@ (8013c78 <pbuf_add_header_impl+0xc8>)
 8013bcc:	482b      	ldr	r0, [pc, #172]	@ (8013c7c <pbuf_add_header_impl+0xcc>)
 8013bce:	f00b f8dd 	bl	801ed8c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d003      	beq.n	8013be0 <pbuf_add_header_impl+0x30>
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013bde:	d301      	bcc.n	8013be4 <pbuf_add_header_impl+0x34>
    return 1;
 8013be0:	2301      	movs	r3, #1
 8013be2:	e043      	b.n	8013c6c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d101      	bne.n	8013bee <pbuf_add_header_impl+0x3e>
    return 0;
 8013bea:	2300      	movs	r3, #0
 8013bec:	e03e      	b.n	8013c6c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	891a      	ldrh	r2, [r3, #8]
 8013bf6:	8a7b      	ldrh	r3, [r7, #18]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	8a7a      	ldrh	r2, [r7, #18]
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d901      	bls.n	8013c06 <pbuf_add_header_impl+0x56>
    return 1;
 8013c02:	2301      	movs	r3, #1
 8013c04:	e032      	b.n	8013c6c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	7b1b      	ldrb	r3, [r3, #12]
 8013c0a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013c0c:	8a3b      	ldrh	r3, [r7, #16]
 8013c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d00c      	beq.n	8013c30 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	685a      	ldr	r2, [r3, #4]
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	425b      	negs	r3, r3
 8013c1e:	4413      	add	r3, r2
 8013c20:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	3310      	adds	r3, #16
 8013c26:	697a      	ldr	r2, [r7, #20]
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	d20d      	bcs.n	8013c48 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	e01d      	b.n	8013c6c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013c30:	79fb      	ldrb	r3, [r7, #7]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d006      	beq.n	8013c44 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	685a      	ldr	r2, [r3, #4]
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	425b      	negs	r3, r3
 8013c3e:	4413      	add	r3, r2
 8013c40:	617b      	str	r3, [r7, #20]
 8013c42:	e001      	b.n	8013c48 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013c44:	2301      	movs	r3, #1
 8013c46:	e011      	b.n	8013c6c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	697a      	ldr	r2, [r7, #20]
 8013c4c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	895a      	ldrh	r2, [r3, #10]
 8013c52:	8a7b      	ldrh	r3, [r7, #18]
 8013c54:	4413      	add	r3, r2
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	891a      	ldrh	r2, [r3, #8]
 8013c60:	8a7b      	ldrh	r3, [r7, #18]
 8013c62:	4413      	add	r3, r2
 8013c64:	b29a      	uxth	r2, r3
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	811a      	strh	r2, [r3, #8]


  return 0;
 8013c6a:	2300      	movs	r3, #0
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3718      	adds	r7, #24
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	0802131c 	.word	0x0802131c
 8013c78:	08021480 	.word	0x08021480
 8013c7c:	0802137c 	.word	0x0802137c

08013c80 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b082      	sub	sp, #8
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	6839      	ldr	r1, [r7, #0]
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f7ff ff8e 	bl	8013bb0 <pbuf_add_header_impl>
 8013c94:	4603      	mov	r3, r0
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3708      	adds	r7, #8
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
	...

08013ca0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d106      	bne.n	8013cbe <pbuf_remove_header+0x1e>
 8013cb0:	4b20      	ldr	r3, [pc, #128]	@ (8013d34 <pbuf_remove_header+0x94>)
 8013cb2:	f240 224b 	movw	r2, #587	@ 0x24b
 8013cb6:	4920      	ldr	r1, [pc, #128]	@ (8013d38 <pbuf_remove_header+0x98>)
 8013cb8:	4820      	ldr	r0, [pc, #128]	@ (8013d3c <pbuf_remove_header+0x9c>)
 8013cba:	f00b f867 	bl	801ed8c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d003      	beq.n	8013ccc <pbuf_remove_header+0x2c>
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013cca:	d301      	bcc.n	8013cd0 <pbuf_remove_header+0x30>
    return 1;
 8013ccc:	2301      	movs	r3, #1
 8013cce:	e02c      	b.n	8013d2a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d101      	bne.n	8013cda <pbuf_remove_header+0x3a>
    return 0;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	e027      	b.n	8013d2a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	895b      	ldrh	r3, [r3, #10]
 8013ce2:	89fa      	ldrh	r2, [r7, #14]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d908      	bls.n	8013cfa <pbuf_remove_header+0x5a>
 8013ce8:	4b12      	ldr	r3, [pc, #72]	@ (8013d34 <pbuf_remove_header+0x94>)
 8013cea:	f240 2255 	movw	r2, #597	@ 0x255
 8013cee:	4914      	ldr	r1, [pc, #80]	@ (8013d40 <pbuf_remove_header+0xa0>)
 8013cf0:	4812      	ldr	r0, [pc, #72]	@ (8013d3c <pbuf_remove_header+0x9c>)
 8013cf2:	f00b f84b 	bl	801ed8c <iprintf>
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e017      	b.n	8013d2a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	685a      	ldr	r2, [r3, #4]
 8013d04:	683b      	ldr	r3, [r7, #0]
 8013d06:	441a      	add	r2, r3
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	895a      	ldrh	r2, [r3, #10]
 8013d10:	89fb      	ldrh	r3, [r7, #14]
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	b29a      	uxth	r2, r3
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	891a      	ldrh	r2, [r3, #8]
 8013d1e:	89fb      	ldrh	r3, [r7, #14]
 8013d20:	1ad3      	subs	r3, r2, r3
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013d28:	2300      	movs	r3, #0
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3710      	adds	r7, #16
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	bf00      	nop
 8013d34:	0802131c 	.word	0x0802131c
 8013d38:	08021480 	.word	0x08021480
 8013d3c:	0802137c 	.word	0x0802137c
 8013d40:	0802148c 	.word	0x0802148c

08013d44 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	460b      	mov	r3, r1
 8013d4e:	807b      	strh	r3, [r7, #2]
 8013d50:	4613      	mov	r3, r2
 8013d52:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013d54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	da08      	bge.n	8013d6e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013d5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013d60:	425b      	negs	r3, r3
 8013d62:	4619      	mov	r1, r3
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f7ff ff9b 	bl	8013ca0 <pbuf_remove_header>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	e007      	b.n	8013d7e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8013d6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013d72:	787a      	ldrb	r2, [r7, #1]
 8013d74:	4619      	mov	r1, r3
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f7ff ff1a 	bl	8013bb0 <pbuf_add_header_impl>
 8013d7c:	4603      	mov	r3, r0
  }
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3708      	adds	r7, #8
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}

08013d86 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013d86:	b580      	push	{r7, lr}
 8013d88:	b082      	sub	sp, #8
 8013d8a:	af00      	add	r7, sp, #0
 8013d8c:	6078      	str	r0, [r7, #4]
 8013d8e:	460b      	mov	r3, r1
 8013d90:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8013d92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013d96:	2201      	movs	r2, #1
 8013d98:	4619      	mov	r1, r3
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f7ff ffd2 	bl	8013d44 <pbuf_header_impl>
 8013da0:	4603      	mov	r3, r0
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3708      	adds	r7, #8
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
	...

08013dac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b088      	sub	sp, #32
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d10b      	bne.n	8013dd2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d106      	bne.n	8013dce <pbuf_free+0x22>
 8013dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8013eb0 <pbuf_free+0x104>)
 8013dc2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8013dc6:	493b      	ldr	r1, [pc, #236]	@ (8013eb4 <pbuf_free+0x108>)
 8013dc8:	483b      	ldr	r0, [pc, #236]	@ (8013eb8 <pbuf_free+0x10c>)
 8013dca:	f00a ffdf 	bl	801ed8c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	e069      	b.n	8013ea6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8013dd6:	e062      	b.n	8013e9e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013dd8:	f00a f9e4 	bl	801e1a4 <sys_arch_protect>
 8013ddc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	7b9b      	ldrb	r3, [r3, #14]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d106      	bne.n	8013df4 <pbuf_free+0x48>
 8013de6:	4b32      	ldr	r3, [pc, #200]	@ (8013eb0 <pbuf_free+0x104>)
 8013de8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8013dec:	4933      	ldr	r1, [pc, #204]	@ (8013ebc <pbuf_free+0x110>)
 8013dee:	4832      	ldr	r0, [pc, #200]	@ (8013eb8 <pbuf_free+0x10c>)
 8013df0:	f00a ffcc 	bl	801ed8c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	7b9b      	ldrb	r3, [r3, #14]
 8013df8:	3b01      	subs	r3, #1
 8013dfa:	b2da      	uxtb	r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	739a      	strb	r2, [r3, #14]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	7b9b      	ldrb	r3, [r3, #14]
 8013e04:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013e06:	69b8      	ldr	r0, [r7, #24]
 8013e08:	f00a f9da 	bl	801e1c0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013e0c:	7dfb      	ldrb	r3, [r7, #23]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d143      	bne.n	8013e9a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	7b1b      	ldrb	r3, [r3, #12]
 8013e1c:	f003 030f 	and.w	r3, r3, #15
 8013e20:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	7b5b      	ldrb	r3, [r3, #13]
 8013e26:	f003 0302 	and.w	r3, r3, #2
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d011      	beq.n	8013e52 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	691b      	ldr	r3, [r3, #16]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d106      	bne.n	8013e48 <pbuf_free+0x9c>
 8013e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8013eb0 <pbuf_free+0x104>)
 8013e3c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8013e40:	491f      	ldr	r1, [pc, #124]	@ (8013ec0 <pbuf_free+0x114>)
 8013e42:	481d      	ldr	r0, [pc, #116]	@ (8013eb8 <pbuf_free+0x10c>)
 8013e44:	f00a ffa2 	bl	801ed8c <iprintf>
        pc->custom_free_function(p);
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	691b      	ldr	r3, [r3, #16]
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	4798      	blx	r3
 8013e50:	e01d      	b.n	8013e8e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013e52:	7bfb      	ldrb	r3, [r7, #15]
 8013e54:	2b02      	cmp	r3, #2
 8013e56:	d104      	bne.n	8013e62 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013e58:	6879      	ldr	r1, [r7, #4]
 8013e5a:	200c      	movs	r0, #12
 8013e5c:	f7ff f80c 	bl	8012e78 <memp_free>
 8013e60:	e015      	b.n	8013e8e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013e62:	7bfb      	ldrb	r3, [r7, #15]
 8013e64:	2b01      	cmp	r3, #1
 8013e66:	d104      	bne.n	8013e72 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013e68:	6879      	ldr	r1, [r7, #4]
 8013e6a:	200b      	movs	r0, #11
 8013e6c:	f7ff f804 	bl	8012e78 <memp_free>
 8013e70:	e00d      	b.n	8013e8e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013e72:	7bfb      	ldrb	r3, [r7, #15]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d103      	bne.n	8013e80 <pbuf_free+0xd4>
          mem_free(p);
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7fe fc49 	bl	8012710 <mem_free>
 8013e7e:	e006      	b.n	8013e8e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013e80:	4b0b      	ldr	r3, [pc, #44]	@ (8013eb0 <pbuf_free+0x104>)
 8013e82:	f240 320f 	movw	r2, #783	@ 0x30f
 8013e86:	490f      	ldr	r1, [pc, #60]	@ (8013ec4 <pbuf_free+0x118>)
 8013e88:	480b      	ldr	r0, [pc, #44]	@ (8013eb8 <pbuf_free+0x10c>)
 8013e8a:	f00a ff7f 	bl	801ed8c <iprintf>
        }
      }
      count++;
 8013e8e:	7ffb      	ldrb	r3, [r7, #31]
 8013e90:	3301      	adds	r3, #1
 8013e92:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	607b      	str	r3, [r7, #4]
 8013e98:	e001      	b.n	8013e9e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d199      	bne.n	8013dd8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013ea4:	7ffb      	ldrb	r3, [r7, #31]
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3720      	adds	r7, #32
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	0802131c 	.word	0x0802131c
 8013eb4:	08021480 	.word	0x08021480
 8013eb8:	0802137c 	.word	0x0802137c
 8013ebc:	080214ac 	.word	0x080214ac
 8013ec0:	080214c4 	.word	0x080214c4
 8013ec4:	080214e8 	.word	0x080214e8

08013ec8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013ec8:	b480      	push	{r7}
 8013eca:	b085      	sub	sp, #20
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013ed4:	e005      	b.n	8013ee2 <pbuf_clen+0x1a>
    ++len;
 8013ed6:	89fb      	ldrh	r3, [r7, #14]
 8013ed8:	3301      	adds	r3, #1
 8013eda:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d1f6      	bne.n	8013ed6 <pbuf_clen+0xe>
  }
  return len;
 8013ee8:	89fb      	ldrh	r3, [r7, #14]
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3714      	adds	r7, #20
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef4:	4770      	bx	lr
	...

08013ef8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d016      	beq.n	8013f34 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013f06:	f00a f94d 	bl	801e1a4 <sys_arch_protect>
 8013f0a:	60f8      	str	r0, [r7, #12]
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	7b9b      	ldrb	r3, [r3, #14]
 8013f10:	3301      	adds	r3, #1
 8013f12:	b2da      	uxtb	r2, r3
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	739a      	strb	r2, [r3, #14]
 8013f18:	68f8      	ldr	r0, [r7, #12]
 8013f1a:	f00a f951 	bl	801e1c0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	7b9b      	ldrb	r3, [r3, #14]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d106      	bne.n	8013f34 <pbuf_ref+0x3c>
 8013f26:	4b05      	ldr	r3, [pc, #20]	@ (8013f3c <pbuf_ref+0x44>)
 8013f28:	f240 3242 	movw	r2, #834	@ 0x342
 8013f2c:	4904      	ldr	r1, [pc, #16]	@ (8013f40 <pbuf_ref+0x48>)
 8013f2e:	4805      	ldr	r0, [pc, #20]	@ (8013f44 <pbuf_ref+0x4c>)
 8013f30:	f00a ff2c 	bl	801ed8c <iprintf>
  }
}
 8013f34:	bf00      	nop
 8013f36:	3710      	adds	r7, #16
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	0802131c 	.word	0x0802131c
 8013f40:	080214fc 	.word	0x080214fc
 8013f44:	0802137c 	.word	0x0802137c

08013f48 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b084      	sub	sp, #16
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d002      	beq.n	8013f5e <pbuf_cat+0x16>
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d107      	bne.n	8013f6e <pbuf_cat+0x26>
 8013f5e:	4b20      	ldr	r3, [pc, #128]	@ (8013fe0 <pbuf_cat+0x98>)
 8013f60:	f240 3259 	movw	r2, #857	@ 0x359
 8013f64:	491f      	ldr	r1, [pc, #124]	@ (8013fe4 <pbuf_cat+0x9c>)
 8013f66:	4820      	ldr	r0, [pc, #128]	@ (8013fe8 <pbuf_cat+0xa0>)
 8013f68:	f00a ff10 	bl	801ed8c <iprintf>
 8013f6c:	e034      	b.n	8013fd8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	60fb      	str	r3, [r7, #12]
 8013f72:	e00a      	b.n	8013f8a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	891a      	ldrh	r2, [r3, #8]
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	891b      	ldrh	r3, [r3, #8]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	b29a      	uxth	r2, r3
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	60fb      	str	r3, [r7, #12]
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d1f0      	bne.n	8013f74 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	891a      	ldrh	r2, [r3, #8]
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	895b      	ldrh	r3, [r3, #10]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d006      	beq.n	8013fac <pbuf_cat+0x64>
 8013f9e:	4b10      	ldr	r3, [pc, #64]	@ (8013fe0 <pbuf_cat+0x98>)
 8013fa0:	f240 3262 	movw	r2, #866	@ 0x362
 8013fa4:	4911      	ldr	r1, [pc, #68]	@ (8013fec <pbuf_cat+0xa4>)
 8013fa6:	4810      	ldr	r0, [pc, #64]	@ (8013fe8 <pbuf_cat+0xa0>)
 8013fa8:	f00a fef0 	bl	801ed8c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d006      	beq.n	8013fc2 <pbuf_cat+0x7a>
 8013fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8013fe0 <pbuf_cat+0x98>)
 8013fb6:	f240 3263 	movw	r2, #867	@ 0x363
 8013fba:	490d      	ldr	r1, [pc, #52]	@ (8013ff0 <pbuf_cat+0xa8>)
 8013fbc:	480a      	ldr	r0, [pc, #40]	@ (8013fe8 <pbuf_cat+0xa0>)
 8013fbe:	f00a fee5 	bl	801ed8c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	891a      	ldrh	r2, [r3, #8]
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	891b      	ldrh	r3, [r3, #8]
 8013fca:	4413      	add	r3, r2
 8013fcc:	b29a      	uxth	r2, r3
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	683a      	ldr	r2, [r7, #0]
 8013fd6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013fd8:	3710      	adds	r7, #16
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd80      	pop	{r7, pc}
 8013fde:	bf00      	nop
 8013fe0:	0802131c 	.word	0x0802131c
 8013fe4:	08021510 	.word	0x08021510
 8013fe8:	0802137c 	.word	0x0802137c
 8013fec:	08021548 	.word	0x08021548
 8013ff0:	08021578 	.word	0x08021578

08013ff4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b082      	sub	sp, #8
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8013ffe:	6839      	ldr	r1, [r7, #0]
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f7ff ffa1 	bl	8013f48 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014006:	6838      	ldr	r0, [r7, #0]
 8014008:	f7ff ff76 	bl	8013ef8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801400c:	bf00      	nop
 801400e:	3708      	adds	r7, #8
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}

08014014 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b086      	sub	sp, #24
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801401e:	2300      	movs	r3, #0
 8014020:	617b      	str	r3, [r7, #20]
 8014022:	2300      	movs	r3, #0
 8014024:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d008      	beq.n	801403e <pbuf_copy+0x2a>
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d005      	beq.n	801403e <pbuf_copy+0x2a>
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	891a      	ldrh	r2, [r3, #8]
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	891b      	ldrh	r3, [r3, #8]
 801403a:	429a      	cmp	r2, r3
 801403c:	d209      	bcs.n	8014052 <pbuf_copy+0x3e>
 801403e:	4b57      	ldr	r3, [pc, #348]	@ (801419c <pbuf_copy+0x188>)
 8014040:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014044:	4956      	ldr	r1, [pc, #344]	@ (80141a0 <pbuf_copy+0x18c>)
 8014046:	4857      	ldr	r0, [pc, #348]	@ (80141a4 <pbuf_copy+0x190>)
 8014048:	f00a fea0 	bl	801ed8c <iprintf>
 801404c:	f06f 030f 	mvn.w	r3, #15
 8014050:	e09f      	b.n	8014192 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	895b      	ldrh	r3, [r3, #10]
 8014056:	461a      	mov	r2, r3
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	1ad2      	subs	r2, r2, r3
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	895b      	ldrh	r3, [r3, #10]
 8014060:	4619      	mov	r1, r3
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	1acb      	subs	r3, r1, r3
 8014066:	429a      	cmp	r2, r3
 8014068:	d306      	bcc.n	8014078 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	895b      	ldrh	r3, [r3, #10]
 801406e:	461a      	mov	r2, r3
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	1ad3      	subs	r3, r2, r3
 8014074:	60fb      	str	r3, [r7, #12]
 8014076:	e005      	b.n	8014084 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	895b      	ldrh	r3, [r3, #10]
 801407c:	461a      	mov	r2, r3
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	1ad3      	subs	r3, r2, r3
 8014082:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	685a      	ldr	r2, [r3, #4]
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	18d0      	adds	r0, r2, r3
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	685a      	ldr	r2, [r3, #4]
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	4413      	add	r3, r2
 8014094:	68fa      	ldr	r2, [r7, #12]
 8014096:	4619      	mov	r1, r3
 8014098:	f00b f84d 	bl	801f136 <memcpy>
    offset_to += len;
 801409c:	697a      	ldr	r2, [r7, #20]
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	4413      	add	r3, r2
 80140a2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80140a4:	693a      	ldr	r2, [r7, #16]
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	4413      	add	r3, r2
 80140aa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	895b      	ldrh	r3, [r3, #10]
 80140b0:	461a      	mov	r2, r3
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	4293      	cmp	r3, r2
 80140b6:	d906      	bls.n	80140c6 <pbuf_copy+0xb2>
 80140b8:	4b38      	ldr	r3, [pc, #224]	@ (801419c <pbuf_copy+0x188>)
 80140ba:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80140be:	493a      	ldr	r1, [pc, #232]	@ (80141a8 <pbuf_copy+0x194>)
 80140c0:	4838      	ldr	r0, [pc, #224]	@ (80141a4 <pbuf_copy+0x190>)
 80140c2:	f00a fe63 	bl	801ed8c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	895b      	ldrh	r3, [r3, #10]
 80140ca:	461a      	mov	r2, r3
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	4293      	cmp	r3, r2
 80140d0:	d906      	bls.n	80140e0 <pbuf_copy+0xcc>
 80140d2:	4b32      	ldr	r3, [pc, #200]	@ (801419c <pbuf_copy+0x188>)
 80140d4:	f240 32da 	movw	r2, #986	@ 0x3da
 80140d8:	4934      	ldr	r1, [pc, #208]	@ (80141ac <pbuf_copy+0x198>)
 80140da:	4832      	ldr	r0, [pc, #200]	@ (80141a4 <pbuf_copy+0x190>)
 80140dc:	f00a fe56 	bl	801ed8c <iprintf>
    if (offset_from >= p_from->len) {
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	895b      	ldrh	r3, [r3, #10]
 80140e4:	461a      	mov	r2, r3
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	4293      	cmp	r3, r2
 80140ea:	d304      	bcc.n	80140f6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80140ec:	2300      	movs	r3, #0
 80140ee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	895b      	ldrh	r3, [r3, #10]
 80140fa:	461a      	mov	r2, r3
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	4293      	cmp	r3, r2
 8014100:	d114      	bne.n	801412c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014102:	2300      	movs	r3, #0
 8014104:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d10c      	bne.n	801412c <pbuf_copy+0x118>
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d009      	beq.n	801412c <pbuf_copy+0x118>
 8014118:	4b20      	ldr	r3, [pc, #128]	@ (801419c <pbuf_copy+0x188>)
 801411a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801411e:	4924      	ldr	r1, [pc, #144]	@ (80141b0 <pbuf_copy+0x19c>)
 8014120:	4820      	ldr	r0, [pc, #128]	@ (80141a4 <pbuf_copy+0x190>)
 8014122:	f00a fe33 	bl	801ed8c <iprintf>
 8014126:	f06f 030f 	mvn.w	r3, #15
 801412a:	e032      	b.n	8014192 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d013      	beq.n	801415a <pbuf_copy+0x146>
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	895a      	ldrh	r2, [r3, #10]
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	891b      	ldrh	r3, [r3, #8]
 801413a:	429a      	cmp	r2, r3
 801413c:	d10d      	bne.n	801415a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d009      	beq.n	801415a <pbuf_copy+0x146>
 8014146:	4b15      	ldr	r3, [pc, #84]	@ (801419c <pbuf_copy+0x188>)
 8014148:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801414c:	4919      	ldr	r1, [pc, #100]	@ (80141b4 <pbuf_copy+0x1a0>)
 801414e:	4815      	ldr	r0, [pc, #84]	@ (80141a4 <pbuf_copy+0x190>)
 8014150:	f00a fe1c 	bl	801ed8c <iprintf>
 8014154:	f06f 0305 	mvn.w	r3, #5
 8014158:	e01b      	b.n	8014192 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d013      	beq.n	8014188 <pbuf_copy+0x174>
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	895a      	ldrh	r2, [r3, #10]
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	891b      	ldrh	r3, [r3, #8]
 8014168:	429a      	cmp	r2, r3
 801416a:	d10d      	bne.n	8014188 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d009      	beq.n	8014188 <pbuf_copy+0x174>
 8014174:	4b09      	ldr	r3, [pc, #36]	@ (801419c <pbuf_copy+0x188>)
 8014176:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801417a:	490e      	ldr	r1, [pc, #56]	@ (80141b4 <pbuf_copy+0x1a0>)
 801417c:	4809      	ldr	r0, [pc, #36]	@ (80141a4 <pbuf_copy+0x190>)
 801417e:	f00a fe05 	bl	801ed8c <iprintf>
 8014182:	f06f 0305 	mvn.w	r3, #5
 8014186:	e004      	b.n	8014192 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	f47f af61 	bne.w	8014052 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014190:	2300      	movs	r3, #0
}
 8014192:	4618      	mov	r0, r3
 8014194:	3718      	adds	r7, #24
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
 801419a:	bf00      	nop
 801419c:	0802131c 	.word	0x0802131c
 80141a0:	080215c4 	.word	0x080215c4
 80141a4:	0802137c 	.word	0x0802137c
 80141a8:	080215f4 	.word	0x080215f4
 80141ac:	0802160c 	.word	0x0802160c
 80141b0:	08021628 	.word	0x08021628
 80141b4:	08021638 	.word	0x08021638

080141b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b088      	sub	sp, #32
 80141bc:	af00      	add	r7, sp, #0
 80141be:	60f8      	str	r0, [r7, #12]
 80141c0:	60b9      	str	r1, [r7, #8]
 80141c2:	4611      	mov	r1, r2
 80141c4:	461a      	mov	r2, r3
 80141c6:	460b      	mov	r3, r1
 80141c8:	80fb      	strh	r3, [r7, #6]
 80141ca:	4613      	mov	r3, r2
 80141cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80141ce:	2300      	movs	r3, #0
 80141d0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80141d2:	2300      	movs	r3, #0
 80141d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d108      	bne.n	80141ee <pbuf_copy_partial+0x36>
 80141dc:	4b2b      	ldr	r3, [pc, #172]	@ (801428c <pbuf_copy_partial+0xd4>)
 80141de:	f240 420a 	movw	r2, #1034	@ 0x40a
 80141e2:	492b      	ldr	r1, [pc, #172]	@ (8014290 <pbuf_copy_partial+0xd8>)
 80141e4:	482b      	ldr	r0, [pc, #172]	@ (8014294 <pbuf_copy_partial+0xdc>)
 80141e6:	f00a fdd1 	bl	801ed8c <iprintf>
 80141ea:	2300      	movs	r3, #0
 80141ec:	e04a      	b.n	8014284 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d108      	bne.n	8014206 <pbuf_copy_partial+0x4e>
 80141f4:	4b25      	ldr	r3, [pc, #148]	@ (801428c <pbuf_copy_partial+0xd4>)
 80141f6:	f240 420b 	movw	r2, #1035	@ 0x40b
 80141fa:	4927      	ldr	r1, [pc, #156]	@ (8014298 <pbuf_copy_partial+0xe0>)
 80141fc:	4825      	ldr	r0, [pc, #148]	@ (8014294 <pbuf_copy_partial+0xdc>)
 80141fe:	f00a fdc5 	bl	801ed8c <iprintf>
 8014202:	2300      	movs	r3, #0
 8014204:	e03e      	b.n	8014284 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	61fb      	str	r3, [r7, #28]
 801420a:	e034      	b.n	8014276 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801420c:	88bb      	ldrh	r3, [r7, #4]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d00a      	beq.n	8014228 <pbuf_copy_partial+0x70>
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	895b      	ldrh	r3, [r3, #10]
 8014216:	88ba      	ldrh	r2, [r7, #4]
 8014218:	429a      	cmp	r2, r3
 801421a:	d305      	bcc.n	8014228 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801421c:	69fb      	ldr	r3, [r7, #28]
 801421e:	895b      	ldrh	r3, [r3, #10]
 8014220:	88ba      	ldrh	r2, [r7, #4]
 8014222:	1ad3      	subs	r3, r2, r3
 8014224:	80bb      	strh	r3, [r7, #4]
 8014226:	e023      	b.n	8014270 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	895a      	ldrh	r2, [r3, #10]
 801422c:	88bb      	ldrh	r3, [r7, #4]
 801422e:	1ad3      	subs	r3, r2, r3
 8014230:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014232:	8b3a      	ldrh	r2, [r7, #24]
 8014234:	88fb      	ldrh	r3, [r7, #6]
 8014236:	429a      	cmp	r2, r3
 8014238:	d901      	bls.n	801423e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801423a:	88fb      	ldrh	r3, [r7, #6]
 801423c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801423e:	8b7b      	ldrh	r3, [r7, #26]
 8014240:	68ba      	ldr	r2, [r7, #8]
 8014242:	18d0      	adds	r0, r2, r3
 8014244:	69fb      	ldr	r3, [r7, #28]
 8014246:	685a      	ldr	r2, [r3, #4]
 8014248:	88bb      	ldrh	r3, [r7, #4]
 801424a:	4413      	add	r3, r2
 801424c:	8b3a      	ldrh	r2, [r7, #24]
 801424e:	4619      	mov	r1, r3
 8014250:	f00a ff71 	bl	801f136 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014254:	8afa      	ldrh	r2, [r7, #22]
 8014256:	8b3b      	ldrh	r3, [r7, #24]
 8014258:	4413      	add	r3, r2
 801425a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801425c:	8b7a      	ldrh	r2, [r7, #26]
 801425e:	8b3b      	ldrh	r3, [r7, #24]
 8014260:	4413      	add	r3, r2
 8014262:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014264:	88fa      	ldrh	r2, [r7, #6]
 8014266:	8b3b      	ldrh	r3, [r7, #24]
 8014268:	1ad3      	subs	r3, r2, r3
 801426a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801426c:	2300      	movs	r3, #0
 801426e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014270:	69fb      	ldr	r3, [r7, #28]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	61fb      	str	r3, [r7, #28]
 8014276:	88fb      	ldrh	r3, [r7, #6]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d002      	beq.n	8014282 <pbuf_copy_partial+0xca>
 801427c:	69fb      	ldr	r3, [r7, #28]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d1c4      	bne.n	801420c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014282:	8afb      	ldrh	r3, [r7, #22]
}
 8014284:	4618      	mov	r0, r3
 8014286:	3720      	adds	r7, #32
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	0802131c 	.word	0x0802131c
 8014290:	08021664 	.word	0x08021664
 8014294:	0802137c 	.word	0x0802137c
 8014298:	08021684 	.word	0x08021684

0801429c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b084      	sub	sp, #16
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	4603      	mov	r3, r0
 80142a4:	603a      	str	r2, [r7, #0]
 80142a6:	71fb      	strb	r3, [r7, #7]
 80142a8:	460b      	mov	r3, r1
 80142aa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	8919      	ldrh	r1, [r3, #8]
 80142b0:	88ba      	ldrh	r2, [r7, #4]
 80142b2:	79fb      	ldrb	r3, [r7, #7]
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7ff fa95 	bl	80137e4 <pbuf_alloc>
 80142ba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d101      	bne.n	80142c6 <pbuf_clone+0x2a>
    return NULL;
 80142c2:	2300      	movs	r3, #0
 80142c4:	e011      	b.n	80142ea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80142c6:	6839      	ldr	r1, [r7, #0]
 80142c8:	68f8      	ldr	r0, [r7, #12]
 80142ca:	f7ff fea3 	bl	8014014 <pbuf_copy>
 80142ce:	4603      	mov	r3, r0
 80142d0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80142d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d006      	beq.n	80142e8 <pbuf_clone+0x4c>
 80142da:	4b06      	ldr	r3, [pc, #24]	@ (80142f4 <pbuf_clone+0x58>)
 80142dc:	f240 5224 	movw	r2, #1316	@ 0x524
 80142e0:	4905      	ldr	r1, [pc, #20]	@ (80142f8 <pbuf_clone+0x5c>)
 80142e2:	4806      	ldr	r0, [pc, #24]	@ (80142fc <pbuf_clone+0x60>)
 80142e4:	f00a fd52 	bl	801ed8c <iprintf>
  return q;
 80142e8:	68fb      	ldr	r3, [r7, #12]
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3710      	adds	r7, #16
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	0802131c 	.word	0x0802131c
 80142f8:	08021790 	.word	0x08021790
 80142fc:	0802137c 	.word	0x0802137c

08014300 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014304:	f00a fc42 	bl	801eb8c <rand>
 8014308:	4603      	mov	r3, r0
 801430a:	b29b      	uxth	r3, r3
 801430c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014310:	b29b      	uxth	r3, r3
 8014312:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014316:	b29a      	uxth	r2, r3
 8014318:	4b01      	ldr	r3, [pc, #4]	@ (8014320 <tcp_init+0x20>)
 801431a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801431c:	bf00      	nop
 801431e:	bd80      	pop	{r7, pc}
 8014320:	20000068 	.word	0x20000068

08014324 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b082      	sub	sp, #8
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	7d1b      	ldrb	r3, [r3, #20]
 8014330:	2b01      	cmp	r3, #1
 8014332:	d105      	bne.n	8014340 <tcp_free+0x1c>
 8014334:	4b06      	ldr	r3, [pc, #24]	@ (8014350 <tcp_free+0x2c>)
 8014336:	22d4      	movs	r2, #212	@ 0xd4
 8014338:	4906      	ldr	r1, [pc, #24]	@ (8014354 <tcp_free+0x30>)
 801433a:	4807      	ldr	r0, [pc, #28]	@ (8014358 <tcp_free+0x34>)
 801433c:	f00a fd26 	bl	801ed8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014340:	6879      	ldr	r1, [r7, #4]
 8014342:	2001      	movs	r0, #1
 8014344:	f7fe fd98 	bl	8012e78 <memp_free>
}
 8014348:	bf00      	nop
 801434a:	3708      	adds	r7, #8
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	0802181c 	.word	0x0802181c
 8014354:	0802184c 	.word	0x0802184c
 8014358:	08021860 	.word	0x08021860

0801435c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b082      	sub	sp, #8
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	7d1b      	ldrb	r3, [r3, #20]
 8014368:	2b01      	cmp	r3, #1
 801436a:	d105      	bne.n	8014378 <tcp_free_listen+0x1c>
 801436c:	4b06      	ldr	r3, [pc, #24]	@ (8014388 <tcp_free_listen+0x2c>)
 801436e:	22df      	movs	r2, #223	@ 0xdf
 8014370:	4906      	ldr	r1, [pc, #24]	@ (801438c <tcp_free_listen+0x30>)
 8014372:	4807      	ldr	r0, [pc, #28]	@ (8014390 <tcp_free_listen+0x34>)
 8014374:	f00a fd0a 	bl	801ed8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014378:	6879      	ldr	r1, [r7, #4]
 801437a:	2002      	movs	r0, #2
 801437c:	f7fe fd7c 	bl	8012e78 <memp_free>
}
 8014380:	bf00      	nop
 8014382:	3708      	adds	r7, #8
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}
 8014388:	0802181c 	.word	0x0802181c
 801438c:	08021888 	.word	0x08021888
 8014390:	08021860 	.word	0x08021860

08014394 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014398:	f001 f8f6 	bl	8015588 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801439c:	4b07      	ldr	r3, [pc, #28]	@ (80143bc <tcp_tmr+0x28>)
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	3301      	adds	r3, #1
 80143a2:	b2da      	uxtb	r2, r3
 80143a4:	4b05      	ldr	r3, [pc, #20]	@ (80143bc <tcp_tmr+0x28>)
 80143a6:	701a      	strb	r2, [r3, #0]
 80143a8:	4b04      	ldr	r3, [pc, #16]	@ (80143bc <tcp_tmr+0x28>)
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	f003 0301 	and.w	r3, r3, #1
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d001      	beq.n	80143b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80143b4:	f000 fda6 	bl	8014f04 <tcp_slowtmr>
  }
}
 80143b8:	bf00      	nop
 80143ba:	bd80      	pop	{r7, pc}
 80143bc:	200227b1 	.word	0x200227b1

080143c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b084      	sub	sp, #16
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d105      	bne.n	80143dc <tcp_remove_listener+0x1c>
 80143d0:	4b0d      	ldr	r3, [pc, #52]	@ (8014408 <tcp_remove_listener+0x48>)
 80143d2:	22ff      	movs	r2, #255	@ 0xff
 80143d4:	490d      	ldr	r1, [pc, #52]	@ (801440c <tcp_remove_listener+0x4c>)
 80143d6:	480e      	ldr	r0, [pc, #56]	@ (8014410 <tcp_remove_listener+0x50>)
 80143d8:	f00a fcd8 	bl	801ed8c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	60fb      	str	r3, [r7, #12]
 80143e0:	e00a      	b.n	80143f8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80143e6:	683a      	ldr	r2, [r7, #0]
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d102      	bne.n	80143f2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	2200      	movs	r2, #0
 80143f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	60fb      	str	r3, [r7, #12]
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d1f1      	bne.n	80143e2 <tcp_remove_listener+0x22>
    }
  }
}
 80143fe:	bf00      	nop
 8014400:	bf00      	nop
 8014402:	3710      	adds	r7, #16
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}
 8014408:	0802181c 	.word	0x0802181c
 801440c:	080218a4 	.word	0x080218a4
 8014410:	08021860 	.word	0x08021860

08014414 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d106      	bne.n	8014430 <tcp_listen_closed+0x1c>
 8014422:	4b14      	ldr	r3, [pc, #80]	@ (8014474 <tcp_listen_closed+0x60>)
 8014424:	f240 1211 	movw	r2, #273	@ 0x111
 8014428:	4913      	ldr	r1, [pc, #76]	@ (8014478 <tcp_listen_closed+0x64>)
 801442a:	4814      	ldr	r0, [pc, #80]	@ (801447c <tcp_listen_closed+0x68>)
 801442c:	f00a fcae 	bl	801ed8c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	7d1b      	ldrb	r3, [r3, #20]
 8014434:	2b01      	cmp	r3, #1
 8014436:	d006      	beq.n	8014446 <tcp_listen_closed+0x32>
 8014438:	4b0e      	ldr	r3, [pc, #56]	@ (8014474 <tcp_listen_closed+0x60>)
 801443a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801443e:	4910      	ldr	r1, [pc, #64]	@ (8014480 <tcp_listen_closed+0x6c>)
 8014440:	480e      	ldr	r0, [pc, #56]	@ (801447c <tcp_listen_closed+0x68>)
 8014442:	f00a fca3 	bl	801ed8c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014446:	2301      	movs	r3, #1
 8014448:	60fb      	str	r3, [r7, #12]
 801444a:	e00b      	b.n	8014464 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801444c:	4a0d      	ldr	r2, [pc, #52]	@ (8014484 <tcp_listen_closed+0x70>)
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	6879      	ldr	r1, [r7, #4]
 8014458:	4618      	mov	r0, r3
 801445a:	f7ff ffb1 	bl	80143c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	3301      	adds	r3, #1
 8014462:	60fb      	str	r3, [r7, #12]
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	2b03      	cmp	r3, #3
 8014468:	d9f0      	bls.n	801444c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801446a:	bf00      	nop
 801446c:	bf00      	nop
 801446e:	3710      	adds	r7, #16
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}
 8014474:	0802181c 	.word	0x0802181c
 8014478:	080218cc 	.word	0x080218cc
 801447c:	08021860 	.word	0x08021860
 8014480:	080218d8 	.word	0x080218d8
 8014484:	0802430c 	.word	0x0802430c

08014488 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014488:	b5b0      	push	{r4, r5, r7, lr}
 801448a:	b088      	sub	sp, #32
 801448c:	af04      	add	r7, sp, #16
 801448e:	6078      	str	r0, [r7, #4]
 8014490:	460b      	mov	r3, r1
 8014492:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d106      	bne.n	80144a8 <tcp_close_shutdown+0x20>
 801449a:	4b63      	ldr	r3, [pc, #396]	@ (8014628 <tcp_close_shutdown+0x1a0>)
 801449c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80144a0:	4962      	ldr	r1, [pc, #392]	@ (801462c <tcp_close_shutdown+0x1a4>)
 80144a2:	4863      	ldr	r0, [pc, #396]	@ (8014630 <tcp_close_shutdown+0x1a8>)
 80144a4:	f00a fc72 	bl	801ed8c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80144a8:	78fb      	ldrb	r3, [r7, #3]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d066      	beq.n	801457c <tcp_close_shutdown+0xf4>
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	7d1b      	ldrb	r3, [r3, #20]
 80144b2:	2b04      	cmp	r3, #4
 80144b4:	d003      	beq.n	80144be <tcp_close_shutdown+0x36>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	7d1b      	ldrb	r3, [r3, #20]
 80144ba:	2b07      	cmp	r3, #7
 80144bc:	d15e      	bne.n	801457c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d104      	bne.n	80144d0 <tcp_close_shutdown+0x48>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80144ca:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80144ce:	d055      	beq.n	801457c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	8b5b      	ldrh	r3, [r3, #26]
 80144d4:	f003 0310 	and.w	r3, r3, #16
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d106      	bne.n	80144ea <tcp_close_shutdown+0x62>
 80144dc:	4b52      	ldr	r3, [pc, #328]	@ (8014628 <tcp_close_shutdown+0x1a0>)
 80144de:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80144e2:	4954      	ldr	r1, [pc, #336]	@ (8014634 <tcp_close_shutdown+0x1ac>)
 80144e4:	4852      	ldr	r0, [pc, #328]	@ (8014630 <tcp_close_shutdown+0x1a8>)
 80144e6:	f00a fc51 	bl	801ed8c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80144f2:	687d      	ldr	r5, [r7, #4]
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	3304      	adds	r3, #4
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	8ad2      	ldrh	r2, [r2, #22]
 80144fc:	6879      	ldr	r1, [r7, #4]
 80144fe:	8b09      	ldrh	r1, [r1, #24]
 8014500:	9102      	str	r1, [sp, #8]
 8014502:	9201      	str	r2, [sp, #4]
 8014504:	9300      	str	r3, [sp, #0]
 8014506:	462b      	mov	r3, r5
 8014508:	4622      	mov	r2, r4
 801450a:	4601      	mov	r1, r0
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f005 fe79 	bl	801a204 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f001 fbe8 	bl	8015ce8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014518:	4b47      	ldr	r3, [pc, #284]	@ (8014638 <tcp_close_shutdown+0x1b0>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	429a      	cmp	r2, r3
 8014520:	d105      	bne.n	801452e <tcp_close_shutdown+0xa6>
 8014522:	4b45      	ldr	r3, [pc, #276]	@ (8014638 <tcp_close_shutdown+0x1b0>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	68db      	ldr	r3, [r3, #12]
 8014528:	4a43      	ldr	r2, [pc, #268]	@ (8014638 <tcp_close_shutdown+0x1b0>)
 801452a:	6013      	str	r3, [r2, #0]
 801452c:	e013      	b.n	8014556 <tcp_close_shutdown+0xce>
 801452e:	4b42      	ldr	r3, [pc, #264]	@ (8014638 <tcp_close_shutdown+0x1b0>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	60fb      	str	r3, [r7, #12]
 8014534:	e00c      	b.n	8014550 <tcp_close_shutdown+0xc8>
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	68db      	ldr	r3, [r3, #12]
 801453a:	687a      	ldr	r2, [r7, #4]
 801453c:	429a      	cmp	r2, r3
 801453e:	d104      	bne.n	801454a <tcp_close_shutdown+0xc2>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	68da      	ldr	r2, [r3, #12]
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	60da      	str	r2, [r3, #12]
 8014548:	e005      	b.n	8014556 <tcp_close_shutdown+0xce>
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	68db      	ldr	r3, [r3, #12]
 801454e:	60fb      	str	r3, [r7, #12]
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d1ef      	bne.n	8014536 <tcp_close_shutdown+0xae>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2200      	movs	r2, #0
 801455a:	60da      	str	r2, [r3, #12]
 801455c:	4b37      	ldr	r3, [pc, #220]	@ (801463c <tcp_close_shutdown+0x1b4>)
 801455e:	2201      	movs	r2, #1
 8014560:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014562:	4b37      	ldr	r3, [pc, #220]	@ (8014640 <tcp_close_shutdown+0x1b8>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	687a      	ldr	r2, [r7, #4]
 8014568:	429a      	cmp	r2, r3
 801456a:	d102      	bne.n	8014572 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801456c:	f004 f882 	bl	8018674 <tcp_trigger_input_pcb_close>
 8014570:	e002      	b.n	8014578 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f7ff fed6 	bl	8014324 <tcp_free>
      }
      return ERR_OK;
 8014578:	2300      	movs	r3, #0
 801457a:	e050      	b.n	801461e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	7d1b      	ldrb	r3, [r3, #20]
 8014580:	2b02      	cmp	r3, #2
 8014582:	d03b      	beq.n	80145fc <tcp_close_shutdown+0x174>
 8014584:	2b02      	cmp	r3, #2
 8014586:	dc44      	bgt.n	8014612 <tcp_close_shutdown+0x18a>
 8014588:	2b00      	cmp	r3, #0
 801458a:	d002      	beq.n	8014592 <tcp_close_shutdown+0x10a>
 801458c:	2b01      	cmp	r3, #1
 801458e:	d02a      	beq.n	80145e6 <tcp_close_shutdown+0x15e>
 8014590:	e03f      	b.n	8014612 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	8adb      	ldrh	r3, [r3, #22]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d021      	beq.n	80145de <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801459a:	4b2a      	ldr	r3, [pc, #168]	@ (8014644 <tcp_close_shutdown+0x1bc>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	687a      	ldr	r2, [r7, #4]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d105      	bne.n	80145b0 <tcp_close_shutdown+0x128>
 80145a4:	4b27      	ldr	r3, [pc, #156]	@ (8014644 <tcp_close_shutdown+0x1bc>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	4a26      	ldr	r2, [pc, #152]	@ (8014644 <tcp_close_shutdown+0x1bc>)
 80145ac:	6013      	str	r3, [r2, #0]
 80145ae:	e013      	b.n	80145d8 <tcp_close_shutdown+0x150>
 80145b0:	4b24      	ldr	r3, [pc, #144]	@ (8014644 <tcp_close_shutdown+0x1bc>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	60bb      	str	r3, [r7, #8]
 80145b6:	e00c      	b.n	80145d2 <tcp_close_shutdown+0x14a>
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	68db      	ldr	r3, [r3, #12]
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d104      	bne.n	80145cc <tcp_close_shutdown+0x144>
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	68da      	ldr	r2, [r3, #12]
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	60da      	str	r2, [r3, #12]
 80145ca:	e005      	b.n	80145d8 <tcp_close_shutdown+0x150>
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	68db      	ldr	r3, [r3, #12]
 80145d0:	60bb      	str	r3, [r7, #8]
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d1ef      	bne.n	80145b8 <tcp_close_shutdown+0x130>
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2200      	movs	r2, #0
 80145dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f7ff fea0 	bl	8014324 <tcp_free>
      break;
 80145e4:	e01a      	b.n	801461c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f7ff ff14 	bl	8014414 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80145ec:	6879      	ldr	r1, [r7, #4]
 80145ee:	4816      	ldr	r0, [pc, #88]	@ (8014648 <tcp_close_shutdown+0x1c0>)
 80145f0:	f001 fbca 	bl	8015d88 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7ff feb1 	bl	801435c <tcp_free_listen>
      break;
 80145fa:	e00f      	b.n	801461c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80145fc:	6879      	ldr	r1, [r7, #4]
 80145fe:	480e      	ldr	r0, [pc, #56]	@ (8014638 <tcp_close_shutdown+0x1b0>)
 8014600:	f001 fbc2 	bl	8015d88 <tcp_pcb_remove>
 8014604:	4b0d      	ldr	r3, [pc, #52]	@ (801463c <tcp_close_shutdown+0x1b4>)
 8014606:	2201      	movs	r2, #1
 8014608:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f7ff fe8a 	bl	8014324 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014610:	e004      	b.n	801461c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f000 f81a 	bl	801464c <tcp_close_shutdown_fin>
 8014618:	4603      	mov	r3, r0
 801461a:	e000      	b.n	801461e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801461c:	2300      	movs	r3, #0
}
 801461e:	4618      	mov	r0, r3
 8014620:	3710      	adds	r7, #16
 8014622:	46bd      	mov	sp, r7
 8014624:	bdb0      	pop	{r4, r5, r7, pc}
 8014626:	bf00      	nop
 8014628:	0802181c 	.word	0x0802181c
 801462c:	080218f0 	.word	0x080218f0
 8014630:	08021860 	.word	0x08021860
 8014634:	08021910 	.word	0x08021910
 8014638:	200227a8 	.word	0x200227a8
 801463c:	200227b0 	.word	0x200227b0
 8014640:	200227ec 	.word	0x200227ec
 8014644:	200227a0 	.word	0x200227a0
 8014648:	200227a4 	.word	0x200227a4

0801464c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b084      	sub	sp, #16
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d106      	bne.n	8014668 <tcp_close_shutdown_fin+0x1c>
 801465a:	4b2e      	ldr	r3, [pc, #184]	@ (8014714 <tcp_close_shutdown_fin+0xc8>)
 801465c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8014660:	492d      	ldr	r1, [pc, #180]	@ (8014718 <tcp_close_shutdown_fin+0xcc>)
 8014662:	482e      	ldr	r0, [pc, #184]	@ (801471c <tcp_close_shutdown_fin+0xd0>)
 8014664:	f00a fb92 	bl	801ed8c <iprintf>

  switch (pcb->state) {
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	7d1b      	ldrb	r3, [r3, #20]
 801466c:	2b07      	cmp	r3, #7
 801466e:	d020      	beq.n	80146b2 <tcp_close_shutdown_fin+0x66>
 8014670:	2b07      	cmp	r3, #7
 8014672:	dc2b      	bgt.n	80146cc <tcp_close_shutdown_fin+0x80>
 8014674:	2b03      	cmp	r3, #3
 8014676:	d002      	beq.n	801467e <tcp_close_shutdown_fin+0x32>
 8014678:	2b04      	cmp	r3, #4
 801467a:	d00d      	beq.n	8014698 <tcp_close_shutdown_fin+0x4c>
 801467c:	e026      	b.n	80146cc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801467e:	6878      	ldr	r0, [r7, #4]
 8014680:	f004 fec2 	bl	8019408 <tcp_send_fin>
 8014684:	4603      	mov	r3, r0
 8014686:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d11f      	bne.n	80146d0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2205      	movs	r2, #5
 8014694:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014696:	e01b      	b.n	80146d0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f004 feb5 	bl	8019408 <tcp_send_fin>
 801469e:	4603      	mov	r3, r0
 80146a0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80146a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d114      	bne.n	80146d4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2205      	movs	r2, #5
 80146ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 80146b0:	e010      	b.n	80146d4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f004 fea8 	bl	8019408 <tcp_send_fin>
 80146b8:	4603      	mov	r3, r0
 80146ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80146bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d109      	bne.n	80146d8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2209      	movs	r2, #9
 80146c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80146ca:	e005      	b.n	80146d8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80146cc:	2300      	movs	r3, #0
 80146ce:	e01c      	b.n	801470a <tcp_close_shutdown_fin+0xbe>
      break;
 80146d0:	bf00      	nop
 80146d2:	e002      	b.n	80146da <tcp_close_shutdown_fin+0x8e>
      break;
 80146d4:	bf00      	nop
 80146d6:	e000      	b.n	80146da <tcp_close_shutdown_fin+0x8e>
      break;
 80146d8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80146da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d103      	bne.n	80146ea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f004 ffce 	bl	8019684 <tcp_output>
 80146e8:	e00d      	b.n	8014706 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80146ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80146f2:	d108      	bne.n	8014706 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	8b5b      	ldrh	r3, [r3, #26]
 80146f8:	f043 0308 	orr.w	r3, r3, #8
 80146fc:	b29a      	uxth	r2, r3
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014702:	2300      	movs	r3, #0
 8014704:	e001      	b.n	801470a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014706:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801470a:	4618      	mov	r0, r3
 801470c:	3710      	adds	r7, #16
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}
 8014712:	bf00      	nop
 8014714:	0802181c 	.word	0x0802181c
 8014718:	080218cc 	.word	0x080218cc
 801471c:	08021860 	.word	0x08021860

08014720 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d109      	bne.n	8014742 <tcp_close+0x22>
 801472e:	4b0f      	ldr	r3, [pc, #60]	@ (801476c <tcp_close+0x4c>)
 8014730:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014734:	490e      	ldr	r1, [pc, #56]	@ (8014770 <tcp_close+0x50>)
 8014736:	480f      	ldr	r0, [pc, #60]	@ (8014774 <tcp_close+0x54>)
 8014738:	f00a fb28 	bl	801ed8c <iprintf>
 801473c:	f06f 030f 	mvn.w	r3, #15
 8014740:	e00f      	b.n	8014762 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	7d1b      	ldrb	r3, [r3, #20]
 8014746:	2b01      	cmp	r3, #1
 8014748:	d006      	beq.n	8014758 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	8b5b      	ldrh	r3, [r3, #26]
 801474e:	f043 0310 	orr.w	r3, r3, #16
 8014752:	b29a      	uxth	r2, r3
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014758:	2101      	movs	r1, #1
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	f7ff fe94 	bl	8014488 <tcp_close_shutdown>
 8014760:	4603      	mov	r3, r0
}
 8014762:	4618      	mov	r0, r3
 8014764:	3708      	adds	r7, #8
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	0802181c 	.word	0x0802181c
 8014770:	0802192c 	.word	0x0802192c
 8014774:	08021860 	.word	0x08021860

08014778 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
 801477e:	60f8      	str	r0, [r7, #12]
 8014780:	60b9      	str	r1, [r7, #8]
 8014782:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d109      	bne.n	801479e <tcp_shutdown+0x26>
 801478a:	4b26      	ldr	r3, [pc, #152]	@ (8014824 <tcp_shutdown+0xac>)
 801478c:	f240 2207 	movw	r2, #519	@ 0x207
 8014790:	4925      	ldr	r1, [pc, #148]	@ (8014828 <tcp_shutdown+0xb0>)
 8014792:	4826      	ldr	r0, [pc, #152]	@ (801482c <tcp_shutdown+0xb4>)
 8014794:	f00a fafa 	bl	801ed8c <iprintf>
 8014798:	f06f 030f 	mvn.w	r3, #15
 801479c:	e03d      	b.n	801481a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	7d1b      	ldrb	r3, [r3, #20]
 80147a2:	2b01      	cmp	r3, #1
 80147a4:	d102      	bne.n	80147ac <tcp_shutdown+0x34>
    return ERR_CONN;
 80147a6:	f06f 030a 	mvn.w	r3, #10
 80147aa:	e036      	b.n	801481a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d01b      	beq.n	80147ea <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	8b5b      	ldrh	r3, [r3, #26]
 80147b6:	f043 0310 	orr.w	r3, r3, #16
 80147ba:	b29a      	uxth	r2, r3
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d005      	beq.n	80147d2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80147c6:	2101      	movs	r1, #1
 80147c8:	68f8      	ldr	r0, [r7, #12]
 80147ca:	f7ff fe5d 	bl	8014488 <tcp_close_shutdown>
 80147ce:	4603      	mov	r3, r0
 80147d0:	e023      	b.n	801481a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d007      	beq.n	80147ea <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80147de:	4618      	mov	r0, r3
 80147e0:	f7ff fae4 	bl	8013dac <pbuf_free>
      pcb->refused_data = NULL;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	2200      	movs	r2, #0
 80147e8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d013      	beq.n	8014818 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	7d1b      	ldrb	r3, [r3, #20]
 80147f4:	2b04      	cmp	r3, #4
 80147f6:	dc02      	bgt.n	80147fe <tcp_shutdown+0x86>
 80147f8:	2b03      	cmp	r3, #3
 80147fa:	da02      	bge.n	8014802 <tcp_shutdown+0x8a>
 80147fc:	e009      	b.n	8014812 <tcp_shutdown+0x9a>
 80147fe:	2b07      	cmp	r3, #7
 8014800:	d107      	bne.n	8014812 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	b2db      	uxtb	r3, r3
 8014806:	4619      	mov	r1, r3
 8014808:	68f8      	ldr	r0, [r7, #12]
 801480a:	f7ff fe3d 	bl	8014488 <tcp_close_shutdown>
 801480e:	4603      	mov	r3, r0
 8014810:	e003      	b.n	801481a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8014812:	f06f 030a 	mvn.w	r3, #10
 8014816:	e000      	b.n	801481a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8014818:	2300      	movs	r3, #0
}
 801481a:	4618      	mov	r0, r3
 801481c:	3710      	adds	r7, #16
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	0802181c 	.word	0x0802181c
 8014828:	08021944 	.word	0x08021944
 801482c:	08021860 	.word	0x08021860

08014830 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b08e      	sub	sp, #56	@ 0x38
 8014834:	af04      	add	r7, sp, #16
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d107      	bne.n	8014850 <tcp_abandon+0x20>
 8014840:	4b52      	ldr	r3, [pc, #328]	@ (801498c <tcp_abandon+0x15c>)
 8014842:	f240 223d 	movw	r2, #573	@ 0x23d
 8014846:	4952      	ldr	r1, [pc, #328]	@ (8014990 <tcp_abandon+0x160>)
 8014848:	4852      	ldr	r0, [pc, #328]	@ (8014994 <tcp_abandon+0x164>)
 801484a:	f00a fa9f 	bl	801ed8c <iprintf>
 801484e:	e099      	b.n	8014984 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	7d1b      	ldrb	r3, [r3, #20]
 8014854:	2b01      	cmp	r3, #1
 8014856:	d106      	bne.n	8014866 <tcp_abandon+0x36>
 8014858:	4b4c      	ldr	r3, [pc, #304]	@ (801498c <tcp_abandon+0x15c>)
 801485a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801485e:	494e      	ldr	r1, [pc, #312]	@ (8014998 <tcp_abandon+0x168>)
 8014860:	484c      	ldr	r0, [pc, #304]	@ (8014994 <tcp_abandon+0x164>)
 8014862:	f00a fa93 	bl	801ed8c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	7d1b      	ldrb	r3, [r3, #20]
 801486a:	2b0a      	cmp	r3, #10
 801486c:	d107      	bne.n	801487e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801486e:	6879      	ldr	r1, [r7, #4]
 8014870:	484a      	ldr	r0, [pc, #296]	@ (801499c <tcp_abandon+0x16c>)
 8014872:	f001 fa89 	bl	8015d88 <tcp_pcb_remove>
    tcp_free(pcb);
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f7ff fd54 	bl	8014324 <tcp_free>
 801487c:	e082      	b.n	8014984 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801487e:	2300      	movs	r3, #0
 8014880:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014882:	2300      	movs	r3, #0
 8014884:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801488a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014890:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014898:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	691b      	ldr	r3, [r3, #16]
 801489e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	7d1b      	ldrb	r3, [r3, #20]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d126      	bne.n	80148f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	8adb      	ldrh	r3, [r3, #22]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d02e      	beq.n	801490e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80148b0:	4b3b      	ldr	r3, [pc, #236]	@ (80149a0 <tcp_abandon+0x170>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	687a      	ldr	r2, [r7, #4]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	d105      	bne.n	80148c6 <tcp_abandon+0x96>
 80148ba:	4b39      	ldr	r3, [pc, #228]	@ (80149a0 <tcp_abandon+0x170>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	4a37      	ldr	r2, [pc, #220]	@ (80149a0 <tcp_abandon+0x170>)
 80148c2:	6013      	str	r3, [r2, #0]
 80148c4:	e013      	b.n	80148ee <tcp_abandon+0xbe>
 80148c6:	4b36      	ldr	r3, [pc, #216]	@ (80149a0 <tcp_abandon+0x170>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	61fb      	str	r3, [r7, #28]
 80148cc:	e00c      	b.n	80148e8 <tcp_abandon+0xb8>
 80148ce:	69fb      	ldr	r3, [r7, #28]
 80148d0:	68db      	ldr	r3, [r3, #12]
 80148d2:	687a      	ldr	r2, [r7, #4]
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d104      	bne.n	80148e2 <tcp_abandon+0xb2>
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	68da      	ldr	r2, [r3, #12]
 80148dc:	69fb      	ldr	r3, [r7, #28]
 80148de:	60da      	str	r2, [r3, #12]
 80148e0:	e005      	b.n	80148ee <tcp_abandon+0xbe>
 80148e2:	69fb      	ldr	r3, [r7, #28]
 80148e4:	68db      	ldr	r3, [r3, #12]
 80148e6:	61fb      	str	r3, [r7, #28]
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d1ef      	bne.n	80148ce <tcp_abandon+0x9e>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2200      	movs	r2, #0
 80148f2:	60da      	str	r2, [r3, #12]
 80148f4:	e00b      	b.n	801490e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	8adb      	ldrh	r3, [r3, #22]
 80148fe:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014900:	6879      	ldr	r1, [r7, #4]
 8014902:	4828      	ldr	r0, [pc, #160]	@ (80149a4 <tcp_abandon+0x174>)
 8014904:	f001 fa40 	bl	8015d88 <tcp_pcb_remove>
 8014908:	4b27      	ldr	r3, [pc, #156]	@ (80149a8 <tcp_abandon+0x178>)
 801490a:	2201      	movs	r2, #1
 801490c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014912:	2b00      	cmp	r3, #0
 8014914:	d004      	beq.n	8014920 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801491a:	4618      	mov	r0, r3
 801491c:	f000 ff14 	bl	8015748 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014924:	2b00      	cmp	r3, #0
 8014926:	d004      	beq.n	8014932 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801492c:	4618      	mov	r0, r3
 801492e:	f000 ff0b 	bl	8015748 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014936:	2b00      	cmp	r3, #0
 8014938:	d004      	beq.n	8014944 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801493e:	4618      	mov	r0, r3
 8014940:	f000 ff02 	bl	8015748 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014946:	2b00      	cmp	r3, #0
 8014948:	d00e      	beq.n	8014968 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801494a:	6879      	ldr	r1, [r7, #4]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	3304      	adds	r3, #4
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	8b12      	ldrh	r2, [r2, #24]
 8014954:	9202      	str	r2, [sp, #8]
 8014956:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014958:	9201      	str	r2, [sp, #4]
 801495a:	9300      	str	r3, [sp, #0]
 801495c:	460b      	mov	r3, r1
 801495e:	697a      	ldr	r2, [r7, #20]
 8014960:	69b9      	ldr	r1, [r7, #24]
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f005 fc4e 	bl	801a204 <tcp_rst>
    }
    last_state = pcb->state;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	7d1b      	ldrb	r3, [r3, #20]
 801496c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f7ff fcd8 	bl	8014324 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d004      	beq.n	8014984 <tcp_abandon+0x154>
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	f06f 010c 	mvn.w	r1, #12
 8014980:	68f8      	ldr	r0, [r7, #12]
 8014982:	4798      	blx	r3
  }
}
 8014984:	3728      	adds	r7, #40	@ 0x28
 8014986:	46bd      	mov	sp, r7
 8014988:	bd80      	pop	{r7, pc}
 801498a:	bf00      	nop
 801498c:	0802181c 	.word	0x0802181c
 8014990:	08021960 	.word	0x08021960
 8014994:	08021860 	.word	0x08021860
 8014998:	0802197c 	.word	0x0802197c
 801499c:	200227ac 	.word	0x200227ac
 80149a0:	200227a0 	.word	0x200227a0
 80149a4:	200227a8 	.word	0x200227a8
 80149a8:	200227b0 	.word	0x200227b0

080149ac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80149b4:	2101      	movs	r1, #1
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f7ff ff3a 	bl	8014830 <tcp_abandon>
}
 80149bc:	bf00      	nop
 80149be:	3708      	adds	r7, #8
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}

080149c4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b088      	sub	sp, #32
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	60b9      	str	r1, [r7, #8]
 80149ce:	4613      	mov	r3, r2
 80149d0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80149d2:	2304      	movs	r3, #4
 80149d4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80149d6:	68bb      	ldr	r3, [r7, #8]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d101      	bne.n	80149e0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80149dc:	4b3e      	ldr	r3, [pc, #248]	@ (8014ad8 <tcp_bind+0x114>)
 80149de:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d109      	bne.n	80149fa <tcp_bind+0x36>
 80149e6:	4b3d      	ldr	r3, [pc, #244]	@ (8014adc <tcp_bind+0x118>)
 80149e8:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80149ec:	493c      	ldr	r1, [pc, #240]	@ (8014ae0 <tcp_bind+0x11c>)
 80149ee:	483d      	ldr	r0, [pc, #244]	@ (8014ae4 <tcp_bind+0x120>)
 80149f0:	f00a f9cc 	bl	801ed8c <iprintf>
 80149f4:	f06f 030f 	mvn.w	r3, #15
 80149f8:	e06a      	b.n	8014ad0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	7d1b      	ldrb	r3, [r3, #20]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d009      	beq.n	8014a16 <tcp_bind+0x52>
 8014a02:	4b36      	ldr	r3, [pc, #216]	@ (8014adc <tcp_bind+0x118>)
 8014a04:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014a08:	4937      	ldr	r1, [pc, #220]	@ (8014ae8 <tcp_bind+0x124>)
 8014a0a:	4836      	ldr	r0, [pc, #216]	@ (8014ae4 <tcp_bind+0x120>)
 8014a0c:	f00a f9be 	bl	801ed8c <iprintf>
 8014a10:	f06f 0305 	mvn.w	r3, #5
 8014a14:	e05c      	b.n	8014ad0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8014a16:	88fb      	ldrh	r3, [r7, #6]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d109      	bne.n	8014a30 <tcp_bind+0x6c>
    port = tcp_new_port();
 8014a1c:	f000 f914 	bl	8014c48 <tcp_new_port>
 8014a20:	4603      	mov	r3, r0
 8014a22:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014a24:	88fb      	ldrh	r3, [r7, #6]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d135      	bne.n	8014a96 <tcp_bind+0xd2>
      return ERR_BUF;
 8014a2a:	f06f 0301 	mvn.w	r3, #1
 8014a2e:	e04f      	b.n	8014ad0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8014a30:	2300      	movs	r3, #0
 8014a32:	61fb      	str	r3, [r7, #28]
 8014a34:	e02b      	b.n	8014a8e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014a36:	4a2d      	ldr	r2, [pc, #180]	@ (8014aec <tcp_bind+0x128>)
 8014a38:	69fb      	ldr	r3, [r7, #28]
 8014a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	61bb      	str	r3, [r7, #24]
 8014a42:	e01e      	b.n	8014a82 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8014a44:	69bb      	ldr	r3, [r7, #24]
 8014a46:	8adb      	ldrh	r3, [r3, #22]
 8014a48:	88fa      	ldrh	r2, [r7, #6]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d116      	bne.n	8014a7c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8014a4e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d010      	beq.n	8014a76 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8014a54:	69bb      	ldr	r3, [r7, #24]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d00c      	beq.n	8014a76 <tcp_bind+0xb2>
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d009      	beq.n	8014a76 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d005      	beq.n	8014a76 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8014a6a:	69bb      	ldr	r3, [r7, #24]
 8014a6c:	681a      	ldr	r2, [r3, #0]
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d102      	bne.n	8014a7c <tcp_bind+0xb8>
              return ERR_USE;
 8014a76:	f06f 0307 	mvn.w	r3, #7
 8014a7a:	e029      	b.n	8014ad0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014a7c:	69bb      	ldr	r3, [r7, #24]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	61bb      	str	r3, [r7, #24]
 8014a82:	69bb      	ldr	r3, [r7, #24]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d1dd      	bne.n	8014a44 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8014a88:	69fb      	ldr	r3, [r7, #28]
 8014a8a:	3301      	adds	r3, #1
 8014a8c:	61fb      	str	r3, [r7, #28]
 8014a8e:	69fa      	ldr	r2, [r7, #28]
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	dbcf      	blt.n	8014a36 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00c      	beq.n	8014ab6 <tcp_bind+0xf2>
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d008      	beq.n	8014ab6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d002      	beq.n	8014ab0 <tcp_bind+0xec>
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	e000      	b.n	8014ab2 <tcp_bind+0xee>
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	68fa      	ldr	r2, [r7, #12]
 8014ab4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	88fa      	ldrh	r2, [r7, #6]
 8014aba:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8014abc:	4b0c      	ldr	r3, [pc, #48]	@ (8014af0 <tcp_bind+0x12c>)
 8014abe:	681a      	ldr	r2, [r3, #0]
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	60da      	str	r2, [r3, #12]
 8014ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8014af0 <tcp_bind+0x12c>)
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	6013      	str	r3, [r2, #0]
 8014aca:	f005 fd5d 	bl	801a588 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8014ace:	2300      	movs	r3, #0
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3720      	adds	r7, #32
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}
 8014ad8:	08024334 	.word	0x08024334
 8014adc:	0802181c 	.word	0x0802181c
 8014ae0:	080219b0 	.word	0x080219b0
 8014ae4:	08021860 	.word	0x08021860
 8014ae8:	080219c8 	.word	0x080219c8
 8014aec:	0802430c 	.word	0x0802430c
 8014af0:	200227a0 	.word	0x200227a0

08014af4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b084      	sub	sp, #16
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d106      	bne.n	8014b10 <tcp_update_rcv_ann_wnd+0x1c>
 8014b02:	4b25      	ldr	r3, [pc, #148]	@ (8014b98 <tcp_update_rcv_ann_wnd+0xa4>)
 8014b04:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8014b08:	4924      	ldr	r1, [pc, #144]	@ (8014b9c <tcp_update_rcv_ann_wnd+0xa8>)
 8014b0a:	4825      	ldr	r0, [pc, #148]	@ (8014ba0 <tcp_update_rcv_ann_wnd+0xac>)
 8014b0c:	f00a f93e 	bl	801ed8c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b14:	687a      	ldr	r2, [r7, #4]
 8014b16:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014b18:	4413      	add	r3, r2
 8014b1a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b20:	687a      	ldr	r2, [r7, #4]
 8014b22:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8014b24:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8014b28:	bf28      	it	cs
 8014b2a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8014b2e:	b292      	uxth	r2, r2
 8014b30:	4413      	add	r3, r2
 8014b32:	68fa      	ldr	r2, [r7, #12]
 8014b34:	1ad3      	subs	r3, r2, r3
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	db08      	blt.n	8014b4c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b46:	68fa      	ldr	r2, [r7, #12]
 8014b48:	1ad3      	subs	r3, r2, r3
 8014b4a:	e020      	b.n	8014b8e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b54:	1ad3      	subs	r3, r2, r3
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	dd03      	ble.n	8014b62 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014b60:	e014      	b.n	8014b8c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b6a:	1ad3      	subs	r3, r2, r3
 8014b6c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014b74:	d306      	bcc.n	8014b84 <tcp_update_rcv_ann_wnd+0x90>
 8014b76:	4b08      	ldr	r3, [pc, #32]	@ (8014b98 <tcp_update_rcv_ann_wnd+0xa4>)
 8014b78:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8014b7c:	4909      	ldr	r1, [pc, #36]	@ (8014ba4 <tcp_update_rcv_ann_wnd+0xb0>)
 8014b7e:	4808      	ldr	r0, [pc, #32]	@ (8014ba0 <tcp_update_rcv_ann_wnd+0xac>)
 8014b80:	f00a f904 	bl	801ed8c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8014b8c:	2300      	movs	r3, #0
  }
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3710      	adds	r7, #16
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}
 8014b96:	bf00      	nop
 8014b98:	0802181c 	.word	0x0802181c
 8014b9c:	08021a78 	.word	0x08021a78
 8014ba0:	08021860 	.word	0x08021860
 8014ba4:	08021a9c 	.word	0x08021a9c

08014ba8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b084      	sub	sp, #16
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	460b      	mov	r3, r1
 8014bb2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d107      	bne.n	8014bca <tcp_recved+0x22>
 8014bba:	4b1f      	ldr	r3, [pc, #124]	@ (8014c38 <tcp_recved+0x90>)
 8014bbc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8014bc0:	491e      	ldr	r1, [pc, #120]	@ (8014c3c <tcp_recved+0x94>)
 8014bc2:	481f      	ldr	r0, [pc, #124]	@ (8014c40 <tcp_recved+0x98>)
 8014bc4:	f00a f8e2 	bl	801ed8c <iprintf>
 8014bc8:	e032      	b.n	8014c30 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	7d1b      	ldrb	r3, [r3, #20]
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d106      	bne.n	8014be0 <tcp_recved+0x38>
 8014bd2:	4b19      	ldr	r3, [pc, #100]	@ (8014c38 <tcp_recved+0x90>)
 8014bd4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8014bd8:	491a      	ldr	r1, [pc, #104]	@ (8014c44 <tcp_recved+0x9c>)
 8014bda:	4819      	ldr	r0, [pc, #100]	@ (8014c40 <tcp_recved+0x98>)
 8014bdc:	f00a f8d6 	bl	801ed8c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014be4:	887b      	ldrh	r3, [r7, #2]
 8014be6:	4413      	add	r3, r2
 8014be8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014bea:	89fb      	ldrh	r3, [r7, #14]
 8014bec:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014bf0:	d804      	bhi.n	8014bfc <tcp_recved+0x54>
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014bf6:	89fa      	ldrh	r2, [r7, #14]
 8014bf8:	429a      	cmp	r2, r3
 8014bfa:	d204      	bcs.n	8014c06 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014c02:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014c04:	e002      	b.n	8014c0c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	89fa      	ldrh	r2, [r7, #14]
 8014c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f7ff ff71 	bl	8014af4 <tcp_update_rcv_ann_wnd>
 8014c12:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014c1a:	d309      	bcc.n	8014c30 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	8b5b      	ldrh	r3, [r3, #26]
 8014c20:	f043 0302 	orr.w	r3, r3, #2
 8014c24:	b29a      	uxth	r2, r3
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f004 fd2a 	bl	8019684 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014c30:	3710      	adds	r7, #16
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
 8014c36:	bf00      	nop
 8014c38:	0802181c 	.word	0x0802181c
 8014c3c:	08021ab8 	.word	0x08021ab8
 8014c40:	08021860 	.word	0x08021860
 8014c44:	08021ad0 	.word	0x08021ad0

08014c48 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014c48:	b480      	push	{r7}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8014c52:	4b1e      	ldr	r3, [pc, #120]	@ (8014ccc <tcp_new_port+0x84>)
 8014c54:	881b      	ldrh	r3, [r3, #0]
 8014c56:	3301      	adds	r3, #1
 8014c58:	b29a      	uxth	r2, r3
 8014c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8014ccc <tcp_new_port+0x84>)
 8014c5c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8014c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8014ccc <tcp_new_port+0x84>)
 8014c60:	881b      	ldrh	r3, [r3, #0]
 8014c62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014c66:	4293      	cmp	r3, r2
 8014c68:	d103      	bne.n	8014c72 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8014c6a:	4b18      	ldr	r3, [pc, #96]	@ (8014ccc <tcp_new_port+0x84>)
 8014c6c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014c70:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014c72:	2300      	movs	r3, #0
 8014c74:	71fb      	strb	r3, [r7, #7]
 8014c76:	e01e      	b.n	8014cb6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014c78:	79fb      	ldrb	r3, [r7, #7]
 8014c7a:	4a15      	ldr	r2, [pc, #84]	@ (8014cd0 <tcp_new_port+0x88>)
 8014c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	603b      	str	r3, [r7, #0]
 8014c84:	e011      	b.n	8014caa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8014c86:	683b      	ldr	r3, [r7, #0]
 8014c88:	8ada      	ldrh	r2, [r3, #22]
 8014c8a:	4b10      	ldr	r3, [pc, #64]	@ (8014ccc <tcp_new_port+0x84>)
 8014c8c:	881b      	ldrh	r3, [r3, #0]
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d108      	bne.n	8014ca4 <tcp_new_port+0x5c>
        n++;
 8014c92:	88bb      	ldrh	r3, [r7, #4]
 8014c94:	3301      	adds	r3, #1
 8014c96:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8014c98:	88bb      	ldrh	r3, [r7, #4]
 8014c9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014c9e:	d3d8      	bcc.n	8014c52 <tcp_new_port+0xa>
          return 0;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	e00d      	b.n	8014cc0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	603b      	str	r3, [r7, #0]
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d1ea      	bne.n	8014c86 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014cb0:	79fb      	ldrb	r3, [r7, #7]
 8014cb2:	3301      	adds	r3, #1
 8014cb4:	71fb      	strb	r3, [r7, #7]
 8014cb6:	79fb      	ldrb	r3, [r7, #7]
 8014cb8:	2b03      	cmp	r3, #3
 8014cba:	d9dd      	bls.n	8014c78 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8014cbc:	4b03      	ldr	r3, [pc, #12]	@ (8014ccc <tcp_new_port+0x84>)
 8014cbe:	881b      	ldrh	r3, [r3, #0]
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	370c      	adds	r7, #12
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cca:	4770      	bx	lr
 8014ccc:	20000068 	.word	0x20000068
 8014cd0:	0802430c 	.word	0x0802430c

08014cd4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b08a      	sub	sp, #40	@ 0x28
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	60f8      	str	r0, [r7, #12]
 8014cdc:	60b9      	str	r1, [r7, #8]
 8014cde:	603b      	str	r3, [r7, #0]
 8014ce0:	4613      	mov	r3, r2
 8014ce2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d109      	bne.n	8014d02 <tcp_connect+0x2e>
 8014cee:	4b7d      	ldr	r3, [pc, #500]	@ (8014ee4 <tcp_connect+0x210>)
 8014cf0:	f240 4235 	movw	r2, #1077	@ 0x435
 8014cf4:	497c      	ldr	r1, [pc, #496]	@ (8014ee8 <tcp_connect+0x214>)
 8014cf6:	487d      	ldr	r0, [pc, #500]	@ (8014eec <tcp_connect+0x218>)
 8014cf8:	f00a f848 	bl	801ed8c <iprintf>
 8014cfc:	f06f 030f 	mvn.w	r3, #15
 8014d00:	e0ec      	b.n	8014edc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d109      	bne.n	8014d1c <tcp_connect+0x48>
 8014d08:	4b76      	ldr	r3, [pc, #472]	@ (8014ee4 <tcp_connect+0x210>)
 8014d0a:	f240 4236 	movw	r2, #1078	@ 0x436
 8014d0e:	4978      	ldr	r1, [pc, #480]	@ (8014ef0 <tcp_connect+0x21c>)
 8014d10:	4876      	ldr	r0, [pc, #472]	@ (8014eec <tcp_connect+0x218>)
 8014d12:	f00a f83b 	bl	801ed8c <iprintf>
 8014d16:	f06f 030f 	mvn.w	r3, #15
 8014d1a:	e0df      	b.n	8014edc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	7d1b      	ldrb	r3, [r3, #20]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d009      	beq.n	8014d38 <tcp_connect+0x64>
 8014d24:	4b6f      	ldr	r3, [pc, #444]	@ (8014ee4 <tcp_connect+0x210>)
 8014d26:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 8014d2a:	4972      	ldr	r1, [pc, #456]	@ (8014ef4 <tcp_connect+0x220>)
 8014d2c:	486f      	ldr	r0, [pc, #444]	@ (8014eec <tcp_connect+0x218>)
 8014d2e:	f00a f82d 	bl	801ed8c <iprintf>
 8014d32:	f06f 0309 	mvn.w	r3, #9
 8014d36:	e0d1      	b.n	8014edc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d002      	beq.n	8014d44 <tcp_connect+0x70>
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	e000      	b.n	8014d46 <tcp_connect+0x72>
 8014d44:	2300      	movs	r3, #0
 8014d46:	68fa      	ldr	r2, [r7, #12]
 8014d48:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	88fa      	ldrh	r2, [r7, #6]
 8014d4e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	7a1b      	ldrb	r3, [r3, #8]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d006      	beq.n	8014d66 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	7a1b      	ldrb	r3, [r3, #8]
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fe fc97 	bl	8013690 <netif_get_by_index>
 8014d62:	6278      	str	r0, [r7, #36]	@ 0x24
 8014d64:	e005      	b.n	8014d72 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	3304      	adds	r3, #4
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f007 fe96 	bl	801ca9c <ip4_route>
 8014d70:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8014d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d102      	bne.n	8014d7e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8014d78:	f06f 0303 	mvn.w	r3, #3
 8014d7c:	e0ae      	b.n	8014edc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d003      	beq.n	8014d8c <tcp_connect+0xb8>
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d111      	bne.n	8014db0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8014d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d002      	beq.n	8014d98 <tcp_connect+0xc4>
 8014d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d94:	3304      	adds	r3, #4
 8014d96:	e000      	b.n	8014d9a <tcp_connect+0xc6>
 8014d98:	2300      	movs	r3, #0
 8014d9a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8014d9c:	69fb      	ldr	r3, [r7, #28]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d102      	bne.n	8014da8 <tcp_connect+0xd4>
      return ERR_RTE;
 8014da2:	f06f 0303 	mvn.w	r3, #3
 8014da6:	e099      	b.n	8014edc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014da8:	69fb      	ldr	r3, [r7, #28]
 8014daa:	681a      	ldr	r2, [r3, #0]
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	8adb      	ldrh	r3, [r3, #22]
 8014db4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	8adb      	ldrh	r3, [r3, #22]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d10c      	bne.n	8014dd8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8014dbe:	f7ff ff43 	bl	8014c48 <tcp_new_port>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	461a      	mov	r2, r3
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	8adb      	ldrh	r3, [r3, #22]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d102      	bne.n	8014dd8 <tcp_connect+0x104>
      return ERR_BUF;
 8014dd2:	f06f 0301 	mvn.w	r3, #1
 8014dd6:	e081      	b.n	8014edc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8014dd8:	68f8      	ldr	r0, [r7, #12]
 8014dda:	f001 f869 	bl	8015eb0 <tcp_next_iss>
 8014dde:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	2200      	movs	r2, #0
 8014de4:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	697a      	ldr	r2, [r7, #20]
 8014dea:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8014dec:	697b      	ldr	r3, [r7, #20]
 8014dee:	1e5a      	subs	r2, r3, #1
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8014df4:	697b      	ldr	r3, [r7, #20]
 8014df6:	1e5a      	subs	r2, r3, #1
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	1e5a      	subs	r2, r3, #1
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014e22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014e2c:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	3304      	adds	r3, #4
 8014e36:	461a      	mov	r2, r3
 8014e38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014e3a:	f001 f85f 	bl	8015efc <tcp_eff_send_mss_netif>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	461a      	mov	r2, r3
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	2201      	movs	r2, #1
 8014e4a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	683a      	ldr	r2, [r7, #0]
 8014e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8014e56:	2102      	movs	r1, #2
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f004 fb25 	bl	80194a8 <tcp_enqueue_flags>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8014e62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d136      	bne.n	8014ed8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	2202      	movs	r2, #2
 8014e6e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8014e70:	8b7b      	ldrh	r3, [r7, #26]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d021      	beq.n	8014eba <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8014e76:	4b20      	ldr	r3, [pc, #128]	@ (8014ef8 <tcp_connect+0x224>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	68fa      	ldr	r2, [r7, #12]
 8014e7c:	429a      	cmp	r2, r3
 8014e7e:	d105      	bne.n	8014e8c <tcp_connect+0x1b8>
 8014e80:	4b1d      	ldr	r3, [pc, #116]	@ (8014ef8 <tcp_connect+0x224>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	68db      	ldr	r3, [r3, #12]
 8014e86:	4a1c      	ldr	r2, [pc, #112]	@ (8014ef8 <tcp_connect+0x224>)
 8014e88:	6013      	str	r3, [r2, #0]
 8014e8a:	e013      	b.n	8014eb4 <tcp_connect+0x1e0>
 8014e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8014ef8 <tcp_connect+0x224>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	623b      	str	r3, [r7, #32]
 8014e92:	e00c      	b.n	8014eae <tcp_connect+0x1da>
 8014e94:	6a3b      	ldr	r3, [r7, #32]
 8014e96:	68db      	ldr	r3, [r3, #12]
 8014e98:	68fa      	ldr	r2, [r7, #12]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d104      	bne.n	8014ea8 <tcp_connect+0x1d4>
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	68da      	ldr	r2, [r3, #12]
 8014ea2:	6a3b      	ldr	r3, [r7, #32]
 8014ea4:	60da      	str	r2, [r3, #12]
 8014ea6:	e005      	b.n	8014eb4 <tcp_connect+0x1e0>
 8014ea8:	6a3b      	ldr	r3, [r7, #32]
 8014eaa:	68db      	ldr	r3, [r3, #12]
 8014eac:	623b      	str	r3, [r7, #32]
 8014eae:	6a3b      	ldr	r3, [r7, #32]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d1ef      	bne.n	8014e94 <tcp_connect+0x1c0>
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8014eba:	4b10      	ldr	r3, [pc, #64]	@ (8014efc <tcp_connect+0x228>)
 8014ebc:	681a      	ldr	r2, [r3, #0]
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	60da      	str	r2, [r3, #12]
 8014ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8014efc <tcp_connect+0x228>)
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	6013      	str	r3, [r2, #0]
 8014ec8:	f005 fb5e 	bl	801a588 <tcp_timer_needed>
 8014ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8014f00 <tcp_connect+0x22c>)
 8014ece:	2201      	movs	r2, #1
 8014ed0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8014ed2:	68f8      	ldr	r0, [r7, #12]
 8014ed4:	f004 fbd6 	bl	8019684 <tcp_output>
  }
  return ret;
 8014ed8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	3728      	adds	r7, #40	@ 0x28
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	0802181c 	.word	0x0802181c
 8014ee8:	08021af8 	.word	0x08021af8
 8014eec:	08021860 	.word	0x08021860
 8014ef0:	08021b14 	.word	0x08021b14
 8014ef4:	08021b30 	.word	0x08021b30
 8014ef8:	200227a0 	.word	0x200227a0
 8014efc:	200227a8 	.word	0x200227a8
 8014f00:	200227b0 	.word	0x200227b0

08014f04 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014f04:	b5b0      	push	{r4, r5, r7, lr}
 8014f06:	b090      	sub	sp, #64	@ 0x40
 8014f08:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8014f10:	4b95      	ldr	r3, [pc, #596]	@ (8015168 <tcp_slowtmr+0x264>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	3301      	adds	r3, #1
 8014f16:	4a94      	ldr	r2, [pc, #592]	@ (8015168 <tcp_slowtmr+0x264>)
 8014f18:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014f1a:	4b94      	ldr	r3, [pc, #592]	@ (801516c <tcp_slowtmr+0x268>)
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	b2da      	uxtb	r2, r3
 8014f22:	4b92      	ldr	r3, [pc, #584]	@ (801516c <tcp_slowtmr+0x268>)
 8014f24:	701a      	strb	r2, [r3, #0]
 8014f26:	e000      	b.n	8014f2a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8014f28:	bf00      	nop
  prev = NULL;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8014f2e:	4b90      	ldr	r3, [pc, #576]	@ (8015170 <tcp_slowtmr+0x26c>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014f34:	e29d      	b.n	8015472 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f38:	7d1b      	ldrb	r3, [r3, #20]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d106      	bne.n	8014f4c <tcp_slowtmr+0x48>
 8014f3e:	4b8d      	ldr	r3, [pc, #564]	@ (8015174 <tcp_slowtmr+0x270>)
 8014f40:	f240 42be 	movw	r2, #1214	@ 0x4be
 8014f44:	498c      	ldr	r1, [pc, #560]	@ (8015178 <tcp_slowtmr+0x274>)
 8014f46:	488d      	ldr	r0, [pc, #564]	@ (801517c <tcp_slowtmr+0x278>)
 8014f48:	f009 ff20 	bl	801ed8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8014f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f4e:	7d1b      	ldrb	r3, [r3, #20]
 8014f50:	2b01      	cmp	r3, #1
 8014f52:	d106      	bne.n	8014f62 <tcp_slowtmr+0x5e>
 8014f54:	4b87      	ldr	r3, [pc, #540]	@ (8015174 <tcp_slowtmr+0x270>)
 8014f56:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8014f5a:	4989      	ldr	r1, [pc, #548]	@ (8015180 <tcp_slowtmr+0x27c>)
 8014f5c:	4887      	ldr	r0, [pc, #540]	@ (801517c <tcp_slowtmr+0x278>)
 8014f5e:	f009 ff15 	bl	801ed8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f64:	7d1b      	ldrb	r3, [r3, #20]
 8014f66:	2b0a      	cmp	r3, #10
 8014f68:	d106      	bne.n	8014f78 <tcp_slowtmr+0x74>
 8014f6a:	4b82      	ldr	r3, [pc, #520]	@ (8015174 <tcp_slowtmr+0x270>)
 8014f6c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8014f70:	4984      	ldr	r1, [pc, #528]	@ (8015184 <tcp_slowtmr+0x280>)
 8014f72:	4882      	ldr	r0, [pc, #520]	@ (801517c <tcp_slowtmr+0x278>)
 8014f74:	f009 ff0a 	bl	801ed8c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f7a:	7f9a      	ldrb	r2, [r3, #30]
 8014f7c:	4b7b      	ldr	r3, [pc, #492]	@ (801516c <tcp_slowtmr+0x268>)
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	429a      	cmp	r2, r3
 8014f82:	d105      	bne.n	8014f90 <tcp_slowtmr+0x8c>
      prev = pcb;
 8014f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f86:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8014f8e:	e270      	b.n	8015472 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8014f90:	4b76      	ldr	r3, [pc, #472]	@ (801516c <tcp_slowtmr+0x268>)
 8014f92:	781a      	ldrb	r2, [r3, #0]
 8014f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f96:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fa6:	7d1b      	ldrb	r3, [r3, #20]
 8014fa8:	2b02      	cmp	r3, #2
 8014faa:	d10a      	bne.n	8014fc2 <tcp_slowtmr+0xbe>
 8014fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014fb2:	2b05      	cmp	r3, #5
 8014fb4:	d905      	bls.n	8014fc2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8014fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fba:	3301      	adds	r3, #1
 8014fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8014fc0:	e11e      	b.n	8015200 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014fc8:	2b0b      	cmp	r3, #11
 8014fca:	d905      	bls.n	8014fd8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8014fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014fd6:	e113      	b.n	8015200 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8014fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fda:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d075      	beq.n	80150ce <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d006      	beq.n	8014ff8 <tcp_slowtmr+0xf4>
 8014fea:	4b62      	ldr	r3, [pc, #392]	@ (8015174 <tcp_slowtmr+0x270>)
 8014fec:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8014ff0:	4965      	ldr	r1, [pc, #404]	@ (8015188 <tcp_slowtmr+0x284>)
 8014ff2:	4862      	ldr	r0, [pc, #392]	@ (801517c <tcp_slowtmr+0x278>)
 8014ff4:	f009 feca 	bl	801ed8c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d106      	bne.n	801500e <tcp_slowtmr+0x10a>
 8015000:	4b5c      	ldr	r3, [pc, #368]	@ (8015174 <tcp_slowtmr+0x270>)
 8015002:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015006:	4961      	ldr	r1, [pc, #388]	@ (801518c <tcp_slowtmr+0x288>)
 8015008:	485c      	ldr	r0, [pc, #368]	@ (801517c <tcp_slowtmr+0x278>)
 801500a:	f009 febf 	bl	801ed8c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801500e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015010:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015014:	2b0b      	cmp	r3, #11
 8015016:	d905      	bls.n	8015024 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801501c:	3301      	adds	r3, #1
 801501e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015022:	e0ed      	b.n	8015200 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015026:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801502a:	3b01      	subs	r3, #1
 801502c:	4a58      	ldr	r2, [pc, #352]	@ (8015190 <tcp_slowtmr+0x28c>)
 801502e:	5cd3      	ldrb	r3, [r2, r3]
 8015030:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015034:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015038:	7c7a      	ldrb	r2, [r7, #17]
 801503a:	429a      	cmp	r2, r3
 801503c:	d907      	bls.n	801504e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801503e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015040:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015044:	3301      	adds	r3, #1
 8015046:	b2da      	uxtb	r2, r3
 8015048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801504a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015050:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015054:	7c7a      	ldrb	r2, [r7, #17]
 8015056:	429a      	cmp	r2, r3
 8015058:	f200 80d2 	bhi.w	8015200 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801505c:	2301      	movs	r3, #1
 801505e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8015060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015062:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015066:	2b00      	cmp	r3, #0
 8015068:	d108      	bne.n	801507c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801506a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801506c:	f005 f9be 	bl	801a3ec <tcp_zero_window_probe>
 8015070:	4603      	mov	r3, r0
 8015072:	2b00      	cmp	r3, #0
 8015074:	d014      	beq.n	80150a0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015076:	2300      	movs	r3, #0
 8015078:	623b      	str	r3, [r7, #32]
 801507a:	e011      	b.n	80150a0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801507e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015082:	4619      	mov	r1, r3
 8015084:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015086:	f004 f873 	bl	8019170 <tcp_split_unsent_seg>
 801508a:	4603      	mov	r3, r0
 801508c:	2b00      	cmp	r3, #0
 801508e:	d107      	bne.n	80150a0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8015090:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015092:	f004 faf7 	bl	8019684 <tcp_output>
 8015096:	4603      	mov	r3, r0
 8015098:	2b00      	cmp	r3, #0
 801509a:	d101      	bne.n	80150a0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801509c:	2300      	movs	r3, #0
 801509e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80150a0:	6a3b      	ldr	r3, [r7, #32]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	f000 80ac 	beq.w	8015200 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80150a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150aa:	2200      	movs	r2, #0
 80150ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80150b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150b2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80150b6:	2b06      	cmp	r3, #6
 80150b8:	f200 80a2 	bhi.w	8015200 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80150bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150be:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80150c2:	3301      	adds	r3, #1
 80150c4:	b2da      	uxtb	r2, r3
 80150c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150c8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80150cc:	e098      	b.n	8015200 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80150ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	db0f      	blt.n	80150f8 <tcp_slowtmr+0x1f4>
 80150d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80150de:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80150e2:	4293      	cmp	r3, r2
 80150e4:	d008      	beq.n	80150f8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80150e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	3301      	adds	r3, #1
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	b21a      	sxth	r2, r3
 80150f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150f6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80150f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150fa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80150fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015100:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015104:	429a      	cmp	r2, r3
 8015106:	db7b      	blt.n	8015200 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015108:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801510a:	f004 fdb1 	bl	8019c70 <tcp_rexmit_rto_prepare>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d007      	beq.n	8015124 <tcp_slowtmr+0x220>
 8015114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015118:	2b00      	cmp	r3, #0
 801511a:	d171      	bne.n	8015200 <tcp_slowtmr+0x2fc>
 801511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801511e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015120:	2b00      	cmp	r3, #0
 8015122:	d06d      	beq.n	8015200 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015126:	7d1b      	ldrb	r3, [r3, #20]
 8015128:	2b02      	cmp	r3, #2
 801512a:	d03a      	beq.n	80151a2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801512e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015132:	2b0c      	cmp	r3, #12
 8015134:	bf28      	it	cs
 8015136:	230c      	movcs	r3, #12
 8015138:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801513a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801513c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015140:	10db      	asrs	r3, r3, #3
 8015142:	b21b      	sxth	r3, r3
 8015144:	461a      	mov	r2, r3
 8015146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015148:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801514c:	4413      	add	r3, r2
 801514e:	7efa      	ldrb	r2, [r7, #27]
 8015150:	4910      	ldr	r1, [pc, #64]	@ (8015194 <tcp_slowtmr+0x290>)
 8015152:	5c8a      	ldrb	r2, [r1, r2]
 8015154:	4093      	lsls	r3, r2
 8015156:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801515e:	4293      	cmp	r3, r2
 8015160:	dc1a      	bgt.n	8015198 <tcp_slowtmr+0x294>
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	b21a      	sxth	r2, r3
 8015166:	e019      	b.n	801519c <tcp_slowtmr+0x298>
 8015168:	2002279c 	.word	0x2002279c
 801516c:	200227b2 	.word	0x200227b2
 8015170:	200227a8 	.word	0x200227a8
 8015174:	0802181c 	.word	0x0802181c
 8015178:	08021b60 	.word	0x08021b60
 801517c:	08021860 	.word	0x08021860
 8015180:	08021b8c 	.word	0x08021b8c
 8015184:	08021bb8 	.word	0x08021bb8
 8015188:	08021be8 	.word	0x08021be8
 801518c:	08021c1c 	.word	0x08021c1c
 8015190:	08024304 	.word	0x08024304
 8015194:	080242f4 	.word	0x080242f4
 8015198:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801519e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80151a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a4:	2200      	movs	r2, #0
 80151a6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80151a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80151ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80151b4:	4293      	cmp	r3, r2
 80151b6:	bf28      	it	cs
 80151b8:	4613      	movcs	r3, r2
 80151ba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80151bc:	8a7b      	ldrh	r3, [r7, #18]
 80151be:	085b      	lsrs	r3, r3, #1
 80151c0:	b29a      	uxth	r2, r3
 80151c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80151c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80151ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151d2:	005b      	lsls	r3, r3, #1
 80151d4:	b29b      	uxth	r3, r3
 80151d6:	429a      	cmp	r2, r3
 80151d8:	d206      	bcs.n	80151e8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80151da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151de:	005b      	lsls	r3, r3, #1
 80151e0:	b29a      	uxth	r2, r3
 80151e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80151e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ea:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80151ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80151f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151f4:	2200      	movs	r2, #0
 80151f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80151fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80151fc:	f004 fdb2 	bl	8019d64 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8015200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015202:	7d1b      	ldrb	r3, [r3, #20]
 8015204:	2b06      	cmp	r3, #6
 8015206:	d111      	bne.n	801522c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801520a:	8b5b      	ldrh	r3, [r3, #26]
 801520c:	f003 0310 	and.w	r3, r3, #16
 8015210:	2b00      	cmp	r3, #0
 8015212:	d00b      	beq.n	801522c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015214:	4b9c      	ldr	r3, [pc, #624]	@ (8015488 <tcp_slowtmr+0x584>)
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801521a:	6a1b      	ldr	r3, [r3, #32]
 801521c:	1ad3      	subs	r3, r2, r3
 801521e:	2b28      	cmp	r3, #40	@ 0x28
 8015220:	d904      	bls.n	801522c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8015222:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015226:	3301      	adds	r3, #1
 8015228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801522c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801522e:	7a5b      	ldrb	r3, [r3, #9]
 8015230:	f003 0308 	and.w	r3, r3, #8
 8015234:	2b00      	cmp	r3, #0
 8015236:	d04a      	beq.n	80152ce <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801523a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801523c:	2b04      	cmp	r3, #4
 801523e:	d003      	beq.n	8015248 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8015240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015242:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015244:	2b07      	cmp	r3, #7
 8015246:	d142      	bne.n	80152ce <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015248:	4b8f      	ldr	r3, [pc, #572]	@ (8015488 <tcp_slowtmr+0x584>)
 801524a:	681a      	ldr	r2, [r3, #0]
 801524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801524e:	6a1b      	ldr	r3, [r3, #32]
 8015250:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015254:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015258:	4b8c      	ldr	r3, [pc, #560]	@ (801548c <tcp_slowtmr+0x588>)
 801525a:	440b      	add	r3, r1
 801525c:	498c      	ldr	r1, [pc, #560]	@ (8015490 <tcp_slowtmr+0x58c>)
 801525e:	fba1 1303 	umull	r1, r3, r1, r3
 8015262:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015264:	429a      	cmp	r2, r3
 8015266:	d90a      	bls.n	801527e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8015268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801526c:	3301      	adds	r3, #1
 801526e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8015272:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015276:	3301      	adds	r3, #1
 8015278:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801527c:	e027      	b.n	80152ce <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801527e:	4b82      	ldr	r3, [pc, #520]	@ (8015488 <tcp_slowtmr+0x584>)
 8015280:	681a      	ldr	r2, [r3, #0]
 8015282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015284:	6a1b      	ldr	r3, [r3, #32]
 8015286:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801528a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015290:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015294:	4618      	mov	r0, r3
 8015296:	4b7f      	ldr	r3, [pc, #508]	@ (8015494 <tcp_slowtmr+0x590>)
 8015298:	fb00 f303 	mul.w	r3, r0, r3
 801529c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801529e:	497c      	ldr	r1, [pc, #496]	@ (8015490 <tcp_slowtmr+0x58c>)
 80152a0:	fba1 1303 	umull	r1, r3, r1, r3
 80152a4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d911      	bls.n	80152ce <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80152aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152ac:	f005 f85e 	bl	801a36c <tcp_keepalive>
 80152b0:	4603      	mov	r3, r0
 80152b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80152b6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d107      	bne.n	80152ce <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80152be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80152c4:	3301      	adds	r3, #1
 80152c6:	b2da      	uxtb	r2, r3
 80152c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ca:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80152ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d011      	beq.n	80152fa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80152d6:	4b6c      	ldr	r3, [pc, #432]	@ (8015488 <tcp_slowtmr+0x584>)
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152dc:	6a1b      	ldr	r3, [r3, #32]
 80152de:	1ad2      	subs	r2, r2, r3
 80152e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152e2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80152e6:	4619      	mov	r1, r3
 80152e8:	460b      	mov	r3, r1
 80152ea:	005b      	lsls	r3, r3, #1
 80152ec:	440b      	add	r3, r1
 80152ee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d302      	bcc.n	80152fa <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80152f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152f6:	f000 feb1 	bl	801605c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80152fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152fc:	7d1b      	ldrb	r3, [r3, #20]
 80152fe:	2b03      	cmp	r3, #3
 8015300:	d10b      	bne.n	801531a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015302:	4b61      	ldr	r3, [pc, #388]	@ (8015488 <tcp_slowtmr+0x584>)
 8015304:	681a      	ldr	r2, [r3, #0]
 8015306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015308:	6a1b      	ldr	r3, [r3, #32]
 801530a:	1ad3      	subs	r3, r2, r3
 801530c:	2b28      	cmp	r3, #40	@ 0x28
 801530e:	d904      	bls.n	801531a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8015310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015314:	3301      	adds	r3, #1
 8015316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801531c:	7d1b      	ldrb	r3, [r3, #20]
 801531e:	2b09      	cmp	r3, #9
 8015320:	d10b      	bne.n	801533a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015322:	4b59      	ldr	r3, [pc, #356]	@ (8015488 <tcp_slowtmr+0x584>)
 8015324:	681a      	ldr	r2, [r3, #0]
 8015326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015328:	6a1b      	ldr	r3, [r3, #32]
 801532a:	1ad3      	subs	r3, r2, r3
 801532c:	2bf0      	cmp	r3, #240	@ 0xf0
 801532e:	d904      	bls.n	801533a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8015330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015334:	3301      	adds	r3, #1
 8015336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801533a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801533e:	2b00      	cmp	r3, #0
 8015340:	d060      	beq.n	8015404 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8015342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015348:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801534a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801534c:	f000 fccc 	bl	8015ce8 <tcp_pcb_purge>
      if (prev != NULL) {
 8015350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015352:	2b00      	cmp	r3, #0
 8015354:	d010      	beq.n	8015378 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015356:	4b50      	ldr	r3, [pc, #320]	@ (8015498 <tcp_slowtmr+0x594>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801535c:	429a      	cmp	r2, r3
 801535e:	d106      	bne.n	801536e <tcp_slowtmr+0x46a>
 8015360:	4b4e      	ldr	r3, [pc, #312]	@ (801549c <tcp_slowtmr+0x598>)
 8015362:	f240 526d 	movw	r2, #1389	@ 0x56d
 8015366:	494e      	ldr	r1, [pc, #312]	@ (80154a0 <tcp_slowtmr+0x59c>)
 8015368:	484e      	ldr	r0, [pc, #312]	@ (80154a4 <tcp_slowtmr+0x5a0>)
 801536a:	f009 fd0f 	bl	801ed8c <iprintf>
        prev->next = pcb->next;
 801536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015370:	68da      	ldr	r2, [r3, #12]
 8015372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015374:	60da      	str	r2, [r3, #12]
 8015376:	e00f      	b.n	8015398 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015378:	4b47      	ldr	r3, [pc, #284]	@ (8015498 <tcp_slowtmr+0x594>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801537e:	429a      	cmp	r2, r3
 8015380:	d006      	beq.n	8015390 <tcp_slowtmr+0x48c>
 8015382:	4b46      	ldr	r3, [pc, #280]	@ (801549c <tcp_slowtmr+0x598>)
 8015384:	f240 5271 	movw	r2, #1393	@ 0x571
 8015388:	4947      	ldr	r1, [pc, #284]	@ (80154a8 <tcp_slowtmr+0x5a4>)
 801538a:	4846      	ldr	r0, [pc, #280]	@ (80154a4 <tcp_slowtmr+0x5a0>)
 801538c:	f009 fcfe 	bl	801ed8c <iprintf>
        tcp_active_pcbs = pcb->next;
 8015390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015392:	68db      	ldr	r3, [r3, #12]
 8015394:	4a40      	ldr	r2, [pc, #256]	@ (8015498 <tcp_slowtmr+0x594>)
 8015396:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015398:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801539c:	2b00      	cmp	r3, #0
 801539e:	d013      	beq.n	80153c8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80153a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153a2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80153a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153a6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80153a8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80153aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ac:	3304      	adds	r3, #4
 80153ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80153b0:	8ad2      	ldrh	r2, [r2, #22]
 80153b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80153b4:	8b09      	ldrh	r1, [r1, #24]
 80153b6:	9102      	str	r1, [sp, #8]
 80153b8:	9201      	str	r2, [sp, #4]
 80153ba:	9300      	str	r3, [sp, #0]
 80153bc:	462b      	mov	r3, r5
 80153be:	4622      	mov	r2, r4
 80153c0:	4601      	mov	r1, r0
 80153c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80153c4:	f004 ff1e 	bl	801a204 <tcp_rst>
      err_arg = pcb->callback_arg;
 80153c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ca:	691b      	ldr	r3, [r3, #16]
 80153cc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80153ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153d0:	7d1b      	ldrb	r3, [r3, #20]
 80153d2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80153d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153d6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80153d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153da:	68db      	ldr	r3, [r3, #12]
 80153dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80153de:	6838      	ldr	r0, [r7, #0]
 80153e0:	f7fe ffa0 	bl	8014324 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80153e4:	4b31      	ldr	r3, [pc, #196]	@ (80154ac <tcp_slowtmr+0x5a8>)
 80153e6:	2200      	movs	r2, #0
 80153e8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d004      	beq.n	80153fa <tcp_slowtmr+0x4f6>
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	f06f 010c 	mvn.w	r1, #12
 80153f6:	68b8      	ldr	r0, [r7, #8]
 80153f8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80153fa:	4b2c      	ldr	r3, [pc, #176]	@ (80154ac <tcp_slowtmr+0x5a8>)
 80153fc:	781b      	ldrb	r3, [r3, #0]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d037      	beq.n	8015472 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8015402:	e592      	b.n	8014f2a <tcp_slowtmr+0x26>
      prev = pcb;
 8015404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015406:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801540a:	68db      	ldr	r3, [r3, #12]
 801540c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015410:	7f1b      	ldrb	r3, [r3, #28]
 8015412:	3301      	adds	r3, #1
 8015414:	b2da      	uxtb	r2, r3
 8015416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015418:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801541c:	7f1a      	ldrb	r2, [r3, #28]
 801541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015420:	7f5b      	ldrb	r3, [r3, #29]
 8015422:	429a      	cmp	r2, r3
 8015424:	d325      	bcc.n	8015472 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015428:	2200      	movs	r2, #0
 801542a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801542c:	4b1f      	ldr	r3, [pc, #124]	@ (80154ac <tcp_slowtmr+0x5a8>)
 801542e:	2200      	movs	r2, #0
 8015430:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015438:	2b00      	cmp	r3, #0
 801543a:	d00b      	beq.n	8015454 <tcp_slowtmr+0x550>
 801543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801543e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015444:	6912      	ldr	r2, [r2, #16]
 8015446:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015448:	4610      	mov	r0, r2
 801544a:	4798      	blx	r3
 801544c:	4603      	mov	r3, r0
 801544e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015452:	e002      	b.n	801545a <tcp_slowtmr+0x556>
 8015454:	2300      	movs	r3, #0
 8015456:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801545a:	4b14      	ldr	r3, [pc, #80]	@ (80154ac <tcp_slowtmr+0x5a8>)
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	2b00      	cmp	r3, #0
 8015460:	f47f ad62 	bne.w	8014f28 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015464:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015468:	2b00      	cmp	r3, #0
 801546a:	d102      	bne.n	8015472 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801546c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801546e:	f004 f909 	bl	8019684 <tcp_output>
  while (pcb != NULL) {
 8015472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015474:	2b00      	cmp	r3, #0
 8015476:	f47f ad5e 	bne.w	8014f36 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801547a:	2300      	movs	r3, #0
 801547c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801547e:	4b0c      	ldr	r3, [pc, #48]	@ (80154b0 <tcp_slowtmr+0x5ac>)
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015484:	e069      	b.n	801555a <tcp_slowtmr+0x656>
 8015486:	bf00      	nop
 8015488:	2002279c 	.word	0x2002279c
 801548c:	000a4cb8 	.word	0x000a4cb8
 8015490:	10624dd3 	.word	0x10624dd3
 8015494:	000124f8 	.word	0x000124f8
 8015498:	200227a8 	.word	0x200227a8
 801549c:	0802181c 	.word	0x0802181c
 80154a0:	08021c54 	.word	0x08021c54
 80154a4:	08021860 	.word	0x08021860
 80154a8:	08021c80 	.word	0x08021c80
 80154ac:	200227b0 	.word	0x200227b0
 80154b0:	200227ac 	.word	0x200227ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80154b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154b6:	7d1b      	ldrb	r3, [r3, #20]
 80154b8:	2b0a      	cmp	r3, #10
 80154ba:	d006      	beq.n	80154ca <tcp_slowtmr+0x5c6>
 80154bc:	4b2b      	ldr	r3, [pc, #172]	@ (801556c <tcp_slowtmr+0x668>)
 80154be:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80154c2:	492b      	ldr	r1, [pc, #172]	@ (8015570 <tcp_slowtmr+0x66c>)
 80154c4:	482b      	ldr	r0, [pc, #172]	@ (8015574 <tcp_slowtmr+0x670>)
 80154c6:	f009 fc61 	bl	801ed8c <iprintf>
    pcb_remove = 0;
 80154ca:	2300      	movs	r3, #0
 80154cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80154d0:	4b29      	ldr	r3, [pc, #164]	@ (8015578 <tcp_slowtmr+0x674>)
 80154d2:	681a      	ldr	r2, [r3, #0]
 80154d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154d6:	6a1b      	ldr	r3, [r3, #32]
 80154d8:	1ad3      	subs	r3, r2, r3
 80154da:	2bf0      	cmp	r3, #240	@ 0xf0
 80154dc:	d904      	bls.n	80154e8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80154de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80154e2:	3301      	adds	r3, #1
 80154e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80154e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d02f      	beq.n	8015550 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80154f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80154f2:	f000 fbf9 	bl	8015ce8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80154f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d010      	beq.n	801551e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80154fc:	4b1f      	ldr	r3, [pc, #124]	@ (801557c <tcp_slowtmr+0x678>)
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015502:	429a      	cmp	r2, r3
 8015504:	d106      	bne.n	8015514 <tcp_slowtmr+0x610>
 8015506:	4b19      	ldr	r3, [pc, #100]	@ (801556c <tcp_slowtmr+0x668>)
 8015508:	f240 52af 	movw	r2, #1455	@ 0x5af
 801550c:	491c      	ldr	r1, [pc, #112]	@ (8015580 <tcp_slowtmr+0x67c>)
 801550e:	4819      	ldr	r0, [pc, #100]	@ (8015574 <tcp_slowtmr+0x670>)
 8015510:	f009 fc3c 	bl	801ed8c <iprintf>
        prev->next = pcb->next;
 8015514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015516:	68da      	ldr	r2, [r3, #12]
 8015518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801551a:	60da      	str	r2, [r3, #12]
 801551c:	e00f      	b.n	801553e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801551e:	4b17      	ldr	r3, [pc, #92]	@ (801557c <tcp_slowtmr+0x678>)
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015524:	429a      	cmp	r2, r3
 8015526:	d006      	beq.n	8015536 <tcp_slowtmr+0x632>
 8015528:	4b10      	ldr	r3, [pc, #64]	@ (801556c <tcp_slowtmr+0x668>)
 801552a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801552e:	4915      	ldr	r1, [pc, #84]	@ (8015584 <tcp_slowtmr+0x680>)
 8015530:	4810      	ldr	r0, [pc, #64]	@ (8015574 <tcp_slowtmr+0x670>)
 8015532:	f009 fc2b 	bl	801ed8c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015538:	68db      	ldr	r3, [r3, #12]
 801553a:	4a10      	ldr	r2, [pc, #64]	@ (801557c <tcp_slowtmr+0x678>)
 801553c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801553e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015540:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015544:	68db      	ldr	r3, [r3, #12]
 8015546:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015548:	69f8      	ldr	r0, [r7, #28]
 801554a:	f7fe feeb 	bl	8014324 <tcp_free>
 801554e:	e004      	b.n	801555a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8015550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015552:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015556:	68db      	ldr	r3, [r3, #12]
 8015558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801555c:	2b00      	cmp	r3, #0
 801555e:	d1a9      	bne.n	80154b4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8015560:	bf00      	nop
 8015562:	bf00      	nop
 8015564:	3730      	adds	r7, #48	@ 0x30
 8015566:	46bd      	mov	sp, r7
 8015568:	bdb0      	pop	{r4, r5, r7, pc}
 801556a:	bf00      	nop
 801556c:	0802181c 	.word	0x0802181c
 8015570:	08021cac 	.word	0x08021cac
 8015574:	08021860 	.word	0x08021860
 8015578:	2002279c 	.word	0x2002279c
 801557c:	200227ac 	.word	0x200227ac
 8015580:	08021cdc 	.word	0x08021cdc
 8015584:	08021d04 	.word	0x08021d04

08015588 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b082      	sub	sp, #8
 801558c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801558e:	4b2d      	ldr	r3, [pc, #180]	@ (8015644 <tcp_fasttmr+0xbc>)
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	3301      	adds	r3, #1
 8015594:	b2da      	uxtb	r2, r3
 8015596:	4b2b      	ldr	r3, [pc, #172]	@ (8015644 <tcp_fasttmr+0xbc>)
 8015598:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801559a:	4b2b      	ldr	r3, [pc, #172]	@ (8015648 <tcp_fasttmr+0xc0>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80155a0:	e048      	b.n	8015634 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	7f9a      	ldrb	r2, [r3, #30]
 80155a6:	4b27      	ldr	r3, [pc, #156]	@ (8015644 <tcp_fasttmr+0xbc>)
 80155a8:	781b      	ldrb	r3, [r3, #0]
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d03f      	beq.n	801562e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80155ae:	4b25      	ldr	r3, [pc, #148]	@ (8015644 <tcp_fasttmr+0xbc>)
 80155b0:	781a      	ldrb	r2, [r3, #0]
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	8b5b      	ldrh	r3, [r3, #26]
 80155ba:	f003 0301 	and.w	r3, r3, #1
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d010      	beq.n	80155e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	8b5b      	ldrh	r3, [r3, #26]
 80155c6:	f043 0302 	orr.w	r3, r3, #2
 80155ca:	b29a      	uxth	r2, r3
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80155d0:	6878      	ldr	r0, [r7, #4]
 80155d2:	f004 f857 	bl	8019684 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	8b5b      	ldrh	r3, [r3, #26]
 80155da:	f023 0303 	bic.w	r3, r3, #3
 80155de:	b29a      	uxth	r2, r3
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	8b5b      	ldrh	r3, [r3, #26]
 80155e8:	f003 0308 	and.w	r3, r3, #8
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d009      	beq.n	8015604 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	8b5b      	ldrh	r3, [r3, #26]
 80155f4:	f023 0308 	bic.w	r3, r3, #8
 80155f8:	b29a      	uxth	r2, r3
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f7ff f824 	bl	801464c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	68db      	ldr	r3, [r3, #12]
 8015608:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801560e:	2b00      	cmp	r3, #0
 8015610:	d00a      	beq.n	8015628 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015612:	4b0e      	ldr	r3, [pc, #56]	@ (801564c <tcp_fasttmr+0xc4>)
 8015614:	2200      	movs	r2, #0
 8015616:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f000 f819 	bl	8015650 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801561e:	4b0b      	ldr	r3, [pc, #44]	@ (801564c <tcp_fasttmr+0xc4>)
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d000      	beq.n	8015628 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015626:	e7b8      	b.n	801559a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	607b      	str	r3, [r7, #4]
 801562c:	e002      	b.n	8015634 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	68db      	ldr	r3, [r3, #12]
 8015632:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d1b3      	bne.n	80155a2 <tcp_fasttmr+0x1a>
    }
  }
}
 801563a:	bf00      	nop
 801563c:	bf00      	nop
 801563e:	3708      	adds	r7, #8
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}
 8015644:	200227b2 	.word	0x200227b2
 8015648:	200227a8 	.word	0x200227a8
 801564c:	200227b0 	.word	0x200227b0

08015650 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015650:	b590      	push	{r4, r7, lr}
 8015652:	b085      	sub	sp, #20
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d109      	bne.n	8015672 <tcp_process_refused_data+0x22>
 801565e:	4b37      	ldr	r3, [pc, #220]	@ (801573c <tcp_process_refused_data+0xec>)
 8015660:	f240 6209 	movw	r2, #1545	@ 0x609
 8015664:	4936      	ldr	r1, [pc, #216]	@ (8015740 <tcp_process_refused_data+0xf0>)
 8015666:	4837      	ldr	r0, [pc, #220]	@ (8015744 <tcp_process_refused_data+0xf4>)
 8015668:	f009 fb90 	bl	801ed8c <iprintf>
 801566c:	f06f 030f 	mvn.w	r3, #15
 8015670:	e060      	b.n	8015734 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015676:	7b5b      	ldrb	r3, [r3, #13]
 8015678:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801567e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2200      	movs	r2, #0
 8015684:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801568c:	2b00      	cmp	r3, #0
 801568e:	d00b      	beq.n	80156a8 <tcp_process_refused_data+0x58>
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	6918      	ldr	r0, [r3, #16]
 801569a:	2300      	movs	r3, #0
 801569c:	68ba      	ldr	r2, [r7, #8]
 801569e:	6879      	ldr	r1, [r7, #4]
 80156a0:	47a0      	blx	r4
 80156a2:	4603      	mov	r3, r0
 80156a4:	73fb      	strb	r3, [r7, #15]
 80156a6:	e007      	b.n	80156b8 <tcp_process_refused_data+0x68>
 80156a8:	2300      	movs	r3, #0
 80156aa:	68ba      	ldr	r2, [r7, #8]
 80156ac:	6879      	ldr	r1, [r7, #4]
 80156ae:	2000      	movs	r0, #0
 80156b0:	f000 f8a4 	bl	80157fc <tcp_recv_null>
 80156b4:	4603      	mov	r3, r0
 80156b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80156b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d12a      	bne.n	8015716 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80156c0:	7bbb      	ldrb	r3, [r7, #14]
 80156c2:	f003 0320 	and.w	r3, r3, #32
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d033      	beq.n	8015732 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156ce:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80156d2:	d005      	beq.n	80156e0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156d8:	3301      	adds	r3, #1
 80156da:	b29a      	uxth	r2, r3
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d00b      	beq.n	8015702 <tcp_process_refused_data+0xb2>
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	6918      	ldr	r0, [r3, #16]
 80156f4:	2300      	movs	r3, #0
 80156f6:	2200      	movs	r2, #0
 80156f8:	6879      	ldr	r1, [r7, #4]
 80156fa:	47a0      	blx	r4
 80156fc:	4603      	mov	r3, r0
 80156fe:	73fb      	strb	r3, [r7, #15]
 8015700:	e001      	b.n	8015706 <tcp_process_refused_data+0xb6>
 8015702:	2300      	movs	r3, #0
 8015704:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801570a:	f113 0f0d 	cmn.w	r3, #13
 801570e:	d110      	bne.n	8015732 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015710:	f06f 030c 	mvn.w	r3, #12
 8015714:	e00e      	b.n	8015734 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801571a:	f113 0f0d 	cmn.w	r3, #13
 801571e:	d102      	bne.n	8015726 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015720:	f06f 030c 	mvn.w	r3, #12
 8015724:	e006      	b.n	8015734 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	68ba      	ldr	r2, [r7, #8]
 801572a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801572c:	f06f 0304 	mvn.w	r3, #4
 8015730:	e000      	b.n	8015734 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015732:	2300      	movs	r3, #0
}
 8015734:	4618      	mov	r0, r3
 8015736:	3714      	adds	r7, #20
 8015738:	46bd      	mov	sp, r7
 801573a:	bd90      	pop	{r4, r7, pc}
 801573c:	0802181c 	.word	0x0802181c
 8015740:	08021d2c 	.word	0x08021d2c
 8015744:	08021860 	.word	0x08021860

08015748 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b084      	sub	sp, #16
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015750:	e007      	b.n	8015762 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	f000 f80a 	bl	8015772 <tcp_seg_free>
    seg = next;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d1f4      	bne.n	8015752 <tcp_segs_free+0xa>
  }
}
 8015768:	bf00      	nop
 801576a:	bf00      	nop
 801576c:	3710      	adds	r7, #16
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}

08015772 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015772:	b580      	push	{r7, lr}
 8015774:	b082      	sub	sp, #8
 8015776:	af00      	add	r7, sp, #0
 8015778:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d00c      	beq.n	801579a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	685b      	ldr	r3, [r3, #4]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d004      	beq.n	8015792 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	685b      	ldr	r3, [r3, #4]
 801578c:	4618      	mov	r0, r3
 801578e:	f7fe fb0d 	bl	8013dac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015792:	6879      	ldr	r1, [r7, #4]
 8015794:	2003      	movs	r0, #3
 8015796:	f7fd fb6f 	bl	8012e78 <memp_free>
  }
}
 801579a:	bf00      	nop
 801579c:	3708      	adds	r7, #8
 801579e:	46bd      	mov	sp, r7
 80157a0:	bd80      	pop	{r7, pc}
	...

080157a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b084      	sub	sp, #16
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d106      	bne.n	80157c0 <tcp_seg_copy+0x1c>
 80157b2:	4b0f      	ldr	r3, [pc, #60]	@ (80157f0 <tcp_seg_copy+0x4c>)
 80157b4:	f240 6282 	movw	r2, #1666	@ 0x682
 80157b8:	490e      	ldr	r1, [pc, #56]	@ (80157f4 <tcp_seg_copy+0x50>)
 80157ba:	480f      	ldr	r0, [pc, #60]	@ (80157f8 <tcp_seg_copy+0x54>)
 80157bc:	f009 fae6 	bl	801ed8c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80157c0:	2003      	movs	r0, #3
 80157c2:	f7fd fae3 	bl	8012d8c <memp_malloc>
 80157c6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d101      	bne.n	80157d2 <tcp_seg_copy+0x2e>
    return NULL;
 80157ce:	2300      	movs	r3, #0
 80157d0:	e00a      	b.n	80157e8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80157d2:	2214      	movs	r2, #20
 80157d4:	6879      	ldr	r1, [r7, #4]
 80157d6:	68f8      	ldr	r0, [r7, #12]
 80157d8:	f009 fcad 	bl	801f136 <memcpy>
  pbuf_ref(cseg->p);
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	685b      	ldr	r3, [r3, #4]
 80157e0:	4618      	mov	r0, r3
 80157e2:	f7fe fb89 	bl	8013ef8 <pbuf_ref>
  return cseg;
 80157e6:	68fb      	ldr	r3, [r7, #12]
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3710      	adds	r7, #16
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	0802181c 	.word	0x0802181c
 80157f4:	08021d70 	.word	0x08021d70
 80157f8:	08021860 	.word	0x08021860

080157fc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	60f8      	str	r0, [r7, #12]
 8015804:	60b9      	str	r1, [r7, #8]
 8015806:	607a      	str	r2, [r7, #4]
 8015808:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d109      	bne.n	8015824 <tcp_recv_null+0x28>
 8015810:	4b12      	ldr	r3, [pc, #72]	@ (801585c <tcp_recv_null+0x60>)
 8015812:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015816:	4912      	ldr	r1, [pc, #72]	@ (8015860 <tcp_recv_null+0x64>)
 8015818:	4812      	ldr	r0, [pc, #72]	@ (8015864 <tcp_recv_null+0x68>)
 801581a:	f009 fab7 	bl	801ed8c <iprintf>
 801581e:	f06f 030f 	mvn.w	r3, #15
 8015822:	e016      	b.n	8015852 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d009      	beq.n	801583e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	891b      	ldrh	r3, [r3, #8]
 801582e:	4619      	mov	r1, r3
 8015830:	68b8      	ldr	r0, [r7, #8]
 8015832:	f7ff f9b9 	bl	8014ba8 <tcp_recved>
    pbuf_free(p);
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f7fe fab8 	bl	8013dac <pbuf_free>
 801583c:	e008      	b.n	8015850 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801583e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d104      	bne.n	8015850 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015846:	68b8      	ldr	r0, [r7, #8]
 8015848:	f7fe ff6a 	bl	8014720 <tcp_close>
 801584c:	4603      	mov	r3, r0
 801584e:	e000      	b.n	8015852 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015850:	2300      	movs	r3, #0
}
 8015852:	4618      	mov	r0, r3
 8015854:	3710      	adds	r7, #16
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}
 801585a:	bf00      	nop
 801585c:	0802181c 	.word	0x0802181c
 8015860:	08021d8c 	.word	0x08021d8c
 8015864:	08021860 	.word	0x08021860

08015868 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b086      	sub	sp, #24
 801586c:	af00      	add	r7, sp, #0
 801586e:	4603      	mov	r3, r0
 8015870:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015876:	2b00      	cmp	r3, #0
 8015878:	db01      	blt.n	801587e <tcp_kill_prio+0x16>
 801587a:	79fb      	ldrb	r3, [r7, #7]
 801587c:	e000      	b.n	8015880 <tcp_kill_prio+0x18>
 801587e:	237f      	movs	r3, #127	@ 0x7f
 8015880:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015882:	7afb      	ldrb	r3, [r7, #11]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d034      	beq.n	80158f2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015888:	7afb      	ldrb	r3, [r7, #11]
 801588a:	3b01      	subs	r3, #1
 801588c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801588e:	2300      	movs	r3, #0
 8015890:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015892:	2300      	movs	r3, #0
 8015894:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015896:	4b19      	ldr	r3, [pc, #100]	@ (80158fc <tcp_kill_prio+0x94>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	617b      	str	r3, [r7, #20]
 801589c:	e01f      	b.n	80158de <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	7d5b      	ldrb	r3, [r3, #21]
 80158a2:	7afa      	ldrb	r2, [r7, #11]
 80158a4:	429a      	cmp	r2, r3
 80158a6:	d80c      	bhi.n	80158c2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80158ac:	7afa      	ldrb	r2, [r7, #11]
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d112      	bne.n	80158d8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80158b2:	4b13      	ldr	r3, [pc, #76]	@ (8015900 <tcp_kill_prio+0x98>)
 80158b4:	681a      	ldr	r2, [r3, #0]
 80158b6:	697b      	ldr	r3, [r7, #20]
 80158b8:	6a1b      	ldr	r3, [r3, #32]
 80158ba:	1ad3      	subs	r3, r2, r3
 80158bc:	68fa      	ldr	r2, [r7, #12]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d80a      	bhi.n	80158d8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80158c2:	4b0f      	ldr	r3, [pc, #60]	@ (8015900 <tcp_kill_prio+0x98>)
 80158c4:	681a      	ldr	r2, [r3, #0]
 80158c6:	697b      	ldr	r3, [r7, #20]
 80158c8:	6a1b      	ldr	r3, [r3, #32]
 80158ca:	1ad3      	subs	r3, r2, r3
 80158cc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	7d5b      	ldrb	r3, [r3, #21]
 80158d6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80158d8:	697b      	ldr	r3, [r7, #20]
 80158da:	68db      	ldr	r3, [r3, #12]
 80158dc:	617b      	str	r3, [r7, #20]
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d1dc      	bne.n	801589e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80158e4:	693b      	ldr	r3, [r7, #16]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d004      	beq.n	80158f4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80158ea:	6938      	ldr	r0, [r7, #16]
 80158ec:	f7ff f85e 	bl	80149ac <tcp_abort>
 80158f0:	e000      	b.n	80158f4 <tcp_kill_prio+0x8c>
    return;
 80158f2:	bf00      	nop
  }
}
 80158f4:	3718      	adds	r7, #24
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
 80158fa:	bf00      	nop
 80158fc:	200227a8 	.word	0x200227a8
 8015900:	2002279c 	.word	0x2002279c

08015904 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b086      	sub	sp, #24
 8015908:	af00      	add	r7, sp, #0
 801590a:	4603      	mov	r3, r0
 801590c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801590e:	79fb      	ldrb	r3, [r7, #7]
 8015910:	2b08      	cmp	r3, #8
 8015912:	d009      	beq.n	8015928 <tcp_kill_state+0x24>
 8015914:	79fb      	ldrb	r3, [r7, #7]
 8015916:	2b09      	cmp	r3, #9
 8015918:	d006      	beq.n	8015928 <tcp_kill_state+0x24>
 801591a:	4b1a      	ldr	r3, [pc, #104]	@ (8015984 <tcp_kill_state+0x80>)
 801591c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8015920:	4919      	ldr	r1, [pc, #100]	@ (8015988 <tcp_kill_state+0x84>)
 8015922:	481a      	ldr	r0, [pc, #104]	@ (801598c <tcp_kill_state+0x88>)
 8015924:	f009 fa32 	bl	801ed8c <iprintf>

  inactivity = 0;
 8015928:	2300      	movs	r3, #0
 801592a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801592c:	2300      	movs	r3, #0
 801592e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015930:	4b17      	ldr	r3, [pc, #92]	@ (8015990 <tcp_kill_state+0x8c>)
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	617b      	str	r3, [r7, #20]
 8015936:	e017      	b.n	8015968 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	7d1b      	ldrb	r3, [r3, #20]
 801593c:	79fa      	ldrb	r2, [r7, #7]
 801593e:	429a      	cmp	r2, r3
 8015940:	d10f      	bne.n	8015962 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015942:	4b14      	ldr	r3, [pc, #80]	@ (8015994 <tcp_kill_state+0x90>)
 8015944:	681a      	ldr	r2, [r3, #0]
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	6a1b      	ldr	r3, [r3, #32]
 801594a:	1ad3      	subs	r3, r2, r3
 801594c:	68fa      	ldr	r2, [r7, #12]
 801594e:	429a      	cmp	r2, r3
 8015950:	d807      	bhi.n	8015962 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015952:	4b10      	ldr	r3, [pc, #64]	@ (8015994 <tcp_kill_state+0x90>)
 8015954:	681a      	ldr	r2, [r3, #0]
 8015956:	697b      	ldr	r3, [r7, #20]
 8015958:	6a1b      	ldr	r3, [r3, #32]
 801595a:	1ad3      	subs	r3, r2, r3
 801595c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	68db      	ldr	r3, [r3, #12]
 8015966:	617b      	str	r3, [r7, #20]
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d1e4      	bne.n	8015938 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d003      	beq.n	801597c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015974:	2100      	movs	r1, #0
 8015976:	6938      	ldr	r0, [r7, #16]
 8015978:	f7fe ff5a 	bl	8014830 <tcp_abandon>
  }
}
 801597c:	bf00      	nop
 801597e:	3718      	adds	r7, #24
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}
 8015984:	0802181c 	.word	0x0802181c
 8015988:	08021da8 	.word	0x08021da8
 801598c:	08021860 	.word	0x08021860
 8015990:	200227a8 	.word	0x200227a8
 8015994:	2002279c 	.word	0x2002279c

08015998 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b084      	sub	sp, #16
 801599c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801599e:	2300      	movs	r3, #0
 80159a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80159a2:	2300      	movs	r3, #0
 80159a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80159a6:	4b12      	ldr	r3, [pc, #72]	@ (80159f0 <tcp_kill_timewait+0x58>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	60fb      	str	r3, [r7, #12]
 80159ac:	e012      	b.n	80159d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80159ae:	4b11      	ldr	r3, [pc, #68]	@ (80159f4 <tcp_kill_timewait+0x5c>)
 80159b0:	681a      	ldr	r2, [r3, #0]
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	6a1b      	ldr	r3, [r3, #32]
 80159b6:	1ad3      	subs	r3, r2, r3
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d807      	bhi.n	80159ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80159be:	4b0d      	ldr	r3, [pc, #52]	@ (80159f4 <tcp_kill_timewait+0x5c>)
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	6a1b      	ldr	r3, [r3, #32]
 80159c6:	1ad3      	subs	r3, r2, r3
 80159c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	68db      	ldr	r3, [r3, #12]
 80159d2:	60fb      	str	r3, [r7, #12]
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d1e9      	bne.n	80159ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d002      	beq.n	80159e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80159e0:	68b8      	ldr	r0, [r7, #8]
 80159e2:	f7fe ffe3 	bl	80149ac <tcp_abort>
  }
}
 80159e6:	bf00      	nop
 80159e8:	3710      	adds	r7, #16
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}
 80159ee:	bf00      	nop
 80159f0:	200227ac 	.word	0x200227ac
 80159f4:	2002279c 	.word	0x2002279c

080159f8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80159fe:	4b10      	ldr	r3, [pc, #64]	@ (8015a40 <tcp_handle_closepend+0x48>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015a04:	e014      	b.n	8015a30 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	8b5b      	ldrh	r3, [r3, #26]
 8015a10:	f003 0308 	and.w	r3, r3, #8
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d009      	beq.n	8015a2c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	8b5b      	ldrh	r3, [r3, #26]
 8015a1c:	f023 0308 	bic.w	r3, r3, #8
 8015a20:	b29a      	uxth	r2, r3
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015a26:	6878      	ldr	r0, [r7, #4]
 8015a28:	f7fe fe10 	bl	801464c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d1e7      	bne.n	8015a06 <tcp_handle_closepend+0xe>
  }
}
 8015a36:	bf00      	nop
 8015a38:	bf00      	nop
 8015a3a:	3708      	adds	r7, #8
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}
 8015a40:	200227a8 	.word	0x200227a8

08015a44 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b084      	sub	sp, #16
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015a4e:	2001      	movs	r0, #1
 8015a50:	f7fd f99c 	bl	8012d8c <memp_malloc>
 8015a54:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d126      	bne.n	8015aaa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015a5c:	f7ff ffcc 	bl	80159f8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015a60:	f7ff ff9a 	bl	8015998 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015a64:	2001      	movs	r0, #1
 8015a66:	f7fd f991 	bl	8012d8c <memp_malloc>
 8015a6a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d11b      	bne.n	8015aaa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015a72:	2009      	movs	r0, #9
 8015a74:	f7ff ff46 	bl	8015904 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015a78:	2001      	movs	r0, #1
 8015a7a:	f7fd f987 	bl	8012d8c <memp_malloc>
 8015a7e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d111      	bne.n	8015aaa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015a86:	2008      	movs	r0, #8
 8015a88:	f7ff ff3c 	bl	8015904 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015a8c:	2001      	movs	r0, #1
 8015a8e:	f7fd f97d 	bl	8012d8c <memp_malloc>
 8015a92:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d107      	bne.n	8015aaa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015a9a:	79fb      	ldrb	r3, [r7, #7]
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7ff fee3 	bl	8015868 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015aa2:	2001      	movs	r0, #1
 8015aa4:	f7fd f972 	bl	8012d8c <memp_malloc>
 8015aa8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d03f      	beq.n	8015b30 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015ab0:	229c      	movs	r2, #156	@ 0x9c
 8015ab2:	2100      	movs	r1, #0
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	f009 fac9 	bl	801f04c <memset>
    pcb->prio = prio;
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	79fa      	ldrb	r2, [r7, #7]
 8015abe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015ac6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	22ff      	movs	r2, #255	@ 0xff
 8015ade:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015ae6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	2206      	movs	r2, #6
 8015aec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	2206      	movs	r2, #6
 8015af4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015afc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	2201      	movs	r2, #1
 8015b02:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8015b06:	4b0d      	ldr	r3, [pc, #52]	@ (8015b3c <tcp_alloc+0xf8>)
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8015b40 <tcp_alloc+0xfc>)
 8015b10:	781a      	ldrb	r2, [r3, #0]
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015b1c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	4a08      	ldr	r2, [pc, #32]	@ (8015b44 <tcp_alloc+0x100>)
 8015b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	4a07      	ldr	r2, [pc, #28]	@ (8015b48 <tcp_alloc+0x104>)
 8015b2c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015b30:	68fb      	ldr	r3, [r7, #12]
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3710      	adds	r7, #16
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}
 8015b3a:	bf00      	nop
 8015b3c:	2002279c 	.word	0x2002279c
 8015b40:	200227b2 	.word	0x200227b2
 8015b44:	080157fd 	.word	0x080157fd
 8015b48:	006ddd00 	.word	0x006ddd00

08015b4c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b084      	sub	sp, #16
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	4603      	mov	r3, r0
 8015b54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8015b56:	2040      	movs	r0, #64	@ 0x40
 8015b58:	f7ff ff74 	bl	8015a44 <tcp_alloc>
 8015b5c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
}
 8015b60:	4618      	mov	r0, r3
 8015b62:	3710      	adds	r7, #16
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}

08015b68 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8015b68:	b480      	push	{r7}
 8015b6a:	b083      	sub	sp, #12
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d002      	beq.n	8015b7e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	683a      	ldr	r2, [r7, #0]
 8015b7c:	611a      	str	r2, [r3, #16]
  }
}
 8015b7e:	bf00      	nop
 8015b80:	370c      	adds	r7, #12
 8015b82:	46bd      	mov	sp, r7
 8015b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b88:	4770      	bx	lr
	...

08015b8c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
 8015b94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d00e      	beq.n	8015bba <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	7d1b      	ldrb	r3, [r3, #20]
 8015ba0:	2b01      	cmp	r3, #1
 8015ba2:	d106      	bne.n	8015bb2 <tcp_recv+0x26>
 8015ba4:	4b07      	ldr	r3, [pc, #28]	@ (8015bc4 <tcp_recv+0x38>)
 8015ba6:	f240 72df 	movw	r2, #2015	@ 0x7df
 8015baa:	4907      	ldr	r1, [pc, #28]	@ (8015bc8 <tcp_recv+0x3c>)
 8015bac:	4807      	ldr	r0, [pc, #28]	@ (8015bcc <tcp_recv+0x40>)
 8015bae:	f009 f8ed 	bl	801ed8c <iprintf>
    pcb->recv = recv;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	683a      	ldr	r2, [r7, #0]
 8015bb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8015bba:	bf00      	nop
 8015bbc:	3708      	adds	r7, #8
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}
 8015bc2:	bf00      	nop
 8015bc4:	0802181c 	.word	0x0802181c
 8015bc8:	08021db8 	.word	0x08021db8
 8015bcc:	08021860 	.word	0x08021860

08015bd0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b082      	sub	sp, #8
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d00e      	beq.n	8015bfe <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	7d1b      	ldrb	r3, [r3, #20]
 8015be4:	2b01      	cmp	r3, #1
 8015be6:	d106      	bne.n	8015bf6 <tcp_sent+0x26>
 8015be8:	4b07      	ldr	r3, [pc, #28]	@ (8015c08 <tcp_sent+0x38>)
 8015bea:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8015bee:	4907      	ldr	r1, [pc, #28]	@ (8015c0c <tcp_sent+0x3c>)
 8015bf0:	4807      	ldr	r0, [pc, #28]	@ (8015c10 <tcp_sent+0x40>)
 8015bf2:	f009 f8cb 	bl	801ed8c <iprintf>
    pcb->sent = sent;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	683a      	ldr	r2, [r7, #0]
 8015bfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8015bfe:	bf00      	nop
 8015c00:	3708      	adds	r7, #8
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	0802181c 	.word	0x0802181c
 8015c0c:	08021de0 	.word	0x08021de0
 8015c10:	08021860 	.word	0x08021860

08015c14 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b082      	sub	sp, #8
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
 8015c1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d00e      	beq.n	8015c42 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	7d1b      	ldrb	r3, [r3, #20]
 8015c28:	2b01      	cmp	r3, #1
 8015c2a:	d106      	bne.n	8015c3a <tcp_err+0x26>
 8015c2c:	4b07      	ldr	r3, [pc, #28]	@ (8015c4c <tcp_err+0x38>)
 8015c2e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8015c32:	4907      	ldr	r1, [pc, #28]	@ (8015c50 <tcp_err+0x3c>)
 8015c34:	4807      	ldr	r0, [pc, #28]	@ (8015c54 <tcp_err+0x40>)
 8015c36:	f009 f8a9 	bl	801ed8c <iprintf>
    pcb->errf = err;
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	683a      	ldr	r2, [r7, #0]
 8015c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8015c42:	bf00      	nop
 8015c44:	3708      	adds	r7, #8
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	0802181c 	.word	0x0802181c
 8015c50:	08021e08 	.word	0x08021e08
 8015c54:	08021860 	.word	0x08021860

08015c58 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015c58:	b480      	push	{r7}
 8015c5a:	b085      	sub	sp, #20
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
 8015c60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d008      	beq.n	8015c7a <tcp_accept+0x22>
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	7d1b      	ldrb	r3, [r3, #20]
 8015c6c:	2b01      	cmp	r3, #1
 8015c6e:	d104      	bne.n	8015c7a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	683a      	ldr	r2, [r7, #0]
 8015c78:	619a      	str	r2, [r3, #24]
  }
}
 8015c7a:	bf00      	nop
 8015c7c:	3714      	adds	r7, #20
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c84:	4770      	bx	lr
	...

08015c88 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b084      	sub	sp, #16
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	4613      	mov	r3, r2
 8015c94:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d107      	bne.n	8015cac <tcp_poll+0x24>
 8015c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8015cd8 <tcp_poll+0x50>)
 8015c9e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8015ca2:	490e      	ldr	r1, [pc, #56]	@ (8015cdc <tcp_poll+0x54>)
 8015ca4:	480e      	ldr	r0, [pc, #56]	@ (8015ce0 <tcp_poll+0x58>)
 8015ca6:	f009 f871 	bl	801ed8c <iprintf>
 8015caa:	e011      	b.n	8015cd0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	7d1b      	ldrb	r3, [r3, #20]
 8015cb0:	2b01      	cmp	r3, #1
 8015cb2:	d106      	bne.n	8015cc2 <tcp_poll+0x3a>
 8015cb4:	4b08      	ldr	r3, [pc, #32]	@ (8015cd8 <tcp_poll+0x50>)
 8015cb6:	f640 023e 	movw	r2, #2110	@ 0x83e
 8015cba:	490a      	ldr	r1, [pc, #40]	@ (8015ce4 <tcp_poll+0x5c>)
 8015cbc:	4808      	ldr	r0, [pc, #32]	@ (8015ce0 <tcp_poll+0x58>)
 8015cbe:	f009 f865 	bl	801ed8c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	68ba      	ldr	r2, [r7, #8]
 8015cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	79fa      	ldrb	r2, [r7, #7]
 8015cce:	775a      	strb	r2, [r3, #29]
}
 8015cd0:	3710      	adds	r7, #16
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}
 8015cd6:	bf00      	nop
 8015cd8:	0802181c 	.word	0x0802181c
 8015cdc:	08021e30 	.word	0x08021e30
 8015ce0:	08021860 	.word	0x08021860
 8015ce4:	08021e48 	.word	0x08021e48

08015ce8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d107      	bne.n	8015d06 <tcp_pcb_purge+0x1e>
 8015cf6:	4b21      	ldr	r3, [pc, #132]	@ (8015d7c <tcp_pcb_purge+0x94>)
 8015cf8:	f640 0251 	movw	r2, #2129	@ 0x851
 8015cfc:	4920      	ldr	r1, [pc, #128]	@ (8015d80 <tcp_pcb_purge+0x98>)
 8015cfe:	4821      	ldr	r0, [pc, #132]	@ (8015d84 <tcp_pcb_purge+0x9c>)
 8015d00:	f009 f844 	bl	801ed8c <iprintf>
 8015d04:	e037      	b.n	8015d76 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	7d1b      	ldrb	r3, [r3, #20]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d033      	beq.n	8015d76 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8015d12:	2b0a      	cmp	r3, #10
 8015d14:	d02f      	beq.n	8015d76 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	d02b      	beq.n	8015d76 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d007      	beq.n	8015d36 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f7fe f83e 	bl	8013dac <pbuf_free>
      pcb->refused_data = NULL;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2200      	movs	r2, #0
 8015d34:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d002      	beq.n	8015d44 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f000 f98c 	bl	801605c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015d4a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7ff fcf9 	bl	8015748 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7ff fcf4 	bl	8015748 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2200      	movs	r2, #0
 8015d64:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	2200      	movs	r2, #0
 8015d72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015d76:	3708      	adds	r7, #8
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bd80      	pop	{r7, pc}
 8015d7c:	0802181c 	.word	0x0802181c
 8015d80:	08021e68 	.word	0x08021e68
 8015d84:	08021860 	.word	0x08021860

08015d88 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b084      	sub	sp, #16
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
 8015d90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d106      	bne.n	8015da6 <tcp_pcb_remove+0x1e>
 8015d98:	4b3e      	ldr	r3, [pc, #248]	@ (8015e94 <tcp_pcb_remove+0x10c>)
 8015d9a:	f640 0283 	movw	r2, #2179	@ 0x883
 8015d9e:	493e      	ldr	r1, [pc, #248]	@ (8015e98 <tcp_pcb_remove+0x110>)
 8015da0:	483e      	ldr	r0, [pc, #248]	@ (8015e9c <tcp_pcb_remove+0x114>)
 8015da2:	f008 fff3 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d106      	bne.n	8015dba <tcp_pcb_remove+0x32>
 8015dac:	4b39      	ldr	r3, [pc, #228]	@ (8015e94 <tcp_pcb_remove+0x10c>)
 8015dae:	f640 0284 	movw	r2, #2180	@ 0x884
 8015db2:	493b      	ldr	r1, [pc, #236]	@ (8015ea0 <tcp_pcb_remove+0x118>)
 8015db4:	4839      	ldr	r0, [pc, #228]	@ (8015e9c <tcp_pcb_remove+0x114>)
 8015db6:	f008 ffe9 	bl	801ed8c <iprintf>

  TCP_RMV(pcblist, pcb);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	683a      	ldr	r2, [r7, #0]
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d105      	bne.n	8015dd0 <tcp_pcb_remove+0x48>
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	68da      	ldr	r2, [r3, #12]
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	601a      	str	r2, [r3, #0]
 8015dce:	e013      	b.n	8015df8 <tcp_pcb_remove+0x70>
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	60fb      	str	r3, [r7, #12]
 8015dd6:	e00c      	b.n	8015df2 <tcp_pcb_remove+0x6a>
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	68db      	ldr	r3, [r3, #12]
 8015ddc:	683a      	ldr	r2, [r7, #0]
 8015dde:	429a      	cmp	r2, r3
 8015de0:	d104      	bne.n	8015dec <tcp_pcb_remove+0x64>
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	68da      	ldr	r2, [r3, #12]
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	60da      	str	r2, [r3, #12]
 8015dea:	e005      	b.n	8015df8 <tcp_pcb_remove+0x70>
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	60fb      	str	r3, [r7, #12]
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d1ef      	bne.n	8015dd8 <tcp_pcb_remove+0x50>
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8015dfe:	6838      	ldr	r0, [r7, #0]
 8015e00:	f7ff ff72 	bl	8015ce8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	7d1b      	ldrb	r3, [r3, #20]
 8015e08:	2b0a      	cmp	r3, #10
 8015e0a:	d013      	beq.n	8015e34 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8015e10:	2b01      	cmp	r3, #1
 8015e12:	d00f      	beq.n	8015e34 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	8b5b      	ldrh	r3, [r3, #26]
 8015e18:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d009      	beq.n	8015e34 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	8b5b      	ldrh	r3, [r3, #26]
 8015e24:	f043 0302 	orr.w	r3, r3, #2
 8015e28:	b29a      	uxth	r2, r3
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015e2e:	6838      	ldr	r0, [r7, #0]
 8015e30:	f003 fc28 	bl	8019684 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	7d1b      	ldrb	r3, [r3, #20]
 8015e38:	2b01      	cmp	r3, #1
 8015e3a:	d020      	beq.n	8015e7e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d006      	beq.n	8015e52 <tcp_pcb_remove+0xca>
 8015e44:	4b13      	ldr	r3, [pc, #76]	@ (8015e94 <tcp_pcb_remove+0x10c>)
 8015e46:	f640 0293 	movw	r2, #2195	@ 0x893
 8015e4a:	4916      	ldr	r1, [pc, #88]	@ (8015ea4 <tcp_pcb_remove+0x11c>)
 8015e4c:	4813      	ldr	r0, [pc, #76]	@ (8015e9c <tcp_pcb_remove+0x114>)
 8015e4e:	f008 ff9d 	bl	801ed8c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d006      	beq.n	8015e68 <tcp_pcb_remove+0xe0>
 8015e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8015e94 <tcp_pcb_remove+0x10c>)
 8015e5c:	f640 0294 	movw	r2, #2196	@ 0x894
 8015e60:	4911      	ldr	r1, [pc, #68]	@ (8015ea8 <tcp_pcb_remove+0x120>)
 8015e62:	480e      	ldr	r0, [pc, #56]	@ (8015e9c <tcp_pcb_remove+0x114>)
 8015e64:	f008 ff92 	bl	801ed8c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d006      	beq.n	8015e7e <tcp_pcb_remove+0xf6>
 8015e70:	4b08      	ldr	r3, [pc, #32]	@ (8015e94 <tcp_pcb_remove+0x10c>)
 8015e72:	f640 0296 	movw	r2, #2198	@ 0x896
 8015e76:	490d      	ldr	r1, [pc, #52]	@ (8015eac <tcp_pcb_remove+0x124>)
 8015e78:	4808      	ldr	r0, [pc, #32]	@ (8015e9c <tcp_pcb_remove+0x114>)
 8015e7a:	f008 ff87 	bl	801ed8c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	2200      	movs	r2, #0
 8015e82:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	2200      	movs	r2, #0
 8015e88:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015e8a:	bf00      	nop
 8015e8c:	3710      	adds	r7, #16
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	bd80      	pop	{r7, pc}
 8015e92:	bf00      	nop
 8015e94:	0802181c 	.word	0x0802181c
 8015e98:	08021e84 	.word	0x08021e84
 8015e9c:	08021860 	.word	0x08021860
 8015ea0:	08021ea0 	.word	0x08021ea0
 8015ea4:	08021ec0 	.word	0x08021ec0
 8015ea8:	08021ed8 	.word	0x08021ed8
 8015eac:	08021ef4 	.word	0x08021ef4

08015eb0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b082      	sub	sp, #8
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d106      	bne.n	8015ecc <tcp_next_iss+0x1c>
 8015ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8015ee8 <tcp_next_iss+0x38>)
 8015ec0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015ec4:	4909      	ldr	r1, [pc, #36]	@ (8015eec <tcp_next_iss+0x3c>)
 8015ec6:	480a      	ldr	r0, [pc, #40]	@ (8015ef0 <tcp_next_iss+0x40>)
 8015ec8:	f008 ff60 	bl	801ed8c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015ecc:	4b09      	ldr	r3, [pc, #36]	@ (8015ef4 <tcp_next_iss+0x44>)
 8015ece:	681a      	ldr	r2, [r3, #0]
 8015ed0:	4b09      	ldr	r3, [pc, #36]	@ (8015ef8 <tcp_next_iss+0x48>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	4413      	add	r3, r2
 8015ed6:	4a07      	ldr	r2, [pc, #28]	@ (8015ef4 <tcp_next_iss+0x44>)
 8015ed8:	6013      	str	r3, [r2, #0]
  return iss;
 8015eda:	4b06      	ldr	r3, [pc, #24]	@ (8015ef4 <tcp_next_iss+0x44>)
 8015edc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3708      	adds	r7, #8
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}
 8015ee6:	bf00      	nop
 8015ee8:	0802181c 	.word	0x0802181c
 8015eec:	08021f0c 	.word	0x08021f0c
 8015ef0:	08021860 	.word	0x08021860
 8015ef4:	2000006c 	.word	0x2000006c
 8015ef8:	2002279c 	.word	0x2002279c

08015efc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b086      	sub	sp, #24
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	4603      	mov	r3, r0
 8015f04:	60b9      	str	r1, [r7, #8]
 8015f06:	607a      	str	r2, [r7, #4]
 8015f08:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d106      	bne.n	8015f1e <tcp_eff_send_mss_netif+0x22>
 8015f10:	4b14      	ldr	r3, [pc, #80]	@ (8015f64 <tcp_eff_send_mss_netif+0x68>)
 8015f12:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8015f16:	4914      	ldr	r1, [pc, #80]	@ (8015f68 <tcp_eff_send_mss_netif+0x6c>)
 8015f18:	4814      	ldr	r0, [pc, #80]	@ (8015f6c <tcp_eff_send_mss_netif+0x70>)
 8015f1a:	f008 ff37 	bl	801ed8c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d101      	bne.n	8015f28 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015f24:	89fb      	ldrh	r3, [r7, #14]
 8015f26:	e019      	b.n	8015f5c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015f28:	68bb      	ldr	r3, [r7, #8]
 8015f2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015f2c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015f2e:	8afb      	ldrh	r3, [r7, #22]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d012      	beq.n	8015f5a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015f34:	2328      	movs	r3, #40	@ 0x28
 8015f36:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015f38:	8afa      	ldrh	r2, [r7, #22]
 8015f3a:	8abb      	ldrh	r3, [r7, #20]
 8015f3c:	429a      	cmp	r2, r3
 8015f3e:	d904      	bls.n	8015f4a <tcp_eff_send_mss_netif+0x4e>
 8015f40:	8afa      	ldrh	r2, [r7, #22]
 8015f42:	8abb      	ldrh	r3, [r7, #20]
 8015f44:	1ad3      	subs	r3, r2, r3
 8015f46:	b29b      	uxth	r3, r3
 8015f48:	e000      	b.n	8015f4c <tcp_eff_send_mss_netif+0x50>
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8015f4e:	8a7a      	ldrh	r2, [r7, #18]
 8015f50:	89fb      	ldrh	r3, [r7, #14]
 8015f52:	4293      	cmp	r3, r2
 8015f54:	bf28      	it	cs
 8015f56:	4613      	movcs	r3, r2
 8015f58:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015f5a:	89fb      	ldrh	r3, [r7, #14]
}
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	3718      	adds	r7, #24
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd80      	pop	{r7, pc}
 8015f64:	0802181c 	.word	0x0802181c
 8015f68:	08021f28 	.word	0x08021f28
 8015f6c:	08021860 	.word	0x08021860

08015f70 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b084      	sub	sp, #16
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
 8015f78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d11d      	bne.n	8015fc0 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8015f84:	4b12      	ldr	r3, [pc, #72]	@ (8015fd0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8015f86:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8015f8a:	4912      	ldr	r1, [pc, #72]	@ (8015fd4 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8015f8c:	4812      	ldr	r0, [pc, #72]	@ (8015fd8 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8015f8e:	f008 fefd 	bl	801ed8c <iprintf>

  while (pcb != NULL) {
 8015f92:	e015      	b.n	8015fc0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	681a      	ldr	r2, [r3, #0]
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d10c      	bne.n	8015fba <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	68db      	ldr	r3, [r3, #12]
 8015fa4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8015fa6:	68f9      	ldr	r1, [r7, #12]
 8015fa8:	480c      	ldr	r0, [pc, #48]	@ (8015fdc <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8015faa:	f008 feef 	bl	801ed8c <iprintf>
      tcp_abort(pcb);
 8015fae:	68f8      	ldr	r0, [r7, #12]
 8015fb0:	f7fe fcfc 	bl	80149ac <tcp_abort>
      pcb = next;
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	60fb      	str	r3, [r7, #12]
 8015fb8:	e002      	b.n	8015fc0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	68db      	ldr	r3, [r3, #12]
 8015fbe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d1e6      	bne.n	8015f94 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8015fc6:	bf00      	nop
 8015fc8:	bf00      	nop
 8015fca:	3710      	adds	r7, #16
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}
 8015fd0:	0802181c 	.word	0x0802181c
 8015fd4:	08021f50 	.word	0x08021f50
 8015fd8:	08021860 	.word	0x08021860
 8015fdc:	08021f84 	.word	0x08021f84

08015fe0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b084      	sub	sp, #16
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d02a      	beq.n	8016046 <tcp_netif_ip_addr_changed+0x66>
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d026      	beq.n	8016046 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015ff8:	4b15      	ldr	r3, [pc, #84]	@ (8016050 <tcp_netif_ip_addr_changed+0x70>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	4619      	mov	r1, r3
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f7ff ffb6 	bl	8015f70 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016004:	4b13      	ldr	r3, [pc, #76]	@ (8016054 <tcp_netif_ip_addr_changed+0x74>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	4619      	mov	r1, r3
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7ff ffb0 	bl	8015f70 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016010:	683b      	ldr	r3, [r7, #0]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d017      	beq.n	8016046 <tcp_netif_ip_addr_changed+0x66>
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d013      	beq.n	8016046 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801601e:	4b0e      	ldr	r3, [pc, #56]	@ (8016058 <tcp_netif_ip_addr_changed+0x78>)
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	60fb      	str	r3, [r7, #12]
 8016024:	e00c      	b.n	8016040 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	429a      	cmp	r2, r3
 8016030:	d103      	bne.n	801603a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	681a      	ldr	r2, [r3, #0]
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	68db      	ldr	r3, [r3, #12]
 801603e:	60fb      	str	r3, [r7, #12]
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d1ef      	bne.n	8016026 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016046:	bf00      	nop
 8016048:	3710      	adds	r7, #16
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}
 801604e:	bf00      	nop
 8016050:	200227a8 	.word	0x200227a8
 8016054:	200227a0 	.word	0x200227a0
 8016058:	200227a4 	.word	0x200227a4

0801605c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b082      	sub	sp, #8
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016068:	2b00      	cmp	r3, #0
 801606a:	d007      	beq.n	801607c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016070:	4618      	mov	r0, r3
 8016072:	f7ff fb69 	bl	8015748 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	2200      	movs	r2, #0
 801607a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801607c:	bf00      	nop
 801607e:	3708      	adds	r7, #8
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016084:	b590      	push	{r4, r7, lr}
 8016086:	b08d      	sub	sp, #52	@ 0x34
 8016088:	af04      	add	r7, sp, #16
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d105      	bne.n	80160a0 <tcp_input+0x1c>
 8016094:	4b9b      	ldr	r3, [pc, #620]	@ (8016304 <tcp_input+0x280>)
 8016096:	2283      	movs	r2, #131	@ 0x83
 8016098:	499b      	ldr	r1, [pc, #620]	@ (8016308 <tcp_input+0x284>)
 801609a:	489c      	ldr	r0, [pc, #624]	@ (801630c <tcp_input+0x288>)
 801609c:	f008 fe76 	bl	801ed8c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	685b      	ldr	r3, [r3, #4]
 80160a4:	4a9a      	ldr	r2, [pc, #616]	@ (8016310 <tcp_input+0x28c>)
 80160a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	895b      	ldrh	r3, [r3, #10]
 80160ac:	2b13      	cmp	r3, #19
 80160ae:	f240 83d1 	bls.w	8016854 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80160b2:	4b98      	ldr	r3, [pc, #608]	@ (8016314 <tcp_input+0x290>)
 80160b4:	695b      	ldr	r3, [r3, #20]
 80160b6:	4a97      	ldr	r2, [pc, #604]	@ (8016314 <tcp_input+0x290>)
 80160b8:	6812      	ldr	r2, [r2, #0]
 80160ba:	4611      	mov	r1, r2
 80160bc:	4618      	mov	r0, r3
 80160be:	f006 ff83 	bl	801cfc8 <ip4_addr_isbroadcast_u32>
 80160c2:	4603      	mov	r3, r0
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	f040 83c7 	bne.w	8016858 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80160ca:	4b92      	ldr	r3, [pc, #584]	@ (8016314 <tcp_input+0x290>)
 80160cc:	695b      	ldr	r3, [r3, #20]
 80160ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80160d2:	2be0      	cmp	r3, #224	@ 0xe0
 80160d4:	f000 83c0 	beq.w	8016858 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80160d8:	4b8d      	ldr	r3, [pc, #564]	@ (8016310 <tcp_input+0x28c>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	899b      	ldrh	r3, [r3, #12]
 80160de:	b29b      	uxth	r3, r3
 80160e0:	4618      	mov	r0, r3
 80160e2:	f7fc f97f 	bl	80123e4 <lwip_htons>
 80160e6:	4603      	mov	r3, r0
 80160e8:	0b1b      	lsrs	r3, r3, #12
 80160ea:	b29b      	uxth	r3, r3
 80160ec:	b2db      	uxtb	r3, r3
 80160ee:	009b      	lsls	r3, r3, #2
 80160f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80160f2:	7cbb      	ldrb	r3, [r7, #18]
 80160f4:	2b13      	cmp	r3, #19
 80160f6:	f240 83b1 	bls.w	801685c <tcp_input+0x7d8>
 80160fa:	7cbb      	ldrb	r3, [r7, #18]
 80160fc:	b29a      	uxth	r2, r3
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	891b      	ldrh	r3, [r3, #8]
 8016102:	429a      	cmp	r2, r3
 8016104:	f200 83aa 	bhi.w	801685c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016108:	7cbb      	ldrb	r3, [r7, #18]
 801610a:	b29b      	uxth	r3, r3
 801610c:	3b14      	subs	r3, #20
 801610e:	b29a      	uxth	r2, r3
 8016110:	4b81      	ldr	r3, [pc, #516]	@ (8016318 <tcp_input+0x294>)
 8016112:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016114:	4b81      	ldr	r3, [pc, #516]	@ (801631c <tcp_input+0x298>)
 8016116:	2200      	movs	r2, #0
 8016118:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	895a      	ldrh	r2, [r3, #10]
 801611e:	7cbb      	ldrb	r3, [r7, #18]
 8016120:	b29b      	uxth	r3, r3
 8016122:	429a      	cmp	r2, r3
 8016124:	d309      	bcc.n	801613a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016126:	4b7c      	ldr	r3, [pc, #496]	@ (8016318 <tcp_input+0x294>)
 8016128:	881a      	ldrh	r2, [r3, #0]
 801612a:	4b7d      	ldr	r3, [pc, #500]	@ (8016320 <tcp_input+0x29c>)
 801612c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801612e:	7cbb      	ldrb	r3, [r7, #18]
 8016130:	4619      	mov	r1, r3
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f7fd fdb4 	bl	8013ca0 <pbuf_remove_header>
 8016138:	e04e      	b.n	80161d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d105      	bne.n	801614e <tcp_input+0xca>
 8016142:	4b70      	ldr	r3, [pc, #448]	@ (8016304 <tcp_input+0x280>)
 8016144:	22c2      	movs	r2, #194	@ 0xc2
 8016146:	4977      	ldr	r1, [pc, #476]	@ (8016324 <tcp_input+0x2a0>)
 8016148:	4870      	ldr	r0, [pc, #448]	@ (801630c <tcp_input+0x288>)
 801614a:	f008 fe1f 	bl	801ed8c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801614e:	2114      	movs	r1, #20
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f7fd fda5 	bl	8013ca0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	895a      	ldrh	r2, [r3, #10]
 801615a:	4b71      	ldr	r3, [pc, #452]	@ (8016320 <tcp_input+0x29c>)
 801615c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801615e:	4b6e      	ldr	r3, [pc, #440]	@ (8016318 <tcp_input+0x294>)
 8016160:	881a      	ldrh	r2, [r3, #0]
 8016162:	4b6f      	ldr	r3, [pc, #444]	@ (8016320 <tcp_input+0x29c>)
 8016164:	881b      	ldrh	r3, [r3, #0]
 8016166:	1ad3      	subs	r3, r2, r3
 8016168:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801616a:	4b6d      	ldr	r3, [pc, #436]	@ (8016320 <tcp_input+0x29c>)
 801616c:	881b      	ldrh	r3, [r3, #0]
 801616e:	4619      	mov	r1, r3
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f7fd fd95 	bl	8013ca0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	895b      	ldrh	r3, [r3, #10]
 801617c:	8a3a      	ldrh	r2, [r7, #16]
 801617e:	429a      	cmp	r2, r3
 8016180:	f200 836e 	bhi.w	8016860 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	4a64      	ldr	r2, [pc, #400]	@ (801631c <tcp_input+0x298>)
 801618c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	8a3a      	ldrh	r2, [r7, #16]
 8016194:	4611      	mov	r1, r2
 8016196:	4618      	mov	r0, r3
 8016198:	f7fd fd82 	bl	8013ca0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	891a      	ldrh	r2, [r3, #8]
 80161a0:	8a3b      	ldrh	r3, [r7, #16]
 80161a2:	1ad3      	subs	r3, r2, r3
 80161a4:	b29a      	uxth	r2, r3
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	895b      	ldrh	r3, [r3, #10]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d005      	beq.n	80161be <tcp_input+0x13a>
 80161b2:	4b54      	ldr	r3, [pc, #336]	@ (8016304 <tcp_input+0x280>)
 80161b4:	22df      	movs	r2, #223	@ 0xdf
 80161b6:	495c      	ldr	r1, [pc, #368]	@ (8016328 <tcp_input+0x2a4>)
 80161b8:	4854      	ldr	r0, [pc, #336]	@ (801630c <tcp_input+0x288>)
 80161ba:	f008 fde7 	bl	801ed8c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	891a      	ldrh	r2, [r3, #8]
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	891b      	ldrh	r3, [r3, #8]
 80161c8:	429a      	cmp	r2, r3
 80161ca:	d005      	beq.n	80161d8 <tcp_input+0x154>
 80161cc:	4b4d      	ldr	r3, [pc, #308]	@ (8016304 <tcp_input+0x280>)
 80161ce:	22e0      	movs	r2, #224	@ 0xe0
 80161d0:	4956      	ldr	r1, [pc, #344]	@ (801632c <tcp_input+0x2a8>)
 80161d2:	484e      	ldr	r0, [pc, #312]	@ (801630c <tcp_input+0x288>)
 80161d4:	f008 fdda 	bl	801ed8c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80161d8:	4b4d      	ldr	r3, [pc, #308]	@ (8016310 <tcp_input+0x28c>)
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	881b      	ldrh	r3, [r3, #0]
 80161de:	b29b      	uxth	r3, r3
 80161e0:	4a4b      	ldr	r2, [pc, #300]	@ (8016310 <tcp_input+0x28c>)
 80161e2:	6814      	ldr	r4, [r2, #0]
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7fc f8fd 	bl	80123e4 <lwip_htons>
 80161ea:	4603      	mov	r3, r0
 80161ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80161ee:	4b48      	ldr	r3, [pc, #288]	@ (8016310 <tcp_input+0x28c>)
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	885b      	ldrh	r3, [r3, #2]
 80161f4:	b29b      	uxth	r3, r3
 80161f6:	4a46      	ldr	r2, [pc, #280]	@ (8016310 <tcp_input+0x28c>)
 80161f8:	6814      	ldr	r4, [r2, #0]
 80161fa:	4618      	mov	r0, r3
 80161fc:	f7fc f8f2 	bl	80123e4 <lwip_htons>
 8016200:	4603      	mov	r3, r0
 8016202:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016204:	4b42      	ldr	r3, [pc, #264]	@ (8016310 <tcp_input+0x28c>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	4a41      	ldr	r2, [pc, #260]	@ (8016310 <tcp_input+0x28c>)
 801620c:	6814      	ldr	r4, [r2, #0]
 801620e:	4618      	mov	r0, r3
 8016210:	f7fc f8fe 	bl	8012410 <lwip_htonl>
 8016214:	4603      	mov	r3, r0
 8016216:	6063      	str	r3, [r4, #4]
 8016218:	6863      	ldr	r3, [r4, #4]
 801621a:	4a45      	ldr	r2, [pc, #276]	@ (8016330 <tcp_input+0x2ac>)
 801621c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801621e:	4b3c      	ldr	r3, [pc, #240]	@ (8016310 <tcp_input+0x28c>)
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	689b      	ldr	r3, [r3, #8]
 8016224:	4a3a      	ldr	r2, [pc, #232]	@ (8016310 <tcp_input+0x28c>)
 8016226:	6814      	ldr	r4, [r2, #0]
 8016228:	4618      	mov	r0, r3
 801622a:	f7fc f8f1 	bl	8012410 <lwip_htonl>
 801622e:	4603      	mov	r3, r0
 8016230:	60a3      	str	r3, [r4, #8]
 8016232:	68a3      	ldr	r3, [r4, #8]
 8016234:	4a3f      	ldr	r2, [pc, #252]	@ (8016334 <tcp_input+0x2b0>)
 8016236:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016238:	4b35      	ldr	r3, [pc, #212]	@ (8016310 <tcp_input+0x28c>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	89db      	ldrh	r3, [r3, #14]
 801623e:	b29b      	uxth	r3, r3
 8016240:	4a33      	ldr	r2, [pc, #204]	@ (8016310 <tcp_input+0x28c>)
 8016242:	6814      	ldr	r4, [r2, #0]
 8016244:	4618      	mov	r0, r3
 8016246:	f7fc f8cd 	bl	80123e4 <lwip_htons>
 801624a:	4603      	mov	r3, r0
 801624c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801624e:	4b30      	ldr	r3, [pc, #192]	@ (8016310 <tcp_input+0x28c>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	899b      	ldrh	r3, [r3, #12]
 8016254:	b29b      	uxth	r3, r3
 8016256:	4618      	mov	r0, r3
 8016258:	f7fc f8c4 	bl	80123e4 <lwip_htons>
 801625c:	4603      	mov	r3, r0
 801625e:	b2db      	uxtb	r3, r3
 8016260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016264:	b2da      	uxtb	r2, r3
 8016266:	4b34      	ldr	r3, [pc, #208]	@ (8016338 <tcp_input+0x2b4>)
 8016268:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	891a      	ldrh	r2, [r3, #8]
 801626e:	4b33      	ldr	r3, [pc, #204]	@ (801633c <tcp_input+0x2b8>)
 8016270:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016272:	4b31      	ldr	r3, [pc, #196]	@ (8016338 <tcp_input+0x2b4>)
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	f003 0303 	and.w	r3, r3, #3
 801627a:	2b00      	cmp	r3, #0
 801627c:	d00c      	beq.n	8016298 <tcp_input+0x214>
    tcplen++;
 801627e:	4b2f      	ldr	r3, [pc, #188]	@ (801633c <tcp_input+0x2b8>)
 8016280:	881b      	ldrh	r3, [r3, #0]
 8016282:	3301      	adds	r3, #1
 8016284:	b29a      	uxth	r2, r3
 8016286:	4b2d      	ldr	r3, [pc, #180]	@ (801633c <tcp_input+0x2b8>)
 8016288:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	891a      	ldrh	r2, [r3, #8]
 801628e:	4b2b      	ldr	r3, [pc, #172]	@ (801633c <tcp_input+0x2b8>)
 8016290:	881b      	ldrh	r3, [r3, #0]
 8016292:	429a      	cmp	r2, r3
 8016294:	f200 82e6 	bhi.w	8016864 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016298:	2300      	movs	r3, #0
 801629a:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801629c:	4b28      	ldr	r3, [pc, #160]	@ (8016340 <tcp_input+0x2bc>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	61bb      	str	r3, [r7, #24]
 80162a2:	e09d      	b.n	80163e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80162a4:	69bb      	ldr	r3, [r7, #24]
 80162a6:	7d1b      	ldrb	r3, [r3, #20]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d105      	bne.n	80162b8 <tcp_input+0x234>
 80162ac:	4b15      	ldr	r3, [pc, #84]	@ (8016304 <tcp_input+0x280>)
 80162ae:	22fb      	movs	r2, #251	@ 0xfb
 80162b0:	4924      	ldr	r1, [pc, #144]	@ (8016344 <tcp_input+0x2c0>)
 80162b2:	4816      	ldr	r0, [pc, #88]	@ (801630c <tcp_input+0x288>)
 80162b4:	f008 fd6a 	bl	801ed8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80162b8:	69bb      	ldr	r3, [r7, #24]
 80162ba:	7d1b      	ldrb	r3, [r3, #20]
 80162bc:	2b0a      	cmp	r3, #10
 80162be:	d105      	bne.n	80162cc <tcp_input+0x248>
 80162c0:	4b10      	ldr	r3, [pc, #64]	@ (8016304 <tcp_input+0x280>)
 80162c2:	22fc      	movs	r2, #252	@ 0xfc
 80162c4:	4920      	ldr	r1, [pc, #128]	@ (8016348 <tcp_input+0x2c4>)
 80162c6:	4811      	ldr	r0, [pc, #68]	@ (801630c <tcp_input+0x288>)
 80162c8:	f008 fd60 	bl	801ed8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80162cc:	69bb      	ldr	r3, [r7, #24]
 80162ce:	7d1b      	ldrb	r3, [r3, #20]
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	d105      	bne.n	80162e0 <tcp_input+0x25c>
 80162d4:	4b0b      	ldr	r3, [pc, #44]	@ (8016304 <tcp_input+0x280>)
 80162d6:	22fd      	movs	r2, #253	@ 0xfd
 80162d8:	491c      	ldr	r1, [pc, #112]	@ (801634c <tcp_input+0x2c8>)
 80162da:	480c      	ldr	r0, [pc, #48]	@ (801630c <tcp_input+0x288>)
 80162dc:	f008 fd56 	bl	801ed8c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80162e0:	69bb      	ldr	r3, [r7, #24]
 80162e2:	7a1b      	ldrb	r3, [r3, #8]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d033      	beq.n	8016350 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80162e8:	69bb      	ldr	r3, [r7, #24]
 80162ea:	7a1a      	ldrb	r2, [r3, #8]
 80162ec:	4b09      	ldr	r3, [pc, #36]	@ (8016314 <tcp_input+0x290>)
 80162ee:	685b      	ldr	r3, [r3, #4]
 80162f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80162f4:	3301      	adds	r3, #1
 80162f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80162f8:	429a      	cmp	r2, r3
 80162fa:	d029      	beq.n	8016350 <tcp_input+0x2cc>
      prev = pcb;
 80162fc:	69bb      	ldr	r3, [r7, #24]
 80162fe:	61fb      	str	r3, [r7, #28]
      continue;
 8016300:	e06b      	b.n	80163da <tcp_input+0x356>
 8016302:	bf00      	nop
 8016304:	08021fac 	.word	0x08021fac
 8016308:	08021fe0 	.word	0x08021fe0
 801630c:	08021ff8 	.word	0x08021ff8
 8016310:	200227c8 	.word	0x200227c8
 8016314:	2001f65c 	.word	0x2001f65c
 8016318:	200227cc 	.word	0x200227cc
 801631c:	200227d0 	.word	0x200227d0
 8016320:	200227ce 	.word	0x200227ce
 8016324:	08022020 	.word	0x08022020
 8016328:	08022030 	.word	0x08022030
 801632c:	0802203c 	.word	0x0802203c
 8016330:	200227d8 	.word	0x200227d8
 8016334:	200227dc 	.word	0x200227dc
 8016338:	200227e4 	.word	0x200227e4
 801633c:	200227e2 	.word	0x200227e2
 8016340:	200227a8 	.word	0x200227a8
 8016344:	0802205c 	.word	0x0802205c
 8016348:	08022084 	.word	0x08022084
 801634c:	080220b0 	.word	0x080220b0
    }

    if (pcb->remote_port == tcphdr->src &&
 8016350:	69bb      	ldr	r3, [r7, #24]
 8016352:	8b1a      	ldrh	r2, [r3, #24]
 8016354:	4b72      	ldr	r3, [pc, #456]	@ (8016520 <tcp_input+0x49c>)
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	881b      	ldrh	r3, [r3, #0]
 801635a:	b29b      	uxth	r3, r3
 801635c:	429a      	cmp	r2, r3
 801635e:	d13a      	bne.n	80163d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016360:	69bb      	ldr	r3, [r7, #24]
 8016362:	8ada      	ldrh	r2, [r3, #22]
 8016364:	4b6e      	ldr	r3, [pc, #440]	@ (8016520 <tcp_input+0x49c>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	885b      	ldrh	r3, [r3, #2]
 801636a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801636c:	429a      	cmp	r2, r3
 801636e:	d132      	bne.n	80163d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016370:	69bb      	ldr	r3, [r7, #24]
 8016372:	685a      	ldr	r2, [r3, #4]
 8016374:	4b6b      	ldr	r3, [pc, #428]	@ (8016524 <tcp_input+0x4a0>)
 8016376:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016378:	429a      	cmp	r2, r3
 801637a:	d12c      	bne.n	80163d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801637c:	69bb      	ldr	r3, [r7, #24]
 801637e:	681a      	ldr	r2, [r3, #0]
 8016380:	4b68      	ldr	r3, [pc, #416]	@ (8016524 <tcp_input+0x4a0>)
 8016382:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016384:	429a      	cmp	r2, r3
 8016386:	d126      	bne.n	80163d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	68db      	ldr	r3, [r3, #12]
 801638c:	69ba      	ldr	r2, [r7, #24]
 801638e:	429a      	cmp	r2, r3
 8016390:	d106      	bne.n	80163a0 <tcp_input+0x31c>
 8016392:	4b65      	ldr	r3, [pc, #404]	@ (8016528 <tcp_input+0x4a4>)
 8016394:	f240 120d 	movw	r2, #269	@ 0x10d
 8016398:	4964      	ldr	r1, [pc, #400]	@ (801652c <tcp_input+0x4a8>)
 801639a:	4865      	ldr	r0, [pc, #404]	@ (8016530 <tcp_input+0x4ac>)
 801639c:	f008 fcf6 	bl	801ed8c <iprintf>
      if (prev != NULL) {
 80163a0:	69fb      	ldr	r3, [r7, #28]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d00a      	beq.n	80163bc <tcp_input+0x338>
        prev->next = pcb->next;
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	68da      	ldr	r2, [r3, #12]
 80163aa:	69fb      	ldr	r3, [r7, #28]
 80163ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80163ae:	4b61      	ldr	r3, [pc, #388]	@ (8016534 <tcp_input+0x4b0>)
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	69bb      	ldr	r3, [r7, #24]
 80163b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80163b6:	4a5f      	ldr	r2, [pc, #380]	@ (8016534 <tcp_input+0x4b0>)
 80163b8:	69bb      	ldr	r3, [r7, #24]
 80163ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80163bc:	69bb      	ldr	r3, [r7, #24]
 80163be:	68db      	ldr	r3, [r3, #12]
 80163c0:	69ba      	ldr	r2, [r7, #24]
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d111      	bne.n	80163ea <tcp_input+0x366>
 80163c6:	4b58      	ldr	r3, [pc, #352]	@ (8016528 <tcp_input+0x4a4>)
 80163c8:	f240 1215 	movw	r2, #277	@ 0x115
 80163cc:	495a      	ldr	r1, [pc, #360]	@ (8016538 <tcp_input+0x4b4>)
 80163ce:	4858      	ldr	r0, [pc, #352]	@ (8016530 <tcp_input+0x4ac>)
 80163d0:	f008 fcdc 	bl	801ed8c <iprintf>
      break;
 80163d4:	e009      	b.n	80163ea <tcp_input+0x366>
    }
    prev = pcb;
 80163d6:	69bb      	ldr	r3, [r7, #24]
 80163d8:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80163da:	69bb      	ldr	r3, [r7, #24]
 80163dc:	68db      	ldr	r3, [r3, #12]
 80163de:	61bb      	str	r3, [r7, #24]
 80163e0:	69bb      	ldr	r3, [r7, #24]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	f47f af5e 	bne.w	80162a4 <tcp_input+0x220>
 80163e8:	e000      	b.n	80163ec <tcp_input+0x368>
      break;
 80163ea:	bf00      	nop
  }

  if (pcb == NULL) {
 80163ec:	69bb      	ldr	r3, [r7, #24]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	f040 80aa 	bne.w	8016548 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80163f4:	4b51      	ldr	r3, [pc, #324]	@ (801653c <tcp_input+0x4b8>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	61bb      	str	r3, [r7, #24]
 80163fa:	e03f      	b.n	801647c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80163fc:	69bb      	ldr	r3, [r7, #24]
 80163fe:	7d1b      	ldrb	r3, [r3, #20]
 8016400:	2b0a      	cmp	r3, #10
 8016402:	d006      	beq.n	8016412 <tcp_input+0x38e>
 8016404:	4b48      	ldr	r3, [pc, #288]	@ (8016528 <tcp_input+0x4a4>)
 8016406:	f240 121f 	movw	r2, #287	@ 0x11f
 801640a:	494d      	ldr	r1, [pc, #308]	@ (8016540 <tcp_input+0x4bc>)
 801640c:	4848      	ldr	r0, [pc, #288]	@ (8016530 <tcp_input+0x4ac>)
 801640e:	f008 fcbd 	bl	801ed8c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016412:	69bb      	ldr	r3, [r7, #24]
 8016414:	7a1b      	ldrb	r3, [r3, #8]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d009      	beq.n	801642e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801641a:	69bb      	ldr	r3, [r7, #24]
 801641c:	7a1a      	ldrb	r2, [r3, #8]
 801641e:	4b41      	ldr	r3, [pc, #260]	@ (8016524 <tcp_input+0x4a0>)
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016426:	3301      	adds	r3, #1
 8016428:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801642a:	429a      	cmp	r2, r3
 801642c:	d122      	bne.n	8016474 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801642e:	69bb      	ldr	r3, [r7, #24]
 8016430:	8b1a      	ldrh	r2, [r3, #24]
 8016432:	4b3b      	ldr	r3, [pc, #236]	@ (8016520 <tcp_input+0x49c>)
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	881b      	ldrh	r3, [r3, #0]
 8016438:	b29b      	uxth	r3, r3
 801643a:	429a      	cmp	r2, r3
 801643c:	d11b      	bne.n	8016476 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801643e:	69bb      	ldr	r3, [r7, #24]
 8016440:	8ada      	ldrh	r2, [r3, #22]
 8016442:	4b37      	ldr	r3, [pc, #220]	@ (8016520 <tcp_input+0x49c>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	885b      	ldrh	r3, [r3, #2]
 8016448:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801644a:	429a      	cmp	r2, r3
 801644c:	d113      	bne.n	8016476 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801644e:	69bb      	ldr	r3, [r7, #24]
 8016450:	685a      	ldr	r2, [r3, #4]
 8016452:	4b34      	ldr	r3, [pc, #208]	@ (8016524 <tcp_input+0x4a0>)
 8016454:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016456:	429a      	cmp	r2, r3
 8016458:	d10d      	bne.n	8016476 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801645a:	69bb      	ldr	r3, [r7, #24]
 801645c:	681a      	ldr	r2, [r3, #0]
 801645e:	4b31      	ldr	r3, [pc, #196]	@ (8016524 <tcp_input+0x4a0>)
 8016460:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016462:	429a      	cmp	r2, r3
 8016464:	d107      	bne.n	8016476 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016466:	69b8      	ldr	r0, [r7, #24]
 8016468:	f000 fb56 	bl	8016b18 <tcp_timewait_input>
        }
        pbuf_free(p);
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f7fd fc9d 	bl	8013dac <pbuf_free>
        return;
 8016472:	e1fd      	b.n	8016870 <tcp_input+0x7ec>
        continue;
 8016474:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016476:	69bb      	ldr	r3, [r7, #24]
 8016478:	68db      	ldr	r3, [r3, #12]
 801647a:	61bb      	str	r3, [r7, #24]
 801647c:	69bb      	ldr	r3, [r7, #24]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d1bc      	bne.n	80163fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016482:	2300      	movs	r3, #0
 8016484:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016486:	4b2f      	ldr	r3, [pc, #188]	@ (8016544 <tcp_input+0x4c0>)
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	617b      	str	r3, [r7, #20]
 801648c:	e02a      	b.n	80164e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801648e:	697b      	ldr	r3, [r7, #20]
 8016490:	7a1b      	ldrb	r3, [r3, #8]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d00c      	beq.n	80164b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016496:	697b      	ldr	r3, [r7, #20]
 8016498:	7a1a      	ldrb	r2, [r3, #8]
 801649a:	4b22      	ldr	r3, [pc, #136]	@ (8016524 <tcp_input+0x4a0>)
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80164a2:	3301      	adds	r3, #1
 80164a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80164a6:	429a      	cmp	r2, r3
 80164a8:	d002      	beq.n	80164b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80164aa:	697b      	ldr	r3, [r7, #20]
 80164ac:	61fb      	str	r3, [r7, #28]
        continue;
 80164ae:	e016      	b.n	80164de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	8ada      	ldrh	r2, [r3, #22]
 80164b4:	4b1a      	ldr	r3, [pc, #104]	@ (8016520 <tcp_input+0x49c>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	885b      	ldrh	r3, [r3, #2]
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	429a      	cmp	r2, r3
 80164be:	d10c      	bne.n	80164da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80164c0:	697b      	ldr	r3, [r7, #20]
 80164c2:	681a      	ldr	r2, [r3, #0]
 80164c4:	4b17      	ldr	r3, [pc, #92]	@ (8016524 <tcp_input+0x4a0>)
 80164c6:	695b      	ldr	r3, [r3, #20]
 80164c8:	429a      	cmp	r2, r3
 80164ca:	d00f      	beq.n	80164ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80164cc:	697b      	ldr	r3, [r7, #20]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d00d      	beq.n	80164ee <tcp_input+0x46a>
 80164d2:	697b      	ldr	r3, [r7, #20]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d009      	beq.n	80164ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80164da:	697b      	ldr	r3, [r7, #20]
 80164dc:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80164de:	697b      	ldr	r3, [r7, #20]
 80164e0:	68db      	ldr	r3, [r3, #12]
 80164e2:	617b      	str	r3, [r7, #20]
 80164e4:	697b      	ldr	r3, [r7, #20]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d1d1      	bne.n	801648e <tcp_input+0x40a>
 80164ea:	e000      	b.n	80164ee <tcp_input+0x46a>
            break;
 80164ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d029      	beq.n	8016548 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80164f4:	69fb      	ldr	r3, [r7, #28]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d00a      	beq.n	8016510 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	68da      	ldr	r2, [r3, #12]
 80164fe:	69fb      	ldr	r3, [r7, #28]
 8016500:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016502:	4b10      	ldr	r3, [pc, #64]	@ (8016544 <tcp_input+0x4c0>)
 8016504:	681a      	ldr	r2, [r3, #0]
 8016506:	697b      	ldr	r3, [r7, #20]
 8016508:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801650a:	4a0e      	ldr	r2, [pc, #56]	@ (8016544 <tcp_input+0x4c0>)
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016510:	6978      	ldr	r0, [r7, #20]
 8016512:	f000 fa03 	bl	801691c <tcp_listen_input>
      }
      pbuf_free(p);
 8016516:	6878      	ldr	r0, [r7, #4]
 8016518:	f7fd fc48 	bl	8013dac <pbuf_free>
      return;
 801651c:	e1a8      	b.n	8016870 <tcp_input+0x7ec>
 801651e:	bf00      	nop
 8016520:	200227c8 	.word	0x200227c8
 8016524:	2001f65c 	.word	0x2001f65c
 8016528:	08021fac 	.word	0x08021fac
 801652c:	080220d8 	.word	0x080220d8
 8016530:	08021ff8 	.word	0x08021ff8
 8016534:	200227a8 	.word	0x200227a8
 8016538:	08022104 	.word	0x08022104
 801653c:	200227ac 	.word	0x200227ac
 8016540:	08022130 	.word	0x08022130
 8016544:	200227a4 	.word	0x200227a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	2b00      	cmp	r3, #0
 801654c:	f000 8158 	beq.w	8016800 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016550:	4b95      	ldr	r3, [pc, #596]	@ (80167a8 <tcp_input+0x724>)
 8016552:	2200      	movs	r2, #0
 8016554:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	891a      	ldrh	r2, [r3, #8]
 801655a:	4b93      	ldr	r3, [pc, #588]	@ (80167a8 <tcp_input+0x724>)
 801655c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801655e:	4a92      	ldr	r2, [pc, #584]	@ (80167a8 <tcp_input+0x724>)
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016564:	4b91      	ldr	r3, [pc, #580]	@ (80167ac <tcp_input+0x728>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	4a8f      	ldr	r2, [pc, #572]	@ (80167a8 <tcp_input+0x724>)
 801656a:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 801656c:	4b90      	ldr	r3, [pc, #576]	@ (80167b0 <tcp_input+0x72c>)
 801656e:	2200      	movs	r2, #0
 8016570:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016572:	4b90      	ldr	r3, [pc, #576]	@ (80167b4 <tcp_input+0x730>)
 8016574:	2200      	movs	r2, #0
 8016576:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016578:	4b8f      	ldr	r3, [pc, #572]	@ (80167b8 <tcp_input+0x734>)
 801657a:	2200      	movs	r2, #0
 801657c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801657e:	4b8f      	ldr	r3, [pc, #572]	@ (80167bc <tcp_input+0x738>)
 8016580:	781b      	ldrb	r3, [r3, #0]
 8016582:	f003 0308 	and.w	r3, r3, #8
 8016586:	2b00      	cmp	r3, #0
 8016588:	d006      	beq.n	8016598 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	7b5b      	ldrb	r3, [r3, #13]
 801658e:	f043 0301 	orr.w	r3, r3, #1
 8016592:	b2da      	uxtb	r2, r3
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016598:	69bb      	ldr	r3, [r7, #24]
 801659a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801659c:	2b00      	cmp	r3, #0
 801659e:	d017      	beq.n	80165d0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80165a0:	69b8      	ldr	r0, [r7, #24]
 80165a2:	f7ff f855 	bl	8015650 <tcp_process_refused_data>
 80165a6:	4603      	mov	r3, r0
 80165a8:	f113 0f0d 	cmn.w	r3, #13
 80165ac:	d007      	beq.n	80165be <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80165ae:	69bb      	ldr	r3, [r7, #24]
 80165b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d00c      	beq.n	80165d0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80165b6:	4b82      	ldr	r3, [pc, #520]	@ (80167c0 <tcp_input+0x73c>)
 80165b8:	881b      	ldrh	r3, [r3, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d008      	beq.n	80165d0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80165be:	69bb      	ldr	r3, [r7, #24]
 80165c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	f040 80e3 	bne.w	801678e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80165c8:	69b8      	ldr	r0, [r7, #24]
 80165ca:	f003 fe6d 	bl	801a2a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80165ce:	e0de      	b.n	801678e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80165d0:	4a7c      	ldr	r2, [pc, #496]	@ (80167c4 <tcp_input+0x740>)
 80165d2:	69bb      	ldr	r3, [r7, #24]
 80165d4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80165d6:	69b8      	ldr	r0, [r7, #24]
 80165d8:	f000 fb18 	bl	8016c0c <tcp_process>
 80165dc:	4603      	mov	r3, r0
 80165de:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80165e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80165e4:	f113 0f0d 	cmn.w	r3, #13
 80165e8:	f000 80d3 	beq.w	8016792 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80165ec:	4b71      	ldr	r3, [pc, #452]	@ (80167b4 <tcp_input+0x730>)
 80165ee:	781b      	ldrb	r3, [r3, #0]
 80165f0:	f003 0308 	and.w	r3, r3, #8
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d015      	beq.n	8016624 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80165f8:	69bb      	ldr	r3, [r7, #24]
 80165fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d008      	beq.n	8016614 <tcp_input+0x590>
 8016602:	69bb      	ldr	r3, [r7, #24]
 8016604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016608:	69ba      	ldr	r2, [r7, #24]
 801660a:	6912      	ldr	r2, [r2, #16]
 801660c:	f06f 010d 	mvn.w	r1, #13
 8016610:	4610      	mov	r0, r2
 8016612:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016614:	69b9      	ldr	r1, [r7, #24]
 8016616:	486c      	ldr	r0, [pc, #432]	@ (80167c8 <tcp_input+0x744>)
 8016618:	f7ff fbb6 	bl	8015d88 <tcp_pcb_remove>
        tcp_free(pcb);
 801661c:	69b8      	ldr	r0, [r7, #24]
 801661e:	f7fd fe81 	bl	8014324 <tcp_free>
 8016622:	e0da      	b.n	80167da <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8016624:	2300      	movs	r3, #0
 8016626:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016628:	4b63      	ldr	r3, [pc, #396]	@ (80167b8 <tcp_input+0x734>)
 801662a:	881b      	ldrh	r3, [r3, #0]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d01d      	beq.n	801666c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016630:	4b61      	ldr	r3, [pc, #388]	@ (80167b8 <tcp_input+0x734>)
 8016632:	881b      	ldrh	r3, [r3, #0]
 8016634:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016636:	69bb      	ldr	r3, [r7, #24]
 8016638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801663c:	2b00      	cmp	r3, #0
 801663e:	d00a      	beq.n	8016656 <tcp_input+0x5d2>
 8016640:	69bb      	ldr	r3, [r7, #24]
 8016642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016646:	69ba      	ldr	r2, [r7, #24]
 8016648:	6910      	ldr	r0, [r2, #16]
 801664a:	89fa      	ldrh	r2, [r7, #14]
 801664c:	69b9      	ldr	r1, [r7, #24]
 801664e:	4798      	blx	r3
 8016650:	4603      	mov	r3, r0
 8016652:	74fb      	strb	r3, [r7, #19]
 8016654:	e001      	b.n	801665a <tcp_input+0x5d6>
 8016656:	2300      	movs	r3, #0
 8016658:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801665a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801665e:	f113 0f0d 	cmn.w	r3, #13
 8016662:	f000 8098 	beq.w	8016796 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016666:	4b54      	ldr	r3, [pc, #336]	@ (80167b8 <tcp_input+0x734>)
 8016668:	2200      	movs	r2, #0
 801666a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801666c:	69b8      	ldr	r0, [r7, #24]
 801666e:	f000 f915 	bl	801689c <tcp_input_delayed_close>
 8016672:	4603      	mov	r3, r0
 8016674:	2b00      	cmp	r3, #0
 8016676:	f040 8090 	bne.w	801679a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801667a:	4b4d      	ldr	r3, [pc, #308]	@ (80167b0 <tcp_input+0x72c>)
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d041      	beq.n	8016706 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016682:	69bb      	ldr	r3, [r7, #24]
 8016684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016686:	2b00      	cmp	r3, #0
 8016688:	d006      	beq.n	8016698 <tcp_input+0x614>
 801668a:	4b50      	ldr	r3, [pc, #320]	@ (80167cc <tcp_input+0x748>)
 801668c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016690:	494f      	ldr	r1, [pc, #316]	@ (80167d0 <tcp_input+0x74c>)
 8016692:	4850      	ldr	r0, [pc, #320]	@ (80167d4 <tcp_input+0x750>)
 8016694:	f008 fb7a 	bl	801ed8c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016698:	69bb      	ldr	r3, [r7, #24]
 801669a:	8b5b      	ldrh	r3, [r3, #26]
 801669c:	f003 0310 	and.w	r3, r3, #16
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d008      	beq.n	80166b6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80166a4:	4b42      	ldr	r3, [pc, #264]	@ (80167b0 <tcp_input+0x72c>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	4618      	mov	r0, r3
 80166aa:	f7fd fb7f 	bl	8013dac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80166ae:	69b8      	ldr	r0, [r7, #24]
 80166b0:	f7fe f97c 	bl	80149ac <tcp_abort>
            goto aborted;
 80166b4:	e091      	b.n	80167da <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80166b6:	69bb      	ldr	r3, [r7, #24]
 80166b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d00c      	beq.n	80166da <tcp_input+0x656>
 80166c0:	69bb      	ldr	r3, [r7, #24]
 80166c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80166c6:	69bb      	ldr	r3, [r7, #24]
 80166c8:	6918      	ldr	r0, [r3, #16]
 80166ca:	4b39      	ldr	r3, [pc, #228]	@ (80167b0 <tcp_input+0x72c>)
 80166cc:	681a      	ldr	r2, [r3, #0]
 80166ce:	2300      	movs	r3, #0
 80166d0:	69b9      	ldr	r1, [r7, #24]
 80166d2:	47a0      	blx	r4
 80166d4:	4603      	mov	r3, r0
 80166d6:	74fb      	strb	r3, [r7, #19]
 80166d8:	e008      	b.n	80166ec <tcp_input+0x668>
 80166da:	4b35      	ldr	r3, [pc, #212]	@ (80167b0 <tcp_input+0x72c>)
 80166dc:	681a      	ldr	r2, [r3, #0]
 80166de:	2300      	movs	r3, #0
 80166e0:	69b9      	ldr	r1, [r7, #24]
 80166e2:	2000      	movs	r0, #0
 80166e4:	f7ff f88a 	bl	80157fc <tcp_recv_null>
 80166e8:	4603      	mov	r3, r0
 80166ea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80166ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80166f0:	f113 0f0d 	cmn.w	r3, #13
 80166f4:	d053      	beq.n	801679e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80166f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d003      	beq.n	8016706 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80166fe:	4b2c      	ldr	r3, [pc, #176]	@ (80167b0 <tcp_input+0x72c>)
 8016700:	681a      	ldr	r2, [r3, #0]
 8016702:	69bb      	ldr	r3, [r7, #24]
 8016704:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016706:	4b2b      	ldr	r3, [pc, #172]	@ (80167b4 <tcp_input+0x730>)
 8016708:	781b      	ldrb	r3, [r3, #0]
 801670a:	f003 0320 	and.w	r3, r3, #32
 801670e:	2b00      	cmp	r3, #0
 8016710:	d030      	beq.n	8016774 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8016712:	69bb      	ldr	r3, [r7, #24]
 8016714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016716:	2b00      	cmp	r3, #0
 8016718:	d009      	beq.n	801672e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801671a:	69bb      	ldr	r3, [r7, #24]
 801671c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801671e:	7b5a      	ldrb	r2, [r3, #13]
 8016720:	69bb      	ldr	r3, [r7, #24]
 8016722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016724:	f042 0220 	orr.w	r2, r2, #32
 8016728:	b2d2      	uxtb	r2, r2
 801672a:	735a      	strb	r2, [r3, #13]
 801672c:	e022      	b.n	8016774 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801672e:	69bb      	ldr	r3, [r7, #24]
 8016730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016732:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016736:	d005      	beq.n	8016744 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8016738:	69bb      	ldr	r3, [r7, #24]
 801673a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801673c:	3301      	adds	r3, #1
 801673e:	b29a      	uxth	r2, r3
 8016740:	69bb      	ldr	r3, [r7, #24]
 8016742:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016744:	69bb      	ldr	r3, [r7, #24]
 8016746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801674a:	2b00      	cmp	r3, #0
 801674c:	d00b      	beq.n	8016766 <tcp_input+0x6e2>
 801674e:	69bb      	ldr	r3, [r7, #24]
 8016750:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016754:	69bb      	ldr	r3, [r7, #24]
 8016756:	6918      	ldr	r0, [r3, #16]
 8016758:	2300      	movs	r3, #0
 801675a:	2200      	movs	r2, #0
 801675c:	69b9      	ldr	r1, [r7, #24]
 801675e:	47a0      	blx	r4
 8016760:	4603      	mov	r3, r0
 8016762:	74fb      	strb	r3, [r7, #19]
 8016764:	e001      	b.n	801676a <tcp_input+0x6e6>
 8016766:	2300      	movs	r3, #0
 8016768:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801676a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801676e:	f113 0f0d 	cmn.w	r3, #13
 8016772:	d016      	beq.n	80167a2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016774:	4b13      	ldr	r3, [pc, #76]	@ (80167c4 <tcp_input+0x740>)
 8016776:	2200      	movs	r2, #0
 8016778:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801677a:	69b8      	ldr	r0, [r7, #24]
 801677c:	f000 f88e 	bl	801689c <tcp_input_delayed_close>
 8016780:	4603      	mov	r3, r0
 8016782:	2b00      	cmp	r3, #0
 8016784:	d128      	bne.n	80167d8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016786:	69b8      	ldr	r0, [r7, #24]
 8016788:	f002 ff7c 	bl	8019684 <tcp_output>
 801678c:	e025      	b.n	80167da <tcp_input+0x756>
        goto aborted;
 801678e:	bf00      	nop
 8016790:	e023      	b.n	80167da <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016792:	bf00      	nop
 8016794:	e021      	b.n	80167da <tcp_input+0x756>
              goto aborted;
 8016796:	bf00      	nop
 8016798:	e01f      	b.n	80167da <tcp_input+0x756>
          goto aborted;
 801679a:	bf00      	nop
 801679c:	e01d      	b.n	80167da <tcp_input+0x756>
            goto aborted;
 801679e:	bf00      	nop
 80167a0:	e01b      	b.n	80167da <tcp_input+0x756>
              goto aborted;
 80167a2:	bf00      	nop
 80167a4:	e019      	b.n	80167da <tcp_input+0x756>
 80167a6:	bf00      	nop
 80167a8:	200227b4 	.word	0x200227b4
 80167ac:	200227c8 	.word	0x200227c8
 80167b0:	200227e8 	.word	0x200227e8
 80167b4:	200227e5 	.word	0x200227e5
 80167b8:	200227e0 	.word	0x200227e0
 80167bc:	200227e4 	.word	0x200227e4
 80167c0:	200227e2 	.word	0x200227e2
 80167c4:	200227ec 	.word	0x200227ec
 80167c8:	200227a8 	.word	0x200227a8
 80167cc:	08021fac 	.word	0x08021fac
 80167d0:	08022160 	.word	0x08022160
 80167d4:	08021ff8 	.word	0x08021ff8
          goto aborted;
 80167d8:	bf00      	nop
    tcp_input_pcb = NULL;
 80167da:	4b27      	ldr	r3, [pc, #156]	@ (8016878 <tcp_input+0x7f4>)
 80167dc:	2200      	movs	r2, #0
 80167de:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80167e0:	4b26      	ldr	r3, [pc, #152]	@ (801687c <tcp_input+0x7f8>)
 80167e2:	2200      	movs	r2, #0
 80167e4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80167e6:	4b26      	ldr	r3, [pc, #152]	@ (8016880 <tcp_input+0x7fc>)
 80167e8:	685b      	ldr	r3, [r3, #4]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d03f      	beq.n	801686e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80167ee:	4b24      	ldr	r3, [pc, #144]	@ (8016880 <tcp_input+0x7fc>)
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	4618      	mov	r0, r3
 80167f4:	f7fd fada 	bl	8013dac <pbuf_free>
      inseg.p = NULL;
 80167f8:	4b21      	ldr	r3, [pc, #132]	@ (8016880 <tcp_input+0x7fc>)
 80167fa:	2200      	movs	r2, #0
 80167fc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80167fe:	e036      	b.n	801686e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016800:	4b20      	ldr	r3, [pc, #128]	@ (8016884 <tcp_input+0x800>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	899b      	ldrh	r3, [r3, #12]
 8016806:	b29b      	uxth	r3, r3
 8016808:	4618      	mov	r0, r3
 801680a:	f7fb fdeb 	bl	80123e4 <lwip_htons>
 801680e:	4603      	mov	r3, r0
 8016810:	b2db      	uxtb	r3, r3
 8016812:	f003 0304 	and.w	r3, r3, #4
 8016816:	2b00      	cmp	r3, #0
 8016818:	d118      	bne.n	801684c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801681a:	4b1b      	ldr	r3, [pc, #108]	@ (8016888 <tcp_input+0x804>)
 801681c:	6819      	ldr	r1, [r3, #0]
 801681e:	4b1b      	ldr	r3, [pc, #108]	@ (801688c <tcp_input+0x808>)
 8016820:	881b      	ldrh	r3, [r3, #0]
 8016822:	461a      	mov	r2, r3
 8016824:	4b1a      	ldr	r3, [pc, #104]	@ (8016890 <tcp_input+0x80c>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801682a:	4b16      	ldr	r3, [pc, #88]	@ (8016884 <tcp_input+0x800>)
 801682c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801682e:	885b      	ldrh	r3, [r3, #2]
 8016830:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016832:	4a14      	ldr	r2, [pc, #80]	@ (8016884 <tcp_input+0x800>)
 8016834:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016836:	8812      	ldrh	r2, [r2, #0]
 8016838:	b292      	uxth	r2, r2
 801683a:	9202      	str	r2, [sp, #8]
 801683c:	9301      	str	r3, [sp, #4]
 801683e:	4b15      	ldr	r3, [pc, #84]	@ (8016894 <tcp_input+0x810>)
 8016840:	9300      	str	r3, [sp, #0]
 8016842:	4b15      	ldr	r3, [pc, #84]	@ (8016898 <tcp_input+0x814>)
 8016844:	4602      	mov	r2, r0
 8016846:	2000      	movs	r0, #0
 8016848:	f003 fcdc 	bl	801a204 <tcp_rst>
    pbuf_free(p);
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f7fd faad 	bl	8013dac <pbuf_free>
  return;
 8016852:	e00c      	b.n	801686e <tcp_input+0x7ea>
    goto dropped;
 8016854:	bf00      	nop
 8016856:	e006      	b.n	8016866 <tcp_input+0x7e2>
    goto dropped;
 8016858:	bf00      	nop
 801685a:	e004      	b.n	8016866 <tcp_input+0x7e2>
    goto dropped;
 801685c:	bf00      	nop
 801685e:	e002      	b.n	8016866 <tcp_input+0x7e2>
      goto dropped;
 8016860:	bf00      	nop
 8016862:	e000      	b.n	8016866 <tcp_input+0x7e2>
      goto dropped;
 8016864:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016866:	6878      	ldr	r0, [r7, #4]
 8016868:	f7fd faa0 	bl	8013dac <pbuf_free>
 801686c:	e000      	b.n	8016870 <tcp_input+0x7ec>
  return;
 801686e:	bf00      	nop
}
 8016870:	3724      	adds	r7, #36	@ 0x24
 8016872:	46bd      	mov	sp, r7
 8016874:	bd90      	pop	{r4, r7, pc}
 8016876:	bf00      	nop
 8016878:	200227ec 	.word	0x200227ec
 801687c:	200227e8 	.word	0x200227e8
 8016880:	200227b4 	.word	0x200227b4
 8016884:	200227c8 	.word	0x200227c8
 8016888:	200227dc 	.word	0x200227dc
 801688c:	200227e2 	.word	0x200227e2
 8016890:	200227d8 	.word	0x200227d8
 8016894:	2001f66c 	.word	0x2001f66c
 8016898:	2001f670 	.word	0x2001f670

0801689c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b082      	sub	sp, #8
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d106      	bne.n	80168b8 <tcp_input_delayed_close+0x1c>
 80168aa:	4b17      	ldr	r3, [pc, #92]	@ (8016908 <tcp_input_delayed_close+0x6c>)
 80168ac:	f240 225a 	movw	r2, #602	@ 0x25a
 80168b0:	4916      	ldr	r1, [pc, #88]	@ (801690c <tcp_input_delayed_close+0x70>)
 80168b2:	4817      	ldr	r0, [pc, #92]	@ (8016910 <tcp_input_delayed_close+0x74>)
 80168b4:	f008 fa6a 	bl	801ed8c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80168b8:	4b16      	ldr	r3, [pc, #88]	@ (8016914 <tcp_input_delayed_close+0x78>)
 80168ba:	781b      	ldrb	r3, [r3, #0]
 80168bc:	f003 0310 	and.w	r3, r3, #16
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d01c      	beq.n	80168fe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	8b5b      	ldrh	r3, [r3, #26]
 80168c8:	f003 0310 	and.w	r3, r3, #16
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d10d      	bne.n	80168ec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d008      	beq.n	80168ec <tcp_input_delayed_close+0x50>
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80168e0:	687a      	ldr	r2, [r7, #4]
 80168e2:	6912      	ldr	r2, [r2, #16]
 80168e4:	f06f 010e 	mvn.w	r1, #14
 80168e8:	4610      	mov	r0, r2
 80168ea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80168ec:	6879      	ldr	r1, [r7, #4]
 80168ee:	480a      	ldr	r0, [pc, #40]	@ (8016918 <tcp_input_delayed_close+0x7c>)
 80168f0:	f7ff fa4a 	bl	8015d88 <tcp_pcb_remove>
    tcp_free(pcb);
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f7fd fd15 	bl	8014324 <tcp_free>
    return 1;
 80168fa:	2301      	movs	r3, #1
 80168fc:	e000      	b.n	8016900 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80168fe:	2300      	movs	r3, #0
}
 8016900:	4618      	mov	r0, r3
 8016902:	3708      	adds	r7, #8
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}
 8016908:	08021fac 	.word	0x08021fac
 801690c:	0802217c 	.word	0x0802217c
 8016910:	08021ff8 	.word	0x08021ff8
 8016914:	200227e5 	.word	0x200227e5
 8016918:	200227a8 	.word	0x200227a8

0801691c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801691c:	b590      	push	{r4, r7, lr}
 801691e:	b08b      	sub	sp, #44	@ 0x2c
 8016920:	af04      	add	r7, sp, #16
 8016922:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016924:	4b6f      	ldr	r3, [pc, #444]	@ (8016ae4 <tcp_listen_input+0x1c8>)
 8016926:	781b      	ldrb	r3, [r3, #0]
 8016928:	f003 0304 	and.w	r3, r3, #4
 801692c:	2b00      	cmp	r3, #0
 801692e:	f040 80d2 	bne.w	8016ad6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d106      	bne.n	8016946 <tcp_listen_input+0x2a>
 8016938:	4b6b      	ldr	r3, [pc, #428]	@ (8016ae8 <tcp_listen_input+0x1cc>)
 801693a:	f240 2281 	movw	r2, #641	@ 0x281
 801693e:	496b      	ldr	r1, [pc, #428]	@ (8016aec <tcp_listen_input+0x1d0>)
 8016940:	486b      	ldr	r0, [pc, #428]	@ (8016af0 <tcp_listen_input+0x1d4>)
 8016942:	f008 fa23 	bl	801ed8c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016946:	4b67      	ldr	r3, [pc, #412]	@ (8016ae4 <tcp_listen_input+0x1c8>)
 8016948:	781b      	ldrb	r3, [r3, #0]
 801694a:	f003 0310 	and.w	r3, r3, #16
 801694e:	2b00      	cmp	r3, #0
 8016950:	d019      	beq.n	8016986 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016952:	4b68      	ldr	r3, [pc, #416]	@ (8016af4 <tcp_listen_input+0x1d8>)
 8016954:	6819      	ldr	r1, [r3, #0]
 8016956:	4b68      	ldr	r3, [pc, #416]	@ (8016af8 <tcp_listen_input+0x1dc>)
 8016958:	881b      	ldrh	r3, [r3, #0]
 801695a:	461a      	mov	r2, r3
 801695c:	4b67      	ldr	r3, [pc, #412]	@ (8016afc <tcp_listen_input+0x1e0>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016962:	4b67      	ldr	r3, [pc, #412]	@ (8016b00 <tcp_listen_input+0x1e4>)
 8016964:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016966:	885b      	ldrh	r3, [r3, #2]
 8016968:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801696a:	4a65      	ldr	r2, [pc, #404]	@ (8016b00 <tcp_listen_input+0x1e4>)
 801696c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801696e:	8812      	ldrh	r2, [r2, #0]
 8016970:	b292      	uxth	r2, r2
 8016972:	9202      	str	r2, [sp, #8]
 8016974:	9301      	str	r3, [sp, #4]
 8016976:	4b63      	ldr	r3, [pc, #396]	@ (8016b04 <tcp_listen_input+0x1e8>)
 8016978:	9300      	str	r3, [sp, #0]
 801697a:	4b63      	ldr	r3, [pc, #396]	@ (8016b08 <tcp_listen_input+0x1ec>)
 801697c:	4602      	mov	r2, r0
 801697e:	6878      	ldr	r0, [r7, #4]
 8016980:	f003 fc40 	bl	801a204 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016984:	e0a9      	b.n	8016ada <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016986:	4b57      	ldr	r3, [pc, #348]	@ (8016ae4 <tcp_listen_input+0x1c8>)
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	f003 0302 	and.w	r3, r3, #2
 801698e:	2b00      	cmp	r3, #0
 8016990:	f000 80a3 	beq.w	8016ada <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	7d5b      	ldrb	r3, [r3, #21]
 8016998:	4618      	mov	r0, r3
 801699a:	f7ff f853 	bl	8015a44 <tcp_alloc>
 801699e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d111      	bne.n	80169ca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	699b      	ldr	r3, [r3, #24]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d00a      	beq.n	80169c4 <tcp_listen_input+0xa8>
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	699b      	ldr	r3, [r3, #24]
 80169b2:	687a      	ldr	r2, [r7, #4]
 80169b4:	6910      	ldr	r0, [r2, #16]
 80169b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80169ba:	2100      	movs	r1, #0
 80169bc:	4798      	blx	r3
 80169be:	4603      	mov	r3, r0
 80169c0:	73bb      	strb	r3, [r7, #14]
      return;
 80169c2:	e08b      	b.n	8016adc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80169c4:	23f0      	movs	r3, #240	@ 0xf0
 80169c6:	73bb      	strb	r3, [r7, #14]
      return;
 80169c8:	e088      	b.n	8016adc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80169ca:	4b50      	ldr	r3, [pc, #320]	@ (8016b0c <tcp_listen_input+0x1f0>)
 80169cc:	695a      	ldr	r2, [r3, #20]
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80169d2:	4b4e      	ldr	r3, [pc, #312]	@ (8016b0c <tcp_listen_input+0x1f0>)
 80169d4:	691a      	ldr	r2, [r3, #16]
 80169d6:	697b      	ldr	r3, [r7, #20]
 80169d8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	8ada      	ldrh	r2, [r3, #22]
 80169de:	697b      	ldr	r3, [r7, #20]
 80169e0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80169e2:	4b47      	ldr	r3, [pc, #284]	@ (8016b00 <tcp_listen_input+0x1e4>)
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	881b      	ldrh	r3, [r3, #0]
 80169e8:	b29a      	uxth	r2, r3
 80169ea:	697b      	ldr	r3, [r7, #20]
 80169ec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80169ee:	697b      	ldr	r3, [r7, #20]
 80169f0:	2203      	movs	r2, #3
 80169f2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80169f4:	4b41      	ldr	r3, [pc, #260]	@ (8016afc <tcp_listen_input+0x1e0>)
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	1c5a      	adds	r2, r3, #1
 80169fa:	697b      	ldr	r3, [r7, #20]
 80169fc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80169fe:	697b      	ldr	r3, [r7, #20]
 8016a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a02:	697b      	ldr	r3, [r7, #20]
 8016a04:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8016a06:	6978      	ldr	r0, [r7, #20]
 8016a08:	f7ff fa52 	bl	8015eb0 <tcp_next_iss>
 8016a0c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016a0e:	697b      	ldr	r3, [r7, #20]
 8016a10:	693a      	ldr	r2, [r7, #16]
 8016a12:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8016a14:	697b      	ldr	r3, [r7, #20]
 8016a16:	693a      	ldr	r2, [r7, #16]
 8016a18:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8016a1a:	697b      	ldr	r3, [r7, #20]
 8016a1c:	693a      	ldr	r2, [r7, #16]
 8016a1e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	693a      	ldr	r2, [r7, #16]
 8016a24:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016a26:	4b35      	ldr	r3, [pc, #212]	@ (8016afc <tcp_listen_input+0x1e0>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	1e5a      	subs	r2, r3, #1
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	691a      	ldr	r2, [r3, #16]
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016a38:	697b      	ldr	r3, [r7, #20]
 8016a3a:	687a      	ldr	r2, [r7, #4]
 8016a3c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	7a5b      	ldrb	r3, [r3, #9]
 8016a42:	f003 030c 	and.w	r3, r3, #12
 8016a46:	b2da      	uxtb	r2, r3
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	7a1a      	ldrb	r2, [r3, #8]
 8016a50:	697b      	ldr	r3, [r7, #20]
 8016a52:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016a54:	4b2e      	ldr	r3, [pc, #184]	@ (8016b10 <tcp_listen_input+0x1f4>)
 8016a56:	681a      	ldr	r2, [r3, #0]
 8016a58:	697b      	ldr	r3, [r7, #20]
 8016a5a:	60da      	str	r2, [r3, #12]
 8016a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8016b10 <tcp_listen_input+0x1f4>)
 8016a5e:	697b      	ldr	r3, [r7, #20]
 8016a60:	6013      	str	r3, [r2, #0]
 8016a62:	f003 fd91 	bl	801a588 <tcp_timer_needed>
 8016a66:	4b2b      	ldr	r3, [pc, #172]	@ (8016b14 <tcp_listen_input+0x1f8>)
 8016a68:	2201      	movs	r2, #1
 8016a6a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016a6c:	6978      	ldr	r0, [r7, #20]
 8016a6e:	f001 fd8b 	bl	8018588 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016a72:	4b23      	ldr	r3, [pc, #140]	@ (8016b00 <tcp_listen_input+0x1e4>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	89db      	ldrh	r3, [r3, #14]
 8016a78:	b29a      	uxth	r2, r3
 8016a7a:	697b      	ldr	r3, [r7, #20]
 8016a7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016a90:	697b      	ldr	r3, [r7, #20]
 8016a92:	3304      	adds	r3, #4
 8016a94:	4618      	mov	r0, r3
 8016a96:	f006 f801 	bl	801ca9c <ip4_route>
 8016a9a:	4601      	mov	r1, r0
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	3304      	adds	r3, #4
 8016aa0:	461a      	mov	r2, r3
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	f7ff fa2a 	bl	8015efc <tcp_eff_send_mss_netif>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	461a      	mov	r2, r3
 8016aac:	697b      	ldr	r3, [r7, #20]
 8016aae:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016ab0:	2112      	movs	r1, #18
 8016ab2:	6978      	ldr	r0, [r7, #20]
 8016ab4:	f002 fcf8 	bl	80194a8 <tcp_enqueue_flags>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d004      	beq.n	8016ace <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016ac4:	2100      	movs	r1, #0
 8016ac6:	6978      	ldr	r0, [r7, #20]
 8016ac8:	f7fd feb2 	bl	8014830 <tcp_abandon>
      return;
 8016acc:	e006      	b.n	8016adc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016ace:	6978      	ldr	r0, [r7, #20]
 8016ad0:	f002 fdd8 	bl	8019684 <tcp_output>
  return;
 8016ad4:	e001      	b.n	8016ada <tcp_listen_input+0x1be>
    return;
 8016ad6:	bf00      	nop
 8016ad8:	e000      	b.n	8016adc <tcp_listen_input+0x1c0>
  return;
 8016ada:	bf00      	nop
}
 8016adc:	371c      	adds	r7, #28
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd90      	pop	{r4, r7, pc}
 8016ae2:	bf00      	nop
 8016ae4:	200227e4 	.word	0x200227e4
 8016ae8:	08021fac 	.word	0x08021fac
 8016aec:	080221a4 	.word	0x080221a4
 8016af0:	08021ff8 	.word	0x08021ff8
 8016af4:	200227dc 	.word	0x200227dc
 8016af8:	200227e2 	.word	0x200227e2
 8016afc:	200227d8 	.word	0x200227d8
 8016b00:	200227c8 	.word	0x200227c8
 8016b04:	2001f66c 	.word	0x2001f66c
 8016b08:	2001f670 	.word	0x2001f670
 8016b0c:	2001f65c 	.word	0x2001f65c
 8016b10:	200227a8 	.word	0x200227a8
 8016b14:	200227b0 	.word	0x200227b0

08016b18 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b086      	sub	sp, #24
 8016b1c:	af04      	add	r7, sp, #16
 8016b1e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016b20:	4b2f      	ldr	r3, [pc, #188]	@ (8016be0 <tcp_timewait_input+0xc8>)
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	f003 0304 	and.w	r3, r3, #4
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d153      	bne.n	8016bd4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d106      	bne.n	8016b40 <tcp_timewait_input+0x28>
 8016b32:	4b2c      	ldr	r3, [pc, #176]	@ (8016be4 <tcp_timewait_input+0xcc>)
 8016b34:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016b38:	492b      	ldr	r1, [pc, #172]	@ (8016be8 <tcp_timewait_input+0xd0>)
 8016b3a:	482c      	ldr	r0, [pc, #176]	@ (8016bec <tcp_timewait_input+0xd4>)
 8016b3c:	f008 f926 	bl	801ed8c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016b40:	4b27      	ldr	r3, [pc, #156]	@ (8016be0 <tcp_timewait_input+0xc8>)
 8016b42:	781b      	ldrb	r3, [r3, #0]
 8016b44:	f003 0302 	and.w	r3, r3, #2
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d02a      	beq.n	8016ba2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016b4c:	4b28      	ldr	r3, [pc, #160]	@ (8016bf0 <tcp_timewait_input+0xd8>)
 8016b4e:	681a      	ldr	r2, [r3, #0]
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b54:	1ad3      	subs	r3, r2, r3
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	db2d      	blt.n	8016bb6 <tcp_timewait_input+0x9e>
 8016b5a:	4b25      	ldr	r3, [pc, #148]	@ (8016bf0 <tcp_timewait_input+0xd8>)
 8016b5c:	681a      	ldr	r2, [r3, #0]
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b62:	6879      	ldr	r1, [r7, #4]
 8016b64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016b66:	440b      	add	r3, r1
 8016b68:	1ad3      	subs	r3, r2, r3
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	dc23      	bgt.n	8016bb6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b6e:	4b21      	ldr	r3, [pc, #132]	@ (8016bf4 <tcp_timewait_input+0xdc>)
 8016b70:	6819      	ldr	r1, [r3, #0]
 8016b72:	4b21      	ldr	r3, [pc, #132]	@ (8016bf8 <tcp_timewait_input+0xe0>)
 8016b74:	881b      	ldrh	r3, [r3, #0]
 8016b76:	461a      	mov	r2, r3
 8016b78:	4b1d      	ldr	r3, [pc, #116]	@ (8016bf0 <tcp_timewait_input+0xd8>)
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8016bfc <tcp_timewait_input+0xe4>)
 8016b80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b82:	885b      	ldrh	r3, [r3, #2]
 8016b84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b86:	4a1d      	ldr	r2, [pc, #116]	@ (8016bfc <tcp_timewait_input+0xe4>)
 8016b88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b8a:	8812      	ldrh	r2, [r2, #0]
 8016b8c:	b292      	uxth	r2, r2
 8016b8e:	9202      	str	r2, [sp, #8]
 8016b90:	9301      	str	r3, [sp, #4]
 8016b92:	4b1b      	ldr	r3, [pc, #108]	@ (8016c00 <tcp_timewait_input+0xe8>)
 8016b94:	9300      	str	r3, [sp, #0]
 8016b96:	4b1b      	ldr	r3, [pc, #108]	@ (8016c04 <tcp_timewait_input+0xec>)
 8016b98:	4602      	mov	r2, r0
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	f003 fb32 	bl	801a204 <tcp_rst>
      return;
 8016ba0:	e01b      	b.n	8016bda <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8016be0 <tcp_timewait_input+0xc8>)
 8016ba4:	781b      	ldrb	r3, [r3, #0]
 8016ba6:	f003 0301 	and.w	r3, r3, #1
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d003      	beq.n	8016bb6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016bae:	4b16      	ldr	r3, [pc, #88]	@ (8016c08 <tcp_timewait_input+0xf0>)
 8016bb0:	681a      	ldr	r2, [r3, #0]
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016bb6:	4b10      	ldr	r3, [pc, #64]	@ (8016bf8 <tcp_timewait_input+0xe0>)
 8016bb8:	881b      	ldrh	r3, [r3, #0]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d00c      	beq.n	8016bd8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	8b5b      	ldrh	r3, [r3, #26]
 8016bc2:	f043 0302 	orr.w	r3, r3, #2
 8016bc6:	b29a      	uxth	r2, r3
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f002 fd59 	bl	8019684 <tcp_output>
  }
  return;
 8016bd2:	e001      	b.n	8016bd8 <tcp_timewait_input+0xc0>
    return;
 8016bd4:	bf00      	nop
 8016bd6:	e000      	b.n	8016bda <tcp_timewait_input+0xc2>
  return;
 8016bd8:	bf00      	nop
}
 8016bda:	3708      	adds	r7, #8
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}
 8016be0:	200227e4 	.word	0x200227e4
 8016be4:	08021fac 	.word	0x08021fac
 8016be8:	080221c4 	.word	0x080221c4
 8016bec:	08021ff8 	.word	0x08021ff8
 8016bf0:	200227d8 	.word	0x200227d8
 8016bf4:	200227dc 	.word	0x200227dc
 8016bf8:	200227e2 	.word	0x200227e2
 8016bfc:	200227c8 	.word	0x200227c8
 8016c00:	2001f66c 	.word	0x2001f66c
 8016c04:	2001f670 	.word	0x2001f670
 8016c08:	2002279c 	.word	0x2002279c

08016c0c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016c0c:	b590      	push	{r4, r7, lr}
 8016c0e:	b08d      	sub	sp, #52	@ 0x34
 8016c10:	af04      	add	r7, sp, #16
 8016c12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016c14:	2300      	movs	r3, #0
 8016c16:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d106      	bne.n	8016c30 <tcp_process+0x24>
 8016c22:	4b9d      	ldr	r3, [pc, #628]	@ (8016e98 <tcp_process+0x28c>)
 8016c24:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016c28:	499c      	ldr	r1, [pc, #624]	@ (8016e9c <tcp_process+0x290>)
 8016c2a:	489d      	ldr	r0, [pc, #628]	@ (8016ea0 <tcp_process+0x294>)
 8016c2c:	f008 f8ae 	bl	801ed8c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016c30:	4b9c      	ldr	r3, [pc, #624]	@ (8016ea4 <tcp_process+0x298>)
 8016c32:	781b      	ldrb	r3, [r3, #0]
 8016c34:	f003 0304 	and.w	r3, r3, #4
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d04e      	beq.n	8016cda <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	7d1b      	ldrb	r3, [r3, #20]
 8016c40:	2b02      	cmp	r3, #2
 8016c42:	d108      	bne.n	8016c56 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016c48:	4b97      	ldr	r3, [pc, #604]	@ (8016ea8 <tcp_process+0x29c>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	429a      	cmp	r2, r3
 8016c4e:	d123      	bne.n	8016c98 <tcp_process+0x8c>
        acceptable = 1;
 8016c50:	2301      	movs	r3, #1
 8016c52:	77fb      	strb	r3, [r7, #31]
 8016c54:	e020      	b.n	8016c98 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c5a:	4b94      	ldr	r3, [pc, #592]	@ (8016eac <tcp_process+0x2a0>)
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d102      	bne.n	8016c68 <tcp_process+0x5c>
        acceptable = 1;
 8016c62:	2301      	movs	r3, #1
 8016c64:	77fb      	strb	r3, [r7, #31]
 8016c66:	e017      	b.n	8016c98 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016c68:	4b90      	ldr	r3, [pc, #576]	@ (8016eac <tcp_process+0x2a0>)
 8016c6a:	681a      	ldr	r2, [r3, #0]
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c70:	1ad3      	subs	r3, r2, r3
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	db10      	blt.n	8016c98 <tcp_process+0x8c>
 8016c76:	4b8d      	ldr	r3, [pc, #564]	@ (8016eac <tcp_process+0x2a0>)
 8016c78:	681a      	ldr	r2, [r3, #0]
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c7e:	6879      	ldr	r1, [r7, #4]
 8016c80:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016c82:	440b      	add	r3, r1
 8016c84:	1ad3      	subs	r3, r2, r3
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	dc06      	bgt.n	8016c98 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	8b5b      	ldrh	r3, [r3, #26]
 8016c8e:	f043 0302 	orr.w	r3, r3, #2
 8016c92:	b29a      	uxth	r2, r3
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016c98:	7ffb      	ldrb	r3, [r7, #31]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d01b      	beq.n	8016cd6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	7d1b      	ldrb	r3, [r3, #20]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d106      	bne.n	8016cb4 <tcp_process+0xa8>
 8016ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8016e98 <tcp_process+0x28c>)
 8016ca8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016cac:	4980      	ldr	r1, [pc, #512]	@ (8016eb0 <tcp_process+0x2a4>)
 8016cae:	487c      	ldr	r0, [pc, #496]	@ (8016ea0 <tcp_process+0x294>)
 8016cb0:	f008 f86c 	bl	801ed8c <iprintf>
      recv_flags |= TF_RESET;
 8016cb4:	4b7f      	ldr	r3, [pc, #508]	@ (8016eb4 <tcp_process+0x2a8>)
 8016cb6:	781b      	ldrb	r3, [r3, #0]
 8016cb8:	f043 0308 	orr.w	r3, r3, #8
 8016cbc:	b2da      	uxtb	r2, r3
 8016cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8016eb4 <tcp_process+0x2a8>)
 8016cc0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	8b5b      	ldrh	r3, [r3, #26]
 8016cc6:	f023 0301 	bic.w	r3, r3, #1
 8016cca:	b29a      	uxth	r2, r3
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016cd0:	f06f 030d 	mvn.w	r3, #13
 8016cd4:	e37a      	b.n	80173cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	e378      	b.n	80173cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8016cda:	4b72      	ldr	r3, [pc, #456]	@ (8016ea4 <tcp_process+0x298>)
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	f003 0302 	and.w	r3, r3, #2
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d010      	beq.n	8016d08 <tcp_process+0xfc>
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	7d1b      	ldrb	r3, [r3, #20]
 8016cea:	2b02      	cmp	r3, #2
 8016cec:	d00c      	beq.n	8016d08 <tcp_process+0xfc>
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	7d1b      	ldrb	r3, [r3, #20]
 8016cf2:	2b03      	cmp	r3, #3
 8016cf4:	d008      	beq.n	8016d08 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	8b5b      	ldrh	r3, [r3, #26]
 8016cfa:	f043 0302 	orr.w	r3, r3, #2
 8016cfe:	b29a      	uxth	r2, r3
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016d04:	2300      	movs	r3, #0
 8016d06:	e361      	b.n	80173cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	8b5b      	ldrh	r3, [r3, #26]
 8016d0c:	f003 0310 	and.w	r3, r3, #16
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d103      	bne.n	8016d1c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016d14:	4b68      	ldr	r3, [pc, #416]	@ (8016eb8 <tcp_process+0x2ac>)
 8016d16:	681a      	ldr	r2, [r3, #0]
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2200      	movs	r2, #0
 8016d20:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2200      	movs	r2, #0
 8016d28:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8016d2c:	6878      	ldr	r0, [r7, #4]
 8016d2e:	f001 fc2b 	bl	8018588 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	7d1b      	ldrb	r3, [r3, #20]
 8016d36:	3b02      	subs	r3, #2
 8016d38:	2b07      	cmp	r3, #7
 8016d3a:	f200 8337 	bhi.w	80173ac <tcp_process+0x7a0>
 8016d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8016d44 <tcp_process+0x138>)
 8016d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d44:	08016d65 	.word	0x08016d65
 8016d48:	08016f95 	.word	0x08016f95
 8016d4c:	0801710d 	.word	0x0801710d
 8016d50:	08017137 	.word	0x08017137
 8016d54:	0801725b 	.word	0x0801725b
 8016d58:	0801710d 	.word	0x0801710d
 8016d5c:	080172e7 	.word	0x080172e7
 8016d60:	08017377 	.word	0x08017377
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016d64:	4b4f      	ldr	r3, [pc, #316]	@ (8016ea4 <tcp_process+0x298>)
 8016d66:	781b      	ldrb	r3, [r3, #0]
 8016d68:	f003 0310 	and.w	r3, r3, #16
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	f000 80e4 	beq.w	8016f3a <tcp_process+0x32e>
 8016d72:	4b4c      	ldr	r3, [pc, #304]	@ (8016ea4 <tcp_process+0x298>)
 8016d74:	781b      	ldrb	r3, [r3, #0]
 8016d76:	f003 0302 	and.w	r3, r3, #2
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	f000 80dd 	beq.w	8016f3a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d84:	1c5a      	adds	r2, r3, #1
 8016d86:	4b48      	ldr	r3, [pc, #288]	@ (8016ea8 <tcp_process+0x29c>)
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	f040 80d5 	bne.w	8016f3a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016d90:	4b46      	ldr	r3, [pc, #280]	@ (8016eac <tcp_process+0x2a0>)
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	1c5a      	adds	r2, r3, #1
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016da2:	4b41      	ldr	r3, [pc, #260]	@ (8016ea8 <tcp_process+0x29c>)
 8016da4:	681a      	ldr	r2, [r3, #0]
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016daa:	4b44      	ldr	r3, [pc, #272]	@ (8016ebc <tcp_process+0x2b0>)
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	89db      	ldrh	r3, [r3, #14]
 8016db0:	b29a      	uxth	r2, r3
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016dc4:	4b39      	ldr	r3, [pc, #228]	@ (8016eac <tcp_process+0x2a0>)
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	1e5a      	subs	r2, r3, #1
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	2204      	movs	r2, #4
 8016dd2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	3304      	adds	r3, #4
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f005 fe5d 	bl	801ca9c <ip4_route>
 8016de2:	4601      	mov	r1, r0
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	3304      	adds	r3, #4
 8016de8:	461a      	mov	r2, r3
 8016dea:	4620      	mov	r0, r4
 8016dec:	f7ff f886 	bl	8015efc <tcp_eff_send_mss_netif>
 8016df0:	4603      	mov	r3, r0
 8016df2:	461a      	mov	r2, r3
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016dfc:	009a      	lsls	r2, r3, #2
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016e02:	005b      	lsls	r3, r3, #1
 8016e04:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016e08:	428b      	cmp	r3, r1
 8016e0a:	bf38      	it	cc
 8016e0c:	460b      	movcc	r3, r1
 8016e0e:	429a      	cmp	r2, r3
 8016e10:	d204      	bcs.n	8016e1c <tcp_process+0x210>
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016e16:	009b      	lsls	r3, r3, #2
 8016e18:	b29b      	uxth	r3, r3
 8016e1a:	e00d      	b.n	8016e38 <tcp_process+0x22c>
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016e20:	005b      	lsls	r3, r3, #1
 8016e22:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016e26:	4293      	cmp	r3, r2
 8016e28:	d904      	bls.n	8016e34 <tcp_process+0x228>
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016e2e:	005b      	lsls	r3, r3, #1
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	e001      	b.n	8016e38 <tcp_process+0x22c>
 8016e34:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016e38:	687a      	ldr	r2, [r7, #4]
 8016e3a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d106      	bne.n	8016e56 <tcp_process+0x24a>
 8016e48:	4b13      	ldr	r3, [pc, #76]	@ (8016e98 <tcp_process+0x28c>)
 8016e4a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016e4e:	491c      	ldr	r1, [pc, #112]	@ (8016ec0 <tcp_process+0x2b4>)
 8016e50:	4813      	ldr	r0, [pc, #76]	@ (8016ea0 <tcp_process+0x294>)
 8016e52:	f007 ff9b 	bl	801ed8c <iprintf>
        --pcb->snd_queuelen;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016e5c:	3b01      	subs	r3, #1
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e6a:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8016e6c:	697b      	ldr	r3, [r7, #20]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d12a      	bne.n	8016ec8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e76:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d106      	bne.n	8016e8c <tcp_process+0x280>
 8016e7e:	4b06      	ldr	r3, [pc, #24]	@ (8016e98 <tcp_process+0x28c>)
 8016e80:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016e84:	490f      	ldr	r1, [pc, #60]	@ (8016ec4 <tcp_process+0x2b8>)
 8016e86:	4806      	ldr	r0, [pc, #24]	@ (8016ea0 <tcp_process+0x294>)
 8016e88:	f007 ff80 	bl	801ed8c <iprintf>
          pcb->unsent = rseg->next;
 8016e8c:	697b      	ldr	r3, [r7, #20]
 8016e8e:	681a      	ldr	r2, [r3, #0]
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016e94:	e01c      	b.n	8016ed0 <tcp_process+0x2c4>
 8016e96:	bf00      	nop
 8016e98:	08021fac 	.word	0x08021fac
 8016e9c:	080221e4 	.word	0x080221e4
 8016ea0:	08021ff8 	.word	0x08021ff8
 8016ea4:	200227e4 	.word	0x200227e4
 8016ea8:	200227dc 	.word	0x200227dc
 8016eac:	200227d8 	.word	0x200227d8
 8016eb0:	08022200 	.word	0x08022200
 8016eb4:	200227e5 	.word	0x200227e5
 8016eb8:	2002279c 	.word	0x2002279c
 8016ebc:	200227c8 	.word	0x200227c8
 8016ec0:	08022220 	.word	0x08022220
 8016ec4:	08022238 	.word	0x08022238
        } else {
          pcb->unacked = rseg->next;
 8016ec8:	697b      	ldr	r3, [r7, #20]
 8016eca:	681a      	ldr	r2, [r3, #0]
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016ed0:	6978      	ldr	r0, [r7, #20]
 8016ed2:	f7fe fc4e 	bl	8015772 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d104      	bne.n	8016ee8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016ee4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016ee6:	e006      	b.n	8016ef6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2200      	movs	r2, #0
 8016eec:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d00a      	beq.n	8016f16 <tcp_process+0x30a>
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016f06:	687a      	ldr	r2, [r7, #4]
 8016f08:	6910      	ldr	r0, [r2, #16]
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	6879      	ldr	r1, [r7, #4]
 8016f0e:	4798      	blx	r3
 8016f10:	4603      	mov	r3, r0
 8016f12:	77bb      	strb	r3, [r7, #30]
 8016f14:	e001      	b.n	8016f1a <tcp_process+0x30e>
 8016f16:	2300      	movs	r3, #0
 8016f18:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8016f1a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016f1e:	f113 0f0d 	cmn.w	r3, #13
 8016f22:	d102      	bne.n	8016f2a <tcp_process+0x31e>
          return ERR_ABRT;
 8016f24:	f06f 030c 	mvn.w	r3, #12
 8016f28:	e250      	b.n	80173cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	8b5b      	ldrh	r3, [r3, #26]
 8016f2e:	f043 0302 	orr.w	r3, r3, #2
 8016f32:	b29a      	uxth	r2, r3
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016f38:	e23a      	b.n	80173b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016f3a:	4b98      	ldr	r3, [pc, #608]	@ (801719c <tcp_process+0x590>)
 8016f3c:	781b      	ldrb	r3, [r3, #0]
 8016f3e:	f003 0310 	and.w	r3, r3, #16
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	f000 8234 	beq.w	80173b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f48:	4b95      	ldr	r3, [pc, #596]	@ (80171a0 <tcp_process+0x594>)
 8016f4a:	6819      	ldr	r1, [r3, #0]
 8016f4c:	4b95      	ldr	r3, [pc, #596]	@ (80171a4 <tcp_process+0x598>)
 8016f4e:	881b      	ldrh	r3, [r3, #0]
 8016f50:	461a      	mov	r2, r3
 8016f52:	4b95      	ldr	r3, [pc, #596]	@ (80171a8 <tcp_process+0x59c>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f58:	4b94      	ldr	r3, [pc, #592]	@ (80171ac <tcp_process+0x5a0>)
 8016f5a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f5c:	885b      	ldrh	r3, [r3, #2]
 8016f5e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f60:	4a92      	ldr	r2, [pc, #584]	@ (80171ac <tcp_process+0x5a0>)
 8016f62:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f64:	8812      	ldrh	r2, [r2, #0]
 8016f66:	b292      	uxth	r2, r2
 8016f68:	9202      	str	r2, [sp, #8]
 8016f6a:	9301      	str	r3, [sp, #4]
 8016f6c:	4b90      	ldr	r3, [pc, #576]	@ (80171b0 <tcp_process+0x5a4>)
 8016f6e:	9300      	str	r3, [sp, #0]
 8016f70:	4b90      	ldr	r3, [pc, #576]	@ (80171b4 <tcp_process+0x5a8>)
 8016f72:	4602      	mov	r2, r0
 8016f74:	6878      	ldr	r0, [r7, #4]
 8016f76:	f003 f945 	bl	801a204 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016f80:	2b05      	cmp	r3, #5
 8016f82:	f200 8215 	bhi.w	80173b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	2200      	movs	r2, #0
 8016f8a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8016f8c:	6878      	ldr	r0, [r7, #4]
 8016f8e:	f002 ff11 	bl	8019db4 <tcp_rexmit_rto>
      break;
 8016f92:	e20d      	b.n	80173b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016f94:	4b81      	ldr	r3, [pc, #516]	@ (801719c <tcp_process+0x590>)
 8016f96:	781b      	ldrb	r3, [r3, #0]
 8016f98:	f003 0310 	and.w	r3, r3, #16
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f000 80a1 	beq.w	80170e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80171a0 <tcp_process+0x594>)
 8016fa4:	681a      	ldr	r2, [r3, #0]
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016faa:	1ad3      	subs	r3, r2, r3
 8016fac:	3b01      	subs	r3, #1
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	db7e      	blt.n	80170b0 <tcp_process+0x4a4>
 8016fb2:	4b7b      	ldr	r3, [pc, #492]	@ (80171a0 <tcp_process+0x594>)
 8016fb4:	681a      	ldr	r2, [r3, #0]
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016fba:	1ad3      	subs	r3, r2, r3
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	dc77      	bgt.n	80170b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2204      	movs	r2, #4
 8016fc4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d102      	bne.n	8016fd4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8016fce:	23fa      	movs	r3, #250	@ 0xfa
 8016fd0:	77bb      	strb	r3, [r7, #30]
 8016fd2:	e01d      	b.n	8017010 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016fd8:	699b      	ldr	r3, [r3, #24]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d106      	bne.n	8016fec <tcp_process+0x3e0>
 8016fde:	4b76      	ldr	r3, [pc, #472]	@ (80171b8 <tcp_process+0x5ac>)
 8016fe0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8016fe4:	4975      	ldr	r1, [pc, #468]	@ (80171bc <tcp_process+0x5b0>)
 8016fe6:	4876      	ldr	r0, [pc, #472]	@ (80171c0 <tcp_process+0x5b4>)
 8016fe8:	f007 fed0 	bl	801ed8c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016ff0:	699b      	ldr	r3, [r3, #24]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d00a      	beq.n	801700c <tcp_process+0x400>
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016ffa:	699b      	ldr	r3, [r3, #24]
 8016ffc:	687a      	ldr	r2, [r7, #4]
 8016ffe:	6910      	ldr	r0, [r2, #16]
 8017000:	2200      	movs	r2, #0
 8017002:	6879      	ldr	r1, [r7, #4]
 8017004:	4798      	blx	r3
 8017006:	4603      	mov	r3, r0
 8017008:	77bb      	strb	r3, [r7, #30]
 801700a:	e001      	b.n	8017010 <tcp_process+0x404>
 801700c:	23f0      	movs	r3, #240	@ 0xf0
 801700e:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8017010:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d00a      	beq.n	801702e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017018:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801701c:	f113 0f0d 	cmn.w	r3, #13
 8017020:	d002      	beq.n	8017028 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017022:	6878      	ldr	r0, [r7, #4]
 8017024:	f7fd fcc2 	bl	80149ac <tcp_abort>
            }
            return ERR_ABRT;
 8017028:	f06f 030c 	mvn.w	r3, #12
 801702c:	e1ce      	b.n	80173cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801702e:	6878      	ldr	r0, [r7, #4]
 8017030:	f000 fae0 	bl	80175f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017034:	4b63      	ldr	r3, [pc, #396]	@ (80171c4 <tcp_process+0x5b8>)
 8017036:	881b      	ldrh	r3, [r3, #0]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d005      	beq.n	8017048 <tcp_process+0x43c>
            recv_acked--;
 801703c:	4b61      	ldr	r3, [pc, #388]	@ (80171c4 <tcp_process+0x5b8>)
 801703e:	881b      	ldrh	r3, [r3, #0]
 8017040:	3b01      	subs	r3, #1
 8017042:	b29a      	uxth	r2, r3
 8017044:	4b5f      	ldr	r3, [pc, #380]	@ (80171c4 <tcp_process+0x5b8>)
 8017046:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801704c:	009a      	lsls	r2, r3, #2
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017052:	005b      	lsls	r3, r3, #1
 8017054:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017058:	428b      	cmp	r3, r1
 801705a:	bf38      	it	cc
 801705c:	460b      	movcc	r3, r1
 801705e:	429a      	cmp	r2, r3
 8017060:	d204      	bcs.n	801706c <tcp_process+0x460>
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017066:	009b      	lsls	r3, r3, #2
 8017068:	b29b      	uxth	r3, r3
 801706a:	e00d      	b.n	8017088 <tcp_process+0x47c>
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017070:	005b      	lsls	r3, r3, #1
 8017072:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017076:	4293      	cmp	r3, r2
 8017078:	d904      	bls.n	8017084 <tcp_process+0x478>
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801707e:	005b      	lsls	r3, r3, #1
 8017080:	b29b      	uxth	r3, r3
 8017082:	e001      	b.n	8017088 <tcp_process+0x47c>
 8017084:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017088:	687a      	ldr	r2, [r7, #4]
 801708a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801708e:	4b4e      	ldr	r3, [pc, #312]	@ (80171c8 <tcp_process+0x5bc>)
 8017090:	781b      	ldrb	r3, [r3, #0]
 8017092:	f003 0320 	and.w	r3, r3, #32
 8017096:	2b00      	cmp	r3, #0
 8017098:	d037      	beq.n	801710a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	8b5b      	ldrh	r3, [r3, #26]
 801709e:	f043 0302 	orr.w	r3, r3, #2
 80170a2:	b29a      	uxth	r2, r3
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	2207      	movs	r2, #7
 80170ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80170ae:	e02c      	b.n	801710a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80170b0:	4b3b      	ldr	r3, [pc, #236]	@ (80171a0 <tcp_process+0x594>)
 80170b2:	6819      	ldr	r1, [r3, #0]
 80170b4:	4b3b      	ldr	r3, [pc, #236]	@ (80171a4 <tcp_process+0x598>)
 80170b6:	881b      	ldrh	r3, [r3, #0]
 80170b8:	461a      	mov	r2, r3
 80170ba:	4b3b      	ldr	r3, [pc, #236]	@ (80171a8 <tcp_process+0x59c>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80170c0:	4b3a      	ldr	r3, [pc, #232]	@ (80171ac <tcp_process+0x5a0>)
 80170c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80170c4:	885b      	ldrh	r3, [r3, #2]
 80170c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80170c8:	4a38      	ldr	r2, [pc, #224]	@ (80171ac <tcp_process+0x5a0>)
 80170ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80170cc:	8812      	ldrh	r2, [r2, #0]
 80170ce:	b292      	uxth	r2, r2
 80170d0:	9202      	str	r2, [sp, #8]
 80170d2:	9301      	str	r3, [sp, #4]
 80170d4:	4b36      	ldr	r3, [pc, #216]	@ (80171b0 <tcp_process+0x5a4>)
 80170d6:	9300      	str	r3, [sp, #0]
 80170d8:	4b36      	ldr	r3, [pc, #216]	@ (80171b4 <tcp_process+0x5a8>)
 80170da:	4602      	mov	r2, r0
 80170dc:	6878      	ldr	r0, [r7, #4]
 80170de:	f003 f891 	bl	801a204 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80170e2:	e167      	b.n	80173b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80170e4:	4b2d      	ldr	r3, [pc, #180]	@ (801719c <tcp_process+0x590>)
 80170e6:	781b      	ldrb	r3, [r3, #0]
 80170e8:	f003 0302 	and.w	r3, r3, #2
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	f000 8161 	beq.w	80173b4 <tcp_process+0x7a8>
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170f6:	1e5a      	subs	r2, r3, #1
 80170f8:	4b2b      	ldr	r3, [pc, #172]	@ (80171a8 <tcp_process+0x59c>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	429a      	cmp	r2, r3
 80170fe:	f040 8159 	bne.w	80173b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017102:	6878      	ldr	r0, [r7, #4]
 8017104:	f002 fe78 	bl	8019df8 <tcp_rexmit>
      break;
 8017108:	e154      	b.n	80173b4 <tcp_process+0x7a8>
 801710a:	e153      	b.n	80173b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801710c:	6878      	ldr	r0, [r7, #4]
 801710e:	f000 fa71 	bl	80175f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017112:	4b2d      	ldr	r3, [pc, #180]	@ (80171c8 <tcp_process+0x5bc>)
 8017114:	781b      	ldrb	r3, [r3, #0]
 8017116:	f003 0320 	and.w	r3, r3, #32
 801711a:	2b00      	cmp	r3, #0
 801711c:	f000 814c 	beq.w	80173b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	8b5b      	ldrh	r3, [r3, #26]
 8017124:	f043 0302 	orr.w	r3, r3, #2
 8017128:	b29a      	uxth	r2, r3
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	2207      	movs	r2, #7
 8017132:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017134:	e140      	b.n	80173b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	f000 fa5c 	bl	80175f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801713c:	4b22      	ldr	r3, [pc, #136]	@ (80171c8 <tcp_process+0x5bc>)
 801713e:	781b      	ldrb	r3, [r3, #0]
 8017140:	f003 0320 	and.w	r3, r3, #32
 8017144:	2b00      	cmp	r3, #0
 8017146:	d071      	beq.n	801722c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017148:	4b14      	ldr	r3, [pc, #80]	@ (801719c <tcp_process+0x590>)
 801714a:	781b      	ldrb	r3, [r3, #0]
 801714c:	f003 0310 	and.w	r3, r3, #16
 8017150:	2b00      	cmp	r3, #0
 8017152:	d060      	beq.n	8017216 <tcp_process+0x60a>
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017158:	4b11      	ldr	r3, [pc, #68]	@ (80171a0 <tcp_process+0x594>)
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	429a      	cmp	r2, r3
 801715e:	d15a      	bne.n	8017216 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017164:	2b00      	cmp	r3, #0
 8017166:	d156      	bne.n	8017216 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	8b5b      	ldrh	r3, [r3, #26]
 801716c:	f043 0302 	orr.w	r3, r3, #2
 8017170:	b29a      	uxth	r2, r3
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017176:	6878      	ldr	r0, [r7, #4]
 8017178:	f7fe fdb6 	bl	8015ce8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801717c:	4b13      	ldr	r3, [pc, #76]	@ (80171cc <tcp_process+0x5c0>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	687a      	ldr	r2, [r7, #4]
 8017182:	429a      	cmp	r2, r3
 8017184:	d105      	bne.n	8017192 <tcp_process+0x586>
 8017186:	4b11      	ldr	r3, [pc, #68]	@ (80171cc <tcp_process+0x5c0>)
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	68db      	ldr	r3, [r3, #12]
 801718c:	4a0f      	ldr	r2, [pc, #60]	@ (80171cc <tcp_process+0x5c0>)
 801718e:	6013      	str	r3, [r2, #0]
 8017190:	e02e      	b.n	80171f0 <tcp_process+0x5e4>
 8017192:	4b0e      	ldr	r3, [pc, #56]	@ (80171cc <tcp_process+0x5c0>)
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	613b      	str	r3, [r7, #16]
 8017198:	e027      	b.n	80171ea <tcp_process+0x5de>
 801719a:	bf00      	nop
 801719c:	200227e4 	.word	0x200227e4
 80171a0:	200227dc 	.word	0x200227dc
 80171a4:	200227e2 	.word	0x200227e2
 80171a8:	200227d8 	.word	0x200227d8
 80171ac:	200227c8 	.word	0x200227c8
 80171b0:	2001f66c 	.word	0x2001f66c
 80171b4:	2001f670 	.word	0x2001f670
 80171b8:	08021fac 	.word	0x08021fac
 80171bc:	0802224c 	.word	0x0802224c
 80171c0:	08021ff8 	.word	0x08021ff8
 80171c4:	200227e0 	.word	0x200227e0
 80171c8:	200227e5 	.word	0x200227e5
 80171cc:	200227a8 	.word	0x200227a8
 80171d0:	693b      	ldr	r3, [r7, #16]
 80171d2:	68db      	ldr	r3, [r3, #12]
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d104      	bne.n	80171e4 <tcp_process+0x5d8>
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	68da      	ldr	r2, [r3, #12]
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	60da      	str	r2, [r3, #12]
 80171e2:	e005      	b.n	80171f0 <tcp_process+0x5e4>
 80171e4:	693b      	ldr	r3, [r7, #16]
 80171e6:	68db      	ldr	r3, [r3, #12]
 80171e8:	613b      	str	r3, [r7, #16]
 80171ea:	693b      	ldr	r3, [r7, #16]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d1ef      	bne.n	80171d0 <tcp_process+0x5c4>
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	2200      	movs	r2, #0
 80171f4:	60da      	str	r2, [r3, #12]
 80171f6:	4b77      	ldr	r3, [pc, #476]	@ (80173d4 <tcp_process+0x7c8>)
 80171f8:	2201      	movs	r2, #1
 80171fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	220a      	movs	r2, #10
 8017200:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017202:	4b75      	ldr	r3, [pc, #468]	@ (80173d8 <tcp_process+0x7cc>)
 8017204:	681a      	ldr	r2, [r3, #0]
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	60da      	str	r2, [r3, #12]
 801720a:	4a73      	ldr	r2, [pc, #460]	@ (80173d8 <tcp_process+0x7cc>)
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	6013      	str	r3, [r2, #0]
 8017210:	f003 f9ba 	bl	801a588 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017214:	e0d2      	b.n	80173bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	8b5b      	ldrh	r3, [r3, #26]
 801721a:	f043 0302 	orr.w	r3, r3, #2
 801721e:	b29a      	uxth	r2, r3
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2208      	movs	r2, #8
 8017228:	751a      	strb	r2, [r3, #20]
      break;
 801722a:	e0c7      	b.n	80173bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801722c:	4b6b      	ldr	r3, [pc, #428]	@ (80173dc <tcp_process+0x7d0>)
 801722e:	781b      	ldrb	r3, [r3, #0]
 8017230:	f003 0310 	and.w	r3, r3, #16
 8017234:	2b00      	cmp	r3, #0
 8017236:	f000 80c1 	beq.w	80173bc <tcp_process+0x7b0>
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801723e:	4b68      	ldr	r3, [pc, #416]	@ (80173e0 <tcp_process+0x7d4>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	429a      	cmp	r2, r3
 8017244:	f040 80ba 	bne.w	80173bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801724c:	2b00      	cmp	r3, #0
 801724e:	f040 80b5 	bne.w	80173bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2206      	movs	r2, #6
 8017256:	751a      	strb	r2, [r3, #20]
      break;
 8017258:	e0b0      	b.n	80173bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f000 f9ca 	bl	80175f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017260:	4b60      	ldr	r3, [pc, #384]	@ (80173e4 <tcp_process+0x7d8>)
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	f003 0320 	and.w	r3, r3, #32
 8017268:	2b00      	cmp	r3, #0
 801726a:	f000 80a9 	beq.w	80173c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	8b5b      	ldrh	r3, [r3, #26]
 8017272:	f043 0302 	orr.w	r3, r3, #2
 8017276:	b29a      	uxth	r2, r3
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f7fe fd33 	bl	8015ce8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017282:	4b59      	ldr	r3, [pc, #356]	@ (80173e8 <tcp_process+0x7dc>)
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	687a      	ldr	r2, [r7, #4]
 8017288:	429a      	cmp	r2, r3
 801728a:	d105      	bne.n	8017298 <tcp_process+0x68c>
 801728c:	4b56      	ldr	r3, [pc, #344]	@ (80173e8 <tcp_process+0x7dc>)
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	68db      	ldr	r3, [r3, #12]
 8017292:	4a55      	ldr	r2, [pc, #340]	@ (80173e8 <tcp_process+0x7dc>)
 8017294:	6013      	str	r3, [r2, #0]
 8017296:	e013      	b.n	80172c0 <tcp_process+0x6b4>
 8017298:	4b53      	ldr	r3, [pc, #332]	@ (80173e8 <tcp_process+0x7dc>)
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	60fb      	str	r3, [r7, #12]
 801729e:	e00c      	b.n	80172ba <tcp_process+0x6ae>
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	68db      	ldr	r3, [r3, #12]
 80172a4:	687a      	ldr	r2, [r7, #4]
 80172a6:	429a      	cmp	r2, r3
 80172a8:	d104      	bne.n	80172b4 <tcp_process+0x6a8>
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	68da      	ldr	r2, [r3, #12]
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	60da      	str	r2, [r3, #12]
 80172b2:	e005      	b.n	80172c0 <tcp_process+0x6b4>
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	68db      	ldr	r3, [r3, #12]
 80172b8:	60fb      	str	r3, [r7, #12]
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d1ef      	bne.n	80172a0 <tcp_process+0x694>
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	2200      	movs	r2, #0
 80172c4:	60da      	str	r2, [r3, #12]
 80172c6:	4b43      	ldr	r3, [pc, #268]	@ (80173d4 <tcp_process+0x7c8>)
 80172c8:	2201      	movs	r2, #1
 80172ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	220a      	movs	r2, #10
 80172d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80172d2:	4b41      	ldr	r3, [pc, #260]	@ (80173d8 <tcp_process+0x7cc>)
 80172d4:	681a      	ldr	r2, [r3, #0]
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	60da      	str	r2, [r3, #12]
 80172da:	4a3f      	ldr	r2, [pc, #252]	@ (80173d8 <tcp_process+0x7cc>)
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	6013      	str	r3, [r2, #0]
 80172e0:	f003 f952 	bl	801a588 <tcp_timer_needed>
      }
      break;
 80172e4:	e06c      	b.n	80173c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80172e6:	6878      	ldr	r0, [r7, #4]
 80172e8:	f000 f984 	bl	80175f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80172ec:	4b3b      	ldr	r3, [pc, #236]	@ (80173dc <tcp_process+0x7d0>)
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	f003 0310 	and.w	r3, r3, #16
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d065      	beq.n	80173c4 <tcp_process+0x7b8>
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80172fc:	4b38      	ldr	r3, [pc, #224]	@ (80173e0 <tcp_process+0x7d4>)
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	429a      	cmp	r2, r3
 8017302:	d15f      	bne.n	80173c4 <tcp_process+0x7b8>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017308:	2b00      	cmp	r3, #0
 801730a:	d15b      	bne.n	80173c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801730c:	6878      	ldr	r0, [r7, #4]
 801730e:	f7fe fceb 	bl	8015ce8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017312:	4b35      	ldr	r3, [pc, #212]	@ (80173e8 <tcp_process+0x7dc>)
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	687a      	ldr	r2, [r7, #4]
 8017318:	429a      	cmp	r2, r3
 801731a:	d105      	bne.n	8017328 <tcp_process+0x71c>
 801731c:	4b32      	ldr	r3, [pc, #200]	@ (80173e8 <tcp_process+0x7dc>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	68db      	ldr	r3, [r3, #12]
 8017322:	4a31      	ldr	r2, [pc, #196]	@ (80173e8 <tcp_process+0x7dc>)
 8017324:	6013      	str	r3, [r2, #0]
 8017326:	e013      	b.n	8017350 <tcp_process+0x744>
 8017328:	4b2f      	ldr	r3, [pc, #188]	@ (80173e8 <tcp_process+0x7dc>)
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	61bb      	str	r3, [r7, #24]
 801732e:	e00c      	b.n	801734a <tcp_process+0x73e>
 8017330:	69bb      	ldr	r3, [r7, #24]
 8017332:	68db      	ldr	r3, [r3, #12]
 8017334:	687a      	ldr	r2, [r7, #4]
 8017336:	429a      	cmp	r2, r3
 8017338:	d104      	bne.n	8017344 <tcp_process+0x738>
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	68da      	ldr	r2, [r3, #12]
 801733e:	69bb      	ldr	r3, [r7, #24]
 8017340:	60da      	str	r2, [r3, #12]
 8017342:	e005      	b.n	8017350 <tcp_process+0x744>
 8017344:	69bb      	ldr	r3, [r7, #24]
 8017346:	68db      	ldr	r3, [r3, #12]
 8017348:	61bb      	str	r3, [r7, #24]
 801734a:	69bb      	ldr	r3, [r7, #24]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d1ef      	bne.n	8017330 <tcp_process+0x724>
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2200      	movs	r2, #0
 8017354:	60da      	str	r2, [r3, #12]
 8017356:	4b1f      	ldr	r3, [pc, #124]	@ (80173d4 <tcp_process+0x7c8>)
 8017358:	2201      	movs	r2, #1
 801735a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	220a      	movs	r2, #10
 8017360:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017362:	4b1d      	ldr	r3, [pc, #116]	@ (80173d8 <tcp_process+0x7cc>)
 8017364:	681a      	ldr	r2, [r3, #0]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	60da      	str	r2, [r3, #12]
 801736a:	4a1b      	ldr	r2, [pc, #108]	@ (80173d8 <tcp_process+0x7cc>)
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	6013      	str	r3, [r2, #0]
 8017370:	f003 f90a 	bl	801a588 <tcp_timer_needed>
      }
      break;
 8017374:	e026      	b.n	80173c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017376:	6878      	ldr	r0, [r7, #4]
 8017378:	f000 f93c 	bl	80175f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801737c:	4b17      	ldr	r3, [pc, #92]	@ (80173dc <tcp_process+0x7d0>)
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	f003 0310 	and.w	r3, r3, #16
 8017384:	2b00      	cmp	r3, #0
 8017386:	d01f      	beq.n	80173c8 <tcp_process+0x7bc>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801738c:	4b14      	ldr	r3, [pc, #80]	@ (80173e0 <tcp_process+0x7d4>)
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	429a      	cmp	r2, r3
 8017392:	d119      	bne.n	80173c8 <tcp_process+0x7bc>
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017398:	2b00      	cmp	r3, #0
 801739a:	d115      	bne.n	80173c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801739c:	4b11      	ldr	r3, [pc, #68]	@ (80173e4 <tcp_process+0x7d8>)
 801739e:	781b      	ldrb	r3, [r3, #0]
 80173a0:	f043 0310 	orr.w	r3, r3, #16
 80173a4:	b2da      	uxtb	r2, r3
 80173a6:	4b0f      	ldr	r3, [pc, #60]	@ (80173e4 <tcp_process+0x7d8>)
 80173a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80173aa:	e00d      	b.n	80173c8 <tcp_process+0x7bc>
    default:
      break;
 80173ac:	bf00      	nop
 80173ae:	e00c      	b.n	80173ca <tcp_process+0x7be>
      break;
 80173b0:	bf00      	nop
 80173b2:	e00a      	b.n	80173ca <tcp_process+0x7be>
      break;
 80173b4:	bf00      	nop
 80173b6:	e008      	b.n	80173ca <tcp_process+0x7be>
      break;
 80173b8:	bf00      	nop
 80173ba:	e006      	b.n	80173ca <tcp_process+0x7be>
      break;
 80173bc:	bf00      	nop
 80173be:	e004      	b.n	80173ca <tcp_process+0x7be>
      break;
 80173c0:	bf00      	nop
 80173c2:	e002      	b.n	80173ca <tcp_process+0x7be>
      break;
 80173c4:	bf00      	nop
 80173c6:	e000      	b.n	80173ca <tcp_process+0x7be>
      break;
 80173c8:	bf00      	nop
  }
  return ERR_OK;
 80173ca:	2300      	movs	r3, #0
}
 80173cc:	4618      	mov	r0, r3
 80173ce:	3724      	adds	r7, #36	@ 0x24
 80173d0:	46bd      	mov	sp, r7
 80173d2:	bd90      	pop	{r4, r7, pc}
 80173d4:	200227b0 	.word	0x200227b0
 80173d8:	200227ac 	.word	0x200227ac
 80173dc:	200227e4 	.word	0x200227e4
 80173e0:	200227dc 	.word	0x200227dc
 80173e4:	200227e5 	.word	0x200227e5
 80173e8:	200227a8 	.word	0x200227a8

080173ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80173ec:	b590      	push	{r4, r7, lr}
 80173ee:	b085      	sub	sp, #20
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
 80173f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d106      	bne.n	801740a <tcp_oos_insert_segment+0x1e>
 80173fc:	4b3b      	ldr	r3, [pc, #236]	@ (80174ec <tcp_oos_insert_segment+0x100>)
 80173fe:	f240 421f 	movw	r2, #1055	@ 0x41f
 8017402:	493b      	ldr	r1, [pc, #236]	@ (80174f0 <tcp_oos_insert_segment+0x104>)
 8017404:	483b      	ldr	r0, [pc, #236]	@ (80174f4 <tcp_oos_insert_segment+0x108>)
 8017406:	f007 fcc1 	bl	801ed8c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	691b      	ldr	r3, [r3, #16]
 801740e:	899b      	ldrh	r3, [r3, #12]
 8017410:	b29b      	uxth	r3, r3
 8017412:	4618      	mov	r0, r3
 8017414:	f7fa ffe6 	bl	80123e4 <lwip_htons>
 8017418:	4603      	mov	r3, r0
 801741a:	b2db      	uxtb	r3, r3
 801741c:	f003 0301 	and.w	r3, r3, #1
 8017420:	2b00      	cmp	r3, #0
 8017422:	d028      	beq.n	8017476 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017424:	6838      	ldr	r0, [r7, #0]
 8017426:	f7fe f98f 	bl	8015748 <tcp_segs_free>
    next = NULL;
 801742a:	2300      	movs	r3, #0
 801742c:	603b      	str	r3, [r7, #0]
 801742e:	e056      	b.n	80174de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	691b      	ldr	r3, [r3, #16]
 8017434:	899b      	ldrh	r3, [r3, #12]
 8017436:	b29b      	uxth	r3, r3
 8017438:	4618      	mov	r0, r3
 801743a:	f7fa ffd3 	bl	80123e4 <lwip_htons>
 801743e:	4603      	mov	r3, r0
 8017440:	b2db      	uxtb	r3, r3
 8017442:	f003 0301 	and.w	r3, r3, #1
 8017446:	2b00      	cmp	r3, #0
 8017448:	d00d      	beq.n	8017466 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	691b      	ldr	r3, [r3, #16]
 801744e:	899b      	ldrh	r3, [r3, #12]
 8017450:	b29c      	uxth	r4, r3
 8017452:	2001      	movs	r0, #1
 8017454:	f7fa ffc6 	bl	80123e4 <lwip_htons>
 8017458:	4603      	mov	r3, r0
 801745a:	461a      	mov	r2, r3
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	691b      	ldr	r3, [r3, #16]
 8017460:	4322      	orrs	r2, r4
 8017462:	b292      	uxth	r2, r2
 8017464:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017466:	683b      	ldr	r3, [r7, #0]
 8017468:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017470:	68f8      	ldr	r0, [r7, #12]
 8017472:	f7fe f97e 	bl	8015772 <tcp_seg_free>
    while (next &&
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d00e      	beq.n	801749a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	891b      	ldrh	r3, [r3, #8]
 8017480:	461a      	mov	r2, r3
 8017482:	4b1d      	ldr	r3, [pc, #116]	@ (80174f8 <tcp_oos_insert_segment+0x10c>)
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	441a      	add	r2, r3
 8017488:	683b      	ldr	r3, [r7, #0]
 801748a:	691b      	ldr	r3, [r3, #16]
 801748c:	685b      	ldr	r3, [r3, #4]
 801748e:	6839      	ldr	r1, [r7, #0]
 8017490:	8909      	ldrh	r1, [r1, #8]
 8017492:	440b      	add	r3, r1
 8017494:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017496:	2b00      	cmp	r3, #0
 8017498:	daca      	bge.n	8017430 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d01e      	beq.n	80174de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	891b      	ldrh	r3, [r3, #8]
 80174a4:	461a      	mov	r2, r3
 80174a6:	4b14      	ldr	r3, [pc, #80]	@ (80174f8 <tcp_oos_insert_segment+0x10c>)
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	441a      	add	r2, r3
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	691b      	ldr	r3, [r3, #16]
 80174b0:	685b      	ldr	r3, [r3, #4]
 80174b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	dd12      	ble.n	80174de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	691b      	ldr	r3, [r3, #16]
 80174bc:	685b      	ldr	r3, [r3, #4]
 80174be:	b29a      	uxth	r2, r3
 80174c0:	4b0d      	ldr	r3, [pc, #52]	@ (80174f8 <tcp_oos_insert_segment+0x10c>)
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	b29b      	uxth	r3, r3
 80174c6:	1ad3      	subs	r3, r2, r3
 80174c8:	b29a      	uxth	r2, r3
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	685a      	ldr	r2, [r3, #4]
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	891b      	ldrh	r3, [r3, #8]
 80174d6:	4619      	mov	r1, r3
 80174d8:	4610      	mov	r0, r2
 80174da:	f7fc fae1 	bl	8013aa0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	683a      	ldr	r2, [r7, #0]
 80174e2:	601a      	str	r2, [r3, #0]
}
 80174e4:	bf00      	nop
 80174e6:	3714      	adds	r7, #20
 80174e8:	46bd      	mov	sp, r7
 80174ea:	bd90      	pop	{r4, r7, pc}
 80174ec:	08021fac 	.word	0x08021fac
 80174f0:	0802226c 	.word	0x0802226c
 80174f4:	08021ff8 	.word	0x08021ff8
 80174f8:	200227d8 	.word	0x200227d8

080174fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80174fc:	b5b0      	push	{r4, r5, r7, lr}
 80174fe:	b086      	sub	sp, #24
 8017500:	af00      	add	r7, sp, #0
 8017502:	60f8      	str	r0, [r7, #12]
 8017504:	60b9      	str	r1, [r7, #8]
 8017506:	607a      	str	r2, [r7, #4]
 8017508:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801750a:	e03e      	b.n	801758a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801750c:	68bb      	ldr	r3, [r7, #8]
 801750e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017510:	68bb      	ldr	r3, [r7, #8]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017516:	697b      	ldr	r3, [r7, #20]
 8017518:	685b      	ldr	r3, [r3, #4]
 801751a:	4618      	mov	r0, r3
 801751c:	f7fc fcd4 	bl	8013ec8 <pbuf_clen>
 8017520:	4603      	mov	r3, r0
 8017522:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801752a:	8a7a      	ldrh	r2, [r7, #18]
 801752c:	429a      	cmp	r2, r3
 801752e:	d906      	bls.n	801753e <tcp_free_acked_segments+0x42>
 8017530:	4b2a      	ldr	r3, [pc, #168]	@ (80175dc <tcp_free_acked_segments+0xe0>)
 8017532:	f240 4257 	movw	r2, #1111	@ 0x457
 8017536:	492a      	ldr	r1, [pc, #168]	@ (80175e0 <tcp_free_acked_segments+0xe4>)
 8017538:	482a      	ldr	r0, [pc, #168]	@ (80175e4 <tcp_free_acked_segments+0xe8>)
 801753a:	f007 fc27 	bl	801ed8c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017544:	8a7b      	ldrh	r3, [r7, #18]
 8017546:	1ad3      	subs	r3, r2, r3
 8017548:	b29a      	uxth	r2, r3
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017550:	697b      	ldr	r3, [r7, #20]
 8017552:	891a      	ldrh	r2, [r3, #8]
 8017554:	4b24      	ldr	r3, [pc, #144]	@ (80175e8 <tcp_free_acked_segments+0xec>)
 8017556:	881b      	ldrh	r3, [r3, #0]
 8017558:	4413      	add	r3, r2
 801755a:	b29a      	uxth	r2, r3
 801755c:	4b22      	ldr	r3, [pc, #136]	@ (80175e8 <tcp_free_acked_segments+0xec>)
 801755e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017560:	6978      	ldr	r0, [r7, #20]
 8017562:	f7fe f906 	bl	8015772 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801756c:	2b00      	cmp	r3, #0
 801756e:	d00c      	beq.n	801758a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017570:	68bb      	ldr	r3, [r7, #8]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d109      	bne.n	801758a <tcp_free_acked_segments+0x8e>
 8017576:	683b      	ldr	r3, [r7, #0]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d106      	bne.n	801758a <tcp_free_acked_segments+0x8e>
 801757c:	4b17      	ldr	r3, [pc, #92]	@ (80175dc <tcp_free_acked_segments+0xe0>)
 801757e:	f240 4261 	movw	r2, #1121	@ 0x461
 8017582:	491a      	ldr	r1, [pc, #104]	@ (80175ec <tcp_free_acked_segments+0xf0>)
 8017584:	4817      	ldr	r0, [pc, #92]	@ (80175e4 <tcp_free_acked_segments+0xe8>)
 8017586:	f007 fc01 	bl	801ed8c <iprintf>
  while (seg_list != NULL &&
 801758a:	68bb      	ldr	r3, [r7, #8]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d020      	beq.n	80175d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017590:	68bb      	ldr	r3, [r7, #8]
 8017592:	691b      	ldr	r3, [r3, #16]
 8017594:	685b      	ldr	r3, [r3, #4]
 8017596:	4618      	mov	r0, r3
 8017598:	f7fa ff3a 	bl	8012410 <lwip_htonl>
 801759c:	4604      	mov	r4, r0
 801759e:	68bb      	ldr	r3, [r7, #8]
 80175a0:	891b      	ldrh	r3, [r3, #8]
 80175a2:	461d      	mov	r5, r3
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	691b      	ldr	r3, [r3, #16]
 80175a8:	899b      	ldrh	r3, [r3, #12]
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7fa ff19 	bl	80123e4 <lwip_htons>
 80175b2:	4603      	mov	r3, r0
 80175b4:	b2db      	uxtb	r3, r3
 80175b6:	f003 0303 	and.w	r3, r3, #3
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d001      	beq.n	80175c2 <tcp_free_acked_segments+0xc6>
 80175be:	2301      	movs	r3, #1
 80175c0:	e000      	b.n	80175c4 <tcp_free_acked_segments+0xc8>
 80175c2:	2300      	movs	r3, #0
 80175c4:	442b      	add	r3, r5
 80175c6:	18e2      	adds	r2, r4, r3
 80175c8:	4b09      	ldr	r3, [pc, #36]	@ (80175f0 <tcp_free_acked_segments+0xf4>)
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	dd9c      	ble.n	801750c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80175d2:	68bb      	ldr	r3, [r7, #8]
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3718      	adds	r7, #24
 80175d8:	46bd      	mov	sp, r7
 80175da:	bdb0      	pop	{r4, r5, r7, pc}
 80175dc:	08021fac 	.word	0x08021fac
 80175e0:	08022294 	.word	0x08022294
 80175e4:	08021ff8 	.word	0x08021ff8
 80175e8:	200227e0 	.word	0x200227e0
 80175ec:	080222bc 	.word	0x080222bc
 80175f0:	200227dc 	.word	0x200227dc

080175f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80175f4:	b5b0      	push	{r4, r5, r7, lr}
 80175f6:	b094      	sub	sp, #80	@ 0x50
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80175fc:	2300      	movs	r3, #0
 80175fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d106      	bne.n	8017614 <tcp_receive+0x20>
 8017606:	4b91      	ldr	r3, [pc, #580]	@ (801784c <tcp_receive+0x258>)
 8017608:	f240 427b 	movw	r2, #1147	@ 0x47b
 801760c:	4990      	ldr	r1, [pc, #576]	@ (8017850 <tcp_receive+0x25c>)
 801760e:	4891      	ldr	r0, [pc, #580]	@ (8017854 <tcp_receive+0x260>)
 8017610:	f007 fbbc 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	7d1b      	ldrb	r3, [r3, #20]
 8017618:	2b03      	cmp	r3, #3
 801761a:	d806      	bhi.n	801762a <tcp_receive+0x36>
 801761c:	4b8b      	ldr	r3, [pc, #556]	@ (801784c <tcp_receive+0x258>)
 801761e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8017622:	498d      	ldr	r1, [pc, #564]	@ (8017858 <tcp_receive+0x264>)
 8017624:	488b      	ldr	r0, [pc, #556]	@ (8017854 <tcp_receive+0x260>)
 8017626:	f007 fbb1 	bl	801ed8c <iprintf>

  if (flags & TCP_ACK) {
 801762a:	4b8c      	ldr	r3, [pc, #560]	@ (801785c <tcp_receive+0x268>)
 801762c:	781b      	ldrb	r3, [r3, #0]
 801762e:	f003 0310 	and.w	r3, r3, #16
 8017632:	2b00      	cmp	r3, #0
 8017634:	f000 8264 	beq.w	8017b00 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801763e:	461a      	mov	r2, r3
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017644:	4413      	add	r3, r2
 8017646:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801764c:	4b84      	ldr	r3, [pc, #528]	@ (8017860 <tcp_receive+0x26c>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	1ad3      	subs	r3, r2, r3
 8017652:	2b00      	cmp	r3, #0
 8017654:	db1b      	blt.n	801768e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801765a:	4b81      	ldr	r3, [pc, #516]	@ (8017860 <tcp_receive+0x26c>)
 801765c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801765e:	429a      	cmp	r2, r3
 8017660:	d106      	bne.n	8017670 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017666:	4b7f      	ldr	r3, [pc, #508]	@ (8017864 <tcp_receive+0x270>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	1ad3      	subs	r3, r2, r3
 801766c:	2b00      	cmp	r3, #0
 801766e:	db0e      	blt.n	801768e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017674:	4b7b      	ldr	r3, [pc, #492]	@ (8017864 <tcp_receive+0x270>)
 8017676:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017678:	429a      	cmp	r2, r3
 801767a:	d125      	bne.n	80176c8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801767c:	4b7a      	ldr	r3, [pc, #488]	@ (8017868 <tcp_receive+0x274>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	89db      	ldrh	r3, [r3, #14]
 8017682:	b29a      	uxth	r2, r3
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801768a:	429a      	cmp	r2, r3
 801768c:	d91c      	bls.n	80176c8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801768e:	4b76      	ldr	r3, [pc, #472]	@ (8017868 <tcp_receive+0x274>)
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	89db      	ldrh	r3, [r3, #14]
 8017694:	b29a      	uxth	r2, r3
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80176a8:	429a      	cmp	r2, r3
 80176aa:	d205      	bcs.n	80176b8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80176b8:	4b69      	ldr	r3, [pc, #420]	@ (8017860 <tcp_receive+0x26c>)
 80176ba:	681a      	ldr	r2, [r3, #0]
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80176c0:	4b68      	ldr	r3, [pc, #416]	@ (8017864 <tcp_receive+0x270>)
 80176c2:	681a      	ldr	r2, [r3, #0]
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80176c8:	4b66      	ldr	r3, [pc, #408]	@ (8017864 <tcp_receive+0x270>)
 80176ca:	681a      	ldr	r2, [r3, #0]
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80176d0:	1ad3      	subs	r3, r2, r3
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	dc58      	bgt.n	8017788 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80176d6:	4b65      	ldr	r3, [pc, #404]	@ (801786c <tcp_receive+0x278>)
 80176d8:	881b      	ldrh	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d14b      	bne.n	8017776 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80176e2:	687a      	ldr	r2, [r7, #4]
 80176e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80176e8:	4413      	add	r3, r2
 80176ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80176ec:	429a      	cmp	r2, r3
 80176ee:	d142      	bne.n	8017776 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	db3d      	blt.n	8017776 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80176fe:	4b59      	ldr	r3, [pc, #356]	@ (8017864 <tcp_receive+0x270>)
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	429a      	cmp	r2, r3
 8017704:	d137      	bne.n	8017776 <tcp_receive+0x182>
              found_dupack = 1;
 8017706:	2301      	movs	r3, #1
 8017708:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017710:	2bff      	cmp	r3, #255	@ 0xff
 8017712:	d007      	beq.n	8017724 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801771a:	3301      	adds	r3, #1
 801771c:	b2da      	uxtb	r2, r3
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801772a:	2b03      	cmp	r3, #3
 801772c:	d91b      	bls.n	8017766 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017738:	4413      	add	r3, r2
 801773a:	b29a      	uxth	r2, r3
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017742:	429a      	cmp	r2, r3
 8017744:	d30a      	bcc.n	801775c <tcp_receive+0x168>
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017750:	4413      	add	r3, r2
 8017752:	b29a      	uxth	r2, r3
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801775a:	e004      	b.n	8017766 <tcp_receive+0x172>
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017762:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801776c:	2b02      	cmp	r3, #2
 801776e:	d902      	bls.n	8017776 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f002 fbad 	bl	8019ed0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017778:	2b00      	cmp	r3, #0
 801777a:	f040 8161 	bne.w	8017a40 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2200      	movs	r2, #0
 8017782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017786:	e15b      	b.n	8017a40 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017788:	4b36      	ldr	r3, [pc, #216]	@ (8017864 <tcp_receive+0x270>)
 801778a:	681a      	ldr	r2, [r3, #0]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017790:	1ad3      	subs	r3, r2, r3
 8017792:	3b01      	subs	r3, #1
 8017794:	2b00      	cmp	r3, #0
 8017796:	f2c0 814e 	blt.w	8017a36 <tcp_receive+0x442>
 801779a:	4b32      	ldr	r3, [pc, #200]	@ (8017864 <tcp_receive+0x270>)
 801779c:	681a      	ldr	r2, [r3, #0]
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80177a2:	1ad3      	subs	r3, r2, r3
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	f300 8146 	bgt.w	8017a36 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	8b5b      	ldrh	r3, [r3, #26]
 80177ae:	f003 0304 	and.w	r3, r3, #4
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d010      	beq.n	80177d8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	8b5b      	ldrh	r3, [r3, #26]
 80177ba:	f023 0304 	bic.w	r3, r3, #4
 80177be:	b29a      	uxth	r2, r3
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	2200      	movs	r2, #0
 80177d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	2200      	movs	r2, #0
 80177dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80177e6:	10db      	asrs	r3, r3, #3
 80177e8:	b21b      	sxth	r3, r3
 80177ea:	b29a      	uxth	r2, r3
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80177f2:	b29b      	uxth	r3, r3
 80177f4:	4413      	add	r3, r2
 80177f6:	b29b      	uxth	r3, r3
 80177f8:	b21a      	sxth	r2, r3
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017800:	4b18      	ldr	r3, [pc, #96]	@ (8017864 <tcp_receive+0x270>)
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	b29a      	uxth	r2, r3
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801780a:	b29b      	uxth	r3, r3
 801780c:	1ad3      	subs	r3, r2, r3
 801780e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	2200      	movs	r2, #0
 8017814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8017818:	4b12      	ldr	r3, [pc, #72]	@ (8017864 <tcp_receive+0x270>)
 801781a:	681a      	ldr	r2, [r3, #0]
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	7d1b      	ldrb	r3, [r3, #20]
 8017824:	2b03      	cmp	r3, #3
 8017826:	f240 8097 	bls.w	8017958 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017836:	429a      	cmp	r2, r3
 8017838:	d245      	bcs.n	80178c6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	8b5b      	ldrh	r3, [r3, #26]
 801783e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017842:	2b00      	cmp	r3, #0
 8017844:	d014      	beq.n	8017870 <tcp_receive+0x27c>
 8017846:	2301      	movs	r3, #1
 8017848:	e013      	b.n	8017872 <tcp_receive+0x27e>
 801784a:	bf00      	nop
 801784c:	08021fac 	.word	0x08021fac
 8017850:	080222dc 	.word	0x080222dc
 8017854:	08021ff8 	.word	0x08021ff8
 8017858:	080222f8 	.word	0x080222f8
 801785c:	200227e4 	.word	0x200227e4
 8017860:	200227d8 	.word	0x200227d8
 8017864:	200227dc 	.word	0x200227dc
 8017868:	200227c8 	.word	0x200227c8
 801786c:	200227e2 	.word	0x200227e2
 8017870:	2302      	movs	r3, #2
 8017872:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017876:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801787a:	b29a      	uxth	r2, r3
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017880:	fb12 f303 	smulbb	r3, r2, r3
 8017884:	b29b      	uxth	r3, r3
 8017886:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8017888:	4293      	cmp	r3, r2
 801788a:	bf28      	it	cs
 801788c:	4613      	movcs	r3, r2
 801788e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017896:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017898:	4413      	add	r3, r2
 801789a:	b29a      	uxth	r2, r3
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80178a2:	429a      	cmp	r2, r3
 80178a4:	d309      	bcc.n	80178ba <tcp_receive+0x2c6>
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80178ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80178ae:	4413      	add	r3, r2
 80178b0:	b29a      	uxth	r2, r3
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80178b8:	e04e      	b.n	8017958 <tcp_receive+0x364>
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80178c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80178c4:	e048      	b.n	8017958 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80178cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80178ce:	4413      	add	r3, r2
 80178d0:	b29a      	uxth	r2, r3
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80178d8:	429a      	cmp	r2, r3
 80178da:	d309      	bcc.n	80178f0 <tcp_receive+0x2fc>
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80178e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80178e4:	4413      	add	r3, r2
 80178e6:	b29a      	uxth	r2, r3
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80178ee:	e004      	b.n	80178fa <tcp_receive+0x306>
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80178f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017906:	429a      	cmp	r2, r3
 8017908:	d326      	bcc.n	8017958 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017916:	1ad3      	subs	r3, r2, r3
 8017918:	b29a      	uxth	r2, r3
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801792a:	4413      	add	r3, r2
 801792c:	b29a      	uxth	r2, r3
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017934:	429a      	cmp	r2, r3
 8017936:	d30a      	bcc.n	801794e <tcp_receive+0x35a>
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017942:	4413      	add	r3, r2
 8017944:	b29a      	uxth	r2, r3
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801794c:	e004      	b.n	8017958 <tcp_receive+0x364>
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017954:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017960:	4a98      	ldr	r2, [pc, #608]	@ (8017bc4 <tcp_receive+0x5d0>)
 8017962:	6878      	ldr	r0, [r7, #4]
 8017964:	f7ff fdca 	bl	80174fc <tcp_free_acked_segments>
 8017968:	4602      	mov	r2, r0
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017976:	4a94      	ldr	r2, [pc, #592]	@ (8017bc8 <tcp_receive+0x5d4>)
 8017978:	6878      	ldr	r0, [r7, #4]
 801797a:	f7ff fdbf 	bl	80174fc <tcp_free_acked_segments>
 801797e:	4602      	mov	r2, r0
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017988:	2b00      	cmp	r3, #0
 801798a:	d104      	bne.n	8017996 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017992:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017994:	e002      	b.n	801799c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	2200      	movs	r2, #0
 801799a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2200      	movs	r2, #0
 80179a0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d103      	bne.n	80179b2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	2200      	movs	r2, #0
 80179ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80179b8:	4b84      	ldr	r3, [pc, #528]	@ (8017bcc <tcp_receive+0x5d8>)
 80179ba:	881b      	ldrh	r3, [r3, #0]
 80179bc:	4413      	add	r3, r2
 80179be:	b29a      	uxth	r2, r3
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	8b5b      	ldrh	r3, [r3, #26]
 80179ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d035      	beq.n	8017a3e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d118      	bne.n	8017a0c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d00c      	beq.n	80179fc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179ea:	691b      	ldr	r3, [r3, #16]
 80179ec:	685b      	ldr	r3, [r3, #4]
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7fa fd0e 	bl	8012410 <lwip_htonl>
 80179f4:	4603      	mov	r3, r0
 80179f6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	dc20      	bgt.n	8017a3e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	8b5b      	ldrh	r3, [r3, #26]
 8017a00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017a04:	b29a      	uxth	r2, r3
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017a0a:	e018      	b.n	8017a3e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a14:	691b      	ldr	r3, [r3, #16]
 8017a16:	685b      	ldr	r3, [r3, #4]
 8017a18:	4618      	mov	r0, r3
 8017a1a:	f7fa fcf9 	bl	8012410 <lwip_htonl>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	1ae3      	subs	r3, r4, r3
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	dc0b      	bgt.n	8017a3e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	8b5b      	ldrh	r3, [r3, #26]
 8017a2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017a2e:	b29a      	uxth	r2, r3
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017a34:	e003      	b.n	8017a3e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f002 fc36 	bl	801a2a8 <tcp_send_empty_ack>
 8017a3c:	e000      	b.n	8017a40 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017a3e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d05b      	beq.n	8017b00 <tcp_receive+0x50c>
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017a4c:	4b60      	ldr	r3, [pc, #384]	@ (8017bd0 <tcp_receive+0x5dc>)
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	1ad3      	subs	r3, r2, r3
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	da54      	bge.n	8017b00 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017a56:	4b5f      	ldr	r3, [pc, #380]	@ (8017bd4 <tcp_receive+0x5e0>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	b29a      	uxth	r2, r3
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a60:	b29b      	uxth	r3, r3
 8017a62:	1ad3      	subs	r3, r2, r3
 8017a64:	b29b      	uxth	r3, r3
 8017a66:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017a6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017a74:	10db      	asrs	r3, r3, #3
 8017a76:	b21b      	sxth	r3, r3
 8017a78:	b29b      	uxth	r3, r3
 8017a7a:	1ad3      	subs	r3, r2, r3
 8017a7c:	b29b      	uxth	r3, r3
 8017a7e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017a88:	b29a      	uxth	r2, r3
 8017a8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017a8e:	4413      	add	r3, r2
 8017a90:	b29b      	uxth	r3, r3
 8017a92:	b21a      	sxth	r2, r3
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8017a98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	da05      	bge.n	8017aac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017aa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017aa4:	425b      	negs	r3, r3
 8017aa6:	b29b      	uxth	r3, r3
 8017aa8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017aac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017ab6:	109b      	asrs	r3, r3, #2
 8017ab8:	b21b      	sxth	r3, r3
 8017aba:	b29b      	uxth	r3, r3
 8017abc:	1ad3      	subs	r3, r2, r3
 8017abe:	b29b      	uxth	r3, r3
 8017ac0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017aca:	b29a      	uxth	r2, r3
 8017acc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017ad0:	4413      	add	r3, r2
 8017ad2:	b29b      	uxth	r3, r3
 8017ad4:	b21a      	sxth	r2, r3
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017ae0:	10db      	asrs	r3, r3, #3
 8017ae2:	b21b      	sxth	r3, r3
 8017ae4:	b29a      	uxth	r2, r3
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017aec:	b29b      	uxth	r3, r3
 8017aee:	4413      	add	r3, r2
 8017af0:	b29b      	uxth	r3, r3
 8017af2:	b21a      	sxth	r2, r3
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	2200      	movs	r2, #0
 8017afe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017b00:	4b35      	ldr	r3, [pc, #212]	@ (8017bd8 <tcp_receive+0x5e4>)
 8017b02:	881b      	ldrh	r3, [r3, #0]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	f000 84df 	beq.w	80184c8 <tcp_receive+0xed4>
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	7d1b      	ldrb	r3, [r3, #20]
 8017b0e:	2b06      	cmp	r3, #6
 8017b10:	f200 84da 	bhi.w	80184c8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017b18:	4b30      	ldr	r3, [pc, #192]	@ (8017bdc <tcp_receive+0x5e8>)
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	1ad3      	subs	r3, r2, r3
 8017b1e:	3b01      	subs	r3, #1
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f2c0 808f 	blt.w	8017c44 <tcp_receive+0x650>
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8017bd8 <tcp_receive+0x5e4>)
 8017b2c:	881b      	ldrh	r3, [r3, #0]
 8017b2e:	4619      	mov	r1, r3
 8017b30:	4b2a      	ldr	r3, [pc, #168]	@ (8017bdc <tcp_receive+0x5e8>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	440b      	add	r3, r1
 8017b36:	1ad3      	subs	r3, r2, r3
 8017b38:	3301      	adds	r3, #1
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	f300 8082 	bgt.w	8017c44 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017b40:	4b27      	ldr	r3, [pc, #156]	@ (8017be0 <tcp_receive+0x5ec>)
 8017b42:	685b      	ldr	r3, [r3, #4]
 8017b44:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017b4a:	4b24      	ldr	r3, [pc, #144]	@ (8017bdc <tcp_receive+0x5e8>)
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	1ad3      	subs	r3, r2, r3
 8017b50:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017b52:	4b23      	ldr	r3, [pc, #140]	@ (8017be0 <tcp_receive+0x5ec>)
 8017b54:	685b      	ldr	r3, [r3, #4]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d106      	bne.n	8017b68 <tcp_receive+0x574>
 8017b5a:	4b22      	ldr	r3, [pc, #136]	@ (8017be4 <tcp_receive+0x5f0>)
 8017b5c:	f240 5294 	movw	r2, #1428	@ 0x594
 8017b60:	4921      	ldr	r1, [pc, #132]	@ (8017be8 <tcp_receive+0x5f4>)
 8017b62:	4822      	ldr	r0, [pc, #136]	@ (8017bec <tcp_receive+0x5f8>)
 8017b64:	f007 f912 	bl	801ed8c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017b6e:	4293      	cmp	r3, r2
 8017b70:	d906      	bls.n	8017b80 <tcp_receive+0x58c>
 8017b72:	4b1c      	ldr	r3, [pc, #112]	@ (8017be4 <tcp_receive+0x5f0>)
 8017b74:	f240 5295 	movw	r2, #1429	@ 0x595
 8017b78:	491d      	ldr	r1, [pc, #116]	@ (8017bf0 <tcp_receive+0x5fc>)
 8017b7a:	481c      	ldr	r0, [pc, #112]	@ (8017bec <tcp_receive+0x5f8>)
 8017b7c:	f007 f906 	bl	801ed8c <iprintf>
      off = (u16_t)off32;
 8017b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017b86:	4b16      	ldr	r3, [pc, #88]	@ (8017be0 <tcp_receive+0x5ec>)
 8017b88:	685b      	ldr	r3, [r3, #4]
 8017b8a:	891b      	ldrh	r3, [r3, #8]
 8017b8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d906      	bls.n	8017ba2 <tcp_receive+0x5ae>
 8017b94:	4b13      	ldr	r3, [pc, #76]	@ (8017be4 <tcp_receive+0x5f0>)
 8017b96:	f240 5297 	movw	r2, #1431	@ 0x597
 8017b9a:	4916      	ldr	r1, [pc, #88]	@ (8017bf4 <tcp_receive+0x600>)
 8017b9c:	4813      	ldr	r0, [pc, #76]	@ (8017bec <tcp_receive+0x5f8>)
 8017b9e:	f007 f8f5 	bl	801ed8c <iprintf>
      inseg.len -= off;
 8017ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8017be0 <tcp_receive+0x5ec>)
 8017ba4:	891a      	ldrh	r2, [r3, #8]
 8017ba6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017baa:	1ad3      	subs	r3, r2, r3
 8017bac:	b29a      	uxth	r2, r3
 8017bae:	4b0c      	ldr	r3, [pc, #48]	@ (8017be0 <tcp_receive+0x5ec>)
 8017bb0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8017be0 <tcp_receive+0x5ec>)
 8017bb4:	685b      	ldr	r3, [r3, #4]
 8017bb6:	891a      	ldrh	r2, [r3, #8]
 8017bb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017bbc:	1ad3      	subs	r3, r2, r3
 8017bbe:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017bc0:	e02a      	b.n	8017c18 <tcp_receive+0x624>
 8017bc2:	bf00      	nop
 8017bc4:	08022314 	.word	0x08022314
 8017bc8:	0802231c 	.word	0x0802231c
 8017bcc:	200227e0 	.word	0x200227e0
 8017bd0:	200227dc 	.word	0x200227dc
 8017bd4:	2002279c 	.word	0x2002279c
 8017bd8:	200227e2 	.word	0x200227e2
 8017bdc:	200227d8 	.word	0x200227d8
 8017be0:	200227b4 	.word	0x200227b4
 8017be4:	08021fac 	.word	0x08021fac
 8017be8:	08022324 	.word	0x08022324
 8017bec:	08021ff8 	.word	0x08021ff8
 8017bf0:	08022334 	.word	0x08022334
 8017bf4:	08022344 	.word	0x08022344
        off -= p->len;
 8017bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017bfa:	895b      	ldrh	r3, [r3, #10]
 8017bfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c00:	1ad3      	subs	r3, r2, r3
 8017c02:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c08:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017c0a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c0e:	2200      	movs	r2, #0
 8017c10:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c1a:	895b      	ldrh	r3, [r3, #10]
 8017c1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d8e9      	bhi.n	8017bf8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017c24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c28:	4619      	mov	r1, r3
 8017c2a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017c2c:	f7fc f838 	bl	8013ca0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c34:	4a90      	ldr	r2, [pc, #576]	@ (8017e78 <tcp_receive+0x884>)
 8017c36:	6013      	str	r3, [r2, #0]
 8017c38:	4b90      	ldr	r3, [pc, #576]	@ (8017e7c <tcp_receive+0x888>)
 8017c3a:	691b      	ldr	r3, [r3, #16]
 8017c3c:	4a8e      	ldr	r2, [pc, #568]	@ (8017e78 <tcp_receive+0x884>)
 8017c3e:	6812      	ldr	r2, [r2, #0]
 8017c40:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017c42:	e00d      	b.n	8017c60 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017c44:	4b8c      	ldr	r3, [pc, #560]	@ (8017e78 <tcp_receive+0x884>)
 8017c46:	681a      	ldr	r2, [r3, #0]
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c4c:	1ad3      	subs	r3, r2, r3
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	da06      	bge.n	8017c60 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	8b5b      	ldrh	r3, [r3, #26]
 8017c56:	f043 0302 	orr.w	r3, r3, #2
 8017c5a:	b29a      	uxth	r2, r3
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017c60:	4b85      	ldr	r3, [pc, #532]	@ (8017e78 <tcp_receive+0x884>)
 8017c62:	681a      	ldr	r2, [r3, #0]
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c68:	1ad3      	subs	r3, r2, r3
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	f2c0 8427 	blt.w	80184be <tcp_receive+0xeca>
 8017c70:	4b81      	ldr	r3, [pc, #516]	@ (8017e78 <tcp_receive+0x884>)
 8017c72:	681a      	ldr	r2, [r3, #0]
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c78:	6879      	ldr	r1, [r7, #4]
 8017c7a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017c7c:	440b      	add	r3, r1
 8017c7e:	1ad3      	subs	r3, r2, r3
 8017c80:	3301      	adds	r3, #1
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	f300 841b 	bgt.w	80184be <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c8c:	4b7a      	ldr	r3, [pc, #488]	@ (8017e78 <tcp_receive+0x884>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	429a      	cmp	r2, r3
 8017c92:	f040 8298 	bne.w	80181c6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017c96:	4b79      	ldr	r3, [pc, #484]	@ (8017e7c <tcp_receive+0x888>)
 8017c98:	891c      	ldrh	r4, [r3, #8]
 8017c9a:	4b78      	ldr	r3, [pc, #480]	@ (8017e7c <tcp_receive+0x888>)
 8017c9c:	691b      	ldr	r3, [r3, #16]
 8017c9e:	899b      	ldrh	r3, [r3, #12]
 8017ca0:	b29b      	uxth	r3, r3
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7fa fb9e 	bl	80123e4 <lwip_htons>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	b2db      	uxtb	r3, r3
 8017cac:	f003 0303 	and.w	r3, r3, #3
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d001      	beq.n	8017cb8 <tcp_receive+0x6c4>
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	e000      	b.n	8017cba <tcp_receive+0x6c6>
 8017cb8:	2300      	movs	r3, #0
 8017cba:	4423      	add	r3, r4
 8017cbc:	b29a      	uxth	r2, r3
 8017cbe:	4b70      	ldr	r3, [pc, #448]	@ (8017e80 <tcp_receive+0x88c>)
 8017cc0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017cc6:	4b6e      	ldr	r3, [pc, #440]	@ (8017e80 <tcp_receive+0x88c>)
 8017cc8:	881b      	ldrh	r3, [r3, #0]
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d274      	bcs.n	8017db8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017cce:	4b6b      	ldr	r3, [pc, #428]	@ (8017e7c <tcp_receive+0x888>)
 8017cd0:	691b      	ldr	r3, [r3, #16]
 8017cd2:	899b      	ldrh	r3, [r3, #12]
 8017cd4:	b29b      	uxth	r3, r3
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7fa fb84 	bl	80123e4 <lwip_htons>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	b2db      	uxtb	r3, r3
 8017ce0:	f003 0301 	and.w	r3, r3, #1
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d01e      	beq.n	8017d26 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017ce8:	4b64      	ldr	r3, [pc, #400]	@ (8017e7c <tcp_receive+0x888>)
 8017cea:	691b      	ldr	r3, [r3, #16]
 8017cec:	899b      	ldrh	r3, [r3, #12]
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	b21b      	sxth	r3, r3
 8017cf2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017cf6:	b21c      	sxth	r4, r3
 8017cf8:	4b60      	ldr	r3, [pc, #384]	@ (8017e7c <tcp_receive+0x888>)
 8017cfa:	691b      	ldr	r3, [r3, #16]
 8017cfc:	899b      	ldrh	r3, [r3, #12]
 8017cfe:	b29b      	uxth	r3, r3
 8017d00:	4618      	mov	r0, r3
 8017d02:	f7fa fb6f 	bl	80123e4 <lwip_htons>
 8017d06:	4603      	mov	r3, r0
 8017d08:	b2db      	uxtb	r3, r3
 8017d0a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017d0e:	b29b      	uxth	r3, r3
 8017d10:	4618      	mov	r0, r3
 8017d12:	f7fa fb67 	bl	80123e4 <lwip_htons>
 8017d16:	4603      	mov	r3, r0
 8017d18:	b21b      	sxth	r3, r3
 8017d1a:	4323      	orrs	r3, r4
 8017d1c:	b21a      	sxth	r2, r3
 8017d1e:	4b57      	ldr	r3, [pc, #348]	@ (8017e7c <tcp_receive+0x888>)
 8017d20:	691b      	ldr	r3, [r3, #16]
 8017d22:	b292      	uxth	r2, r2
 8017d24:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017d2a:	4b54      	ldr	r3, [pc, #336]	@ (8017e7c <tcp_receive+0x888>)
 8017d2c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017d2e:	4b53      	ldr	r3, [pc, #332]	@ (8017e7c <tcp_receive+0x888>)
 8017d30:	691b      	ldr	r3, [r3, #16]
 8017d32:	899b      	ldrh	r3, [r3, #12]
 8017d34:	b29b      	uxth	r3, r3
 8017d36:	4618      	mov	r0, r3
 8017d38:	f7fa fb54 	bl	80123e4 <lwip_htons>
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	b2db      	uxtb	r3, r3
 8017d40:	f003 0302 	and.w	r3, r3, #2
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d005      	beq.n	8017d54 <tcp_receive+0x760>
            inseg.len -= 1;
 8017d48:	4b4c      	ldr	r3, [pc, #304]	@ (8017e7c <tcp_receive+0x888>)
 8017d4a:	891b      	ldrh	r3, [r3, #8]
 8017d4c:	3b01      	subs	r3, #1
 8017d4e:	b29a      	uxth	r2, r3
 8017d50:	4b4a      	ldr	r3, [pc, #296]	@ (8017e7c <tcp_receive+0x888>)
 8017d52:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017d54:	4b49      	ldr	r3, [pc, #292]	@ (8017e7c <tcp_receive+0x888>)
 8017d56:	685b      	ldr	r3, [r3, #4]
 8017d58:	4a48      	ldr	r2, [pc, #288]	@ (8017e7c <tcp_receive+0x888>)
 8017d5a:	8912      	ldrh	r2, [r2, #8]
 8017d5c:	4611      	mov	r1, r2
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f7fb fe9e 	bl	8013aa0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017d64:	4b45      	ldr	r3, [pc, #276]	@ (8017e7c <tcp_receive+0x888>)
 8017d66:	891c      	ldrh	r4, [r3, #8]
 8017d68:	4b44      	ldr	r3, [pc, #272]	@ (8017e7c <tcp_receive+0x888>)
 8017d6a:	691b      	ldr	r3, [r3, #16]
 8017d6c:	899b      	ldrh	r3, [r3, #12]
 8017d6e:	b29b      	uxth	r3, r3
 8017d70:	4618      	mov	r0, r3
 8017d72:	f7fa fb37 	bl	80123e4 <lwip_htons>
 8017d76:	4603      	mov	r3, r0
 8017d78:	b2db      	uxtb	r3, r3
 8017d7a:	f003 0303 	and.w	r3, r3, #3
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d001      	beq.n	8017d86 <tcp_receive+0x792>
 8017d82:	2301      	movs	r3, #1
 8017d84:	e000      	b.n	8017d88 <tcp_receive+0x794>
 8017d86:	2300      	movs	r3, #0
 8017d88:	4423      	add	r3, r4
 8017d8a:	b29a      	uxth	r2, r3
 8017d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8017e80 <tcp_receive+0x88c>)
 8017d8e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017d90:	4b3b      	ldr	r3, [pc, #236]	@ (8017e80 <tcp_receive+0x88c>)
 8017d92:	881b      	ldrh	r3, [r3, #0]
 8017d94:	461a      	mov	r2, r3
 8017d96:	4b38      	ldr	r3, [pc, #224]	@ (8017e78 <tcp_receive+0x884>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	441a      	add	r2, r3
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017da0:	6879      	ldr	r1, [r7, #4]
 8017da2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017da4:	440b      	add	r3, r1
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d006      	beq.n	8017db8 <tcp_receive+0x7c4>
 8017daa:	4b36      	ldr	r3, [pc, #216]	@ (8017e84 <tcp_receive+0x890>)
 8017dac:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017db0:	4935      	ldr	r1, [pc, #212]	@ (8017e88 <tcp_receive+0x894>)
 8017db2:	4836      	ldr	r0, [pc, #216]	@ (8017e8c <tcp_receive+0x898>)
 8017db4:	f006 ffea 	bl	801ed8c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	f000 80e6 	beq.w	8017f8e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8017e7c <tcp_receive+0x888>)
 8017dc4:	691b      	ldr	r3, [r3, #16]
 8017dc6:	899b      	ldrh	r3, [r3, #12]
 8017dc8:	b29b      	uxth	r3, r3
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f7fa fb0a 	bl	80123e4 <lwip_htons>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	b2db      	uxtb	r3, r3
 8017dd4:	f003 0301 	and.w	r3, r3, #1
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d010      	beq.n	8017dfe <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017ddc:	e00a      	b.n	8017df4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017de2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017de8:	681a      	ldr	r2, [r3, #0]
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8017dee:	68f8      	ldr	r0, [r7, #12]
 8017df0:	f7fd fcbf 	bl	8015772 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d1f0      	bne.n	8017dde <tcp_receive+0x7ea>
 8017dfc:	e0c7      	b.n	8017f8e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017e04:	e051      	b.n	8017eaa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e08:	691b      	ldr	r3, [r3, #16]
 8017e0a:	899b      	ldrh	r3, [r3, #12]
 8017e0c:	b29b      	uxth	r3, r3
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f7fa fae8 	bl	80123e4 <lwip_htons>
 8017e14:	4603      	mov	r3, r0
 8017e16:	b2db      	uxtb	r3, r3
 8017e18:	f003 0301 	and.w	r3, r3, #1
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d03c      	beq.n	8017e9a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017e20:	4b16      	ldr	r3, [pc, #88]	@ (8017e7c <tcp_receive+0x888>)
 8017e22:	691b      	ldr	r3, [r3, #16]
 8017e24:	899b      	ldrh	r3, [r3, #12]
 8017e26:	b29b      	uxth	r3, r3
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f7fa fadb 	bl	80123e4 <lwip_htons>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	b2db      	uxtb	r3, r3
 8017e32:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d12f      	bne.n	8017e9a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017e3a:	4b10      	ldr	r3, [pc, #64]	@ (8017e7c <tcp_receive+0x888>)
 8017e3c:	691b      	ldr	r3, [r3, #16]
 8017e3e:	899b      	ldrh	r3, [r3, #12]
 8017e40:	b29c      	uxth	r4, r3
 8017e42:	2001      	movs	r0, #1
 8017e44:	f7fa face 	bl	80123e4 <lwip_htons>
 8017e48:	4603      	mov	r3, r0
 8017e4a:	461a      	mov	r2, r3
 8017e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8017e7c <tcp_receive+0x888>)
 8017e4e:	691b      	ldr	r3, [r3, #16]
 8017e50:	4322      	orrs	r2, r4
 8017e52:	b292      	uxth	r2, r2
 8017e54:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017e56:	4b09      	ldr	r3, [pc, #36]	@ (8017e7c <tcp_receive+0x888>)
 8017e58:	891c      	ldrh	r4, [r3, #8]
 8017e5a:	4b08      	ldr	r3, [pc, #32]	@ (8017e7c <tcp_receive+0x888>)
 8017e5c:	691b      	ldr	r3, [r3, #16]
 8017e5e:	899b      	ldrh	r3, [r3, #12]
 8017e60:	b29b      	uxth	r3, r3
 8017e62:	4618      	mov	r0, r3
 8017e64:	f7fa fabe 	bl	80123e4 <lwip_htons>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	b2db      	uxtb	r3, r3
 8017e6c:	f003 0303 	and.w	r3, r3, #3
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d00d      	beq.n	8017e90 <tcp_receive+0x89c>
 8017e74:	2301      	movs	r3, #1
 8017e76:	e00c      	b.n	8017e92 <tcp_receive+0x89e>
 8017e78:	200227d8 	.word	0x200227d8
 8017e7c:	200227b4 	.word	0x200227b4
 8017e80:	200227e2 	.word	0x200227e2
 8017e84:	08021fac 	.word	0x08021fac
 8017e88:	08022354 	.word	0x08022354
 8017e8c:	08021ff8 	.word	0x08021ff8
 8017e90:	2300      	movs	r3, #0
 8017e92:	4423      	add	r3, r4
 8017e94:	b29a      	uxth	r2, r3
 8017e96:	4b98      	ldr	r3, [pc, #608]	@ (80180f8 <tcp_receive+0xb04>)
 8017e98:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e9c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017ea4:	6938      	ldr	r0, [r7, #16]
 8017ea6:	f7fd fc64 	bl	8015772 <tcp_seg_free>
            while (next &&
 8017eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d00e      	beq.n	8017ece <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017eb0:	4b91      	ldr	r3, [pc, #580]	@ (80180f8 <tcp_receive+0xb04>)
 8017eb2:	881b      	ldrh	r3, [r3, #0]
 8017eb4:	461a      	mov	r2, r3
 8017eb6:	4b91      	ldr	r3, [pc, #580]	@ (80180fc <tcp_receive+0xb08>)
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	441a      	add	r2, r3
 8017ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ebe:	691b      	ldr	r3, [r3, #16]
 8017ec0:	685b      	ldr	r3, [r3, #4]
 8017ec2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017ec4:	8909      	ldrh	r1, [r1, #8]
 8017ec6:	440b      	add	r3, r1
 8017ec8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	da9b      	bge.n	8017e06 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d059      	beq.n	8017f88 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017ed4:	4b88      	ldr	r3, [pc, #544]	@ (80180f8 <tcp_receive+0xb04>)
 8017ed6:	881b      	ldrh	r3, [r3, #0]
 8017ed8:	461a      	mov	r2, r3
 8017eda:	4b88      	ldr	r3, [pc, #544]	@ (80180fc <tcp_receive+0xb08>)
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	441a      	add	r2, r3
 8017ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ee2:	691b      	ldr	r3, [r3, #16]
 8017ee4:	685b      	ldr	r3, [r3, #4]
 8017ee6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	dd4d      	ble.n	8017f88 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017eee:	691b      	ldr	r3, [r3, #16]
 8017ef0:	685b      	ldr	r3, [r3, #4]
 8017ef2:	b29a      	uxth	r2, r3
 8017ef4:	4b81      	ldr	r3, [pc, #516]	@ (80180fc <tcp_receive+0xb08>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	b29b      	uxth	r3, r3
 8017efa:	1ad3      	subs	r3, r2, r3
 8017efc:	b29a      	uxth	r2, r3
 8017efe:	4b80      	ldr	r3, [pc, #512]	@ (8018100 <tcp_receive+0xb0c>)
 8017f00:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017f02:	4b7f      	ldr	r3, [pc, #508]	@ (8018100 <tcp_receive+0xb0c>)
 8017f04:	691b      	ldr	r3, [r3, #16]
 8017f06:	899b      	ldrh	r3, [r3, #12]
 8017f08:	b29b      	uxth	r3, r3
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7fa fa6a 	bl	80123e4 <lwip_htons>
 8017f10:	4603      	mov	r3, r0
 8017f12:	b2db      	uxtb	r3, r3
 8017f14:	f003 0302 	and.w	r3, r3, #2
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d005      	beq.n	8017f28 <tcp_receive+0x934>
                inseg.len -= 1;
 8017f1c:	4b78      	ldr	r3, [pc, #480]	@ (8018100 <tcp_receive+0xb0c>)
 8017f1e:	891b      	ldrh	r3, [r3, #8]
 8017f20:	3b01      	subs	r3, #1
 8017f22:	b29a      	uxth	r2, r3
 8017f24:	4b76      	ldr	r3, [pc, #472]	@ (8018100 <tcp_receive+0xb0c>)
 8017f26:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017f28:	4b75      	ldr	r3, [pc, #468]	@ (8018100 <tcp_receive+0xb0c>)
 8017f2a:	685b      	ldr	r3, [r3, #4]
 8017f2c:	4a74      	ldr	r2, [pc, #464]	@ (8018100 <tcp_receive+0xb0c>)
 8017f2e:	8912      	ldrh	r2, [r2, #8]
 8017f30:	4611      	mov	r1, r2
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7fb fdb4 	bl	8013aa0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017f38:	4b71      	ldr	r3, [pc, #452]	@ (8018100 <tcp_receive+0xb0c>)
 8017f3a:	891c      	ldrh	r4, [r3, #8]
 8017f3c:	4b70      	ldr	r3, [pc, #448]	@ (8018100 <tcp_receive+0xb0c>)
 8017f3e:	691b      	ldr	r3, [r3, #16]
 8017f40:	899b      	ldrh	r3, [r3, #12]
 8017f42:	b29b      	uxth	r3, r3
 8017f44:	4618      	mov	r0, r3
 8017f46:	f7fa fa4d 	bl	80123e4 <lwip_htons>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	b2db      	uxtb	r3, r3
 8017f4e:	f003 0303 	and.w	r3, r3, #3
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d001      	beq.n	8017f5a <tcp_receive+0x966>
 8017f56:	2301      	movs	r3, #1
 8017f58:	e000      	b.n	8017f5c <tcp_receive+0x968>
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	4423      	add	r3, r4
 8017f5e:	b29a      	uxth	r2, r3
 8017f60:	4b65      	ldr	r3, [pc, #404]	@ (80180f8 <tcp_receive+0xb04>)
 8017f62:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017f64:	4b64      	ldr	r3, [pc, #400]	@ (80180f8 <tcp_receive+0xb04>)
 8017f66:	881b      	ldrh	r3, [r3, #0]
 8017f68:	461a      	mov	r2, r3
 8017f6a:	4b64      	ldr	r3, [pc, #400]	@ (80180fc <tcp_receive+0xb08>)
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	441a      	add	r2, r3
 8017f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f72:	691b      	ldr	r3, [r3, #16]
 8017f74:	685b      	ldr	r3, [r3, #4]
 8017f76:	429a      	cmp	r2, r3
 8017f78:	d006      	beq.n	8017f88 <tcp_receive+0x994>
 8017f7a:	4b62      	ldr	r3, [pc, #392]	@ (8018104 <tcp_receive+0xb10>)
 8017f7c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8017f80:	4961      	ldr	r1, [pc, #388]	@ (8018108 <tcp_receive+0xb14>)
 8017f82:	4862      	ldr	r0, [pc, #392]	@ (801810c <tcp_receive+0xb18>)
 8017f84:	f006 ff02 	bl	801ed8c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017f8c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017f8e:	4b5a      	ldr	r3, [pc, #360]	@ (80180f8 <tcp_receive+0xb04>)
 8017f90:	881b      	ldrh	r3, [r3, #0]
 8017f92:	461a      	mov	r2, r3
 8017f94:	4b59      	ldr	r3, [pc, #356]	@ (80180fc <tcp_receive+0xb08>)
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	441a      	add	r2, r3
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017fa2:	4b55      	ldr	r3, [pc, #340]	@ (80180f8 <tcp_receive+0xb04>)
 8017fa4:	881b      	ldrh	r3, [r3, #0]
 8017fa6:	429a      	cmp	r2, r3
 8017fa8:	d206      	bcs.n	8017fb8 <tcp_receive+0x9c4>
 8017faa:	4b56      	ldr	r3, [pc, #344]	@ (8018104 <tcp_receive+0xb10>)
 8017fac:	f240 6207 	movw	r2, #1543	@ 0x607
 8017fb0:	4957      	ldr	r1, [pc, #348]	@ (8018110 <tcp_receive+0xb1c>)
 8017fb2:	4856      	ldr	r0, [pc, #344]	@ (801810c <tcp_receive+0xb18>)
 8017fb4:	f006 feea 	bl	801ed8c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017fbc:	4b4e      	ldr	r3, [pc, #312]	@ (80180f8 <tcp_receive+0xb04>)
 8017fbe:	881b      	ldrh	r3, [r3, #0]
 8017fc0:	1ad3      	subs	r3, r2, r3
 8017fc2:	b29a      	uxth	r2, r3
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017fc8:	6878      	ldr	r0, [r7, #4]
 8017fca:	f7fc fd93 	bl	8014af4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8017fce:	4b4c      	ldr	r3, [pc, #304]	@ (8018100 <tcp_receive+0xb0c>)
 8017fd0:	685b      	ldr	r3, [r3, #4]
 8017fd2:	891b      	ldrh	r3, [r3, #8]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d006      	beq.n	8017fe6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017fd8:	4b49      	ldr	r3, [pc, #292]	@ (8018100 <tcp_receive+0xb0c>)
 8017fda:	685b      	ldr	r3, [r3, #4]
 8017fdc:	4a4d      	ldr	r2, [pc, #308]	@ (8018114 <tcp_receive+0xb20>)
 8017fde:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017fe0:	4b47      	ldr	r3, [pc, #284]	@ (8018100 <tcp_receive+0xb0c>)
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017fe6:	4b46      	ldr	r3, [pc, #280]	@ (8018100 <tcp_receive+0xb0c>)
 8017fe8:	691b      	ldr	r3, [r3, #16]
 8017fea:	899b      	ldrh	r3, [r3, #12]
 8017fec:	b29b      	uxth	r3, r3
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f7fa f9f8 	bl	80123e4 <lwip_htons>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	b2db      	uxtb	r3, r3
 8017ff8:	f003 0301 	and.w	r3, r3, #1
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	f000 80b8 	beq.w	8018172 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018002:	4b45      	ldr	r3, [pc, #276]	@ (8018118 <tcp_receive+0xb24>)
 8018004:	781b      	ldrb	r3, [r3, #0]
 8018006:	f043 0320 	orr.w	r3, r3, #32
 801800a:	b2da      	uxtb	r2, r3
 801800c:	4b42      	ldr	r3, [pc, #264]	@ (8018118 <tcp_receive+0xb24>)
 801800e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018010:	e0af      	b.n	8018172 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018016:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801801c:	691b      	ldr	r3, [r3, #16]
 801801e:	685b      	ldr	r3, [r3, #4]
 8018020:	4a36      	ldr	r2, [pc, #216]	@ (80180fc <tcp_receive+0xb08>)
 8018022:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018024:	68bb      	ldr	r3, [r7, #8]
 8018026:	891b      	ldrh	r3, [r3, #8]
 8018028:	461c      	mov	r4, r3
 801802a:	68bb      	ldr	r3, [r7, #8]
 801802c:	691b      	ldr	r3, [r3, #16]
 801802e:	899b      	ldrh	r3, [r3, #12]
 8018030:	b29b      	uxth	r3, r3
 8018032:	4618      	mov	r0, r3
 8018034:	f7fa f9d6 	bl	80123e4 <lwip_htons>
 8018038:	4603      	mov	r3, r0
 801803a:	b2db      	uxtb	r3, r3
 801803c:	f003 0303 	and.w	r3, r3, #3
 8018040:	2b00      	cmp	r3, #0
 8018042:	d001      	beq.n	8018048 <tcp_receive+0xa54>
 8018044:	2301      	movs	r3, #1
 8018046:	e000      	b.n	801804a <tcp_receive+0xa56>
 8018048:	2300      	movs	r3, #0
 801804a:	191a      	adds	r2, r3, r4
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018050:	441a      	add	r2, r3
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801805a:	461c      	mov	r4, r3
 801805c:	68bb      	ldr	r3, [r7, #8]
 801805e:	891b      	ldrh	r3, [r3, #8]
 8018060:	461d      	mov	r5, r3
 8018062:	68bb      	ldr	r3, [r7, #8]
 8018064:	691b      	ldr	r3, [r3, #16]
 8018066:	899b      	ldrh	r3, [r3, #12]
 8018068:	b29b      	uxth	r3, r3
 801806a:	4618      	mov	r0, r3
 801806c:	f7fa f9ba 	bl	80123e4 <lwip_htons>
 8018070:	4603      	mov	r3, r0
 8018072:	b2db      	uxtb	r3, r3
 8018074:	f003 0303 	and.w	r3, r3, #3
 8018078:	2b00      	cmp	r3, #0
 801807a:	d001      	beq.n	8018080 <tcp_receive+0xa8c>
 801807c:	2301      	movs	r3, #1
 801807e:	e000      	b.n	8018082 <tcp_receive+0xa8e>
 8018080:	2300      	movs	r3, #0
 8018082:	442b      	add	r3, r5
 8018084:	429c      	cmp	r4, r3
 8018086:	d206      	bcs.n	8018096 <tcp_receive+0xaa2>
 8018088:	4b1e      	ldr	r3, [pc, #120]	@ (8018104 <tcp_receive+0xb10>)
 801808a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801808e:	4923      	ldr	r1, [pc, #140]	@ (801811c <tcp_receive+0xb28>)
 8018090:	481e      	ldr	r0, [pc, #120]	@ (801810c <tcp_receive+0xb18>)
 8018092:	f006 fe7b 	bl	801ed8c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	891b      	ldrh	r3, [r3, #8]
 801809a:	461c      	mov	r4, r3
 801809c:	68bb      	ldr	r3, [r7, #8]
 801809e:	691b      	ldr	r3, [r3, #16]
 80180a0:	899b      	ldrh	r3, [r3, #12]
 80180a2:	b29b      	uxth	r3, r3
 80180a4:	4618      	mov	r0, r3
 80180a6:	f7fa f99d 	bl	80123e4 <lwip_htons>
 80180aa:	4603      	mov	r3, r0
 80180ac:	b2db      	uxtb	r3, r3
 80180ae:	f003 0303 	and.w	r3, r3, #3
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d001      	beq.n	80180ba <tcp_receive+0xac6>
 80180b6:	2301      	movs	r3, #1
 80180b8:	e000      	b.n	80180bc <tcp_receive+0xac8>
 80180ba:	2300      	movs	r3, #0
 80180bc:	1919      	adds	r1, r3, r4
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80180c2:	b28b      	uxth	r3, r1
 80180c4:	1ad3      	subs	r3, r2, r3
 80180c6:	b29a      	uxth	r2, r3
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80180cc:	6878      	ldr	r0, [r7, #4]
 80180ce:	f7fc fd11 	bl	8014af4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80180d2:	68bb      	ldr	r3, [r7, #8]
 80180d4:	685b      	ldr	r3, [r3, #4]
 80180d6:	891b      	ldrh	r3, [r3, #8]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d028      	beq.n	801812e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80180dc:	4b0d      	ldr	r3, [pc, #52]	@ (8018114 <tcp_receive+0xb20>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d01d      	beq.n	8018120 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80180e4:	4b0b      	ldr	r3, [pc, #44]	@ (8018114 <tcp_receive+0xb20>)
 80180e6:	681a      	ldr	r2, [r3, #0]
 80180e8:	68bb      	ldr	r3, [r7, #8]
 80180ea:	685b      	ldr	r3, [r3, #4]
 80180ec:	4619      	mov	r1, r3
 80180ee:	4610      	mov	r0, r2
 80180f0:	f7fb ff2a 	bl	8013f48 <pbuf_cat>
 80180f4:	e018      	b.n	8018128 <tcp_receive+0xb34>
 80180f6:	bf00      	nop
 80180f8:	200227e2 	.word	0x200227e2
 80180fc:	200227d8 	.word	0x200227d8
 8018100:	200227b4 	.word	0x200227b4
 8018104:	08021fac 	.word	0x08021fac
 8018108:	0802238c 	.word	0x0802238c
 801810c:	08021ff8 	.word	0x08021ff8
 8018110:	080223c8 	.word	0x080223c8
 8018114:	200227e8 	.word	0x200227e8
 8018118:	200227e5 	.word	0x200227e5
 801811c:	080223e8 	.word	0x080223e8
            } else {
              recv_data = cseg->p;
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	685b      	ldr	r3, [r3, #4]
 8018124:	4a70      	ldr	r2, [pc, #448]	@ (80182e8 <tcp_receive+0xcf4>)
 8018126:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	2200      	movs	r2, #0
 801812c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801812e:	68bb      	ldr	r3, [r7, #8]
 8018130:	691b      	ldr	r3, [r3, #16]
 8018132:	899b      	ldrh	r3, [r3, #12]
 8018134:	b29b      	uxth	r3, r3
 8018136:	4618      	mov	r0, r3
 8018138:	f7fa f954 	bl	80123e4 <lwip_htons>
 801813c:	4603      	mov	r3, r0
 801813e:	b2db      	uxtb	r3, r3
 8018140:	f003 0301 	and.w	r3, r3, #1
 8018144:	2b00      	cmp	r3, #0
 8018146:	d00d      	beq.n	8018164 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018148:	4b68      	ldr	r3, [pc, #416]	@ (80182ec <tcp_receive+0xcf8>)
 801814a:	781b      	ldrb	r3, [r3, #0]
 801814c:	f043 0320 	orr.w	r3, r3, #32
 8018150:	b2da      	uxtb	r2, r3
 8018152:	4b66      	ldr	r3, [pc, #408]	@ (80182ec <tcp_receive+0xcf8>)
 8018154:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	7d1b      	ldrb	r3, [r3, #20]
 801815a:	2b04      	cmp	r3, #4
 801815c:	d102      	bne.n	8018164 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	2207      	movs	r2, #7
 8018162:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	681a      	ldr	r2, [r3, #0]
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801816c:	68b8      	ldr	r0, [r7, #8]
 801816e:	f7fd fb00 	bl	8015772 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018176:	2b00      	cmp	r3, #0
 8018178:	d008      	beq.n	801818c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801817e:	691b      	ldr	r3, [r3, #16]
 8018180:	685a      	ldr	r2, [r3, #4]
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8018186:	429a      	cmp	r2, r3
 8018188:	f43f af43 	beq.w	8018012 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	8b5b      	ldrh	r3, [r3, #26]
 8018190:	f003 0301 	and.w	r3, r3, #1
 8018194:	2b00      	cmp	r3, #0
 8018196:	d00e      	beq.n	80181b6 <tcp_receive+0xbc2>
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	8b5b      	ldrh	r3, [r3, #26]
 801819c:	f023 0301 	bic.w	r3, r3, #1
 80181a0:	b29a      	uxth	r2, r3
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	835a      	strh	r2, [r3, #26]
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	8b5b      	ldrh	r3, [r3, #26]
 80181aa:	f043 0302 	orr.w	r3, r3, #2
 80181ae:	b29a      	uxth	r2, r3
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80181b4:	e187      	b.n	80184c6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	8b5b      	ldrh	r3, [r3, #26]
 80181ba:	f043 0301 	orr.w	r3, r3, #1
 80181be:	b29a      	uxth	r2, r3
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80181c4:	e17f      	b.n	80184c6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d106      	bne.n	80181dc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80181ce:	4848      	ldr	r0, [pc, #288]	@ (80182f0 <tcp_receive+0xcfc>)
 80181d0:	f7fd fae8 	bl	80157a4 <tcp_seg_copy>
 80181d4:	4602      	mov	r2, r0
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	675a      	str	r2, [r3, #116]	@ 0x74
 80181da:	e16c      	b.n	80184b6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80181dc:	2300      	movs	r3, #0
 80181de:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80181e6:	e156      	b.n	8018496 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80181e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181ea:	691b      	ldr	r3, [r3, #16]
 80181ec:	685a      	ldr	r2, [r3, #4]
 80181ee:	4b41      	ldr	r3, [pc, #260]	@ (80182f4 <tcp_receive+0xd00>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d11d      	bne.n	8018232 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80181f6:	4b3e      	ldr	r3, [pc, #248]	@ (80182f0 <tcp_receive+0xcfc>)
 80181f8:	891a      	ldrh	r2, [r3, #8]
 80181fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181fc:	891b      	ldrh	r3, [r3, #8]
 80181fe:	429a      	cmp	r2, r3
 8018200:	f240 814e 	bls.w	80184a0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018204:	483a      	ldr	r0, [pc, #232]	@ (80182f0 <tcp_receive+0xcfc>)
 8018206:	f7fd facd 	bl	80157a4 <tcp_seg_copy>
 801820a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801820c:	697b      	ldr	r3, [r7, #20]
 801820e:	2b00      	cmp	r3, #0
 8018210:	f000 8148 	beq.w	80184a4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8018214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018216:	2b00      	cmp	r3, #0
 8018218:	d003      	beq.n	8018222 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801821a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801821c:	697a      	ldr	r2, [r7, #20]
 801821e:	601a      	str	r2, [r3, #0]
 8018220:	e002      	b.n	8018228 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	697a      	ldr	r2, [r7, #20]
 8018226:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018228:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801822a:	6978      	ldr	r0, [r7, #20]
 801822c:	f7ff f8de 	bl	80173ec <tcp_oos_insert_segment>
                }
                break;
 8018230:	e138      	b.n	80184a4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018234:	2b00      	cmp	r3, #0
 8018236:	d117      	bne.n	8018268 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018238:	4b2e      	ldr	r3, [pc, #184]	@ (80182f4 <tcp_receive+0xd00>)
 801823a:	681a      	ldr	r2, [r3, #0]
 801823c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801823e:	691b      	ldr	r3, [r3, #16]
 8018240:	685b      	ldr	r3, [r3, #4]
 8018242:	1ad3      	subs	r3, r2, r3
 8018244:	2b00      	cmp	r3, #0
 8018246:	da57      	bge.n	80182f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018248:	4829      	ldr	r0, [pc, #164]	@ (80182f0 <tcp_receive+0xcfc>)
 801824a:	f7fd faab 	bl	80157a4 <tcp_seg_copy>
 801824e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018250:	69bb      	ldr	r3, [r7, #24]
 8018252:	2b00      	cmp	r3, #0
 8018254:	f000 8128 	beq.w	80184a8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	69ba      	ldr	r2, [r7, #24]
 801825c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801825e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018260:	69b8      	ldr	r0, [r7, #24]
 8018262:	f7ff f8c3 	bl	80173ec <tcp_oos_insert_segment>
                  }
                  break;
 8018266:	e11f      	b.n	80184a8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018268:	4b22      	ldr	r3, [pc, #136]	@ (80182f4 <tcp_receive+0xd00>)
 801826a:	681a      	ldr	r2, [r3, #0]
 801826c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801826e:	691b      	ldr	r3, [r3, #16]
 8018270:	685b      	ldr	r3, [r3, #4]
 8018272:	1ad3      	subs	r3, r2, r3
 8018274:	3b01      	subs	r3, #1
 8018276:	2b00      	cmp	r3, #0
 8018278:	db3e      	blt.n	80182f8 <tcp_receive+0xd04>
 801827a:	4b1e      	ldr	r3, [pc, #120]	@ (80182f4 <tcp_receive+0xd00>)
 801827c:	681a      	ldr	r2, [r3, #0]
 801827e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018280:	691b      	ldr	r3, [r3, #16]
 8018282:	685b      	ldr	r3, [r3, #4]
 8018284:	1ad3      	subs	r3, r2, r3
 8018286:	3301      	adds	r3, #1
 8018288:	2b00      	cmp	r3, #0
 801828a:	dc35      	bgt.n	80182f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801828c:	4818      	ldr	r0, [pc, #96]	@ (80182f0 <tcp_receive+0xcfc>)
 801828e:	f7fd fa89 	bl	80157a4 <tcp_seg_copy>
 8018292:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018294:	69fb      	ldr	r3, [r7, #28]
 8018296:	2b00      	cmp	r3, #0
 8018298:	f000 8108 	beq.w	80184ac <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801829e:	691b      	ldr	r3, [r3, #16]
 80182a0:	685b      	ldr	r3, [r3, #4]
 80182a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80182a4:	8912      	ldrh	r2, [r2, #8]
 80182a6:	441a      	add	r2, r3
 80182a8:	4b12      	ldr	r3, [pc, #72]	@ (80182f4 <tcp_receive+0xd00>)
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	1ad3      	subs	r3, r2, r3
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	dd12      	ble.n	80182d8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80182b2:	4b10      	ldr	r3, [pc, #64]	@ (80182f4 <tcp_receive+0xd00>)
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	b29a      	uxth	r2, r3
 80182b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182ba:	691b      	ldr	r3, [r3, #16]
 80182bc:	685b      	ldr	r3, [r3, #4]
 80182be:	b29b      	uxth	r3, r3
 80182c0:	1ad3      	subs	r3, r2, r3
 80182c2:	b29a      	uxth	r2, r3
 80182c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80182c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182ca:	685a      	ldr	r2, [r3, #4]
 80182cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182ce:	891b      	ldrh	r3, [r3, #8]
 80182d0:	4619      	mov	r1, r3
 80182d2:	4610      	mov	r0, r2
 80182d4:	f7fb fbe4 	bl	8013aa0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80182d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182da:	69fa      	ldr	r2, [r7, #28]
 80182dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80182de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80182e0:	69f8      	ldr	r0, [r7, #28]
 80182e2:	f7ff f883 	bl	80173ec <tcp_oos_insert_segment>
                  }
                  break;
 80182e6:	e0e1      	b.n	80184ac <tcp_receive+0xeb8>
 80182e8:	200227e8 	.word	0x200227e8
 80182ec:	200227e5 	.word	0x200227e5
 80182f0:	200227b4 	.word	0x200227b4
 80182f4:	200227d8 	.word	0x200227d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80182f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182fa:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80182fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	2b00      	cmp	r3, #0
 8018302:	f040 80c5 	bne.w	8018490 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018306:	4b7f      	ldr	r3, [pc, #508]	@ (8018504 <tcp_receive+0xf10>)
 8018308:	681a      	ldr	r2, [r3, #0]
 801830a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801830c:	691b      	ldr	r3, [r3, #16]
 801830e:	685b      	ldr	r3, [r3, #4]
 8018310:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018312:	2b00      	cmp	r3, #0
 8018314:	f340 80bc 	ble.w	8018490 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801831a:	691b      	ldr	r3, [r3, #16]
 801831c:	899b      	ldrh	r3, [r3, #12]
 801831e:	b29b      	uxth	r3, r3
 8018320:	4618      	mov	r0, r3
 8018322:	f7fa f85f 	bl	80123e4 <lwip_htons>
 8018326:	4603      	mov	r3, r0
 8018328:	b2db      	uxtb	r3, r3
 801832a:	f003 0301 	and.w	r3, r3, #1
 801832e:	2b00      	cmp	r3, #0
 8018330:	f040 80be 	bne.w	80184b0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018334:	4874      	ldr	r0, [pc, #464]	@ (8018508 <tcp_receive+0xf14>)
 8018336:	f7fd fa35 	bl	80157a4 <tcp_seg_copy>
 801833a:	4602      	mov	r2, r0
 801833c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801833e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	2b00      	cmp	r3, #0
 8018346:	f000 80b5 	beq.w	80184b4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801834a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801834c:	691b      	ldr	r3, [r3, #16]
 801834e:	685b      	ldr	r3, [r3, #4]
 8018350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018352:	8912      	ldrh	r2, [r2, #8]
 8018354:	441a      	add	r2, r3
 8018356:	4b6b      	ldr	r3, [pc, #428]	@ (8018504 <tcp_receive+0xf10>)
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	1ad3      	subs	r3, r2, r3
 801835c:	2b00      	cmp	r3, #0
 801835e:	dd12      	ble.n	8018386 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018360:	4b68      	ldr	r3, [pc, #416]	@ (8018504 <tcp_receive+0xf10>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	b29a      	uxth	r2, r3
 8018366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018368:	691b      	ldr	r3, [r3, #16]
 801836a:	685b      	ldr	r3, [r3, #4]
 801836c:	b29b      	uxth	r3, r3
 801836e:	1ad3      	subs	r3, r2, r3
 8018370:	b29a      	uxth	r2, r3
 8018372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018374:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018378:	685a      	ldr	r2, [r3, #4]
 801837a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801837c:	891b      	ldrh	r3, [r3, #8]
 801837e:	4619      	mov	r1, r3
 8018380:	4610      	mov	r0, r2
 8018382:	f7fb fb8d 	bl	8013aa0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018386:	4b61      	ldr	r3, [pc, #388]	@ (801850c <tcp_receive+0xf18>)
 8018388:	881b      	ldrh	r3, [r3, #0]
 801838a:	461a      	mov	r2, r3
 801838c:	4b5d      	ldr	r3, [pc, #372]	@ (8018504 <tcp_receive+0xf10>)
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	441a      	add	r2, r3
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018396:	6879      	ldr	r1, [r7, #4]
 8018398:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801839a:	440b      	add	r3, r1
 801839c:	1ad3      	subs	r3, r2, r3
 801839e:	2b00      	cmp	r3, #0
 80183a0:	f340 8088 	ble.w	80184b4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80183a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	691b      	ldr	r3, [r3, #16]
 80183aa:	899b      	ldrh	r3, [r3, #12]
 80183ac:	b29b      	uxth	r3, r3
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7fa f818 	bl	80123e4 <lwip_htons>
 80183b4:	4603      	mov	r3, r0
 80183b6:	b2db      	uxtb	r3, r3
 80183b8:	f003 0301 	and.w	r3, r3, #1
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d021      	beq.n	8018404 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80183c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	691b      	ldr	r3, [r3, #16]
 80183c6:	899b      	ldrh	r3, [r3, #12]
 80183c8:	b29b      	uxth	r3, r3
 80183ca:	b21b      	sxth	r3, r3
 80183cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80183d0:	b21c      	sxth	r4, r3
 80183d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	691b      	ldr	r3, [r3, #16]
 80183d8:	899b      	ldrh	r3, [r3, #12]
 80183da:	b29b      	uxth	r3, r3
 80183dc:	4618      	mov	r0, r3
 80183de:	f7fa f801 	bl	80123e4 <lwip_htons>
 80183e2:	4603      	mov	r3, r0
 80183e4:	b2db      	uxtb	r3, r3
 80183e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80183ea:	b29b      	uxth	r3, r3
 80183ec:	4618      	mov	r0, r3
 80183ee:	f7f9 fff9 	bl	80123e4 <lwip_htons>
 80183f2:	4603      	mov	r3, r0
 80183f4:	b21b      	sxth	r3, r3
 80183f6:	4323      	orrs	r3, r4
 80183f8:	b21a      	sxth	r2, r3
 80183fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	691b      	ldr	r3, [r3, #16]
 8018400:	b292      	uxth	r2, r2
 8018402:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018408:	b29a      	uxth	r2, r3
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801840e:	4413      	add	r3, r2
 8018410:	b299      	uxth	r1, r3
 8018412:	4b3c      	ldr	r3, [pc, #240]	@ (8018504 <tcp_receive+0xf10>)
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	b29a      	uxth	r2, r3
 8018418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	1a8a      	subs	r2, r1, r2
 801841e:	b292      	uxth	r2, r2
 8018420:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	685a      	ldr	r2, [r3, #4]
 8018428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	891b      	ldrh	r3, [r3, #8]
 801842e:	4619      	mov	r1, r3
 8018430:	4610      	mov	r0, r2
 8018432:	f7fb fb35 	bl	8013aa0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	891c      	ldrh	r4, [r3, #8]
 801843c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	691b      	ldr	r3, [r3, #16]
 8018442:	899b      	ldrh	r3, [r3, #12]
 8018444:	b29b      	uxth	r3, r3
 8018446:	4618      	mov	r0, r3
 8018448:	f7f9 ffcc 	bl	80123e4 <lwip_htons>
 801844c:	4603      	mov	r3, r0
 801844e:	b2db      	uxtb	r3, r3
 8018450:	f003 0303 	and.w	r3, r3, #3
 8018454:	2b00      	cmp	r3, #0
 8018456:	d001      	beq.n	801845c <tcp_receive+0xe68>
 8018458:	2301      	movs	r3, #1
 801845a:	e000      	b.n	801845e <tcp_receive+0xe6a>
 801845c:	2300      	movs	r3, #0
 801845e:	4423      	add	r3, r4
 8018460:	b29a      	uxth	r2, r3
 8018462:	4b2a      	ldr	r3, [pc, #168]	@ (801850c <tcp_receive+0xf18>)
 8018464:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018466:	4b29      	ldr	r3, [pc, #164]	@ (801850c <tcp_receive+0xf18>)
 8018468:	881b      	ldrh	r3, [r3, #0]
 801846a:	461a      	mov	r2, r3
 801846c:	4b25      	ldr	r3, [pc, #148]	@ (8018504 <tcp_receive+0xf10>)
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	441a      	add	r2, r3
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018476:	6879      	ldr	r1, [r7, #4]
 8018478:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801847a:	440b      	add	r3, r1
 801847c:	429a      	cmp	r2, r3
 801847e:	d019      	beq.n	80184b4 <tcp_receive+0xec0>
 8018480:	4b23      	ldr	r3, [pc, #140]	@ (8018510 <tcp_receive+0xf1c>)
 8018482:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8018486:	4923      	ldr	r1, [pc, #140]	@ (8018514 <tcp_receive+0xf20>)
 8018488:	4823      	ldr	r0, [pc, #140]	@ (8018518 <tcp_receive+0xf24>)
 801848a:	f006 fc7f 	bl	801ed8c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801848e:	e011      	b.n	80184b4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018498:	2b00      	cmp	r3, #0
 801849a:	f47f aea5 	bne.w	80181e8 <tcp_receive+0xbf4>
 801849e:	e00a      	b.n	80184b6 <tcp_receive+0xec2>
                break;
 80184a0:	bf00      	nop
 80184a2:	e008      	b.n	80184b6 <tcp_receive+0xec2>
                break;
 80184a4:	bf00      	nop
 80184a6:	e006      	b.n	80184b6 <tcp_receive+0xec2>
                  break;
 80184a8:	bf00      	nop
 80184aa:	e004      	b.n	80184b6 <tcp_receive+0xec2>
                  break;
 80184ac:	bf00      	nop
 80184ae:	e002      	b.n	80184b6 <tcp_receive+0xec2>
                  break;
 80184b0:	bf00      	nop
 80184b2:	e000      	b.n	80184b6 <tcp_receive+0xec2>
                break;
 80184b4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80184b6:	6878      	ldr	r0, [r7, #4]
 80184b8:	f001 fef6 	bl	801a2a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80184bc:	e003      	b.n	80184c6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80184be:	6878      	ldr	r0, [r7, #4]
 80184c0:	f001 fef2 	bl	801a2a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80184c4:	e01a      	b.n	80184fc <tcp_receive+0xf08>
 80184c6:	e019      	b.n	80184fc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80184c8:	4b0e      	ldr	r3, [pc, #56]	@ (8018504 <tcp_receive+0xf10>)
 80184ca:	681a      	ldr	r2, [r3, #0]
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184d0:	1ad3      	subs	r3, r2, r3
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	db0a      	blt.n	80184ec <tcp_receive+0xef8>
 80184d6:	4b0b      	ldr	r3, [pc, #44]	@ (8018504 <tcp_receive+0xf10>)
 80184d8:	681a      	ldr	r2, [r3, #0]
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184de:	6879      	ldr	r1, [r7, #4]
 80184e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80184e2:	440b      	add	r3, r1
 80184e4:	1ad3      	subs	r3, r2, r3
 80184e6:	3301      	adds	r3, #1
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	dd07      	ble.n	80184fc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	8b5b      	ldrh	r3, [r3, #26]
 80184f0:	f043 0302 	orr.w	r3, r3, #2
 80184f4:	b29a      	uxth	r2, r3
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80184fa:	e7ff      	b.n	80184fc <tcp_receive+0xf08>
 80184fc:	bf00      	nop
 80184fe:	3750      	adds	r7, #80	@ 0x50
 8018500:	46bd      	mov	sp, r7
 8018502:	bdb0      	pop	{r4, r5, r7, pc}
 8018504:	200227d8 	.word	0x200227d8
 8018508:	200227b4 	.word	0x200227b4
 801850c:	200227e2 	.word	0x200227e2
 8018510:	08021fac 	.word	0x08021fac
 8018514:	08022354 	.word	0x08022354
 8018518:	08021ff8 	.word	0x08021ff8

0801851c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801851c:	b480      	push	{r7}
 801851e:	b083      	sub	sp, #12
 8018520:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018522:	4b15      	ldr	r3, [pc, #84]	@ (8018578 <tcp_get_next_optbyte+0x5c>)
 8018524:	881b      	ldrh	r3, [r3, #0]
 8018526:	1c5a      	adds	r2, r3, #1
 8018528:	b291      	uxth	r1, r2
 801852a:	4a13      	ldr	r2, [pc, #76]	@ (8018578 <tcp_get_next_optbyte+0x5c>)
 801852c:	8011      	strh	r1, [r2, #0]
 801852e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018530:	4b12      	ldr	r3, [pc, #72]	@ (801857c <tcp_get_next_optbyte+0x60>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d004      	beq.n	8018542 <tcp_get_next_optbyte+0x26>
 8018538:	4b11      	ldr	r3, [pc, #68]	@ (8018580 <tcp_get_next_optbyte+0x64>)
 801853a:	881b      	ldrh	r3, [r3, #0]
 801853c:	88fa      	ldrh	r2, [r7, #6]
 801853e:	429a      	cmp	r2, r3
 8018540:	d208      	bcs.n	8018554 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018542:	4b10      	ldr	r3, [pc, #64]	@ (8018584 <tcp_get_next_optbyte+0x68>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	3314      	adds	r3, #20
 8018548:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801854a:	88fb      	ldrh	r3, [r7, #6]
 801854c:	683a      	ldr	r2, [r7, #0]
 801854e:	4413      	add	r3, r2
 8018550:	781b      	ldrb	r3, [r3, #0]
 8018552:	e00b      	b.n	801856c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018554:	88fb      	ldrh	r3, [r7, #6]
 8018556:	b2da      	uxtb	r2, r3
 8018558:	4b09      	ldr	r3, [pc, #36]	@ (8018580 <tcp_get_next_optbyte+0x64>)
 801855a:	881b      	ldrh	r3, [r3, #0]
 801855c:	b2db      	uxtb	r3, r3
 801855e:	1ad3      	subs	r3, r2, r3
 8018560:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018562:	4b06      	ldr	r3, [pc, #24]	@ (801857c <tcp_get_next_optbyte+0x60>)
 8018564:	681a      	ldr	r2, [r3, #0]
 8018566:	797b      	ldrb	r3, [r7, #5]
 8018568:	4413      	add	r3, r2
 801856a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801856c:	4618      	mov	r0, r3
 801856e:	370c      	adds	r7, #12
 8018570:	46bd      	mov	sp, r7
 8018572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018576:	4770      	bx	lr
 8018578:	200227d4 	.word	0x200227d4
 801857c:	200227d0 	.word	0x200227d0
 8018580:	200227ce 	.word	0x200227ce
 8018584:	200227c8 	.word	0x200227c8

08018588 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b084      	sub	sp, #16
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d106      	bne.n	80185a4 <tcp_parseopt+0x1c>
 8018596:	4b32      	ldr	r3, [pc, #200]	@ (8018660 <tcp_parseopt+0xd8>)
 8018598:	f240 727d 	movw	r2, #1917	@ 0x77d
 801859c:	4931      	ldr	r1, [pc, #196]	@ (8018664 <tcp_parseopt+0xdc>)
 801859e:	4832      	ldr	r0, [pc, #200]	@ (8018668 <tcp_parseopt+0xe0>)
 80185a0:	f006 fbf4 	bl	801ed8c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80185a4:	4b31      	ldr	r3, [pc, #196]	@ (801866c <tcp_parseopt+0xe4>)
 80185a6:	881b      	ldrh	r3, [r3, #0]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d056      	beq.n	801865a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80185ac:	4b30      	ldr	r3, [pc, #192]	@ (8018670 <tcp_parseopt+0xe8>)
 80185ae:	2200      	movs	r2, #0
 80185b0:	801a      	strh	r2, [r3, #0]
 80185b2:	e046      	b.n	8018642 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80185b4:	f7ff ffb2 	bl	801851c <tcp_get_next_optbyte>
 80185b8:	4603      	mov	r3, r0
 80185ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80185bc:	7bfb      	ldrb	r3, [r7, #15]
 80185be:	2b02      	cmp	r3, #2
 80185c0:	d006      	beq.n	80185d0 <tcp_parseopt+0x48>
 80185c2:	2b02      	cmp	r3, #2
 80185c4:	dc2a      	bgt.n	801861c <tcp_parseopt+0x94>
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d042      	beq.n	8018650 <tcp_parseopt+0xc8>
 80185ca:	2b01      	cmp	r3, #1
 80185cc:	d038      	beq.n	8018640 <tcp_parseopt+0xb8>
 80185ce:	e025      	b.n	801861c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80185d0:	f7ff ffa4 	bl	801851c <tcp_get_next_optbyte>
 80185d4:	4603      	mov	r3, r0
 80185d6:	2b04      	cmp	r3, #4
 80185d8:	d13c      	bne.n	8018654 <tcp_parseopt+0xcc>
 80185da:	4b25      	ldr	r3, [pc, #148]	@ (8018670 <tcp_parseopt+0xe8>)
 80185dc:	881b      	ldrh	r3, [r3, #0]
 80185de:	3301      	adds	r3, #1
 80185e0:	4a22      	ldr	r2, [pc, #136]	@ (801866c <tcp_parseopt+0xe4>)
 80185e2:	8812      	ldrh	r2, [r2, #0]
 80185e4:	4293      	cmp	r3, r2
 80185e6:	da35      	bge.n	8018654 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80185e8:	f7ff ff98 	bl	801851c <tcp_get_next_optbyte>
 80185ec:	4603      	mov	r3, r0
 80185ee:	021b      	lsls	r3, r3, #8
 80185f0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80185f2:	f7ff ff93 	bl	801851c <tcp_get_next_optbyte>
 80185f6:	4603      	mov	r3, r0
 80185f8:	461a      	mov	r2, r3
 80185fa:	89bb      	ldrh	r3, [r7, #12]
 80185fc:	4313      	orrs	r3, r2
 80185fe:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018600:	89bb      	ldrh	r3, [r7, #12]
 8018602:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8018606:	d804      	bhi.n	8018612 <tcp_parseopt+0x8a>
 8018608:	89bb      	ldrh	r3, [r7, #12]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d001      	beq.n	8018612 <tcp_parseopt+0x8a>
 801860e:	89ba      	ldrh	r2, [r7, #12]
 8018610:	e001      	b.n	8018616 <tcp_parseopt+0x8e>
 8018612:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801861a:	e012      	b.n	8018642 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801861c:	f7ff ff7e 	bl	801851c <tcp_get_next_optbyte>
 8018620:	4603      	mov	r3, r0
 8018622:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018624:	7afb      	ldrb	r3, [r7, #11]
 8018626:	2b01      	cmp	r3, #1
 8018628:	d916      	bls.n	8018658 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801862a:	7afb      	ldrb	r3, [r7, #11]
 801862c:	b29a      	uxth	r2, r3
 801862e:	4b10      	ldr	r3, [pc, #64]	@ (8018670 <tcp_parseopt+0xe8>)
 8018630:	881b      	ldrh	r3, [r3, #0]
 8018632:	4413      	add	r3, r2
 8018634:	b29b      	uxth	r3, r3
 8018636:	3b02      	subs	r3, #2
 8018638:	b29a      	uxth	r2, r3
 801863a:	4b0d      	ldr	r3, [pc, #52]	@ (8018670 <tcp_parseopt+0xe8>)
 801863c:	801a      	strh	r2, [r3, #0]
 801863e:	e000      	b.n	8018642 <tcp_parseopt+0xba>
          break;
 8018640:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018642:	4b0b      	ldr	r3, [pc, #44]	@ (8018670 <tcp_parseopt+0xe8>)
 8018644:	881a      	ldrh	r2, [r3, #0]
 8018646:	4b09      	ldr	r3, [pc, #36]	@ (801866c <tcp_parseopt+0xe4>)
 8018648:	881b      	ldrh	r3, [r3, #0]
 801864a:	429a      	cmp	r2, r3
 801864c:	d3b2      	bcc.n	80185b4 <tcp_parseopt+0x2c>
 801864e:	e004      	b.n	801865a <tcp_parseopt+0xd2>
          return;
 8018650:	bf00      	nop
 8018652:	e002      	b.n	801865a <tcp_parseopt+0xd2>
            return;
 8018654:	bf00      	nop
 8018656:	e000      	b.n	801865a <tcp_parseopt+0xd2>
            return;
 8018658:	bf00      	nop
      }
    }
  }
}
 801865a:	3710      	adds	r7, #16
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}
 8018660:	08021fac 	.word	0x08021fac
 8018664:	08022410 	.word	0x08022410
 8018668:	08021ff8 	.word	0x08021ff8
 801866c:	200227cc 	.word	0x200227cc
 8018670:	200227d4 	.word	0x200227d4

08018674 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018674:	b480      	push	{r7}
 8018676:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018678:	4b05      	ldr	r3, [pc, #20]	@ (8018690 <tcp_trigger_input_pcb_close+0x1c>)
 801867a:	781b      	ldrb	r3, [r3, #0]
 801867c:	f043 0310 	orr.w	r3, r3, #16
 8018680:	b2da      	uxtb	r2, r3
 8018682:	4b03      	ldr	r3, [pc, #12]	@ (8018690 <tcp_trigger_input_pcb_close+0x1c>)
 8018684:	701a      	strb	r2, [r3, #0]
}
 8018686:	bf00      	nop
 8018688:	46bd      	mov	sp, r7
 801868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801868e:	4770      	bx	lr
 8018690:	200227e5 	.word	0x200227e5

08018694 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b084      	sub	sp, #16
 8018698:	af00      	add	r7, sp, #0
 801869a:	60f8      	str	r0, [r7, #12]
 801869c:	60b9      	str	r1, [r7, #8]
 801869e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d00a      	beq.n	80186bc <tcp_route+0x28>
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	7a1b      	ldrb	r3, [r3, #8]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d006      	beq.n	80186bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	7a1b      	ldrb	r3, [r3, #8]
 80186b2:	4618      	mov	r0, r3
 80186b4:	f7fa ffec 	bl	8013690 <netif_get_by_index>
 80186b8:	4603      	mov	r3, r0
 80186ba:	e003      	b.n	80186c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80186bc:	6878      	ldr	r0, [r7, #4]
 80186be:	f004 f9ed 	bl	801ca9c <ip4_route>
 80186c2:	4603      	mov	r3, r0
  }
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3710      	adds	r7, #16
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}

080186cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80186cc:	b590      	push	{r4, r7, lr}
 80186ce:	b087      	sub	sp, #28
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	60f8      	str	r0, [r7, #12]
 80186d4:	60b9      	str	r1, [r7, #8]
 80186d6:	603b      	str	r3, [r7, #0]
 80186d8:	4613      	mov	r3, r2
 80186da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d105      	bne.n	80186ee <tcp_create_segment+0x22>
 80186e2:	4b45      	ldr	r3, [pc, #276]	@ (80187f8 <tcp_create_segment+0x12c>)
 80186e4:	22a3      	movs	r2, #163	@ 0xa3
 80186e6:	4945      	ldr	r1, [pc, #276]	@ (80187fc <tcp_create_segment+0x130>)
 80186e8:	4845      	ldr	r0, [pc, #276]	@ (8018800 <tcp_create_segment+0x134>)
 80186ea:	f006 fb4f 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80186ee:	68bb      	ldr	r3, [r7, #8]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d105      	bne.n	8018700 <tcp_create_segment+0x34>
 80186f4:	4b40      	ldr	r3, [pc, #256]	@ (80187f8 <tcp_create_segment+0x12c>)
 80186f6:	22a4      	movs	r2, #164	@ 0xa4
 80186f8:	4942      	ldr	r1, [pc, #264]	@ (8018804 <tcp_create_segment+0x138>)
 80186fa:	4841      	ldr	r0, [pc, #260]	@ (8018800 <tcp_create_segment+0x134>)
 80186fc:	f006 fb46 	bl	801ed8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018700:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018704:	009b      	lsls	r3, r3, #2
 8018706:	b2db      	uxtb	r3, r3
 8018708:	f003 0304 	and.w	r3, r3, #4
 801870c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801870e:	2003      	movs	r0, #3
 8018710:	f7fa fb3c 	bl	8012d8c <memp_malloc>
 8018714:	6138      	str	r0, [r7, #16]
 8018716:	693b      	ldr	r3, [r7, #16]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d104      	bne.n	8018726 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801871c:	68b8      	ldr	r0, [r7, #8]
 801871e:	f7fb fb45 	bl	8013dac <pbuf_free>
    return NULL;
 8018722:	2300      	movs	r3, #0
 8018724:	e063      	b.n	80187ee <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 8018726:	693b      	ldr	r3, [r7, #16]
 8018728:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801872c:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801872e:	693b      	ldr	r3, [r7, #16]
 8018730:	2200      	movs	r2, #0
 8018732:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018734:	693b      	ldr	r3, [r7, #16]
 8018736:	68ba      	ldr	r2, [r7, #8]
 8018738:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801873a:	68bb      	ldr	r3, [r7, #8]
 801873c:	891a      	ldrh	r2, [r3, #8]
 801873e:	7dfb      	ldrb	r3, [r7, #23]
 8018740:	b29b      	uxth	r3, r3
 8018742:	429a      	cmp	r2, r3
 8018744:	d205      	bcs.n	8018752 <tcp_create_segment+0x86>
 8018746:	4b2c      	ldr	r3, [pc, #176]	@ (80187f8 <tcp_create_segment+0x12c>)
 8018748:	22b0      	movs	r2, #176	@ 0xb0
 801874a:	492f      	ldr	r1, [pc, #188]	@ (8018808 <tcp_create_segment+0x13c>)
 801874c:	482c      	ldr	r0, [pc, #176]	@ (8018800 <tcp_create_segment+0x134>)
 801874e:	f006 fb1d 	bl	801ed8c <iprintf>
  seg->len = p->tot_len - optlen;
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	891a      	ldrh	r2, [r3, #8]
 8018756:	7dfb      	ldrb	r3, [r7, #23]
 8018758:	b29b      	uxth	r3, r3
 801875a:	1ad3      	subs	r3, r2, r3
 801875c:	b29a      	uxth	r2, r3
 801875e:	693b      	ldr	r3, [r7, #16]
 8018760:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8018762:	693b      	ldr	r3, [r7, #16]
 8018764:	2200      	movs	r2, #0
 8018766:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018768:	2114      	movs	r1, #20
 801876a:	68b8      	ldr	r0, [r7, #8]
 801876c:	f7fb fa88 	bl	8013c80 <pbuf_add_header>
 8018770:	4603      	mov	r3, r0
 8018772:	2b00      	cmp	r3, #0
 8018774:	d004      	beq.n	8018780 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018776:	6938      	ldr	r0, [r7, #16]
 8018778:	f7fc fffb 	bl	8015772 <tcp_seg_free>
    return NULL;
 801877c:	2300      	movs	r3, #0
 801877e:	e036      	b.n	80187ee <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018780:	693b      	ldr	r3, [r7, #16]
 8018782:	685b      	ldr	r3, [r3, #4]
 8018784:	685a      	ldr	r2, [r3, #4]
 8018786:	693b      	ldr	r3, [r7, #16]
 8018788:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	8ada      	ldrh	r2, [r3, #22]
 801878e:	693b      	ldr	r3, [r7, #16]
 8018790:	691c      	ldr	r4, [r3, #16]
 8018792:	4610      	mov	r0, r2
 8018794:	f7f9 fe26 	bl	80123e4 <lwip_htons>
 8018798:	4603      	mov	r3, r0
 801879a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	8b1a      	ldrh	r2, [r3, #24]
 80187a0:	693b      	ldr	r3, [r7, #16]
 80187a2:	691c      	ldr	r4, [r3, #16]
 80187a4:	4610      	mov	r0, r2
 80187a6:	f7f9 fe1d 	bl	80123e4 <lwip_htons>
 80187aa:	4603      	mov	r3, r0
 80187ac:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80187ae:	693b      	ldr	r3, [r7, #16]
 80187b0:	691c      	ldr	r4, [r3, #16]
 80187b2:	6838      	ldr	r0, [r7, #0]
 80187b4:	f7f9 fe2c 	bl	8012410 <lwip_htonl>
 80187b8:	4603      	mov	r3, r0
 80187ba:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80187bc:	7dfb      	ldrb	r3, [r7, #23]
 80187be:	089b      	lsrs	r3, r3, #2
 80187c0:	b2db      	uxtb	r3, r3
 80187c2:	3305      	adds	r3, #5
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	031b      	lsls	r3, r3, #12
 80187c8:	b29a      	uxth	r2, r3
 80187ca:	79fb      	ldrb	r3, [r7, #7]
 80187cc:	b29b      	uxth	r3, r3
 80187ce:	4313      	orrs	r3, r2
 80187d0:	b29a      	uxth	r2, r3
 80187d2:	693b      	ldr	r3, [r7, #16]
 80187d4:	691c      	ldr	r4, [r3, #16]
 80187d6:	4610      	mov	r0, r2
 80187d8:	f7f9 fe04 	bl	80123e4 <lwip_htons>
 80187dc:	4603      	mov	r3, r0
 80187de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	691b      	ldr	r3, [r3, #16]
 80187e4:	2200      	movs	r2, #0
 80187e6:	749a      	strb	r2, [r3, #18]
 80187e8:	2200      	movs	r2, #0
 80187ea:	74da      	strb	r2, [r3, #19]
  return seg;
 80187ec:	693b      	ldr	r3, [r7, #16]
}
 80187ee:	4618      	mov	r0, r3
 80187f0:	371c      	adds	r7, #28
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd90      	pop	{r4, r7, pc}
 80187f6:	bf00      	nop
 80187f8:	0802242c 	.word	0x0802242c
 80187fc:	08022460 	.word	0x08022460
 8018800:	08022480 	.word	0x08022480
 8018804:	080224a8 	.word	0x080224a8
 8018808:	080224cc 	.word	0x080224cc

0801880c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b086      	sub	sp, #24
 8018810:	af00      	add	r7, sp, #0
 8018812:	607b      	str	r3, [r7, #4]
 8018814:	4603      	mov	r3, r0
 8018816:	73fb      	strb	r3, [r7, #15]
 8018818:	460b      	mov	r3, r1
 801881a:	81bb      	strh	r3, [r7, #12]
 801881c:	4613      	mov	r3, r2
 801881e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018820:	89bb      	ldrh	r3, [r7, #12]
 8018822:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d105      	bne.n	8018836 <tcp_pbuf_prealloc+0x2a>
 801882a:	4b30      	ldr	r3, [pc, #192]	@ (80188ec <tcp_pbuf_prealloc+0xe0>)
 801882c:	22e8      	movs	r2, #232	@ 0xe8
 801882e:	4930      	ldr	r1, [pc, #192]	@ (80188f0 <tcp_pbuf_prealloc+0xe4>)
 8018830:	4830      	ldr	r0, [pc, #192]	@ (80188f4 <tcp_pbuf_prealloc+0xe8>)
 8018832:	f006 faab 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018836:	6a3b      	ldr	r3, [r7, #32]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d105      	bne.n	8018848 <tcp_pbuf_prealloc+0x3c>
 801883c:	4b2b      	ldr	r3, [pc, #172]	@ (80188ec <tcp_pbuf_prealloc+0xe0>)
 801883e:	22e9      	movs	r2, #233	@ 0xe9
 8018840:	492d      	ldr	r1, [pc, #180]	@ (80188f8 <tcp_pbuf_prealloc+0xec>)
 8018842:	482c      	ldr	r0, [pc, #176]	@ (80188f4 <tcp_pbuf_prealloc+0xe8>)
 8018844:	f006 faa2 	bl	801ed8c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018848:	89ba      	ldrh	r2, [r7, #12]
 801884a:	897b      	ldrh	r3, [r7, #10]
 801884c:	429a      	cmp	r2, r3
 801884e:	d221      	bcs.n	8018894 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018850:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018854:	f003 0302 	and.w	r3, r3, #2
 8018858:	2b00      	cmp	r3, #0
 801885a:	d111      	bne.n	8018880 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801885c:	6a3b      	ldr	r3, [r7, #32]
 801885e:	8b5b      	ldrh	r3, [r3, #26]
 8018860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018864:	2b00      	cmp	r3, #0
 8018866:	d115      	bne.n	8018894 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018868:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801886c:	2b00      	cmp	r3, #0
 801886e:	d007      	beq.n	8018880 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018870:	6a3b      	ldr	r3, [r7, #32]
 8018872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8018874:	2b00      	cmp	r3, #0
 8018876:	d103      	bne.n	8018880 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018878:	6a3b      	ldr	r3, [r7, #32]
 801887a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801887c:	2b00      	cmp	r3, #0
 801887e:	d009      	beq.n	8018894 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018880:	89bb      	ldrh	r3, [r7, #12]
 8018882:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8018886:	f023 0203 	bic.w	r2, r3, #3
 801888a:	897b      	ldrh	r3, [r7, #10]
 801888c:	4293      	cmp	r3, r2
 801888e:	bf28      	it	cs
 8018890:	4613      	movcs	r3, r2
 8018892:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018894:	8af9      	ldrh	r1, [r7, #22]
 8018896:	7bfb      	ldrb	r3, [r7, #15]
 8018898:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801889c:	4618      	mov	r0, r3
 801889e:	f7fa ffa1 	bl	80137e4 <pbuf_alloc>
 80188a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80188a4:	693b      	ldr	r3, [r7, #16]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d101      	bne.n	80188ae <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80188aa:	2300      	movs	r3, #0
 80188ac:	e019      	b.n	80188e2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80188ae:	693b      	ldr	r3, [r7, #16]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d006      	beq.n	80188c4 <tcp_pbuf_prealloc+0xb8>
 80188b6:	4b0d      	ldr	r3, [pc, #52]	@ (80188ec <tcp_pbuf_prealloc+0xe0>)
 80188b8:	f240 120b 	movw	r2, #267	@ 0x10b
 80188bc:	490f      	ldr	r1, [pc, #60]	@ (80188fc <tcp_pbuf_prealloc+0xf0>)
 80188be:	480d      	ldr	r0, [pc, #52]	@ (80188f4 <tcp_pbuf_prealloc+0xe8>)
 80188c0:	f006 fa64 	bl	801ed8c <iprintf>
  *oversize = p->len - length;
 80188c4:	693b      	ldr	r3, [r7, #16]
 80188c6:	895a      	ldrh	r2, [r3, #10]
 80188c8:	89bb      	ldrh	r3, [r7, #12]
 80188ca:	1ad3      	subs	r3, r2, r3
 80188cc:	b29a      	uxth	r2, r3
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80188d2:	693b      	ldr	r3, [r7, #16]
 80188d4:	89ba      	ldrh	r2, [r7, #12]
 80188d6:	811a      	strh	r2, [r3, #8]
 80188d8:	693b      	ldr	r3, [r7, #16]
 80188da:	891a      	ldrh	r2, [r3, #8]
 80188dc:	693b      	ldr	r3, [r7, #16]
 80188de:	815a      	strh	r2, [r3, #10]
  return p;
 80188e0:	693b      	ldr	r3, [r7, #16]
}
 80188e2:	4618      	mov	r0, r3
 80188e4:	3718      	adds	r7, #24
 80188e6:	46bd      	mov	sp, r7
 80188e8:	bd80      	pop	{r7, pc}
 80188ea:	bf00      	nop
 80188ec:	0802242c 	.word	0x0802242c
 80188f0:	080224e4 	.word	0x080224e4
 80188f4:	08022480 	.word	0x08022480
 80188f8:	08022508 	.word	0x08022508
 80188fc:	08022528 	.word	0x08022528

08018900 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b082      	sub	sp, #8
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
 8018908:	460b      	mov	r3, r1
 801890a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d106      	bne.n	8018920 <tcp_write_checks+0x20>
 8018912:	4b33      	ldr	r3, [pc, #204]	@ (80189e0 <tcp_write_checks+0xe0>)
 8018914:	f240 1233 	movw	r2, #307	@ 0x133
 8018918:	4932      	ldr	r1, [pc, #200]	@ (80189e4 <tcp_write_checks+0xe4>)
 801891a:	4833      	ldr	r0, [pc, #204]	@ (80189e8 <tcp_write_checks+0xe8>)
 801891c:	f006 fa36 	bl	801ed8c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	7d1b      	ldrb	r3, [r3, #20]
 8018924:	2b04      	cmp	r3, #4
 8018926:	d00e      	beq.n	8018946 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801892c:	2b07      	cmp	r3, #7
 801892e:	d00a      	beq.n	8018946 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018934:	2b02      	cmp	r3, #2
 8018936:	d006      	beq.n	8018946 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801893c:	2b03      	cmp	r3, #3
 801893e:	d002      	beq.n	8018946 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018940:	f06f 030a 	mvn.w	r3, #10
 8018944:	e048      	b.n	80189d8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018946:	887b      	ldrh	r3, [r7, #2]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d101      	bne.n	8018950 <tcp_write_checks+0x50>
    return ERR_OK;
 801894c:	2300      	movs	r3, #0
 801894e:	e043      	b.n	80189d8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018956:	887a      	ldrh	r2, [r7, #2]
 8018958:	429a      	cmp	r2, r3
 801895a:	d909      	bls.n	8018970 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	8b5b      	ldrh	r3, [r3, #26]
 8018960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018964:	b29a      	uxth	r2, r3
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801896a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801896e:	e033      	b.n	80189d8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018976:	2b08      	cmp	r3, #8
 8018978:	d909      	bls.n	801898e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	8b5b      	ldrh	r3, [r3, #26]
 801897e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018982:	b29a      	uxth	r2, r3
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801898c:	e024      	b.n	80189d8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018994:	2b00      	cmp	r3, #0
 8018996:	d00f      	beq.n	80189b8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801899c:	2b00      	cmp	r3, #0
 801899e:	d11a      	bne.n	80189d6 <tcp_write_checks+0xd6>
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d116      	bne.n	80189d6 <tcp_write_checks+0xd6>
 80189a8:	4b0d      	ldr	r3, [pc, #52]	@ (80189e0 <tcp_write_checks+0xe0>)
 80189aa:	f240 1255 	movw	r2, #341	@ 0x155
 80189ae:	490f      	ldr	r1, [pc, #60]	@ (80189ec <tcp_write_checks+0xec>)
 80189b0:	480d      	ldr	r0, [pc, #52]	@ (80189e8 <tcp_write_checks+0xe8>)
 80189b2:	f006 f9eb 	bl	801ed8c <iprintf>
 80189b6:	e00e      	b.n	80189d6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d103      	bne.n	80189c8 <tcp_write_checks+0xc8>
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d006      	beq.n	80189d6 <tcp_write_checks+0xd6>
 80189c8:	4b05      	ldr	r3, [pc, #20]	@ (80189e0 <tcp_write_checks+0xe0>)
 80189ca:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80189ce:	4908      	ldr	r1, [pc, #32]	@ (80189f0 <tcp_write_checks+0xf0>)
 80189d0:	4805      	ldr	r0, [pc, #20]	@ (80189e8 <tcp_write_checks+0xe8>)
 80189d2:	f006 f9db 	bl	801ed8c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80189d6:	2300      	movs	r3, #0
}
 80189d8:	4618      	mov	r0, r3
 80189da:	3708      	adds	r7, #8
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd80      	pop	{r7, pc}
 80189e0:	0802242c 	.word	0x0802242c
 80189e4:	0802253c 	.word	0x0802253c
 80189e8:	08022480 	.word	0x08022480
 80189ec:	0802255c 	.word	0x0802255c
 80189f0:	08022598 	.word	0x08022598

080189f4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80189f4:	b590      	push	{r4, r7, lr}
 80189f6:	b09d      	sub	sp, #116	@ 0x74
 80189f8:	af04      	add	r7, sp, #16
 80189fa:	60f8      	str	r0, [r7, #12]
 80189fc:	60b9      	str	r1, [r7, #8]
 80189fe:	4611      	mov	r1, r2
 8018a00:	461a      	mov	r2, r3
 8018a02:	460b      	mov	r3, r1
 8018a04:	80fb      	strh	r3, [r7, #6]
 8018a06:	4613      	mov	r3, r2
 8018a08:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018a0e:	2300      	movs	r3, #0
 8018a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8018a12:	2300      	movs	r3, #0
 8018a14:	657b      	str	r3, [r7, #84]	@ 0x54
 8018a16:	2300      	movs	r3, #0
 8018a18:	653b      	str	r3, [r7, #80]	@ 0x50
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8018a1e:	2300      	movs	r3, #0
 8018a20:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8018a24:	2300      	movs	r3, #0
 8018a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8018a2e:	2300      	movs	r3, #0
 8018a30:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8018a34:	2300      	movs	r3, #0
 8018a36:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d109      	bne.n	8018a5a <tcp_write+0x66>
 8018a46:	4b9c      	ldr	r3, [pc, #624]	@ (8018cb8 <tcp_write+0x2c4>)
 8018a48:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8018a4c:	499b      	ldr	r1, [pc, #620]	@ (8018cbc <tcp_write+0x2c8>)
 8018a4e:	489c      	ldr	r0, [pc, #624]	@ (8018cc0 <tcp_write+0x2cc>)
 8018a50:	f006 f99c 	bl	801ed8c <iprintf>
 8018a54:	f06f 030f 	mvn.w	r3, #15
 8018a58:	e379      	b.n	801914e <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018a60:	085b      	lsrs	r3, r3, #1
 8018a62:	b29a      	uxth	r2, r3
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018a68:	4293      	cmp	r3, r2
 8018a6a:	bf28      	it	cs
 8018a6c:	4613      	movcs	r3, r2
 8018a6e:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8018a70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d102      	bne.n	8018a7c <tcp_write+0x88>
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018a7a:	e000      	b.n	8018a7e <tcp_write+0x8a>
 8018a7c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018a7e:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018a80:	68bb      	ldr	r3, [r7, #8]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d109      	bne.n	8018a9a <tcp_write+0xa6>
 8018a86:	4b8c      	ldr	r3, [pc, #560]	@ (8018cb8 <tcp_write+0x2c4>)
 8018a88:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8018a8c:	498d      	ldr	r1, [pc, #564]	@ (8018cc4 <tcp_write+0x2d0>)
 8018a8e:	488c      	ldr	r0, [pc, #560]	@ (8018cc0 <tcp_write+0x2cc>)
 8018a90:	f006 f97c 	bl	801ed8c <iprintf>
 8018a94:	f06f 030f 	mvn.w	r3, #15
 8018a98:	e359      	b.n	801914e <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018a9a:	88fb      	ldrh	r3, [r7, #6]
 8018a9c:	4619      	mov	r1, r3
 8018a9e:	68f8      	ldr	r0, [r7, #12]
 8018aa0:	f7ff ff2e 	bl	8018900 <tcp_write_checks>
 8018aa4:	4603      	mov	r3, r0
 8018aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8018aaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d002      	beq.n	8018ab8 <tcp_write+0xc4>
    return err;
 8018ab2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018ab6:	e34a      	b.n	801914e <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018abe:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	f000 8127 	beq.w	8018d20 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ad8:	e002      	b.n	8018ae0 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 8018ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d1f8      	bne.n	8018ada <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8018ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018aea:	7b1b      	ldrb	r3, [r3, #12]
 8018aec:	009b      	lsls	r3, r3, #2
 8018aee:	b29b      	uxth	r3, r3
 8018af0:	f003 0304 	and.w	r3, r3, #4
 8018af4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018af6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8018af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018afa:	891b      	ldrh	r3, [r3, #8]
 8018afc:	4619      	mov	r1, r3
 8018afe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018b00:	440b      	add	r3, r1
 8018b02:	429a      	cmp	r2, r3
 8018b04:	da06      	bge.n	8018b14 <tcp_write+0x120>
 8018b06:	4b6c      	ldr	r3, [pc, #432]	@ (8018cb8 <tcp_write+0x2c4>)
 8018b08:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8018b0c:	496e      	ldr	r1, [pc, #440]	@ (8018cc8 <tcp_write+0x2d4>)
 8018b0e:	486c      	ldr	r0, [pc, #432]	@ (8018cc0 <tcp_write+0x2cc>)
 8018b10:	f006 f93c 	bl	801ed8c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8018b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018b16:	891a      	ldrh	r2, [r3, #8]
 8018b18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018b1a:	4413      	add	r3, r2
 8018b1c:	b29b      	uxth	r3, r3
 8018b1e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8018b20:	1ad3      	subs	r3, r2, r3
 8018b22:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 8018b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018b2e:	895b      	ldrh	r3, [r3, #10]
 8018b30:	429a      	cmp	r2, r3
 8018b32:	d006      	beq.n	8018b42 <tcp_write+0x14e>
 8018b34:	4b60      	ldr	r3, [pc, #384]	@ (8018cb8 <tcp_write+0x2c4>)
 8018b36:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8018b3a:	4964      	ldr	r1, [pc, #400]	@ (8018ccc <tcp_write+0x2d8>)
 8018b3c:	4860      	ldr	r0, [pc, #384]	@ (8018cc0 <tcp_write+0x2cc>)
 8018b3e:	f006 f925 	bl	801ed8c <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018b48:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8018b4a:	8afb      	ldrh	r3, [r7, #22]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d02e      	beq.n	8018bae <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018b50:	8afb      	ldrh	r3, [r7, #22]
 8018b52:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8018b56:	429a      	cmp	r2, r3
 8018b58:	d206      	bcs.n	8018b68 <tcp_write+0x174>
 8018b5a:	4b57      	ldr	r3, [pc, #348]	@ (8018cb8 <tcp_write+0x2c4>)
 8018b5c:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8018b60:	495b      	ldr	r1, [pc, #364]	@ (8018cd0 <tcp_write+0x2dc>)
 8018b62:	4857      	ldr	r0, [pc, #348]	@ (8018cc0 <tcp_write+0x2cc>)
 8018b64:	f006 f912 	bl	801ed8c <iprintf>
      seg = last_unsent;
 8018b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018b6a:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018b6c:	8afb      	ldrh	r3, [r7, #22]
 8018b6e:	88fa      	ldrh	r2, [r7, #6]
 8018b70:	4293      	cmp	r3, r2
 8018b72:	bf28      	it	cs
 8018b74:	4613      	movcs	r3, r2
 8018b76:	b29b      	uxth	r3, r3
 8018b78:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8018b7c:	4293      	cmp	r3, r2
 8018b7e:	bf28      	it	cs
 8018b80:	4613      	movcs	r3, r2
 8018b82:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 8018b86:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8018b8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018b8e:	4413      	add	r3, r2
 8018b90:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 8018b94:	8afa      	ldrh	r2, [r7, #22]
 8018b96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018b9a:	1ad3      	subs	r3, r2, r3
 8018b9c:	b29b      	uxth	r3, r3
 8018b9e:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8018ba0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8018ba4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018ba8:	1ad3      	subs	r3, r2, r3
 8018baa:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018bae:	8afb      	ldrh	r3, [r7, #22]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d00b      	beq.n	8018bcc <tcp_write+0x1d8>
 8018bb4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8018bb8:	88fb      	ldrh	r3, [r7, #6]
 8018bba:	429a      	cmp	r2, r3
 8018bbc:	d006      	beq.n	8018bcc <tcp_write+0x1d8>
 8018bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8018cb8 <tcp_write+0x2c4>)
 8018bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018bc4:	4943      	ldr	r1, [pc, #268]	@ (8018cd4 <tcp_write+0x2e0>)
 8018bc6:	483e      	ldr	r0, [pc, #248]	@ (8018cc0 <tcp_write+0x2cc>)
 8018bc8:	f006 f8e0 	bl	801ed8c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018bcc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8018bd0:	88fb      	ldrh	r3, [r7, #6]
 8018bd2:	429a      	cmp	r2, r3
 8018bd4:	f080 8172 	bcs.w	8018ebc <tcp_write+0x4c8>
 8018bd8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	f000 816d 	beq.w	8018ebc <tcp_write+0x4c8>
 8018be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018be4:	891b      	ldrh	r3, [r3, #8]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	f000 8168 	beq.w	8018ebc <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8018bec:	88fa      	ldrh	r2, [r7, #6]
 8018bee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8018bf2:	1ad2      	subs	r2, r2, r3
 8018bf4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8018bf8:	4293      	cmp	r3, r2
 8018bfa:	bfa8      	it	ge
 8018bfc:	4613      	movge	r3, r2
 8018bfe:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 8018c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018c02:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018c04:	797b      	ldrb	r3, [r7, #5]
 8018c06:	f003 0301 	and.w	r3, r3, #1
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d02b      	beq.n	8018c66 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018c0e:	f107 0016 	add.w	r0, r7, #22
 8018c12:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8018c16:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8018c18:	2301      	movs	r3, #1
 8018c1a:	9302      	str	r3, [sp, #8]
 8018c1c:	797b      	ldrb	r3, [r7, #5]
 8018c1e:	9301      	str	r3, [sp, #4]
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	9300      	str	r3, [sp, #0]
 8018c24:	4603      	mov	r3, r0
 8018c26:	2000      	movs	r0, #0
 8018c28:	f7ff fdf0 	bl	801880c <tcp_pbuf_prealloc>
 8018c2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8018c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	f000 825a 	beq.w	80190ea <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8018c36:	8afb      	ldrh	r3, [r7, #22]
 8018c38:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c3e:	6858      	ldr	r0, [r3, #4]
 8018c40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8018c44:	68ba      	ldr	r2, [r7, #8]
 8018c46:	4413      	add	r3, r2
 8018c48:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018c4a:	4619      	mov	r1, r3
 8018c4c:	f006 fa73 	bl	801f136 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8018c50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018c52:	f7fb f939 	bl	8013ec8 <pbuf_clen>
 8018c56:	4603      	mov	r3, r0
 8018c58:	461a      	mov	r2, r3
 8018c5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8018c5e:	4413      	add	r3, r2
 8018c60:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8018c64:	e055      	b.n	8018d12 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8018c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018c68:	685b      	ldr	r3, [r3, #4]
 8018c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018c6c:	e002      	b.n	8018c74 <tcp_write+0x280>
 8018c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d1f8      	bne.n	8018c6e <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c7e:	7b1b      	ldrb	r3, [r3, #12]
 8018c80:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d129      	bne.n	8018cdc <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8018c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c8a:	685b      	ldr	r3, [r3, #4]
 8018c8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018c8e:	8952      	ldrh	r2, [r2, #10]
 8018c90:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018c92:	68ba      	ldr	r2, [r7, #8]
 8018c94:	429a      	cmp	r2, r3
 8018c96:	d121      	bne.n	8018cdc <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8018c98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d006      	beq.n	8018cae <tcp_write+0x2ba>
 8018ca0:	4b05      	ldr	r3, [pc, #20]	@ (8018cb8 <tcp_write+0x2c4>)
 8018ca2:	f240 2231 	movw	r2, #561	@ 0x231
 8018ca6:	490c      	ldr	r1, [pc, #48]	@ (8018cd8 <tcp_write+0x2e4>)
 8018ca8:	4805      	ldr	r0, [pc, #20]	@ (8018cc0 <tcp_write+0x2cc>)
 8018caa:	f006 f86f 	bl	801ed8c <iprintf>
          extendlen = seglen;
 8018cae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018cb0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8018cb4:	e02d      	b.n	8018d12 <tcp_write+0x31e>
 8018cb6:	bf00      	nop
 8018cb8:	0802242c 	.word	0x0802242c
 8018cbc:	080225cc 	.word	0x080225cc
 8018cc0:	08022480 	.word	0x08022480
 8018cc4:	080225e4 	.word	0x080225e4
 8018cc8:	08022618 	.word	0x08022618
 8018ccc:	08022630 	.word	0x08022630
 8018cd0:	08022660 	.word	0x08022660
 8018cd4:	08022680 	.word	0x08022680
 8018cd8:	080226a0 	.word	0x080226a0
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018cdc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018cde:	2201      	movs	r2, #1
 8018ce0:	4619      	mov	r1, r3
 8018ce2:	2000      	movs	r0, #0
 8018ce4:	f7fa fd7e 	bl	80137e4 <pbuf_alloc>
 8018ce8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8018cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	f000 81fe 	beq.w	80190ee <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8018cf2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8018cf6:	68ba      	ldr	r2, [r7, #8]
 8018cf8:	441a      	add	r2, r3
 8018cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cfc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8018cfe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018d00:	f7fb f8e2 	bl	8013ec8 <pbuf_clen>
 8018d04:	4603      	mov	r3, r0
 8018d06:	461a      	mov	r2, r3
 8018d08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8018d0c:	4413      	add	r3, r2
 8018d0e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8018d12:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8018d16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018d18:	4413      	add	r3, r2
 8018d1a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8018d1e:	e0cd      	b.n	8018ebc <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	f000 80c8 	beq.w	8018ebc <tcp_write+0x4c8>
 8018d2c:	4b72      	ldr	r3, [pc, #456]	@ (8018ef8 <tcp_write+0x504>)
 8018d2e:	f240 224a 	movw	r2, #586	@ 0x24a
 8018d32:	4972      	ldr	r1, [pc, #456]	@ (8018efc <tcp_write+0x508>)
 8018d34:	4872      	ldr	r0, [pc, #456]	@ (8018f00 <tcp_write+0x50c>)
 8018d36:	f006 f829 	bl	801ed8c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8018d3a:	e0bf      	b.n	8018ebc <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 8018d3c:	88fa      	ldrh	r2, [r7, #6]
 8018d3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8018d42:	1ad3      	subs	r3, r2, r3
 8018d44:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8018d46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018d4a:	b29b      	uxth	r3, r3
 8018d4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8018d4e:	1ad3      	subs	r3, r2, r3
 8018d50:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8018d52:	8bfa      	ldrh	r2, [r7, #30]
 8018d54:	8c3b      	ldrh	r3, [r7, #32]
 8018d56:	4293      	cmp	r3, r2
 8018d58:	bf28      	it	cs
 8018d5a:	4613      	movcs	r3, r2
 8018d5c:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018d5e:	797b      	ldrb	r3, [r7, #5]
 8018d60:	f003 0301 	and.w	r3, r3, #1
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d036      	beq.n	8018dd6 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8018d68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018d6c:	b29a      	uxth	r2, r3
 8018d6e:	8bbb      	ldrh	r3, [r7, #28]
 8018d70:	4413      	add	r3, r2
 8018d72:	b299      	uxth	r1, r3
 8018d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	bf0c      	ite	eq
 8018d7a:	2301      	moveq	r3, #1
 8018d7c:	2300      	movne	r3, #0
 8018d7e:	b2db      	uxtb	r3, r3
 8018d80:	f107 0016 	add.w	r0, r7, #22
 8018d84:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8018d86:	9302      	str	r3, [sp, #8]
 8018d88:	797b      	ldrb	r3, [r7, #5]
 8018d8a:	9301      	str	r3, [sp, #4]
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	9300      	str	r3, [sp, #0]
 8018d90:	4603      	mov	r3, r0
 8018d92:	2036      	movs	r0, #54	@ 0x36
 8018d94:	f7ff fd3a 	bl	801880c <tcp_pbuf_prealloc>
 8018d98:	6378      	str	r0, [r7, #52]	@ 0x34
 8018d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	f000 81a8 	beq.w	80190f2 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8018da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018da4:	895b      	ldrh	r3, [r3, #10]
 8018da6:	8bba      	ldrh	r2, [r7, #28]
 8018da8:	429a      	cmp	r2, r3
 8018daa:	d906      	bls.n	8018dba <tcp_write+0x3c6>
 8018dac:	4b52      	ldr	r3, [pc, #328]	@ (8018ef8 <tcp_write+0x504>)
 8018dae:	f240 2266 	movw	r2, #614	@ 0x266
 8018db2:	4954      	ldr	r1, [pc, #336]	@ (8018f04 <tcp_write+0x510>)
 8018db4:	4852      	ldr	r0, [pc, #328]	@ (8018f00 <tcp_write+0x50c>)
 8018db6:	f005 ffe9 	bl	801ed8c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8018dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dbc:	685a      	ldr	r2, [r3, #4]
 8018dbe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018dc2:	18d0      	adds	r0, r2, r3
 8018dc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8018dc8:	68ba      	ldr	r2, [r7, #8]
 8018dca:	4413      	add	r3, r2
 8018dcc:	8bba      	ldrh	r2, [r7, #28]
 8018dce:	4619      	mov	r1, r3
 8018dd0:	f006 f9b1 	bl	801f136 <memcpy>
 8018dd4:	e02f      	b.n	8018e36 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8018dd6:	8afb      	ldrh	r3, [r7, #22]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d006      	beq.n	8018dea <tcp_write+0x3f6>
 8018ddc:	4b46      	ldr	r3, [pc, #280]	@ (8018ef8 <tcp_write+0x504>)
 8018dde:	f240 2271 	movw	r2, #625	@ 0x271
 8018de2:	4949      	ldr	r1, [pc, #292]	@ (8018f08 <tcp_write+0x514>)
 8018de4:	4846      	ldr	r0, [pc, #280]	@ (8018f00 <tcp_write+0x50c>)
 8018de6:	f005 ffd1 	bl	801ed8c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8018dea:	8bbb      	ldrh	r3, [r7, #28]
 8018dec:	2201      	movs	r2, #1
 8018dee:	4619      	mov	r1, r3
 8018df0:	2036      	movs	r0, #54	@ 0x36
 8018df2:	f7fa fcf7 	bl	80137e4 <pbuf_alloc>
 8018df6:	61b8      	str	r0, [r7, #24]
 8018df8:	69bb      	ldr	r3, [r7, #24]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	f000 817b 	beq.w	80190f6 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8018e00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8018e04:	68ba      	ldr	r2, [r7, #8]
 8018e06:	441a      	add	r2, r3
 8018e08:	69bb      	ldr	r3, [r7, #24]
 8018e0a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018e10:	b29b      	uxth	r3, r3
 8018e12:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018e16:	4619      	mov	r1, r3
 8018e18:	2036      	movs	r0, #54	@ 0x36
 8018e1a:	f7fa fce3 	bl	80137e4 <pbuf_alloc>
 8018e1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8018e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d103      	bne.n	8018e2e <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8018e26:	69b8      	ldr	r0, [r7, #24]
 8018e28:	f7fa ffc0 	bl	8013dac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8018e2c:	e166      	b.n	80190fc <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8018e2e:	69b9      	ldr	r1, [r7, #24]
 8018e30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018e32:	f7fb f889 	bl	8013f48 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8018e36:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018e38:	f7fb f846 	bl	8013ec8 <pbuf_clen>
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	461a      	mov	r2, r3
 8018e40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8018e44:	4413      	add	r3, r2
 8018e46:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8018e4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8018e4e:	2b09      	cmp	r3, #9
 8018e50:	d903      	bls.n	8018e5a <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8018e52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018e54:	f7fa ffaa 	bl	8013dac <pbuf_free>
      goto memerr;
 8018e58:	e150      	b.n	80190fc <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8018e5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8018e62:	441a      	add	r2, r3
 8018e64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018e68:	9300      	str	r3, [sp, #0]
 8018e6a:	4613      	mov	r3, r2
 8018e6c:	2200      	movs	r2, #0
 8018e6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018e70:	68f8      	ldr	r0, [r7, #12]
 8018e72:	f7ff fc2b 	bl	80186cc <tcp_create_segment>
 8018e76:	6578      	str	r0, [r7, #84]	@ 0x54
 8018e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	f000 813d 	beq.w	80190fa <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8018e80:	8afa      	ldrh	r2, [r7, #22]
 8018e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e84:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8018e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d102      	bne.n	8018e92 <tcp_write+0x49e>
      queue = seg;
 8018e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018e90:	e00c      	b.n	8018eac <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8018e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d106      	bne.n	8018ea6 <tcp_write+0x4b2>
 8018e98:	4b17      	ldr	r3, [pc, #92]	@ (8018ef8 <tcp_write+0x504>)
 8018e9a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018e9e:	491b      	ldr	r1, [pc, #108]	@ (8018f0c <tcp_write+0x518>)
 8018ea0:	4817      	ldr	r0, [pc, #92]	@ (8018f00 <tcp_write+0x50c>)
 8018ea2:	f005 ff73 	bl	801ed8c <iprintf>
      prev_seg->next = seg;
 8018ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ea8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018eaa:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8018eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018eae:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8018eb0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8018eb4:	8bbb      	ldrh	r3, [r7, #28]
 8018eb6:	4413      	add	r3, r2
 8018eb8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 8018ebc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8018ec0:	88fb      	ldrh	r3, [r7, #6]
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	f4ff af3a 	bcc.w	8018d3c <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8018ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d00b      	beq.n	8018ee6 <tcp_write+0x4f2>
 8018ece:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d007      	beq.n	8018ee6 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 8018ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ed8:	895a      	ldrh	r2, [r3, #10]
 8018eda:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8018ede:	4413      	add	r3, r2
 8018ee0:	b29a      	uxth	r2, r3
 8018ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ee4:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8018ee6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d052      	beq.n	8018f94 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8018eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ef0:	685b      	ldr	r3, [r3, #4]
 8018ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8018ef4:	e02e      	b.n	8018f54 <tcp_write+0x560>
 8018ef6:	bf00      	nop
 8018ef8:	0802242c 	.word	0x0802242c
 8018efc:	080226cc 	.word	0x080226cc
 8018f00:	08022480 	.word	0x08022480
 8018f04:	080226fc 	.word	0x080226fc
 8018f08:	0802273c 	.word	0x0802273c
 8018f0c:	0802274c 	.word	0x0802274c
      p->tot_len += oversize_used;
 8018f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f12:	891a      	ldrh	r2, [r3, #8]
 8018f14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018f18:	4413      	add	r3, r2
 8018f1a:	b29a      	uxth	r2, r3
 8018f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f1e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8018f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d112      	bne.n	8018f4e <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f2a:	685b      	ldr	r3, [r3, #4]
 8018f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018f2e:	8952      	ldrh	r2, [r2, #10]
 8018f30:	4413      	add	r3, r2
 8018f32:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018f36:	68b9      	ldr	r1, [r7, #8]
 8018f38:	4618      	mov	r0, r3
 8018f3a:	f006 f8fc 	bl	801f136 <memcpy>
        p->len += oversize_used;
 8018f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f40:	895a      	ldrh	r2, [r3, #10]
 8018f42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018f46:	4413      	add	r3, r2
 8018f48:	b29a      	uxth	r2, r3
 8018f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f4c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8018f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d1da      	bne.n	8018f10 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 8018f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f5c:	891a      	ldrh	r2, [r3, #8]
 8018f5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018f62:	4413      	add	r3, r2
 8018f64:	b29a      	uxth	r2, r3
 8018f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f68:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8018f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f6c:	895b      	ldrh	r3, [r3, #10]
 8018f6e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d906      	bls.n	8018f84 <tcp_write+0x590>
 8018f76:	4b78      	ldr	r3, [pc, #480]	@ (8019158 <tcp_write+0x764>)
 8018f78:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8018f7c:	4977      	ldr	r1, [pc, #476]	@ (801915c <tcp_write+0x768>)
 8018f7e:	4878      	ldr	r0, [pc, #480]	@ (8019160 <tcp_write+0x76c>)
 8018f80:	f005 ff04 	bl	801ed8c <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8018f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f86:	895a      	ldrh	r2, [r3, #10]
 8018f88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018f8c:	1ad3      	subs	r3, r2, r3
 8018f8e:	b29a      	uxth	r2, r3
 8018f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f92:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8018f94:	8afa      	ldrh	r2, [r7, #22]
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8018f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d018      	beq.n	8018fd4 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d106      	bne.n	8018fb6 <tcp_write+0x5c2>
 8018fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8019158 <tcp_write+0x764>)
 8018faa:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8018fae:	496d      	ldr	r1, [pc, #436]	@ (8019164 <tcp_write+0x770>)
 8018fb0:	486b      	ldr	r0, [pc, #428]	@ (8019160 <tcp_write+0x76c>)
 8018fb2:	f005 feeb 	bl	801ed8c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8018fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018fb8:	685b      	ldr	r3, [r3, #4]
 8018fba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f7fa ffc3 	bl	8013f48 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8018fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018fc4:	891a      	ldrh	r2, [r3, #8]
 8018fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fc8:	891b      	ldrh	r3, [r3, #8]
 8018fca:	4413      	add	r3, r2
 8018fcc:	b29a      	uxth	r2, r3
 8018fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018fd0:	811a      	strh	r2, [r3, #8]
 8018fd2:	e03c      	b.n	801904e <tcp_write+0x65a>
  } else if (extendlen > 0) {
 8018fd4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d038      	beq.n	801904e <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8018fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d003      	beq.n	8018fea <tcp_write+0x5f6>
 8018fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018fe4:	685b      	ldr	r3, [r3, #4]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d106      	bne.n	8018ff8 <tcp_write+0x604>
 8018fea:	4b5b      	ldr	r3, [pc, #364]	@ (8019158 <tcp_write+0x764>)
 8018fec:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8018ff0:	495d      	ldr	r1, [pc, #372]	@ (8019168 <tcp_write+0x774>)
 8018ff2:	485b      	ldr	r0, [pc, #364]	@ (8019160 <tcp_write+0x76c>)
 8018ff4:	f005 feca 	bl	801ed8c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ffa:	685b      	ldr	r3, [r3, #4]
 8018ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018ffe:	e00a      	b.n	8019016 <tcp_write+0x622>
      p->tot_len += extendlen;
 8019000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019002:	891a      	ldrh	r2, [r3, #8]
 8019004:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019008:	4413      	add	r3, r2
 801900a:	b29a      	uxth	r2, r3
 801900c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801900e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d1f0      	bne.n	8019000 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 801901e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019020:	891a      	ldrh	r2, [r3, #8]
 8019022:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019026:	4413      	add	r3, r2
 8019028:	b29a      	uxth	r2, r3
 801902a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801902c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801902e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019030:	895a      	ldrh	r2, [r3, #10]
 8019032:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019036:	4413      	add	r3, r2
 8019038:	b29a      	uxth	r2, r3
 801903a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801903c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801903e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019040:	891a      	ldrh	r2, [r3, #8]
 8019042:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019046:	4413      	add	r3, r2
 8019048:	b29a      	uxth	r2, r3
 801904a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801904c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801904e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019050:	2b00      	cmp	r3, #0
 8019052:	d103      	bne.n	801905c <tcp_write+0x668>
    pcb->unsent = queue;
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019058:	66da      	str	r2, [r3, #108]	@ 0x6c
 801905a:	e002      	b.n	8019062 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 801905c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801905e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019060:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019066:	88fb      	ldrh	r3, [r7, #6]
 8019068:	441a      	add	r2, r3
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019074:	88fb      	ldrh	r3, [r7, #6]
 8019076:	1ad3      	subs	r3, r2, r3
 8019078:	b29a      	uxth	r2, r3
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8019086:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019090:	2b00      	cmp	r3, #0
 8019092:	d00e      	beq.n	80190b2 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019098:	2b00      	cmp	r3, #0
 801909a:	d10a      	bne.n	80190b2 <tcp_write+0x6be>
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d106      	bne.n	80190b2 <tcp_write+0x6be>
 80190a4:	4b2c      	ldr	r3, [pc, #176]	@ (8019158 <tcp_write+0x764>)
 80190a6:	f240 3212 	movw	r2, #786	@ 0x312
 80190aa:	4930      	ldr	r1, [pc, #192]	@ (801916c <tcp_write+0x778>)
 80190ac:	482c      	ldr	r0, [pc, #176]	@ (8019160 <tcp_write+0x76c>)
 80190ae:	f005 fe6d 	bl	801ed8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80190b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d016      	beq.n	80190e6 <tcp_write+0x6f2>
 80190b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190ba:	691b      	ldr	r3, [r3, #16]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d012      	beq.n	80190e6 <tcp_write+0x6f2>
 80190c0:	797b      	ldrb	r3, [r7, #5]
 80190c2:	f003 0302 	and.w	r3, r3, #2
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d10d      	bne.n	80190e6 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80190ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190cc:	691b      	ldr	r3, [r3, #16]
 80190ce:	899b      	ldrh	r3, [r3, #12]
 80190d0:	b29c      	uxth	r4, r3
 80190d2:	2008      	movs	r0, #8
 80190d4:	f7f9 f986 	bl	80123e4 <lwip_htons>
 80190d8:	4603      	mov	r3, r0
 80190da:	461a      	mov	r2, r3
 80190dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190de:	691b      	ldr	r3, [r3, #16]
 80190e0:	4322      	orrs	r2, r4
 80190e2:	b292      	uxth	r2, r2
 80190e4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80190e6:	2300      	movs	r3, #0
 80190e8:	e031      	b.n	801914e <tcp_write+0x75a>
          goto memerr;
 80190ea:	bf00      	nop
 80190ec:	e006      	b.n	80190fc <tcp_write+0x708>
            goto memerr;
 80190ee:	bf00      	nop
 80190f0:	e004      	b.n	80190fc <tcp_write+0x708>
        goto memerr;
 80190f2:	bf00      	nop
 80190f4:	e002      	b.n	80190fc <tcp_write+0x708>
        goto memerr;
 80190f6:	bf00      	nop
 80190f8:	e000      	b.n	80190fc <tcp_write+0x708>
      goto memerr;
 80190fa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	8b5b      	ldrh	r3, [r3, #26]
 8019100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019104:	b29a      	uxth	r2, r3
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801910a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801910c:	2b00      	cmp	r3, #0
 801910e:	d002      	beq.n	8019116 <tcp_write+0x722>
    pbuf_free(concat_p);
 8019110:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019112:	f7fa fe4b 	bl	8013dac <pbuf_free>
  }
  if (queue != NULL) {
 8019116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019118:	2b00      	cmp	r3, #0
 801911a:	d002      	beq.n	8019122 <tcp_write+0x72e>
    tcp_segs_free(queue);
 801911c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801911e:	f7fc fb13 	bl	8015748 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019128:	2b00      	cmp	r3, #0
 801912a:	d00e      	beq.n	801914a <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019130:	2b00      	cmp	r3, #0
 8019132:	d10a      	bne.n	801914a <tcp_write+0x756>
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019138:	2b00      	cmp	r3, #0
 801913a:	d106      	bne.n	801914a <tcp_write+0x756>
 801913c:	4b06      	ldr	r3, [pc, #24]	@ (8019158 <tcp_write+0x764>)
 801913e:	f240 3227 	movw	r2, #807	@ 0x327
 8019142:	490a      	ldr	r1, [pc, #40]	@ (801916c <tcp_write+0x778>)
 8019144:	4806      	ldr	r0, [pc, #24]	@ (8019160 <tcp_write+0x76c>)
 8019146:	f005 fe21 	bl	801ed8c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801914a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801914e:	4618      	mov	r0, r3
 8019150:	3764      	adds	r7, #100	@ 0x64
 8019152:	46bd      	mov	sp, r7
 8019154:	bd90      	pop	{r4, r7, pc}
 8019156:	bf00      	nop
 8019158:	0802242c 	.word	0x0802242c
 801915c:	08022760 	.word	0x08022760
 8019160:	08022480 	.word	0x08022480
 8019164:	0802278c 	.word	0x0802278c
 8019168:	080227c4 	.word	0x080227c4
 801916c:	080227fc 	.word	0x080227fc

08019170 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019170:	b590      	push	{r4, r7, lr}
 8019172:	b08b      	sub	sp, #44	@ 0x2c
 8019174:	af02      	add	r7, sp, #8
 8019176:	6078      	str	r0, [r7, #4]
 8019178:	460b      	mov	r3, r1
 801917a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801917c:	2300      	movs	r3, #0
 801917e:	61bb      	str	r3, [r7, #24]
 8019180:	2300      	movs	r3, #0
 8019182:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019184:	2300      	movs	r3, #0
 8019186:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	2b00      	cmp	r3, #0
 801918c:	d106      	bne.n	801919c <tcp_split_unsent_seg+0x2c>
 801918e:	4b97      	ldr	r3, [pc, #604]	@ (80193ec <tcp_split_unsent_seg+0x27c>)
 8019190:	f240 324b 	movw	r2, #843	@ 0x34b
 8019194:	4996      	ldr	r1, [pc, #600]	@ (80193f0 <tcp_split_unsent_seg+0x280>)
 8019196:	4897      	ldr	r0, [pc, #604]	@ (80193f4 <tcp_split_unsent_seg+0x284>)
 8019198:	f005 fdf8 	bl	801ed8c <iprintf>

  useg = pcb->unsent;
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191a0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80191a2:	697b      	ldr	r3, [r7, #20]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d102      	bne.n	80191ae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80191a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80191ac:	e119      	b.n	80193e2 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 80191ae:	887b      	ldrh	r3, [r7, #2]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d109      	bne.n	80191c8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80191b4:	4b8d      	ldr	r3, [pc, #564]	@ (80193ec <tcp_split_unsent_seg+0x27c>)
 80191b6:	f240 3253 	movw	r2, #851	@ 0x353
 80191ba:	498f      	ldr	r1, [pc, #572]	@ (80193f8 <tcp_split_unsent_seg+0x288>)
 80191bc:	488d      	ldr	r0, [pc, #564]	@ (80193f4 <tcp_split_unsent_seg+0x284>)
 80191be:	f005 fde5 	bl	801ed8c <iprintf>
    return ERR_VAL;
 80191c2:	f06f 0305 	mvn.w	r3, #5
 80191c6:	e10c      	b.n	80193e2 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	891b      	ldrh	r3, [r3, #8]
 80191cc:	887a      	ldrh	r2, [r7, #2]
 80191ce:	429a      	cmp	r2, r3
 80191d0:	d301      	bcc.n	80191d6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80191d2:	2300      	movs	r3, #0
 80191d4:	e105      	b.n	80193e2 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80191da:	887a      	ldrh	r2, [r7, #2]
 80191dc:	429a      	cmp	r2, r3
 80191de:	d906      	bls.n	80191ee <tcp_split_unsent_seg+0x7e>
 80191e0:	4b82      	ldr	r3, [pc, #520]	@ (80193ec <tcp_split_unsent_seg+0x27c>)
 80191e2:	f240 325b 	movw	r2, #859	@ 0x35b
 80191e6:	4985      	ldr	r1, [pc, #532]	@ (80193fc <tcp_split_unsent_seg+0x28c>)
 80191e8:	4882      	ldr	r0, [pc, #520]	@ (80193f4 <tcp_split_unsent_seg+0x284>)
 80191ea:	f005 fdcf 	bl	801ed8c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80191ee:	697b      	ldr	r3, [r7, #20]
 80191f0:	891b      	ldrh	r3, [r3, #8]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d106      	bne.n	8019204 <tcp_split_unsent_seg+0x94>
 80191f6:	4b7d      	ldr	r3, [pc, #500]	@ (80193ec <tcp_split_unsent_seg+0x27c>)
 80191f8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80191fc:	4980      	ldr	r1, [pc, #512]	@ (8019400 <tcp_split_unsent_seg+0x290>)
 80191fe:	487d      	ldr	r0, [pc, #500]	@ (80193f4 <tcp_split_unsent_seg+0x284>)
 8019200:	f005 fdc4 	bl	801ed8c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019204:	697b      	ldr	r3, [r7, #20]
 8019206:	7b1b      	ldrb	r3, [r3, #12]
 8019208:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801920a:	7bfb      	ldrb	r3, [r7, #15]
 801920c:	009b      	lsls	r3, r3, #2
 801920e:	b2db      	uxtb	r3, r3
 8019210:	f003 0304 	and.w	r3, r3, #4
 8019214:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019216:	697b      	ldr	r3, [r7, #20]
 8019218:	891a      	ldrh	r2, [r3, #8]
 801921a:	887b      	ldrh	r3, [r7, #2]
 801921c:	1ad3      	subs	r3, r2, r3
 801921e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019220:	7bbb      	ldrb	r3, [r7, #14]
 8019222:	b29a      	uxth	r2, r3
 8019224:	89bb      	ldrh	r3, [r7, #12]
 8019226:	4413      	add	r3, r2
 8019228:	b29b      	uxth	r3, r3
 801922a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801922e:	4619      	mov	r1, r3
 8019230:	2036      	movs	r0, #54	@ 0x36
 8019232:	f7fa fad7 	bl	80137e4 <pbuf_alloc>
 8019236:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019238:	693b      	ldr	r3, [r7, #16]
 801923a:	2b00      	cmp	r3, #0
 801923c:	f000 80ba 	beq.w	80193b4 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019240:	697b      	ldr	r3, [r7, #20]
 8019242:	685b      	ldr	r3, [r3, #4]
 8019244:	891a      	ldrh	r2, [r3, #8]
 8019246:	697b      	ldr	r3, [r7, #20]
 8019248:	891b      	ldrh	r3, [r3, #8]
 801924a:	1ad3      	subs	r3, r2, r3
 801924c:	b29a      	uxth	r2, r3
 801924e:	887b      	ldrh	r3, [r7, #2]
 8019250:	4413      	add	r3, r2
 8019252:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019254:	697b      	ldr	r3, [r7, #20]
 8019256:	6858      	ldr	r0, [r3, #4]
 8019258:	693b      	ldr	r3, [r7, #16]
 801925a:	685a      	ldr	r2, [r3, #4]
 801925c:	7bbb      	ldrb	r3, [r7, #14]
 801925e:	18d1      	adds	r1, r2, r3
 8019260:	897b      	ldrh	r3, [r7, #10]
 8019262:	89ba      	ldrh	r2, [r7, #12]
 8019264:	f7fa ffa8 	bl	80141b8 <pbuf_copy_partial>
 8019268:	4603      	mov	r3, r0
 801926a:	461a      	mov	r2, r3
 801926c:	89bb      	ldrh	r3, [r7, #12]
 801926e:	4293      	cmp	r3, r2
 8019270:	f040 80a2 	bne.w	80193b8 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019274:	697b      	ldr	r3, [r7, #20]
 8019276:	691b      	ldr	r3, [r3, #16]
 8019278:	899b      	ldrh	r3, [r3, #12]
 801927a:	b29b      	uxth	r3, r3
 801927c:	4618      	mov	r0, r3
 801927e:	f7f9 f8b1 	bl	80123e4 <lwip_htons>
 8019282:	4603      	mov	r3, r0
 8019284:	b2db      	uxtb	r3, r3
 8019286:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801928a:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801928c:	2300      	movs	r3, #0
 801928e:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8019290:	7ffb      	ldrb	r3, [r7, #31]
 8019292:	f003 0308 	and.w	r3, r3, #8
 8019296:	2b00      	cmp	r3, #0
 8019298:	d007      	beq.n	80192aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801929a:	7ffb      	ldrb	r3, [r7, #31]
 801929c:	f023 0308 	bic.w	r3, r3, #8
 80192a0:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 80192a2:	7fbb      	ldrb	r3, [r7, #30]
 80192a4:	f043 0308 	orr.w	r3, r3, #8
 80192a8:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 80192aa:	7ffb      	ldrb	r3, [r7, #31]
 80192ac:	f003 0301 	and.w	r3, r3, #1
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d007      	beq.n	80192c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80192b4:	7ffb      	ldrb	r3, [r7, #31]
 80192b6:	f023 0301 	bic.w	r3, r3, #1
 80192ba:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 80192bc:	7fbb      	ldrb	r3, [r7, #30]
 80192be:	f043 0301 	orr.w	r3, r3, #1
 80192c2:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80192c4:	697b      	ldr	r3, [r7, #20]
 80192c6:	691b      	ldr	r3, [r3, #16]
 80192c8:	685b      	ldr	r3, [r3, #4]
 80192ca:	4618      	mov	r0, r3
 80192cc:	f7f9 f8a0 	bl	8012410 <lwip_htonl>
 80192d0:	4602      	mov	r2, r0
 80192d2:	887b      	ldrh	r3, [r7, #2]
 80192d4:	18d1      	adds	r1, r2, r3
 80192d6:	7fba      	ldrb	r2, [r7, #30]
 80192d8:	7bfb      	ldrb	r3, [r7, #15]
 80192da:	9300      	str	r3, [sp, #0]
 80192dc:	460b      	mov	r3, r1
 80192de:	6939      	ldr	r1, [r7, #16]
 80192e0:	6878      	ldr	r0, [r7, #4]
 80192e2:	f7ff f9f3 	bl	80186cc <tcp_create_segment>
 80192e6:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 80192e8:	69bb      	ldr	r3, [r7, #24]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d066      	beq.n	80193bc <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80192ee:	697b      	ldr	r3, [r7, #20]
 80192f0:	685b      	ldr	r3, [r3, #4]
 80192f2:	4618      	mov	r0, r3
 80192f4:	f7fa fde8 	bl	8013ec8 <pbuf_clen>
 80192f8:	4603      	mov	r3, r0
 80192fa:	461a      	mov	r2, r3
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019302:	1a9b      	subs	r3, r3, r2
 8019304:	b29a      	uxth	r2, r3
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801930c:	697b      	ldr	r3, [r7, #20]
 801930e:	6858      	ldr	r0, [r3, #4]
 8019310:	697b      	ldr	r3, [r7, #20]
 8019312:	685b      	ldr	r3, [r3, #4]
 8019314:	891a      	ldrh	r2, [r3, #8]
 8019316:	89bb      	ldrh	r3, [r7, #12]
 8019318:	1ad3      	subs	r3, r2, r3
 801931a:	b29b      	uxth	r3, r3
 801931c:	4619      	mov	r1, r3
 801931e:	f7fa fbbf 	bl	8013aa0 <pbuf_realloc>
  useg->len -= remainder;
 8019322:	697b      	ldr	r3, [r7, #20]
 8019324:	891a      	ldrh	r2, [r3, #8]
 8019326:	89bb      	ldrh	r3, [r7, #12]
 8019328:	1ad3      	subs	r3, r2, r3
 801932a:	b29a      	uxth	r2, r3
 801932c:	697b      	ldr	r3, [r7, #20]
 801932e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019330:	697b      	ldr	r3, [r7, #20]
 8019332:	691b      	ldr	r3, [r3, #16]
 8019334:	899b      	ldrh	r3, [r3, #12]
 8019336:	b29c      	uxth	r4, r3
 8019338:	7ffb      	ldrb	r3, [r7, #31]
 801933a:	b29b      	uxth	r3, r3
 801933c:	4618      	mov	r0, r3
 801933e:	f7f9 f851 	bl	80123e4 <lwip_htons>
 8019342:	4603      	mov	r3, r0
 8019344:	461a      	mov	r2, r3
 8019346:	697b      	ldr	r3, [r7, #20]
 8019348:	691b      	ldr	r3, [r3, #16]
 801934a:	4322      	orrs	r2, r4
 801934c:	b292      	uxth	r2, r2
 801934e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8019350:	697b      	ldr	r3, [r7, #20]
 8019352:	2200      	movs	r2, #0
 8019354:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019356:	697b      	ldr	r3, [r7, #20]
 8019358:	685b      	ldr	r3, [r3, #4]
 801935a:	4618      	mov	r0, r3
 801935c:	f7fa fdb4 	bl	8013ec8 <pbuf_clen>
 8019360:	4603      	mov	r3, r0
 8019362:	461a      	mov	r2, r3
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801936a:	4413      	add	r3, r2
 801936c:	b29a      	uxth	r2, r3
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019374:	69bb      	ldr	r3, [r7, #24]
 8019376:	685b      	ldr	r3, [r3, #4]
 8019378:	4618      	mov	r0, r3
 801937a:	f7fa fda5 	bl	8013ec8 <pbuf_clen>
 801937e:	4603      	mov	r3, r0
 8019380:	461a      	mov	r2, r3
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019388:	4413      	add	r3, r2
 801938a:	b29a      	uxth	r2, r3
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019392:	697b      	ldr	r3, [r7, #20]
 8019394:	681a      	ldr	r2, [r3, #0]
 8019396:	69bb      	ldr	r3, [r7, #24]
 8019398:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801939a:	697b      	ldr	r3, [r7, #20]
 801939c:	69ba      	ldr	r2, [r7, #24]
 801939e:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80193a0:	69bb      	ldr	r3, [r7, #24]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d103      	bne.n	80193b0 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	2200      	movs	r2, #0
 80193ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80193b0:	2300      	movs	r3, #0
 80193b2:	e016      	b.n	80193e2 <tcp_split_unsent_seg+0x272>
    goto memerr;
 80193b4:	bf00      	nop
 80193b6:	e002      	b.n	80193be <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80193b8:	bf00      	nop
 80193ba:	e000      	b.n	80193be <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80193bc:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80193be:	69bb      	ldr	r3, [r7, #24]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d006      	beq.n	80193d2 <tcp_split_unsent_seg+0x262>
 80193c4:	4b09      	ldr	r3, [pc, #36]	@ (80193ec <tcp_split_unsent_seg+0x27c>)
 80193c6:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80193ca:	490e      	ldr	r1, [pc, #56]	@ (8019404 <tcp_split_unsent_seg+0x294>)
 80193cc:	4809      	ldr	r0, [pc, #36]	@ (80193f4 <tcp_split_unsent_seg+0x284>)
 80193ce:	f005 fcdd 	bl	801ed8c <iprintf>
  if (p != NULL) {
 80193d2:	693b      	ldr	r3, [r7, #16]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d002      	beq.n	80193de <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 80193d8:	6938      	ldr	r0, [r7, #16]
 80193da:	f7fa fce7 	bl	8013dac <pbuf_free>
  }

  return ERR_MEM;
 80193de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80193e2:	4618      	mov	r0, r3
 80193e4:	3724      	adds	r7, #36	@ 0x24
 80193e6:	46bd      	mov	sp, r7
 80193e8:	bd90      	pop	{r4, r7, pc}
 80193ea:	bf00      	nop
 80193ec:	0802242c 	.word	0x0802242c
 80193f0:	0802281c 	.word	0x0802281c
 80193f4:	08022480 	.word	0x08022480
 80193f8:	08022840 	.word	0x08022840
 80193fc:	08022864 	.word	0x08022864
 8019400:	08022874 	.word	0x08022874
 8019404:	08022884 	.word	0x08022884

08019408 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019408:	b590      	push	{r4, r7, lr}
 801940a:	b085      	sub	sp, #20
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d106      	bne.n	8019424 <tcp_send_fin+0x1c>
 8019416:	4b21      	ldr	r3, [pc, #132]	@ (801949c <tcp_send_fin+0x94>)
 8019418:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801941c:	4920      	ldr	r1, [pc, #128]	@ (80194a0 <tcp_send_fin+0x98>)
 801941e:	4821      	ldr	r0, [pc, #132]	@ (80194a4 <tcp_send_fin+0x9c>)
 8019420:	f005 fcb4 	bl	801ed8c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019428:	2b00      	cmp	r3, #0
 801942a:	d02e      	beq.n	801948a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019430:	60fb      	str	r3, [r7, #12]
 8019432:	e002      	b.n	801943a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d1f8      	bne.n	8019434 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	691b      	ldr	r3, [r3, #16]
 8019446:	899b      	ldrh	r3, [r3, #12]
 8019448:	b29b      	uxth	r3, r3
 801944a:	4618      	mov	r0, r3
 801944c:	f7f8 ffca 	bl	80123e4 <lwip_htons>
 8019450:	4603      	mov	r3, r0
 8019452:	b2db      	uxtb	r3, r3
 8019454:	f003 0307 	and.w	r3, r3, #7
 8019458:	2b00      	cmp	r3, #0
 801945a:	d116      	bne.n	801948a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	691b      	ldr	r3, [r3, #16]
 8019460:	899b      	ldrh	r3, [r3, #12]
 8019462:	b29c      	uxth	r4, r3
 8019464:	2001      	movs	r0, #1
 8019466:	f7f8 ffbd 	bl	80123e4 <lwip_htons>
 801946a:	4603      	mov	r3, r0
 801946c:	461a      	mov	r2, r3
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	691b      	ldr	r3, [r3, #16]
 8019472:	4322      	orrs	r2, r4
 8019474:	b292      	uxth	r2, r2
 8019476:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	8b5b      	ldrh	r3, [r3, #26]
 801947c:	f043 0320 	orr.w	r3, r3, #32
 8019480:	b29a      	uxth	r2, r3
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019486:	2300      	movs	r3, #0
 8019488:	e004      	b.n	8019494 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801948a:	2101      	movs	r1, #1
 801948c:	6878      	ldr	r0, [r7, #4]
 801948e:	f000 f80b 	bl	80194a8 <tcp_enqueue_flags>
 8019492:	4603      	mov	r3, r0
}
 8019494:	4618      	mov	r0, r3
 8019496:	3714      	adds	r7, #20
 8019498:	46bd      	mov	sp, r7
 801949a:	bd90      	pop	{r4, r7, pc}
 801949c:	0802242c 	.word	0x0802242c
 80194a0:	08022890 	.word	0x08022890
 80194a4:	08022480 	.word	0x08022480

080194a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b088      	sub	sp, #32
 80194ac:	af02      	add	r7, sp, #8
 80194ae:	6078      	str	r0, [r7, #4]
 80194b0:	460b      	mov	r3, r1
 80194b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80194b4:	2300      	movs	r3, #0
 80194b6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 80194b8:	2300      	movs	r3, #0
 80194ba:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80194bc:	78fb      	ldrb	r3, [r7, #3]
 80194be:	f003 0303 	and.w	r3, r3, #3
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d106      	bne.n	80194d4 <tcp_enqueue_flags+0x2c>
 80194c6:	4b67      	ldr	r3, [pc, #412]	@ (8019664 <tcp_enqueue_flags+0x1bc>)
 80194c8:	f240 4211 	movw	r2, #1041	@ 0x411
 80194cc:	4966      	ldr	r1, [pc, #408]	@ (8019668 <tcp_enqueue_flags+0x1c0>)
 80194ce:	4867      	ldr	r0, [pc, #412]	@ (801966c <tcp_enqueue_flags+0x1c4>)
 80194d0:	f005 fc5c 	bl	801ed8c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d106      	bne.n	80194e8 <tcp_enqueue_flags+0x40>
 80194da:	4b62      	ldr	r3, [pc, #392]	@ (8019664 <tcp_enqueue_flags+0x1bc>)
 80194dc:	f240 4213 	movw	r2, #1043	@ 0x413
 80194e0:	4963      	ldr	r1, [pc, #396]	@ (8019670 <tcp_enqueue_flags+0x1c8>)
 80194e2:	4862      	ldr	r0, [pc, #392]	@ (801966c <tcp_enqueue_flags+0x1c4>)
 80194e4:	f005 fc52 	bl	801ed8c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80194e8:	78fb      	ldrb	r3, [r7, #3]
 80194ea:	f003 0302 	and.w	r3, r3, #2
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d001      	beq.n	80194f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80194f2:	2301      	movs	r3, #1
 80194f4:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80194f6:	7dfb      	ldrb	r3, [r7, #23]
 80194f8:	009b      	lsls	r3, r3, #2
 80194fa:	b2db      	uxtb	r3, r3
 80194fc:	f003 0304 	and.w	r3, r3, #4
 8019500:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019502:	7dbb      	ldrb	r3, [r7, #22]
 8019504:	b29b      	uxth	r3, r3
 8019506:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801950a:	4619      	mov	r1, r3
 801950c:	2036      	movs	r0, #54	@ 0x36
 801950e:	f7fa f969 	bl	80137e4 <pbuf_alloc>
 8019512:	60f8      	str	r0, [r7, #12]
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d109      	bne.n	801952e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	8b5b      	ldrh	r3, [r3, #26]
 801951e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019522:	b29a      	uxth	r2, r3
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801952c:	e095      	b.n	801965a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	895a      	ldrh	r2, [r3, #10]
 8019532:	7dbb      	ldrb	r3, [r7, #22]
 8019534:	b29b      	uxth	r3, r3
 8019536:	429a      	cmp	r2, r3
 8019538:	d206      	bcs.n	8019548 <tcp_enqueue_flags+0xa0>
 801953a:	4b4a      	ldr	r3, [pc, #296]	@ (8019664 <tcp_enqueue_flags+0x1bc>)
 801953c:	f240 4239 	movw	r2, #1081	@ 0x439
 8019540:	494c      	ldr	r1, [pc, #304]	@ (8019674 <tcp_enqueue_flags+0x1cc>)
 8019542:	484a      	ldr	r0, [pc, #296]	@ (801966c <tcp_enqueue_flags+0x1c4>)
 8019544:	f005 fc22 	bl	801ed8c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801954c:	78fa      	ldrb	r2, [r7, #3]
 801954e:	7dfb      	ldrb	r3, [r7, #23]
 8019550:	9300      	str	r3, [sp, #0]
 8019552:	460b      	mov	r3, r1
 8019554:	68f9      	ldr	r1, [r7, #12]
 8019556:	6878      	ldr	r0, [r7, #4]
 8019558:	f7ff f8b8 	bl	80186cc <tcp_create_segment>
 801955c:	60b8      	str	r0, [r7, #8]
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d109      	bne.n	8019578 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	8b5b      	ldrh	r3, [r3, #26]
 8019568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801956c:	b29a      	uxth	r2, r3
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019576:	e070      	b.n	801965a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019578:	68bb      	ldr	r3, [r7, #8]
 801957a:	691b      	ldr	r3, [r3, #16]
 801957c:	f003 0303 	and.w	r3, r3, #3
 8019580:	2b00      	cmp	r3, #0
 8019582:	d006      	beq.n	8019592 <tcp_enqueue_flags+0xea>
 8019584:	4b37      	ldr	r3, [pc, #220]	@ (8019664 <tcp_enqueue_flags+0x1bc>)
 8019586:	f240 4242 	movw	r2, #1090	@ 0x442
 801958a:	493b      	ldr	r1, [pc, #236]	@ (8019678 <tcp_enqueue_flags+0x1d0>)
 801958c:	4837      	ldr	r0, [pc, #220]	@ (801966c <tcp_enqueue_flags+0x1c4>)
 801958e:	f005 fbfd 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019592:	68bb      	ldr	r3, [r7, #8]
 8019594:	891b      	ldrh	r3, [r3, #8]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d006      	beq.n	80195a8 <tcp_enqueue_flags+0x100>
 801959a:	4b32      	ldr	r3, [pc, #200]	@ (8019664 <tcp_enqueue_flags+0x1bc>)
 801959c:	f240 4243 	movw	r2, #1091	@ 0x443
 80195a0:	4936      	ldr	r1, [pc, #216]	@ (801967c <tcp_enqueue_flags+0x1d4>)
 80195a2:	4832      	ldr	r0, [pc, #200]	@ (801966c <tcp_enqueue_flags+0x1c4>)
 80195a4:	f005 fbf2 	bl	801ed8c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d103      	bne.n	80195b8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	68ba      	ldr	r2, [r7, #8]
 80195b4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80195b6:	e00d      	b.n	80195d4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80195bc:	613b      	str	r3, [r7, #16]
 80195be:	e002      	b.n	80195c6 <tcp_enqueue_flags+0x11e>
 80195c0:	693b      	ldr	r3, [r7, #16]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	613b      	str	r3, [r7, #16]
 80195c6:	693b      	ldr	r3, [r7, #16]
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d1f8      	bne.n	80195c0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80195ce:	693b      	ldr	r3, [r7, #16]
 80195d0:	68ba      	ldr	r2, [r7, #8]
 80195d2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	2200      	movs	r2, #0
 80195d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80195dc:	78fb      	ldrb	r3, [r7, #3]
 80195de:	f003 0302 	and.w	r3, r3, #2
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d104      	bne.n	80195f0 <tcp_enqueue_flags+0x148>
 80195e6:	78fb      	ldrb	r3, [r7, #3]
 80195e8:	f003 0301 	and.w	r3, r3, #1
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d004      	beq.n	80195fa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80195f4:	1c5a      	adds	r2, r3, #1
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80195fa:	78fb      	ldrb	r3, [r7, #3]
 80195fc:	f003 0301 	and.w	r3, r3, #1
 8019600:	2b00      	cmp	r3, #0
 8019602:	d006      	beq.n	8019612 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	8b5b      	ldrh	r3, [r3, #26]
 8019608:	f043 0320 	orr.w	r3, r3, #32
 801960c:	b29a      	uxth	r2, r3
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019612:	68bb      	ldr	r3, [r7, #8]
 8019614:	685b      	ldr	r3, [r3, #4]
 8019616:	4618      	mov	r0, r3
 8019618:	f7fa fc56 	bl	8013ec8 <pbuf_clen>
 801961c:	4603      	mov	r3, r0
 801961e:	461a      	mov	r2, r3
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019626:	4413      	add	r3, r2
 8019628:	b29a      	uxth	r2, r3
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019636:	2b00      	cmp	r3, #0
 8019638:	d00e      	beq.n	8019658 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801963e:	2b00      	cmp	r3, #0
 8019640:	d10a      	bne.n	8019658 <tcp_enqueue_flags+0x1b0>
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019646:	2b00      	cmp	r3, #0
 8019648:	d106      	bne.n	8019658 <tcp_enqueue_flags+0x1b0>
 801964a:	4b06      	ldr	r3, [pc, #24]	@ (8019664 <tcp_enqueue_flags+0x1bc>)
 801964c:	f240 4265 	movw	r2, #1125	@ 0x465
 8019650:	490b      	ldr	r1, [pc, #44]	@ (8019680 <tcp_enqueue_flags+0x1d8>)
 8019652:	4806      	ldr	r0, [pc, #24]	@ (801966c <tcp_enqueue_flags+0x1c4>)
 8019654:	f005 fb9a 	bl	801ed8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019658:	2300      	movs	r3, #0
}
 801965a:	4618      	mov	r0, r3
 801965c:	3718      	adds	r7, #24
 801965e:	46bd      	mov	sp, r7
 8019660:	bd80      	pop	{r7, pc}
 8019662:	bf00      	nop
 8019664:	0802242c 	.word	0x0802242c
 8019668:	080228ac 	.word	0x080228ac
 801966c:	08022480 	.word	0x08022480
 8019670:	08022904 	.word	0x08022904
 8019674:	08022924 	.word	0x08022924
 8019678:	08022960 	.word	0x08022960
 801967c:	08022978 	.word	0x08022978
 8019680:	080229a4 	.word	0x080229a4

08019684 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019684:	b5b0      	push	{r4, r5, r7, lr}
 8019686:	b08a      	sub	sp, #40	@ 0x28
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d106      	bne.n	80196a0 <tcp_output+0x1c>
 8019692:	4b8a      	ldr	r3, [pc, #552]	@ (80198bc <tcp_output+0x238>)
 8019694:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8019698:	4989      	ldr	r1, [pc, #548]	@ (80198c0 <tcp_output+0x23c>)
 801969a:	488a      	ldr	r0, [pc, #552]	@ (80198c4 <tcp_output+0x240>)
 801969c:	f005 fb76 	bl	801ed8c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	7d1b      	ldrb	r3, [r3, #20]
 80196a4:	2b01      	cmp	r3, #1
 80196a6:	d106      	bne.n	80196b6 <tcp_output+0x32>
 80196a8:	4b84      	ldr	r3, [pc, #528]	@ (80198bc <tcp_output+0x238>)
 80196aa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80196ae:	4986      	ldr	r1, [pc, #536]	@ (80198c8 <tcp_output+0x244>)
 80196b0:	4884      	ldr	r0, [pc, #528]	@ (80198c4 <tcp_output+0x240>)
 80196b2:	f005 fb6b 	bl	801ed8c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80196b6:	4b85      	ldr	r3, [pc, #532]	@ (80198cc <tcp_output+0x248>)
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	687a      	ldr	r2, [r7, #4]
 80196bc:	429a      	cmp	r2, r3
 80196be:	d101      	bne.n	80196c4 <tcp_output+0x40>
    return ERR_OK;
 80196c0:	2300      	movs	r3, #0
 80196c2:	e1d1      	b.n	8019a68 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80196d0:	4293      	cmp	r3, r2
 80196d2:	bf28      	it	cs
 80196d4:	4613      	movcs	r3, r2
 80196d6:	b29b      	uxth	r3, r3
 80196d8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80196de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80196e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d10b      	bne.n	80196fe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	8b5b      	ldrh	r3, [r3, #26]
 80196ea:	f003 0302 	and.w	r3, r3, #2
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	f000 81ad 	beq.w	8019a4e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 80196f4:	6878      	ldr	r0, [r7, #4]
 80196f6:	f000 fdd7 	bl	801a2a8 <tcp_send_empty_ack>
 80196fa:	4603      	mov	r3, r0
 80196fc:	e1b4      	b.n	8019a68 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80196fe:	6879      	ldr	r1, [r7, #4]
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	3304      	adds	r3, #4
 8019704:	461a      	mov	r2, r3
 8019706:	6878      	ldr	r0, [r7, #4]
 8019708:	f7fe ffc4 	bl	8018694 <tcp_route>
 801970c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801970e:	697b      	ldr	r3, [r7, #20]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d102      	bne.n	801971a <tcp_output+0x96>
    return ERR_RTE;
 8019714:	f06f 0303 	mvn.w	r3, #3
 8019718:	e1a6      	b.n	8019a68 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d003      	beq.n	8019728 <tcp_output+0xa4>
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	2b00      	cmp	r3, #0
 8019726:	d111      	bne.n	801974c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019728:	697b      	ldr	r3, [r7, #20]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d002      	beq.n	8019734 <tcp_output+0xb0>
 801972e:	697b      	ldr	r3, [r7, #20]
 8019730:	3304      	adds	r3, #4
 8019732:	e000      	b.n	8019736 <tcp_output+0xb2>
 8019734:	2300      	movs	r3, #0
 8019736:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019738:	693b      	ldr	r3, [r7, #16]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d102      	bne.n	8019744 <tcp_output+0xc0>
      return ERR_RTE;
 801973e:	f06f 0303 	mvn.w	r3, #3
 8019742:	e191      	b.n	8019a68 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019744:	693b      	ldr	r3, [r7, #16]
 8019746:	681a      	ldr	r2, [r3, #0]
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801974e:	691b      	ldr	r3, [r3, #16]
 8019750:	685b      	ldr	r3, [r3, #4]
 8019752:	4618      	mov	r0, r3
 8019754:	f7f8 fe5c 	bl	8012410 <lwip_htonl>
 8019758:	4602      	mov	r2, r0
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801975e:	1ad3      	subs	r3, r2, r3
 8019760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019762:	8912      	ldrh	r2, [r2, #8]
 8019764:	4413      	add	r3, r2
 8019766:	69ba      	ldr	r2, [r7, #24]
 8019768:	429a      	cmp	r2, r3
 801976a:	d227      	bcs.n	80197bc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019772:	461a      	mov	r2, r3
 8019774:	69bb      	ldr	r3, [r7, #24]
 8019776:	4293      	cmp	r3, r2
 8019778:	d114      	bne.n	80197a4 <tcp_output+0x120>
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801977e:	2b00      	cmp	r3, #0
 8019780:	d110      	bne.n	80197a4 <tcp_output+0x120>
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8019788:	2b00      	cmp	r3, #0
 801978a:	d10b      	bne.n	80197a4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	2200      	movs	r2, #0
 8019790:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	2201      	movs	r2, #1
 8019798:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	2200      	movs	r2, #0
 80197a0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	8b5b      	ldrh	r3, [r3, #26]
 80197a8:	f003 0302 	and.w	r3, r3, #2
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	f000 8150 	beq.w	8019a52 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 80197b2:	6878      	ldr	r0, [r7, #4]
 80197b4:	f000 fd78 	bl	801a2a8 <tcp_send_empty_ack>
 80197b8:	4603      	mov	r3, r0
 80197ba:	e155      	b.n	8019a68 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	2200      	movs	r2, #0
 80197c0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80197c8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80197ca:	6a3b      	ldr	r3, [r7, #32]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	f000 811f 	beq.w	8019a10 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 80197d2:	e002      	b.n	80197da <tcp_output+0x156>
 80197d4:	6a3b      	ldr	r3, [r7, #32]
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	623b      	str	r3, [r7, #32]
 80197da:	6a3b      	ldr	r3, [r7, #32]
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d1f8      	bne.n	80197d4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80197e2:	e115      	b.n	8019a10 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80197e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197e6:	691b      	ldr	r3, [r3, #16]
 80197e8:	899b      	ldrh	r3, [r3, #12]
 80197ea:	b29b      	uxth	r3, r3
 80197ec:	4618      	mov	r0, r3
 80197ee:	f7f8 fdf9 	bl	80123e4 <lwip_htons>
 80197f2:	4603      	mov	r3, r0
 80197f4:	b2db      	uxtb	r3, r3
 80197f6:	f003 0304 	and.w	r3, r3, #4
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d006      	beq.n	801980c <tcp_output+0x188>
 80197fe:	4b2f      	ldr	r3, [pc, #188]	@ (80198bc <tcp_output+0x238>)
 8019800:	f240 5236 	movw	r2, #1334	@ 0x536
 8019804:	4932      	ldr	r1, [pc, #200]	@ (80198d0 <tcp_output+0x24c>)
 8019806:	482f      	ldr	r0, [pc, #188]	@ (80198c4 <tcp_output+0x240>)
 8019808:	f005 fac0 	bl	801ed8c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019810:	2b00      	cmp	r3, #0
 8019812:	d01f      	beq.n	8019854 <tcp_output+0x1d0>
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	8b5b      	ldrh	r3, [r3, #26]
 8019818:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801981c:	2b00      	cmp	r3, #0
 801981e:	d119      	bne.n	8019854 <tcp_output+0x1d0>
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019824:	2b00      	cmp	r3, #0
 8019826:	d00b      	beq.n	8019840 <tcp_output+0x1bc>
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d110      	bne.n	8019854 <tcp_output+0x1d0>
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019836:	891a      	ldrh	r2, [r3, #8]
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801983c:	429a      	cmp	r2, r3
 801983e:	d209      	bcs.n	8019854 <tcp_output+0x1d0>
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019846:	2b00      	cmp	r3, #0
 8019848:	d004      	beq.n	8019854 <tcp_output+0x1d0>
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019850:	2b08      	cmp	r3, #8
 8019852:	d901      	bls.n	8019858 <tcp_output+0x1d4>
 8019854:	2301      	movs	r3, #1
 8019856:	e000      	b.n	801985a <tcp_output+0x1d6>
 8019858:	2300      	movs	r3, #0
 801985a:	2b00      	cmp	r3, #0
 801985c:	d106      	bne.n	801986c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	8b5b      	ldrh	r3, [r3, #26]
 8019862:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019866:	2b00      	cmp	r3, #0
 8019868:	f000 80e7 	beq.w	8019a3a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	7d1b      	ldrb	r3, [r3, #20]
 8019870:	2b02      	cmp	r3, #2
 8019872:	d00d      	beq.n	8019890 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019876:	691b      	ldr	r3, [r3, #16]
 8019878:	899b      	ldrh	r3, [r3, #12]
 801987a:	b29c      	uxth	r4, r3
 801987c:	2010      	movs	r0, #16
 801987e:	f7f8 fdb1 	bl	80123e4 <lwip_htons>
 8019882:	4603      	mov	r3, r0
 8019884:	461a      	mov	r2, r3
 8019886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019888:	691b      	ldr	r3, [r3, #16]
 801988a:	4322      	orrs	r2, r4
 801988c:	b292      	uxth	r2, r2
 801988e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019890:	697a      	ldr	r2, [r7, #20]
 8019892:	6879      	ldr	r1, [r7, #4]
 8019894:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019896:	f000 f90b 	bl	8019ab0 <tcp_output_segment>
 801989a:	4603      	mov	r3, r0
 801989c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801989e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d016      	beq.n	80198d4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	8b5b      	ldrh	r3, [r3, #26]
 80198aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80198ae:	b29a      	uxth	r2, r3
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	835a      	strh	r2, [r3, #26]
      return err;
 80198b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198b8:	e0d6      	b.n	8019a68 <tcp_output+0x3e4>
 80198ba:	bf00      	nop
 80198bc:	0802242c 	.word	0x0802242c
 80198c0:	080229cc 	.word	0x080229cc
 80198c4:	08022480 	.word	0x08022480
 80198c8:	080229e4 	.word	0x080229e4
 80198cc:	200227ec 	.word	0x200227ec
 80198d0:	08022a0c 	.word	0x08022a0c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80198d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198d6:	2200      	movs	r2, #0
 80198d8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80198da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198dc:	681a      	ldr	r2, [r3, #0]
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	7d1b      	ldrb	r3, [r3, #20]
 80198e6:	2b02      	cmp	r3, #2
 80198e8:	d006      	beq.n	80198f8 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	8b5b      	ldrh	r3, [r3, #26]
 80198ee:	f023 0303 	bic.w	r3, r3, #3
 80198f2:	b29a      	uxth	r2, r3
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80198f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198fa:	691b      	ldr	r3, [r3, #16]
 80198fc:	685b      	ldr	r3, [r3, #4]
 80198fe:	4618      	mov	r0, r3
 8019900:	f7f8 fd86 	bl	8012410 <lwip_htonl>
 8019904:	4604      	mov	r4, r0
 8019906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019908:	891b      	ldrh	r3, [r3, #8]
 801990a:	461d      	mov	r5, r3
 801990c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801990e:	691b      	ldr	r3, [r3, #16]
 8019910:	899b      	ldrh	r3, [r3, #12]
 8019912:	b29b      	uxth	r3, r3
 8019914:	4618      	mov	r0, r3
 8019916:	f7f8 fd65 	bl	80123e4 <lwip_htons>
 801991a:	4603      	mov	r3, r0
 801991c:	b2db      	uxtb	r3, r3
 801991e:	f003 0303 	and.w	r3, r3, #3
 8019922:	2b00      	cmp	r3, #0
 8019924:	d001      	beq.n	801992a <tcp_output+0x2a6>
 8019926:	2301      	movs	r3, #1
 8019928:	e000      	b.n	801992c <tcp_output+0x2a8>
 801992a:	2300      	movs	r3, #0
 801992c:	442b      	add	r3, r5
 801992e:	4423      	add	r3, r4
 8019930:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019936:	68bb      	ldr	r3, [r7, #8]
 8019938:	1ad3      	subs	r3, r2, r3
 801993a:	2b00      	cmp	r3, #0
 801993c:	da02      	bge.n	8019944 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	68ba      	ldr	r2, [r7, #8]
 8019942:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019946:	891b      	ldrh	r3, [r3, #8]
 8019948:	461c      	mov	r4, r3
 801994a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801994c:	691b      	ldr	r3, [r3, #16]
 801994e:	899b      	ldrh	r3, [r3, #12]
 8019950:	b29b      	uxth	r3, r3
 8019952:	4618      	mov	r0, r3
 8019954:	f7f8 fd46 	bl	80123e4 <lwip_htons>
 8019958:	4603      	mov	r3, r0
 801995a:	b2db      	uxtb	r3, r3
 801995c:	f003 0303 	and.w	r3, r3, #3
 8019960:	2b00      	cmp	r3, #0
 8019962:	d001      	beq.n	8019968 <tcp_output+0x2e4>
 8019964:	2301      	movs	r3, #1
 8019966:	e000      	b.n	801996a <tcp_output+0x2e6>
 8019968:	2300      	movs	r3, #0
 801996a:	4423      	add	r3, r4
 801996c:	2b00      	cmp	r3, #0
 801996e:	d049      	beq.n	8019a04 <tcp_output+0x380>
      seg->next = NULL;
 8019970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019972:	2200      	movs	r2, #0
 8019974:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801997a:	2b00      	cmp	r3, #0
 801997c:	d105      	bne.n	801998a <tcp_output+0x306>
        pcb->unacked = seg;
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019982:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8019984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019986:	623b      	str	r3, [r7, #32]
 8019988:	e03f      	b.n	8019a0a <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801998a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801998c:	691b      	ldr	r3, [r3, #16]
 801998e:	685b      	ldr	r3, [r3, #4]
 8019990:	4618      	mov	r0, r3
 8019992:	f7f8 fd3d 	bl	8012410 <lwip_htonl>
 8019996:	4604      	mov	r4, r0
 8019998:	6a3b      	ldr	r3, [r7, #32]
 801999a:	691b      	ldr	r3, [r3, #16]
 801999c:	685b      	ldr	r3, [r3, #4]
 801999e:	4618      	mov	r0, r3
 80199a0:	f7f8 fd36 	bl	8012410 <lwip_htonl>
 80199a4:	4603      	mov	r3, r0
 80199a6:	1ae3      	subs	r3, r4, r3
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	da24      	bge.n	80199f6 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	3370      	adds	r3, #112	@ 0x70
 80199b0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80199b2:	e002      	b.n	80199ba <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80199b4:	69fb      	ldr	r3, [r7, #28]
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80199ba:	69fb      	ldr	r3, [r7, #28]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d011      	beq.n	80199e6 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80199c2:	69fb      	ldr	r3, [r7, #28]
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	691b      	ldr	r3, [r3, #16]
 80199c8:	685b      	ldr	r3, [r3, #4]
 80199ca:	4618      	mov	r0, r3
 80199cc:	f7f8 fd20 	bl	8012410 <lwip_htonl>
 80199d0:	4604      	mov	r4, r0
 80199d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199d4:	691b      	ldr	r3, [r3, #16]
 80199d6:	685b      	ldr	r3, [r3, #4]
 80199d8:	4618      	mov	r0, r3
 80199da:	f7f8 fd19 	bl	8012410 <lwip_htonl>
 80199de:	4603      	mov	r3, r0
 80199e0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	dbe6      	blt.n	80199b4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 80199e6:	69fb      	ldr	r3, [r7, #28]
 80199e8:	681a      	ldr	r2, [r3, #0]
 80199ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199ec:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80199ee:	69fb      	ldr	r3, [r7, #28]
 80199f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80199f2:	601a      	str	r2, [r3, #0]
 80199f4:	e009      	b.n	8019a0a <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80199f6:	6a3b      	ldr	r3, [r7, #32]
 80199f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80199fa:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80199fc:	6a3b      	ldr	r3, [r7, #32]
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	623b      	str	r3, [r7, #32]
 8019a02:	e002      	b.n	8019a0a <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019a04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019a06:	f7fb feb4 	bl	8015772 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8019a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d012      	beq.n	8019a3c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a18:	691b      	ldr	r3, [r3, #16]
 8019a1a:	685b      	ldr	r3, [r3, #4]
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	f7f8 fcf7 	bl	8012410 <lwip_htonl>
 8019a22:	4602      	mov	r2, r0
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019a28:	1ad3      	subs	r3, r2, r3
 8019a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019a2c:	8912      	ldrh	r2, [r2, #8]
 8019a2e:	4413      	add	r3, r2
  while (seg != NULL &&
 8019a30:	69ba      	ldr	r2, [r7, #24]
 8019a32:	429a      	cmp	r2, r3
 8019a34:	f4bf aed6 	bcs.w	80197e4 <tcp_output+0x160>
 8019a38:	e000      	b.n	8019a3c <tcp_output+0x3b8>
      break;
 8019a3a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d108      	bne.n	8019a56 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	2200      	movs	r2, #0
 8019a48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8019a4c:	e004      	b.n	8019a58 <tcp_output+0x3d4>
    goto output_done;
 8019a4e:	bf00      	nop
 8019a50:	e002      	b.n	8019a58 <tcp_output+0x3d4>
    goto output_done;
 8019a52:	bf00      	nop
 8019a54:	e000      	b.n	8019a58 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019a56:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	8b5b      	ldrh	r3, [r3, #26]
 8019a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019a60:	b29a      	uxth	r2, r3
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019a66:	2300      	movs	r3, #0
}
 8019a68:	4618      	mov	r0, r3
 8019a6a:	3728      	adds	r7, #40	@ 0x28
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	bdb0      	pop	{r4, r5, r7, pc}

08019a70 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b082      	sub	sp, #8
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d106      	bne.n	8019a8c <tcp_output_segment_busy+0x1c>
 8019a7e:	4b09      	ldr	r3, [pc, #36]	@ (8019aa4 <tcp_output_segment_busy+0x34>)
 8019a80:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019a84:	4908      	ldr	r1, [pc, #32]	@ (8019aa8 <tcp_output_segment_busy+0x38>)
 8019a86:	4809      	ldr	r0, [pc, #36]	@ (8019aac <tcp_output_segment_busy+0x3c>)
 8019a88:	f005 f980 	bl	801ed8c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	685b      	ldr	r3, [r3, #4]
 8019a90:	7b9b      	ldrb	r3, [r3, #14]
 8019a92:	2b01      	cmp	r3, #1
 8019a94:	d001      	beq.n	8019a9a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019a96:	2301      	movs	r3, #1
 8019a98:	e000      	b.n	8019a9c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019a9a:	2300      	movs	r3, #0
}
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	3708      	adds	r7, #8
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd80      	pop	{r7, pc}
 8019aa4:	0802242c 	.word	0x0802242c
 8019aa8:	08022a24 	.word	0x08022a24
 8019aac:	08022480 	.word	0x08022480

08019ab0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019ab0:	b5b0      	push	{r4, r5, r7, lr}
 8019ab2:	b08c      	sub	sp, #48	@ 0x30
 8019ab4:	af04      	add	r7, sp, #16
 8019ab6:	60f8      	str	r0, [r7, #12]
 8019ab8:	60b9      	str	r1, [r7, #8]
 8019aba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d106      	bne.n	8019ad0 <tcp_output_segment+0x20>
 8019ac2:	4b64      	ldr	r3, [pc, #400]	@ (8019c54 <tcp_output_segment+0x1a4>)
 8019ac4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8019ac8:	4963      	ldr	r1, [pc, #396]	@ (8019c58 <tcp_output_segment+0x1a8>)
 8019aca:	4864      	ldr	r0, [pc, #400]	@ (8019c5c <tcp_output_segment+0x1ac>)
 8019acc:	f005 f95e 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019ad0:	68bb      	ldr	r3, [r7, #8]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d106      	bne.n	8019ae4 <tcp_output_segment+0x34>
 8019ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8019c54 <tcp_output_segment+0x1a4>)
 8019ad8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8019adc:	4960      	ldr	r1, [pc, #384]	@ (8019c60 <tcp_output_segment+0x1b0>)
 8019ade:	485f      	ldr	r0, [pc, #380]	@ (8019c5c <tcp_output_segment+0x1ac>)
 8019ae0:	f005 f954 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d106      	bne.n	8019af8 <tcp_output_segment+0x48>
 8019aea:	4b5a      	ldr	r3, [pc, #360]	@ (8019c54 <tcp_output_segment+0x1a4>)
 8019aec:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8019af0:	495c      	ldr	r1, [pc, #368]	@ (8019c64 <tcp_output_segment+0x1b4>)
 8019af2:	485a      	ldr	r0, [pc, #360]	@ (8019c5c <tcp_output_segment+0x1ac>)
 8019af4:	f005 f94a 	bl	801ed8c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019af8:	68f8      	ldr	r0, [r7, #12]
 8019afa:	f7ff ffb9 	bl	8019a70 <tcp_output_segment_busy>
 8019afe:	4603      	mov	r3, r0
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d001      	beq.n	8019b08 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019b04:	2300      	movs	r3, #0
 8019b06:	e0a1      	b.n	8019c4c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019b08:	68bb      	ldr	r3, [r7, #8]
 8019b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	691c      	ldr	r4, [r3, #16]
 8019b10:	4610      	mov	r0, r2
 8019b12:	f7f8 fc7d 	bl	8012410 <lwip_htonl>
 8019b16:	4603      	mov	r3, r0
 8019b18:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019b1a:	68bb      	ldr	r3, [r7, #8]
 8019b1c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	691c      	ldr	r4, [r3, #16]
 8019b22:	4610      	mov	r0, r2
 8019b24:	f7f8 fc5e 	bl	80123e4 <lwip_htons>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019b2c:	68bb      	ldr	r3, [r7, #8]
 8019b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b30:	68ba      	ldr	r2, [r7, #8]
 8019b32:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019b34:	441a      	add	r2, r3
 8019b36:	68bb      	ldr	r3, [r7, #8]
 8019b38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	691b      	ldr	r3, [r3, #16]
 8019b3e:	3314      	adds	r3, #20
 8019b40:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	7b1b      	ldrb	r3, [r3, #12]
 8019b46:	f003 0301 	and.w	r3, r3, #1
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d015      	beq.n	8019b7a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	3304      	adds	r3, #4
 8019b52:	461a      	mov	r2, r3
 8019b54:	6879      	ldr	r1, [r7, #4]
 8019b56:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8019b5a:	f7fc f9cf 	bl	8015efc <tcp_eff_send_mss_netif>
 8019b5e:	4603      	mov	r3, r0
 8019b60:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019b62:	8b7b      	ldrh	r3, [r7, #26]
 8019b64:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f7f8 fc51 	bl	8012410 <lwip_htonl>
 8019b6e:	4602      	mov	r2, r0
 8019b70:	69fb      	ldr	r3, [r7, #28]
 8019b72:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019b74:	69fb      	ldr	r3, [r7, #28]
 8019b76:	3304      	adds	r3, #4
 8019b78:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019b7a:	68bb      	ldr	r3, [r7, #8]
 8019b7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	da02      	bge.n	8019b8a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019b84:	68bb      	ldr	r3, [r7, #8]
 8019b86:	2200      	movs	r2, #0
 8019b88:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8019b8a:	68bb      	ldr	r3, [r7, #8]
 8019b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d10c      	bne.n	8019bac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019b92:	4b35      	ldr	r3, [pc, #212]	@ (8019c68 <tcp_output_segment+0x1b8>)
 8019b94:	681a      	ldr	r2, [r3, #0]
 8019b96:	68bb      	ldr	r3, [r7, #8]
 8019b98:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	691b      	ldr	r3, [r3, #16]
 8019b9e:	685b      	ldr	r3, [r3, #4]
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7f8 fc35 	bl	8012410 <lwip_htonl>
 8019ba6:	4602      	mov	r2, r0
 8019ba8:	68bb      	ldr	r3, [r7, #8]
 8019baa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	691a      	ldr	r2, [r3, #16]
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	685b      	ldr	r3, [r3, #4]
 8019bb4:	685b      	ldr	r3, [r3, #4]
 8019bb6:	1ad3      	subs	r3, r2, r3
 8019bb8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	685b      	ldr	r3, [r3, #4]
 8019bbe:	8959      	ldrh	r1, [r3, #10]
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	685b      	ldr	r3, [r3, #4]
 8019bc4:	8b3a      	ldrh	r2, [r7, #24]
 8019bc6:	1a8a      	subs	r2, r1, r2
 8019bc8:	b292      	uxth	r2, r2
 8019bca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	685b      	ldr	r3, [r3, #4]
 8019bd0:	8919      	ldrh	r1, [r3, #8]
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	685b      	ldr	r3, [r3, #4]
 8019bd6:	8b3a      	ldrh	r2, [r7, #24]
 8019bd8:	1a8a      	subs	r2, r1, r2
 8019bda:	b292      	uxth	r2, r2
 8019bdc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	685b      	ldr	r3, [r3, #4]
 8019be2:	68fa      	ldr	r2, [r7, #12]
 8019be4:	6912      	ldr	r2, [r2, #16]
 8019be6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	691b      	ldr	r3, [r3, #16]
 8019bec:	2200      	movs	r2, #0
 8019bee:	741a      	strb	r2, [r3, #16]
 8019bf0:	2200      	movs	r2, #0
 8019bf2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	691a      	ldr	r2, [r3, #16]
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	7b1b      	ldrb	r3, [r3, #12]
 8019bfc:	f003 0301 	and.w	r3, r3, #1
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d001      	beq.n	8019c08 <tcp_output_segment+0x158>
 8019c04:	2318      	movs	r3, #24
 8019c06:	e000      	b.n	8019c0a <tcp_output_segment+0x15a>
 8019c08:	2314      	movs	r3, #20
 8019c0a:	4413      	add	r3, r2
 8019c0c:	69fa      	ldr	r2, [r7, #28]
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	d006      	beq.n	8019c20 <tcp_output_segment+0x170>
 8019c12:	4b10      	ldr	r3, [pc, #64]	@ (8019c54 <tcp_output_segment+0x1a4>)
 8019c14:	f240 621c 	movw	r2, #1564	@ 0x61c
 8019c18:	4914      	ldr	r1, [pc, #80]	@ (8019c6c <tcp_output_segment+0x1bc>)
 8019c1a:	4810      	ldr	r0, [pc, #64]	@ (8019c5c <tcp_output_segment+0x1ac>)
 8019c1c:	f005 f8b6 	bl	801ed8c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	6858      	ldr	r0, [r3, #4]
 8019c24:	68b9      	ldr	r1, [r7, #8]
 8019c26:	68bb      	ldr	r3, [r7, #8]
 8019c28:	1d1c      	adds	r4, r3, #4
 8019c2a:	68bb      	ldr	r3, [r7, #8]
 8019c2c:	7add      	ldrb	r5, [r3, #11]
 8019c2e:	68bb      	ldr	r3, [r7, #8]
 8019c30:	7a9b      	ldrb	r3, [r3, #10]
 8019c32:	687a      	ldr	r2, [r7, #4]
 8019c34:	9202      	str	r2, [sp, #8]
 8019c36:	2206      	movs	r2, #6
 8019c38:	9201      	str	r2, [sp, #4]
 8019c3a:	9300      	str	r3, [sp, #0]
 8019c3c:	462b      	mov	r3, r5
 8019c3e:	4622      	mov	r2, r4
 8019c40:	f003 f8ea 	bl	801ce18 <ip4_output_if>
 8019c44:	4603      	mov	r3, r0
 8019c46:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	3720      	adds	r7, #32
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bdb0      	pop	{r4, r5, r7, pc}
 8019c54:	0802242c 	.word	0x0802242c
 8019c58:	08022a4c 	.word	0x08022a4c
 8019c5c:	08022480 	.word	0x08022480
 8019c60:	08022a6c 	.word	0x08022a6c
 8019c64:	08022a8c 	.word	0x08022a8c
 8019c68:	2002279c 	.word	0x2002279c
 8019c6c:	08022ab0 	.word	0x08022ab0

08019c70 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019c70:	b5b0      	push	{r4, r5, r7, lr}
 8019c72:	b084      	sub	sp, #16
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d106      	bne.n	8019c8c <tcp_rexmit_rto_prepare+0x1c>
 8019c7e:	4b36      	ldr	r3, [pc, #216]	@ (8019d58 <tcp_rexmit_rto_prepare+0xe8>)
 8019c80:	f240 6263 	movw	r2, #1635	@ 0x663
 8019c84:	4935      	ldr	r1, [pc, #212]	@ (8019d5c <tcp_rexmit_rto_prepare+0xec>)
 8019c86:	4836      	ldr	r0, [pc, #216]	@ (8019d60 <tcp_rexmit_rto_prepare+0xf0>)
 8019c88:	f005 f880 	bl	801ed8c <iprintf>

  if (pcb->unacked == NULL) {
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d102      	bne.n	8019c9a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019c94:	f06f 0305 	mvn.w	r3, #5
 8019c98:	e059      	b.n	8019d4e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019c9e:	60fb      	str	r3, [r7, #12]
 8019ca0:	e00b      	b.n	8019cba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019ca2:	68f8      	ldr	r0, [r7, #12]
 8019ca4:	f7ff fee4 	bl	8019a70 <tcp_output_segment_busy>
 8019ca8:	4603      	mov	r3, r0
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d002      	beq.n	8019cb4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019cae:	f06f 0305 	mvn.w	r3, #5
 8019cb2:	e04c      	b.n	8019d4e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	60fb      	str	r3, [r7, #12]
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d1ef      	bne.n	8019ca2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019cc2:	68f8      	ldr	r0, [r7, #12]
 8019cc4:	f7ff fed4 	bl	8019a70 <tcp_output_segment_busy>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d002      	beq.n	8019cd4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019cce:	f06f 0305 	mvn.w	r3, #5
 8019cd2:	e03c      	b.n	8019d4e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d104      	bne.n	8019cee <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	895a      	ldrh	r2, [r3, #10]
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	8b5b      	ldrh	r3, [r3, #26]
 8019d00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8019d04:	b29a      	uxth	r2, r3
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	691b      	ldr	r3, [r3, #16]
 8019d0e:	685b      	ldr	r3, [r3, #4]
 8019d10:	4618      	mov	r0, r3
 8019d12:	f7f8 fb7d 	bl	8012410 <lwip_htonl>
 8019d16:	4604      	mov	r4, r0
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	891b      	ldrh	r3, [r3, #8]
 8019d1c:	461d      	mov	r5, r3
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	691b      	ldr	r3, [r3, #16]
 8019d22:	899b      	ldrh	r3, [r3, #12]
 8019d24:	b29b      	uxth	r3, r3
 8019d26:	4618      	mov	r0, r3
 8019d28:	f7f8 fb5c 	bl	80123e4 <lwip_htons>
 8019d2c:	4603      	mov	r3, r0
 8019d2e:	b2db      	uxtb	r3, r3
 8019d30:	f003 0303 	and.w	r3, r3, #3
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d001      	beq.n	8019d3c <tcp_rexmit_rto_prepare+0xcc>
 8019d38:	2301      	movs	r3, #1
 8019d3a:	e000      	b.n	8019d3e <tcp_rexmit_rto_prepare+0xce>
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	442b      	add	r3, r5
 8019d40:	18e2      	adds	r2, r4, r3
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	2200      	movs	r2, #0
 8019d4a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8019d4c:	2300      	movs	r3, #0
}
 8019d4e:	4618      	mov	r0, r3
 8019d50:	3710      	adds	r7, #16
 8019d52:	46bd      	mov	sp, r7
 8019d54:	bdb0      	pop	{r4, r5, r7, pc}
 8019d56:	bf00      	nop
 8019d58:	0802242c 	.word	0x0802242c
 8019d5c:	08022ac4 	.word	0x08022ac4
 8019d60:	08022480 	.word	0x08022480

08019d64 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b082      	sub	sp, #8
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d106      	bne.n	8019d80 <tcp_rexmit_rto_commit+0x1c>
 8019d72:	4b0d      	ldr	r3, [pc, #52]	@ (8019da8 <tcp_rexmit_rto_commit+0x44>)
 8019d74:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8019d78:	490c      	ldr	r1, [pc, #48]	@ (8019dac <tcp_rexmit_rto_commit+0x48>)
 8019d7a:	480d      	ldr	r0, [pc, #52]	@ (8019db0 <tcp_rexmit_rto_commit+0x4c>)
 8019d7c:	f005 f806 	bl	801ed8c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019d86:	2bff      	cmp	r3, #255	@ 0xff
 8019d88:	d007      	beq.n	8019d9a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019d90:	3301      	adds	r3, #1
 8019d92:	b2da      	uxtb	r2, r3
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019d9a:	6878      	ldr	r0, [r7, #4]
 8019d9c:	f7ff fc72 	bl	8019684 <tcp_output>
}
 8019da0:	bf00      	nop
 8019da2:	3708      	adds	r7, #8
 8019da4:	46bd      	mov	sp, r7
 8019da6:	bd80      	pop	{r7, pc}
 8019da8:	0802242c 	.word	0x0802242c
 8019dac:	08022ae8 	.word	0x08022ae8
 8019db0:	08022480 	.word	0x08022480

08019db4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8019db4:	b580      	push	{r7, lr}
 8019db6:	b082      	sub	sp, #8
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d106      	bne.n	8019dd0 <tcp_rexmit_rto+0x1c>
 8019dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8019dec <tcp_rexmit_rto+0x38>)
 8019dc4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8019dc8:	4909      	ldr	r1, [pc, #36]	@ (8019df0 <tcp_rexmit_rto+0x3c>)
 8019dca:	480a      	ldr	r0, [pc, #40]	@ (8019df4 <tcp_rexmit_rto+0x40>)
 8019dcc:	f004 ffde 	bl	801ed8c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019dd0:	6878      	ldr	r0, [r7, #4]
 8019dd2:	f7ff ff4d 	bl	8019c70 <tcp_rexmit_rto_prepare>
 8019dd6:	4603      	mov	r3, r0
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d102      	bne.n	8019de2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019ddc:	6878      	ldr	r0, [r7, #4]
 8019dde:	f7ff ffc1 	bl	8019d64 <tcp_rexmit_rto_commit>
  }
}
 8019de2:	bf00      	nop
 8019de4:	3708      	adds	r7, #8
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}
 8019dea:	bf00      	nop
 8019dec:	0802242c 	.word	0x0802242c
 8019df0:	08022b0c 	.word	0x08022b0c
 8019df4:	08022480 	.word	0x08022480

08019df8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019df8:	b590      	push	{r4, r7, lr}
 8019dfa:	b085      	sub	sp, #20
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d106      	bne.n	8019e14 <tcp_rexmit+0x1c>
 8019e06:	4b2f      	ldr	r3, [pc, #188]	@ (8019ec4 <tcp_rexmit+0xcc>)
 8019e08:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8019e0c:	492e      	ldr	r1, [pc, #184]	@ (8019ec8 <tcp_rexmit+0xd0>)
 8019e0e:	482f      	ldr	r0, [pc, #188]	@ (8019ecc <tcp_rexmit+0xd4>)
 8019e10:	f004 ffbc 	bl	801ed8c <iprintf>

  if (pcb->unacked == NULL) {
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d102      	bne.n	8019e22 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019e1c:	f06f 0305 	mvn.w	r3, #5
 8019e20:	e04c      	b.n	8019ebc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e26:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019e28:	68b8      	ldr	r0, [r7, #8]
 8019e2a:	f7ff fe21 	bl	8019a70 <tcp_output_segment_busy>
 8019e2e:	4603      	mov	r3, r0
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d002      	beq.n	8019e3a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8019e34:	f06f 0305 	mvn.w	r3, #5
 8019e38:	e040      	b.n	8019ebc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019e3a:	68bb      	ldr	r3, [r7, #8]
 8019e3c:	681a      	ldr	r2, [r3, #0]
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	336c      	adds	r3, #108	@ 0x6c
 8019e46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019e48:	e002      	b.n	8019e50 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d011      	beq.n	8019e7c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	691b      	ldr	r3, [r3, #16]
 8019e5e:	685b      	ldr	r3, [r3, #4]
 8019e60:	4618      	mov	r0, r3
 8019e62:	f7f8 fad5 	bl	8012410 <lwip_htonl>
 8019e66:	4604      	mov	r4, r0
 8019e68:	68bb      	ldr	r3, [r7, #8]
 8019e6a:	691b      	ldr	r3, [r3, #16]
 8019e6c:	685b      	ldr	r3, [r3, #4]
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f7f8 face 	bl	8012410 <lwip_htonl>
 8019e74:	4603      	mov	r3, r0
 8019e76:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	dbe6      	blt.n	8019e4a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	681a      	ldr	r2, [r3, #0]
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	68ba      	ldr	r2, [r7, #8]
 8019e88:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019e8a:	68bb      	ldr	r3, [r7, #8]
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d103      	bne.n	8019e9a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	2200      	movs	r2, #0
 8019e96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019ea0:	2bff      	cmp	r3, #255	@ 0xff
 8019ea2:	d007      	beq.n	8019eb4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019eaa:	3301      	adds	r3, #1
 8019eac:	b2da      	uxtb	r2, r3
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019eba:	2300      	movs	r3, #0
}
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	3714      	adds	r7, #20
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd90      	pop	{r4, r7, pc}
 8019ec4:	0802242c 	.word	0x0802242c
 8019ec8:	08022b28 	.word	0x08022b28
 8019ecc:	08022480 	.word	0x08022480

08019ed0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b082      	sub	sp, #8
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d106      	bne.n	8019eec <tcp_rexmit_fast+0x1c>
 8019ede:	4b2a      	ldr	r3, [pc, #168]	@ (8019f88 <tcp_rexmit_fast+0xb8>)
 8019ee0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8019ee4:	4929      	ldr	r1, [pc, #164]	@ (8019f8c <tcp_rexmit_fast+0xbc>)
 8019ee6:	482a      	ldr	r0, [pc, #168]	@ (8019f90 <tcp_rexmit_fast+0xc0>)
 8019ee8:	f004 ff50 	bl	801ed8c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d045      	beq.n	8019f80 <tcp_rexmit_fast+0xb0>
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	8b5b      	ldrh	r3, [r3, #26]
 8019ef8:	f003 0304 	and.w	r3, r3, #4
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d13f      	bne.n	8019f80 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019f00:	6878      	ldr	r0, [r7, #4]
 8019f02:	f7ff ff79 	bl	8019df8 <tcp_rexmit>
 8019f06:	4603      	mov	r3, r0
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d139      	bne.n	8019f80 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019f18:	4293      	cmp	r3, r2
 8019f1a:	bf28      	it	cs
 8019f1c:	4613      	movcs	r3, r2
 8019f1e:	b29b      	uxth	r3, r3
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	da00      	bge.n	8019f26 <tcp_rexmit_fast+0x56>
 8019f24:	3301      	adds	r3, #1
 8019f26:	105b      	asrs	r3, r3, #1
 8019f28:	b29a      	uxth	r2, r3
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8019f36:	461a      	mov	r2, r3
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019f3c:	005b      	lsls	r3, r3, #1
 8019f3e:	429a      	cmp	r2, r3
 8019f40:	d206      	bcs.n	8019f50 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019f46:	005b      	lsls	r3, r3, #1
 8019f48:	b29a      	uxth	r2, r3
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019f5a:	4619      	mov	r1, r3
 8019f5c:	0049      	lsls	r1, r1, #1
 8019f5e:	440b      	add	r3, r1
 8019f60:	b29b      	uxth	r3, r3
 8019f62:	4413      	add	r3, r2
 8019f64:	b29a      	uxth	r2, r3
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	8b5b      	ldrh	r3, [r3, #26]
 8019f70:	f043 0304 	orr.w	r3, r3, #4
 8019f74:	b29a      	uxth	r2, r3
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2200      	movs	r2, #0
 8019f7e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8019f80:	bf00      	nop
 8019f82:	3708      	adds	r7, #8
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bd80      	pop	{r7, pc}
 8019f88:	0802242c 	.word	0x0802242c
 8019f8c:	08022b40 	.word	0x08022b40
 8019f90:	08022480 	.word	0x08022480

08019f94 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b086      	sub	sp, #24
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	60f8      	str	r0, [r7, #12]
 8019f9c:	607b      	str	r3, [r7, #4]
 8019f9e:	460b      	mov	r3, r1
 8019fa0:	817b      	strh	r3, [r7, #10]
 8019fa2:	4613      	mov	r3, r2
 8019fa4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019fa6:	897a      	ldrh	r2, [r7, #10]
 8019fa8:	893b      	ldrh	r3, [r7, #8]
 8019faa:	4413      	add	r3, r2
 8019fac:	b29b      	uxth	r3, r3
 8019fae:	3314      	adds	r3, #20
 8019fb0:	b29b      	uxth	r3, r3
 8019fb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019fb6:	4619      	mov	r1, r3
 8019fb8:	2022      	movs	r0, #34	@ 0x22
 8019fba:	f7f9 fc13 	bl	80137e4 <pbuf_alloc>
 8019fbe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019fc0:	697b      	ldr	r3, [r7, #20]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d04d      	beq.n	801a062 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019fc6:	897b      	ldrh	r3, [r7, #10]
 8019fc8:	3313      	adds	r3, #19
 8019fca:	697a      	ldr	r2, [r7, #20]
 8019fcc:	8952      	ldrh	r2, [r2, #10]
 8019fce:	4293      	cmp	r3, r2
 8019fd0:	db06      	blt.n	8019fe0 <tcp_output_alloc_header_common+0x4c>
 8019fd2:	4b26      	ldr	r3, [pc, #152]	@ (801a06c <tcp_output_alloc_header_common+0xd8>)
 8019fd4:	f240 7223 	movw	r2, #1827	@ 0x723
 8019fd8:	4925      	ldr	r1, [pc, #148]	@ (801a070 <tcp_output_alloc_header_common+0xdc>)
 8019fda:	4826      	ldr	r0, [pc, #152]	@ (801a074 <tcp_output_alloc_header_common+0xe0>)
 8019fdc:	f004 fed6 	bl	801ed8c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019fe0:	697b      	ldr	r3, [r7, #20]
 8019fe2:	685b      	ldr	r3, [r3, #4]
 8019fe4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8019fe6:	8c3b      	ldrh	r3, [r7, #32]
 8019fe8:	4618      	mov	r0, r3
 8019fea:	f7f8 f9fb 	bl	80123e4 <lwip_htons>
 8019fee:	4603      	mov	r3, r0
 8019ff0:	461a      	mov	r2, r3
 8019ff2:	693b      	ldr	r3, [r7, #16]
 8019ff4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8019ff6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	f7f8 f9f3 	bl	80123e4 <lwip_htons>
 8019ffe:	4603      	mov	r3, r0
 801a000:	461a      	mov	r2, r3
 801a002:	693b      	ldr	r3, [r7, #16]
 801a004:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a006:	693b      	ldr	r3, [r7, #16]
 801a008:	687a      	ldr	r2, [r7, #4]
 801a00a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a00c:	68f8      	ldr	r0, [r7, #12]
 801a00e:	f7f8 f9ff 	bl	8012410 <lwip_htonl>
 801a012:	4602      	mov	r2, r0
 801a014:	693b      	ldr	r3, [r7, #16]
 801a016:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a018:	897b      	ldrh	r3, [r7, #10]
 801a01a:	089b      	lsrs	r3, r3, #2
 801a01c:	b29b      	uxth	r3, r3
 801a01e:	3305      	adds	r3, #5
 801a020:	b29b      	uxth	r3, r3
 801a022:	031b      	lsls	r3, r3, #12
 801a024:	b29a      	uxth	r2, r3
 801a026:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a02a:	b29b      	uxth	r3, r3
 801a02c:	4313      	orrs	r3, r2
 801a02e:	b29b      	uxth	r3, r3
 801a030:	4618      	mov	r0, r3
 801a032:	f7f8 f9d7 	bl	80123e4 <lwip_htons>
 801a036:	4603      	mov	r3, r0
 801a038:	461a      	mov	r2, r3
 801a03a:	693b      	ldr	r3, [r7, #16]
 801a03c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a03e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a040:	4618      	mov	r0, r3
 801a042:	f7f8 f9cf 	bl	80123e4 <lwip_htons>
 801a046:	4603      	mov	r3, r0
 801a048:	461a      	mov	r2, r3
 801a04a:	693b      	ldr	r3, [r7, #16]
 801a04c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a04e:	693b      	ldr	r3, [r7, #16]
 801a050:	2200      	movs	r2, #0
 801a052:	741a      	strb	r2, [r3, #16]
 801a054:	2200      	movs	r2, #0
 801a056:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a058:	693b      	ldr	r3, [r7, #16]
 801a05a:	2200      	movs	r2, #0
 801a05c:	749a      	strb	r2, [r3, #18]
 801a05e:	2200      	movs	r2, #0
 801a060:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a062:	697b      	ldr	r3, [r7, #20]
}
 801a064:	4618      	mov	r0, r3
 801a066:	3718      	adds	r7, #24
 801a068:	46bd      	mov	sp, r7
 801a06a:	bd80      	pop	{r7, pc}
 801a06c:	0802242c 	.word	0x0802242c
 801a070:	08022b60 	.word	0x08022b60
 801a074:	08022480 	.word	0x08022480

0801a078 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a078:	b5b0      	push	{r4, r5, r7, lr}
 801a07a:	b08a      	sub	sp, #40	@ 0x28
 801a07c:	af04      	add	r7, sp, #16
 801a07e:	60f8      	str	r0, [r7, #12]
 801a080:	607b      	str	r3, [r7, #4]
 801a082:	460b      	mov	r3, r1
 801a084:	817b      	strh	r3, [r7, #10]
 801a086:	4613      	mov	r3, r2
 801a088:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d106      	bne.n	801a09e <tcp_output_alloc_header+0x26>
 801a090:	4b15      	ldr	r3, [pc, #84]	@ (801a0e8 <tcp_output_alloc_header+0x70>)
 801a092:	f240 7242 	movw	r2, #1858	@ 0x742
 801a096:	4915      	ldr	r1, [pc, #84]	@ (801a0ec <tcp_output_alloc_header+0x74>)
 801a098:	4815      	ldr	r0, [pc, #84]	@ (801a0f0 <tcp_output_alloc_header+0x78>)
 801a09a:	f004 fe77 	bl	801ed8c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	8adb      	ldrh	r3, [r3, #22]
 801a0a6:	68fa      	ldr	r2, [r7, #12]
 801a0a8:	8b12      	ldrh	r2, [r2, #24]
 801a0aa:	68f9      	ldr	r1, [r7, #12]
 801a0ac:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801a0ae:	893d      	ldrh	r5, [r7, #8]
 801a0b0:	897c      	ldrh	r4, [r7, #10]
 801a0b2:	9103      	str	r1, [sp, #12]
 801a0b4:	2110      	movs	r1, #16
 801a0b6:	9102      	str	r1, [sp, #8]
 801a0b8:	9201      	str	r2, [sp, #4]
 801a0ba:	9300      	str	r3, [sp, #0]
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	462a      	mov	r2, r5
 801a0c0:	4621      	mov	r1, r4
 801a0c2:	f7ff ff67 	bl	8019f94 <tcp_output_alloc_header_common>
 801a0c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a0c8:	697b      	ldr	r3, [r7, #20]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d006      	beq.n	801a0dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0d2:	68fa      	ldr	r2, [r7, #12]
 801a0d4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a0d6:	441a      	add	r2, r3
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801a0dc:	697b      	ldr	r3, [r7, #20]
}
 801a0de:	4618      	mov	r0, r3
 801a0e0:	3718      	adds	r7, #24
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	bdb0      	pop	{r4, r5, r7, pc}
 801a0e6:	bf00      	nop
 801a0e8:	0802242c 	.word	0x0802242c
 801a0ec:	08022b90 	.word	0x08022b90
 801a0f0:	08022480 	.word	0x08022480

0801a0f4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a0f4:	b580      	push	{r7, lr}
 801a0f6:	b088      	sub	sp, #32
 801a0f8:	af00      	add	r7, sp, #0
 801a0fa:	60f8      	str	r0, [r7, #12]
 801a0fc:	60b9      	str	r1, [r7, #8]
 801a0fe:	4611      	mov	r1, r2
 801a100:	461a      	mov	r2, r3
 801a102:	460b      	mov	r3, r1
 801a104:	71fb      	strb	r3, [r7, #7]
 801a106:	4613      	mov	r3, r2
 801a108:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a10a:	2300      	movs	r3, #0
 801a10c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a10e:	68bb      	ldr	r3, [r7, #8]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d106      	bne.n	801a122 <tcp_output_fill_options+0x2e>
 801a114:	4b12      	ldr	r3, [pc, #72]	@ (801a160 <tcp_output_fill_options+0x6c>)
 801a116:	f240 7256 	movw	r2, #1878	@ 0x756
 801a11a:	4912      	ldr	r1, [pc, #72]	@ (801a164 <tcp_output_fill_options+0x70>)
 801a11c:	4812      	ldr	r0, [pc, #72]	@ (801a168 <tcp_output_fill_options+0x74>)
 801a11e:	f004 fe35 	bl	801ed8c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a122:	68bb      	ldr	r3, [r7, #8]
 801a124:	685b      	ldr	r3, [r3, #4]
 801a126:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a128:	69bb      	ldr	r3, [r7, #24]
 801a12a:	3314      	adds	r3, #20
 801a12c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a12e:	8bfb      	ldrh	r3, [r7, #30]
 801a130:	009b      	lsls	r3, r3, #2
 801a132:	461a      	mov	r2, r3
 801a134:	79fb      	ldrb	r3, [r7, #7]
 801a136:	009b      	lsls	r3, r3, #2
 801a138:	f003 0304 	and.w	r3, r3, #4
 801a13c:	4413      	add	r3, r2
 801a13e:	3314      	adds	r3, #20
 801a140:	69ba      	ldr	r2, [r7, #24]
 801a142:	4413      	add	r3, r2
 801a144:	697a      	ldr	r2, [r7, #20]
 801a146:	429a      	cmp	r2, r3
 801a148:	d006      	beq.n	801a158 <tcp_output_fill_options+0x64>
 801a14a:	4b05      	ldr	r3, [pc, #20]	@ (801a160 <tcp_output_fill_options+0x6c>)
 801a14c:	f240 7275 	movw	r2, #1909	@ 0x775
 801a150:	4906      	ldr	r1, [pc, #24]	@ (801a16c <tcp_output_fill_options+0x78>)
 801a152:	4805      	ldr	r0, [pc, #20]	@ (801a168 <tcp_output_fill_options+0x74>)
 801a154:	f004 fe1a 	bl	801ed8c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a158:	bf00      	nop
 801a15a:	3720      	adds	r7, #32
 801a15c:	46bd      	mov	sp, r7
 801a15e:	bd80      	pop	{r7, pc}
 801a160:	0802242c 	.word	0x0802242c
 801a164:	08022bb8 	.word	0x08022bb8
 801a168:	08022480 	.word	0x08022480
 801a16c:	08022ab0 	.word	0x08022ab0

0801a170 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a170:	b580      	push	{r7, lr}
 801a172:	b08a      	sub	sp, #40	@ 0x28
 801a174:	af04      	add	r7, sp, #16
 801a176:	60f8      	str	r0, [r7, #12]
 801a178:	60b9      	str	r1, [r7, #8]
 801a17a:	607a      	str	r2, [r7, #4]
 801a17c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a17e:	68bb      	ldr	r3, [r7, #8]
 801a180:	2b00      	cmp	r3, #0
 801a182:	d106      	bne.n	801a192 <tcp_output_control_segment+0x22>
 801a184:	4b1c      	ldr	r3, [pc, #112]	@ (801a1f8 <tcp_output_control_segment+0x88>)
 801a186:	f240 7287 	movw	r2, #1927	@ 0x787
 801a18a:	491c      	ldr	r1, [pc, #112]	@ (801a1fc <tcp_output_control_segment+0x8c>)
 801a18c:	481c      	ldr	r0, [pc, #112]	@ (801a200 <tcp_output_control_segment+0x90>)
 801a18e:	f004 fdfd 	bl	801ed8c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a192:	683a      	ldr	r2, [r7, #0]
 801a194:	6879      	ldr	r1, [r7, #4]
 801a196:	68f8      	ldr	r0, [r7, #12]
 801a198:	f7fe fa7c 	bl	8018694 <tcp_route>
 801a19c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a19e:	693b      	ldr	r3, [r7, #16]
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d102      	bne.n	801a1aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a1a4:	23fc      	movs	r3, #252	@ 0xfc
 801a1a6:	75fb      	strb	r3, [r7, #23]
 801a1a8:	e01c      	b.n	801a1e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d006      	beq.n	801a1be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	7adb      	ldrb	r3, [r3, #11]
 801a1b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	7a9b      	ldrb	r3, [r3, #10]
 801a1ba:	757b      	strb	r3, [r7, #21]
 801a1bc:	e003      	b.n	801a1c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a1be:	23ff      	movs	r3, #255	@ 0xff
 801a1c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a1c6:	7dba      	ldrb	r2, [r7, #22]
 801a1c8:	693b      	ldr	r3, [r7, #16]
 801a1ca:	9302      	str	r3, [sp, #8]
 801a1cc:	2306      	movs	r3, #6
 801a1ce:	9301      	str	r3, [sp, #4]
 801a1d0:	7d7b      	ldrb	r3, [r7, #21]
 801a1d2:	9300      	str	r3, [sp, #0]
 801a1d4:	4613      	mov	r3, r2
 801a1d6:	683a      	ldr	r2, [r7, #0]
 801a1d8:	6879      	ldr	r1, [r7, #4]
 801a1da:	68b8      	ldr	r0, [r7, #8]
 801a1dc:	f002 fe1c 	bl	801ce18 <ip4_output_if>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a1e4:	68b8      	ldr	r0, [r7, #8]
 801a1e6:	f7f9 fde1 	bl	8013dac <pbuf_free>
  return err;
 801a1ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a1ee:	4618      	mov	r0, r3
 801a1f0:	3718      	adds	r7, #24
 801a1f2:	46bd      	mov	sp, r7
 801a1f4:	bd80      	pop	{r7, pc}
 801a1f6:	bf00      	nop
 801a1f8:	0802242c 	.word	0x0802242c
 801a1fc:	08022be0 	.word	0x08022be0
 801a200:	08022480 	.word	0x08022480

0801a204 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a204:	b590      	push	{r4, r7, lr}
 801a206:	b08b      	sub	sp, #44	@ 0x2c
 801a208:	af04      	add	r7, sp, #16
 801a20a:	60f8      	str	r0, [r7, #12]
 801a20c:	60b9      	str	r1, [r7, #8]
 801a20e:	607a      	str	r2, [r7, #4]
 801a210:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a212:	683b      	ldr	r3, [r7, #0]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d106      	bne.n	801a226 <tcp_rst+0x22>
 801a218:	4b1f      	ldr	r3, [pc, #124]	@ (801a298 <tcp_rst+0x94>)
 801a21a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801a21e:	491f      	ldr	r1, [pc, #124]	@ (801a29c <tcp_rst+0x98>)
 801a220:	481f      	ldr	r0, [pc, #124]	@ (801a2a0 <tcp_rst+0x9c>)
 801a222:	f004 fdb3 	bl	801ed8c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d106      	bne.n	801a23a <tcp_rst+0x36>
 801a22c:	4b1a      	ldr	r3, [pc, #104]	@ (801a298 <tcp_rst+0x94>)
 801a22e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801a232:	491c      	ldr	r1, [pc, #112]	@ (801a2a4 <tcp_rst+0xa0>)
 801a234:	481a      	ldr	r0, [pc, #104]	@ (801a2a0 <tcp_rst+0x9c>)
 801a236:	f004 fda9 	bl	801ed8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a23a:	2300      	movs	r3, #0
 801a23c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a23e:	f246 0308 	movw	r3, #24584	@ 0x6008
 801a242:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a244:	7dfb      	ldrb	r3, [r7, #23]
 801a246:	b29c      	uxth	r4, r3
 801a248:	68b8      	ldr	r0, [r7, #8]
 801a24a:	f7f8 f8e1 	bl	8012410 <lwip_htonl>
 801a24e:	4602      	mov	r2, r0
 801a250:	8abb      	ldrh	r3, [r7, #20]
 801a252:	9303      	str	r3, [sp, #12]
 801a254:	2314      	movs	r3, #20
 801a256:	9302      	str	r3, [sp, #8]
 801a258:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801a25a:	9301      	str	r3, [sp, #4]
 801a25c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a25e:	9300      	str	r3, [sp, #0]
 801a260:	4613      	mov	r3, r2
 801a262:	2200      	movs	r2, #0
 801a264:	4621      	mov	r1, r4
 801a266:	6878      	ldr	r0, [r7, #4]
 801a268:	f7ff fe94 	bl	8019f94 <tcp_output_alloc_header_common>
 801a26c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a26e:	693b      	ldr	r3, [r7, #16]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d00c      	beq.n	801a28e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a274:	7dfb      	ldrb	r3, [r7, #23]
 801a276:	2200      	movs	r2, #0
 801a278:	6939      	ldr	r1, [r7, #16]
 801a27a:	68f8      	ldr	r0, [r7, #12]
 801a27c:	f7ff ff3a 	bl	801a0f4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a282:	683a      	ldr	r2, [r7, #0]
 801a284:	6939      	ldr	r1, [r7, #16]
 801a286:	68f8      	ldr	r0, [r7, #12]
 801a288:	f7ff ff72 	bl	801a170 <tcp_output_control_segment>
 801a28c:	e000      	b.n	801a290 <tcp_rst+0x8c>
    return;
 801a28e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a290:	371c      	adds	r7, #28
 801a292:	46bd      	mov	sp, r7
 801a294:	bd90      	pop	{r4, r7, pc}
 801a296:	bf00      	nop
 801a298:	0802242c 	.word	0x0802242c
 801a29c:	08022c0c 	.word	0x08022c0c
 801a2a0:	08022480 	.word	0x08022480
 801a2a4:	08022c28 	.word	0x08022c28

0801a2a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a2a8:	b590      	push	{r4, r7, lr}
 801a2aa:	b087      	sub	sp, #28
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d106      	bne.n	801a2cc <tcp_send_empty_ack+0x24>
 801a2be:	4b28      	ldr	r3, [pc, #160]	@ (801a360 <tcp_send_empty_ack+0xb8>)
 801a2c0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801a2c4:	4927      	ldr	r1, [pc, #156]	@ (801a364 <tcp_send_empty_ack+0xbc>)
 801a2c6:	4828      	ldr	r0, [pc, #160]	@ (801a368 <tcp_send_empty_ack+0xc0>)
 801a2c8:	f004 fd60 	bl	801ed8c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a2cc:	7dfb      	ldrb	r3, [r7, #23]
 801a2ce:	009b      	lsls	r3, r3, #2
 801a2d0:	b2db      	uxtb	r3, r3
 801a2d2:	f003 0304 	and.w	r3, r3, #4
 801a2d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a2d8:	7d7b      	ldrb	r3, [r7, #21]
 801a2da:	b29c      	uxth	r4, r3
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	f7f8 f895 	bl	8012410 <lwip_htonl>
 801a2e6:	4603      	mov	r3, r0
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	4621      	mov	r1, r4
 801a2ec:	6878      	ldr	r0, [r7, #4]
 801a2ee:	f7ff fec3 	bl	801a078 <tcp_output_alloc_header>
 801a2f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a2f4:	693b      	ldr	r3, [r7, #16]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d109      	bne.n	801a30e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	8b5b      	ldrh	r3, [r3, #26]
 801a2fe:	f043 0303 	orr.w	r3, r3, #3
 801a302:	b29a      	uxth	r2, r3
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a308:	f06f 0301 	mvn.w	r3, #1
 801a30c:	e023      	b.n	801a356 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a30e:	7dbb      	ldrb	r3, [r7, #22]
 801a310:	7dfa      	ldrb	r2, [r7, #23]
 801a312:	6939      	ldr	r1, [r7, #16]
 801a314:	6878      	ldr	r0, [r7, #4]
 801a316:	f7ff feed 	bl	801a0f4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a31a:	687a      	ldr	r2, [r7, #4]
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	3304      	adds	r3, #4
 801a320:	6939      	ldr	r1, [r7, #16]
 801a322:	6878      	ldr	r0, [r7, #4]
 801a324:	f7ff ff24 	bl	801a170 <tcp_output_control_segment>
 801a328:	4603      	mov	r3, r0
 801a32a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a32c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a330:	2b00      	cmp	r3, #0
 801a332:	d007      	beq.n	801a344 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	8b5b      	ldrh	r3, [r3, #26]
 801a338:	f043 0303 	orr.w	r3, r3, #3
 801a33c:	b29a      	uxth	r2, r3
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	835a      	strh	r2, [r3, #26]
 801a342:	e006      	b.n	801a352 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	8b5b      	ldrh	r3, [r3, #26]
 801a348:	f023 0303 	bic.w	r3, r3, #3
 801a34c:	b29a      	uxth	r2, r3
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a356:	4618      	mov	r0, r3
 801a358:	371c      	adds	r7, #28
 801a35a:	46bd      	mov	sp, r7
 801a35c:	bd90      	pop	{r4, r7, pc}
 801a35e:	bf00      	nop
 801a360:	0802242c 	.word	0x0802242c
 801a364:	08022c44 	.word	0x08022c44
 801a368:	08022480 	.word	0x08022480

0801a36c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a36c:	b590      	push	{r4, r7, lr}
 801a36e:	b085      	sub	sp, #20
 801a370:	af00      	add	r7, sp, #0
 801a372:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a374:	2300      	movs	r3, #0
 801a376:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d106      	bne.n	801a38c <tcp_keepalive+0x20>
 801a37e:	4b18      	ldr	r3, [pc, #96]	@ (801a3e0 <tcp_keepalive+0x74>)
 801a380:	f640 0224 	movw	r2, #2084	@ 0x824
 801a384:	4917      	ldr	r1, [pc, #92]	@ (801a3e4 <tcp_keepalive+0x78>)
 801a386:	4818      	ldr	r0, [pc, #96]	@ (801a3e8 <tcp_keepalive+0x7c>)
 801a388:	f004 fd00 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a38c:	7abb      	ldrb	r3, [r7, #10]
 801a38e:	b29c      	uxth	r4, r3
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a394:	3b01      	subs	r3, #1
 801a396:	4618      	mov	r0, r3
 801a398:	f7f8 f83a 	bl	8012410 <lwip_htonl>
 801a39c:	4603      	mov	r3, r0
 801a39e:	2200      	movs	r2, #0
 801a3a0:	4621      	mov	r1, r4
 801a3a2:	6878      	ldr	r0, [r7, #4]
 801a3a4:	f7ff fe68 	bl	801a078 <tcp_output_alloc_header>
 801a3a8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d102      	bne.n	801a3b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a3b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a3b4:	e010      	b.n	801a3d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a3b6:	7abb      	ldrb	r3, [r7, #10]
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	68f9      	ldr	r1, [r7, #12]
 801a3bc:	6878      	ldr	r0, [r7, #4]
 801a3be:	f7ff fe99 	bl	801a0f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a3c2:	687a      	ldr	r2, [r7, #4]
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	3304      	adds	r3, #4
 801a3c8:	68f9      	ldr	r1, [r7, #12]
 801a3ca:	6878      	ldr	r0, [r7, #4]
 801a3cc:	f7ff fed0 	bl	801a170 <tcp_output_control_segment>
 801a3d0:	4603      	mov	r3, r0
 801a3d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a3d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a3d8:	4618      	mov	r0, r3
 801a3da:	3714      	adds	r7, #20
 801a3dc:	46bd      	mov	sp, r7
 801a3de:	bd90      	pop	{r4, r7, pc}
 801a3e0:	0802242c 	.word	0x0802242c
 801a3e4:	08022c64 	.word	0x08022c64
 801a3e8:	08022480 	.word	0x08022480

0801a3ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a3ec:	b590      	push	{r4, r7, lr}
 801a3ee:	b08b      	sub	sp, #44	@ 0x2c
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d106      	bne.n	801a40c <tcp_zero_window_probe+0x20>
 801a3fe:	4b4d      	ldr	r3, [pc, #308]	@ (801a534 <tcp_zero_window_probe+0x148>)
 801a400:	f640 024f 	movw	r2, #2127	@ 0x84f
 801a404:	494c      	ldr	r1, [pc, #304]	@ (801a538 <tcp_zero_window_probe+0x14c>)
 801a406:	484d      	ldr	r0, [pc, #308]	@ (801a53c <tcp_zero_window_probe+0x150>)
 801a408:	f004 fcc0 	bl	801ed8c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a410:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 801a412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a414:	2b00      	cmp	r3, #0
 801a416:	d101      	bne.n	801a41c <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a418:	2300      	movs	r3, #0
 801a41a:	e087      	b.n	801a52c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a422:	2bff      	cmp	r3, #255	@ 0xff
 801a424:	d007      	beq.n	801a436 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a42c:	3301      	adds	r3, #1
 801a42e:	b2da      	uxtb	r2, r3
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a438:	691b      	ldr	r3, [r3, #16]
 801a43a:	899b      	ldrh	r3, [r3, #12]
 801a43c:	b29b      	uxth	r3, r3
 801a43e:	4618      	mov	r0, r3
 801a440:	f7f7 ffd0 	bl	80123e4 <lwip_htons>
 801a444:	4603      	mov	r3, r0
 801a446:	b2db      	uxtb	r3, r3
 801a448:	f003 0301 	and.w	r3, r3, #1
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d005      	beq.n	801a45c <tcp_zero_window_probe+0x70>
 801a450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a452:	891b      	ldrh	r3, [r3, #8]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d101      	bne.n	801a45c <tcp_zero_window_probe+0x70>
 801a458:	2301      	movs	r3, #1
 801a45a:	e000      	b.n	801a45e <tcp_zero_window_probe+0x72>
 801a45c:	2300      	movs	r3, #0
 801a45e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a462:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a466:	2b00      	cmp	r3, #0
 801a468:	bf0c      	ite	eq
 801a46a:	2301      	moveq	r3, #1
 801a46c:	2300      	movne	r3, #0
 801a46e:	b2db      	uxtb	r3, r3
 801a470:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a472:	7cfb      	ldrb	r3, [r7, #19]
 801a474:	b299      	uxth	r1, r3
 801a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a478:	691b      	ldr	r3, [r3, #16]
 801a47a:	685b      	ldr	r3, [r3, #4]
 801a47c:	8c3a      	ldrh	r2, [r7, #32]
 801a47e:	6878      	ldr	r0, [r7, #4]
 801a480:	f7ff fdfa 	bl	801a078 <tcp_output_alloc_header>
 801a484:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801a486:	69fb      	ldr	r3, [r7, #28]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d102      	bne.n	801a492 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a48c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a490:	e04c      	b.n	801a52c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a492:	69fb      	ldr	r3, [r7, #28]
 801a494:	685b      	ldr	r3, [r3, #4]
 801a496:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801a498:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d011      	beq.n	801a4c4 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a4a0:	69bb      	ldr	r3, [r7, #24]
 801a4a2:	899b      	ldrh	r3, [r3, #12]
 801a4a4:	b29b      	uxth	r3, r3
 801a4a6:	b21b      	sxth	r3, r3
 801a4a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801a4ac:	b21c      	sxth	r4, r3
 801a4ae:	2011      	movs	r0, #17
 801a4b0:	f7f7 ff98 	bl	80123e4 <lwip_htons>
 801a4b4:	4603      	mov	r3, r0
 801a4b6:	b21b      	sxth	r3, r3
 801a4b8:	4323      	orrs	r3, r4
 801a4ba:	b21b      	sxth	r3, r3
 801a4bc:	b29a      	uxth	r2, r3
 801a4be:	69bb      	ldr	r3, [r7, #24]
 801a4c0:	819a      	strh	r2, [r3, #12]
 801a4c2:	e010      	b.n	801a4e6 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a4c4:	69fb      	ldr	r3, [r7, #28]
 801a4c6:	685b      	ldr	r3, [r3, #4]
 801a4c8:	3314      	adds	r3, #20
 801a4ca:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4ce:	6858      	ldr	r0, [r3, #4]
 801a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4d2:	685b      	ldr	r3, [r3, #4]
 801a4d4:	891a      	ldrh	r2, [r3, #8]
 801a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4d8:	891b      	ldrh	r3, [r3, #8]
 801a4da:	1ad3      	subs	r3, r2, r3
 801a4dc:	b29b      	uxth	r3, r3
 801a4de:	2201      	movs	r2, #1
 801a4e0:	6979      	ldr	r1, [r7, #20]
 801a4e2:	f7f9 fe69 	bl	80141b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4e8:	691b      	ldr	r3, [r3, #16]
 801a4ea:	685b      	ldr	r3, [r3, #4]
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	f7f7 ff8f 	bl	8012410 <lwip_htonl>
 801a4f2:	4603      	mov	r3, r0
 801a4f4:	3301      	adds	r3, #1
 801a4f6:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	1ad3      	subs	r3, r2, r3
 801a500:	2b00      	cmp	r3, #0
 801a502:	da02      	bge.n	801a50a <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	68fa      	ldr	r2, [r7, #12]
 801a508:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a50a:	7cfb      	ldrb	r3, [r7, #19]
 801a50c:	2200      	movs	r2, #0
 801a50e:	69f9      	ldr	r1, [r7, #28]
 801a510:	6878      	ldr	r0, [r7, #4]
 801a512:	f7ff fdef 	bl	801a0f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a516:	687a      	ldr	r2, [r7, #4]
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	3304      	adds	r3, #4
 801a51c:	69f9      	ldr	r1, [r7, #28]
 801a51e:	6878      	ldr	r0, [r7, #4]
 801a520:	f7ff fe26 	bl	801a170 <tcp_output_control_segment>
 801a524:	4603      	mov	r3, r0
 801a526:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a528:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a52c:	4618      	mov	r0, r3
 801a52e:	372c      	adds	r7, #44	@ 0x2c
 801a530:	46bd      	mov	sp, r7
 801a532:	bd90      	pop	{r4, r7, pc}
 801a534:	0802242c 	.word	0x0802242c
 801a538:	08022c80 	.word	0x08022c80
 801a53c:	08022480 	.word	0x08022480

0801a540 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a540:	b580      	push	{r7, lr}
 801a542:	b082      	sub	sp, #8
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a548:	f7f9 ff24 	bl	8014394 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a54c:	4b0a      	ldr	r3, [pc, #40]	@ (801a578 <tcpip_tcp_timer+0x38>)
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d103      	bne.n	801a55c <tcpip_tcp_timer+0x1c>
 801a554:	4b09      	ldr	r3, [pc, #36]	@ (801a57c <tcpip_tcp_timer+0x3c>)
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d005      	beq.n	801a568 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a55c:	2200      	movs	r2, #0
 801a55e:	4908      	ldr	r1, [pc, #32]	@ (801a580 <tcpip_tcp_timer+0x40>)
 801a560:	20fa      	movs	r0, #250	@ 0xfa
 801a562:	f000 f8f3 	bl	801a74c <sys_timeout>
 801a566:	e003      	b.n	801a570 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a568:	4b06      	ldr	r3, [pc, #24]	@ (801a584 <tcpip_tcp_timer+0x44>)
 801a56a:	2200      	movs	r2, #0
 801a56c:	601a      	str	r2, [r3, #0]
  }
}
 801a56e:	bf00      	nop
 801a570:	bf00      	nop
 801a572:	3708      	adds	r7, #8
 801a574:	46bd      	mov	sp, r7
 801a576:	bd80      	pop	{r7, pc}
 801a578:	200227a8 	.word	0x200227a8
 801a57c:	200227ac 	.word	0x200227ac
 801a580:	0801a541 	.word	0x0801a541
 801a584:	200227f8 	.word	0x200227f8

0801a588 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a58c:	4b0a      	ldr	r3, [pc, #40]	@ (801a5b8 <tcp_timer_needed+0x30>)
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	2b00      	cmp	r3, #0
 801a592:	d10f      	bne.n	801a5b4 <tcp_timer_needed+0x2c>
 801a594:	4b09      	ldr	r3, [pc, #36]	@ (801a5bc <tcp_timer_needed+0x34>)
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d103      	bne.n	801a5a4 <tcp_timer_needed+0x1c>
 801a59c:	4b08      	ldr	r3, [pc, #32]	@ (801a5c0 <tcp_timer_needed+0x38>)
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d007      	beq.n	801a5b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a5a4:	4b04      	ldr	r3, [pc, #16]	@ (801a5b8 <tcp_timer_needed+0x30>)
 801a5a6:	2201      	movs	r2, #1
 801a5a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	4905      	ldr	r1, [pc, #20]	@ (801a5c4 <tcp_timer_needed+0x3c>)
 801a5ae:	20fa      	movs	r0, #250	@ 0xfa
 801a5b0:	f000 f8cc 	bl	801a74c <sys_timeout>
  }
}
 801a5b4:	bf00      	nop
 801a5b6:	bd80      	pop	{r7, pc}
 801a5b8:	200227f8 	.word	0x200227f8
 801a5bc:	200227a8 	.word	0x200227a8
 801a5c0:	200227ac 	.word	0x200227ac
 801a5c4:	0801a541 	.word	0x0801a541

0801a5c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b086      	sub	sp, #24
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	60f8      	str	r0, [r7, #12]
 801a5d0:	60b9      	str	r1, [r7, #8]
 801a5d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a5d4:	200a      	movs	r0, #10
 801a5d6:	f7f8 fbd9 	bl	8012d8c <memp_malloc>
 801a5da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a5dc:	693b      	ldr	r3, [r7, #16]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d109      	bne.n	801a5f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a5e2:	693b      	ldr	r3, [r7, #16]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d151      	bne.n	801a68c <sys_timeout_abs+0xc4>
 801a5e8:	4b2a      	ldr	r3, [pc, #168]	@ (801a694 <sys_timeout_abs+0xcc>)
 801a5ea:	22be      	movs	r2, #190	@ 0xbe
 801a5ec:	492a      	ldr	r1, [pc, #168]	@ (801a698 <sys_timeout_abs+0xd0>)
 801a5ee:	482b      	ldr	r0, [pc, #172]	@ (801a69c <sys_timeout_abs+0xd4>)
 801a5f0:	f004 fbcc 	bl	801ed8c <iprintf>
    return;
 801a5f4:	e04a      	b.n	801a68c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a5f6:	693b      	ldr	r3, [r7, #16]
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a5fc:	693b      	ldr	r3, [r7, #16]
 801a5fe:	68ba      	ldr	r2, [r7, #8]
 801a600:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a602:	693b      	ldr	r3, [r7, #16]
 801a604:	687a      	ldr	r2, [r7, #4]
 801a606:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a608:	693b      	ldr	r3, [r7, #16]
 801a60a:	68fa      	ldr	r2, [r7, #12]
 801a60c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a60e:	4b24      	ldr	r3, [pc, #144]	@ (801a6a0 <sys_timeout_abs+0xd8>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d103      	bne.n	801a61e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a616:	4a22      	ldr	r2, [pc, #136]	@ (801a6a0 <sys_timeout_abs+0xd8>)
 801a618:	693b      	ldr	r3, [r7, #16]
 801a61a:	6013      	str	r3, [r2, #0]
    return;
 801a61c:	e037      	b.n	801a68e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a61e:	693b      	ldr	r3, [r7, #16]
 801a620:	685a      	ldr	r2, [r3, #4]
 801a622:	4b1f      	ldr	r3, [pc, #124]	@ (801a6a0 <sys_timeout_abs+0xd8>)
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	685b      	ldr	r3, [r3, #4]
 801a628:	1ad3      	subs	r3, r2, r3
 801a62a:	0fdb      	lsrs	r3, r3, #31
 801a62c:	f003 0301 	and.w	r3, r3, #1
 801a630:	b2db      	uxtb	r3, r3
 801a632:	2b00      	cmp	r3, #0
 801a634:	d007      	beq.n	801a646 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a636:	4b1a      	ldr	r3, [pc, #104]	@ (801a6a0 <sys_timeout_abs+0xd8>)
 801a638:	681a      	ldr	r2, [r3, #0]
 801a63a:	693b      	ldr	r3, [r7, #16]
 801a63c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a63e:	4a18      	ldr	r2, [pc, #96]	@ (801a6a0 <sys_timeout_abs+0xd8>)
 801a640:	693b      	ldr	r3, [r7, #16]
 801a642:	6013      	str	r3, [r2, #0]
 801a644:	e023      	b.n	801a68e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a646:	4b16      	ldr	r3, [pc, #88]	@ (801a6a0 <sys_timeout_abs+0xd8>)
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	617b      	str	r3, [r7, #20]
 801a64c:	e01a      	b.n	801a684 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a64e:	697b      	ldr	r3, [r7, #20]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d00b      	beq.n	801a66e <sys_timeout_abs+0xa6>
 801a656:	693b      	ldr	r3, [r7, #16]
 801a658:	685a      	ldr	r2, [r3, #4]
 801a65a:	697b      	ldr	r3, [r7, #20]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	685b      	ldr	r3, [r3, #4]
 801a660:	1ad3      	subs	r3, r2, r3
 801a662:	0fdb      	lsrs	r3, r3, #31
 801a664:	f003 0301 	and.w	r3, r3, #1
 801a668:	b2db      	uxtb	r3, r3
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d007      	beq.n	801a67e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a66e:	697b      	ldr	r3, [r7, #20]
 801a670:	681a      	ldr	r2, [r3, #0]
 801a672:	693b      	ldr	r3, [r7, #16]
 801a674:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a676:	697b      	ldr	r3, [r7, #20]
 801a678:	693a      	ldr	r2, [r7, #16]
 801a67a:	601a      	str	r2, [r3, #0]
        break;
 801a67c:	e007      	b.n	801a68e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a67e:	697b      	ldr	r3, [r7, #20]
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	617b      	str	r3, [r7, #20]
 801a684:	697b      	ldr	r3, [r7, #20]
 801a686:	2b00      	cmp	r3, #0
 801a688:	d1e1      	bne.n	801a64e <sys_timeout_abs+0x86>
 801a68a:	e000      	b.n	801a68e <sys_timeout_abs+0xc6>
    return;
 801a68c:	bf00      	nop
      }
    }
  }
}
 801a68e:	3718      	adds	r7, #24
 801a690:	46bd      	mov	sp, r7
 801a692:	bd80      	pop	{r7, pc}
 801a694:	08022ca4 	.word	0x08022ca4
 801a698:	08022cd8 	.word	0x08022cd8
 801a69c:	08022d18 	.word	0x08022d18
 801a6a0:	200227f0 	.word	0x200227f0

0801a6a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a6a4:	b580      	push	{r7, lr}
 801a6a6:	b086      	sub	sp, #24
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a6b0:	697b      	ldr	r3, [r7, #20]
 801a6b2:	685b      	ldr	r3, [r3, #4]
 801a6b4:	4798      	blx	r3

  now = sys_now();
 801a6b6:	f7f0 fe35 	bl	800b324 <sys_now>
 801a6ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a6bc:	697b      	ldr	r3, [r7, #20]
 801a6be:	681a      	ldr	r2, [r3, #0]
 801a6c0:	4b0f      	ldr	r3, [pc, #60]	@ (801a700 <lwip_cyclic_timer+0x5c>)
 801a6c2:	681b      	ldr	r3, [r3, #0]
 801a6c4:	4413      	add	r3, r2
 801a6c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a6c8:	68fa      	ldr	r2, [r7, #12]
 801a6ca:	693b      	ldr	r3, [r7, #16]
 801a6cc:	1ad3      	subs	r3, r2, r3
 801a6ce:	0fdb      	lsrs	r3, r3, #31
 801a6d0:	f003 0301 	and.w	r3, r3, #1
 801a6d4:	b2db      	uxtb	r3, r3
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d009      	beq.n	801a6ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a6da:	697b      	ldr	r3, [r7, #20]
 801a6dc:	681a      	ldr	r2, [r3, #0]
 801a6de:	693b      	ldr	r3, [r7, #16]
 801a6e0:	4413      	add	r3, r2
 801a6e2:	687a      	ldr	r2, [r7, #4]
 801a6e4:	4907      	ldr	r1, [pc, #28]	@ (801a704 <lwip_cyclic_timer+0x60>)
 801a6e6:	4618      	mov	r0, r3
 801a6e8:	f7ff ff6e 	bl	801a5c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a6ec:	e004      	b.n	801a6f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a6ee:	687a      	ldr	r2, [r7, #4]
 801a6f0:	4904      	ldr	r1, [pc, #16]	@ (801a704 <lwip_cyclic_timer+0x60>)
 801a6f2:	68f8      	ldr	r0, [r7, #12]
 801a6f4:	f7ff ff68 	bl	801a5c8 <sys_timeout_abs>
}
 801a6f8:	bf00      	nop
 801a6fa:	3718      	adds	r7, #24
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	bd80      	pop	{r7, pc}
 801a700:	200227f4 	.word	0x200227f4
 801a704:	0801a6a5 	.word	0x0801a6a5

0801a708 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b082      	sub	sp, #8
 801a70c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a70e:	2301      	movs	r3, #1
 801a710:	607b      	str	r3, [r7, #4]
 801a712:	e00e      	b.n	801a732 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a714:	4a0b      	ldr	r2, [pc, #44]	@ (801a744 <sys_timeouts_init+0x3c>)
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	00db      	lsls	r3, r3, #3
 801a720:	4a08      	ldr	r2, [pc, #32]	@ (801a744 <sys_timeouts_init+0x3c>)
 801a722:	4413      	add	r3, r2
 801a724:	461a      	mov	r2, r3
 801a726:	4908      	ldr	r1, [pc, #32]	@ (801a748 <sys_timeouts_init+0x40>)
 801a728:	f000 f810 	bl	801a74c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	3301      	adds	r3, #1
 801a730:	607b      	str	r3, [r7, #4]
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	2b02      	cmp	r3, #2
 801a736:	d9ed      	bls.n	801a714 <sys_timeouts_init+0xc>
  }
}
 801a738:	bf00      	nop
 801a73a:	bf00      	nop
 801a73c:	3708      	adds	r7, #8
 801a73e:	46bd      	mov	sp, r7
 801a740:	bd80      	pop	{r7, pc}
 801a742:	bf00      	nop
 801a744:	0802431c 	.word	0x0802431c
 801a748:	0801a6a5 	.word	0x0801a6a5

0801a74c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b086      	sub	sp, #24
 801a750:	af00      	add	r7, sp, #0
 801a752:	60f8      	str	r0, [r7, #12]
 801a754:	60b9      	str	r1, [r7, #8]
 801a756:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a75e:	d306      	bcc.n	801a76e <sys_timeout+0x22>
 801a760:	4b0a      	ldr	r3, [pc, #40]	@ (801a78c <sys_timeout+0x40>)
 801a762:	f240 1229 	movw	r2, #297	@ 0x129
 801a766:	490a      	ldr	r1, [pc, #40]	@ (801a790 <sys_timeout+0x44>)
 801a768:	480a      	ldr	r0, [pc, #40]	@ (801a794 <sys_timeout+0x48>)
 801a76a:	f004 fb0f 	bl	801ed8c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801a76e:	f7f0 fdd9 	bl	800b324 <sys_now>
 801a772:	4602      	mov	r2, r0
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	4413      	add	r3, r2
 801a778:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801a77a:	687a      	ldr	r2, [r7, #4]
 801a77c:	68b9      	ldr	r1, [r7, #8]
 801a77e:	6978      	ldr	r0, [r7, #20]
 801a780:	f7ff ff22 	bl	801a5c8 <sys_timeout_abs>
#endif
}
 801a784:	bf00      	nop
 801a786:	3718      	adds	r7, #24
 801a788:	46bd      	mov	sp, r7
 801a78a:	bd80      	pop	{r7, pc}
 801a78c:	08022ca4 	.word	0x08022ca4
 801a790:	08022d40 	.word	0x08022d40
 801a794:	08022d18 	.word	0x08022d18

0801a798 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b084      	sub	sp, #16
 801a79c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801a79e:	f7f0 fdc1 	bl	800b324 <sys_now>
 801a7a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801a7a4:	4b17      	ldr	r3, [pc, #92]	@ (801a804 <sys_check_timeouts+0x6c>)
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801a7aa:	68bb      	ldr	r3, [r7, #8]
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d022      	beq.n	801a7f6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	685b      	ldr	r3, [r3, #4]
 801a7b4:	68fa      	ldr	r2, [r7, #12]
 801a7b6:	1ad3      	subs	r3, r2, r3
 801a7b8:	0fdb      	lsrs	r3, r3, #31
 801a7ba:	f003 0301 	and.w	r3, r3, #1
 801a7be:	b2db      	uxtb	r3, r3
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d11a      	bne.n	801a7fa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	4a0e      	ldr	r2, [pc, #56]	@ (801a804 <sys_check_timeouts+0x6c>)
 801a7ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801a7cc:	68bb      	ldr	r3, [r7, #8]
 801a7ce:	689b      	ldr	r3, [r3, #8]
 801a7d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801a7d2:	68bb      	ldr	r3, [r7, #8]
 801a7d4:	68db      	ldr	r3, [r3, #12]
 801a7d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801a7d8:	68bb      	ldr	r3, [r7, #8]
 801a7da:	685b      	ldr	r3, [r3, #4]
 801a7dc:	4a0a      	ldr	r2, [pc, #40]	@ (801a808 <sys_check_timeouts+0x70>)
 801a7de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a7e0:	68b9      	ldr	r1, [r7, #8]
 801a7e2:	200a      	movs	r0, #10
 801a7e4:	f7f8 fb48 	bl	8012e78 <memp_free>
    if (handler != NULL) {
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d0da      	beq.n	801a7a4 <sys_check_timeouts+0xc>
      handler(arg);
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	6838      	ldr	r0, [r7, #0]
 801a7f2:	4798      	blx	r3
  do {
 801a7f4:	e7d6      	b.n	801a7a4 <sys_check_timeouts+0xc>
      return;
 801a7f6:	bf00      	nop
 801a7f8:	e000      	b.n	801a7fc <sys_check_timeouts+0x64>
      return;
 801a7fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801a7fc:	3710      	adds	r7, #16
 801a7fe:	46bd      	mov	sp, r7
 801a800:	bd80      	pop	{r7, pc}
 801a802:	bf00      	nop
 801a804:	200227f0 	.word	0x200227f0
 801a808:	200227f4 	.word	0x200227f4

0801a80c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801a80c:	b580      	push	{r7, lr}
 801a80e:	b082      	sub	sp, #8
 801a810:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801a812:	4b16      	ldr	r3, [pc, #88]	@ (801a86c <sys_timeouts_sleeptime+0x60>)
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	2b00      	cmp	r3, #0
 801a818:	d102      	bne.n	801a820 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801a81a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a81e:	e020      	b.n	801a862 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801a820:	f7f0 fd80 	bl	800b324 <sys_now>
 801a824:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801a826:	4b11      	ldr	r3, [pc, #68]	@ (801a86c <sys_timeouts_sleeptime+0x60>)
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	685a      	ldr	r2, [r3, #4]
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	1ad3      	subs	r3, r2, r3
 801a830:	0fdb      	lsrs	r3, r3, #31
 801a832:	f003 0301 	and.w	r3, r3, #1
 801a836:	b2db      	uxtb	r3, r3
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d001      	beq.n	801a840 <sys_timeouts_sleeptime+0x34>
    return 0;
 801a83c:	2300      	movs	r3, #0
 801a83e:	e010      	b.n	801a862 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801a840:	4b0a      	ldr	r3, [pc, #40]	@ (801a86c <sys_timeouts_sleeptime+0x60>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	685a      	ldr	r2, [r3, #4]
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	1ad3      	subs	r3, r2, r3
 801a84a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801a84c:	683b      	ldr	r3, [r7, #0]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	da06      	bge.n	801a860 <sys_timeouts_sleeptime+0x54>
 801a852:	4b07      	ldr	r3, [pc, #28]	@ (801a870 <sys_timeouts_sleeptime+0x64>)
 801a854:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801a858:	4906      	ldr	r1, [pc, #24]	@ (801a874 <sys_timeouts_sleeptime+0x68>)
 801a85a:	4807      	ldr	r0, [pc, #28]	@ (801a878 <sys_timeouts_sleeptime+0x6c>)
 801a85c:	f004 fa96 	bl	801ed8c <iprintf>
    return ret;
 801a860:	683b      	ldr	r3, [r7, #0]
  }
}
 801a862:	4618      	mov	r0, r3
 801a864:	3708      	adds	r7, #8
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}
 801a86a:	bf00      	nop
 801a86c:	200227f0 	.word	0x200227f0
 801a870:	08022ca4 	.word	0x08022ca4
 801a874:	08022d78 	.word	0x08022d78
 801a878:	08022d18 	.word	0x08022d18

0801a87c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a880:	f004 f984 	bl	801eb8c <rand>
 801a884:	4603      	mov	r3, r0
 801a886:	b29b      	uxth	r3, r3
 801a888:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a88c:	b29b      	uxth	r3, r3
 801a88e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801a892:	b29a      	uxth	r2, r3
 801a894:	4b01      	ldr	r3, [pc, #4]	@ (801a89c <udp_init+0x20>)
 801a896:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a898:	bf00      	nop
 801a89a:	bd80      	pop	{r7, pc}
 801a89c:	20000070 	.word	0x20000070

0801a8a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801a8a0:	b480      	push	{r7}
 801a8a2:	b083      	sub	sp, #12
 801a8a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801a8aa:	4b17      	ldr	r3, [pc, #92]	@ (801a908 <udp_new_port+0x68>)
 801a8ac:	881b      	ldrh	r3, [r3, #0]
 801a8ae:	1c5a      	adds	r2, r3, #1
 801a8b0:	b291      	uxth	r1, r2
 801a8b2:	4a15      	ldr	r2, [pc, #84]	@ (801a908 <udp_new_port+0x68>)
 801a8b4:	8011      	strh	r1, [r2, #0]
 801a8b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a8ba:	4293      	cmp	r3, r2
 801a8bc:	d103      	bne.n	801a8c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801a8be:	4b12      	ldr	r3, [pc, #72]	@ (801a908 <udp_new_port+0x68>)
 801a8c0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801a8c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a8c6:	4b11      	ldr	r3, [pc, #68]	@ (801a90c <udp_new_port+0x6c>)
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	603b      	str	r3, [r7, #0]
 801a8cc:	e011      	b.n	801a8f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801a8ce:	683b      	ldr	r3, [r7, #0]
 801a8d0:	8a5a      	ldrh	r2, [r3, #18]
 801a8d2:	4b0d      	ldr	r3, [pc, #52]	@ (801a908 <udp_new_port+0x68>)
 801a8d4:	881b      	ldrh	r3, [r3, #0]
 801a8d6:	429a      	cmp	r2, r3
 801a8d8:	d108      	bne.n	801a8ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a8da:	88fb      	ldrh	r3, [r7, #6]
 801a8dc:	3301      	adds	r3, #1
 801a8de:	80fb      	strh	r3, [r7, #6]
 801a8e0:	88fb      	ldrh	r3, [r7, #6]
 801a8e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a8e6:	d3e0      	bcc.n	801a8aa <udp_new_port+0xa>
        return 0;
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	e007      	b.n	801a8fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a8ec:	683b      	ldr	r3, [r7, #0]
 801a8ee:	68db      	ldr	r3, [r3, #12]
 801a8f0:	603b      	str	r3, [r7, #0]
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d1ea      	bne.n	801a8ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801a8f8:	4b03      	ldr	r3, [pc, #12]	@ (801a908 <udp_new_port+0x68>)
 801a8fa:	881b      	ldrh	r3, [r3, #0]
}
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	370c      	adds	r7, #12
 801a900:	46bd      	mov	sp, r7
 801a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a906:	4770      	bx	lr
 801a908:	20000070 	.word	0x20000070
 801a90c:	200227fc 	.word	0x200227fc

0801a910 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b084      	sub	sp, #16
 801a914:	af00      	add	r7, sp, #0
 801a916:	60f8      	str	r0, [r7, #12]
 801a918:	60b9      	str	r1, [r7, #8]
 801a91a:	4613      	mov	r3, r2
 801a91c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d105      	bne.n	801a930 <udp_input_local_match+0x20>
 801a924:	4b27      	ldr	r3, [pc, #156]	@ (801a9c4 <udp_input_local_match+0xb4>)
 801a926:	2287      	movs	r2, #135	@ 0x87
 801a928:	4927      	ldr	r1, [pc, #156]	@ (801a9c8 <udp_input_local_match+0xb8>)
 801a92a:	4828      	ldr	r0, [pc, #160]	@ (801a9cc <udp_input_local_match+0xbc>)
 801a92c:	f004 fa2e 	bl	801ed8c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a930:	68bb      	ldr	r3, [r7, #8]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d105      	bne.n	801a942 <udp_input_local_match+0x32>
 801a936:	4b23      	ldr	r3, [pc, #140]	@ (801a9c4 <udp_input_local_match+0xb4>)
 801a938:	2288      	movs	r2, #136	@ 0x88
 801a93a:	4925      	ldr	r1, [pc, #148]	@ (801a9d0 <udp_input_local_match+0xc0>)
 801a93c:	4823      	ldr	r0, [pc, #140]	@ (801a9cc <udp_input_local_match+0xbc>)
 801a93e:	f004 fa25 	bl	801ed8c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	7a1b      	ldrb	r3, [r3, #8]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d00b      	beq.n	801a962 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	7a1a      	ldrb	r2, [r3, #8]
 801a94e:	4b21      	ldr	r3, [pc, #132]	@ (801a9d4 <udp_input_local_match+0xc4>)
 801a950:	685b      	ldr	r3, [r3, #4]
 801a952:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a956:	3301      	adds	r3, #1
 801a958:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a95a:	429a      	cmp	r2, r3
 801a95c:	d001      	beq.n	801a962 <udp_input_local_match+0x52>
    return 0;
 801a95e:	2300      	movs	r3, #0
 801a960:	e02b      	b.n	801a9ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a962:	79fb      	ldrb	r3, [r7, #7]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d018      	beq.n	801a99a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d013      	beq.n	801a996 <udp_input_local_match+0x86>
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d00f      	beq.n	801a996 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a976:	4b17      	ldr	r3, [pc, #92]	@ (801a9d4 <udp_input_local_match+0xc4>)
 801a978:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a97a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a97e:	d00a      	beq.n	801a996 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a980:	68fb      	ldr	r3, [r7, #12]
 801a982:	681a      	ldr	r2, [r3, #0]
 801a984:	4b13      	ldr	r3, [pc, #76]	@ (801a9d4 <udp_input_local_match+0xc4>)
 801a986:	695b      	ldr	r3, [r3, #20]
 801a988:	405a      	eors	r2, r3
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	3308      	adds	r3, #8
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a992:	2b00      	cmp	r3, #0
 801a994:	d110      	bne.n	801a9b8 <udp_input_local_match+0xa8>
          return 1;
 801a996:	2301      	movs	r3, #1
 801a998:	e00f      	b.n	801a9ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d009      	beq.n	801a9b4 <udp_input_local_match+0xa4>
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d005      	beq.n	801a9b4 <udp_input_local_match+0xa4>
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	681a      	ldr	r2, [r3, #0]
 801a9ac:	4b09      	ldr	r3, [pc, #36]	@ (801a9d4 <udp_input_local_match+0xc4>)
 801a9ae:	695b      	ldr	r3, [r3, #20]
 801a9b0:	429a      	cmp	r2, r3
 801a9b2:	d101      	bne.n	801a9b8 <udp_input_local_match+0xa8>
        return 1;
 801a9b4:	2301      	movs	r3, #1
 801a9b6:	e000      	b.n	801a9ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a9b8:	2300      	movs	r3, #0
}
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	3710      	adds	r7, #16
 801a9be:	46bd      	mov	sp, r7
 801a9c0:	bd80      	pop	{r7, pc}
 801a9c2:	bf00      	nop
 801a9c4:	08022d8c 	.word	0x08022d8c
 801a9c8:	08022dbc 	.word	0x08022dbc
 801a9cc:	08022de0 	.word	0x08022de0
 801a9d0:	08022e08 	.word	0x08022e08
 801a9d4:	2001f65c 	.word	0x2001f65c

0801a9d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a9d8:	b590      	push	{r4, r7, lr}
 801a9da:	b08d      	sub	sp, #52	@ 0x34
 801a9dc:	af02      	add	r7, sp, #8
 801a9de:	6078      	str	r0, [r7, #4]
 801a9e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d105      	bne.n	801a9f8 <udp_input+0x20>
 801a9ec:	4b95      	ldr	r3, [pc, #596]	@ (801ac44 <udp_input+0x26c>)
 801a9ee:	22cf      	movs	r2, #207	@ 0xcf
 801a9f0:	4995      	ldr	r1, [pc, #596]	@ (801ac48 <udp_input+0x270>)
 801a9f2:	4896      	ldr	r0, [pc, #600]	@ (801ac4c <udp_input+0x274>)
 801a9f4:	f004 f9ca 	bl	801ed8c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a9f8:	683b      	ldr	r3, [r7, #0]
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d105      	bne.n	801aa0a <udp_input+0x32>
 801a9fe:	4b91      	ldr	r3, [pc, #580]	@ (801ac44 <udp_input+0x26c>)
 801aa00:	22d0      	movs	r2, #208	@ 0xd0
 801aa02:	4993      	ldr	r1, [pc, #588]	@ (801ac50 <udp_input+0x278>)
 801aa04:	4891      	ldr	r0, [pc, #580]	@ (801ac4c <udp_input+0x274>)
 801aa06:	f004 f9c1 	bl	801ed8c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	895b      	ldrh	r3, [r3, #10]
 801aa0e:	2b07      	cmp	r3, #7
 801aa10:	d809      	bhi.n	801aa26 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	891b      	ldrh	r3, [r3, #8]
 801aa16:	4619      	mov	r1, r3
 801aa18:	488e      	ldr	r0, [pc, #568]	@ (801ac54 <udp_input+0x27c>)
 801aa1a:	f004 f9b7 	bl	801ed8c <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801aa1e:	6878      	ldr	r0, [r7, #4]
 801aa20:	f7f9 f9c4 	bl	8013dac <pbuf_free>
    goto end;
 801aa24:	e18d      	b.n	801ad42 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	685b      	ldr	r3, [r3, #4]
 801aa2a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801aa2c:	4b8a      	ldr	r3, [pc, #552]	@ (801ac58 <udp_input+0x280>)
 801aa2e:	695b      	ldr	r3, [r3, #20]
 801aa30:	4a89      	ldr	r2, [pc, #548]	@ (801ac58 <udp_input+0x280>)
 801aa32:	6812      	ldr	r2, [r2, #0]
 801aa34:	4611      	mov	r1, r2
 801aa36:	4618      	mov	r0, r3
 801aa38:	f002 fac6 	bl	801cfc8 <ip4_addr_isbroadcast_u32>
 801aa3c:	4603      	mov	r3, r0
 801aa3e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	891b      	ldrh	r3, [r3, #8]
 801aa44:	4619      	mov	r1, r3
 801aa46:	4885      	ldr	r0, [pc, #532]	@ (801ac5c <udp_input+0x284>)
 801aa48:	f004 f9a0 	bl	801ed8c <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801aa4c:	697b      	ldr	r3, [r7, #20]
 801aa4e:	881b      	ldrh	r3, [r3, #0]
 801aa50:	b29b      	uxth	r3, r3
 801aa52:	4618      	mov	r0, r3
 801aa54:	f7f7 fcc6 	bl	80123e4 <lwip_htons>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801aa5c:	697b      	ldr	r3, [r7, #20]
 801aa5e:	885b      	ldrh	r3, [r3, #2]
 801aa60:	b29b      	uxth	r3, r3
 801aa62:	4618      	mov	r0, r3
 801aa64:	f7f7 fcbe 	bl	80123e4 <lwip_htons>
 801aa68:	4603      	mov	r3, r0
 801aa6a:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801aa6c:	6978      	ldr	r0, [r7, #20]
 801aa6e:	f000 fe37 	bl	801b6e0 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 801aa72:	487b      	ldr	r0, [pc, #492]	@ (801ac60 <udp_input+0x288>)
 801aa74:	f004 f98a 	bl	801ed8c <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 801aa78:	4b77      	ldr	r3, [pc, #476]	@ (801ac58 <udp_input+0x280>)
 801aa7a:	695b      	ldr	r3, [r3, #20]
 801aa7c:	b2db      	uxtb	r3, r3
 801aa7e:	4619      	mov	r1, r3
 801aa80:	4b75      	ldr	r3, [pc, #468]	@ (801ac58 <udp_input+0x280>)
 801aa82:	695b      	ldr	r3, [r3, #20]
 801aa84:	0a1b      	lsrs	r3, r3, #8
 801aa86:	b2db      	uxtb	r3, r3
 801aa88:	461a      	mov	r2, r3
 801aa8a:	4b73      	ldr	r3, [pc, #460]	@ (801ac58 <udp_input+0x280>)
 801aa8c:	695b      	ldr	r3, [r3, #20]
 801aa8e:	0c1b      	lsrs	r3, r3, #16
 801aa90:	b2db      	uxtb	r3, r3
 801aa92:	4618      	mov	r0, r3
 801aa94:	4b70      	ldr	r3, [pc, #448]	@ (801ac58 <udp_input+0x280>)
 801aa96:	695b      	ldr	r3, [r3, #20]
 801aa98:	0e1b      	lsrs	r3, r3, #24
 801aa9a:	b2db      	uxtb	r3, r3
 801aa9c:	9300      	str	r3, [sp, #0]
 801aa9e:	4603      	mov	r3, r0
 801aaa0:	4870      	ldr	r0, [pc, #448]	@ (801ac64 <udp_input+0x28c>)
 801aaa2:	f004 f973 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 801aaa6:	697b      	ldr	r3, [r7, #20]
 801aaa8:	885b      	ldrh	r3, [r3, #2]
 801aaaa:	b29b      	uxth	r3, r3
 801aaac:	4618      	mov	r0, r3
 801aaae:	f7f7 fc99 	bl	80123e4 <lwip_htons>
 801aab2:	4603      	mov	r3, r0
 801aab4:	4619      	mov	r1, r3
 801aab6:	486c      	ldr	r0, [pc, #432]	@ (801ac68 <udp_input+0x290>)
 801aab8:	f004 f968 	bl	801ed8c <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801aabc:	4b66      	ldr	r3, [pc, #408]	@ (801ac58 <udp_input+0x280>)
 801aabe:	691b      	ldr	r3, [r3, #16]
 801aac0:	b2db      	uxtb	r3, r3
 801aac2:	4619      	mov	r1, r3
 801aac4:	4b64      	ldr	r3, [pc, #400]	@ (801ac58 <udp_input+0x280>)
 801aac6:	691b      	ldr	r3, [r3, #16]
 801aac8:	0a1b      	lsrs	r3, r3, #8
 801aaca:	b2db      	uxtb	r3, r3
 801aacc:	461a      	mov	r2, r3
 801aace:	4b62      	ldr	r3, [pc, #392]	@ (801ac58 <udp_input+0x280>)
 801aad0:	691b      	ldr	r3, [r3, #16]
 801aad2:	0c1b      	lsrs	r3, r3, #16
 801aad4:	b2db      	uxtb	r3, r3
 801aad6:	4618      	mov	r0, r3
 801aad8:	4b5f      	ldr	r3, [pc, #380]	@ (801ac58 <udp_input+0x280>)
 801aada:	691b      	ldr	r3, [r3, #16]
 801aadc:	0e1b      	lsrs	r3, r3, #24
 801aade:	b2db      	uxtb	r3, r3
 801aae0:	9300      	str	r3, [sp, #0]
 801aae2:	4603      	mov	r3, r0
 801aae4:	485f      	ldr	r0, [pc, #380]	@ (801ac64 <udp_input+0x28c>)
 801aae6:	f004 f951 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801aaea:	697b      	ldr	r3, [r7, #20]
 801aaec:	881b      	ldrh	r3, [r3, #0]
 801aaee:	b29b      	uxth	r3, r3
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	f7f7 fc77 	bl	80123e4 <lwip_htons>
 801aaf6:	4603      	mov	r3, r0
 801aaf8:	4619      	mov	r1, r3
 801aafa:	485c      	ldr	r0, [pc, #368]	@ (801ac6c <udp_input+0x294>)
 801aafc:	f004 f946 	bl	801ed8c <iprintf>

  pcb = NULL;
 801ab00:	2300      	movs	r3, #0
 801ab02:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801ab04:	2300      	movs	r3, #0
 801ab06:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801ab08:	2300      	movs	r3, #0
 801ab0a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab0c:	4b58      	ldr	r3, [pc, #352]	@ (801ac70 <udp_input+0x298>)
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	627b      	str	r3, [r7, #36]	@ 0x24
 801ab12:	e091      	b.n	801ac38 <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 801ab14:	4857      	ldr	r0, [pc, #348]	@ (801ac74 <udp_input+0x29c>)
 801ab16:	f004 f939 	bl	801ed8c <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 801ab1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	b2db      	uxtb	r3, r3
 801ab20:	4619      	mov	r1, r3
 801ab22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	0a1b      	lsrs	r3, r3, #8
 801ab28:	b2db      	uxtb	r3, r3
 801ab2a:	461a      	mov	r2, r3
 801ab2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	0c1b      	lsrs	r3, r3, #16
 801ab32:	b2db      	uxtb	r3, r3
 801ab34:	4618      	mov	r0, r3
 801ab36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	0e1b      	lsrs	r3, r3, #24
 801ab3c:	b2db      	uxtb	r3, r3
 801ab3e:	9300      	str	r3, [sp, #0]
 801ab40:	4603      	mov	r3, r0
 801ab42:	4848      	ldr	r0, [pc, #288]	@ (801ac64 <udp_input+0x28c>)
 801ab44:	f004 f922 	bl	801ed8c <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 801ab48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab4a:	8a5b      	ldrh	r3, [r3, #18]
 801ab4c:	4619      	mov	r1, r3
 801ab4e:	4846      	ldr	r0, [pc, #280]	@ (801ac68 <udp_input+0x290>)
 801ab50:	f004 f91c 	bl	801ed8c <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 801ab54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab56:	685b      	ldr	r3, [r3, #4]
 801ab58:	b2db      	uxtb	r3, r3
 801ab5a:	4619      	mov	r1, r3
 801ab5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab5e:	685b      	ldr	r3, [r3, #4]
 801ab60:	0a1b      	lsrs	r3, r3, #8
 801ab62:	b2db      	uxtb	r3, r3
 801ab64:	461a      	mov	r2, r3
 801ab66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab68:	685b      	ldr	r3, [r3, #4]
 801ab6a:	0c1b      	lsrs	r3, r3, #16
 801ab6c:	b2db      	uxtb	r3, r3
 801ab6e:	4618      	mov	r0, r3
 801ab70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab72:	685b      	ldr	r3, [r3, #4]
 801ab74:	0e1b      	lsrs	r3, r3, #24
 801ab76:	b2db      	uxtb	r3, r3
 801ab78:	9300      	str	r3, [sp, #0]
 801ab7a:	4603      	mov	r3, r0
 801ab7c:	4839      	ldr	r0, [pc, #228]	@ (801ac64 <udp_input+0x28c>)
 801ab7e:	f004 f905 	bl	801ed8c <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 801ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab84:	8a9b      	ldrh	r3, [r3, #20]
 801ab86:	4619      	mov	r1, r3
 801ab88:	4838      	ldr	r0, [pc, #224]	@ (801ac6c <udp_input+0x294>)
 801ab8a:	f004 f8ff 	bl	801ed8c <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab90:	8a5b      	ldrh	r3, [r3, #18]
 801ab92:	89fa      	ldrh	r2, [r7, #14]
 801ab94:	429a      	cmp	r2, r3
 801ab96:	d14a      	bne.n	801ac2e <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801ab98:	7cfb      	ldrb	r3, [r7, #19]
 801ab9a:	461a      	mov	r2, r3
 801ab9c:	6839      	ldr	r1, [r7, #0]
 801ab9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aba0:	f7ff feb6 	bl	801a910 <udp_input_local_match>
 801aba4:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d041      	beq.n	801ac2e <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801abaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abac:	7c1b      	ldrb	r3, [r3, #16]
 801abae:	f003 0304 	and.w	r3, r3, #4
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d11d      	bne.n	801abf2 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 801abb6:	69fb      	ldr	r3, [r7, #28]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d102      	bne.n	801abc2 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801abbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abbe:	61fb      	str	r3, [r7, #28]
 801abc0:	e017      	b.n	801abf2 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801abc2:	7cfb      	ldrb	r3, [r7, #19]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d014      	beq.n	801abf2 <udp_input+0x21a>
 801abc8:	4b23      	ldr	r3, [pc, #140]	@ (801ac58 <udp_input+0x280>)
 801abca:	695b      	ldr	r3, [r3, #20]
 801abcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801abd0:	d10f      	bne.n	801abf2 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801abd2:	69fb      	ldr	r3, [r7, #28]
 801abd4:	681a      	ldr	r2, [r3, #0]
 801abd6:	683b      	ldr	r3, [r7, #0]
 801abd8:	3304      	adds	r3, #4
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	429a      	cmp	r2, r3
 801abde:	d008      	beq.n	801abf2 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abe2:	681a      	ldr	r2, [r3, #0]
 801abe4:	683b      	ldr	r3, [r7, #0]
 801abe6:	3304      	adds	r3, #4
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	429a      	cmp	r2, r3
 801abec:	d101      	bne.n	801abf2 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 801abee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abf0:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801abf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abf4:	8a9b      	ldrh	r3, [r3, #20]
 801abf6:	8a3a      	ldrh	r2, [r7, #16]
 801abf8:	429a      	cmp	r2, r3
 801abfa:	d118      	bne.n	801ac2e <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abfe:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d005      	beq.n	801ac10 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801ac04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac06:	685a      	ldr	r2, [r3, #4]
 801ac08:	4b13      	ldr	r3, [pc, #76]	@ (801ac58 <udp_input+0x280>)
 801ac0a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ac0c:	429a      	cmp	r2, r3
 801ac0e:	d10e      	bne.n	801ac2e <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801ac10:	6a3b      	ldr	r3, [r7, #32]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d030      	beq.n	801ac78 <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801ac16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac18:	68da      	ldr	r2, [r3, #12]
 801ac1a:	6a3b      	ldr	r3, [r7, #32]
 801ac1c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801ac1e:	4b14      	ldr	r3, [pc, #80]	@ (801ac70 <udp_input+0x298>)
 801ac20:	681a      	ldr	r2, [r3, #0]
 801ac22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac24:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801ac26:	4a12      	ldr	r2, [pc, #72]	@ (801ac70 <udp_input+0x298>)
 801ac28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac2a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801ac2c:	e024      	b.n	801ac78 <udp_input+0x2a0>
      }
    }

    prev = pcb;
 801ac2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac30:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ac32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac34:	68db      	ldr	r3, [r3, #12]
 801ac36:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	f47f af6a 	bne.w	801ab14 <udp_input+0x13c>
 801ac40:	e01b      	b.n	801ac7a <udp_input+0x2a2>
 801ac42:	bf00      	nop
 801ac44:	08022d8c 	.word	0x08022d8c
 801ac48:	08022e30 	.word	0x08022e30
 801ac4c:	08022de0 	.word	0x08022de0
 801ac50:	08022e48 	.word	0x08022e48
 801ac54:	08022e64 	.word	0x08022e64
 801ac58:	2001f65c 	.word	0x2001f65c
 801ac5c:	08022e9c 	.word	0x08022e9c
 801ac60:	08022ec8 	.word	0x08022ec8
 801ac64:	08022ed0 	.word	0x08022ed0
 801ac68:	08022ee0 	.word	0x08022ee0
 801ac6c:	08022ef0 	.word	0x08022ef0
 801ac70:	200227fc 	.word	0x200227fc
 801ac74:	08022ef8 	.word	0x08022ef8
        break;
 801ac78:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d101      	bne.n	801ac84 <udp_input+0x2ac>
    pcb = uncon_pcb;
 801ac80:	69fb      	ldr	r3, [r7, #28]
 801ac82:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d002      	beq.n	801ac90 <udp_input+0x2b8>
    for_us = 1;
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	76fb      	strb	r3, [r7, #27]
 801ac8e:	e00a      	b.n	801aca6 <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801ac90:	683b      	ldr	r3, [r7, #0]
 801ac92:	3304      	adds	r3, #4
 801ac94:	681a      	ldr	r2, [r3, #0]
 801ac96:	4b2d      	ldr	r3, [pc, #180]	@ (801ad4c <udp_input+0x374>)
 801ac98:	695b      	ldr	r3, [r3, #20]
 801ac9a:	429a      	cmp	r2, r3
 801ac9c:	bf0c      	ite	eq
 801ac9e:	2301      	moveq	r3, #1
 801aca0:	2300      	movne	r3, #0
 801aca2:	b2db      	uxtb	r3, r3
 801aca4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801aca6:	7efb      	ldrb	r3, [r7, #27]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d047      	beq.n	801ad3c <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801acac:	4828      	ldr	r0, [pc, #160]	@ (801ad50 <udp_input+0x378>)
 801acae:	f004 f8dd 	bl	801ee6c <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801acb2:	2108      	movs	r1, #8
 801acb4:	6878      	ldr	r0, [r7, #4]
 801acb6:	f7f8 fff3 	bl	8013ca0 <pbuf_remove_header>
 801acba:	4603      	mov	r3, r0
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d00a      	beq.n	801acd6 <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801acc0:	4b24      	ldr	r3, [pc, #144]	@ (801ad54 <udp_input+0x37c>)
 801acc2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801acc6:	4924      	ldr	r1, [pc, #144]	@ (801ad58 <udp_input+0x380>)
 801acc8:	4824      	ldr	r0, [pc, #144]	@ (801ad5c <udp_input+0x384>)
 801acca:	f004 f85f 	bl	801ed8c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801acce:	6878      	ldr	r0, [r7, #4]
 801acd0:	f7f9 f86c 	bl	8013dac <pbuf_free>
      goto end;
 801acd4:	e035      	b.n	801ad42 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 801acd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d012      	beq.n	801ad02 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801acdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acde:	699b      	ldr	r3, [r3, #24]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d00a      	beq.n	801acfa <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ace6:	699c      	ldr	r4, [r3, #24]
 801ace8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acea:	69d8      	ldr	r0, [r3, #28]
 801acec:	8a3b      	ldrh	r3, [r7, #16]
 801acee:	9300      	str	r3, [sp, #0]
 801acf0:	4b1b      	ldr	r3, [pc, #108]	@ (801ad60 <udp_input+0x388>)
 801acf2:	687a      	ldr	r2, [r7, #4]
 801acf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801acf6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801acf8:	e024      	b.n	801ad44 <udp_input+0x36c>
        pbuf_free(p);
 801acfa:	6878      	ldr	r0, [r7, #4]
 801acfc:	f7f9 f856 	bl	8013dac <pbuf_free>
        goto end;
 801ad00:	e01f      	b.n	801ad42 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 801ad02:	4818      	ldr	r0, [pc, #96]	@ (801ad64 <udp_input+0x38c>)
 801ad04:	f004 f8b2 	bl	801ee6c <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ad08:	7cfb      	ldrb	r3, [r7, #19]
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d112      	bne.n	801ad34 <udp_input+0x35c>
 801ad0e:	4b0f      	ldr	r3, [pc, #60]	@ (801ad4c <udp_input+0x374>)
 801ad10:	695b      	ldr	r3, [r3, #20]
 801ad12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ad16:	2be0      	cmp	r3, #224	@ 0xe0
 801ad18:	d00c      	beq.n	801ad34 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ad1a:	4b0c      	ldr	r3, [pc, #48]	@ (801ad4c <udp_input+0x374>)
 801ad1c:	899b      	ldrh	r3, [r3, #12]
 801ad1e:	3308      	adds	r3, #8
 801ad20:	b29b      	uxth	r3, r3
 801ad22:	b21b      	sxth	r3, r3
 801ad24:	4619      	mov	r1, r3
 801ad26:	6878      	ldr	r0, [r7, #4]
 801ad28:	f7f9 f82d 	bl	8013d86 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ad2c:	2103      	movs	r1, #3
 801ad2e:	6878      	ldr	r0, [r7, #4]
 801ad30:	f001 fdea 	bl	801c908 <icmp_dest_unreach>
      pbuf_free(p);
 801ad34:	6878      	ldr	r0, [r7, #4]
 801ad36:	f7f9 f839 	bl	8013dac <pbuf_free>
  return;
 801ad3a:	e003      	b.n	801ad44 <udp_input+0x36c>
    pbuf_free(p);
 801ad3c:	6878      	ldr	r0, [r7, #4]
 801ad3e:	f7f9 f835 	bl	8013dac <pbuf_free>
  return;
 801ad42:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ad44:	372c      	adds	r7, #44	@ 0x2c
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bd90      	pop	{r4, r7, pc}
 801ad4a:	bf00      	nop
 801ad4c:	2001f65c 	.word	0x2001f65c
 801ad50:	08022f00 	.word	0x08022f00
 801ad54:	08022d8c 	.word	0x08022d8c
 801ad58:	08022f20 	.word	0x08022f20
 801ad5c:	08022de0 	.word	0x08022de0
 801ad60:	2001f66c 	.word	0x2001f66c
 801ad64:	08022f3c 	.word	0x08022f3c

0801ad68 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b082      	sub	sp, #8
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
 801ad70:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d109      	bne.n	801ad8c <udp_send+0x24>
 801ad78:	4b11      	ldr	r3, [pc, #68]	@ (801adc0 <udp_send+0x58>)
 801ad7a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801ad7e:	4911      	ldr	r1, [pc, #68]	@ (801adc4 <udp_send+0x5c>)
 801ad80:	4811      	ldr	r0, [pc, #68]	@ (801adc8 <udp_send+0x60>)
 801ad82:	f004 f803 	bl	801ed8c <iprintf>
 801ad86:	f06f 030f 	mvn.w	r3, #15
 801ad8a:	e015      	b.n	801adb8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801ad8c:	683b      	ldr	r3, [r7, #0]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d109      	bne.n	801ada6 <udp_send+0x3e>
 801ad92:	4b0b      	ldr	r3, [pc, #44]	@ (801adc0 <udp_send+0x58>)
 801ad94:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801ad98:	490c      	ldr	r1, [pc, #48]	@ (801adcc <udp_send+0x64>)
 801ad9a:	480b      	ldr	r0, [pc, #44]	@ (801adc8 <udp_send+0x60>)
 801ad9c:	f003 fff6 	bl	801ed8c <iprintf>
 801ada0:	f06f 030f 	mvn.w	r3, #15
 801ada4:	e008      	b.n	801adb8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	1d1a      	adds	r2, r3, #4
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	8a9b      	ldrh	r3, [r3, #20]
 801adae:	6839      	ldr	r1, [r7, #0]
 801adb0:	6878      	ldr	r0, [r7, #4]
 801adb2:	f000 f80d 	bl	801add0 <udp_sendto>
 801adb6:	4603      	mov	r3, r0
}
 801adb8:	4618      	mov	r0, r3
 801adba:	3708      	adds	r7, #8
 801adbc:	46bd      	mov	sp, r7
 801adbe:	bd80      	pop	{r7, pc}
 801adc0:	08022d8c 	.word	0x08022d8c
 801adc4:	08022f54 	.word	0x08022f54
 801adc8:	08022de0 	.word	0x08022de0
 801adcc:	08022f6c 	.word	0x08022f6c

0801add0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801add0:	b580      	push	{r7, lr}
 801add2:	b088      	sub	sp, #32
 801add4:	af02      	add	r7, sp, #8
 801add6:	60f8      	str	r0, [r7, #12]
 801add8:	60b9      	str	r1, [r7, #8]
 801adda:	607a      	str	r2, [r7, #4]
 801addc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d109      	bne.n	801adf8 <udp_sendto+0x28>
 801ade4:	4b3b      	ldr	r3, [pc, #236]	@ (801aed4 <udp_sendto+0x104>)
 801ade6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801adea:	493b      	ldr	r1, [pc, #236]	@ (801aed8 <udp_sendto+0x108>)
 801adec:	483b      	ldr	r0, [pc, #236]	@ (801aedc <udp_sendto+0x10c>)
 801adee:	f003 ffcd 	bl	801ed8c <iprintf>
 801adf2:	f06f 030f 	mvn.w	r3, #15
 801adf6:	e068      	b.n	801aeca <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801adf8:	68bb      	ldr	r3, [r7, #8]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d109      	bne.n	801ae12 <udp_sendto+0x42>
 801adfe:	4b35      	ldr	r3, [pc, #212]	@ (801aed4 <udp_sendto+0x104>)
 801ae00:	f240 2219 	movw	r2, #537	@ 0x219
 801ae04:	4936      	ldr	r1, [pc, #216]	@ (801aee0 <udp_sendto+0x110>)
 801ae06:	4835      	ldr	r0, [pc, #212]	@ (801aedc <udp_sendto+0x10c>)
 801ae08:	f003 ffc0 	bl	801ed8c <iprintf>
 801ae0c:	f06f 030f 	mvn.w	r3, #15
 801ae10:	e05b      	b.n	801aeca <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d109      	bne.n	801ae2c <udp_sendto+0x5c>
 801ae18:	4b2e      	ldr	r3, [pc, #184]	@ (801aed4 <udp_sendto+0x104>)
 801ae1a:	f240 221a 	movw	r2, #538	@ 0x21a
 801ae1e:	4931      	ldr	r1, [pc, #196]	@ (801aee4 <udp_sendto+0x114>)
 801ae20:	482e      	ldr	r0, [pc, #184]	@ (801aedc <udp_sendto+0x10c>)
 801ae22:	f003 ffb3 	bl	801ed8c <iprintf>
 801ae26:	f06f 030f 	mvn.w	r3, #15
 801ae2a:	e04e      	b.n	801aeca <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 801ae2c:	482e      	ldr	r0, [pc, #184]	@ (801aee8 <udp_sendto+0x118>)
 801ae2e:	f004 f81d 	bl	801ee6c <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	7a1b      	ldrb	r3, [r3, #8]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d006      	beq.n	801ae48 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	7a1b      	ldrb	r3, [r3, #8]
 801ae3e:	4618      	mov	r0, r3
 801ae40:	f7f8 fc26 	bl	8013690 <netif_get_by_index>
 801ae44:	6178      	str	r0, [r7, #20]
 801ae46:	e003      	b.n	801ae50 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801ae48:	6878      	ldr	r0, [r7, #4]
 801ae4a:	f001 fe27 	bl	801ca9c <ip4_route>
 801ae4e:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801ae50:	697b      	ldr	r3, [r7, #20]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d12f      	bne.n	801aeb6 <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 801ae56:	4825      	ldr	r0, [pc, #148]	@ (801aeec <udp_sendto+0x11c>)
 801ae58:	f003 ff98 	bl	801ed8c <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d003      	beq.n	801ae6a <udp_sendto+0x9a>
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	781b      	ldrb	r3, [r3, #0]
 801ae66:	4619      	mov	r1, r3
 801ae68:	e000      	b.n	801ae6c <udp_sendto+0x9c>
 801ae6a:	2100      	movs	r1, #0
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d004      	beq.n	801ae7c <udp_sendto+0xac>
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	3301      	adds	r3, #1
 801ae76:	781b      	ldrb	r3, [r3, #0]
 801ae78:	461a      	mov	r2, r3
 801ae7a:	e000      	b.n	801ae7e <udp_sendto+0xae>
 801ae7c:	2200      	movs	r2, #0
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d004      	beq.n	801ae8e <udp_sendto+0xbe>
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	3302      	adds	r3, #2
 801ae88:	781b      	ldrb	r3, [r3, #0]
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	e000      	b.n	801ae90 <udp_sendto+0xc0>
 801ae8e:	2000      	movs	r0, #0
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	d003      	beq.n	801ae9e <udp_sendto+0xce>
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	3303      	adds	r3, #3
 801ae9a:	781b      	ldrb	r3, [r3, #0]
 801ae9c:	e000      	b.n	801aea0 <udp_sendto+0xd0>
 801ae9e:	2300      	movs	r3, #0
 801aea0:	9300      	str	r3, [sp, #0]
 801aea2:	4603      	mov	r3, r0
 801aea4:	4812      	ldr	r0, [pc, #72]	@ (801aef0 <udp_sendto+0x120>)
 801aea6:	f003 ff71 	bl	801ed8c <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 801aeaa:	200a      	movs	r0, #10
 801aeac:	f003 ff80 	bl	801edb0 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801aeb0:	f06f 0303 	mvn.w	r3, #3
 801aeb4:	e009      	b.n	801aeca <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801aeb6:	887a      	ldrh	r2, [r7, #2]
 801aeb8:	697b      	ldr	r3, [r7, #20]
 801aeba:	9300      	str	r3, [sp, #0]
 801aebc:	4613      	mov	r3, r2
 801aebe:	687a      	ldr	r2, [r7, #4]
 801aec0:	68b9      	ldr	r1, [r7, #8]
 801aec2:	68f8      	ldr	r0, [r7, #12]
 801aec4:	f000 f816 	bl	801aef4 <udp_sendto_if>
 801aec8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801aeca:	4618      	mov	r0, r3
 801aecc:	3718      	adds	r7, #24
 801aece:	46bd      	mov	sp, r7
 801aed0:	bd80      	pop	{r7, pc}
 801aed2:	bf00      	nop
 801aed4:	08022d8c 	.word	0x08022d8c
 801aed8:	08022f84 	.word	0x08022f84
 801aedc:	08022de0 	.word	0x08022de0
 801aee0:	08022f9c 	.word	0x08022f9c
 801aee4:	08022fb8 	.word	0x08022fb8
 801aee8:	08022fd4 	.word	0x08022fd4
 801aeec:	08022fe0 	.word	0x08022fe0
 801aef0:	08022ed0 	.word	0x08022ed0

0801aef4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b088      	sub	sp, #32
 801aef8:	af02      	add	r7, sp, #8
 801aefa:	60f8      	str	r0, [r7, #12]
 801aefc:	60b9      	str	r1, [r7, #8]
 801aefe:	607a      	str	r2, [r7, #4]
 801af00:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801af02:	68fb      	ldr	r3, [r7, #12]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d109      	bne.n	801af1c <udp_sendto_if+0x28>
 801af08:	4b2e      	ldr	r3, [pc, #184]	@ (801afc4 <udp_sendto_if+0xd0>)
 801af0a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801af0e:	492e      	ldr	r1, [pc, #184]	@ (801afc8 <udp_sendto_if+0xd4>)
 801af10:	482e      	ldr	r0, [pc, #184]	@ (801afcc <udp_sendto_if+0xd8>)
 801af12:	f003 ff3b 	bl	801ed8c <iprintf>
 801af16:	f06f 030f 	mvn.w	r3, #15
 801af1a:	e04f      	b.n	801afbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801af1c:	68bb      	ldr	r3, [r7, #8]
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d109      	bne.n	801af36 <udp_sendto_if+0x42>
 801af22:	4b28      	ldr	r3, [pc, #160]	@ (801afc4 <udp_sendto_if+0xd0>)
 801af24:	f240 2281 	movw	r2, #641	@ 0x281
 801af28:	4929      	ldr	r1, [pc, #164]	@ (801afd0 <udp_sendto_if+0xdc>)
 801af2a:	4828      	ldr	r0, [pc, #160]	@ (801afcc <udp_sendto_if+0xd8>)
 801af2c:	f003 ff2e 	bl	801ed8c <iprintf>
 801af30:	f06f 030f 	mvn.w	r3, #15
 801af34:	e042      	b.n	801afbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d109      	bne.n	801af50 <udp_sendto_if+0x5c>
 801af3c:	4b21      	ldr	r3, [pc, #132]	@ (801afc4 <udp_sendto_if+0xd0>)
 801af3e:	f240 2282 	movw	r2, #642	@ 0x282
 801af42:	4924      	ldr	r1, [pc, #144]	@ (801afd4 <udp_sendto_if+0xe0>)
 801af44:	4821      	ldr	r0, [pc, #132]	@ (801afcc <udp_sendto_if+0xd8>)
 801af46:	f003 ff21 	bl	801ed8c <iprintf>
 801af4a:	f06f 030f 	mvn.w	r3, #15
 801af4e:	e035      	b.n	801afbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801af50:	6a3b      	ldr	r3, [r7, #32]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d109      	bne.n	801af6a <udp_sendto_if+0x76>
 801af56:	4b1b      	ldr	r3, [pc, #108]	@ (801afc4 <udp_sendto_if+0xd0>)
 801af58:	f240 2283 	movw	r2, #643	@ 0x283
 801af5c:	491e      	ldr	r1, [pc, #120]	@ (801afd8 <udp_sendto_if+0xe4>)
 801af5e:	481b      	ldr	r0, [pc, #108]	@ (801afcc <udp_sendto_if+0xd8>)
 801af60:	f003 ff14 	bl	801ed8c <iprintf>
 801af64:	f06f 030f 	mvn.w	r3, #15
 801af68:	e028      	b.n	801afbc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d009      	beq.n	801af84 <udp_sendto_if+0x90>
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d005      	beq.n	801af84 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af80:	2be0      	cmp	r3, #224	@ 0xe0
 801af82:	d103      	bne.n	801af8c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801af84:	6a3b      	ldr	r3, [r7, #32]
 801af86:	3304      	adds	r3, #4
 801af88:	617b      	str	r3, [r7, #20]
 801af8a:	e00b      	b.n	801afa4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	681a      	ldr	r2, [r3, #0]
 801af90:	6a3b      	ldr	r3, [r7, #32]
 801af92:	3304      	adds	r3, #4
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	429a      	cmp	r2, r3
 801af98:	d002      	beq.n	801afa0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801af9a:	f06f 0303 	mvn.w	r3, #3
 801af9e:	e00d      	b.n	801afbc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801afa4:	887a      	ldrh	r2, [r7, #2]
 801afa6:	697b      	ldr	r3, [r7, #20]
 801afa8:	9301      	str	r3, [sp, #4]
 801afaa:	6a3b      	ldr	r3, [r7, #32]
 801afac:	9300      	str	r3, [sp, #0]
 801afae:	4613      	mov	r3, r2
 801afb0:	687a      	ldr	r2, [r7, #4]
 801afb2:	68b9      	ldr	r1, [r7, #8]
 801afb4:	68f8      	ldr	r0, [r7, #12]
 801afb6:	f000 f811 	bl	801afdc <udp_sendto_if_src>
 801afba:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801afbc:	4618      	mov	r0, r3
 801afbe:	3718      	adds	r7, #24
 801afc0:	46bd      	mov	sp, r7
 801afc2:	bd80      	pop	{r7, pc}
 801afc4:	08022d8c 	.word	0x08022d8c
 801afc8:	08022ff8 	.word	0x08022ff8
 801afcc:	08022de0 	.word	0x08022de0
 801afd0:	08023014 	.word	0x08023014
 801afd4:	08023030 	.word	0x08023030
 801afd8:	08023050 	.word	0x08023050

0801afdc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801afdc:	b580      	push	{r7, lr}
 801afde:	b08c      	sub	sp, #48	@ 0x30
 801afe0:	af04      	add	r7, sp, #16
 801afe2:	60f8      	str	r0, [r7, #12]
 801afe4:	60b9      	str	r1, [r7, #8]
 801afe6:	607a      	str	r2, [r7, #4]
 801afe8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d109      	bne.n	801b004 <udp_sendto_if_src+0x28>
 801aff0:	4b7a      	ldr	r3, [pc, #488]	@ (801b1dc <udp_sendto_if_src+0x200>)
 801aff2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801aff6:	497a      	ldr	r1, [pc, #488]	@ (801b1e0 <udp_sendto_if_src+0x204>)
 801aff8:	487a      	ldr	r0, [pc, #488]	@ (801b1e4 <udp_sendto_if_src+0x208>)
 801affa:	f003 fec7 	bl	801ed8c <iprintf>
 801affe:	f06f 030f 	mvn.w	r3, #15
 801b002:	e0e6      	b.n	801b1d2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b004:	68bb      	ldr	r3, [r7, #8]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d109      	bne.n	801b01e <udp_sendto_if_src+0x42>
 801b00a:	4b74      	ldr	r3, [pc, #464]	@ (801b1dc <udp_sendto_if_src+0x200>)
 801b00c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801b010:	4975      	ldr	r1, [pc, #468]	@ (801b1e8 <udp_sendto_if_src+0x20c>)
 801b012:	4874      	ldr	r0, [pc, #464]	@ (801b1e4 <udp_sendto_if_src+0x208>)
 801b014:	f003 feba 	bl	801ed8c <iprintf>
 801b018:	f06f 030f 	mvn.w	r3, #15
 801b01c:	e0d9      	b.n	801b1d2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	2b00      	cmp	r3, #0
 801b022:	d109      	bne.n	801b038 <udp_sendto_if_src+0x5c>
 801b024:	4b6d      	ldr	r3, [pc, #436]	@ (801b1dc <udp_sendto_if_src+0x200>)
 801b026:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801b02a:	4970      	ldr	r1, [pc, #448]	@ (801b1ec <udp_sendto_if_src+0x210>)
 801b02c:	486d      	ldr	r0, [pc, #436]	@ (801b1e4 <udp_sendto_if_src+0x208>)
 801b02e:	f003 fead 	bl	801ed8c <iprintf>
 801b032:	f06f 030f 	mvn.w	r3, #15
 801b036:	e0cc      	b.n	801b1d2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d109      	bne.n	801b052 <udp_sendto_if_src+0x76>
 801b03e:	4b67      	ldr	r3, [pc, #412]	@ (801b1dc <udp_sendto_if_src+0x200>)
 801b040:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801b044:	496a      	ldr	r1, [pc, #424]	@ (801b1f0 <udp_sendto_if_src+0x214>)
 801b046:	4867      	ldr	r0, [pc, #412]	@ (801b1e4 <udp_sendto_if_src+0x208>)
 801b048:	f003 fea0 	bl	801ed8c <iprintf>
 801b04c:	f06f 030f 	mvn.w	r3, #15
 801b050:	e0bf      	b.n	801b1d2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b054:	2b00      	cmp	r3, #0
 801b056:	d109      	bne.n	801b06c <udp_sendto_if_src+0x90>
 801b058:	4b60      	ldr	r3, [pc, #384]	@ (801b1dc <udp_sendto_if_src+0x200>)
 801b05a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801b05e:	4965      	ldr	r1, [pc, #404]	@ (801b1f4 <udp_sendto_if_src+0x218>)
 801b060:	4860      	ldr	r0, [pc, #384]	@ (801b1e4 <udp_sendto_if_src+0x208>)
 801b062:	f003 fe93 	bl	801ed8c <iprintf>
 801b066:	f06f 030f 	mvn.w	r3, #15
 801b06a:	e0b2      	b.n	801b1d2 <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	8a5b      	ldrh	r3, [r3, #18]
 801b070:	2b00      	cmp	r3, #0
 801b072:	d115      	bne.n	801b0a0 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801b074:	4860      	ldr	r0, [pc, #384]	@ (801b1f8 <udp_sendto_if_src+0x21c>)
 801b076:	f003 fef9 	bl	801ee6c <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b07a:	68f9      	ldr	r1, [r7, #12]
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	8a5b      	ldrh	r3, [r3, #18]
 801b080:	461a      	mov	r2, r3
 801b082:	68f8      	ldr	r0, [r7, #12]
 801b084:	f000 f8cc 	bl	801b220 <udp_bind>
 801b088:	4603      	mov	r3, r0
 801b08a:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b08c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b090:	2b00      	cmp	r3, #0
 801b092:	d005      	beq.n	801b0a0 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 801b094:	4859      	ldr	r0, [pc, #356]	@ (801b1fc <udp_sendto_if_src+0x220>)
 801b096:	f003 fee9 	bl	801ee6c <puts>
      return err;
 801b09a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b09e:	e098      	b.n	801b1d2 <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b0a0:	68bb      	ldr	r3, [r7, #8]
 801b0a2:	891b      	ldrh	r3, [r3, #8]
 801b0a4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801b0a8:	4293      	cmp	r3, r2
 801b0aa:	d902      	bls.n	801b0b2 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 801b0ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b0b0:	e08f      	b.n	801b1d2 <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b0b2:	2108      	movs	r1, #8
 801b0b4:	68b8      	ldr	r0, [r7, #8]
 801b0b6:	f7f8 fde3 	bl	8013c80 <pbuf_add_header>
 801b0ba:	4603      	mov	r3, r0
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d01d      	beq.n	801b0fc <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b0c0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b0c4:	2108      	movs	r1, #8
 801b0c6:	2022      	movs	r0, #34	@ 0x22
 801b0c8:	f7f8 fb8c 	bl	80137e4 <pbuf_alloc>
 801b0cc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b0ce:	69fb      	ldr	r3, [r7, #28]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d105      	bne.n	801b0e0 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 801b0d4:	484a      	ldr	r0, [pc, #296]	@ (801b200 <udp_sendto_if_src+0x224>)
 801b0d6:	f003 fec9 	bl	801ee6c <puts>
      return ERR_MEM;
 801b0da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b0de:	e078      	b.n	801b1d2 <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	891b      	ldrh	r3, [r3, #8]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d003      	beq.n	801b0f0 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b0e8:	68b9      	ldr	r1, [r7, #8]
 801b0ea:	69f8      	ldr	r0, [r7, #28]
 801b0ec:	f7f8 ff82 	bl	8013ff4 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 801b0f0:	68ba      	ldr	r2, [r7, #8]
 801b0f2:	69f9      	ldr	r1, [r7, #28]
 801b0f4:	4843      	ldr	r0, [pc, #268]	@ (801b204 <udp_sendto_if_src+0x228>)
 801b0f6:	f003 fe49 	bl	801ed8c <iprintf>
 801b0fa:	e005      	b.n	801b108 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b0fc:	68bb      	ldr	r3, [r7, #8]
 801b0fe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 801b100:	68b9      	ldr	r1, [r7, #8]
 801b102:	4841      	ldr	r0, [pc, #260]	@ (801b208 <udp_sendto_if_src+0x22c>)
 801b104:	f003 fe42 	bl	801ed8c <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b108:	69fb      	ldr	r3, [r7, #28]
 801b10a:	895b      	ldrh	r3, [r3, #10]
 801b10c:	2b07      	cmp	r3, #7
 801b10e:	d806      	bhi.n	801b11e <udp_sendto_if_src+0x142>
 801b110:	4b32      	ldr	r3, [pc, #200]	@ (801b1dc <udp_sendto_if_src+0x200>)
 801b112:	f240 320d 	movw	r2, #781	@ 0x30d
 801b116:	493d      	ldr	r1, [pc, #244]	@ (801b20c <udp_sendto_if_src+0x230>)
 801b118:	4832      	ldr	r0, [pc, #200]	@ (801b1e4 <udp_sendto_if_src+0x208>)
 801b11a:	f003 fe37 	bl	801ed8c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b11e:	69fb      	ldr	r3, [r7, #28]
 801b120:	685b      	ldr	r3, [r3, #4]
 801b122:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	8a5b      	ldrh	r3, [r3, #18]
 801b128:	4618      	mov	r0, r3
 801b12a:	f7f7 f95b 	bl	80123e4 <lwip_htons>
 801b12e:	4603      	mov	r3, r0
 801b130:	461a      	mov	r2, r3
 801b132:	697b      	ldr	r3, [r7, #20]
 801b134:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b136:	887b      	ldrh	r3, [r7, #2]
 801b138:	4618      	mov	r0, r3
 801b13a:	f7f7 f953 	bl	80123e4 <lwip_htons>
 801b13e:	4603      	mov	r3, r0
 801b140:	461a      	mov	r2, r3
 801b142:	697b      	ldr	r3, [r7, #20]
 801b144:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b146:	697b      	ldr	r3, [r7, #20]
 801b148:	2200      	movs	r2, #0
 801b14a:	719a      	strb	r2, [r3, #6]
 801b14c:	2200      	movs	r2, #0
 801b14e:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801b150:	69fb      	ldr	r3, [r7, #28]
 801b152:	891b      	ldrh	r3, [r3, #8]
 801b154:	4619      	mov	r1, r3
 801b156:	482e      	ldr	r0, [pc, #184]	@ (801b210 <udp_sendto_if_src+0x234>)
 801b158:	f003 fe18 	bl	801ed8c <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801b15c:	69fb      	ldr	r3, [r7, #28]
 801b15e:	891b      	ldrh	r3, [r3, #8]
 801b160:	4619      	mov	r1, r3
 801b162:	482c      	ldr	r0, [pc, #176]	@ (801b214 <udp_sendto_if_src+0x238>)
 801b164:	f003 fe12 	bl	801ed8c <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 801b168:	69fb      	ldr	r3, [r7, #28]
 801b16a:	891b      	ldrh	r3, [r3, #8]
 801b16c:	4618      	mov	r0, r3
 801b16e:	f7f7 f939 	bl	80123e4 <lwip_htons>
 801b172:	4603      	mov	r3, r0
 801b174:	461a      	mov	r2, r3
 801b176:	697b      	ldr	r3, [r7, #20]
 801b178:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b17a:	2311      	movs	r3, #17
 801b17c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	7adb      	ldrb	r3, [r3, #11]
 801b182:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 801b184:	697b      	ldr	r3, [r7, #20]
 801b186:	88db      	ldrh	r3, [r3, #6]
 801b188:	b29b      	uxth	r3, r3
 801b18a:	4619      	mov	r1, r3
 801b18c:	4822      	ldr	r0, [pc, #136]	@ (801b218 <udp_sendto_if_src+0x23c>)
 801b18e:	f003 fdfd 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801b192:	7cfb      	ldrb	r3, [r7, #19]
 801b194:	4619      	mov	r1, r3
 801b196:	4821      	ldr	r0, [pc, #132]	@ (801b21c <udp_sendto_if_src+0x240>)
 801b198:	f003 fdf8 	bl	801ed8c <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	7a9b      	ldrb	r3, [r3, #10]
 801b1a0:	7cb9      	ldrb	r1, [r7, #18]
 801b1a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b1a4:	9202      	str	r2, [sp, #8]
 801b1a6:	7cfa      	ldrb	r2, [r7, #19]
 801b1a8:	9201      	str	r2, [sp, #4]
 801b1aa:	9300      	str	r3, [sp, #0]
 801b1ac:	460b      	mov	r3, r1
 801b1ae:	687a      	ldr	r2, [r7, #4]
 801b1b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b1b2:	69f8      	ldr	r0, [r7, #28]
 801b1b4:	f001 fe5a 	bl	801ce6c <ip4_output_if_src>
 801b1b8:	4603      	mov	r3, r0
 801b1ba:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b1bc:	69fa      	ldr	r2, [r7, #28]
 801b1be:	68bb      	ldr	r3, [r7, #8]
 801b1c0:	429a      	cmp	r2, r3
 801b1c2:	d004      	beq.n	801b1ce <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 801b1c4:	69f8      	ldr	r0, [r7, #28]
 801b1c6:	f7f8 fdf1 	bl	8013dac <pbuf_free>
    q = NULL;
 801b1ca:	2300      	movs	r3, #0
 801b1cc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b1ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	3720      	adds	r7, #32
 801b1d6:	46bd      	mov	sp, r7
 801b1d8:	bd80      	pop	{r7, pc}
 801b1da:	bf00      	nop
 801b1dc:	08022d8c 	.word	0x08022d8c
 801b1e0:	08023070 	.word	0x08023070
 801b1e4:	08022de0 	.word	0x08022de0
 801b1e8:	08023090 	.word	0x08023090
 801b1ec:	080230b0 	.word	0x080230b0
 801b1f0:	080230d4 	.word	0x080230d4
 801b1f4:	080230f8 	.word	0x080230f8
 801b1f8:	0802311c 	.word	0x0802311c
 801b1fc:	0802314c 	.word	0x0802314c
 801b200:	08023170 	.word	0x08023170
 801b204:	08023194 	.word	0x08023194
 801b208:	080231cc 	.word	0x080231cc
 801b20c:	080231f8 	.word	0x080231f8
 801b210:	08023228 	.word	0x08023228
 801b214:	08023254 	.word	0x08023254
 801b218:	08023278 	.word	0x08023278
 801b21c:	08023298 	.word	0x08023298

0801b220 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b220:	b580      	push	{r7, lr}
 801b222:	b088      	sub	sp, #32
 801b224:	af02      	add	r7, sp, #8
 801b226:	60f8      	str	r0, [r7, #12]
 801b228:	60b9      	str	r1, [r7, #8]
 801b22a:	4613      	mov	r3, r2
 801b22c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b22e:	68bb      	ldr	r3, [r7, #8]
 801b230:	2b00      	cmp	r3, #0
 801b232:	d101      	bne.n	801b238 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b234:	4b65      	ldr	r3, [pc, #404]	@ (801b3cc <udp_bind+0x1ac>)
 801b236:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d109      	bne.n	801b252 <udp_bind+0x32>
 801b23e:	4b64      	ldr	r3, [pc, #400]	@ (801b3d0 <udp_bind+0x1b0>)
 801b240:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801b244:	4963      	ldr	r1, [pc, #396]	@ (801b3d4 <udp_bind+0x1b4>)
 801b246:	4864      	ldr	r0, [pc, #400]	@ (801b3d8 <udp_bind+0x1b8>)
 801b248:	f003 fda0 	bl	801ed8c <iprintf>
 801b24c:	f06f 030f 	mvn.w	r3, #15
 801b250:	e0b7      	b.n	801b3c2 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801b252:	4862      	ldr	r0, [pc, #392]	@ (801b3dc <udp_bind+0x1bc>)
 801b254:	f003 fd9a 	bl	801ed8c <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 801b258:	68bb      	ldr	r3, [r7, #8]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d003      	beq.n	801b266 <udp_bind+0x46>
 801b25e:	68bb      	ldr	r3, [r7, #8]
 801b260:	781b      	ldrb	r3, [r3, #0]
 801b262:	4619      	mov	r1, r3
 801b264:	e000      	b.n	801b268 <udp_bind+0x48>
 801b266:	2100      	movs	r1, #0
 801b268:	68bb      	ldr	r3, [r7, #8]
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d004      	beq.n	801b278 <udp_bind+0x58>
 801b26e:	68bb      	ldr	r3, [r7, #8]
 801b270:	3301      	adds	r3, #1
 801b272:	781b      	ldrb	r3, [r3, #0]
 801b274:	461a      	mov	r2, r3
 801b276:	e000      	b.n	801b27a <udp_bind+0x5a>
 801b278:	2200      	movs	r2, #0
 801b27a:	68bb      	ldr	r3, [r7, #8]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d004      	beq.n	801b28a <udp_bind+0x6a>
 801b280:	68bb      	ldr	r3, [r7, #8]
 801b282:	3302      	adds	r3, #2
 801b284:	781b      	ldrb	r3, [r3, #0]
 801b286:	4618      	mov	r0, r3
 801b288:	e000      	b.n	801b28c <udp_bind+0x6c>
 801b28a:	2000      	movs	r0, #0
 801b28c:	68bb      	ldr	r3, [r7, #8]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d003      	beq.n	801b29a <udp_bind+0x7a>
 801b292:	68bb      	ldr	r3, [r7, #8]
 801b294:	3303      	adds	r3, #3
 801b296:	781b      	ldrb	r3, [r3, #0]
 801b298:	e000      	b.n	801b29c <udp_bind+0x7c>
 801b29a:	2300      	movs	r3, #0
 801b29c:	9300      	str	r3, [sp, #0]
 801b29e:	4603      	mov	r3, r0
 801b2a0:	484f      	ldr	r0, [pc, #316]	@ (801b3e0 <udp_bind+0x1c0>)
 801b2a2:	f003 fd73 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 801b2a6:	88fb      	ldrh	r3, [r7, #6]
 801b2a8:	4619      	mov	r1, r3
 801b2aa:	484e      	ldr	r0, [pc, #312]	@ (801b3e4 <udp_bind+0x1c4>)
 801b2ac:	f003 fd6e 	bl	801ed8c <iprintf>

  rebind = 0;
 801b2b0:	2300      	movs	r3, #0
 801b2b2:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b2b4:	4b4c      	ldr	r3, [pc, #304]	@ (801b3e8 <udp_bind+0x1c8>)
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	617b      	str	r3, [r7, #20]
 801b2ba:	e009      	b.n	801b2d0 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b2bc:	68fa      	ldr	r2, [r7, #12]
 801b2be:	697b      	ldr	r3, [r7, #20]
 801b2c0:	429a      	cmp	r2, r3
 801b2c2:	d102      	bne.n	801b2ca <udp_bind+0xaa>
      rebind = 1;
 801b2c4:	2301      	movs	r3, #1
 801b2c6:	74fb      	strb	r3, [r7, #19]
      break;
 801b2c8:	e005      	b.n	801b2d6 <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b2ca:	697b      	ldr	r3, [r7, #20]
 801b2cc:	68db      	ldr	r3, [r3, #12]
 801b2ce:	617b      	str	r3, [r7, #20]
 801b2d0:	697b      	ldr	r3, [r7, #20]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d1f2      	bne.n	801b2bc <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b2d6:	88fb      	ldrh	r3, [r7, #6]
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	d10c      	bne.n	801b2f6 <udp_bind+0xd6>
    port = udp_new_port();
 801b2dc:	f7ff fae0 	bl	801a8a0 <udp_new_port>
 801b2e0:	4603      	mov	r3, r0
 801b2e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b2e4:	88fb      	ldrh	r3, [r7, #6]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d134      	bne.n	801b354 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 801b2ea:	4840      	ldr	r0, [pc, #256]	@ (801b3ec <udp_bind+0x1cc>)
 801b2ec:	f003 fdbe 	bl	801ee6c <puts>
      return ERR_USE;
 801b2f0:	f06f 0307 	mvn.w	r3, #7
 801b2f4:	e065      	b.n	801b3c2 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b2f6:	4b3c      	ldr	r3, [pc, #240]	@ (801b3e8 <udp_bind+0x1c8>)
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	617b      	str	r3, [r7, #20]
 801b2fc:	e027      	b.n	801b34e <udp_bind+0x12e>
      if (pcb != ipcb) {
 801b2fe:	68fa      	ldr	r2, [r7, #12]
 801b300:	697b      	ldr	r3, [r7, #20]
 801b302:	429a      	cmp	r2, r3
 801b304:	d020      	beq.n	801b348 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b306:	697b      	ldr	r3, [r7, #20]
 801b308:	8a5b      	ldrh	r3, [r3, #18]
 801b30a:	88fa      	ldrh	r2, [r7, #6]
 801b30c:	429a      	cmp	r2, r3
 801b30e:	d11b      	bne.n	801b348 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b310:	697b      	ldr	r3, [r7, #20]
 801b312:	681a      	ldr	r2, [r3, #0]
 801b314:	68bb      	ldr	r3, [r7, #8]
 801b316:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b318:	429a      	cmp	r2, r3
 801b31a:	d00d      	beq.n	801b338 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b31c:	68bb      	ldr	r3, [r7, #8]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d00a      	beq.n	801b338 <udp_bind+0x118>
 801b322:	68bb      	ldr	r3, [r7, #8]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d006      	beq.n	801b338 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801b32a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d003      	beq.n	801b338 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801b330:	697b      	ldr	r3, [r7, #20]
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d107      	bne.n	801b348 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 801b338:	88fb      	ldrh	r3, [r7, #6]
 801b33a:	4619      	mov	r1, r3
 801b33c:	482c      	ldr	r0, [pc, #176]	@ (801b3f0 <udp_bind+0x1d0>)
 801b33e:	f003 fd25 	bl	801ed8c <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b342:	f06f 0307 	mvn.w	r3, #7
 801b346:	e03c      	b.n	801b3c2 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b348:	697b      	ldr	r3, [r7, #20]
 801b34a:	68db      	ldr	r3, [r3, #12]
 801b34c:	617b      	str	r3, [r7, #20]
 801b34e:	697b      	ldr	r3, [r7, #20]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d1d4      	bne.n	801b2fe <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b354:	68bb      	ldr	r3, [r7, #8]
 801b356:	2b00      	cmp	r3, #0
 801b358:	d002      	beq.n	801b360 <udp_bind+0x140>
 801b35a:	68bb      	ldr	r3, [r7, #8]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	e000      	b.n	801b362 <udp_bind+0x142>
 801b360:	2300      	movs	r3, #0
 801b362:	68fa      	ldr	r2, [r7, #12]
 801b364:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	88fa      	ldrh	r2, [r7, #6]
 801b36a:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b36c:	7cfb      	ldrb	r3, [r7, #19]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d106      	bne.n	801b380 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b372:	4b1d      	ldr	r3, [pc, #116]	@ (801b3e8 <udp_bind+0x1c8>)
 801b374:	681a      	ldr	r2, [r3, #0]
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b37a:	4a1b      	ldr	r2, [pc, #108]	@ (801b3e8 <udp_bind+0x1c8>)
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 801b380:	481c      	ldr	r0, [pc, #112]	@ (801b3f4 <udp_bind+0x1d4>)
 801b382:	f003 fd03 	bl	801ed8c <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 801b386:	68fb      	ldr	r3, [r7, #12]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	b2db      	uxtb	r3, r3
 801b38c:	4619      	mov	r1, r3
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	0a1b      	lsrs	r3, r3, #8
 801b394:	b2db      	uxtb	r3, r3
 801b396:	461a      	mov	r2, r3
 801b398:	68fb      	ldr	r3, [r7, #12]
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	0c1b      	lsrs	r3, r3, #16
 801b39e:	b2db      	uxtb	r3, r3
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	68fb      	ldr	r3, [r7, #12]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	0e1b      	lsrs	r3, r3, #24
 801b3a8:	b2db      	uxtb	r3, r3
 801b3aa:	9300      	str	r3, [sp, #0]
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	480c      	ldr	r0, [pc, #48]	@ (801b3e0 <udp_bind+0x1c0>)
 801b3b0:	f003 fcec 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	8a5b      	ldrh	r3, [r3, #18]
 801b3b8:	4619      	mov	r1, r3
 801b3ba:	480f      	ldr	r0, [pc, #60]	@ (801b3f8 <udp_bind+0x1d8>)
 801b3bc:	f003 fce6 	bl	801ed8c <iprintf>
  return ERR_OK;
 801b3c0:	2300      	movs	r3, #0
}
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	3718      	adds	r7, #24
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	bd80      	pop	{r7, pc}
 801b3ca:	bf00      	nop
 801b3cc:	08024334 	.word	0x08024334
 801b3d0:	08022d8c 	.word	0x08022d8c
 801b3d4:	080232c0 	.word	0x080232c0
 801b3d8:	08022de0 	.word	0x08022de0
 801b3dc:	080232d8 	.word	0x080232d8
 801b3e0:	08022ed0 	.word	0x08022ed0
 801b3e4:	080232ec 	.word	0x080232ec
 801b3e8:	200227fc 	.word	0x200227fc
 801b3ec:	080232fc 	.word	0x080232fc
 801b3f0:	0802331c 	.word	0x0802331c
 801b3f4:	08023354 	.word	0x08023354
 801b3f8:	08023368 	.word	0x08023368

0801b3fc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b3fc:	b580      	push	{r7, lr}
 801b3fe:	b088      	sub	sp, #32
 801b400:	af02      	add	r7, sp, #8
 801b402:	60f8      	str	r0, [r7, #12]
 801b404:	60b9      	str	r1, [r7, #8]
 801b406:	4613      	mov	r3, r2
 801b408:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d109      	bne.n	801b424 <udp_connect+0x28>
 801b410:	4b3c      	ldr	r3, [pc, #240]	@ (801b504 <udp_connect+0x108>)
 801b412:	f240 4235 	movw	r2, #1077	@ 0x435
 801b416:	493c      	ldr	r1, [pc, #240]	@ (801b508 <udp_connect+0x10c>)
 801b418:	483c      	ldr	r0, [pc, #240]	@ (801b50c <udp_connect+0x110>)
 801b41a:	f003 fcb7 	bl	801ed8c <iprintf>
 801b41e:	f06f 030f 	mvn.w	r3, #15
 801b422:	e06b      	b.n	801b4fc <udp_connect+0x100>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b424:	68bb      	ldr	r3, [r7, #8]
 801b426:	2b00      	cmp	r3, #0
 801b428:	d109      	bne.n	801b43e <udp_connect+0x42>
 801b42a:	4b36      	ldr	r3, [pc, #216]	@ (801b504 <udp_connect+0x108>)
 801b42c:	f240 4236 	movw	r2, #1078	@ 0x436
 801b430:	4937      	ldr	r1, [pc, #220]	@ (801b510 <udp_connect+0x114>)
 801b432:	4836      	ldr	r0, [pc, #216]	@ (801b50c <udp_connect+0x110>)
 801b434:	f003 fcaa 	bl	801ed8c <iprintf>
 801b438:	f06f 030f 	mvn.w	r3, #15
 801b43c:	e05e      	b.n	801b4fc <udp_connect+0x100>

  if (pcb->local_port == 0) {
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	8a5b      	ldrh	r3, [r3, #18]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d10f      	bne.n	801b466 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b446:	68f9      	ldr	r1, [r7, #12]
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	8a5b      	ldrh	r3, [r3, #18]
 801b44c:	461a      	mov	r2, r3
 801b44e:	68f8      	ldr	r0, [r7, #12]
 801b450:	f7ff fee6 	bl	801b220 <udp_bind>
 801b454:	4603      	mov	r3, r0
 801b456:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801b458:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d002      	beq.n	801b466 <udp_connect+0x6a>
      return err;
 801b460:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b464:	e04a      	b.n	801b4fc <udp_connect+0x100>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b466:	68bb      	ldr	r3, [r7, #8]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d002      	beq.n	801b472 <udp_connect+0x76>
 801b46c:	68bb      	ldr	r3, [r7, #8]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	e000      	b.n	801b474 <udp_connect+0x78>
 801b472:	2300      	movs	r3, #0
 801b474:	68fa      	ldr	r2, [r7, #12]
 801b476:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	88fa      	ldrh	r2, [r7, #6]
 801b47c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	7c1b      	ldrb	r3, [r3, #16]
 801b482:	f043 0304 	orr.w	r3, r3, #4
 801b486:	b2da      	uxtb	r2, r3
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 801b48c:	4821      	ldr	r0, [pc, #132]	@ (801b514 <udp_connect+0x118>)
 801b48e:	f003 fc7d 	bl	801ed8c <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	685b      	ldr	r3, [r3, #4]
 801b496:	b2db      	uxtb	r3, r3
 801b498:	4619      	mov	r1, r3
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	685b      	ldr	r3, [r3, #4]
 801b49e:	0a1b      	lsrs	r3, r3, #8
 801b4a0:	b2db      	uxtb	r3, r3
 801b4a2:	461a      	mov	r2, r3
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	685b      	ldr	r3, [r3, #4]
 801b4a8:	0c1b      	lsrs	r3, r3, #16
 801b4aa:	b2db      	uxtb	r3, r3
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	685b      	ldr	r3, [r3, #4]
 801b4b2:	0e1b      	lsrs	r3, r3, #24
 801b4b4:	b2db      	uxtb	r3, r3
 801b4b6:	9300      	str	r3, [sp, #0]
 801b4b8:	4603      	mov	r3, r0
 801b4ba:	4817      	ldr	r0, [pc, #92]	@ (801b518 <udp_connect+0x11c>)
 801b4bc:	f003 fc66 	bl	801ed8c <iprintf>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	8a9b      	ldrh	r3, [r3, #20]
 801b4c4:	4619      	mov	r1, r3
 801b4c6:	4815      	ldr	r0, [pc, #84]	@ (801b51c <udp_connect+0x120>)
 801b4c8:	f003 fc60 	bl	801ed8c <iprintf>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b4cc:	4b14      	ldr	r3, [pc, #80]	@ (801b520 <udp_connect+0x124>)
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	617b      	str	r3, [r7, #20]
 801b4d2:	e008      	b.n	801b4e6 <udp_connect+0xea>
    if (pcb == ipcb) {
 801b4d4:	68fa      	ldr	r2, [r7, #12]
 801b4d6:	697b      	ldr	r3, [r7, #20]
 801b4d8:	429a      	cmp	r2, r3
 801b4da:	d101      	bne.n	801b4e0 <udp_connect+0xe4>
      /* already on the list, just return */
      return ERR_OK;
 801b4dc:	2300      	movs	r3, #0
 801b4de:	e00d      	b.n	801b4fc <udp_connect+0x100>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b4e0:	697b      	ldr	r3, [r7, #20]
 801b4e2:	68db      	ldr	r3, [r3, #12]
 801b4e4:	617b      	str	r3, [r7, #20]
 801b4e6:	697b      	ldr	r3, [r7, #20]
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d1f3      	bne.n	801b4d4 <udp_connect+0xd8>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801b4ec:	4b0c      	ldr	r3, [pc, #48]	@ (801b520 <udp_connect+0x124>)
 801b4ee:	681a      	ldr	r2, [r3, #0]
 801b4f0:	68fb      	ldr	r3, [r7, #12]
 801b4f2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801b4f4:	4a0a      	ldr	r2, [pc, #40]	@ (801b520 <udp_connect+0x124>)
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801b4fa:	2300      	movs	r3, #0
}
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	3718      	adds	r7, #24
 801b500:	46bd      	mov	sp, r7
 801b502:	bd80      	pop	{r7, pc}
 801b504:	08022d8c 	.word	0x08022d8c
 801b508:	08023378 	.word	0x08023378
 801b50c:	08022de0 	.word	0x08022de0
 801b510:	08023394 	.word	0x08023394
 801b514:	080233b0 	.word	0x080233b0
 801b518:	08022ed0 	.word	0x08022ed0
 801b51c:	08023368 	.word	0x08023368
 801b520:	200227fc 	.word	0x200227fc

0801b524 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b082      	sub	sp, #8
 801b528:	af00      	add	r7, sp, #0
 801b52a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d107      	bne.n	801b542 <udp_disconnect+0x1e>
 801b532:	4b0d      	ldr	r3, [pc, #52]	@ (801b568 <udp_disconnect+0x44>)
 801b534:	f240 426a 	movw	r2, #1130	@ 0x46a
 801b538:	490c      	ldr	r1, [pc, #48]	@ (801b56c <udp_disconnect+0x48>)
 801b53a:	480d      	ldr	r0, [pc, #52]	@ (801b570 <udp_disconnect+0x4c>)
 801b53c:	f003 fc26 	bl	801ed8c <iprintf>
 801b540:	e00f      	b.n	801b562 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	2200      	movs	r2, #0
 801b546:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	2200      	movs	r2, #0
 801b54c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	2200      	movs	r2, #0
 801b552:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	7c1b      	ldrb	r3, [r3, #16]
 801b558:	f023 0304 	bic.w	r3, r3, #4
 801b55c:	b2da      	uxtb	r2, r3
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	741a      	strb	r2, [r3, #16]
}
 801b562:	3708      	adds	r7, #8
 801b564:	46bd      	mov	sp, r7
 801b566:	bd80      	pop	{r7, pc}
 801b568:	08022d8c 	.word	0x08022d8c
 801b56c:	080233cc 	.word	0x080233cc
 801b570:	08022de0 	.word	0x08022de0

0801b574 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b574:	b580      	push	{r7, lr}
 801b576:	b084      	sub	sp, #16
 801b578:	af00      	add	r7, sp, #0
 801b57a:	60f8      	str	r0, [r7, #12]
 801b57c:	60b9      	str	r1, [r7, #8]
 801b57e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	2b00      	cmp	r3, #0
 801b584:	d107      	bne.n	801b596 <udp_recv+0x22>
 801b586:	4b08      	ldr	r3, [pc, #32]	@ (801b5a8 <udp_recv+0x34>)
 801b588:	f240 428a 	movw	r2, #1162	@ 0x48a
 801b58c:	4907      	ldr	r1, [pc, #28]	@ (801b5ac <udp_recv+0x38>)
 801b58e:	4808      	ldr	r0, [pc, #32]	@ (801b5b0 <udp_recv+0x3c>)
 801b590:	f003 fbfc 	bl	801ed8c <iprintf>
 801b594:	e005      	b.n	801b5a2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	68ba      	ldr	r2, [r7, #8]
 801b59a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	687a      	ldr	r2, [r7, #4]
 801b5a0:	61da      	str	r2, [r3, #28]
}
 801b5a2:	3710      	adds	r7, #16
 801b5a4:	46bd      	mov	sp, r7
 801b5a6:	bd80      	pop	{r7, pc}
 801b5a8:	08022d8c 	.word	0x08022d8c
 801b5ac:	080233e8 	.word	0x080233e8
 801b5b0:	08022de0 	.word	0x08022de0

0801b5b4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b5b4:	b580      	push	{r7, lr}
 801b5b6:	b084      	sub	sp, #16
 801b5b8:	af00      	add	r7, sp, #0
 801b5ba:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d107      	bne.n	801b5d2 <udp_remove+0x1e>
 801b5c2:	4b19      	ldr	r3, [pc, #100]	@ (801b628 <udp_remove+0x74>)
 801b5c4:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801b5c8:	4918      	ldr	r1, [pc, #96]	@ (801b62c <udp_remove+0x78>)
 801b5ca:	4819      	ldr	r0, [pc, #100]	@ (801b630 <udp_remove+0x7c>)
 801b5cc:	f003 fbde 	bl	801ed8c <iprintf>
 801b5d0:	e026      	b.n	801b620 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b5d2:	4b18      	ldr	r3, [pc, #96]	@ (801b634 <udp_remove+0x80>)
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	687a      	ldr	r2, [r7, #4]
 801b5d8:	429a      	cmp	r2, r3
 801b5da:	d105      	bne.n	801b5e8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b5dc:	4b15      	ldr	r3, [pc, #84]	@ (801b634 <udp_remove+0x80>)
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	68db      	ldr	r3, [r3, #12]
 801b5e2:	4a14      	ldr	r2, [pc, #80]	@ (801b634 <udp_remove+0x80>)
 801b5e4:	6013      	str	r3, [r2, #0]
 801b5e6:	e017      	b.n	801b618 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b5e8:	4b12      	ldr	r3, [pc, #72]	@ (801b634 <udp_remove+0x80>)
 801b5ea:	681b      	ldr	r3, [r3, #0]
 801b5ec:	60fb      	str	r3, [r7, #12]
 801b5ee:	e010      	b.n	801b612 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	68db      	ldr	r3, [r3, #12]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d009      	beq.n	801b60c <udp_remove+0x58>
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	68db      	ldr	r3, [r3, #12]
 801b5fc:	687a      	ldr	r2, [r7, #4]
 801b5fe:	429a      	cmp	r2, r3
 801b600:	d104      	bne.n	801b60c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	68da      	ldr	r2, [r3, #12]
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	60da      	str	r2, [r3, #12]
        break;
 801b60a:	e005      	b.n	801b618 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b60c:	68fb      	ldr	r3, [r7, #12]
 801b60e:	68db      	ldr	r3, [r3, #12]
 801b610:	60fb      	str	r3, [r7, #12]
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d1eb      	bne.n	801b5f0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b618:	6879      	ldr	r1, [r7, #4]
 801b61a:	2000      	movs	r0, #0
 801b61c:	f7f7 fc2c 	bl	8012e78 <memp_free>
}
 801b620:	3710      	adds	r7, #16
 801b622:	46bd      	mov	sp, r7
 801b624:	bd80      	pop	{r7, pc}
 801b626:	bf00      	nop
 801b628:	08022d8c 	.word	0x08022d8c
 801b62c:	08023400 	.word	0x08023400
 801b630:	08022de0 	.word	0x08022de0
 801b634:	200227fc 	.word	0x200227fc

0801b638 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b638:	b580      	push	{r7, lr}
 801b63a:	b082      	sub	sp, #8
 801b63c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b63e:	2000      	movs	r0, #0
 801b640:	f7f7 fba4 	bl	8012d8c <memp_malloc>
 801b644:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d007      	beq.n	801b65c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b64c:	2220      	movs	r2, #32
 801b64e:	2100      	movs	r1, #0
 801b650:	6878      	ldr	r0, [r7, #4]
 801b652:	f003 fcfb 	bl	801f04c <memset>
    pcb->ttl = UDP_TTL;
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	22ff      	movs	r2, #255	@ 0xff
 801b65a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b65c:	687b      	ldr	r3, [r7, #4]
}
 801b65e:	4618      	mov	r0, r3
 801b660:	3708      	adds	r7, #8
 801b662:	46bd      	mov	sp, r7
 801b664:	bd80      	pop	{r7, pc}

0801b666 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b666:	b580      	push	{r7, lr}
 801b668:	b084      	sub	sp, #16
 801b66a:	af00      	add	r7, sp, #0
 801b66c:	4603      	mov	r3, r0
 801b66e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b670:	f7ff ffe2 	bl	801b638 <udp_new>
 801b674:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b676:	68fb      	ldr	r3, [r7, #12]
}
 801b678:	4618      	mov	r0, r3
 801b67a:	3710      	adds	r7, #16
 801b67c:	46bd      	mov	sp, r7
 801b67e:	bd80      	pop	{r7, pc}

0801b680 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b680:	b480      	push	{r7}
 801b682:	b085      	sub	sp, #20
 801b684:	af00      	add	r7, sp, #0
 801b686:	6078      	str	r0, [r7, #4]
 801b688:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d01e      	beq.n	801b6ce <udp_netif_ip_addr_changed+0x4e>
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	2b00      	cmp	r3, #0
 801b696:	d01a      	beq.n	801b6ce <udp_netif_ip_addr_changed+0x4e>
 801b698:	683b      	ldr	r3, [r7, #0]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d017      	beq.n	801b6ce <udp_netif_ip_addr_changed+0x4e>
 801b69e:	683b      	ldr	r3, [r7, #0]
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d013      	beq.n	801b6ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b6a6:	4b0d      	ldr	r3, [pc, #52]	@ (801b6dc <udp_netif_ip_addr_changed+0x5c>)
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	60fb      	str	r3, [r7, #12]
 801b6ac:	e00c      	b.n	801b6c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	681a      	ldr	r2, [r3, #0]
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	429a      	cmp	r2, r3
 801b6b8:	d103      	bne.n	801b6c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	681a      	ldr	r2, [r3, #0]
 801b6be:	68fb      	ldr	r3, [r7, #12]
 801b6c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b6c2:	68fb      	ldr	r3, [r7, #12]
 801b6c4:	68db      	ldr	r3, [r3, #12]
 801b6c6:	60fb      	str	r3, [r7, #12]
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d1ef      	bne.n	801b6ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b6ce:	bf00      	nop
 801b6d0:	3714      	adds	r7, #20
 801b6d2:	46bd      	mov	sp, r7
 801b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d8:	4770      	bx	lr
 801b6da:	bf00      	nop
 801b6dc:	200227fc 	.word	0x200227fc

0801b6e0 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801b6e0:	b590      	push	{r4, r7, lr}
 801b6e2:	b083      	sub	sp, #12
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 801b6e8:	481b      	ldr	r0, [pc, #108]	@ (801b758 <udp_debug_print+0x78>)
 801b6ea:	f003 fbbf 	bl	801ee6c <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801b6ee:	481b      	ldr	r0, [pc, #108]	@ (801b75c <udp_debug_print+0x7c>)
 801b6f0:	f003 fbbc 	bl	801ee6c <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	881b      	ldrh	r3, [r3, #0]
 801b6f8:	b29b      	uxth	r3, r3
 801b6fa:	4618      	mov	r0, r3
 801b6fc:	f7f6 fe72 	bl	80123e4 <lwip_htons>
 801b700:	4603      	mov	r3, r0
 801b702:	461c      	mov	r4, r3
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	885b      	ldrh	r3, [r3, #2]
 801b708:	b29b      	uxth	r3, r3
 801b70a:	4618      	mov	r0, r3
 801b70c:	f7f6 fe6a 	bl	80123e4 <lwip_htons>
 801b710:	4603      	mov	r3, r0
 801b712:	461a      	mov	r2, r3
 801b714:	4621      	mov	r1, r4
 801b716:	4812      	ldr	r0, [pc, #72]	@ (801b760 <udp_debug_print+0x80>)
 801b718:	f003 fb38 	bl	801ed8c <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801b71c:	480f      	ldr	r0, [pc, #60]	@ (801b75c <udp_debug_print+0x7c>)
 801b71e:	f003 fba5 	bl	801ee6c <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	889b      	ldrh	r3, [r3, #4]
 801b726:	b29b      	uxth	r3, r3
 801b728:	4618      	mov	r0, r3
 801b72a:	f7f6 fe5b 	bl	80123e4 <lwip_htons>
 801b72e:	4603      	mov	r3, r0
 801b730:	461c      	mov	r4, r3
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	88db      	ldrh	r3, [r3, #6]
 801b736:	b29b      	uxth	r3, r3
 801b738:	4618      	mov	r0, r3
 801b73a:	f7f6 fe53 	bl	80123e4 <lwip_htons>
 801b73e:	4603      	mov	r3, r0
 801b740:	461a      	mov	r2, r3
 801b742:	4621      	mov	r1, r4
 801b744:	4807      	ldr	r0, [pc, #28]	@ (801b764 <udp_debug_print+0x84>)
 801b746:	f003 fb21 	bl	801ed8c <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801b74a:	4804      	ldr	r0, [pc, #16]	@ (801b75c <udp_debug_print+0x7c>)
 801b74c:	f003 fb8e 	bl	801ee6c <puts>
}
 801b750:	bf00      	nop
 801b752:	370c      	adds	r7, #12
 801b754:	46bd      	mov	sp, r7
 801b756:	bd90      	pop	{r4, r7, pc}
 801b758:	08023418 	.word	0x08023418
 801b75c:	08023424 	.word	0x08023424
 801b760:	08023448 	.word	0x08023448
 801b764:	08023480 	.word	0x08023480

0801b768 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b768:	b580      	push	{r7, lr}
 801b76a:	b082      	sub	sp, #8
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b770:	492b      	ldr	r1, [pc, #172]	@ (801b820 <etharp_free_entry+0xb8>)
 801b772:	687a      	ldr	r2, [r7, #4]
 801b774:	4613      	mov	r3, r2
 801b776:	005b      	lsls	r3, r3, #1
 801b778:	4413      	add	r3, r2
 801b77a:	00db      	lsls	r3, r3, #3
 801b77c:	440b      	add	r3, r1
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d013      	beq.n	801b7ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b784:	4926      	ldr	r1, [pc, #152]	@ (801b820 <etharp_free_entry+0xb8>)
 801b786:	687a      	ldr	r2, [r7, #4]
 801b788:	4613      	mov	r3, r2
 801b78a:	005b      	lsls	r3, r3, #1
 801b78c:	4413      	add	r3, r2
 801b78e:	00db      	lsls	r3, r3, #3
 801b790:	440b      	add	r3, r1
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	4618      	mov	r0, r3
 801b796:	f7f8 fb09 	bl	8013dac <pbuf_free>
    arp_table[i].q = NULL;
 801b79a:	4921      	ldr	r1, [pc, #132]	@ (801b820 <etharp_free_entry+0xb8>)
 801b79c:	687a      	ldr	r2, [r7, #4]
 801b79e:	4613      	mov	r3, r2
 801b7a0:	005b      	lsls	r3, r3, #1
 801b7a2:	4413      	add	r3, r2
 801b7a4:	00db      	lsls	r3, r3, #3
 801b7a6:	440b      	add	r3, r1
 801b7a8:	2200      	movs	r2, #0
 801b7aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b7ac:	491c      	ldr	r1, [pc, #112]	@ (801b820 <etharp_free_entry+0xb8>)
 801b7ae:	687a      	ldr	r2, [r7, #4]
 801b7b0:	4613      	mov	r3, r2
 801b7b2:	005b      	lsls	r3, r3, #1
 801b7b4:	4413      	add	r3, r2
 801b7b6:	00db      	lsls	r3, r3, #3
 801b7b8:	440b      	add	r3, r1
 801b7ba:	3314      	adds	r3, #20
 801b7bc:	2200      	movs	r2, #0
 801b7be:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801b7c0:	4917      	ldr	r1, [pc, #92]	@ (801b820 <etharp_free_entry+0xb8>)
 801b7c2:	687a      	ldr	r2, [r7, #4]
 801b7c4:	4613      	mov	r3, r2
 801b7c6:	005b      	lsls	r3, r3, #1
 801b7c8:	4413      	add	r3, r2
 801b7ca:	00db      	lsls	r3, r3, #3
 801b7cc:	440b      	add	r3, r1
 801b7ce:	3312      	adds	r3, #18
 801b7d0:	2200      	movs	r2, #0
 801b7d2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801b7d4:	4912      	ldr	r1, [pc, #72]	@ (801b820 <etharp_free_entry+0xb8>)
 801b7d6:	687a      	ldr	r2, [r7, #4]
 801b7d8:	4613      	mov	r3, r2
 801b7da:	005b      	lsls	r3, r3, #1
 801b7dc:	4413      	add	r3, r2
 801b7de:	00db      	lsls	r3, r3, #3
 801b7e0:	440b      	add	r3, r1
 801b7e2:	3308      	adds	r3, #8
 801b7e4:	2200      	movs	r2, #0
 801b7e6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801b7e8:	490d      	ldr	r1, [pc, #52]	@ (801b820 <etharp_free_entry+0xb8>)
 801b7ea:	687a      	ldr	r2, [r7, #4]
 801b7ec:	4613      	mov	r3, r2
 801b7ee:	005b      	lsls	r3, r3, #1
 801b7f0:	4413      	add	r3, r2
 801b7f2:	00db      	lsls	r3, r3, #3
 801b7f4:	440b      	add	r3, r1
 801b7f6:	3304      	adds	r3, #4
 801b7f8:	2200      	movs	r2, #0
 801b7fa:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801b7fc:	4908      	ldr	r1, [pc, #32]	@ (801b820 <etharp_free_entry+0xb8>)
 801b7fe:	687a      	ldr	r2, [r7, #4]
 801b800:	4613      	mov	r3, r2
 801b802:	005b      	lsls	r3, r3, #1
 801b804:	4413      	add	r3, r2
 801b806:	00db      	lsls	r3, r3, #3
 801b808:	440b      	add	r3, r1
 801b80a:	3308      	adds	r3, #8
 801b80c:	4a05      	ldr	r2, [pc, #20]	@ (801b824 <etharp_free_entry+0xbc>)
 801b80e:	3304      	adds	r3, #4
 801b810:	6810      	ldr	r0, [r2, #0]
 801b812:	6018      	str	r0, [r3, #0]
 801b814:	8892      	ldrh	r2, [r2, #4]
 801b816:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801b818:	bf00      	nop
 801b81a:	3708      	adds	r7, #8
 801b81c:	46bd      	mov	sp, r7
 801b81e:	bd80      	pop	{r7, pc}
 801b820:	20022800 	.word	0x20022800
 801b824:	08024340 	.word	0x08024340

0801b828 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b828:	b580      	push	{r7, lr}
 801b82a:	b082      	sub	sp, #8
 801b82c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b82e:	2300      	movs	r3, #0
 801b830:	607b      	str	r3, [r7, #4]
 801b832:	e096      	b.n	801b962 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b834:	494f      	ldr	r1, [pc, #316]	@ (801b974 <etharp_tmr+0x14c>)
 801b836:	687a      	ldr	r2, [r7, #4]
 801b838:	4613      	mov	r3, r2
 801b83a:	005b      	lsls	r3, r3, #1
 801b83c:	4413      	add	r3, r2
 801b83e:	00db      	lsls	r3, r3, #3
 801b840:	440b      	add	r3, r1
 801b842:	3314      	adds	r3, #20
 801b844:	781b      	ldrb	r3, [r3, #0]
 801b846:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b848:	78fb      	ldrb	r3, [r7, #3]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	f000 8086 	beq.w	801b95c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b850:	4948      	ldr	r1, [pc, #288]	@ (801b974 <etharp_tmr+0x14c>)
 801b852:	687a      	ldr	r2, [r7, #4]
 801b854:	4613      	mov	r3, r2
 801b856:	005b      	lsls	r3, r3, #1
 801b858:	4413      	add	r3, r2
 801b85a:	00db      	lsls	r3, r3, #3
 801b85c:	440b      	add	r3, r1
 801b85e:	3312      	adds	r3, #18
 801b860:	881b      	ldrh	r3, [r3, #0]
 801b862:	3301      	adds	r3, #1
 801b864:	b298      	uxth	r0, r3
 801b866:	4943      	ldr	r1, [pc, #268]	@ (801b974 <etharp_tmr+0x14c>)
 801b868:	687a      	ldr	r2, [r7, #4]
 801b86a:	4613      	mov	r3, r2
 801b86c:	005b      	lsls	r3, r3, #1
 801b86e:	4413      	add	r3, r2
 801b870:	00db      	lsls	r3, r3, #3
 801b872:	440b      	add	r3, r1
 801b874:	3312      	adds	r3, #18
 801b876:	4602      	mov	r2, r0
 801b878:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b87a:	493e      	ldr	r1, [pc, #248]	@ (801b974 <etharp_tmr+0x14c>)
 801b87c:	687a      	ldr	r2, [r7, #4]
 801b87e:	4613      	mov	r3, r2
 801b880:	005b      	lsls	r3, r3, #1
 801b882:	4413      	add	r3, r2
 801b884:	00db      	lsls	r3, r3, #3
 801b886:	440b      	add	r3, r1
 801b888:	3312      	adds	r3, #18
 801b88a:	881b      	ldrh	r3, [r3, #0]
 801b88c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801b890:	d215      	bcs.n	801b8be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b892:	4938      	ldr	r1, [pc, #224]	@ (801b974 <etharp_tmr+0x14c>)
 801b894:	687a      	ldr	r2, [r7, #4]
 801b896:	4613      	mov	r3, r2
 801b898:	005b      	lsls	r3, r3, #1
 801b89a:	4413      	add	r3, r2
 801b89c:	00db      	lsls	r3, r3, #3
 801b89e:	440b      	add	r3, r1
 801b8a0:	3314      	adds	r3, #20
 801b8a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b8a4:	2b01      	cmp	r3, #1
 801b8a6:	d10e      	bne.n	801b8c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b8a8:	4932      	ldr	r1, [pc, #200]	@ (801b974 <etharp_tmr+0x14c>)
 801b8aa:	687a      	ldr	r2, [r7, #4]
 801b8ac:	4613      	mov	r3, r2
 801b8ae:	005b      	lsls	r3, r3, #1
 801b8b0:	4413      	add	r3, r2
 801b8b2:	00db      	lsls	r3, r3, #3
 801b8b4:	440b      	add	r3, r1
 801b8b6:	3312      	adds	r3, #18
 801b8b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b8ba:	2b04      	cmp	r3, #4
 801b8bc:	d903      	bls.n	801b8c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b8be:	6878      	ldr	r0, [r7, #4]
 801b8c0:	f7ff ff52 	bl	801b768 <etharp_free_entry>
 801b8c4:	e04a      	b.n	801b95c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b8c6:	492b      	ldr	r1, [pc, #172]	@ (801b974 <etharp_tmr+0x14c>)
 801b8c8:	687a      	ldr	r2, [r7, #4]
 801b8ca:	4613      	mov	r3, r2
 801b8cc:	005b      	lsls	r3, r3, #1
 801b8ce:	4413      	add	r3, r2
 801b8d0:	00db      	lsls	r3, r3, #3
 801b8d2:	440b      	add	r3, r1
 801b8d4:	3314      	adds	r3, #20
 801b8d6:	781b      	ldrb	r3, [r3, #0]
 801b8d8:	2b03      	cmp	r3, #3
 801b8da:	d10a      	bne.n	801b8f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b8dc:	4925      	ldr	r1, [pc, #148]	@ (801b974 <etharp_tmr+0x14c>)
 801b8de:	687a      	ldr	r2, [r7, #4]
 801b8e0:	4613      	mov	r3, r2
 801b8e2:	005b      	lsls	r3, r3, #1
 801b8e4:	4413      	add	r3, r2
 801b8e6:	00db      	lsls	r3, r3, #3
 801b8e8:	440b      	add	r3, r1
 801b8ea:	3314      	adds	r3, #20
 801b8ec:	2204      	movs	r2, #4
 801b8ee:	701a      	strb	r2, [r3, #0]
 801b8f0:	e034      	b.n	801b95c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b8f2:	4920      	ldr	r1, [pc, #128]	@ (801b974 <etharp_tmr+0x14c>)
 801b8f4:	687a      	ldr	r2, [r7, #4]
 801b8f6:	4613      	mov	r3, r2
 801b8f8:	005b      	lsls	r3, r3, #1
 801b8fa:	4413      	add	r3, r2
 801b8fc:	00db      	lsls	r3, r3, #3
 801b8fe:	440b      	add	r3, r1
 801b900:	3314      	adds	r3, #20
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	2b04      	cmp	r3, #4
 801b906:	d10a      	bne.n	801b91e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b908:	491a      	ldr	r1, [pc, #104]	@ (801b974 <etharp_tmr+0x14c>)
 801b90a:	687a      	ldr	r2, [r7, #4]
 801b90c:	4613      	mov	r3, r2
 801b90e:	005b      	lsls	r3, r3, #1
 801b910:	4413      	add	r3, r2
 801b912:	00db      	lsls	r3, r3, #3
 801b914:	440b      	add	r3, r1
 801b916:	3314      	adds	r3, #20
 801b918:	2202      	movs	r2, #2
 801b91a:	701a      	strb	r2, [r3, #0]
 801b91c:	e01e      	b.n	801b95c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b91e:	4915      	ldr	r1, [pc, #84]	@ (801b974 <etharp_tmr+0x14c>)
 801b920:	687a      	ldr	r2, [r7, #4]
 801b922:	4613      	mov	r3, r2
 801b924:	005b      	lsls	r3, r3, #1
 801b926:	4413      	add	r3, r2
 801b928:	00db      	lsls	r3, r3, #3
 801b92a:	440b      	add	r3, r1
 801b92c:	3314      	adds	r3, #20
 801b92e:	781b      	ldrb	r3, [r3, #0]
 801b930:	2b01      	cmp	r3, #1
 801b932:	d113      	bne.n	801b95c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b934:	490f      	ldr	r1, [pc, #60]	@ (801b974 <etharp_tmr+0x14c>)
 801b936:	687a      	ldr	r2, [r7, #4]
 801b938:	4613      	mov	r3, r2
 801b93a:	005b      	lsls	r3, r3, #1
 801b93c:	4413      	add	r3, r2
 801b93e:	00db      	lsls	r3, r3, #3
 801b940:	440b      	add	r3, r1
 801b942:	3308      	adds	r3, #8
 801b944:	6818      	ldr	r0, [r3, #0]
 801b946:	687a      	ldr	r2, [r7, #4]
 801b948:	4613      	mov	r3, r2
 801b94a:	005b      	lsls	r3, r3, #1
 801b94c:	4413      	add	r3, r2
 801b94e:	00db      	lsls	r3, r3, #3
 801b950:	4a08      	ldr	r2, [pc, #32]	@ (801b974 <etharp_tmr+0x14c>)
 801b952:	4413      	add	r3, r2
 801b954:	3304      	adds	r3, #4
 801b956:	4619      	mov	r1, r3
 801b958:	f000 fe6e 	bl	801c638 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	3301      	adds	r3, #1
 801b960:	607b      	str	r3, [r7, #4]
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	2b09      	cmp	r3, #9
 801b966:	f77f af65 	ble.w	801b834 <etharp_tmr+0xc>
      }
    }
  }
}
 801b96a:	bf00      	nop
 801b96c:	bf00      	nop
 801b96e:	3708      	adds	r7, #8
 801b970:	46bd      	mov	sp, r7
 801b972:	bd80      	pop	{r7, pc}
 801b974:	20022800 	.word	0x20022800

0801b978 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b978:	b580      	push	{r7, lr}
 801b97a:	b08a      	sub	sp, #40	@ 0x28
 801b97c:	af00      	add	r7, sp, #0
 801b97e:	60f8      	str	r0, [r7, #12]
 801b980:	460b      	mov	r3, r1
 801b982:	607a      	str	r2, [r7, #4]
 801b984:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b986:	230a      	movs	r3, #10
 801b988:	843b      	strh	r3, [r7, #32]
 801b98a:	230a      	movs	r3, #10
 801b98c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801b98e:	230a      	movs	r3, #10
 801b990:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 801b992:	2300      	movs	r3, #0
 801b994:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b996:	230a      	movs	r3, #10
 801b998:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b99a:	2300      	movs	r3, #0
 801b99c:	83bb      	strh	r3, [r7, #28]
 801b99e:	2300      	movs	r3, #0
 801b9a0:	837b      	strh	r3, [r7, #26]
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801b9aa:	e0ae      	b.n	801bb0a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b9ac:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801b9b0:	49a6      	ldr	r1, [pc, #664]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801b9b2:	4613      	mov	r3, r2
 801b9b4:	005b      	lsls	r3, r3, #1
 801b9b6:	4413      	add	r3, r2
 801b9b8:	00db      	lsls	r3, r3, #3
 801b9ba:	440b      	add	r3, r1
 801b9bc:	3314      	adds	r3, #20
 801b9be:	781b      	ldrb	r3, [r3, #0]
 801b9c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b9c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801b9c6:	2b0a      	cmp	r3, #10
 801b9c8:	d105      	bne.n	801b9d6 <etharp_find_entry+0x5e>
 801b9ca:	7dfb      	ldrb	r3, [r7, #23]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d102      	bne.n	801b9d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b9d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b9d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801b9d4:	e095      	b.n	801bb02 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b9d6:	7dfb      	ldrb	r3, [r7, #23]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	f000 8092 	beq.w	801bb02 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b9de:	7dfb      	ldrb	r3, [r7, #23]
 801b9e0:	2b01      	cmp	r3, #1
 801b9e2:	d009      	beq.n	801b9f8 <etharp_find_entry+0x80>
 801b9e4:	7dfb      	ldrb	r3, [r7, #23]
 801b9e6:	2b01      	cmp	r3, #1
 801b9e8:	d806      	bhi.n	801b9f8 <etharp_find_entry+0x80>
 801b9ea:	4b99      	ldr	r3, [pc, #612]	@ (801bc50 <etharp_find_entry+0x2d8>)
 801b9ec:	f240 1223 	movw	r2, #291	@ 0x123
 801b9f0:	4998      	ldr	r1, [pc, #608]	@ (801bc54 <etharp_find_entry+0x2dc>)
 801b9f2:	4899      	ldr	r0, [pc, #612]	@ (801bc58 <etharp_find_entry+0x2e0>)
 801b9f4:	f003 f9ca 	bl	801ed8c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	d020      	beq.n	801ba40 <etharp_find_entry+0xc8>
 801b9fe:	68fb      	ldr	r3, [r7, #12]
 801ba00:	6819      	ldr	r1, [r3, #0]
 801ba02:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ba06:	4891      	ldr	r0, [pc, #580]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801ba08:	4613      	mov	r3, r2
 801ba0a:	005b      	lsls	r3, r3, #1
 801ba0c:	4413      	add	r3, r2
 801ba0e:	00db      	lsls	r3, r3, #3
 801ba10:	4403      	add	r3, r0
 801ba12:	3304      	adds	r3, #4
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	4299      	cmp	r1, r3
 801ba18:	d112      	bne.n	801ba40 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d00c      	beq.n	801ba3a <etharp_find_entry+0xc2>
 801ba20:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ba24:	4989      	ldr	r1, [pc, #548]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801ba26:	4613      	mov	r3, r2
 801ba28:	005b      	lsls	r3, r3, #1
 801ba2a:	4413      	add	r3, r2
 801ba2c:	00db      	lsls	r3, r3, #3
 801ba2e:	440b      	add	r3, r1
 801ba30:	3308      	adds	r3, #8
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	687a      	ldr	r2, [r7, #4]
 801ba36:	429a      	cmp	r2, r3
 801ba38:	d102      	bne.n	801ba40 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ba3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801ba3e:	e100      	b.n	801bc42 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ba40:	7dfb      	ldrb	r3, [r7, #23]
 801ba42:	2b01      	cmp	r3, #1
 801ba44:	d140      	bne.n	801bac8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ba46:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ba4a:	4980      	ldr	r1, [pc, #512]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801ba4c:	4613      	mov	r3, r2
 801ba4e:	005b      	lsls	r3, r3, #1
 801ba50:	4413      	add	r3, r2
 801ba52:	00db      	lsls	r3, r3, #3
 801ba54:	440b      	add	r3, r1
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d01a      	beq.n	801ba92 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ba5c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ba60:	497a      	ldr	r1, [pc, #488]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801ba62:	4613      	mov	r3, r2
 801ba64:	005b      	lsls	r3, r3, #1
 801ba66:	4413      	add	r3, r2
 801ba68:	00db      	lsls	r3, r3, #3
 801ba6a:	440b      	add	r3, r1
 801ba6c:	3312      	adds	r3, #18
 801ba6e:	881b      	ldrh	r3, [r3, #0]
 801ba70:	8bba      	ldrh	r2, [r7, #28]
 801ba72:	429a      	cmp	r2, r3
 801ba74:	d845      	bhi.n	801bb02 <etharp_find_entry+0x18a>
            old_queue = i;
 801ba76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ba78:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ba7a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ba7e:	4973      	ldr	r1, [pc, #460]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801ba80:	4613      	mov	r3, r2
 801ba82:	005b      	lsls	r3, r3, #1
 801ba84:	4413      	add	r3, r2
 801ba86:	00db      	lsls	r3, r3, #3
 801ba88:	440b      	add	r3, r1
 801ba8a:	3312      	adds	r3, #18
 801ba8c:	881b      	ldrh	r3, [r3, #0]
 801ba8e:	83bb      	strh	r3, [r7, #28]
 801ba90:	e037      	b.n	801bb02 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ba92:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ba96:	496d      	ldr	r1, [pc, #436]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801ba98:	4613      	mov	r3, r2
 801ba9a:	005b      	lsls	r3, r3, #1
 801ba9c:	4413      	add	r3, r2
 801ba9e:	00db      	lsls	r3, r3, #3
 801baa0:	440b      	add	r3, r1
 801baa2:	3312      	adds	r3, #18
 801baa4:	881b      	ldrh	r3, [r3, #0]
 801baa6:	8b7a      	ldrh	r2, [r7, #26]
 801baa8:	429a      	cmp	r2, r3
 801baaa:	d82a      	bhi.n	801bb02 <etharp_find_entry+0x18a>
            old_pending = i;
 801baac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801baae:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801bab0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801bab4:	4965      	ldr	r1, [pc, #404]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801bab6:	4613      	mov	r3, r2
 801bab8:	005b      	lsls	r3, r3, #1
 801baba:	4413      	add	r3, r2
 801babc:	00db      	lsls	r3, r3, #3
 801babe:	440b      	add	r3, r1
 801bac0:	3312      	adds	r3, #18
 801bac2:	881b      	ldrh	r3, [r3, #0]
 801bac4:	837b      	strh	r3, [r7, #26]
 801bac6:	e01c      	b.n	801bb02 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801bac8:	7dfb      	ldrb	r3, [r7, #23]
 801baca:	2b01      	cmp	r3, #1
 801bacc:	d919      	bls.n	801bb02 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801bace:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801bad2:	495e      	ldr	r1, [pc, #376]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801bad4:	4613      	mov	r3, r2
 801bad6:	005b      	lsls	r3, r3, #1
 801bad8:	4413      	add	r3, r2
 801bada:	00db      	lsls	r3, r3, #3
 801badc:	440b      	add	r3, r1
 801bade:	3312      	adds	r3, #18
 801bae0:	881b      	ldrh	r3, [r3, #0]
 801bae2:	8b3a      	ldrh	r2, [r7, #24]
 801bae4:	429a      	cmp	r2, r3
 801bae6:	d80c      	bhi.n	801bb02 <etharp_find_entry+0x18a>
            old_stable = i;
 801bae8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801baea:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801baec:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801baf0:	4956      	ldr	r1, [pc, #344]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801baf2:	4613      	mov	r3, r2
 801baf4:	005b      	lsls	r3, r3, #1
 801baf6:	4413      	add	r3, r2
 801baf8:	00db      	lsls	r3, r3, #3
 801bafa:	440b      	add	r3, r1
 801bafc:	3312      	adds	r3, #18
 801bafe:	881b      	ldrh	r3, [r3, #0]
 801bb00:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bb02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801bb04:	3301      	adds	r3, #1
 801bb06:	b29b      	uxth	r3, r3
 801bb08:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801bb0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801bb0e:	2b09      	cmp	r3, #9
 801bb10:	f77f af4c 	ble.w	801b9ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801bb14:	7afb      	ldrb	r3, [r7, #11]
 801bb16:	f003 0302 	and.w	r3, r3, #2
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d108      	bne.n	801bb30 <etharp_find_entry+0x1b8>
 801bb1e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801bb22:	2b0a      	cmp	r3, #10
 801bb24:	d107      	bne.n	801bb36 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801bb26:	7afb      	ldrb	r3, [r7, #11]
 801bb28:	f003 0301 	and.w	r3, r3, #1
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d102      	bne.n	801bb36 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801bb30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bb34:	e085      	b.n	801bc42 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801bb36:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801bb3a:	2b09      	cmp	r3, #9
 801bb3c:	dc02      	bgt.n	801bb44 <etharp_find_entry+0x1cc>
    i = empty;
 801bb3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bb40:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801bb42:	e039      	b.n	801bbb8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801bb44:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801bb48:	2b09      	cmp	r3, #9
 801bb4a:	dc14      	bgt.n	801bb76 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801bb4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bb4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801bb50:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801bb54:	493d      	ldr	r1, [pc, #244]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801bb56:	4613      	mov	r3, r2
 801bb58:	005b      	lsls	r3, r3, #1
 801bb5a:	4413      	add	r3, r2
 801bb5c:	00db      	lsls	r3, r3, #3
 801bb5e:	440b      	add	r3, r1
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d018      	beq.n	801bb98 <etharp_find_entry+0x220>
 801bb66:	4b3a      	ldr	r3, [pc, #232]	@ (801bc50 <etharp_find_entry+0x2d8>)
 801bb68:	f240 126d 	movw	r2, #365	@ 0x16d
 801bb6c:	493b      	ldr	r1, [pc, #236]	@ (801bc5c <etharp_find_entry+0x2e4>)
 801bb6e:	483a      	ldr	r0, [pc, #232]	@ (801bc58 <etharp_find_entry+0x2e0>)
 801bb70:	f003 f90c 	bl	801ed8c <iprintf>
 801bb74:	e010      	b.n	801bb98 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801bb76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bb7a:	2b09      	cmp	r3, #9
 801bb7c:	dc02      	bgt.n	801bb84 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801bb7e:	8c3b      	ldrh	r3, [r7, #32]
 801bb80:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801bb82:	e009      	b.n	801bb98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801bb84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801bb88:	2b09      	cmp	r3, #9
 801bb8a:	dc02      	bgt.n	801bb92 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801bb8c:	8bfb      	ldrh	r3, [r7, #30]
 801bb8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801bb90:	e002      	b.n	801bb98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801bb92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bb96:	e054      	b.n	801bc42 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bb98:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801bb9c:	2b09      	cmp	r3, #9
 801bb9e:	dd06      	ble.n	801bbae <etharp_find_entry+0x236>
 801bba0:	4b2b      	ldr	r3, [pc, #172]	@ (801bc50 <etharp_find_entry+0x2d8>)
 801bba2:	f240 127f 	movw	r2, #383	@ 0x17f
 801bba6:	492e      	ldr	r1, [pc, #184]	@ (801bc60 <etharp_find_entry+0x2e8>)
 801bba8:	482b      	ldr	r0, [pc, #172]	@ (801bc58 <etharp_find_entry+0x2e0>)
 801bbaa:	f003 f8ef 	bl	801ed8c <iprintf>
    etharp_free_entry(i);
 801bbae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	f7ff fdd8 	bl	801b768 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bbb8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801bbbc:	2b09      	cmp	r3, #9
 801bbbe:	dd06      	ble.n	801bbce <etharp_find_entry+0x256>
 801bbc0:	4b23      	ldr	r3, [pc, #140]	@ (801bc50 <etharp_find_entry+0x2d8>)
 801bbc2:	f240 1283 	movw	r2, #387	@ 0x183
 801bbc6:	4926      	ldr	r1, [pc, #152]	@ (801bc60 <etharp_find_entry+0x2e8>)
 801bbc8:	4823      	ldr	r0, [pc, #140]	@ (801bc58 <etharp_find_entry+0x2e0>)
 801bbca:	f003 f8df 	bl	801ed8c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801bbce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801bbd2:	491e      	ldr	r1, [pc, #120]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801bbd4:	4613      	mov	r3, r2
 801bbd6:	005b      	lsls	r3, r3, #1
 801bbd8:	4413      	add	r3, r2
 801bbda:	00db      	lsls	r3, r3, #3
 801bbdc:	440b      	add	r3, r1
 801bbde:	3314      	adds	r3, #20
 801bbe0:	781b      	ldrb	r3, [r3, #0]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d006      	beq.n	801bbf4 <etharp_find_entry+0x27c>
 801bbe6:	4b1a      	ldr	r3, [pc, #104]	@ (801bc50 <etharp_find_entry+0x2d8>)
 801bbe8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801bbec:	491d      	ldr	r1, [pc, #116]	@ (801bc64 <etharp_find_entry+0x2ec>)
 801bbee:	481a      	ldr	r0, [pc, #104]	@ (801bc58 <etharp_find_entry+0x2e0>)
 801bbf0:	f003 f8cc 	bl	801ed8c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d00b      	beq.n	801bc12 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801bbfa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801bbfe:	68fb      	ldr	r3, [r7, #12]
 801bc00:	6819      	ldr	r1, [r3, #0]
 801bc02:	4812      	ldr	r0, [pc, #72]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801bc04:	4613      	mov	r3, r2
 801bc06:	005b      	lsls	r3, r3, #1
 801bc08:	4413      	add	r3, r2
 801bc0a:	00db      	lsls	r3, r3, #3
 801bc0c:	4403      	add	r3, r0
 801bc0e:	3304      	adds	r3, #4
 801bc10:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801bc12:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801bc16:	490d      	ldr	r1, [pc, #52]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801bc18:	4613      	mov	r3, r2
 801bc1a:	005b      	lsls	r3, r3, #1
 801bc1c:	4413      	add	r3, r2
 801bc1e:	00db      	lsls	r3, r3, #3
 801bc20:	440b      	add	r3, r1
 801bc22:	3312      	adds	r3, #18
 801bc24:	2200      	movs	r2, #0
 801bc26:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801bc28:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801bc2c:	4907      	ldr	r1, [pc, #28]	@ (801bc4c <etharp_find_entry+0x2d4>)
 801bc2e:	4613      	mov	r3, r2
 801bc30:	005b      	lsls	r3, r3, #1
 801bc32:	4413      	add	r3, r2
 801bc34:	00db      	lsls	r3, r3, #3
 801bc36:	440b      	add	r3, r1
 801bc38:	3308      	adds	r3, #8
 801bc3a:	687a      	ldr	r2, [r7, #4]
 801bc3c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801bc3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801bc42:	4618      	mov	r0, r3
 801bc44:	3728      	adds	r7, #40	@ 0x28
 801bc46:	46bd      	mov	sp, r7
 801bc48:	bd80      	pop	{r7, pc}
 801bc4a:	bf00      	nop
 801bc4c:	20022800 	.word	0x20022800
 801bc50:	080234b4 	.word	0x080234b4
 801bc54:	080234ec 	.word	0x080234ec
 801bc58:	0802352c 	.word	0x0802352c
 801bc5c:	08023554 	.word	0x08023554
 801bc60:	0802356c 	.word	0x0802356c
 801bc64:	08023580 	.word	0x08023580

0801bc68 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801bc68:	b580      	push	{r7, lr}
 801bc6a:	b088      	sub	sp, #32
 801bc6c:	af02      	add	r7, sp, #8
 801bc6e:	60f8      	str	r0, [r7, #12]
 801bc70:	60b9      	str	r1, [r7, #8]
 801bc72:	607a      	str	r2, [r7, #4]
 801bc74:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801bc76:	68fb      	ldr	r3, [r7, #12]
 801bc78:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801bc7c:	2b06      	cmp	r3, #6
 801bc7e:	d006      	beq.n	801bc8e <etharp_update_arp_entry+0x26>
 801bc80:	4b48      	ldr	r3, [pc, #288]	@ (801bda4 <etharp_update_arp_entry+0x13c>)
 801bc82:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801bc86:	4948      	ldr	r1, [pc, #288]	@ (801bda8 <etharp_update_arp_entry+0x140>)
 801bc88:	4848      	ldr	r0, [pc, #288]	@ (801bdac <etharp_update_arp_entry+0x144>)
 801bc8a:	f003 f87f 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801bc8e:	68bb      	ldr	r3, [r7, #8]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d012      	beq.n	801bcba <etharp_update_arp_entry+0x52>
 801bc94:	68bb      	ldr	r3, [r7, #8]
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d00e      	beq.n	801bcba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bc9c:	68bb      	ldr	r3, [r7, #8]
 801bc9e:	681b      	ldr	r3, [r3, #0]
 801bca0:	68f9      	ldr	r1, [r7, #12]
 801bca2:	4618      	mov	r0, r3
 801bca4:	f001 f990 	bl	801cfc8 <ip4_addr_isbroadcast_u32>
 801bca8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d105      	bne.n	801bcba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801bcae:	68bb      	ldr	r3, [r7, #8]
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bcb6:	2be0      	cmp	r3, #224	@ 0xe0
 801bcb8:	d102      	bne.n	801bcc0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bcba:	f06f 030f 	mvn.w	r3, #15
 801bcbe:	e06c      	b.n	801bd9a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801bcc0:	78fb      	ldrb	r3, [r7, #3]
 801bcc2:	68fa      	ldr	r2, [r7, #12]
 801bcc4:	4619      	mov	r1, r3
 801bcc6:	68b8      	ldr	r0, [r7, #8]
 801bcc8:	f7ff fe56 	bl	801b978 <etharp_find_entry>
 801bccc:	4603      	mov	r3, r0
 801bcce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801bcd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	da02      	bge.n	801bcde <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801bcd8:	8afb      	ldrh	r3, [r7, #22]
 801bcda:	b25b      	sxtb	r3, r3
 801bcdc:	e05d      	b.n	801bd9a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801bcde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bce2:	4933      	ldr	r1, [pc, #204]	@ (801bdb0 <etharp_update_arp_entry+0x148>)
 801bce4:	4613      	mov	r3, r2
 801bce6:	005b      	lsls	r3, r3, #1
 801bce8:	4413      	add	r3, r2
 801bcea:	00db      	lsls	r3, r3, #3
 801bcec:	440b      	add	r3, r1
 801bcee:	3314      	adds	r3, #20
 801bcf0:	2202      	movs	r2, #2
 801bcf2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801bcf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bcf8:	492d      	ldr	r1, [pc, #180]	@ (801bdb0 <etharp_update_arp_entry+0x148>)
 801bcfa:	4613      	mov	r3, r2
 801bcfc:	005b      	lsls	r3, r3, #1
 801bcfe:	4413      	add	r3, r2
 801bd00:	00db      	lsls	r3, r3, #3
 801bd02:	440b      	add	r3, r1
 801bd04:	3308      	adds	r3, #8
 801bd06:	68fa      	ldr	r2, [r7, #12]
 801bd08:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801bd0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd0e:	4613      	mov	r3, r2
 801bd10:	005b      	lsls	r3, r3, #1
 801bd12:	4413      	add	r3, r2
 801bd14:	00db      	lsls	r3, r3, #3
 801bd16:	3308      	adds	r3, #8
 801bd18:	4a25      	ldr	r2, [pc, #148]	@ (801bdb0 <etharp_update_arp_entry+0x148>)
 801bd1a:	4413      	add	r3, r2
 801bd1c:	3304      	adds	r3, #4
 801bd1e:	2206      	movs	r2, #6
 801bd20:	6879      	ldr	r1, [r7, #4]
 801bd22:	4618      	mov	r0, r3
 801bd24:	f003 fa07 	bl	801f136 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801bd28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd2c:	4920      	ldr	r1, [pc, #128]	@ (801bdb0 <etharp_update_arp_entry+0x148>)
 801bd2e:	4613      	mov	r3, r2
 801bd30:	005b      	lsls	r3, r3, #1
 801bd32:	4413      	add	r3, r2
 801bd34:	00db      	lsls	r3, r3, #3
 801bd36:	440b      	add	r3, r1
 801bd38:	3312      	adds	r3, #18
 801bd3a:	2200      	movs	r2, #0
 801bd3c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801bd3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd42:	491b      	ldr	r1, [pc, #108]	@ (801bdb0 <etharp_update_arp_entry+0x148>)
 801bd44:	4613      	mov	r3, r2
 801bd46:	005b      	lsls	r3, r3, #1
 801bd48:	4413      	add	r3, r2
 801bd4a:	00db      	lsls	r3, r3, #3
 801bd4c:	440b      	add	r3, r1
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d021      	beq.n	801bd98 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801bd54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd58:	4915      	ldr	r1, [pc, #84]	@ (801bdb0 <etharp_update_arp_entry+0x148>)
 801bd5a:	4613      	mov	r3, r2
 801bd5c:	005b      	lsls	r3, r3, #1
 801bd5e:	4413      	add	r3, r2
 801bd60:	00db      	lsls	r3, r3, #3
 801bd62:	440b      	add	r3, r1
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801bd68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd6c:	4910      	ldr	r1, [pc, #64]	@ (801bdb0 <etharp_update_arp_entry+0x148>)
 801bd6e:	4613      	mov	r3, r2
 801bd70:	005b      	lsls	r3, r3, #1
 801bd72:	4413      	add	r3, r2
 801bd74:	00db      	lsls	r3, r3, #3
 801bd76:	440b      	add	r3, r1
 801bd78:	2200      	movs	r2, #0
 801bd7a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801bd7c:	68fb      	ldr	r3, [r7, #12]
 801bd7e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801bd82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bd86:	9300      	str	r3, [sp, #0]
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	6939      	ldr	r1, [r7, #16]
 801bd8c:	68f8      	ldr	r0, [r7, #12]
 801bd8e:	f002 f829 	bl	801dde4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801bd92:	6938      	ldr	r0, [r7, #16]
 801bd94:	f7f8 f80a 	bl	8013dac <pbuf_free>
  }
  return ERR_OK;
 801bd98:	2300      	movs	r3, #0
}
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	3718      	adds	r7, #24
 801bd9e:	46bd      	mov	sp, r7
 801bda0:	bd80      	pop	{r7, pc}
 801bda2:	bf00      	nop
 801bda4:	080234b4 	.word	0x080234b4
 801bda8:	080235ac 	.word	0x080235ac
 801bdac:	0802352c 	.word	0x0802352c
 801bdb0:	20022800 	.word	0x20022800

0801bdb4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b084      	sub	sp, #16
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	60fb      	str	r3, [r7, #12]
 801bdc0:	e01e      	b.n	801be00 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801bdc2:	4913      	ldr	r1, [pc, #76]	@ (801be10 <etharp_cleanup_netif+0x5c>)
 801bdc4:	68fa      	ldr	r2, [r7, #12]
 801bdc6:	4613      	mov	r3, r2
 801bdc8:	005b      	lsls	r3, r3, #1
 801bdca:	4413      	add	r3, r2
 801bdcc:	00db      	lsls	r3, r3, #3
 801bdce:	440b      	add	r3, r1
 801bdd0:	3314      	adds	r3, #20
 801bdd2:	781b      	ldrb	r3, [r3, #0]
 801bdd4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801bdd6:	7afb      	ldrb	r3, [r7, #11]
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d00e      	beq.n	801bdfa <etharp_cleanup_netif+0x46>
 801bddc:	490c      	ldr	r1, [pc, #48]	@ (801be10 <etharp_cleanup_netif+0x5c>)
 801bdde:	68fa      	ldr	r2, [r7, #12]
 801bde0:	4613      	mov	r3, r2
 801bde2:	005b      	lsls	r3, r3, #1
 801bde4:	4413      	add	r3, r2
 801bde6:	00db      	lsls	r3, r3, #3
 801bde8:	440b      	add	r3, r1
 801bdea:	3308      	adds	r3, #8
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	687a      	ldr	r2, [r7, #4]
 801bdf0:	429a      	cmp	r2, r3
 801bdf2:	d102      	bne.n	801bdfa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801bdf4:	68f8      	ldr	r0, [r7, #12]
 801bdf6:	f7ff fcb7 	bl	801b768 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	3301      	adds	r3, #1
 801bdfe:	60fb      	str	r3, [r7, #12]
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	2b09      	cmp	r3, #9
 801be04:	dddd      	ble.n	801bdc2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801be06:	bf00      	nop
 801be08:	bf00      	nop
 801be0a:	3710      	adds	r7, #16
 801be0c:	46bd      	mov	sp, r7
 801be0e:	bd80      	pop	{r7, pc}
 801be10:	20022800 	.word	0x20022800

0801be14 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801be14:	b5b0      	push	{r4, r5, r7, lr}
 801be16:	b08a      	sub	sp, #40	@ 0x28
 801be18:	af04      	add	r7, sp, #16
 801be1a:	6078      	str	r0, [r7, #4]
 801be1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801be1e:	683b      	ldr	r3, [r7, #0]
 801be20:	2b00      	cmp	r3, #0
 801be22:	d107      	bne.n	801be34 <etharp_input+0x20>
 801be24:	4b3d      	ldr	r3, [pc, #244]	@ (801bf1c <etharp_input+0x108>)
 801be26:	f240 228a 	movw	r2, #650	@ 0x28a
 801be2a:	493d      	ldr	r1, [pc, #244]	@ (801bf20 <etharp_input+0x10c>)
 801be2c:	483d      	ldr	r0, [pc, #244]	@ (801bf24 <etharp_input+0x110>)
 801be2e:	f002 ffad 	bl	801ed8c <iprintf>
 801be32:	e06f      	b.n	801bf14 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	685b      	ldr	r3, [r3, #4]
 801be38:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801be3a:	697b      	ldr	r3, [r7, #20]
 801be3c:	881b      	ldrh	r3, [r3, #0]
 801be3e:	b29b      	uxth	r3, r3
 801be40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801be44:	d10c      	bne.n	801be60 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801be46:	697b      	ldr	r3, [r7, #20]
 801be48:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801be4a:	2b06      	cmp	r3, #6
 801be4c:	d108      	bne.n	801be60 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801be4e:	697b      	ldr	r3, [r7, #20]
 801be50:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801be52:	2b04      	cmp	r3, #4
 801be54:	d104      	bne.n	801be60 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801be56:	697b      	ldr	r3, [r7, #20]
 801be58:	885b      	ldrh	r3, [r3, #2]
 801be5a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801be5c:	2b08      	cmp	r3, #8
 801be5e:	d003      	beq.n	801be68 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801be60:	6878      	ldr	r0, [r7, #4]
 801be62:	f7f7 ffa3 	bl	8013dac <pbuf_free>
    return;
 801be66:	e055      	b.n	801bf14 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801be68:	697b      	ldr	r3, [r7, #20]
 801be6a:	330e      	adds	r3, #14
 801be6c:	681b      	ldr	r3, [r3, #0]
 801be6e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801be70:	697b      	ldr	r3, [r7, #20]
 801be72:	3318      	adds	r3, #24
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801be78:	683b      	ldr	r3, [r7, #0]
 801be7a:	3304      	adds	r3, #4
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d102      	bne.n	801be88 <etharp_input+0x74>
    for_us = 0;
 801be82:	2300      	movs	r3, #0
 801be84:	74fb      	strb	r3, [r7, #19]
 801be86:	e009      	b.n	801be9c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801be88:	68ba      	ldr	r2, [r7, #8]
 801be8a:	683b      	ldr	r3, [r7, #0]
 801be8c:	3304      	adds	r3, #4
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	429a      	cmp	r2, r3
 801be92:	bf0c      	ite	eq
 801be94:	2301      	moveq	r3, #1
 801be96:	2300      	movne	r3, #0
 801be98:	b2db      	uxtb	r3, r3
 801be9a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801be9c:	697b      	ldr	r3, [r7, #20]
 801be9e:	f103 0208 	add.w	r2, r3, #8
 801bea2:	7cfb      	ldrb	r3, [r7, #19]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d001      	beq.n	801beac <etharp_input+0x98>
 801bea8:	2301      	movs	r3, #1
 801beaa:	e000      	b.n	801beae <etharp_input+0x9a>
 801beac:	2302      	movs	r3, #2
 801beae:	f107 010c 	add.w	r1, r7, #12
 801beb2:	6838      	ldr	r0, [r7, #0]
 801beb4:	f7ff fed8 	bl	801bc68 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801beb8:	697b      	ldr	r3, [r7, #20]
 801beba:	88db      	ldrh	r3, [r3, #6]
 801bebc:	b29b      	uxth	r3, r3
 801bebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801bec2:	d003      	beq.n	801becc <etharp_input+0xb8>
 801bec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801bec8:	d01e      	beq.n	801bf08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801beca:	e020      	b.n	801bf0e <etharp_input+0xfa>
      if (for_us) {
 801becc:	7cfb      	ldrb	r3, [r7, #19]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d01c      	beq.n	801bf0c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801bed2:	683b      	ldr	r3, [r7, #0]
 801bed4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801bed8:	697b      	ldr	r3, [r7, #20]
 801beda:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801bede:	683b      	ldr	r3, [r7, #0]
 801bee0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801bee4:	683b      	ldr	r3, [r7, #0]
 801bee6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801bee8:	697a      	ldr	r2, [r7, #20]
 801beea:	3208      	adds	r2, #8
        etharp_raw(netif,
 801beec:	2102      	movs	r1, #2
 801beee:	9103      	str	r1, [sp, #12]
 801bef0:	f107 010c 	add.w	r1, r7, #12
 801bef4:	9102      	str	r1, [sp, #8]
 801bef6:	9201      	str	r2, [sp, #4]
 801bef8:	9300      	str	r3, [sp, #0]
 801befa:	462b      	mov	r3, r5
 801befc:	4622      	mov	r2, r4
 801befe:	4601      	mov	r1, r0
 801bf00:	6838      	ldr	r0, [r7, #0]
 801bf02:	f000 faeb 	bl	801c4dc <etharp_raw>
      break;
 801bf06:	e001      	b.n	801bf0c <etharp_input+0xf8>
      break;
 801bf08:	bf00      	nop
 801bf0a:	e000      	b.n	801bf0e <etharp_input+0xfa>
      break;
 801bf0c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801bf0e:	6878      	ldr	r0, [r7, #4]
 801bf10:	f7f7 ff4c 	bl	8013dac <pbuf_free>
}
 801bf14:	3718      	adds	r7, #24
 801bf16:	46bd      	mov	sp, r7
 801bf18:	bdb0      	pop	{r4, r5, r7, pc}
 801bf1a:	bf00      	nop
 801bf1c:	080234b4 	.word	0x080234b4
 801bf20:	08023604 	.word	0x08023604
 801bf24:	0802352c 	.word	0x0802352c

0801bf28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b086      	sub	sp, #24
 801bf2c:	af02      	add	r7, sp, #8
 801bf2e:	60f8      	str	r0, [r7, #12]
 801bf30:	60b9      	str	r1, [r7, #8]
 801bf32:	4613      	mov	r3, r2
 801bf34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801bf36:	79fa      	ldrb	r2, [r7, #7]
 801bf38:	4944      	ldr	r1, [pc, #272]	@ (801c04c <etharp_output_to_arp_index+0x124>)
 801bf3a:	4613      	mov	r3, r2
 801bf3c:	005b      	lsls	r3, r3, #1
 801bf3e:	4413      	add	r3, r2
 801bf40:	00db      	lsls	r3, r3, #3
 801bf42:	440b      	add	r3, r1
 801bf44:	3314      	adds	r3, #20
 801bf46:	781b      	ldrb	r3, [r3, #0]
 801bf48:	2b01      	cmp	r3, #1
 801bf4a:	d806      	bhi.n	801bf5a <etharp_output_to_arp_index+0x32>
 801bf4c:	4b40      	ldr	r3, [pc, #256]	@ (801c050 <etharp_output_to_arp_index+0x128>)
 801bf4e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801bf52:	4940      	ldr	r1, [pc, #256]	@ (801c054 <etharp_output_to_arp_index+0x12c>)
 801bf54:	4840      	ldr	r0, [pc, #256]	@ (801c058 <etharp_output_to_arp_index+0x130>)
 801bf56:	f002 ff19 	bl	801ed8c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801bf5a:	79fa      	ldrb	r2, [r7, #7]
 801bf5c:	493b      	ldr	r1, [pc, #236]	@ (801c04c <etharp_output_to_arp_index+0x124>)
 801bf5e:	4613      	mov	r3, r2
 801bf60:	005b      	lsls	r3, r3, #1
 801bf62:	4413      	add	r3, r2
 801bf64:	00db      	lsls	r3, r3, #3
 801bf66:	440b      	add	r3, r1
 801bf68:	3314      	adds	r3, #20
 801bf6a:	781b      	ldrb	r3, [r3, #0]
 801bf6c:	2b02      	cmp	r3, #2
 801bf6e:	d153      	bne.n	801c018 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801bf70:	79fa      	ldrb	r2, [r7, #7]
 801bf72:	4936      	ldr	r1, [pc, #216]	@ (801c04c <etharp_output_to_arp_index+0x124>)
 801bf74:	4613      	mov	r3, r2
 801bf76:	005b      	lsls	r3, r3, #1
 801bf78:	4413      	add	r3, r2
 801bf7a:	00db      	lsls	r3, r3, #3
 801bf7c:	440b      	add	r3, r1
 801bf7e:	3312      	adds	r3, #18
 801bf80:	881b      	ldrh	r3, [r3, #0]
 801bf82:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801bf86:	d919      	bls.n	801bfbc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801bf88:	79fa      	ldrb	r2, [r7, #7]
 801bf8a:	4613      	mov	r3, r2
 801bf8c:	005b      	lsls	r3, r3, #1
 801bf8e:	4413      	add	r3, r2
 801bf90:	00db      	lsls	r3, r3, #3
 801bf92:	4a2e      	ldr	r2, [pc, #184]	@ (801c04c <etharp_output_to_arp_index+0x124>)
 801bf94:	4413      	add	r3, r2
 801bf96:	3304      	adds	r3, #4
 801bf98:	4619      	mov	r1, r3
 801bf9a:	68f8      	ldr	r0, [r7, #12]
 801bf9c:	f000 fb4c 	bl	801c638 <etharp_request>
 801bfa0:	4603      	mov	r3, r0
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d138      	bne.n	801c018 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bfa6:	79fa      	ldrb	r2, [r7, #7]
 801bfa8:	4928      	ldr	r1, [pc, #160]	@ (801c04c <etharp_output_to_arp_index+0x124>)
 801bfaa:	4613      	mov	r3, r2
 801bfac:	005b      	lsls	r3, r3, #1
 801bfae:	4413      	add	r3, r2
 801bfb0:	00db      	lsls	r3, r3, #3
 801bfb2:	440b      	add	r3, r1
 801bfb4:	3314      	adds	r3, #20
 801bfb6:	2203      	movs	r2, #3
 801bfb8:	701a      	strb	r2, [r3, #0]
 801bfba:	e02d      	b.n	801c018 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801bfbc:	79fa      	ldrb	r2, [r7, #7]
 801bfbe:	4923      	ldr	r1, [pc, #140]	@ (801c04c <etharp_output_to_arp_index+0x124>)
 801bfc0:	4613      	mov	r3, r2
 801bfc2:	005b      	lsls	r3, r3, #1
 801bfc4:	4413      	add	r3, r2
 801bfc6:	00db      	lsls	r3, r3, #3
 801bfc8:	440b      	add	r3, r1
 801bfca:	3312      	adds	r3, #18
 801bfcc:	881b      	ldrh	r3, [r3, #0]
 801bfce:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801bfd2:	d321      	bcc.n	801c018 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801bfd4:	79fa      	ldrb	r2, [r7, #7]
 801bfd6:	4613      	mov	r3, r2
 801bfd8:	005b      	lsls	r3, r3, #1
 801bfda:	4413      	add	r3, r2
 801bfdc:	00db      	lsls	r3, r3, #3
 801bfde:	4a1b      	ldr	r2, [pc, #108]	@ (801c04c <etharp_output_to_arp_index+0x124>)
 801bfe0:	4413      	add	r3, r2
 801bfe2:	1d19      	adds	r1, r3, #4
 801bfe4:	79fa      	ldrb	r2, [r7, #7]
 801bfe6:	4613      	mov	r3, r2
 801bfe8:	005b      	lsls	r3, r3, #1
 801bfea:	4413      	add	r3, r2
 801bfec:	00db      	lsls	r3, r3, #3
 801bfee:	3308      	adds	r3, #8
 801bff0:	4a16      	ldr	r2, [pc, #88]	@ (801c04c <etharp_output_to_arp_index+0x124>)
 801bff2:	4413      	add	r3, r2
 801bff4:	3304      	adds	r3, #4
 801bff6:	461a      	mov	r2, r3
 801bff8:	68f8      	ldr	r0, [r7, #12]
 801bffa:	f000 fafb 	bl	801c5f4 <etharp_request_dst>
 801bffe:	4603      	mov	r3, r0
 801c000:	2b00      	cmp	r3, #0
 801c002:	d109      	bne.n	801c018 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c004:	79fa      	ldrb	r2, [r7, #7]
 801c006:	4911      	ldr	r1, [pc, #68]	@ (801c04c <etharp_output_to_arp_index+0x124>)
 801c008:	4613      	mov	r3, r2
 801c00a:	005b      	lsls	r3, r3, #1
 801c00c:	4413      	add	r3, r2
 801c00e:	00db      	lsls	r3, r3, #3
 801c010:	440b      	add	r3, r1
 801c012:	3314      	adds	r3, #20
 801c014:	2203      	movs	r2, #3
 801c016:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c018:	68fb      	ldr	r3, [r7, #12]
 801c01a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801c01e:	79fa      	ldrb	r2, [r7, #7]
 801c020:	4613      	mov	r3, r2
 801c022:	005b      	lsls	r3, r3, #1
 801c024:	4413      	add	r3, r2
 801c026:	00db      	lsls	r3, r3, #3
 801c028:	3308      	adds	r3, #8
 801c02a:	4a08      	ldr	r2, [pc, #32]	@ (801c04c <etharp_output_to_arp_index+0x124>)
 801c02c:	4413      	add	r3, r2
 801c02e:	3304      	adds	r3, #4
 801c030:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c034:	9200      	str	r2, [sp, #0]
 801c036:	460a      	mov	r2, r1
 801c038:	68b9      	ldr	r1, [r7, #8]
 801c03a:	68f8      	ldr	r0, [r7, #12]
 801c03c:	f001 fed2 	bl	801dde4 <ethernet_output>
 801c040:	4603      	mov	r3, r0
}
 801c042:	4618      	mov	r0, r3
 801c044:	3710      	adds	r7, #16
 801c046:	46bd      	mov	sp, r7
 801c048:	bd80      	pop	{r7, pc}
 801c04a:	bf00      	nop
 801c04c:	20022800 	.word	0x20022800
 801c050:	080234b4 	.word	0x080234b4
 801c054:	08023624 	.word	0x08023624
 801c058:	0802352c 	.word	0x0802352c

0801c05c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c05c:	b580      	push	{r7, lr}
 801c05e:	b08a      	sub	sp, #40	@ 0x28
 801c060:	af02      	add	r7, sp, #8
 801c062:	60f8      	str	r0, [r7, #12]
 801c064:	60b9      	str	r1, [r7, #8]
 801c066:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d106      	bne.n	801c080 <etharp_output+0x24>
 801c072:	4b73      	ldr	r3, [pc, #460]	@ (801c240 <etharp_output+0x1e4>)
 801c074:	f240 321e 	movw	r2, #798	@ 0x31e
 801c078:	4972      	ldr	r1, [pc, #456]	@ (801c244 <etharp_output+0x1e8>)
 801c07a:	4873      	ldr	r0, [pc, #460]	@ (801c248 <etharp_output+0x1ec>)
 801c07c:	f002 fe86 	bl	801ed8c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c080:	68bb      	ldr	r3, [r7, #8]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d106      	bne.n	801c094 <etharp_output+0x38>
 801c086:	4b6e      	ldr	r3, [pc, #440]	@ (801c240 <etharp_output+0x1e4>)
 801c088:	f240 321f 	movw	r2, #799	@ 0x31f
 801c08c:	496f      	ldr	r1, [pc, #444]	@ (801c24c <etharp_output+0x1f0>)
 801c08e:	486e      	ldr	r0, [pc, #440]	@ (801c248 <etharp_output+0x1ec>)
 801c090:	f002 fe7c 	bl	801ed8c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	2b00      	cmp	r3, #0
 801c098:	d106      	bne.n	801c0a8 <etharp_output+0x4c>
 801c09a:	4b69      	ldr	r3, [pc, #420]	@ (801c240 <etharp_output+0x1e4>)
 801c09c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801c0a0:	496b      	ldr	r1, [pc, #428]	@ (801c250 <etharp_output+0x1f4>)
 801c0a2:	4869      	ldr	r0, [pc, #420]	@ (801c248 <etharp_output+0x1ec>)
 801c0a4:	f002 fe72 	bl	801ed8c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	68f9      	ldr	r1, [r7, #12]
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	f000 ff8a 	bl	801cfc8 <ip4_addr_isbroadcast_u32>
 801c0b4:	4603      	mov	r3, r0
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d002      	beq.n	801c0c0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c0ba:	4b66      	ldr	r3, [pc, #408]	@ (801c254 <etharp_output+0x1f8>)
 801c0bc:	61fb      	str	r3, [r7, #28]
 801c0be:	e0af      	b.n	801c220 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c0c8:	2be0      	cmp	r3, #224	@ 0xe0
 801c0ca:	d118      	bne.n	801c0fe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c0cc:	2301      	movs	r3, #1
 801c0ce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c0d4:	235e      	movs	r3, #94	@ 0x5e
 801c0d6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	3301      	adds	r3, #1
 801c0dc:	781b      	ldrb	r3, [r3, #0]
 801c0de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c0e2:	b2db      	uxtb	r3, r3
 801c0e4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	3302      	adds	r3, #2
 801c0ea:	781b      	ldrb	r3, [r3, #0]
 801c0ec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	3303      	adds	r3, #3
 801c0f2:	781b      	ldrb	r3, [r3, #0]
 801c0f4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c0f6:	f107 0310 	add.w	r3, r7, #16
 801c0fa:	61fb      	str	r3, [r7, #28]
 801c0fc:	e090      	b.n	801c220 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	681a      	ldr	r2, [r3, #0]
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	3304      	adds	r3, #4
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	405a      	eors	r2, r3
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	3308      	adds	r3, #8
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	4013      	ands	r3, r2
 801c112:	2b00      	cmp	r3, #0
 801c114:	d012      	beq.n	801c13c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c11c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801c120:	4293      	cmp	r3, r2
 801c122:	d00b      	beq.n	801c13c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	330c      	adds	r3, #12
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d003      	beq.n	801c136 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	330c      	adds	r3, #12
 801c132:	61bb      	str	r3, [r7, #24]
 801c134:	e002      	b.n	801c13c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c136:	f06f 0303 	mvn.w	r3, #3
 801c13a:	e07d      	b.n	801c238 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c13c:	4b46      	ldr	r3, [pc, #280]	@ (801c258 <etharp_output+0x1fc>)
 801c13e:	781b      	ldrb	r3, [r3, #0]
 801c140:	4619      	mov	r1, r3
 801c142:	4a46      	ldr	r2, [pc, #280]	@ (801c25c <etharp_output+0x200>)
 801c144:	460b      	mov	r3, r1
 801c146:	005b      	lsls	r3, r3, #1
 801c148:	440b      	add	r3, r1
 801c14a:	00db      	lsls	r3, r3, #3
 801c14c:	4413      	add	r3, r2
 801c14e:	3314      	adds	r3, #20
 801c150:	781b      	ldrb	r3, [r3, #0]
 801c152:	2b01      	cmp	r3, #1
 801c154:	d925      	bls.n	801c1a2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c156:	4b40      	ldr	r3, [pc, #256]	@ (801c258 <etharp_output+0x1fc>)
 801c158:	781b      	ldrb	r3, [r3, #0]
 801c15a:	4619      	mov	r1, r3
 801c15c:	4a3f      	ldr	r2, [pc, #252]	@ (801c25c <etharp_output+0x200>)
 801c15e:	460b      	mov	r3, r1
 801c160:	005b      	lsls	r3, r3, #1
 801c162:	440b      	add	r3, r1
 801c164:	00db      	lsls	r3, r3, #3
 801c166:	4413      	add	r3, r2
 801c168:	3308      	adds	r3, #8
 801c16a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c16c:	68fa      	ldr	r2, [r7, #12]
 801c16e:	429a      	cmp	r2, r3
 801c170:	d117      	bne.n	801c1a2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c172:	69bb      	ldr	r3, [r7, #24]
 801c174:	681a      	ldr	r2, [r3, #0]
 801c176:	4b38      	ldr	r3, [pc, #224]	@ (801c258 <etharp_output+0x1fc>)
 801c178:	781b      	ldrb	r3, [r3, #0]
 801c17a:	4618      	mov	r0, r3
 801c17c:	4937      	ldr	r1, [pc, #220]	@ (801c25c <etharp_output+0x200>)
 801c17e:	4603      	mov	r3, r0
 801c180:	005b      	lsls	r3, r3, #1
 801c182:	4403      	add	r3, r0
 801c184:	00db      	lsls	r3, r3, #3
 801c186:	440b      	add	r3, r1
 801c188:	3304      	adds	r3, #4
 801c18a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c18c:	429a      	cmp	r2, r3
 801c18e:	d108      	bne.n	801c1a2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c190:	4b31      	ldr	r3, [pc, #196]	@ (801c258 <etharp_output+0x1fc>)
 801c192:	781b      	ldrb	r3, [r3, #0]
 801c194:	461a      	mov	r2, r3
 801c196:	68b9      	ldr	r1, [r7, #8]
 801c198:	68f8      	ldr	r0, [r7, #12]
 801c19a:	f7ff fec5 	bl	801bf28 <etharp_output_to_arp_index>
 801c19e:	4603      	mov	r3, r0
 801c1a0:	e04a      	b.n	801c238 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	75fb      	strb	r3, [r7, #23]
 801c1a6:	e031      	b.n	801c20c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c1a8:	7dfa      	ldrb	r2, [r7, #23]
 801c1aa:	492c      	ldr	r1, [pc, #176]	@ (801c25c <etharp_output+0x200>)
 801c1ac:	4613      	mov	r3, r2
 801c1ae:	005b      	lsls	r3, r3, #1
 801c1b0:	4413      	add	r3, r2
 801c1b2:	00db      	lsls	r3, r3, #3
 801c1b4:	440b      	add	r3, r1
 801c1b6:	3314      	adds	r3, #20
 801c1b8:	781b      	ldrb	r3, [r3, #0]
 801c1ba:	2b01      	cmp	r3, #1
 801c1bc:	d923      	bls.n	801c206 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c1be:	7dfa      	ldrb	r2, [r7, #23]
 801c1c0:	4926      	ldr	r1, [pc, #152]	@ (801c25c <etharp_output+0x200>)
 801c1c2:	4613      	mov	r3, r2
 801c1c4:	005b      	lsls	r3, r3, #1
 801c1c6:	4413      	add	r3, r2
 801c1c8:	00db      	lsls	r3, r3, #3
 801c1ca:	440b      	add	r3, r1
 801c1cc:	3308      	adds	r3, #8
 801c1ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c1d0:	68fa      	ldr	r2, [r7, #12]
 801c1d2:	429a      	cmp	r2, r3
 801c1d4:	d117      	bne.n	801c206 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c1d6:	69bb      	ldr	r3, [r7, #24]
 801c1d8:	6819      	ldr	r1, [r3, #0]
 801c1da:	7dfa      	ldrb	r2, [r7, #23]
 801c1dc:	481f      	ldr	r0, [pc, #124]	@ (801c25c <etharp_output+0x200>)
 801c1de:	4613      	mov	r3, r2
 801c1e0:	005b      	lsls	r3, r3, #1
 801c1e2:	4413      	add	r3, r2
 801c1e4:	00db      	lsls	r3, r3, #3
 801c1e6:	4403      	add	r3, r0
 801c1e8:	3304      	adds	r3, #4
 801c1ea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c1ec:	4299      	cmp	r1, r3
 801c1ee:	d10a      	bne.n	801c206 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c1f0:	4a19      	ldr	r2, [pc, #100]	@ (801c258 <etharp_output+0x1fc>)
 801c1f2:	7dfb      	ldrb	r3, [r7, #23]
 801c1f4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c1f6:	7dfb      	ldrb	r3, [r7, #23]
 801c1f8:	461a      	mov	r2, r3
 801c1fa:	68b9      	ldr	r1, [r7, #8]
 801c1fc:	68f8      	ldr	r0, [r7, #12]
 801c1fe:	f7ff fe93 	bl	801bf28 <etharp_output_to_arp_index>
 801c202:	4603      	mov	r3, r0
 801c204:	e018      	b.n	801c238 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c206:	7dfb      	ldrb	r3, [r7, #23]
 801c208:	3301      	adds	r3, #1
 801c20a:	75fb      	strb	r3, [r7, #23]
 801c20c:	7dfb      	ldrb	r3, [r7, #23]
 801c20e:	2b09      	cmp	r3, #9
 801c210:	d9ca      	bls.n	801c1a8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c212:	68ba      	ldr	r2, [r7, #8]
 801c214:	69b9      	ldr	r1, [r7, #24]
 801c216:	68f8      	ldr	r0, [r7, #12]
 801c218:	f000 f822 	bl	801c260 <etharp_query>
 801c21c:	4603      	mov	r3, r0
 801c21e:	e00b      	b.n	801c238 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801c226:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c22a:	9300      	str	r3, [sp, #0]
 801c22c:	69fb      	ldr	r3, [r7, #28]
 801c22e:	68b9      	ldr	r1, [r7, #8]
 801c230:	68f8      	ldr	r0, [r7, #12]
 801c232:	f001 fdd7 	bl	801dde4 <ethernet_output>
 801c236:	4603      	mov	r3, r0
}
 801c238:	4618      	mov	r0, r3
 801c23a:	3720      	adds	r7, #32
 801c23c:	46bd      	mov	sp, r7
 801c23e:	bd80      	pop	{r7, pc}
 801c240:	080234b4 	.word	0x080234b4
 801c244:	08023604 	.word	0x08023604
 801c248:	0802352c 	.word	0x0802352c
 801c24c:	08023654 	.word	0x08023654
 801c250:	080235f4 	.word	0x080235f4
 801c254:	08024338 	.word	0x08024338
 801c258:	200228f0 	.word	0x200228f0
 801c25c:	20022800 	.word	0x20022800

0801c260 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c260:	b580      	push	{r7, lr}
 801c262:	b08c      	sub	sp, #48	@ 0x30
 801c264:	af02      	add	r7, sp, #8
 801c266:	60f8      	str	r0, [r7, #12]
 801c268:	60b9      	str	r1, [r7, #8]
 801c26a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	3326      	adds	r3, #38	@ 0x26
 801c270:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c272:	23ff      	movs	r3, #255	@ 0xff
 801c274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801c278:	2300      	movs	r3, #0
 801c27a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c27c:	68bb      	ldr	r3, [r7, #8]
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	68f9      	ldr	r1, [r7, #12]
 801c282:	4618      	mov	r0, r3
 801c284:	f000 fea0 	bl	801cfc8 <ip4_addr_isbroadcast_u32>
 801c288:	4603      	mov	r3, r0
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d10c      	bne.n	801c2a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c28e:	68bb      	ldr	r3, [r7, #8]
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c296:	2be0      	cmp	r3, #224	@ 0xe0
 801c298:	d006      	beq.n	801c2a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c29a:	68bb      	ldr	r3, [r7, #8]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d003      	beq.n	801c2a8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c2a0:	68bb      	ldr	r3, [r7, #8]
 801c2a2:	681b      	ldr	r3, [r3, #0]
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d102      	bne.n	801c2ae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c2a8:	f06f 030f 	mvn.w	r3, #15
 801c2ac:	e101      	b.n	801c4b2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c2ae:	68fa      	ldr	r2, [r7, #12]
 801c2b0:	2101      	movs	r1, #1
 801c2b2:	68b8      	ldr	r0, [r7, #8]
 801c2b4:	f7ff fb60 	bl	801b978 <etharp_find_entry>
 801c2b8:	4603      	mov	r3, r0
 801c2ba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c2bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	da02      	bge.n	801c2ca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c2c4:	8a7b      	ldrh	r3, [r7, #18]
 801c2c6:	b25b      	sxtb	r3, r3
 801c2c8:	e0f3      	b.n	801c4b2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c2ca:	8a7b      	ldrh	r3, [r7, #18]
 801c2cc:	2b7e      	cmp	r3, #126	@ 0x7e
 801c2ce:	d906      	bls.n	801c2de <etharp_query+0x7e>
 801c2d0:	4b7a      	ldr	r3, [pc, #488]	@ (801c4bc <etharp_query+0x25c>)
 801c2d2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801c2d6:	497a      	ldr	r1, [pc, #488]	@ (801c4c0 <etharp_query+0x260>)
 801c2d8:	487a      	ldr	r0, [pc, #488]	@ (801c4c4 <etharp_query+0x264>)
 801c2da:	f002 fd57 	bl	801ed8c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c2de:	8a7b      	ldrh	r3, [r7, #18]
 801c2e0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c2e2:	7c7a      	ldrb	r2, [r7, #17]
 801c2e4:	4978      	ldr	r1, [pc, #480]	@ (801c4c8 <etharp_query+0x268>)
 801c2e6:	4613      	mov	r3, r2
 801c2e8:	005b      	lsls	r3, r3, #1
 801c2ea:	4413      	add	r3, r2
 801c2ec:	00db      	lsls	r3, r3, #3
 801c2ee:	440b      	add	r3, r1
 801c2f0:	3314      	adds	r3, #20
 801c2f2:	781b      	ldrb	r3, [r3, #0]
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d115      	bne.n	801c324 <etharp_query+0xc4>
    is_new_entry = 1;
 801c2f8:	2301      	movs	r3, #1
 801c2fa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c2fc:	7c7a      	ldrb	r2, [r7, #17]
 801c2fe:	4972      	ldr	r1, [pc, #456]	@ (801c4c8 <etharp_query+0x268>)
 801c300:	4613      	mov	r3, r2
 801c302:	005b      	lsls	r3, r3, #1
 801c304:	4413      	add	r3, r2
 801c306:	00db      	lsls	r3, r3, #3
 801c308:	440b      	add	r3, r1
 801c30a:	3314      	adds	r3, #20
 801c30c:	2201      	movs	r2, #1
 801c30e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c310:	7c7a      	ldrb	r2, [r7, #17]
 801c312:	496d      	ldr	r1, [pc, #436]	@ (801c4c8 <etharp_query+0x268>)
 801c314:	4613      	mov	r3, r2
 801c316:	005b      	lsls	r3, r3, #1
 801c318:	4413      	add	r3, r2
 801c31a:	00db      	lsls	r3, r3, #3
 801c31c:	440b      	add	r3, r1
 801c31e:	3308      	adds	r3, #8
 801c320:	68fa      	ldr	r2, [r7, #12]
 801c322:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c324:	7c7a      	ldrb	r2, [r7, #17]
 801c326:	4968      	ldr	r1, [pc, #416]	@ (801c4c8 <etharp_query+0x268>)
 801c328:	4613      	mov	r3, r2
 801c32a:	005b      	lsls	r3, r3, #1
 801c32c:	4413      	add	r3, r2
 801c32e:	00db      	lsls	r3, r3, #3
 801c330:	440b      	add	r3, r1
 801c332:	3314      	adds	r3, #20
 801c334:	781b      	ldrb	r3, [r3, #0]
 801c336:	2b01      	cmp	r3, #1
 801c338:	d011      	beq.n	801c35e <etharp_query+0xfe>
 801c33a:	7c7a      	ldrb	r2, [r7, #17]
 801c33c:	4962      	ldr	r1, [pc, #392]	@ (801c4c8 <etharp_query+0x268>)
 801c33e:	4613      	mov	r3, r2
 801c340:	005b      	lsls	r3, r3, #1
 801c342:	4413      	add	r3, r2
 801c344:	00db      	lsls	r3, r3, #3
 801c346:	440b      	add	r3, r1
 801c348:	3314      	adds	r3, #20
 801c34a:	781b      	ldrb	r3, [r3, #0]
 801c34c:	2b01      	cmp	r3, #1
 801c34e:	d806      	bhi.n	801c35e <etharp_query+0xfe>
 801c350:	4b5a      	ldr	r3, [pc, #360]	@ (801c4bc <etharp_query+0x25c>)
 801c352:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801c356:	495d      	ldr	r1, [pc, #372]	@ (801c4cc <etharp_query+0x26c>)
 801c358:	485a      	ldr	r0, [pc, #360]	@ (801c4c4 <etharp_query+0x264>)
 801c35a:	f002 fd17 	bl	801ed8c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c35e:	6a3b      	ldr	r3, [r7, #32]
 801c360:	2b00      	cmp	r3, #0
 801c362:	d102      	bne.n	801c36a <etharp_query+0x10a>
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	2b00      	cmp	r3, #0
 801c368:	d10c      	bne.n	801c384 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c36a:	68b9      	ldr	r1, [r7, #8]
 801c36c:	68f8      	ldr	r0, [r7, #12]
 801c36e:	f000 f963 	bl	801c638 <etharp_request>
 801c372:	4603      	mov	r3, r0
 801c374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d102      	bne.n	801c384 <etharp_query+0x124>
      return result;
 801c37e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801c382:	e096      	b.n	801c4b2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	2b00      	cmp	r3, #0
 801c388:	d106      	bne.n	801c398 <etharp_query+0x138>
 801c38a:	4b4c      	ldr	r3, [pc, #304]	@ (801c4bc <etharp_query+0x25c>)
 801c38c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801c390:	494f      	ldr	r1, [pc, #316]	@ (801c4d0 <etharp_query+0x270>)
 801c392:	484c      	ldr	r0, [pc, #304]	@ (801c4c4 <etharp_query+0x264>)
 801c394:	f002 fcfa 	bl	801ed8c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c398:	7c7a      	ldrb	r2, [r7, #17]
 801c39a:	494b      	ldr	r1, [pc, #300]	@ (801c4c8 <etharp_query+0x268>)
 801c39c:	4613      	mov	r3, r2
 801c39e:	005b      	lsls	r3, r3, #1
 801c3a0:	4413      	add	r3, r2
 801c3a2:	00db      	lsls	r3, r3, #3
 801c3a4:	440b      	add	r3, r1
 801c3a6:	3314      	adds	r3, #20
 801c3a8:	781b      	ldrb	r3, [r3, #0]
 801c3aa:	2b01      	cmp	r3, #1
 801c3ac:	d917      	bls.n	801c3de <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c3ae:	4a49      	ldr	r2, [pc, #292]	@ (801c4d4 <etharp_query+0x274>)
 801c3b0:	7c7b      	ldrb	r3, [r7, #17]
 801c3b2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c3b4:	7c7a      	ldrb	r2, [r7, #17]
 801c3b6:	4613      	mov	r3, r2
 801c3b8:	005b      	lsls	r3, r3, #1
 801c3ba:	4413      	add	r3, r2
 801c3bc:	00db      	lsls	r3, r3, #3
 801c3be:	3308      	adds	r3, #8
 801c3c0:	4a41      	ldr	r2, [pc, #260]	@ (801c4c8 <etharp_query+0x268>)
 801c3c2:	4413      	add	r3, r2
 801c3c4:	3304      	adds	r3, #4
 801c3c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c3ca:	9200      	str	r2, [sp, #0]
 801c3cc:	697a      	ldr	r2, [r7, #20]
 801c3ce:	6879      	ldr	r1, [r7, #4]
 801c3d0:	68f8      	ldr	r0, [r7, #12]
 801c3d2:	f001 fd07 	bl	801dde4 <ethernet_output>
 801c3d6:	4603      	mov	r3, r0
 801c3d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c3dc:	e067      	b.n	801c4ae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c3de:	7c7a      	ldrb	r2, [r7, #17]
 801c3e0:	4939      	ldr	r1, [pc, #228]	@ (801c4c8 <etharp_query+0x268>)
 801c3e2:	4613      	mov	r3, r2
 801c3e4:	005b      	lsls	r3, r3, #1
 801c3e6:	4413      	add	r3, r2
 801c3e8:	00db      	lsls	r3, r3, #3
 801c3ea:	440b      	add	r3, r1
 801c3ec:	3314      	adds	r3, #20
 801c3ee:	781b      	ldrb	r3, [r3, #0]
 801c3f0:	2b01      	cmp	r3, #1
 801c3f2:	d15c      	bne.n	801c4ae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c3f4:	2300      	movs	r3, #0
 801c3f6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c3fc:	e01c      	b.n	801c438 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c3fe:	69fb      	ldr	r3, [r7, #28]
 801c400:	895a      	ldrh	r2, [r3, #10]
 801c402:	69fb      	ldr	r3, [r7, #28]
 801c404:	891b      	ldrh	r3, [r3, #8]
 801c406:	429a      	cmp	r2, r3
 801c408:	d10a      	bne.n	801c420 <etharp_query+0x1c0>
 801c40a:	69fb      	ldr	r3, [r7, #28]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d006      	beq.n	801c420 <etharp_query+0x1c0>
 801c412:	4b2a      	ldr	r3, [pc, #168]	@ (801c4bc <etharp_query+0x25c>)
 801c414:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801c418:	492f      	ldr	r1, [pc, #188]	@ (801c4d8 <etharp_query+0x278>)
 801c41a:	482a      	ldr	r0, [pc, #168]	@ (801c4c4 <etharp_query+0x264>)
 801c41c:	f002 fcb6 	bl	801ed8c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c420:	69fb      	ldr	r3, [r7, #28]
 801c422:	7b1b      	ldrb	r3, [r3, #12]
 801c424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d002      	beq.n	801c432 <etharp_query+0x1d2>
        copy_needed = 1;
 801c42c:	2301      	movs	r3, #1
 801c42e:	61bb      	str	r3, [r7, #24]
        break;
 801c430:	e005      	b.n	801c43e <etharp_query+0x1de>
      }
      p = p->next;
 801c432:	69fb      	ldr	r3, [r7, #28]
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c438:	69fb      	ldr	r3, [r7, #28]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d1df      	bne.n	801c3fe <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c43e:	69bb      	ldr	r3, [r7, #24]
 801c440:	2b00      	cmp	r3, #0
 801c442:	d007      	beq.n	801c454 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c444:	687a      	ldr	r2, [r7, #4]
 801c446:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801c44a:	200e      	movs	r0, #14
 801c44c:	f7f7 ff26 	bl	801429c <pbuf_clone>
 801c450:	61f8      	str	r0, [r7, #28]
 801c452:	e004      	b.n	801c45e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c458:	69f8      	ldr	r0, [r7, #28]
 801c45a:	f7f7 fd4d 	bl	8013ef8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c45e:	69fb      	ldr	r3, [r7, #28]
 801c460:	2b00      	cmp	r3, #0
 801c462:	d021      	beq.n	801c4a8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c464:	7c7a      	ldrb	r2, [r7, #17]
 801c466:	4918      	ldr	r1, [pc, #96]	@ (801c4c8 <etharp_query+0x268>)
 801c468:	4613      	mov	r3, r2
 801c46a:	005b      	lsls	r3, r3, #1
 801c46c:	4413      	add	r3, r2
 801c46e:	00db      	lsls	r3, r3, #3
 801c470:	440b      	add	r3, r1
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	2b00      	cmp	r3, #0
 801c476:	d00a      	beq.n	801c48e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c478:	7c7a      	ldrb	r2, [r7, #17]
 801c47a:	4913      	ldr	r1, [pc, #76]	@ (801c4c8 <etharp_query+0x268>)
 801c47c:	4613      	mov	r3, r2
 801c47e:	005b      	lsls	r3, r3, #1
 801c480:	4413      	add	r3, r2
 801c482:	00db      	lsls	r3, r3, #3
 801c484:	440b      	add	r3, r1
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	4618      	mov	r0, r3
 801c48a:	f7f7 fc8f 	bl	8013dac <pbuf_free>
      }
      arp_table[i].q = p;
 801c48e:	7c7a      	ldrb	r2, [r7, #17]
 801c490:	490d      	ldr	r1, [pc, #52]	@ (801c4c8 <etharp_query+0x268>)
 801c492:	4613      	mov	r3, r2
 801c494:	005b      	lsls	r3, r3, #1
 801c496:	4413      	add	r3, r2
 801c498:	00db      	lsls	r3, r3, #3
 801c49a:	440b      	add	r3, r1
 801c49c:	69fa      	ldr	r2, [r7, #28]
 801c49e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c4a0:	2300      	movs	r3, #0
 801c4a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c4a6:	e002      	b.n	801c4ae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c4a8:	23ff      	movs	r3, #255	@ 0xff
 801c4aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801c4ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	3728      	adds	r7, #40	@ 0x28
 801c4b6:	46bd      	mov	sp, r7
 801c4b8:	bd80      	pop	{r7, pc}
 801c4ba:	bf00      	nop
 801c4bc:	080234b4 	.word	0x080234b4
 801c4c0:	08023660 	.word	0x08023660
 801c4c4:	0802352c 	.word	0x0802352c
 801c4c8:	20022800 	.word	0x20022800
 801c4cc:	08023670 	.word	0x08023670
 801c4d0:	08023654 	.word	0x08023654
 801c4d4:	200228f0 	.word	0x200228f0
 801c4d8:	08023698 	.word	0x08023698

0801c4dc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c4dc:	b580      	push	{r7, lr}
 801c4de:	b08a      	sub	sp, #40	@ 0x28
 801c4e0:	af02      	add	r7, sp, #8
 801c4e2:	60f8      	str	r0, [r7, #12]
 801c4e4:	60b9      	str	r1, [r7, #8]
 801c4e6:	607a      	str	r2, [r7, #4]
 801c4e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c4ea:	2300      	movs	r3, #0
 801c4ec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d106      	bne.n	801c502 <etharp_raw+0x26>
 801c4f4:	4b3a      	ldr	r3, [pc, #232]	@ (801c5e0 <etharp_raw+0x104>)
 801c4f6:	f240 4257 	movw	r2, #1111	@ 0x457
 801c4fa:	493a      	ldr	r1, [pc, #232]	@ (801c5e4 <etharp_raw+0x108>)
 801c4fc:	483a      	ldr	r0, [pc, #232]	@ (801c5e8 <etharp_raw+0x10c>)
 801c4fe:	f002 fc45 	bl	801ed8c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c502:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c506:	211c      	movs	r1, #28
 801c508:	200e      	movs	r0, #14
 801c50a:	f7f7 f96b 	bl	80137e4 <pbuf_alloc>
 801c50e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c510:	69bb      	ldr	r3, [r7, #24]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d102      	bne.n	801c51c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c516:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c51a:	e05d      	b.n	801c5d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c51c:	69bb      	ldr	r3, [r7, #24]
 801c51e:	895b      	ldrh	r3, [r3, #10]
 801c520:	2b1b      	cmp	r3, #27
 801c522:	d806      	bhi.n	801c532 <etharp_raw+0x56>
 801c524:	4b2e      	ldr	r3, [pc, #184]	@ (801c5e0 <etharp_raw+0x104>)
 801c526:	f240 4262 	movw	r2, #1122	@ 0x462
 801c52a:	4930      	ldr	r1, [pc, #192]	@ (801c5ec <etharp_raw+0x110>)
 801c52c:	482e      	ldr	r0, [pc, #184]	@ (801c5e8 <etharp_raw+0x10c>)
 801c52e:	f002 fc2d 	bl	801ed8c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c532:	69bb      	ldr	r3, [r7, #24]
 801c534:	685b      	ldr	r3, [r3, #4]
 801c536:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c538:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801c53a:	4618      	mov	r0, r3
 801c53c:	f7f5 ff52 	bl	80123e4 <lwip_htons>
 801c540:	4603      	mov	r3, r0
 801c542:	461a      	mov	r2, r3
 801c544:	697b      	ldr	r3, [r7, #20]
 801c546:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c54e:	2b06      	cmp	r3, #6
 801c550:	d006      	beq.n	801c560 <etharp_raw+0x84>
 801c552:	4b23      	ldr	r3, [pc, #140]	@ (801c5e0 <etharp_raw+0x104>)
 801c554:	f240 4269 	movw	r2, #1129	@ 0x469
 801c558:	4925      	ldr	r1, [pc, #148]	@ (801c5f0 <etharp_raw+0x114>)
 801c55a:	4823      	ldr	r0, [pc, #140]	@ (801c5e8 <etharp_raw+0x10c>)
 801c55c:	f002 fc16 	bl	801ed8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c560:	697b      	ldr	r3, [r7, #20]
 801c562:	3308      	adds	r3, #8
 801c564:	2206      	movs	r2, #6
 801c566:	6839      	ldr	r1, [r7, #0]
 801c568:	4618      	mov	r0, r3
 801c56a:	f002 fde4 	bl	801f136 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c56e:	697b      	ldr	r3, [r7, #20]
 801c570:	3312      	adds	r3, #18
 801c572:	2206      	movs	r2, #6
 801c574:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c576:	4618      	mov	r0, r3
 801c578:	f002 fddd 	bl	801f136 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c57c:	697b      	ldr	r3, [r7, #20]
 801c57e:	330e      	adds	r3, #14
 801c580:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c582:	6812      	ldr	r2, [r2, #0]
 801c584:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c586:	697b      	ldr	r3, [r7, #20]
 801c588:	3318      	adds	r3, #24
 801c58a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c58c:	6812      	ldr	r2, [r2, #0]
 801c58e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c590:	697b      	ldr	r3, [r7, #20]
 801c592:	2200      	movs	r2, #0
 801c594:	701a      	strb	r2, [r3, #0]
 801c596:	2200      	movs	r2, #0
 801c598:	f042 0201 	orr.w	r2, r2, #1
 801c59c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c59e:	697b      	ldr	r3, [r7, #20]
 801c5a0:	2200      	movs	r2, #0
 801c5a2:	f042 0208 	orr.w	r2, r2, #8
 801c5a6:	709a      	strb	r2, [r3, #2]
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c5ac:	697b      	ldr	r3, [r7, #20]
 801c5ae:	2206      	movs	r2, #6
 801c5b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c5b2:	697b      	ldr	r3, [r7, #20]
 801c5b4:	2204      	movs	r2, #4
 801c5b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c5b8:	f640 0306 	movw	r3, #2054	@ 0x806
 801c5bc:	9300      	str	r3, [sp, #0]
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	68ba      	ldr	r2, [r7, #8]
 801c5c2:	69b9      	ldr	r1, [r7, #24]
 801c5c4:	68f8      	ldr	r0, [r7, #12]
 801c5c6:	f001 fc0d 	bl	801dde4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c5ca:	69b8      	ldr	r0, [r7, #24]
 801c5cc:	f7f7 fbee 	bl	8013dac <pbuf_free>
  p = NULL;
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c5d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c5d8:	4618      	mov	r0, r3
 801c5da:	3720      	adds	r7, #32
 801c5dc:	46bd      	mov	sp, r7
 801c5de:	bd80      	pop	{r7, pc}
 801c5e0:	080234b4 	.word	0x080234b4
 801c5e4:	08023604 	.word	0x08023604
 801c5e8:	0802352c 	.word	0x0802352c
 801c5ec:	080236b4 	.word	0x080236b4
 801c5f0:	080236e8 	.word	0x080236e8

0801c5f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c5f4:	b580      	push	{r7, lr}
 801c5f6:	b088      	sub	sp, #32
 801c5f8:	af04      	add	r7, sp, #16
 801c5fa:	60f8      	str	r0, [r7, #12]
 801c5fc:	60b9      	str	r1, [r7, #8]
 801c5fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c610:	2201      	movs	r2, #1
 801c612:	9203      	str	r2, [sp, #12]
 801c614:	68ba      	ldr	r2, [r7, #8]
 801c616:	9202      	str	r2, [sp, #8]
 801c618:	4a06      	ldr	r2, [pc, #24]	@ (801c634 <etharp_request_dst+0x40>)
 801c61a:	9201      	str	r2, [sp, #4]
 801c61c:	9300      	str	r3, [sp, #0]
 801c61e:	4603      	mov	r3, r0
 801c620:	687a      	ldr	r2, [r7, #4]
 801c622:	68f8      	ldr	r0, [r7, #12]
 801c624:	f7ff ff5a 	bl	801c4dc <etharp_raw>
 801c628:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c62a:	4618      	mov	r0, r3
 801c62c:	3710      	adds	r7, #16
 801c62e:	46bd      	mov	sp, r7
 801c630:	bd80      	pop	{r7, pc}
 801c632:	bf00      	nop
 801c634:	08024340 	.word	0x08024340

0801c638 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c638:	b580      	push	{r7, lr}
 801c63a:	b082      	sub	sp, #8
 801c63c:	af00      	add	r7, sp, #0
 801c63e:	6078      	str	r0, [r7, #4]
 801c640:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c642:	4a05      	ldr	r2, [pc, #20]	@ (801c658 <etharp_request+0x20>)
 801c644:	6839      	ldr	r1, [r7, #0]
 801c646:	6878      	ldr	r0, [r7, #4]
 801c648:	f7ff ffd4 	bl	801c5f4 <etharp_request_dst>
 801c64c:	4603      	mov	r3, r0
}
 801c64e:	4618      	mov	r0, r3
 801c650:	3708      	adds	r7, #8
 801c652:	46bd      	mov	sp, r7
 801c654:	bd80      	pop	{r7, pc}
 801c656:	bf00      	nop
 801c658:	08024338 	.word	0x08024338

0801c65c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c65c:	b580      	push	{r7, lr}
 801c65e:	b08e      	sub	sp, #56	@ 0x38
 801c660:	af04      	add	r7, sp, #16
 801c662:	6078      	str	r0, [r7, #4]
 801c664:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c666:	4b95      	ldr	r3, [pc, #596]	@ (801c8bc <icmp_input+0x260>)
 801c668:	689b      	ldr	r3, [r3, #8]
 801c66a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c66e:	781b      	ldrb	r3, [r3, #0]
 801c670:	f003 030f 	and.w	r3, r3, #15
 801c674:	b2db      	uxtb	r3, r3
 801c676:	009b      	lsls	r3, r3, #2
 801c678:	b2db      	uxtb	r3, r3
 801c67a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801c67c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c67e:	2b13      	cmp	r3, #19
 801c680:	d805      	bhi.n	801c68e <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 801c682:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c684:	4619      	mov	r1, r3
 801c686:	488e      	ldr	r0, [pc, #568]	@ (801c8c0 <icmp_input+0x264>)
 801c688:	f002 fb80 	bl	801ed8c <iprintf>
    goto lenerr;
 801c68c:	e10a      	b.n	801c8a4 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	895b      	ldrh	r3, [r3, #10]
 801c692:	2b03      	cmp	r3, #3
 801c694:	d806      	bhi.n	801c6a4 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	891b      	ldrh	r3, [r3, #8]
 801c69a:	4619      	mov	r1, r3
 801c69c:	4889      	ldr	r0, [pc, #548]	@ (801c8c4 <icmp_input+0x268>)
 801c69e:	f002 fb75 	bl	801ed8c <iprintf>
    goto lenerr;
 801c6a2:	e0ff      	b.n	801c8a4 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	685b      	ldr	r3, [r3, #4]
 801c6a8:	781b      	ldrb	r3, [r3, #0]
 801c6aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	685b      	ldr	r3, [r3, #4]
 801c6b2:	785b      	ldrb	r3, [r3, #1]
 801c6b4:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c6b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	f000 80ea 	beq.w	801c896 <icmp_input+0x23a>
 801c6c2:	2b08      	cmp	r3, #8
 801c6c4:	f040 80de 	bne.w	801c884 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c6c8:	4b7f      	ldr	r3, [pc, #508]	@ (801c8c8 <icmp_input+0x26c>)
 801c6ca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c6cc:	4b7b      	ldr	r3, [pc, #492]	@ (801c8bc <icmp_input+0x260>)
 801c6ce:	695b      	ldr	r3, [r3, #20]
 801c6d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c6d4:	2be0      	cmp	r3, #224	@ 0xe0
 801c6d6:	d103      	bne.n	801c6e0 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 801c6d8:	487c      	ldr	r0, [pc, #496]	@ (801c8cc <icmp_input+0x270>)
 801c6da:	f002 fbc7 	bl	801ee6c <puts>
        goto icmperr;
 801c6de:	e0e5      	b.n	801c8ac <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c6e0:	4b76      	ldr	r3, [pc, #472]	@ (801c8bc <icmp_input+0x260>)
 801c6e2:	695b      	ldr	r3, [r3, #20]
 801c6e4:	4a75      	ldr	r2, [pc, #468]	@ (801c8bc <icmp_input+0x260>)
 801c6e6:	6812      	ldr	r2, [r2, #0]
 801c6e8:	4611      	mov	r1, r2
 801c6ea:	4618      	mov	r0, r3
 801c6ec:	f000 fc6c 	bl	801cfc8 <ip4_addr_isbroadcast_u32>
 801c6f0:	4603      	mov	r3, r0
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d003      	beq.n	801c6fe <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 801c6f6:	4876      	ldr	r0, [pc, #472]	@ (801c8d0 <icmp_input+0x274>)
 801c6f8:	f002 fbb8 	bl	801ee6c <puts>
        goto icmperr;
 801c6fc:	e0d6      	b.n	801c8ac <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801c6fe:	4875      	ldr	r0, [pc, #468]	@ (801c8d4 <icmp_input+0x278>)
 801c700:	f002 fbb4 	bl	801ee6c <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	891b      	ldrh	r3, [r3, #8]
 801c708:	2b07      	cmp	r3, #7
 801c70a:	d803      	bhi.n	801c714 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 801c70c:	4872      	ldr	r0, [pc, #456]	@ (801c8d8 <icmp_input+0x27c>)
 801c70e:	f002 fbad 	bl	801ee6c <puts>
        goto lenerr;
 801c712:	e0c7      	b.n	801c8a4 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c714:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c716:	330e      	adds	r3, #14
 801c718:	4619      	mov	r1, r3
 801c71a:	6878      	ldr	r0, [r7, #4]
 801c71c:	f7f7 fab0 	bl	8013c80 <pbuf_add_header>
 801c720:	4603      	mov	r3, r0
 801c722:	2b00      	cmp	r3, #0
 801c724:	d057      	beq.n	801c7d6 <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	891a      	ldrh	r2, [r3, #8]
 801c72a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c72c:	4413      	add	r3, r2
 801c72e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	891b      	ldrh	r3, [r3, #8]
 801c734:	8b7a      	ldrh	r2, [r7, #26]
 801c736:	429a      	cmp	r2, r3
 801c738:	d203      	bcs.n	801c742 <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801c73a:	4868      	ldr	r0, [pc, #416]	@ (801c8dc <icmp_input+0x280>)
 801c73c:	f002 fb96 	bl	801ee6c <puts>
          goto icmperr;
 801c740:	e0b4      	b.n	801c8ac <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c742:	8b7b      	ldrh	r3, [r7, #26]
 801c744:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c748:	4619      	mov	r1, r3
 801c74a:	200e      	movs	r0, #14
 801c74c:	f7f7 f84a 	bl	80137e4 <pbuf_alloc>
 801c750:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c752:	697b      	ldr	r3, [r7, #20]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d103      	bne.n	801c760 <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801c758:	4861      	ldr	r0, [pc, #388]	@ (801c8e0 <icmp_input+0x284>)
 801c75a:	f002 fb87 	bl	801ee6c <puts>
          goto icmperr;
 801c75e:	e0a5      	b.n	801c8ac <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c760:	697b      	ldr	r3, [r7, #20]
 801c762:	895b      	ldrh	r3, [r3, #10]
 801c764:	461a      	mov	r2, r3
 801c766:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c768:	3308      	adds	r3, #8
 801c76a:	429a      	cmp	r2, r3
 801c76c:	d206      	bcs.n	801c77c <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801c76e:	485d      	ldr	r0, [pc, #372]	@ (801c8e4 <icmp_input+0x288>)
 801c770:	f002 fb0c 	bl	801ed8c <iprintf>
          pbuf_free(r);
 801c774:	6978      	ldr	r0, [r7, #20]
 801c776:	f7f7 fb19 	bl	8013dac <pbuf_free>
          goto icmperr;
 801c77a:	e097      	b.n	801c8ac <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c77c:	697b      	ldr	r3, [r7, #20]
 801c77e:	685b      	ldr	r3, [r3, #4]
 801c780:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801c782:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c784:	4618      	mov	r0, r3
 801c786:	f002 fcd6 	bl	801f136 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c78a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c78c:	4619      	mov	r1, r3
 801c78e:	6978      	ldr	r0, [r7, #20]
 801c790:	f7f7 fa86 	bl	8013ca0 <pbuf_remove_header>
 801c794:	4603      	mov	r3, r0
 801c796:	2b00      	cmp	r3, #0
 801c798:	d009      	beq.n	801c7ae <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c79a:	4b53      	ldr	r3, [pc, #332]	@ (801c8e8 <icmp_input+0x28c>)
 801c79c:	22b6      	movs	r2, #182	@ 0xb6
 801c79e:	4953      	ldr	r1, [pc, #332]	@ (801c8ec <icmp_input+0x290>)
 801c7a0:	4853      	ldr	r0, [pc, #332]	@ (801c8f0 <icmp_input+0x294>)
 801c7a2:	f002 faf3 	bl	801ed8c <iprintf>
          pbuf_free(r);
 801c7a6:	6978      	ldr	r0, [r7, #20]
 801c7a8:	f7f7 fb00 	bl	8013dac <pbuf_free>
          goto icmperr;
 801c7ac:	e07e      	b.n	801c8ac <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c7ae:	6879      	ldr	r1, [r7, #4]
 801c7b0:	6978      	ldr	r0, [r7, #20]
 801c7b2:	f7f7 fc2f 	bl	8014014 <pbuf_copy>
 801c7b6:	4603      	mov	r3, r0
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d006      	beq.n	801c7ca <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 801c7bc:	484d      	ldr	r0, [pc, #308]	@ (801c8f4 <icmp_input+0x298>)
 801c7be:	f002 fae5 	bl	801ed8c <iprintf>
          pbuf_free(r);
 801c7c2:	6978      	ldr	r0, [r7, #20]
 801c7c4:	f7f7 faf2 	bl	8013dac <pbuf_free>
          goto icmperr;
 801c7c8:	e070      	b.n	801c8ac <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 801c7ca:	6878      	ldr	r0, [r7, #4]
 801c7cc:	f7f7 faee 	bl	8013dac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c7d0:	697b      	ldr	r3, [r7, #20]
 801c7d2:	607b      	str	r3, [r7, #4]
 801c7d4:	e00f      	b.n	801c7f6 <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c7d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c7d8:	330e      	adds	r3, #14
 801c7da:	4619      	mov	r1, r3
 801c7dc:	6878      	ldr	r0, [r7, #4]
 801c7de:	f7f7 fa5f 	bl	8013ca0 <pbuf_remove_header>
 801c7e2:	4603      	mov	r3, r0
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d006      	beq.n	801c7f6 <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c7e8:	4b3f      	ldr	r3, [pc, #252]	@ (801c8e8 <icmp_input+0x28c>)
 801c7ea:	22c7      	movs	r2, #199	@ 0xc7
 801c7ec:	4942      	ldr	r1, [pc, #264]	@ (801c8f8 <icmp_input+0x29c>)
 801c7ee:	4840      	ldr	r0, [pc, #256]	@ (801c8f0 <icmp_input+0x294>)
 801c7f0:	f002 facc 	bl	801ed8c <iprintf>
          goto icmperr;
 801c7f4:	e05a      	b.n	801c8ac <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	685b      	ldr	r3, [r3, #4]
 801c7fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c7fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c7fe:	4619      	mov	r1, r3
 801c800:	6878      	ldr	r0, [r7, #4]
 801c802:	f7f7 fa3d 	bl	8013c80 <pbuf_add_header>
 801c806:	4603      	mov	r3, r0
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d003      	beq.n	801c814 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 801c80c:	483b      	ldr	r0, [pc, #236]	@ (801c8fc <icmp_input+0x2a0>)
 801c80e:	f002 fabd 	bl	801ed8c <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c812:	e042      	b.n	801c89a <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	685b      	ldr	r3, [r3, #4]
 801c818:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c81a:	69fb      	ldr	r3, [r7, #28]
 801c81c:	681a      	ldr	r2, [r3, #0]
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c822:	4b26      	ldr	r3, [pc, #152]	@ (801c8bc <icmp_input+0x260>)
 801c824:	691a      	ldr	r2, [r3, #16]
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c82a:	693b      	ldr	r3, [r7, #16]
 801c82c:	2200      	movs	r2, #0
 801c82e:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801c830:	693b      	ldr	r3, [r7, #16]
 801c832:	2200      	movs	r2, #0
 801c834:	709a      	strb	r2, [r3, #2]
 801c836:	2200      	movs	r2, #0
 801c838:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c83a:	68fb      	ldr	r3, [r7, #12]
 801c83c:	22ff      	movs	r2, #255	@ 0xff
 801c83e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	2200      	movs	r2, #0
 801c844:	729a      	strb	r2, [r3, #10]
 801c846:	2200      	movs	r2, #0
 801c848:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c84a:	683b      	ldr	r3, [r7, #0]
 801c84c:	9302      	str	r3, [sp, #8]
 801c84e:	2301      	movs	r3, #1
 801c850:	9301      	str	r3, [sp, #4]
 801c852:	2300      	movs	r3, #0
 801c854:	9300      	str	r3, [sp, #0]
 801c856:	23ff      	movs	r3, #255	@ 0xff
 801c858:	2200      	movs	r2, #0
 801c85a:	69f9      	ldr	r1, [r7, #28]
 801c85c:	6878      	ldr	r0, [r7, #4]
 801c85e:	f000 fadb 	bl	801ce18 <ip4_output_if>
 801c862:	4603      	mov	r3, r0
 801c864:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801c866:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d015      	beq.n	801c89a <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801c86e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801c872:	4618      	mov	r0, r3
 801c874:	f7f5 fb60 	bl	8011f38 <lwip_strerr>
 801c878:	4603      	mov	r3, r0
 801c87a:	4619      	mov	r1, r3
 801c87c:	4820      	ldr	r0, [pc, #128]	@ (801c900 <icmp_input+0x2a4>)
 801c87e:	f002 fa85 	bl	801ed8c <iprintf>
      break;
 801c882:	e00a      	b.n	801c89a <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801c884:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801c888:	f897 2020 	ldrb.w	r2, [r7, #32]
 801c88c:	4619      	mov	r1, r3
 801c88e:	481d      	ldr	r0, [pc, #116]	@ (801c904 <icmp_input+0x2a8>)
 801c890:	f002 fa7c 	bl	801ed8c <iprintf>
 801c894:	e002      	b.n	801c89c <icmp_input+0x240>
      break;
 801c896:	bf00      	nop
 801c898:	e000      	b.n	801c89c <icmp_input+0x240>
      break;
 801c89a:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c89c:	6878      	ldr	r0, [r7, #4]
 801c89e:	f7f7 fa85 	bl	8013dac <pbuf_free>
  return;
 801c8a2:	e007      	b.n	801c8b4 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 801c8a4:	6878      	ldr	r0, [r7, #4]
 801c8a6:	f7f7 fa81 	bl	8013dac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c8aa:	e003      	b.n	801c8b4 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c8ac:	6878      	ldr	r0, [r7, #4]
 801c8ae:	f7f7 fa7d 	bl	8013dac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c8b2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c8b4:	3728      	adds	r7, #40	@ 0x28
 801c8b6:	46bd      	mov	sp, r7
 801c8b8:	bd80      	pop	{r7, pc}
 801c8ba:	bf00      	nop
 801c8bc:	2001f65c 	.word	0x2001f65c
 801c8c0:	0802372c 	.word	0x0802372c
 801c8c4:	08023760 	.word	0x08023760
 801c8c8:	2001f670 	.word	0x2001f670
 801c8cc:	08023790 	.word	0x08023790
 801c8d0:	080237bc 	.word	0x080237bc
 801c8d4:	080237e8 	.word	0x080237e8
 801c8d8:	080237fc 	.word	0x080237fc
 801c8dc:	08023820 	.word	0x08023820
 801c8e0:	0802385c 	.word	0x0802385c
 801c8e4:	08023884 	.word	0x08023884
 801c8e8:	080238ac 	.word	0x080238ac
 801c8ec:	080238e4 	.word	0x080238e4
 801c8f0:	0802391c 	.word	0x0802391c
 801c8f4:	08023944 	.word	0x08023944
 801c8f8:	0802396c 	.word	0x0802396c
 801c8fc:	080239a0 	.word	0x080239a0
 801c900:	080239c4 	.word	0x080239c4
 801c904:	080239f4 	.word	0x080239f4

0801c908 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c908:	b580      	push	{r7, lr}
 801c90a:	b082      	sub	sp, #8
 801c90c:	af00      	add	r7, sp, #0
 801c90e:	6078      	str	r0, [r7, #4]
 801c910:	460b      	mov	r3, r1
 801c912:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c914:	78fb      	ldrb	r3, [r7, #3]
 801c916:	461a      	mov	r2, r3
 801c918:	2103      	movs	r1, #3
 801c91a:	6878      	ldr	r0, [r7, #4]
 801c91c:	f000 f814 	bl	801c948 <icmp_send_response>
}
 801c920:	bf00      	nop
 801c922:	3708      	adds	r7, #8
 801c924:	46bd      	mov	sp, r7
 801c926:	bd80      	pop	{r7, pc}

0801c928 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c928:	b580      	push	{r7, lr}
 801c92a:	b082      	sub	sp, #8
 801c92c:	af00      	add	r7, sp, #0
 801c92e:	6078      	str	r0, [r7, #4]
 801c930:	460b      	mov	r3, r1
 801c932:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c934:	78fb      	ldrb	r3, [r7, #3]
 801c936:	461a      	mov	r2, r3
 801c938:	210b      	movs	r1, #11
 801c93a:	6878      	ldr	r0, [r7, #4]
 801c93c:	f000 f804 	bl	801c948 <icmp_send_response>
}
 801c940:	bf00      	nop
 801c942:	3708      	adds	r7, #8
 801c944:	46bd      	mov	sp, r7
 801c946:	bd80      	pop	{r7, pc}

0801c948 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c948:	b580      	push	{r7, lr}
 801c94a:	b08c      	sub	sp, #48	@ 0x30
 801c94c:	af04      	add	r7, sp, #16
 801c94e:	6078      	str	r0, [r7, #4]
 801c950:	460b      	mov	r3, r1
 801c952:	70fb      	strb	r3, [r7, #3]
 801c954:	4613      	mov	r3, r2
 801c956:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c958:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c95c:	2124      	movs	r1, #36	@ 0x24
 801c95e:	2022      	movs	r0, #34	@ 0x22
 801c960:	f7f6 ff40 	bl	80137e4 <pbuf_alloc>
 801c964:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c966:	69fb      	ldr	r3, [r7, #28]
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d103      	bne.n	801c974 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 801c96c:	4844      	ldr	r0, [pc, #272]	@ (801ca80 <icmp_send_response+0x138>)
 801c96e:	f002 fa7d 	bl	801ee6c <puts>
 801c972:	e082      	b.n	801ca7a <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c974:	69fb      	ldr	r3, [r7, #28]
 801c976:	895b      	ldrh	r3, [r3, #10]
 801c978:	2b23      	cmp	r3, #35	@ 0x23
 801c97a:	d806      	bhi.n	801c98a <icmp_send_response+0x42>
 801c97c:	4b41      	ldr	r3, [pc, #260]	@ (801ca84 <icmp_send_response+0x13c>)
 801c97e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801c982:	4941      	ldr	r1, [pc, #260]	@ (801ca88 <icmp_send_response+0x140>)
 801c984:	4841      	ldr	r0, [pc, #260]	@ (801ca8c <icmp_send_response+0x144>)
 801c986:	f002 fa01 	bl	801ed8c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	685b      	ldr	r3, [r3, #4]
 801c98e:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 801c990:	483f      	ldr	r0, [pc, #252]	@ (801ca90 <icmp_send_response+0x148>)
 801c992:	f002 f9fb 	bl	801ed8c <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801c996:	69bb      	ldr	r3, [r7, #24]
 801c998:	68db      	ldr	r3, [r3, #12]
 801c99a:	b2db      	uxtb	r3, r3
 801c99c:	4619      	mov	r1, r3
 801c99e:	69bb      	ldr	r3, [r7, #24]
 801c9a0:	68db      	ldr	r3, [r3, #12]
 801c9a2:	0a1b      	lsrs	r3, r3, #8
 801c9a4:	b2db      	uxtb	r3, r3
 801c9a6:	461a      	mov	r2, r3
 801c9a8:	69bb      	ldr	r3, [r7, #24]
 801c9aa:	68db      	ldr	r3, [r3, #12]
 801c9ac:	0c1b      	lsrs	r3, r3, #16
 801c9ae:	b2db      	uxtb	r3, r3
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	69bb      	ldr	r3, [r7, #24]
 801c9b4:	68db      	ldr	r3, [r3, #12]
 801c9b6:	0e1b      	lsrs	r3, r3, #24
 801c9b8:	b2db      	uxtb	r3, r3
 801c9ba:	9300      	str	r3, [sp, #0]
 801c9bc:	4603      	mov	r3, r0
 801c9be:	4835      	ldr	r0, [pc, #212]	@ (801ca94 <icmp_send_response+0x14c>)
 801c9c0:	f002 f9e4 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 801c9c4:	4834      	ldr	r0, [pc, #208]	@ (801ca98 <icmp_send_response+0x150>)
 801c9c6:	f002 f9e1 	bl	801ed8c <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801c9ca:	69bb      	ldr	r3, [r7, #24]
 801c9cc:	691b      	ldr	r3, [r3, #16]
 801c9ce:	b2db      	uxtb	r3, r3
 801c9d0:	4619      	mov	r1, r3
 801c9d2:	69bb      	ldr	r3, [r7, #24]
 801c9d4:	691b      	ldr	r3, [r3, #16]
 801c9d6:	0a1b      	lsrs	r3, r3, #8
 801c9d8:	b2db      	uxtb	r3, r3
 801c9da:	461a      	mov	r2, r3
 801c9dc:	69bb      	ldr	r3, [r7, #24]
 801c9de:	691b      	ldr	r3, [r3, #16]
 801c9e0:	0c1b      	lsrs	r3, r3, #16
 801c9e2:	b2db      	uxtb	r3, r3
 801c9e4:	4618      	mov	r0, r3
 801c9e6:	69bb      	ldr	r3, [r7, #24]
 801c9e8:	691b      	ldr	r3, [r3, #16]
 801c9ea:	0e1b      	lsrs	r3, r3, #24
 801c9ec:	b2db      	uxtb	r3, r3
 801c9ee:	9300      	str	r3, [sp, #0]
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	4828      	ldr	r0, [pc, #160]	@ (801ca94 <icmp_send_response+0x14c>)
 801c9f4:	f002 f9ca 	bl	801ed8c <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 801c9f8:	200a      	movs	r0, #10
 801c9fa:	f002 f9d9 	bl	801edb0 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c9fe:	69fb      	ldr	r3, [r7, #28]
 801ca00:	685b      	ldr	r3, [r3, #4]
 801ca02:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ca04:	697b      	ldr	r3, [r7, #20]
 801ca06:	78fa      	ldrb	r2, [r7, #3]
 801ca08:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ca0a:	697b      	ldr	r3, [r7, #20]
 801ca0c:	78ba      	ldrb	r2, [r7, #2]
 801ca0e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801ca10:	697b      	ldr	r3, [r7, #20]
 801ca12:	2200      	movs	r2, #0
 801ca14:	711a      	strb	r2, [r3, #4]
 801ca16:	2200      	movs	r2, #0
 801ca18:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801ca1a:	697b      	ldr	r3, [r7, #20]
 801ca1c:	2200      	movs	r2, #0
 801ca1e:	719a      	strb	r2, [r3, #6]
 801ca20:	2200      	movs	r2, #0
 801ca22:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ca24:	69fb      	ldr	r3, [r7, #28]
 801ca26:	685b      	ldr	r3, [r3, #4]
 801ca28:	f103 0008 	add.w	r0, r3, #8
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	685b      	ldr	r3, [r3, #4]
 801ca30:	221c      	movs	r2, #28
 801ca32:	4619      	mov	r1, r3
 801ca34:	f002 fb7f 	bl	801f136 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801ca38:	69bb      	ldr	r3, [r7, #24]
 801ca3a:	68db      	ldr	r3, [r3, #12]
 801ca3c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ca3e:	f107 030c 	add.w	r3, r7, #12
 801ca42:	4618      	mov	r0, r3
 801ca44:	f000 f82a 	bl	801ca9c <ip4_route>
 801ca48:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ca4a:	693b      	ldr	r3, [r7, #16]
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d011      	beq.n	801ca74 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ca50:	697b      	ldr	r3, [r7, #20]
 801ca52:	2200      	movs	r2, #0
 801ca54:	709a      	strb	r2, [r3, #2]
 801ca56:	2200      	movs	r2, #0
 801ca58:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ca5a:	f107 020c 	add.w	r2, r7, #12
 801ca5e:	693b      	ldr	r3, [r7, #16]
 801ca60:	9302      	str	r3, [sp, #8]
 801ca62:	2301      	movs	r3, #1
 801ca64:	9301      	str	r3, [sp, #4]
 801ca66:	2300      	movs	r3, #0
 801ca68:	9300      	str	r3, [sp, #0]
 801ca6a:	23ff      	movs	r3, #255	@ 0xff
 801ca6c:	2100      	movs	r1, #0
 801ca6e:	69f8      	ldr	r0, [r7, #28]
 801ca70:	f000 f9d2 	bl	801ce18 <ip4_output_if>
  }
  pbuf_free(q);
 801ca74:	69f8      	ldr	r0, [r7, #28]
 801ca76:	f7f7 f999 	bl	8013dac <pbuf_free>
}
 801ca7a:	3720      	adds	r7, #32
 801ca7c:	46bd      	mov	sp, r7
 801ca7e:	bd80      	pop	{r7, pc}
 801ca80:	08023a28 	.word	0x08023a28
 801ca84:	080238ac 	.word	0x080238ac
 801ca88:	08023a68 	.word	0x08023a68
 801ca8c:	0802391c 	.word	0x0802391c
 801ca90:	08023a94 	.word	0x08023a94
 801ca94:	08023ab0 	.word	0x08023ab0
 801ca98:	08023ac0 	.word	0x08023ac0

0801ca9c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ca9c:	b480      	push	{r7}
 801ca9e:	b085      	sub	sp, #20
 801caa0:	af00      	add	r7, sp, #0
 801caa2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801caa4:	4b33      	ldr	r3, [pc, #204]	@ (801cb74 <ip4_route+0xd8>)
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	60fb      	str	r3, [r7, #12]
 801caaa:	e036      	b.n	801cb1a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cab2:	f003 0301 	and.w	r3, r3, #1
 801cab6:	b2db      	uxtb	r3, r3
 801cab8:	2b00      	cmp	r3, #0
 801caba:	d02b      	beq.n	801cb14 <ip4_route+0x78>
 801cabc:	68fb      	ldr	r3, [r7, #12]
 801cabe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cac2:	089b      	lsrs	r3, r3, #2
 801cac4:	f003 0301 	and.w	r3, r3, #1
 801cac8:	b2db      	uxtb	r3, r3
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d022      	beq.n	801cb14 <ip4_route+0x78>
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	3304      	adds	r3, #4
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d01d      	beq.n	801cb14 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	681a      	ldr	r2, [r3, #0]
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	3304      	adds	r3, #4
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	405a      	eors	r2, r3
 801cae4:	68fb      	ldr	r3, [r7, #12]
 801cae6:	3308      	adds	r3, #8
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	4013      	ands	r3, r2
 801caec:	2b00      	cmp	r3, #0
 801caee:	d101      	bne.n	801caf4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	e038      	b.n	801cb66 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801caf4:	68fb      	ldr	r3, [r7, #12]
 801caf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cafa:	f003 0302 	and.w	r3, r3, #2
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d108      	bne.n	801cb14 <ip4_route+0x78>
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	681a      	ldr	r2, [r3, #0]
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	330c      	adds	r3, #12
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	429a      	cmp	r2, r3
 801cb0e:	d101      	bne.n	801cb14 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	e028      	b.n	801cb66 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	60fb      	str	r3, [r7, #12]
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d1c5      	bne.n	801caac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cb20:	4b15      	ldr	r3, [pc, #84]	@ (801cb78 <ip4_route+0xdc>)
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d01a      	beq.n	801cb5e <ip4_route+0xc2>
 801cb28:	4b13      	ldr	r3, [pc, #76]	@ (801cb78 <ip4_route+0xdc>)
 801cb2a:	681b      	ldr	r3, [r3, #0]
 801cb2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cb30:	f003 0301 	and.w	r3, r3, #1
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d012      	beq.n	801cb5e <ip4_route+0xc2>
 801cb38:	4b0f      	ldr	r3, [pc, #60]	@ (801cb78 <ip4_route+0xdc>)
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cb40:	f003 0304 	and.w	r3, r3, #4
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d00a      	beq.n	801cb5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801cb48:	4b0b      	ldr	r3, [pc, #44]	@ (801cb78 <ip4_route+0xdc>)
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	3304      	adds	r3, #4
 801cb4e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d004      	beq.n	801cb5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	b2db      	uxtb	r3, r3
 801cb5a:	2b7f      	cmp	r3, #127	@ 0x7f
 801cb5c:	d101      	bne.n	801cb62 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801cb5e:	2300      	movs	r3, #0
 801cb60:	e001      	b.n	801cb66 <ip4_route+0xca>
  }

  return netif_default;
 801cb62:	4b05      	ldr	r3, [pc, #20]	@ (801cb78 <ip4_route+0xdc>)
 801cb64:	681b      	ldr	r3, [r3, #0]
}
 801cb66:	4618      	mov	r0, r3
 801cb68:	3714      	adds	r7, #20
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb70:	4770      	bx	lr
 801cb72:	bf00      	nop
 801cb74:	20022790 	.word	0x20022790
 801cb78:	20022794 	.word	0x20022794

0801cb7c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801cb7c:	b580      	push	{r7, lr}
 801cb7e:	b082      	sub	sp, #8
 801cb80:	af00      	add	r7, sp, #0
 801cb82:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cb8a:	f003 0301 	and.w	r3, r3, #1
 801cb8e:	b2db      	uxtb	r3, r3
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d016      	beq.n	801cbc2 <ip4_input_accept+0x46>
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	3304      	adds	r3, #4
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d011      	beq.n	801cbc2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cb9e:	4b0b      	ldr	r3, [pc, #44]	@ (801cbcc <ip4_input_accept+0x50>)
 801cba0:	695a      	ldr	r2, [r3, #20]
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	3304      	adds	r3, #4
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	429a      	cmp	r2, r3
 801cbaa:	d008      	beq.n	801cbbe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801cbac:	4b07      	ldr	r3, [pc, #28]	@ (801cbcc <ip4_input_accept+0x50>)
 801cbae:	695b      	ldr	r3, [r3, #20]
 801cbb0:	6879      	ldr	r1, [r7, #4]
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	f000 fa08 	bl	801cfc8 <ip4_addr_isbroadcast_u32>
 801cbb8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d001      	beq.n	801cbc2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801cbbe:	2301      	movs	r3, #1
 801cbc0:	e000      	b.n	801cbc4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801cbc2:	2300      	movs	r3, #0
}
 801cbc4:	4618      	mov	r0, r3
 801cbc6:	3708      	adds	r7, #8
 801cbc8:	46bd      	mov	sp, r7
 801cbca:	bd80      	pop	{r7, pc}
 801cbcc:	2001f65c 	.word	0x2001f65c

0801cbd0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801cbd0:	b580      	push	{r7, lr}
 801cbd2:	b086      	sub	sp, #24
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	6078      	str	r0, [r7, #4]
 801cbd8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	685b      	ldr	r3, [r3, #4]
 801cbde:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801cbe0:	693b      	ldr	r3, [r7, #16]
 801cbe2:	781b      	ldrb	r3, [r3, #0]
 801cbe4:	091b      	lsrs	r3, r3, #4
 801cbe6:	b2db      	uxtb	r3, r3
 801cbe8:	2b04      	cmp	r3, #4
 801cbea:	d004      	beq.n	801cbf6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801cbec:	6878      	ldr	r0, [r7, #4]
 801cbee:	f7f7 f8dd 	bl	8013dac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801cbf2:	2300      	movs	r3, #0
 801cbf4:	e107      	b.n	801ce06 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801cbf6:	693b      	ldr	r3, [r7, #16]
 801cbf8:	781b      	ldrb	r3, [r3, #0]
 801cbfa:	f003 030f 	and.w	r3, r3, #15
 801cbfe:	b2db      	uxtb	r3, r3
 801cc00:	009b      	lsls	r3, r3, #2
 801cc02:	b2db      	uxtb	r3, r3
 801cc04:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801cc06:	693b      	ldr	r3, [r7, #16]
 801cc08:	885b      	ldrh	r3, [r3, #2]
 801cc0a:	b29b      	uxth	r3, r3
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	f7f5 fbe9 	bl	80123e4 <lwip_htons>
 801cc12:	4603      	mov	r3, r0
 801cc14:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	891b      	ldrh	r3, [r3, #8]
 801cc1a:	89ba      	ldrh	r2, [r7, #12]
 801cc1c:	429a      	cmp	r2, r3
 801cc1e:	d204      	bcs.n	801cc2a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801cc20:	89bb      	ldrh	r3, [r7, #12]
 801cc22:	4619      	mov	r1, r3
 801cc24:	6878      	ldr	r0, [r7, #4]
 801cc26:	f7f6 ff3b 	bl	8013aa0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	895b      	ldrh	r3, [r3, #10]
 801cc2e:	89fa      	ldrh	r2, [r7, #14]
 801cc30:	429a      	cmp	r2, r3
 801cc32:	d807      	bhi.n	801cc44 <ip4_input+0x74>
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	891b      	ldrh	r3, [r3, #8]
 801cc38:	89ba      	ldrh	r2, [r7, #12]
 801cc3a:	429a      	cmp	r2, r3
 801cc3c:	d802      	bhi.n	801cc44 <ip4_input+0x74>
 801cc3e:	89fb      	ldrh	r3, [r7, #14]
 801cc40:	2b13      	cmp	r3, #19
 801cc42:	d804      	bhi.n	801cc4e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801cc44:	6878      	ldr	r0, [r7, #4]
 801cc46:	f7f7 f8b1 	bl	8013dac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801cc4a:	2300      	movs	r3, #0
 801cc4c:	e0db      	b.n	801ce06 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801cc4e:	693b      	ldr	r3, [r7, #16]
 801cc50:	691b      	ldr	r3, [r3, #16]
 801cc52:	4a6f      	ldr	r2, [pc, #444]	@ (801ce10 <ip4_input+0x240>)
 801cc54:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801cc56:	693b      	ldr	r3, [r7, #16]
 801cc58:	68db      	ldr	r3, [r3, #12]
 801cc5a:	4a6d      	ldr	r2, [pc, #436]	@ (801ce10 <ip4_input+0x240>)
 801cc5c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cc5e:	4b6c      	ldr	r3, [pc, #432]	@ (801ce10 <ip4_input+0x240>)
 801cc60:	695b      	ldr	r3, [r3, #20]
 801cc62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cc66:	2be0      	cmp	r3, #224	@ 0xe0
 801cc68:	d112      	bne.n	801cc90 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801cc6a:	683b      	ldr	r3, [r7, #0]
 801cc6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cc70:	f003 0301 	and.w	r3, r3, #1
 801cc74:	b2db      	uxtb	r3, r3
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	d007      	beq.n	801cc8a <ip4_input+0xba>
 801cc7a:	683b      	ldr	r3, [r7, #0]
 801cc7c:	3304      	adds	r3, #4
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d002      	beq.n	801cc8a <ip4_input+0xba>
      netif = inp;
 801cc84:	683b      	ldr	r3, [r7, #0]
 801cc86:	617b      	str	r3, [r7, #20]
 801cc88:	e02a      	b.n	801cce0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	617b      	str	r3, [r7, #20]
 801cc8e:	e027      	b.n	801cce0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801cc90:	6838      	ldr	r0, [r7, #0]
 801cc92:	f7ff ff73 	bl	801cb7c <ip4_input_accept>
 801cc96:	4603      	mov	r3, r0
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d002      	beq.n	801cca2 <ip4_input+0xd2>
      netif = inp;
 801cc9c:	683b      	ldr	r3, [r7, #0]
 801cc9e:	617b      	str	r3, [r7, #20]
 801cca0:	e01e      	b.n	801cce0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801cca2:	2300      	movs	r3, #0
 801cca4:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801cca6:	4b5a      	ldr	r3, [pc, #360]	@ (801ce10 <ip4_input+0x240>)
 801cca8:	695b      	ldr	r3, [r3, #20]
 801ccaa:	b2db      	uxtb	r3, r3
 801ccac:	2b7f      	cmp	r3, #127	@ 0x7f
 801ccae:	d017      	beq.n	801cce0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801ccb0:	4b58      	ldr	r3, [pc, #352]	@ (801ce14 <ip4_input+0x244>)
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	617b      	str	r3, [r7, #20]
 801ccb6:	e00e      	b.n	801ccd6 <ip4_input+0x106>
          if (netif == inp) {
 801ccb8:	697a      	ldr	r2, [r7, #20]
 801ccba:	683b      	ldr	r3, [r7, #0]
 801ccbc:	429a      	cmp	r2, r3
 801ccbe:	d006      	beq.n	801ccce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801ccc0:	6978      	ldr	r0, [r7, #20]
 801ccc2:	f7ff ff5b 	bl	801cb7c <ip4_input_accept>
 801ccc6:	4603      	mov	r3, r0
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d108      	bne.n	801ccde <ip4_input+0x10e>
 801cccc:	e000      	b.n	801ccd0 <ip4_input+0x100>
            continue;
 801ccce:	bf00      	nop
        NETIF_FOREACH(netif) {
 801ccd0:	697b      	ldr	r3, [r7, #20]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	617b      	str	r3, [r7, #20]
 801ccd6:	697b      	ldr	r3, [r7, #20]
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d1ed      	bne.n	801ccb8 <ip4_input+0xe8>
 801ccdc:	e000      	b.n	801cce0 <ip4_input+0x110>
            break;
 801ccde:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cce0:	4b4b      	ldr	r3, [pc, #300]	@ (801ce10 <ip4_input+0x240>)
 801cce2:	691b      	ldr	r3, [r3, #16]
 801cce4:	6839      	ldr	r1, [r7, #0]
 801cce6:	4618      	mov	r0, r3
 801cce8:	f000 f96e 	bl	801cfc8 <ip4_addr_isbroadcast_u32>
 801ccec:	4603      	mov	r3, r0
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d105      	bne.n	801ccfe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ccf2:	4b47      	ldr	r3, [pc, #284]	@ (801ce10 <ip4_input+0x240>)
 801ccf4:	691b      	ldr	r3, [r3, #16]
 801ccf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ccfa:	2be0      	cmp	r3, #224	@ 0xe0
 801ccfc:	d104      	bne.n	801cd08 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ccfe:	6878      	ldr	r0, [r7, #4]
 801cd00:	f7f7 f854 	bl	8013dac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801cd04:	2300      	movs	r3, #0
 801cd06:	e07e      	b.n	801ce06 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801cd08:	697b      	ldr	r3, [r7, #20]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d104      	bne.n	801cd18 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801cd0e:	6878      	ldr	r0, [r7, #4]
 801cd10:	f7f7 f84c 	bl	8013dac <pbuf_free>
    return ERR_OK;
 801cd14:	2300      	movs	r3, #0
 801cd16:	e076      	b.n	801ce06 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801cd18:	693b      	ldr	r3, [r7, #16]
 801cd1a:	88db      	ldrh	r3, [r3, #6]
 801cd1c:	b29b      	uxth	r3, r3
 801cd1e:	461a      	mov	r2, r3
 801cd20:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801cd24:	4013      	ands	r3, r2
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d00b      	beq.n	801cd42 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801cd2a:	6878      	ldr	r0, [r7, #4]
 801cd2c:	f000 fc92 	bl	801d654 <ip4_reass>
 801cd30:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d101      	bne.n	801cd3c <ip4_input+0x16c>
      return ERR_OK;
 801cd38:	2300      	movs	r3, #0
 801cd3a:	e064      	b.n	801ce06 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	685b      	ldr	r3, [r3, #4]
 801cd40:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801cd42:	4a33      	ldr	r2, [pc, #204]	@ (801ce10 <ip4_input+0x240>)
 801cd44:	697b      	ldr	r3, [r7, #20]
 801cd46:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801cd48:	4a31      	ldr	r2, [pc, #196]	@ (801ce10 <ip4_input+0x240>)
 801cd4a:	683b      	ldr	r3, [r7, #0]
 801cd4c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801cd4e:	4a30      	ldr	r2, [pc, #192]	@ (801ce10 <ip4_input+0x240>)
 801cd50:	693b      	ldr	r3, [r7, #16]
 801cd52:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801cd54:	693b      	ldr	r3, [r7, #16]
 801cd56:	781b      	ldrb	r3, [r3, #0]
 801cd58:	f003 030f 	and.w	r3, r3, #15
 801cd5c:	b2db      	uxtb	r3, r3
 801cd5e:	009b      	lsls	r3, r3, #2
 801cd60:	b2db      	uxtb	r3, r3
 801cd62:	461a      	mov	r2, r3
 801cd64:	4b2a      	ldr	r3, [pc, #168]	@ (801ce10 <ip4_input+0x240>)
 801cd66:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801cd68:	89fb      	ldrh	r3, [r7, #14]
 801cd6a:	4619      	mov	r1, r3
 801cd6c:	6878      	ldr	r0, [r7, #4]
 801cd6e:	f7f6 ff97 	bl	8013ca0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801cd72:	693b      	ldr	r3, [r7, #16]
 801cd74:	7a5b      	ldrb	r3, [r3, #9]
 801cd76:	2b11      	cmp	r3, #17
 801cd78:	d006      	beq.n	801cd88 <ip4_input+0x1b8>
 801cd7a:	2b11      	cmp	r3, #17
 801cd7c:	dc13      	bgt.n	801cda6 <ip4_input+0x1d6>
 801cd7e:	2b01      	cmp	r3, #1
 801cd80:	d00c      	beq.n	801cd9c <ip4_input+0x1cc>
 801cd82:	2b06      	cmp	r3, #6
 801cd84:	d005      	beq.n	801cd92 <ip4_input+0x1c2>
 801cd86:	e00e      	b.n	801cda6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801cd88:	6839      	ldr	r1, [r7, #0]
 801cd8a:	6878      	ldr	r0, [r7, #4]
 801cd8c:	f7fd fe24 	bl	801a9d8 <udp_input>
        break;
 801cd90:	e026      	b.n	801cde0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801cd92:	6839      	ldr	r1, [r7, #0]
 801cd94:	6878      	ldr	r0, [r7, #4]
 801cd96:	f7f9 f975 	bl	8016084 <tcp_input>
        break;
 801cd9a:	e021      	b.n	801cde0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801cd9c:	6839      	ldr	r1, [r7, #0]
 801cd9e:	6878      	ldr	r0, [r7, #4]
 801cda0:	f7ff fc5c 	bl	801c65c <icmp_input>
        break;
 801cda4:	e01c      	b.n	801cde0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cda6:	4b1a      	ldr	r3, [pc, #104]	@ (801ce10 <ip4_input+0x240>)
 801cda8:	695b      	ldr	r3, [r3, #20]
 801cdaa:	6979      	ldr	r1, [r7, #20]
 801cdac:	4618      	mov	r0, r3
 801cdae:	f000 f90b 	bl	801cfc8 <ip4_addr_isbroadcast_u32>
 801cdb2:	4603      	mov	r3, r0
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d10f      	bne.n	801cdd8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cdb8:	4b15      	ldr	r3, [pc, #84]	@ (801ce10 <ip4_input+0x240>)
 801cdba:	695b      	ldr	r3, [r3, #20]
 801cdbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cdc0:	2be0      	cmp	r3, #224	@ 0xe0
 801cdc2:	d009      	beq.n	801cdd8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801cdc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801cdc8:	4619      	mov	r1, r3
 801cdca:	6878      	ldr	r0, [r7, #4]
 801cdcc:	f7f6 ffdb 	bl	8013d86 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801cdd0:	2102      	movs	r1, #2
 801cdd2:	6878      	ldr	r0, [r7, #4]
 801cdd4:	f7ff fd98 	bl	801c908 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801cdd8:	6878      	ldr	r0, [r7, #4]
 801cdda:	f7f6 ffe7 	bl	8013dac <pbuf_free>
        break;
 801cdde:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801cde0:	4b0b      	ldr	r3, [pc, #44]	@ (801ce10 <ip4_input+0x240>)
 801cde2:	2200      	movs	r2, #0
 801cde4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801cde6:	4b0a      	ldr	r3, [pc, #40]	@ (801ce10 <ip4_input+0x240>)
 801cde8:	2200      	movs	r2, #0
 801cdea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801cdec:	4b08      	ldr	r3, [pc, #32]	@ (801ce10 <ip4_input+0x240>)
 801cdee:	2200      	movs	r2, #0
 801cdf0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801cdf2:	4b07      	ldr	r3, [pc, #28]	@ (801ce10 <ip4_input+0x240>)
 801cdf4:	2200      	movs	r2, #0
 801cdf6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801cdf8:	4b05      	ldr	r3, [pc, #20]	@ (801ce10 <ip4_input+0x240>)
 801cdfa:	2200      	movs	r2, #0
 801cdfc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801cdfe:	4b04      	ldr	r3, [pc, #16]	@ (801ce10 <ip4_input+0x240>)
 801ce00:	2200      	movs	r2, #0
 801ce02:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801ce04:	2300      	movs	r3, #0
}
 801ce06:	4618      	mov	r0, r3
 801ce08:	3718      	adds	r7, #24
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd80      	pop	{r7, pc}
 801ce0e:	bf00      	nop
 801ce10:	2001f65c 	.word	0x2001f65c
 801ce14:	20022790 	.word	0x20022790

0801ce18 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b08a      	sub	sp, #40	@ 0x28
 801ce1c:	af04      	add	r7, sp, #16
 801ce1e:	60f8      	str	r0, [r7, #12]
 801ce20:	60b9      	str	r1, [r7, #8]
 801ce22:	607a      	str	r2, [r7, #4]
 801ce24:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801ce26:	68bb      	ldr	r3, [r7, #8]
 801ce28:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d009      	beq.n	801ce44 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801ce30:	68bb      	ldr	r3, [r7, #8]
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d003      	beq.n	801ce3e <ip4_output_if+0x26>
 801ce36:	68bb      	ldr	r3, [r7, #8]
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d102      	bne.n	801ce44 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801ce3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce40:	3304      	adds	r3, #4
 801ce42:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801ce44:	78fa      	ldrb	r2, [r7, #3]
 801ce46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce48:	9302      	str	r3, [sp, #8]
 801ce4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801ce4e:	9301      	str	r3, [sp, #4]
 801ce50:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ce54:	9300      	str	r3, [sp, #0]
 801ce56:	4613      	mov	r3, r2
 801ce58:	687a      	ldr	r2, [r7, #4]
 801ce5a:	6979      	ldr	r1, [r7, #20]
 801ce5c:	68f8      	ldr	r0, [r7, #12]
 801ce5e:	f000 f805 	bl	801ce6c <ip4_output_if_src>
 801ce62:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801ce64:	4618      	mov	r0, r3
 801ce66:	3718      	adds	r7, #24
 801ce68:	46bd      	mov	sp, r7
 801ce6a:	bd80      	pop	{r7, pc}

0801ce6c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801ce6c:	b580      	push	{r7, lr}
 801ce6e:	b088      	sub	sp, #32
 801ce70:	af00      	add	r7, sp, #0
 801ce72:	60f8      	str	r0, [r7, #12]
 801ce74:	60b9      	str	r1, [r7, #8]
 801ce76:	607a      	str	r2, [r7, #4]
 801ce78:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	7b9b      	ldrb	r3, [r3, #14]
 801ce7e:	2b01      	cmp	r3, #1
 801ce80:	d006      	beq.n	801ce90 <ip4_output_if_src+0x24>
 801ce82:	4b4b      	ldr	r3, [pc, #300]	@ (801cfb0 <ip4_output_if_src+0x144>)
 801ce84:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801ce88:	494a      	ldr	r1, [pc, #296]	@ (801cfb4 <ip4_output_if_src+0x148>)
 801ce8a:	484b      	ldr	r0, [pc, #300]	@ (801cfb8 <ip4_output_if_src+0x14c>)
 801ce8c:	f001 ff7e 	bl	801ed8c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d060      	beq.n	801cf58 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801ce96:	2314      	movs	r3, #20
 801ce98:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801ce9a:	2114      	movs	r1, #20
 801ce9c:	68f8      	ldr	r0, [r7, #12]
 801ce9e:	f7f6 feef 	bl	8013c80 <pbuf_add_header>
 801cea2:	4603      	mov	r3, r0
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d002      	beq.n	801ceae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cea8:	f06f 0301 	mvn.w	r3, #1
 801ceac:	e07c      	b.n	801cfa8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	685b      	ldr	r3, [r3, #4]
 801ceb2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	895b      	ldrh	r3, [r3, #10]
 801ceb8:	2b13      	cmp	r3, #19
 801ceba:	d806      	bhi.n	801ceca <ip4_output_if_src+0x5e>
 801cebc:	4b3c      	ldr	r3, [pc, #240]	@ (801cfb0 <ip4_output_if_src+0x144>)
 801cebe:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801cec2:	493e      	ldr	r1, [pc, #248]	@ (801cfbc <ip4_output_if_src+0x150>)
 801cec4:	483c      	ldr	r0, [pc, #240]	@ (801cfb8 <ip4_output_if_src+0x14c>)
 801cec6:	f001 ff61 	bl	801ed8c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801ceca:	69fb      	ldr	r3, [r7, #28]
 801cecc:	78fa      	ldrb	r2, [r7, #3]
 801cece:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801ced0:	69fb      	ldr	r3, [r7, #28]
 801ced2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801ced6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	681a      	ldr	r2, [r3, #0]
 801cedc:	69fb      	ldr	r3, [r7, #28]
 801cede:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801cee0:	8b7b      	ldrh	r3, [r7, #26]
 801cee2:	089b      	lsrs	r3, r3, #2
 801cee4:	b29b      	uxth	r3, r3
 801cee6:	b2db      	uxtb	r3, r3
 801cee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ceec:	b2da      	uxtb	r2, r3
 801ceee:	69fb      	ldr	r3, [r7, #28]
 801cef0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801cef2:	69fb      	ldr	r3, [r7, #28]
 801cef4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801cef8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801cefa:	68fb      	ldr	r3, [r7, #12]
 801cefc:	891b      	ldrh	r3, [r3, #8]
 801cefe:	4618      	mov	r0, r3
 801cf00:	f7f5 fa70 	bl	80123e4 <lwip_htons>
 801cf04:	4603      	mov	r3, r0
 801cf06:	461a      	mov	r2, r3
 801cf08:	69fb      	ldr	r3, [r7, #28]
 801cf0a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801cf0c:	69fb      	ldr	r3, [r7, #28]
 801cf0e:	2200      	movs	r2, #0
 801cf10:	719a      	strb	r2, [r3, #6]
 801cf12:	2200      	movs	r2, #0
 801cf14:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801cf16:	4b2a      	ldr	r3, [pc, #168]	@ (801cfc0 <ip4_output_if_src+0x154>)
 801cf18:	881b      	ldrh	r3, [r3, #0]
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	f7f5 fa62 	bl	80123e4 <lwip_htons>
 801cf20:	4603      	mov	r3, r0
 801cf22:	461a      	mov	r2, r3
 801cf24:	69fb      	ldr	r3, [r7, #28]
 801cf26:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801cf28:	4b25      	ldr	r3, [pc, #148]	@ (801cfc0 <ip4_output_if_src+0x154>)
 801cf2a:	881b      	ldrh	r3, [r3, #0]
 801cf2c:	3301      	adds	r3, #1
 801cf2e:	b29a      	uxth	r2, r3
 801cf30:	4b23      	ldr	r3, [pc, #140]	@ (801cfc0 <ip4_output_if_src+0x154>)
 801cf32:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801cf34:	68bb      	ldr	r3, [r7, #8]
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d104      	bne.n	801cf44 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801cf3a:	4b22      	ldr	r3, [pc, #136]	@ (801cfc4 <ip4_output_if_src+0x158>)
 801cf3c:	681a      	ldr	r2, [r3, #0]
 801cf3e:	69fb      	ldr	r3, [r7, #28]
 801cf40:	60da      	str	r2, [r3, #12]
 801cf42:	e003      	b.n	801cf4c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801cf44:	68bb      	ldr	r3, [r7, #8]
 801cf46:	681a      	ldr	r2, [r3, #0]
 801cf48:	69fb      	ldr	r3, [r7, #28]
 801cf4a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801cf4c:	69fb      	ldr	r3, [r7, #28]
 801cf4e:	2200      	movs	r2, #0
 801cf50:	729a      	strb	r2, [r3, #10]
 801cf52:	2200      	movs	r2, #0
 801cf54:	72da      	strb	r2, [r3, #11]
 801cf56:	e00f      	b.n	801cf78 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	895b      	ldrh	r3, [r3, #10]
 801cf5c:	2b13      	cmp	r3, #19
 801cf5e:	d802      	bhi.n	801cf66 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cf60:	f06f 0301 	mvn.w	r3, #1
 801cf64:	e020      	b.n	801cfa8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	685b      	ldr	r3, [r3, #4]
 801cf6a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801cf6c:	69fb      	ldr	r3, [r7, #28]
 801cf6e:	691b      	ldr	r3, [r3, #16]
 801cf70:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801cf72:	f107 0314 	add.w	r3, r7, #20
 801cf76:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801cf78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d00c      	beq.n	801cf9a <ip4_output_if_src+0x12e>
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	891a      	ldrh	r2, [r3, #8]
 801cf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cf88:	429a      	cmp	r2, r3
 801cf8a:	d906      	bls.n	801cf9a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801cf8c:	687a      	ldr	r2, [r7, #4]
 801cf8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801cf90:	68f8      	ldr	r0, [r7, #12]
 801cf92:	f000 fd53 	bl	801da3c <ip4_frag>
 801cf96:	4603      	mov	r3, r0
 801cf98:	e006      	b.n	801cfa8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801cf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf9c:	695b      	ldr	r3, [r3, #20]
 801cf9e:	687a      	ldr	r2, [r7, #4]
 801cfa0:	68f9      	ldr	r1, [r7, #12]
 801cfa2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cfa4:	4798      	blx	r3
 801cfa6:	4603      	mov	r3, r0
}
 801cfa8:	4618      	mov	r0, r3
 801cfaa:	3720      	adds	r7, #32
 801cfac:	46bd      	mov	sp, r7
 801cfae:	bd80      	pop	{r7, pc}
 801cfb0:	08023ac8 	.word	0x08023ac8
 801cfb4:	08023afc 	.word	0x08023afc
 801cfb8:	08023b08 	.word	0x08023b08
 801cfbc:	08023b30 	.word	0x08023b30
 801cfc0:	200228f2 	.word	0x200228f2
 801cfc4:	08024334 	.word	0x08024334

0801cfc8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801cfc8:	b480      	push	{r7}
 801cfca:	b085      	sub	sp, #20
 801cfcc:	af00      	add	r7, sp, #0
 801cfce:	6078      	str	r0, [r7, #4]
 801cfd0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cfdc:	d002      	beq.n	801cfe4 <ip4_addr_isbroadcast_u32+0x1c>
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d101      	bne.n	801cfe8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801cfe4:	2301      	movs	r3, #1
 801cfe6:	e02a      	b.n	801d03e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801cfe8:	683b      	ldr	r3, [r7, #0]
 801cfea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cfee:	f003 0302 	and.w	r3, r3, #2
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d101      	bne.n	801cffa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801cff6:	2300      	movs	r3, #0
 801cff8:	e021      	b.n	801d03e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801cffa:	683b      	ldr	r3, [r7, #0]
 801cffc:	3304      	adds	r3, #4
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	687a      	ldr	r2, [r7, #4]
 801d002:	429a      	cmp	r2, r3
 801d004:	d101      	bne.n	801d00a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d006:	2300      	movs	r3, #0
 801d008:	e019      	b.n	801d03e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d00a:	68fa      	ldr	r2, [r7, #12]
 801d00c:	683b      	ldr	r3, [r7, #0]
 801d00e:	3304      	adds	r3, #4
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	405a      	eors	r2, r3
 801d014:	683b      	ldr	r3, [r7, #0]
 801d016:	3308      	adds	r3, #8
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	4013      	ands	r3, r2
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d10d      	bne.n	801d03c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d020:	683b      	ldr	r3, [r7, #0]
 801d022:	3308      	adds	r3, #8
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	43da      	mvns	r2, r3
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d02c:	683b      	ldr	r3, [r7, #0]
 801d02e:	3308      	adds	r3, #8
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d034:	429a      	cmp	r2, r3
 801d036:	d101      	bne.n	801d03c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d038:	2301      	movs	r3, #1
 801d03a:	e000      	b.n	801d03e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d03c:	2300      	movs	r3, #0
  }
}
 801d03e:	4618      	mov	r0, r3
 801d040:	3714      	adds	r7, #20
 801d042:	46bd      	mov	sp, r7
 801d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d048:	4770      	bx	lr
	...

0801d04c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d04c:	b580      	push	{r7, lr}
 801d04e:	b084      	sub	sp, #16
 801d050:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d052:	2300      	movs	r3, #0
 801d054:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d056:	4b12      	ldr	r3, [pc, #72]	@ (801d0a0 <ip_reass_tmr+0x54>)
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d05c:	e018      	b.n	801d090 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	7fdb      	ldrb	r3, [r3, #31]
 801d062:	2b00      	cmp	r3, #0
 801d064:	d00b      	beq.n	801d07e <ip_reass_tmr+0x32>
      r->timer--;
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	7fdb      	ldrb	r3, [r3, #31]
 801d06a:	3b01      	subs	r3, #1
 801d06c:	b2da      	uxtb	r2, r3
 801d06e:	68fb      	ldr	r3, [r7, #12]
 801d070:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d072:	68fb      	ldr	r3, [r7, #12]
 801d074:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	60fb      	str	r3, [r7, #12]
 801d07c:	e008      	b.n	801d090 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d07e:	68fb      	ldr	r3, [r7, #12]
 801d080:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d088:	68b9      	ldr	r1, [r7, #8]
 801d08a:	6878      	ldr	r0, [r7, #4]
 801d08c:	f000 f80a 	bl	801d0a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	2b00      	cmp	r3, #0
 801d094:	d1e3      	bne.n	801d05e <ip_reass_tmr+0x12>
    }
  }
}
 801d096:	bf00      	nop
 801d098:	bf00      	nop
 801d09a:	3710      	adds	r7, #16
 801d09c:	46bd      	mov	sp, r7
 801d09e:	bd80      	pop	{r7, pc}
 801d0a0:	200228f4 	.word	0x200228f4

0801d0a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d0a4:	b580      	push	{r7, lr}
 801d0a6:	b088      	sub	sp, #32
 801d0a8:	af00      	add	r7, sp, #0
 801d0aa:	6078      	str	r0, [r7, #4]
 801d0ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d0ae:	2300      	movs	r3, #0
 801d0b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d0b2:	683a      	ldr	r2, [r7, #0]
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	429a      	cmp	r2, r3
 801d0b8:	d105      	bne.n	801d0c6 <ip_reass_free_complete_datagram+0x22>
 801d0ba:	4b45      	ldr	r3, [pc, #276]	@ (801d1d0 <ip_reass_free_complete_datagram+0x12c>)
 801d0bc:	22ab      	movs	r2, #171	@ 0xab
 801d0be:	4945      	ldr	r1, [pc, #276]	@ (801d1d4 <ip_reass_free_complete_datagram+0x130>)
 801d0c0:	4845      	ldr	r0, [pc, #276]	@ (801d1d8 <ip_reass_free_complete_datagram+0x134>)
 801d0c2:	f001 fe63 	bl	801ed8c <iprintf>
  if (prev != NULL) {
 801d0c6:	683b      	ldr	r3, [r7, #0]
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d00a      	beq.n	801d0e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d0cc:	683b      	ldr	r3, [r7, #0]
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	687a      	ldr	r2, [r7, #4]
 801d0d2:	429a      	cmp	r2, r3
 801d0d4:	d005      	beq.n	801d0e2 <ip_reass_free_complete_datagram+0x3e>
 801d0d6:	4b3e      	ldr	r3, [pc, #248]	@ (801d1d0 <ip_reass_free_complete_datagram+0x12c>)
 801d0d8:	22ad      	movs	r2, #173	@ 0xad
 801d0da:	4940      	ldr	r1, [pc, #256]	@ (801d1dc <ip_reass_free_complete_datagram+0x138>)
 801d0dc:	483e      	ldr	r0, [pc, #248]	@ (801d1d8 <ip_reass_free_complete_datagram+0x134>)
 801d0de:	f001 fe55 	bl	801ed8c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	685b      	ldr	r3, [r3, #4]
 801d0e6:	685b      	ldr	r3, [r3, #4]
 801d0e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d0ea:	697b      	ldr	r3, [r7, #20]
 801d0ec:	889b      	ldrh	r3, [r3, #4]
 801d0ee:	b29b      	uxth	r3, r3
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d12a      	bne.n	801d14a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	685b      	ldr	r3, [r3, #4]
 801d0f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d0fa:	697b      	ldr	r3, [r7, #20]
 801d0fc:	681a      	ldr	r2, [r3, #0]
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d102:	69bb      	ldr	r3, [r7, #24]
 801d104:	6858      	ldr	r0, [r3, #4]
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	3308      	adds	r3, #8
 801d10a:	2214      	movs	r2, #20
 801d10c:	4619      	mov	r1, r3
 801d10e:	f002 f812 	bl	801f136 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d112:	2101      	movs	r1, #1
 801d114:	69b8      	ldr	r0, [r7, #24]
 801d116:	f7ff fc07 	bl	801c928 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d11a:	69b8      	ldr	r0, [r7, #24]
 801d11c:	f7f6 fed4 	bl	8013ec8 <pbuf_clen>
 801d120:	4603      	mov	r3, r0
 801d122:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d124:	8bfa      	ldrh	r2, [r7, #30]
 801d126:	8a7b      	ldrh	r3, [r7, #18]
 801d128:	4413      	add	r3, r2
 801d12a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d12e:	db05      	blt.n	801d13c <ip_reass_free_complete_datagram+0x98>
 801d130:	4b27      	ldr	r3, [pc, #156]	@ (801d1d0 <ip_reass_free_complete_datagram+0x12c>)
 801d132:	22bc      	movs	r2, #188	@ 0xbc
 801d134:	492a      	ldr	r1, [pc, #168]	@ (801d1e0 <ip_reass_free_complete_datagram+0x13c>)
 801d136:	4828      	ldr	r0, [pc, #160]	@ (801d1d8 <ip_reass_free_complete_datagram+0x134>)
 801d138:	f001 fe28 	bl	801ed8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d13c:	8bfa      	ldrh	r2, [r7, #30]
 801d13e:	8a7b      	ldrh	r3, [r7, #18]
 801d140:	4413      	add	r3, r2
 801d142:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d144:	69b8      	ldr	r0, [r7, #24]
 801d146:	f7f6 fe31 	bl	8013dac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	685b      	ldr	r3, [r3, #4]
 801d14e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d150:	e01f      	b.n	801d192 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d152:	69bb      	ldr	r3, [r7, #24]
 801d154:	685b      	ldr	r3, [r3, #4]
 801d156:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d158:	69bb      	ldr	r3, [r7, #24]
 801d15a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d15c:	697b      	ldr	r3, [r7, #20]
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d162:	68f8      	ldr	r0, [r7, #12]
 801d164:	f7f6 feb0 	bl	8013ec8 <pbuf_clen>
 801d168:	4603      	mov	r3, r0
 801d16a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d16c:	8bfa      	ldrh	r2, [r7, #30]
 801d16e:	8a7b      	ldrh	r3, [r7, #18]
 801d170:	4413      	add	r3, r2
 801d172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d176:	db05      	blt.n	801d184 <ip_reass_free_complete_datagram+0xe0>
 801d178:	4b15      	ldr	r3, [pc, #84]	@ (801d1d0 <ip_reass_free_complete_datagram+0x12c>)
 801d17a:	22cc      	movs	r2, #204	@ 0xcc
 801d17c:	4918      	ldr	r1, [pc, #96]	@ (801d1e0 <ip_reass_free_complete_datagram+0x13c>)
 801d17e:	4816      	ldr	r0, [pc, #88]	@ (801d1d8 <ip_reass_free_complete_datagram+0x134>)
 801d180:	f001 fe04 	bl	801ed8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d184:	8bfa      	ldrh	r2, [r7, #30]
 801d186:	8a7b      	ldrh	r3, [r7, #18]
 801d188:	4413      	add	r3, r2
 801d18a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d18c:	68f8      	ldr	r0, [r7, #12]
 801d18e:	f7f6 fe0d 	bl	8013dac <pbuf_free>
  while (p != NULL) {
 801d192:	69bb      	ldr	r3, [r7, #24]
 801d194:	2b00      	cmp	r3, #0
 801d196:	d1dc      	bne.n	801d152 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d198:	6839      	ldr	r1, [r7, #0]
 801d19a:	6878      	ldr	r0, [r7, #4]
 801d19c:	f000 f8c2 	bl	801d324 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d1a0:	4b10      	ldr	r3, [pc, #64]	@ (801d1e4 <ip_reass_free_complete_datagram+0x140>)
 801d1a2:	881b      	ldrh	r3, [r3, #0]
 801d1a4:	8bfa      	ldrh	r2, [r7, #30]
 801d1a6:	429a      	cmp	r2, r3
 801d1a8:	d905      	bls.n	801d1b6 <ip_reass_free_complete_datagram+0x112>
 801d1aa:	4b09      	ldr	r3, [pc, #36]	@ (801d1d0 <ip_reass_free_complete_datagram+0x12c>)
 801d1ac:	22d2      	movs	r2, #210	@ 0xd2
 801d1ae:	490e      	ldr	r1, [pc, #56]	@ (801d1e8 <ip_reass_free_complete_datagram+0x144>)
 801d1b0:	4809      	ldr	r0, [pc, #36]	@ (801d1d8 <ip_reass_free_complete_datagram+0x134>)
 801d1b2:	f001 fdeb 	bl	801ed8c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d1b6:	4b0b      	ldr	r3, [pc, #44]	@ (801d1e4 <ip_reass_free_complete_datagram+0x140>)
 801d1b8:	881a      	ldrh	r2, [r3, #0]
 801d1ba:	8bfb      	ldrh	r3, [r7, #30]
 801d1bc:	1ad3      	subs	r3, r2, r3
 801d1be:	b29a      	uxth	r2, r3
 801d1c0:	4b08      	ldr	r3, [pc, #32]	@ (801d1e4 <ip_reass_free_complete_datagram+0x140>)
 801d1c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d1c4:	8bfb      	ldrh	r3, [r7, #30]
}
 801d1c6:	4618      	mov	r0, r3
 801d1c8:	3720      	adds	r7, #32
 801d1ca:	46bd      	mov	sp, r7
 801d1cc:	bd80      	pop	{r7, pc}
 801d1ce:	bf00      	nop
 801d1d0:	08023b60 	.word	0x08023b60
 801d1d4:	08023b9c 	.word	0x08023b9c
 801d1d8:	08023ba8 	.word	0x08023ba8
 801d1dc:	08023bd0 	.word	0x08023bd0
 801d1e0:	08023be4 	.word	0x08023be4
 801d1e4:	200228f8 	.word	0x200228f8
 801d1e8:	08023c04 	.word	0x08023c04

0801d1ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b08a      	sub	sp, #40	@ 0x28
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	6078      	str	r0, [r7, #4]
 801d1f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d1f6:	2300      	movs	r3, #0
 801d1f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d1fa:	2300      	movs	r3, #0
 801d1fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d1fe:	2300      	movs	r3, #0
 801d200:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d202:	2300      	movs	r3, #0
 801d204:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d206:	2300      	movs	r3, #0
 801d208:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d20a:	4b28      	ldr	r3, [pc, #160]	@ (801d2ac <ip_reass_remove_oldest_datagram+0xc0>)
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801d210:	e030      	b.n	801d274 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d214:	695a      	ldr	r2, [r3, #20]
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	68db      	ldr	r3, [r3, #12]
 801d21a:	429a      	cmp	r2, r3
 801d21c:	d10c      	bne.n	801d238 <ip_reass_remove_oldest_datagram+0x4c>
 801d21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d220:	699a      	ldr	r2, [r3, #24]
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	691b      	ldr	r3, [r3, #16]
 801d226:	429a      	cmp	r2, r3
 801d228:	d106      	bne.n	801d238 <ip_reass_remove_oldest_datagram+0x4c>
 801d22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d22c:	899a      	ldrh	r2, [r3, #12]
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	889b      	ldrh	r3, [r3, #4]
 801d232:	b29b      	uxth	r3, r3
 801d234:	429a      	cmp	r2, r3
 801d236:	d014      	beq.n	801d262 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d238:	693b      	ldr	r3, [r7, #16]
 801d23a:	3301      	adds	r3, #1
 801d23c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d23e:	6a3b      	ldr	r3, [r7, #32]
 801d240:	2b00      	cmp	r3, #0
 801d242:	d104      	bne.n	801d24e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d246:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d248:	69fb      	ldr	r3, [r7, #28]
 801d24a:	61bb      	str	r3, [r7, #24]
 801d24c:	e009      	b.n	801d262 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d250:	7fda      	ldrb	r2, [r3, #31]
 801d252:	6a3b      	ldr	r3, [r7, #32]
 801d254:	7fdb      	ldrb	r3, [r3, #31]
 801d256:	429a      	cmp	r2, r3
 801d258:	d803      	bhi.n	801d262 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d25c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d25e:	69fb      	ldr	r3, [r7, #28]
 801d260:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d264:	681b      	ldr	r3, [r3, #0]
 801d266:	2b00      	cmp	r3, #0
 801d268:	d001      	beq.n	801d26e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d26c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801d274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d276:	2b00      	cmp	r3, #0
 801d278:	d1cb      	bne.n	801d212 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d27a:	6a3b      	ldr	r3, [r7, #32]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d008      	beq.n	801d292 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d280:	69b9      	ldr	r1, [r7, #24]
 801d282:	6a38      	ldr	r0, [r7, #32]
 801d284:	f7ff ff0e 	bl	801d0a4 <ip_reass_free_complete_datagram>
 801d288:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d28a:	697a      	ldr	r2, [r7, #20]
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	4413      	add	r3, r2
 801d290:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d292:	697a      	ldr	r2, [r7, #20]
 801d294:	683b      	ldr	r3, [r7, #0]
 801d296:	429a      	cmp	r2, r3
 801d298:	da02      	bge.n	801d2a0 <ip_reass_remove_oldest_datagram+0xb4>
 801d29a:	693b      	ldr	r3, [r7, #16]
 801d29c:	2b01      	cmp	r3, #1
 801d29e:	dcac      	bgt.n	801d1fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d2a0:	697b      	ldr	r3, [r7, #20]
}
 801d2a2:	4618      	mov	r0, r3
 801d2a4:	3728      	adds	r7, #40	@ 0x28
 801d2a6:	46bd      	mov	sp, r7
 801d2a8:	bd80      	pop	{r7, pc}
 801d2aa:	bf00      	nop
 801d2ac:	200228f4 	.word	0x200228f4

0801d2b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d2b0:	b580      	push	{r7, lr}
 801d2b2:	b084      	sub	sp, #16
 801d2b4:	af00      	add	r7, sp, #0
 801d2b6:	6078      	str	r0, [r7, #4]
 801d2b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d2ba:	2004      	movs	r0, #4
 801d2bc:	f7f5 fd66 	bl	8012d8c <memp_malloc>
 801d2c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d110      	bne.n	801d2ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d2c8:	6839      	ldr	r1, [r7, #0]
 801d2ca:	6878      	ldr	r0, [r7, #4]
 801d2cc:	f7ff ff8e 	bl	801d1ec <ip_reass_remove_oldest_datagram>
 801d2d0:	4602      	mov	r2, r0
 801d2d2:	683b      	ldr	r3, [r7, #0]
 801d2d4:	4293      	cmp	r3, r2
 801d2d6:	dc03      	bgt.n	801d2e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d2d8:	2004      	movs	r0, #4
 801d2da:	f7f5 fd57 	bl	8012d8c <memp_malloc>
 801d2de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d101      	bne.n	801d2ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d2e6:	2300      	movs	r3, #0
 801d2e8:	e016      	b.n	801d318 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d2ea:	2220      	movs	r2, #32
 801d2ec:	2100      	movs	r1, #0
 801d2ee:	68f8      	ldr	r0, [r7, #12]
 801d2f0:	f001 feac 	bl	801f04c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	220f      	movs	r2, #15
 801d2f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d2fa:	4b09      	ldr	r3, [pc, #36]	@ (801d320 <ip_reass_enqueue_new_datagram+0x70>)
 801d2fc:	681a      	ldr	r2, [r3, #0]
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d302:	4a07      	ldr	r2, [pc, #28]	@ (801d320 <ip_reass_enqueue_new_datagram+0x70>)
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	3308      	adds	r3, #8
 801d30c:	2214      	movs	r2, #20
 801d30e:	6879      	ldr	r1, [r7, #4]
 801d310:	4618      	mov	r0, r3
 801d312:	f001 ff10 	bl	801f136 <memcpy>
  return ipr;
 801d316:	68fb      	ldr	r3, [r7, #12]
}
 801d318:	4618      	mov	r0, r3
 801d31a:	3710      	adds	r7, #16
 801d31c:	46bd      	mov	sp, r7
 801d31e:	bd80      	pop	{r7, pc}
 801d320:	200228f4 	.word	0x200228f4

0801d324 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d324:	b580      	push	{r7, lr}
 801d326:	b082      	sub	sp, #8
 801d328:	af00      	add	r7, sp, #0
 801d32a:	6078      	str	r0, [r7, #4]
 801d32c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d32e:	4b10      	ldr	r3, [pc, #64]	@ (801d370 <ip_reass_dequeue_datagram+0x4c>)
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	687a      	ldr	r2, [r7, #4]
 801d334:	429a      	cmp	r2, r3
 801d336:	d104      	bne.n	801d342 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	4a0c      	ldr	r2, [pc, #48]	@ (801d370 <ip_reass_dequeue_datagram+0x4c>)
 801d33e:	6013      	str	r3, [r2, #0]
 801d340:	e00d      	b.n	801d35e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d342:	683b      	ldr	r3, [r7, #0]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d106      	bne.n	801d356 <ip_reass_dequeue_datagram+0x32>
 801d348:	4b0a      	ldr	r3, [pc, #40]	@ (801d374 <ip_reass_dequeue_datagram+0x50>)
 801d34a:	f240 1245 	movw	r2, #325	@ 0x145
 801d34e:	490a      	ldr	r1, [pc, #40]	@ (801d378 <ip_reass_dequeue_datagram+0x54>)
 801d350:	480a      	ldr	r0, [pc, #40]	@ (801d37c <ip_reass_dequeue_datagram+0x58>)
 801d352:	f001 fd1b 	bl	801ed8c <iprintf>
    prev->next = ipr->next;
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	681a      	ldr	r2, [r3, #0]
 801d35a:	683b      	ldr	r3, [r7, #0]
 801d35c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d35e:	6879      	ldr	r1, [r7, #4]
 801d360:	2004      	movs	r0, #4
 801d362:	f7f5 fd89 	bl	8012e78 <memp_free>
}
 801d366:	bf00      	nop
 801d368:	3708      	adds	r7, #8
 801d36a:	46bd      	mov	sp, r7
 801d36c:	bd80      	pop	{r7, pc}
 801d36e:	bf00      	nop
 801d370:	200228f4 	.word	0x200228f4
 801d374:	08023b60 	.word	0x08023b60
 801d378:	08023c28 	.word	0x08023c28
 801d37c:	08023ba8 	.word	0x08023ba8

0801d380 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d380:	b580      	push	{r7, lr}
 801d382:	b08c      	sub	sp, #48	@ 0x30
 801d384:	af00      	add	r7, sp, #0
 801d386:	60f8      	str	r0, [r7, #12]
 801d388:	60b9      	str	r1, [r7, #8]
 801d38a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d38c:	2300      	movs	r3, #0
 801d38e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d390:	2301      	movs	r3, #1
 801d392:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d394:	68bb      	ldr	r3, [r7, #8]
 801d396:	685b      	ldr	r3, [r3, #4]
 801d398:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d39a:	69fb      	ldr	r3, [r7, #28]
 801d39c:	885b      	ldrh	r3, [r3, #2]
 801d39e:	b29b      	uxth	r3, r3
 801d3a0:	4618      	mov	r0, r3
 801d3a2:	f7f5 f81f 	bl	80123e4 <lwip_htons>
 801d3a6:	4603      	mov	r3, r0
 801d3a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d3aa:	69fb      	ldr	r3, [r7, #28]
 801d3ac:	781b      	ldrb	r3, [r3, #0]
 801d3ae:	f003 030f 	and.w	r3, r3, #15
 801d3b2:	b2db      	uxtb	r3, r3
 801d3b4:	009b      	lsls	r3, r3, #2
 801d3b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d3b8:	7e7b      	ldrb	r3, [r7, #25]
 801d3ba:	b29b      	uxth	r3, r3
 801d3bc:	8b7a      	ldrh	r2, [r7, #26]
 801d3be:	429a      	cmp	r2, r3
 801d3c0:	d202      	bcs.n	801d3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d3c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d3c6:	e135      	b.n	801d634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d3c8:	7e7b      	ldrb	r3, [r7, #25]
 801d3ca:	b29b      	uxth	r3, r3
 801d3cc:	8b7a      	ldrh	r2, [r7, #26]
 801d3ce:	1ad3      	subs	r3, r2, r3
 801d3d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d3d2:	69fb      	ldr	r3, [r7, #28]
 801d3d4:	88db      	ldrh	r3, [r3, #6]
 801d3d6:	b29b      	uxth	r3, r3
 801d3d8:	4618      	mov	r0, r3
 801d3da:	f7f5 f803 	bl	80123e4 <lwip_htons>
 801d3de:	4603      	mov	r3, r0
 801d3e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d3e4:	b29b      	uxth	r3, r3
 801d3e6:	00db      	lsls	r3, r3, #3
 801d3e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d3ea:	68bb      	ldr	r3, [r7, #8]
 801d3ec:	685b      	ldr	r3, [r3, #4]
 801d3ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801d3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d3f2:	2200      	movs	r2, #0
 801d3f4:	701a      	strb	r2, [r3, #0]
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	705a      	strb	r2, [r3, #1]
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	709a      	strb	r2, [r3, #2]
 801d3fe:	2200      	movs	r2, #0
 801d400:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d404:	8afa      	ldrh	r2, [r7, #22]
 801d406:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d408:	8afa      	ldrh	r2, [r7, #22]
 801d40a:	8b7b      	ldrh	r3, [r7, #26]
 801d40c:	4413      	add	r3, r2
 801d40e:	b29a      	uxth	r2, r3
 801d410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d412:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d416:	88db      	ldrh	r3, [r3, #6]
 801d418:	b29b      	uxth	r3, r3
 801d41a:	8afa      	ldrh	r2, [r7, #22]
 801d41c:	429a      	cmp	r2, r3
 801d41e:	d902      	bls.n	801d426 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d424:	e106      	b.n	801d634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d426:	68fb      	ldr	r3, [r7, #12]
 801d428:	685b      	ldr	r3, [r3, #4]
 801d42a:	627b      	str	r3, [r7, #36]	@ 0x24
 801d42c:	e068      	b.n	801d500 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d430:	685b      	ldr	r3, [r3, #4]
 801d432:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d436:	889b      	ldrh	r3, [r3, #4]
 801d438:	b29a      	uxth	r2, r3
 801d43a:	693b      	ldr	r3, [r7, #16]
 801d43c:	889b      	ldrh	r3, [r3, #4]
 801d43e:	b29b      	uxth	r3, r3
 801d440:	429a      	cmp	r2, r3
 801d442:	d235      	bcs.n	801d4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d448:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d020      	beq.n	801d492 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d452:	889b      	ldrh	r3, [r3, #4]
 801d454:	b29a      	uxth	r2, r3
 801d456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d458:	88db      	ldrh	r3, [r3, #6]
 801d45a:	b29b      	uxth	r3, r3
 801d45c:	429a      	cmp	r2, r3
 801d45e:	d307      	bcc.n	801d470 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d462:	88db      	ldrh	r3, [r3, #6]
 801d464:	b29a      	uxth	r2, r3
 801d466:	693b      	ldr	r3, [r7, #16]
 801d468:	889b      	ldrh	r3, [r3, #4]
 801d46a:	b29b      	uxth	r3, r3
 801d46c:	429a      	cmp	r2, r3
 801d46e:	d902      	bls.n	801d476 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d470:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d474:	e0de      	b.n	801d634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d478:	68ba      	ldr	r2, [r7, #8]
 801d47a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d47e:	88db      	ldrh	r3, [r3, #6]
 801d480:	b29a      	uxth	r2, r3
 801d482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d484:	889b      	ldrh	r3, [r3, #4]
 801d486:	b29b      	uxth	r3, r3
 801d488:	429a      	cmp	r2, r3
 801d48a:	d03d      	beq.n	801d508 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d48c:	2300      	movs	r3, #0
 801d48e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d490:	e03a      	b.n	801d508 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d494:	88db      	ldrh	r3, [r3, #6]
 801d496:	b29a      	uxth	r2, r3
 801d498:	693b      	ldr	r3, [r7, #16]
 801d49a:	889b      	ldrh	r3, [r3, #4]
 801d49c:	b29b      	uxth	r3, r3
 801d49e:	429a      	cmp	r2, r3
 801d4a0:	d902      	bls.n	801d4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d4a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d4a6:	e0c5      	b.n	801d634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	68ba      	ldr	r2, [r7, #8]
 801d4ac:	605a      	str	r2, [r3, #4]
      break;
 801d4ae:	e02b      	b.n	801d508 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d4b2:	889b      	ldrh	r3, [r3, #4]
 801d4b4:	b29a      	uxth	r2, r3
 801d4b6:	693b      	ldr	r3, [r7, #16]
 801d4b8:	889b      	ldrh	r3, [r3, #4]
 801d4ba:	b29b      	uxth	r3, r3
 801d4bc:	429a      	cmp	r2, r3
 801d4be:	d102      	bne.n	801d4c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d4c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d4c4:	e0b6      	b.n	801d634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d4c8:	889b      	ldrh	r3, [r3, #4]
 801d4ca:	b29a      	uxth	r2, r3
 801d4cc:	693b      	ldr	r3, [r7, #16]
 801d4ce:	88db      	ldrh	r3, [r3, #6]
 801d4d0:	b29b      	uxth	r3, r3
 801d4d2:	429a      	cmp	r2, r3
 801d4d4:	d202      	bcs.n	801d4dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d4d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d4da:	e0ab      	b.n	801d634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d009      	beq.n	801d4f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4e4:	88db      	ldrh	r3, [r3, #6]
 801d4e6:	b29a      	uxth	r2, r3
 801d4e8:	693b      	ldr	r3, [r7, #16]
 801d4ea:	889b      	ldrh	r3, [r3, #4]
 801d4ec:	b29b      	uxth	r3, r3
 801d4ee:	429a      	cmp	r2, r3
 801d4f0:	d001      	beq.n	801d4f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d4f2:	2300      	movs	r3, #0
 801d4f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d4f6:	693b      	ldr	r3, [r7, #16]
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801d4fc:	693b      	ldr	r3, [r7, #16]
 801d4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801d500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d502:	2b00      	cmp	r3, #0
 801d504:	d193      	bne.n	801d42e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d506:	e000      	b.n	801d50a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d508:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d12d      	bne.n	801d56c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d512:	2b00      	cmp	r3, #0
 801d514:	d01c      	beq.n	801d550 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d518:	88db      	ldrh	r3, [r3, #6]
 801d51a:	b29a      	uxth	r2, r3
 801d51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d51e:	889b      	ldrh	r3, [r3, #4]
 801d520:	b29b      	uxth	r3, r3
 801d522:	429a      	cmp	r2, r3
 801d524:	d906      	bls.n	801d534 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d526:	4b45      	ldr	r3, [pc, #276]	@ (801d63c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d528:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801d52c:	4944      	ldr	r1, [pc, #272]	@ (801d640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d52e:	4845      	ldr	r0, [pc, #276]	@ (801d644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d530:	f001 fc2c 	bl	801ed8c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d536:	68ba      	ldr	r2, [r7, #8]
 801d538:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d53c:	88db      	ldrh	r3, [r3, #6]
 801d53e:	b29a      	uxth	r2, r3
 801d540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d542:	889b      	ldrh	r3, [r3, #4]
 801d544:	b29b      	uxth	r3, r3
 801d546:	429a      	cmp	r2, r3
 801d548:	d010      	beq.n	801d56c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d54a:	2300      	movs	r3, #0
 801d54c:	623b      	str	r3, [r7, #32]
 801d54e:	e00d      	b.n	801d56c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	685b      	ldr	r3, [r3, #4]
 801d554:	2b00      	cmp	r3, #0
 801d556:	d006      	beq.n	801d566 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d558:	4b38      	ldr	r3, [pc, #224]	@ (801d63c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d55a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801d55e:	493a      	ldr	r1, [pc, #232]	@ (801d648 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d560:	4838      	ldr	r0, [pc, #224]	@ (801d644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d562:	f001 fc13 	bl	801ed8c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d566:	68fb      	ldr	r3, [r7, #12]
 801d568:	68ba      	ldr	r2, [r7, #8]
 801d56a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d105      	bne.n	801d57e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d572:	68fb      	ldr	r3, [r7, #12]
 801d574:	7f9b      	ldrb	r3, [r3, #30]
 801d576:	f003 0301 	and.w	r3, r3, #1
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d059      	beq.n	801d632 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d57e:	6a3b      	ldr	r3, [r7, #32]
 801d580:	2b00      	cmp	r3, #0
 801d582:	d04f      	beq.n	801d624 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	685b      	ldr	r3, [r3, #4]
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d006      	beq.n	801d59a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d58c:	68fb      	ldr	r3, [r7, #12]
 801d58e:	685b      	ldr	r3, [r3, #4]
 801d590:	685b      	ldr	r3, [r3, #4]
 801d592:	889b      	ldrh	r3, [r3, #4]
 801d594:	b29b      	uxth	r3, r3
 801d596:	2b00      	cmp	r3, #0
 801d598:	d002      	beq.n	801d5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d59a:	2300      	movs	r3, #0
 801d59c:	623b      	str	r3, [r7, #32]
 801d59e:	e041      	b.n	801d624 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801d5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5a6:	681b      	ldr	r3, [r3, #0]
 801d5a8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801d5aa:	e012      	b.n	801d5d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5ae:	685b      	ldr	r3, [r3, #4]
 801d5b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801d5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d5b4:	88db      	ldrh	r3, [r3, #6]
 801d5b6:	b29a      	uxth	r2, r3
 801d5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5ba:	889b      	ldrh	r3, [r3, #4]
 801d5bc:	b29b      	uxth	r3, r3
 801d5be:	429a      	cmp	r2, r3
 801d5c0:	d002      	beq.n	801d5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	623b      	str	r3, [r7, #32]
            break;
 801d5c6:	e007      	b.n	801d5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801d5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801d5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d1e9      	bne.n	801d5ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d5d8:	6a3b      	ldr	r3, [r7, #32]
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d022      	beq.n	801d624 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	685b      	ldr	r3, [r3, #4]
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d106      	bne.n	801d5f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d5e6:	4b15      	ldr	r3, [pc, #84]	@ (801d63c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d5e8:	f240 12df 	movw	r2, #479	@ 0x1df
 801d5ec:	4917      	ldr	r1, [pc, #92]	@ (801d64c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d5ee:	4815      	ldr	r0, [pc, #84]	@ (801d644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d5f0:	f001 fbcc 	bl	801ed8c <iprintf>
          LWIP_ASSERT("sanity check",
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	685b      	ldr	r3, [r3, #4]
 801d5f8:	685b      	ldr	r3, [r3, #4]
 801d5fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d5fc:	429a      	cmp	r2, r3
 801d5fe:	d106      	bne.n	801d60e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d600:	4b0e      	ldr	r3, [pc, #56]	@ (801d63c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d602:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801d606:	4911      	ldr	r1, [pc, #68]	@ (801d64c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d608:	480e      	ldr	r0, [pc, #56]	@ (801d644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d60a:	f001 fbbf 	bl	801ed8c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d610:	681b      	ldr	r3, [r3, #0]
 801d612:	2b00      	cmp	r3, #0
 801d614:	d006      	beq.n	801d624 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d616:	4b09      	ldr	r3, [pc, #36]	@ (801d63c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d618:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801d61c:	490c      	ldr	r1, [pc, #48]	@ (801d650 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d61e:	4809      	ldr	r0, [pc, #36]	@ (801d644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d620:	f001 fbb4 	bl	801ed8c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d624:	6a3b      	ldr	r3, [r7, #32]
 801d626:	2b00      	cmp	r3, #0
 801d628:	bf14      	ite	ne
 801d62a:	2301      	movne	r3, #1
 801d62c:	2300      	moveq	r3, #0
 801d62e:	b2db      	uxtb	r3, r3
 801d630:	e000      	b.n	801d634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d632:	2300      	movs	r3, #0
}
 801d634:	4618      	mov	r0, r3
 801d636:	3730      	adds	r7, #48	@ 0x30
 801d638:	46bd      	mov	sp, r7
 801d63a:	bd80      	pop	{r7, pc}
 801d63c:	08023b60 	.word	0x08023b60
 801d640:	08023c44 	.word	0x08023c44
 801d644:	08023ba8 	.word	0x08023ba8
 801d648:	08023c64 	.word	0x08023c64
 801d64c:	08023c9c 	.word	0x08023c9c
 801d650:	08023cac 	.word	0x08023cac

0801d654 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d654:	b580      	push	{r7, lr}
 801d656:	b08e      	sub	sp, #56	@ 0x38
 801d658:	af00      	add	r7, sp, #0
 801d65a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	685b      	ldr	r3, [r3, #4]
 801d660:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d664:	781b      	ldrb	r3, [r3, #0]
 801d666:	f003 030f 	and.w	r3, r3, #15
 801d66a:	b2db      	uxtb	r3, r3
 801d66c:	009b      	lsls	r3, r3, #2
 801d66e:	b2db      	uxtb	r3, r3
 801d670:	2b14      	cmp	r3, #20
 801d672:	f040 8171 	bne.w	801d958 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d678:	88db      	ldrh	r3, [r3, #6]
 801d67a:	b29b      	uxth	r3, r3
 801d67c:	4618      	mov	r0, r3
 801d67e:	f7f4 feb1 	bl	80123e4 <lwip_htons>
 801d682:	4603      	mov	r3, r0
 801d684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d688:	b29b      	uxth	r3, r3
 801d68a:	00db      	lsls	r3, r3, #3
 801d68c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d690:	885b      	ldrh	r3, [r3, #2]
 801d692:	b29b      	uxth	r3, r3
 801d694:	4618      	mov	r0, r3
 801d696:	f7f4 fea5 	bl	80123e4 <lwip_htons>
 801d69a:	4603      	mov	r3, r0
 801d69c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6a0:	781b      	ldrb	r3, [r3, #0]
 801d6a2:	f003 030f 	and.w	r3, r3, #15
 801d6a6:	b2db      	uxtb	r3, r3
 801d6a8:	009b      	lsls	r3, r3, #2
 801d6aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801d6ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801d6b2:	b29b      	uxth	r3, r3
 801d6b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801d6b6:	429a      	cmp	r2, r3
 801d6b8:	f0c0 8150 	bcc.w	801d95c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d6bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801d6c0:	b29b      	uxth	r3, r3
 801d6c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801d6c4:	1ad3      	subs	r3, r2, r3
 801d6c6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d6c8:	6878      	ldr	r0, [r7, #4]
 801d6ca:	f7f6 fbfd 	bl	8013ec8 <pbuf_clen>
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d6d2:	4b8c      	ldr	r3, [pc, #560]	@ (801d904 <ip4_reass+0x2b0>)
 801d6d4:	881b      	ldrh	r3, [r3, #0]
 801d6d6:	461a      	mov	r2, r3
 801d6d8:	8c3b      	ldrh	r3, [r7, #32]
 801d6da:	4413      	add	r3, r2
 801d6dc:	2b0a      	cmp	r3, #10
 801d6de:	dd10      	ble.n	801d702 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d6e0:	8c3b      	ldrh	r3, [r7, #32]
 801d6e2:	4619      	mov	r1, r3
 801d6e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d6e6:	f7ff fd81 	bl	801d1ec <ip_reass_remove_oldest_datagram>
 801d6ea:	4603      	mov	r3, r0
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	f000 8137 	beq.w	801d960 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d6f2:	4b84      	ldr	r3, [pc, #528]	@ (801d904 <ip4_reass+0x2b0>)
 801d6f4:	881b      	ldrh	r3, [r3, #0]
 801d6f6:	461a      	mov	r2, r3
 801d6f8:	8c3b      	ldrh	r3, [r7, #32]
 801d6fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d6fc:	2b0a      	cmp	r3, #10
 801d6fe:	f300 812f 	bgt.w	801d960 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d702:	4b81      	ldr	r3, [pc, #516]	@ (801d908 <ip4_reass+0x2b4>)
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	633b      	str	r3, [r7, #48]	@ 0x30
 801d708:	e015      	b.n	801d736 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d70c:	695a      	ldr	r2, [r3, #20]
 801d70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d710:	68db      	ldr	r3, [r3, #12]
 801d712:	429a      	cmp	r2, r3
 801d714:	d10c      	bne.n	801d730 <ip4_reass+0xdc>
 801d716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d718:	699a      	ldr	r2, [r3, #24]
 801d71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d71c:	691b      	ldr	r3, [r3, #16]
 801d71e:	429a      	cmp	r2, r3
 801d720:	d106      	bne.n	801d730 <ip4_reass+0xdc>
 801d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d724:	899a      	ldrh	r2, [r3, #12]
 801d726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d728:	889b      	ldrh	r3, [r3, #4]
 801d72a:	b29b      	uxth	r3, r3
 801d72c:	429a      	cmp	r2, r3
 801d72e:	d006      	beq.n	801d73e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	633b      	str	r3, [r7, #48]	@ 0x30
 801d736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d1e6      	bne.n	801d70a <ip4_reass+0xb6>
 801d73c:	e000      	b.n	801d740 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d73e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d742:	2b00      	cmp	r3, #0
 801d744:	d109      	bne.n	801d75a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d746:	8c3b      	ldrh	r3, [r7, #32]
 801d748:	4619      	mov	r1, r3
 801d74a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d74c:	f7ff fdb0 	bl	801d2b0 <ip_reass_enqueue_new_datagram>
 801d750:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d754:	2b00      	cmp	r3, #0
 801d756:	d11c      	bne.n	801d792 <ip4_reass+0x13e>
      goto nullreturn;
 801d758:	e105      	b.n	801d966 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d75c:	88db      	ldrh	r3, [r3, #6]
 801d75e:	b29b      	uxth	r3, r3
 801d760:	4618      	mov	r0, r3
 801d762:	f7f4 fe3f 	bl	80123e4 <lwip_htons>
 801d766:	4603      	mov	r3, r0
 801d768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	d110      	bne.n	801d792 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d772:	89db      	ldrh	r3, [r3, #14]
 801d774:	4618      	mov	r0, r3
 801d776:	f7f4 fe35 	bl	80123e4 <lwip_htons>
 801d77a:	4603      	mov	r3, r0
 801d77c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d780:	2b00      	cmp	r3, #0
 801d782:	d006      	beq.n	801d792 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d786:	3308      	adds	r3, #8
 801d788:	2214      	movs	r2, #20
 801d78a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801d78c:	4618      	mov	r0, r3
 801d78e:	f001 fcd2 	bl	801f136 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d794:	88db      	ldrh	r3, [r3, #6]
 801d796:	b29b      	uxth	r3, r3
 801d798:	f003 0320 	and.w	r3, r3, #32
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	bf0c      	ite	eq
 801d7a0:	2301      	moveq	r3, #1
 801d7a2:	2300      	movne	r3, #0
 801d7a4:	b2db      	uxtb	r3, r3
 801d7a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d7a8:	69fb      	ldr	r3, [r7, #28]
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d00e      	beq.n	801d7cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d7ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801d7b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d7b2:	4413      	add	r3, r2
 801d7b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d7b6:	8b7a      	ldrh	r2, [r7, #26]
 801d7b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d7ba:	429a      	cmp	r2, r3
 801d7bc:	f0c0 80a0 	bcc.w	801d900 <ip4_reass+0x2ac>
 801d7c0:	8b7b      	ldrh	r3, [r7, #26]
 801d7c2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801d7c6:	4293      	cmp	r3, r2
 801d7c8:	f200 809a 	bhi.w	801d900 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d7cc:	69fa      	ldr	r2, [r7, #28]
 801d7ce:	6879      	ldr	r1, [r7, #4]
 801d7d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d7d2:	f7ff fdd5 	bl	801d380 <ip_reass_chain_frag_into_datagram_and_validate>
 801d7d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d7d8:	697b      	ldr	r3, [r7, #20]
 801d7da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d7de:	f000 809b 	beq.w	801d918 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d7e2:	4b48      	ldr	r3, [pc, #288]	@ (801d904 <ip4_reass+0x2b0>)
 801d7e4:	881a      	ldrh	r2, [r3, #0]
 801d7e6:	8c3b      	ldrh	r3, [r7, #32]
 801d7e8:	4413      	add	r3, r2
 801d7ea:	b29a      	uxth	r2, r3
 801d7ec:	4b45      	ldr	r3, [pc, #276]	@ (801d904 <ip4_reass+0x2b0>)
 801d7ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d7f0:	69fb      	ldr	r3, [r7, #28]
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	d00d      	beq.n	801d812 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d7f6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801d7f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d7fa:	4413      	add	r3, r2
 801d7fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d800:	8a7a      	ldrh	r2, [r7, #18]
 801d802:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d806:	7f9b      	ldrb	r3, [r3, #30]
 801d808:	f043 0301 	orr.w	r3, r3, #1
 801d80c:	b2da      	uxtb	r2, r3
 801d80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d810:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d812:	697b      	ldr	r3, [r7, #20]
 801d814:	2b01      	cmp	r3, #1
 801d816:	d171      	bne.n	801d8fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d81a:	8b9b      	ldrh	r3, [r3, #28]
 801d81c:	3314      	adds	r3, #20
 801d81e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d822:	685b      	ldr	r3, [r3, #4]
 801d824:	685b      	ldr	r3, [r3, #4]
 801d826:	681b      	ldr	r3, [r3, #0]
 801d828:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d82c:	685b      	ldr	r3, [r3, #4]
 801d82e:	685b      	ldr	r3, [r3, #4]
 801d830:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d834:	3308      	adds	r3, #8
 801d836:	2214      	movs	r2, #20
 801d838:	4619      	mov	r1, r3
 801d83a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d83c:	f001 fc7b 	bl	801f136 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d840:	8a3b      	ldrh	r3, [r7, #16]
 801d842:	4618      	mov	r0, r3
 801d844:	f7f4 fdce 	bl	80123e4 <lwip_htons>
 801d848:	4603      	mov	r3, r0
 801d84a:	461a      	mov	r2, r3
 801d84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d84e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d852:	2200      	movs	r2, #0
 801d854:	719a      	strb	r2, [r3, #6]
 801d856:	2200      	movs	r2, #0
 801d858:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d85c:	2200      	movs	r2, #0
 801d85e:	729a      	strb	r2, [r3, #10]
 801d860:	2200      	movs	r2, #0
 801d862:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d866:	685b      	ldr	r3, [r3, #4]
 801d868:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d86a:	e00d      	b.n	801d888 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d86e:	685b      	ldr	r3, [r3, #4]
 801d870:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d872:	2114      	movs	r1, #20
 801d874:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d876:	f7f6 fa13 	bl	8013ca0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d87a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d87c:	6878      	ldr	r0, [r7, #4]
 801d87e:	f7f6 fb63 	bl	8013f48 <pbuf_cat>
      r = iprh->next_pbuf;
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801d888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d1ee      	bne.n	801d86c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d88e:	4b1e      	ldr	r3, [pc, #120]	@ (801d908 <ip4_reass+0x2b4>)
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d894:	429a      	cmp	r2, r3
 801d896:	d102      	bne.n	801d89e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d898:	2300      	movs	r3, #0
 801d89a:	637b      	str	r3, [r7, #52]	@ 0x34
 801d89c:	e010      	b.n	801d8c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d89e:	4b1a      	ldr	r3, [pc, #104]	@ (801d908 <ip4_reass+0x2b4>)
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	637b      	str	r3, [r7, #52]	@ 0x34
 801d8a4:	e007      	b.n	801d8b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d8a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d8a8:	681b      	ldr	r3, [r3, #0]
 801d8aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d8ac:	429a      	cmp	r2, r3
 801d8ae:	d006      	beq.n	801d8be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d8b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d8b2:	681b      	ldr	r3, [r3, #0]
 801d8b4:	637b      	str	r3, [r7, #52]	@ 0x34
 801d8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d1f4      	bne.n	801d8a6 <ip4_reass+0x252>
 801d8bc:	e000      	b.n	801d8c0 <ip4_reass+0x26c>
          break;
 801d8be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d8c0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d8c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d8c4:	f7ff fd2e 	bl	801d324 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d8c8:	6878      	ldr	r0, [r7, #4]
 801d8ca:	f7f6 fafd 	bl	8013ec8 <pbuf_clen>
 801d8ce:	4603      	mov	r3, r0
 801d8d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d8d2:	4b0c      	ldr	r3, [pc, #48]	@ (801d904 <ip4_reass+0x2b0>)
 801d8d4:	881b      	ldrh	r3, [r3, #0]
 801d8d6:	8c3a      	ldrh	r2, [r7, #32]
 801d8d8:	429a      	cmp	r2, r3
 801d8da:	d906      	bls.n	801d8ea <ip4_reass+0x296>
 801d8dc:	4b0b      	ldr	r3, [pc, #44]	@ (801d90c <ip4_reass+0x2b8>)
 801d8de:	f240 229b 	movw	r2, #667	@ 0x29b
 801d8e2:	490b      	ldr	r1, [pc, #44]	@ (801d910 <ip4_reass+0x2bc>)
 801d8e4:	480b      	ldr	r0, [pc, #44]	@ (801d914 <ip4_reass+0x2c0>)
 801d8e6:	f001 fa51 	bl	801ed8c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d8ea:	4b06      	ldr	r3, [pc, #24]	@ (801d904 <ip4_reass+0x2b0>)
 801d8ec:	881a      	ldrh	r2, [r3, #0]
 801d8ee:	8c3b      	ldrh	r3, [r7, #32]
 801d8f0:	1ad3      	subs	r3, r2, r3
 801d8f2:	b29a      	uxth	r2, r3
 801d8f4:	4b03      	ldr	r3, [pc, #12]	@ (801d904 <ip4_reass+0x2b0>)
 801d8f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	e038      	b.n	801d96e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d8fc:	2300      	movs	r3, #0
 801d8fe:	e036      	b.n	801d96e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801d900:	bf00      	nop
 801d902:	e00a      	b.n	801d91a <ip4_reass+0x2c6>
 801d904:	200228f8 	.word	0x200228f8
 801d908:	200228f4 	.word	0x200228f4
 801d90c:	08023b60 	.word	0x08023b60
 801d910:	08023cd0 	.word	0x08023cd0
 801d914:	08023ba8 	.word	0x08023ba8
    goto nullreturn_ipr;
 801d918:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d106      	bne.n	801d92e <ip4_reass+0x2da>
 801d920:	4b15      	ldr	r3, [pc, #84]	@ (801d978 <ip4_reass+0x324>)
 801d922:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801d926:	4915      	ldr	r1, [pc, #84]	@ (801d97c <ip4_reass+0x328>)
 801d928:	4815      	ldr	r0, [pc, #84]	@ (801d980 <ip4_reass+0x32c>)
 801d92a:	f001 fa2f 	bl	801ed8c <iprintf>
  if (ipr->p == NULL) {
 801d92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d930:	685b      	ldr	r3, [r3, #4]
 801d932:	2b00      	cmp	r3, #0
 801d934:	d116      	bne.n	801d964 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d936:	4b13      	ldr	r3, [pc, #76]	@ (801d984 <ip4_reass+0x330>)
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d93c:	429a      	cmp	r2, r3
 801d93e:	d006      	beq.n	801d94e <ip4_reass+0x2fa>
 801d940:	4b0d      	ldr	r3, [pc, #52]	@ (801d978 <ip4_reass+0x324>)
 801d942:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801d946:	4910      	ldr	r1, [pc, #64]	@ (801d988 <ip4_reass+0x334>)
 801d948:	480d      	ldr	r0, [pc, #52]	@ (801d980 <ip4_reass+0x32c>)
 801d94a:	f001 fa1f 	bl	801ed8c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d94e:	2100      	movs	r1, #0
 801d950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d952:	f7ff fce7 	bl	801d324 <ip_reass_dequeue_datagram>
 801d956:	e006      	b.n	801d966 <ip4_reass+0x312>
    goto nullreturn;
 801d958:	bf00      	nop
 801d95a:	e004      	b.n	801d966 <ip4_reass+0x312>
    goto nullreturn;
 801d95c:	bf00      	nop
 801d95e:	e002      	b.n	801d966 <ip4_reass+0x312>
      goto nullreturn;
 801d960:	bf00      	nop
 801d962:	e000      	b.n	801d966 <ip4_reass+0x312>
  }

nullreturn:
 801d964:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d966:	6878      	ldr	r0, [r7, #4]
 801d968:	f7f6 fa20 	bl	8013dac <pbuf_free>
  return NULL;
 801d96c:	2300      	movs	r3, #0
}
 801d96e:	4618      	mov	r0, r3
 801d970:	3738      	adds	r7, #56	@ 0x38
 801d972:	46bd      	mov	sp, r7
 801d974:	bd80      	pop	{r7, pc}
 801d976:	bf00      	nop
 801d978:	08023b60 	.word	0x08023b60
 801d97c:	08023cec 	.word	0x08023cec
 801d980:	08023ba8 	.word	0x08023ba8
 801d984:	200228f4 	.word	0x200228f4
 801d988:	08023cf8 	.word	0x08023cf8

0801d98c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d98c:	b580      	push	{r7, lr}
 801d98e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d990:	2005      	movs	r0, #5
 801d992:	f7f5 f9fb 	bl	8012d8c <memp_malloc>
 801d996:	4603      	mov	r3, r0
}
 801d998:	4618      	mov	r0, r3
 801d99a:	bd80      	pop	{r7, pc}

0801d99c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d99c:	b580      	push	{r7, lr}
 801d99e:	b082      	sub	sp, #8
 801d9a0:	af00      	add	r7, sp, #0
 801d9a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d106      	bne.n	801d9b8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d9aa:	4b07      	ldr	r3, [pc, #28]	@ (801d9c8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d9ac:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801d9b0:	4906      	ldr	r1, [pc, #24]	@ (801d9cc <ip_frag_free_pbuf_custom_ref+0x30>)
 801d9b2:	4807      	ldr	r0, [pc, #28]	@ (801d9d0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d9b4:	f001 f9ea 	bl	801ed8c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d9b8:	6879      	ldr	r1, [r7, #4]
 801d9ba:	2005      	movs	r0, #5
 801d9bc:	f7f5 fa5c 	bl	8012e78 <memp_free>
}
 801d9c0:	bf00      	nop
 801d9c2:	3708      	adds	r7, #8
 801d9c4:	46bd      	mov	sp, r7
 801d9c6:	bd80      	pop	{r7, pc}
 801d9c8:	08023b60 	.word	0x08023b60
 801d9cc:	08023d18 	.word	0x08023d18
 801d9d0:	08023ba8 	.word	0x08023ba8

0801d9d4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d9d4:	b580      	push	{r7, lr}
 801d9d6:	b084      	sub	sp, #16
 801d9d8:	af00      	add	r7, sp, #0
 801d9da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	d106      	bne.n	801d9f4 <ipfrag_free_pbuf_custom+0x20>
 801d9e6:	4b11      	ldr	r3, [pc, #68]	@ (801da2c <ipfrag_free_pbuf_custom+0x58>)
 801d9e8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801d9ec:	4910      	ldr	r1, [pc, #64]	@ (801da30 <ipfrag_free_pbuf_custom+0x5c>)
 801d9ee:	4811      	ldr	r0, [pc, #68]	@ (801da34 <ipfrag_free_pbuf_custom+0x60>)
 801d9f0:	f001 f9cc 	bl	801ed8c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d9f4:	68fa      	ldr	r2, [r7, #12]
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	429a      	cmp	r2, r3
 801d9fa:	d006      	beq.n	801da0a <ipfrag_free_pbuf_custom+0x36>
 801d9fc:	4b0b      	ldr	r3, [pc, #44]	@ (801da2c <ipfrag_free_pbuf_custom+0x58>)
 801d9fe:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801da02:	490d      	ldr	r1, [pc, #52]	@ (801da38 <ipfrag_free_pbuf_custom+0x64>)
 801da04:	480b      	ldr	r0, [pc, #44]	@ (801da34 <ipfrag_free_pbuf_custom+0x60>)
 801da06:	f001 f9c1 	bl	801ed8c <iprintf>
  if (pcr->original != NULL) {
 801da0a:	68fb      	ldr	r3, [r7, #12]
 801da0c:	695b      	ldr	r3, [r3, #20]
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d004      	beq.n	801da1c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801da12:	68fb      	ldr	r3, [r7, #12]
 801da14:	695b      	ldr	r3, [r3, #20]
 801da16:	4618      	mov	r0, r3
 801da18:	f7f6 f9c8 	bl	8013dac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801da1c:	68f8      	ldr	r0, [r7, #12]
 801da1e:	f7ff ffbd 	bl	801d99c <ip_frag_free_pbuf_custom_ref>
}
 801da22:	bf00      	nop
 801da24:	3710      	adds	r7, #16
 801da26:	46bd      	mov	sp, r7
 801da28:	bd80      	pop	{r7, pc}
 801da2a:	bf00      	nop
 801da2c:	08023b60 	.word	0x08023b60
 801da30:	08023d24 	.word	0x08023d24
 801da34:	08023ba8 	.word	0x08023ba8
 801da38:	08023d30 	.word	0x08023d30

0801da3c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801da3c:	b580      	push	{r7, lr}
 801da3e:	b094      	sub	sp, #80	@ 0x50
 801da40:	af02      	add	r7, sp, #8
 801da42:	60f8      	str	r0, [r7, #12]
 801da44:	60b9      	str	r1, [r7, #8]
 801da46:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801da48:	2300      	movs	r3, #0
 801da4a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801da4e:	68bb      	ldr	r3, [r7, #8]
 801da50:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801da52:	3b14      	subs	r3, #20
 801da54:	2b00      	cmp	r3, #0
 801da56:	da00      	bge.n	801da5a <ip4_frag+0x1e>
 801da58:	3307      	adds	r3, #7
 801da5a:	10db      	asrs	r3, r3, #3
 801da5c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801da5e:	2314      	movs	r3, #20
 801da60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801da62:	68fb      	ldr	r3, [r7, #12]
 801da64:	685b      	ldr	r3, [r3, #4]
 801da66:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801da68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da6a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801da6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801da6e:	781b      	ldrb	r3, [r3, #0]
 801da70:	f003 030f 	and.w	r3, r3, #15
 801da74:	b2db      	uxtb	r3, r3
 801da76:	009b      	lsls	r3, r3, #2
 801da78:	b2db      	uxtb	r3, r3
 801da7a:	2b14      	cmp	r3, #20
 801da7c:	d002      	beq.n	801da84 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801da7e:	f06f 0305 	mvn.w	r3, #5
 801da82:	e110      	b.n	801dca6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	895b      	ldrh	r3, [r3, #10]
 801da88:	2b13      	cmp	r3, #19
 801da8a:	d809      	bhi.n	801daa0 <ip4_frag+0x64>
 801da8c:	4b88      	ldr	r3, [pc, #544]	@ (801dcb0 <ip4_frag+0x274>)
 801da8e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801da92:	4988      	ldr	r1, [pc, #544]	@ (801dcb4 <ip4_frag+0x278>)
 801da94:	4888      	ldr	r0, [pc, #544]	@ (801dcb8 <ip4_frag+0x27c>)
 801da96:	f001 f979 	bl	801ed8c <iprintf>
 801da9a:	f06f 0305 	mvn.w	r3, #5
 801da9e:	e102      	b.n	801dca6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801daa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801daa2:	88db      	ldrh	r3, [r3, #6]
 801daa4:	b29b      	uxth	r3, r3
 801daa6:	4618      	mov	r0, r3
 801daa8:	f7f4 fc9c 	bl	80123e4 <lwip_htons>
 801daac:	4603      	mov	r3, r0
 801daae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801dab0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801dab2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dab6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801daba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801dabc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801dac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801dac2:	68fb      	ldr	r3, [r7, #12]
 801dac4:	891b      	ldrh	r3, [r3, #8]
 801dac6:	3b14      	subs	r3, #20
 801dac8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801dacc:	e0e1      	b.n	801dc92 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801dace:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801dad0:	00db      	lsls	r3, r3, #3
 801dad2:	b29b      	uxth	r3, r3
 801dad4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801dad8:	4293      	cmp	r3, r2
 801dada:	bf28      	it	cs
 801dadc:	4613      	movcs	r3, r2
 801dade:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801dae0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801dae4:	2114      	movs	r1, #20
 801dae6:	200e      	movs	r0, #14
 801dae8:	f7f5 fe7c 	bl	80137e4 <pbuf_alloc>
 801daec:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801daee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	f000 80d5 	beq.w	801dca0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801daf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801daf8:	895b      	ldrh	r3, [r3, #10]
 801dafa:	2b13      	cmp	r3, #19
 801dafc:	d806      	bhi.n	801db0c <ip4_frag+0xd0>
 801dafe:	4b6c      	ldr	r3, [pc, #432]	@ (801dcb0 <ip4_frag+0x274>)
 801db00:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801db04:	496d      	ldr	r1, [pc, #436]	@ (801dcbc <ip4_frag+0x280>)
 801db06:	486c      	ldr	r0, [pc, #432]	@ (801dcb8 <ip4_frag+0x27c>)
 801db08:	f001 f940 	bl	801ed8c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801db0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db0e:	685b      	ldr	r3, [r3, #4]
 801db10:	2214      	movs	r2, #20
 801db12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801db14:	4618      	mov	r0, r3
 801db16:	f001 fb0e 	bl	801f136 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801db1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db1c:	685b      	ldr	r3, [r3, #4]
 801db1e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801db20:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801db22:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801db26:	e064      	b.n	801dbf2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	895a      	ldrh	r2, [r3, #10]
 801db2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801db2e:	1ad3      	subs	r3, r2, r3
 801db30:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	895b      	ldrh	r3, [r3, #10]
 801db36:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801db38:	429a      	cmp	r2, r3
 801db3a:	d906      	bls.n	801db4a <ip4_frag+0x10e>
 801db3c:	4b5c      	ldr	r3, [pc, #368]	@ (801dcb0 <ip4_frag+0x274>)
 801db3e:	f240 322d 	movw	r2, #813	@ 0x32d
 801db42:	495f      	ldr	r1, [pc, #380]	@ (801dcc0 <ip4_frag+0x284>)
 801db44:	485c      	ldr	r0, [pc, #368]	@ (801dcb8 <ip4_frag+0x27c>)
 801db46:	f001 f921 	bl	801ed8c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801db4a:	8bfa      	ldrh	r2, [r7, #30]
 801db4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801db50:	4293      	cmp	r3, r2
 801db52:	bf28      	it	cs
 801db54:	4613      	movcs	r3, r2
 801db56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801db5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d105      	bne.n	801db6e <ip4_frag+0x132>
        poff = 0;
 801db62:	2300      	movs	r3, #0
 801db64:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	60fb      	str	r3, [r7, #12]
        continue;
 801db6c:	e041      	b.n	801dbf2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801db6e:	f7ff ff0d 	bl	801d98c <ip_frag_alloc_pbuf_custom_ref>
 801db72:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801db74:	69bb      	ldr	r3, [r7, #24]
 801db76:	2b00      	cmp	r3, #0
 801db78:	d103      	bne.n	801db82 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801db7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801db7c:	f7f6 f916 	bl	8013dac <pbuf_free>
        goto memerr;
 801db80:	e08f      	b.n	801dca2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801db82:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801db88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801db8a:	4413      	add	r3, r2
 801db8c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801db90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801db94:	9201      	str	r2, [sp, #4]
 801db96:	9300      	str	r3, [sp, #0]
 801db98:	4603      	mov	r3, r0
 801db9a:	2241      	movs	r2, #65	@ 0x41
 801db9c:	2000      	movs	r0, #0
 801db9e:	f7f5 ff4b 	bl	8013a38 <pbuf_alloced_custom>
 801dba2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801dba4:	697b      	ldr	r3, [r7, #20]
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d106      	bne.n	801dbb8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801dbaa:	69b8      	ldr	r0, [r7, #24]
 801dbac:	f7ff fef6 	bl	801d99c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801dbb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dbb2:	f7f6 f8fb 	bl	8013dac <pbuf_free>
        goto memerr;
 801dbb6:	e074      	b.n	801dca2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801dbb8:	68f8      	ldr	r0, [r7, #12]
 801dbba:	f7f6 f99d 	bl	8013ef8 <pbuf_ref>
      pcr->original = p;
 801dbbe:	69bb      	ldr	r3, [r7, #24]
 801dbc0:	68fa      	ldr	r2, [r7, #12]
 801dbc2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801dbc4:	69bb      	ldr	r3, [r7, #24]
 801dbc6:	4a3f      	ldr	r2, [pc, #252]	@ (801dcc4 <ip4_frag+0x288>)
 801dbc8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801dbca:	6979      	ldr	r1, [r7, #20]
 801dbcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dbce:	f7f6 f9bb 	bl	8013f48 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801dbd2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801dbd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801dbda:	1ad3      	subs	r3, r2, r3
 801dbdc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801dbe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d004      	beq.n	801dbf2 <ip4_frag+0x1b6>
        poff = 0;
 801dbe8:	2300      	movs	r3, #0
 801dbea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801dbec:	68fb      	ldr	r3, [r7, #12]
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801dbf2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d196      	bne.n	801db28 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801dbfa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801dbfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801dc00:	4413      	add	r3, r2
 801dc02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801dc04:	68bb      	ldr	r3, [r7, #8]
 801dc06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dc08:	f1a3 0213 	sub.w	r2, r3, #19
 801dc0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801dc10:	429a      	cmp	r2, r3
 801dc12:	bfcc      	ite	gt
 801dc14:	2301      	movgt	r3, #1
 801dc16:	2300      	movle	r3, #0
 801dc18:	b2db      	uxtb	r3, r3
 801dc1a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801dc1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801dc20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dc24:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801dc26:	6a3b      	ldr	r3, [r7, #32]
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d002      	beq.n	801dc32 <ip4_frag+0x1f6>
 801dc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	d003      	beq.n	801dc3a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801dc32:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801dc34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801dc38:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801dc3a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	f7f4 fbd1 	bl	80123e4 <lwip_htons>
 801dc42:	4603      	mov	r3, r0
 801dc44:	461a      	mov	r2, r3
 801dc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc48:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801dc4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801dc4c:	3314      	adds	r3, #20
 801dc4e:	b29b      	uxth	r3, r3
 801dc50:	4618      	mov	r0, r3
 801dc52:	f7f4 fbc7 	bl	80123e4 <lwip_htons>
 801dc56:	4603      	mov	r3, r0
 801dc58:	461a      	mov	r2, r3
 801dc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc5c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801dc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc60:	2200      	movs	r2, #0
 801dc62:	729a      	strb	r2, [r3, #10]
 801dc64:	2200      	movs	r2, #0
 801dc66:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801dc68:	68bb      	ldr	r3, [r7, #8]
 801dc6a:	695b      	ldr	r3, [r3, #20]
 801dc6c:	687a      	ldr	r2, [r7, #4]
 801dc6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801dc70:	68b8      	ldr	r0, [r7, #8]
 801dc72:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801dc74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dc76:	f7f6 f899 	bl	8013dac <pbuf_free>
    left = (u16_t)(left - fragsize);
 801dc7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801dc7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801dc80:	1ad3      	subs	r3, r2, r3
 801dc82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801dc86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801dc8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801dc8c:	4413      	add	r3, r2
 801dc8e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801dc92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	f47f af19 	bne.w	801dace <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801dc9c:	2300      	movs	r3, #0
 801dc9e:	e002      	b.n	801dca6 <ip4_frag+0x26a>
      goto memerr;
 801dca0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801dca2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801dca6:	4618      	mov	r0, r3
 801dca8:	3748      	adds	r7, #72	@ 0x48
 801dcaa:	46bd      	mov	sp, r7
 801dcac:	bd80      	pop	{r7, pc}
 801dcae:	bf00      	nop
 801dcb0:	08023b60 	.word	0x08023b60
 801dcb4:	08023d3c 	.word	0x08023d3c
 801dcb8:	08023ba8 	.word	0x08023ba8
 801dcbc:	08023d58 	.word	0x08023d58
 801dcc0:	08023d78 	.word	0x08023d78
 801dcc4:	0801d9d5 	.word	0x0801d9d5

0801dcc8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801dcc8:	b580      	push	{r7, lr}
 801dcca:	b086      	sub	sp, #24
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]
 801dcd0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801dcd2:	230e      	movs	r3, #14
 801dcd4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	895b      	ldrh	r3, [r3, #10]
 801dcda:	2b0e      	cmp	r3, #14
 801dcdc:	d96e      	bls.n	801ddbc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	7bdb      	ldrb	r3, [r3, #15]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d106      	bne.n	801dcf4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801dce6:	683b      	ldr	r3, [r7, #0]
 801dce8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801dcec:	3301      	adds	r3, #1
 801dcee:	b2da      	uxtb	r2, r3
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	685b      	ldr	r3, [r3, #4]
 801dcf8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801dcfa:	693b      	ldr	r3, [r7, #16]
 801dcfc:	7b1a      	ldrb	r2, [r3, #12]
 801dcfe:	7b5b      	ldrb	r3, [r3, #13]
 801dd00:	021b      	lsls	r3, r3, #8
 801dd02:	4313      	orrs	r3, r2
 801dd04:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801dd06:	693b      	ldr	r3, [r7, #16]
 801dd08:	781b      	ldrb	r3, [r3, #0]
 801dd0a:	f003 0301 	and.w	r3, r3, #1
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d023      	beq.n	801dd5a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801dd12:	693b      	ldr	r3, [r7, #16]
 801dd14:	781b      	ldrb	r3, [r3, #0]
 801dd16:	2b01      	cmp	r3, #1
 801dd18:	d10f      	bne.n	801dd3a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dd1a:	693b      	ldr	r3, [r7, #16]
 801dd1c:	785b      	ldrb	r3, [r3, #1]
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d11b      	bne.n	801dd5a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801dd22:	693b      	ldr	r3, [r7, #16]
 801dd24:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dd26:	2b5e      	cmp	r3, #94	@ 0x5e
 801dd28:	d117      	bne.n	801dd5a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	7b5b      	ldrb	r3, [r3, #13]
 801dd2e:	f043 0310 	orr.w	r3, r3, #16
 801dd32:	b2da      	uxtb	r2, r3
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	735a      	strb	r2, [r3, #13]
 801dd38:	e00f      	b.n	801dd5a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801dd3a:	693b      	ldr	r3, [r7, #16]
 801dd3c:	2206      	movs	r2, #6
 801dd3e:	4928      	ldr	r1, [pc, #160]	@ (801dde0 <ethernet_input+0x118>)
 801dd40:	4618      	mov	r0, r3
 801dd42:	f001 f973 	bl	801f02c <memcmp>
 801dd46:	4603      	mov	r3, r0
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d106      	bne.n	801dd5a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	7b5b      	ldrb	r3, [r3, #13]
 801dd50:	f043 0308 	orr.w	r3, r3, #8
 801dd54:	b2da      	uxtb	r2, r3
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801dd5a:	89fb      	ldrh	r3, [r7, #14]
 801dd5c:	2b08      	cmp	r3, #8
 801dd5e:	d003      	beq.n	801dd68 <ethernet_input+0xa0>
 801dd60:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801dd64:	d014      	beq.n	801dd90 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801dd66:	e032      	b.n	801ddce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dd68:	683b      	ldr	r3, [r7, #0]
 801dd6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801dd6e:	f003 0308 	and.w	r3, r3, #8
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d024      	beq.n	801ddc0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dd76:	8afb      	ldrh	r3, [r7, #22]
 801dd78:	4619      	mov	r1, r3
 801dd7a:	6878      	ldr	r0, [r7, #4]
 801dd7c:	f7f5 ff90 	bl	8013ca0 <pbuf_remove_header>
 801dd80:	4603      	mov	r3, r0
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	d11e      	bne.n	801ddc4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801dd86:	6839      	ldr	r1, [r7, #0]
 801dd88:	6878      	ldr	r0, [r7, #4]
 801dd8a:	f7fe ff21 	bl	801cbd0 <ip4_input>
      break;
 801dd8e:	e013      	b.n	801ddb8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dd90:	683b      	ldr	r3, [r7, #0]
 801dd92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801dd96:	f003 0308 	and.w	r3, r3, #8
 801dd9a:	2b00      	cmp	r3, #0
 801dd9c:	d014      	beq.n	801ddc8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dd9e:	8afb      	ldrh	r3, [r7, #22]
 801dda0:	4619      	mov	r1, r3
 801dda2:	6878      	ldr	r0, [r7, #4]
 801dda4:	f7f5 ff7c 	bl	8013ca0 <pbuf_remove_header>
 801dda8:	4603      	mov	r3, r0
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	d10e      	bne.n	801ddcc <ethernet_input+0x104>
        etharp_input(p, netif);
 801ddae:	6839      	ldr	r1, [r7, #0]
 801ddb0:	6878      	ldr	r0, [r7, #4]
 801ddb2:	f7fe f82f 	bl	801be14 <etharp_input>
      break;
 801ddb6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ddb8:	2300      	movs	r3, #0
 801ddba:	e00c      	b.n	801ddd6 <ethernet_input+0x10e>
    goto free_and_return;
 801ddbc:	bf00      	nop
 801ddbe:	e006      	b.n	801ddce <ethernet_input+0x106>
        goto free_and_return;
 801ddc0:	bf00      	nop
 801ddc2:	e004      	b.n	801ddce <ethernet_input+0x106>
        goto free_and_return;
 801ddc4:	bf00      	nop
 801ddc6:	e002      	b.n	801ddce <ethernet_input+0x106>
        goto free_and_return;
 801ddc8:	bf00      	nop
 801ddca:	e000      	b.n	801ddce <ethernet_input+0x106>
        goto free_and_return;
 801ddcc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ddce:	6878      	ldr	r0, [r7, #4]
 801ddd0:	f7f5 ffec 	bl	8013dac <pbuf_free>
  return ERR_OK;
 801ddd4:	2300      	movs	r3, #0
}
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	3718      	adds	r7, #24
 801ddda:	46bd      	mov	sp, r7
 801dddc:	bd80      	pop	{r7, pc}
 801ddde:	bf00      	nop
 801dde0:	08024338 	.word	0x08024338

0801dde4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801dde4:	b580      	push	{r7, lr}
 801dde6:	b086      	sub	sp, #24
 801dde8:	af00      	add	r7, sp, #0
 801ddea:	60f8      	str	r0, [r7, #12]
 801ddec:	60b9      	str	r1, [r7, #8]
 801ddee:	607a      	str	r2, [r7, #4]
 801ddf0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ddf2:	8c3b      	ldrh	r3, [r7, #32]
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	f7f4 faf5 	bl	80123e4 <lwip_htons>
 801ddfa:	4603      	mov	r3, r0
 801ddfc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ddfe:	210e      	movs	r1, #14
 801de00:	68b8      	ldr	r0, [r7, #8]
 801de02:	f7f5 ff3d 	bl	8013c80 <pbuf_add_header>
 801de06:	4603      	mov	r3, r0
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d125      	bne.n	801de58 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801de0c:	68bb      	ldr	r3, [r7, #8]
 801de0e:	685b      	ldr	r3, [r3, #4]
 801de10:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801de12:	693b      	ldr	r3, [r7, #16]
 801de14:	8afa      	ldrh	r2, [r7, #22]
 801de16:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801de18:	693b      	ldr	r3, [r7, #16]
 801de1a:	2206      	movs	r2, #6
 801de1c:	6839      	ldr	r1, [r7, #0]
 801de1e:	4618      	mov	r0, r3
 801de20:	f001 f989 	bl	801f136 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801de24:	693b      	ldr	r3, [r7, #16]
 801de26:	3306      	adds	r3, #6
 801de28:	2206      	movs	r2, #6
 801de2a:	6879      	ldr	r1, [r7, #4]
 801de2c:	4618      	mov	r0, r3
 801de2e:	f001 f982 	bl	801f136 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801de38:	2b06      	cmp	r3, #6
 801de3a:	d006      	beq.n	801de4a <ethernet_output+0x66>
 801de3c:	4b0a      	ldr	r3, [pc, #40]	@ (801de68 <ethernet_output+0x84>)
 801de3e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801de42:	490a      	ldr	r1, [pc, #40]	@ (801de6c <ethernet_output+0x88>)
 801de44:	480a      	ldr	r0, [pc, #40]	@ (801de70 <ethernet_output+0x8c>)
 801de46:	f000 ffa1 	bl	801ed8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	699b      	ldr	r3, [r3, #24]
 801de4e:	68b9      	ldr	r1, [r7, #8]
 801de50:	68f8      	ldr	r0, [r7, #12]
 801de52:	4798      	blx	r3
 801de54:	4603      	mov	r3, r0
 801de56:	e002      	b.n	801de5e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801de58:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801de5a:	f06f 0301 	mvn.w	r3, #1
}
 801de5e:	4618      	mov	r0, r3
 801de60:	3718      	adds	r7, #24
 801de62:	46bd      	mov	sp, r7
 801de64:	bd80      	pop	{r7, pc}
 801de66:	bf00      	nop
 801de68:	08023d88 	.word	0x08023d88
 801de6c:	08023dc0 	.word	0x08023dc0
 801de70:	08023df4 	.word	0x08023df4

0801de74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801de74:	b580      	push	{r7, lr}
 801de76:	b082      	sub	sp, #8
 801de78:	af00      	add	r7, sp, #0
 801de7a:	6078      	str	r0, [r7, #4]
 801de7c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801de7e:	683b      	ldr	r3, [r7, #0]
 801de80:	2200      	movs	r2, #0
 801de82:	2104      	movs	r1, #4
 801de84:	4618      	mov	r0, r3
 801de86:	f7ee f9d9 	bl	800c23c <osMessageQueueNew>
 801de8a:	4602      	mov	r2, r0
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d102      	bne.n	801de9e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801de98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801de9c:	e000      	b.n	801dea0 <sys_mbox_new+0x2c>

  return ERR_OK;
 801de9e:	2300      	movs	r3, #0
}
 801dea0:	4618      	mov	r0, r3
 801dea2:	3708      	adds	r7, #8
 801dea4:	46bd      	mov	sp, r7
 801dea6:	bd80      	pop	{r7, pc}

0801dea8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801dea8:	b580      	push	{r7, lr}
 801deaa:	b082      	sub	sp, #8
 801deac:	af00      	add	r7, sp, #0
 801deae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	4618      	mov	r0, r3
 801deb6:	f7ee fb2d 	bl	800c514 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	4618      	mov	r0, r3
 801dec0:	f7ee fb5a 	bl	800c578 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801dec4:	bf00      	nop
 801dec6:	3708      	adds	r7, #8
 801dec8:	46bd      	mov	sp, r7
 801deca:	bd80      	pop	{r7, pc}

0801decc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801decc:	b580      	push	{r7, lr}
 801dece:	b084      	sub	sp, #16
 801ded0:	af00      	add	r7, sp, #0
 801ded2:	6078      	str	r0, [r7, #4]
 801ded4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	6818      	ldr	r0, [r3, #0]
 801deda:	4639      	mov	r1, r7
 801dedc:	2300      	movs	r3, #0
 801dede:	2200      	movs	r2, #0
 801dee0:	f7ee fa32 	bl	800c348 <osMessageQueuePut>
 801dee4:	4603      	mov	r3, r0
 801dee6:	2b00      	cmp	r3, #0
 801dee8:	d102      	bne.n	801def0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801deea:	2300      	movs	r3, #0
 801deec:	73fb      	strb	r3, [r7, #15]
 801deee:	e001      	b.n	801def4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801def0:	23ff      	movs	r3, #255	@ 0xff
 801def2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801def4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801def8:	4618      	mov	r0, r3
 801defa:	3710      	adds	r7, #16
 801defc:	46bd      	mov	sp, r7
 801defe:	bd80      	pop	{r7, pc}

0801df00 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801df00:	b580      	push	{r7, lr}
 801df02:	b086      	sub	sp, #24
 801df04:	af00      	add	r7, sp, #0
 801df06:	60f8      	str	r0, [r7, #12]
 801df08:	60b9      	str	r1, [r7, #8]
 801df0a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801df0c:	f7ed fca4 	bl	800b858 <osKernelGetTickCount>
 801df10:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	2b00      	cmp	r3, #0
 801df16:	d013      	beq.n	801df40 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801df18:	68fb      	ldr	r3, [r7, #12]
 801df1a:	6818      	ldr	r0, [r3, #0]
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	2200      	movs	r2, #0
 801df20:	68b9      	ldr	r1, [r7, #8]
 801df22:	f7ee fa85 	bl	800c430 <osMessageQueueGet>
 801df26:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801df28:	693b      	ldr	r3, [r7, #16]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d105      	bne.n	801df3a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801df2e:	f7ed fc93 	bl	800b858 <osKernelGetTickCount>
 801df32:	4602      	mov	r2, r0
 801df34:	697b      	ldr	r3, [r7, #20]
 801df36:	1ad3      	subs	r3, r2, r3
 801df38:	e00f      	b.n	801df5a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801df3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801df3e:	e00c      	b.n	801df5a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	6818      	ldr	r0, [r3, #0]
 801df44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801df48:	2200      	movs	r2, #0
 801df4a:	68b9      	ldr	r1, [r7, #8]
 801df4c:	f7ee fa70 	bl	800c430 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801df50:	f7ed fc82 	bl	800b858 <osKernelGetTickCount>
 801df54:	4602      	mov	r2, r0
 801df56:	697b      	ldr	r3, [r7, #20]
 801df58:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801df5a:	4618      	mov	r0, r3
 801df5c:	3718      	adds	r7, #24
 801df5e:	46bd      	mov	sp, r7
 801df60:	bd80      	pop	{r7, pc}

0801df62 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801df62:	b580      	push	{r7, lr}
 801df64:	b082      	sub	sp, #8
 801df66:	af00      	add	r7, sp, #0
 801df68:	6078      	str	r0, [r7, #4]
 801df6a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	6818      	ldr	r0, [r3, #0]
 801df70:	2300      	movs	r3, #0
 801df72:	2200      	movs	r2, #0
 801df74:	6839      	ldr	r1, [r7, #0]
 801df76:	f7ee fa5b 	bl	800c430 <osMessageQueueGet>
 801df7a:	4603      	mov	r3, r0
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	d101      	bne.n	801df84 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801df80:	2300      	movs	r3, #0
 801df82:	e001      	b.n	801df88 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801df84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801df88:	4618      	mov	r0, r3
 801df8a:	3708      	adds	r7, #8
 801df8c:	46bd      	mov	sp, r7
 801df8e:	bd80      	pop	{r7, pc}

0801df90 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801df90:	b480      	push	{r7}
 801df92:	b083      	sub	sp, #12
 801df94:	af00      	add	r7, sp, #0
 801df96:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	681b      	ldr	r3, [r3, #0]
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	d101      	bne.n	801dfa4 <sys_mbox_valid+0x14>
    return 0;
 801dfa0:	2300      	movs	r3, #0
 801dfa2:	e000      	b.n	801dfa6 <sys_mbox_valid+0x16>
  else
    return 1;
 801dfa4:	2301      	movs	r3, #1
}
 801dfa6:	4618      	mov	r0, r3
 801dfa8:	370c      	adds	r7, #12
 801dfaa:	46bd      	mov	sp, r7
 801dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfb0:	4770      	bx	lr

0801dfb2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801dfb2:	b480      	push	{r7}
 801dfb4:	b083      	sub	sp, #12
 801dfb6:	af00      	add	r7, sp, #0
 801dfb8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	2200      	movs	r2, #0
 801dfbe:	601a      	str	r2, [r3, #0]
}
 801dfc0:	bf00      	nop
 801dfc2:	370c      	adds	r7, #12
 801dfc4:	46bd      	mov	sp, r7
 801dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfca:	4770      	bx	lr

0801dfcc <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801dfcc:	b580      	push	{r7, lr}
 801dfce:	b082      	sub	sp, #8
 801dfd0:	af00      	add	r7, sp, #0
 801dfd2:	6078      	str	r0, [r7, #4]
 801dfd4:	460b      	mov	r3, r1
 801dfd6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801dfd8:	78fb      	ldrb	r3, [r7, #3]
 801dfda:	2200      	movs	r2, #0
 801dfdc:	4619      	mov	r1, r3
 801dfde:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801dfe2:	f7ed ff9b 	bl	800bf1c <osSemaphoreNew>
 801dfe6:	4602      	mov	r2, r0
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	681b      	ldr	r3, [r3, #0]
 801dff0:	2b00      	cmp	r3, #0
 801dff2:	d102      	bne.n	801dffa <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dff4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dff8:	e009      	b.n	801e00e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801dffa:	78fb      	ldrb	r3, [r7, #3]
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d105      	bne.n	801e00c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	2100      	movs	r1, #0
 801e006:	4618      	mov	r0, r3
 801e008:	f7ee f824 	bl	800c054 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801e00c:	2300      	movs	r3, #0
}
 801e00e:	4618      	mov	r0, r3
 801e010:	3708      	adds	r7, #8
 801e012:	46bd      	mov	sp, r7
 801e014:	bd80      	pop	{r7, pc}

0801e016 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801e016:	b580      	push	{r7, lr}
 801e018:	b084      	sub	sp, #16
 801e01a:	af00      	add	r7, sp, #0
 801e01c:	6078      	str	r0, [r7, #4]
 801e01e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801e020:	f7ed fc1a 	bl	800b858 <osKernelGetTickCount>
 801e024:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801e026:	683b      	ldr	r3, [r7, #0]
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d011      	beq.n	801e050 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	6839      	ldr	r1, [r7, #0]
 801e032:	4618      	mov	r0, r3
 801e034:	f7ee f80e 	bl	800c054 <osSemaphoreAcquire>
 801e038:	4603      	mov	r3, r0
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d105      	bne.n	801e04a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801e03e:	f7ed fc0b 	bl	800b858 <osKernelGetTickCount>
 801e042:	4602      	mov	r2, r0
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	1ad3      	subs	r3, r2, r3
 801e048:	e012      	b.n	801e070 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e04a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e04e:	e00f      	b.n	801e070 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801e050:	bf00      	nop
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e05a:	4618      	mov	r0, r3
 801e05c:	f7ed fffa 	bl	800c054 <osSemaphoreAcquire>
 801e060:	4603      	mov	r3, r0
 801e062:	2b00      	cmp	r3, #0
 801e064:	d1f5      	bne.n	801e052 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801e066:	f7ed fbf7 	bl	800b858 <osKernelGetTickCount>
 801e06a:	4602      	mov	r2, r0
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801e070:	4618      	mov	r0, r3
 801e072:	3710      	adds	r7, #16
 801e074:	46bd      	mov	sp, r7
 801e076:	bd80      	pop	{r7, pc}

0801e078 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801e078:	b580      	push	{r7, lr}
 801e07a:	b082      	sub	sp, #8
 801e07c:	af00      	add	r7, sp, #0
 801e07e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	681b      	ldr	r3, [r3, #0]
 801e084:	4618      	mov	r0, r3
 801e086:	f7ee f84b 	bl	800c120 <osSemaphoreRelease>
}
 801e08a:	bf00      	nop
 801e08c:	3708      	adds	r7, #8
 801e08e:	46bd      	mov	sp, r7
 801e090:	bd80      	pop	{r7, pc}

0801e092 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801e092:	b580      	push	{r7, lr}
 801e094:	b082      	sub	sp, #8
 801e096:	af00      	add	r7, sp, #0
 801e098:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	4618      	mov	r0, r3
 801e0a0:	f7ee f896 	bl	800c1d0 <osSemaphoreDelete>
}
 801e0a4:	bf00      	nop
 801e0a6:	3708      	adds	r7, #8
 801e0a8:	46bd      	mov	sp, r7
 801e0aa:	bd80      	pop	{r7, pc}

0801e0ac <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801e0ac:	b480      	push	{r7}
 801e0ae:	b083      	sub	sp, #12
 801e0b0:	af00      	add	r7, sp, #0
 801e0b2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	d101      	bne.n	801e0c0 <sys_sem_valid+0x14>
    return 0;
 801e0bc:	2300      	movs	r3, #0
 801e0be:	e000      	b.n	801e0c2 <sys_sem_valid+0x16>
  else
    return 1;
 801e0c0:	2301      	movs	r3, #1
}
 801e0c2:	4618      	mov	r0, r3
 801e0c4:	370c      	adds	r7, #12
 801e0c6:	46bd      	mov	sp, r7
 801e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0cc:	4770      	bx	lr

0801e0ce <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801e0ce:	b480      	push	{r7}
 801e0d0:	b083      	sub	sp, #12
 801e0d2:	af00      	add	r7, sp, #0
 801e0d4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	2200      	movs	r2, #0
 801e0da:	601a      	str	r2, [r3, #0]
}
 801e0dc:	bf00      	nop
 801e0de:	370c      	adds	r7, #12
 801e0e0:	46bd      	mov	sp, r7
 801e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0e6:	4770      	bx	lr

0801e0e8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e0e8:	b580      	push	{r7, lr}
 801e0ea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801e0ec:	2000      	movs	r0, #0
 801e0ee:	f7ed fdcd 	bl	800bc8c <osMutexNew>
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	4a01      	ldr	r2, [pc, #4]	@ (801e0fc <sys_init+0x14>)
 801e0f6:	6013      	str	r3, [r2, #0]
#endif
}
 801e0f8:	bf00      	nop
 801e0fa:	bd80      	pop	{r7, pc}
 801e0fc:	200228fc 	.word	0x200228fc

0801e100 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e100:	b580      	push	{r7, lr}
 801e102:	b082      	sub	sp, #8
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801e108:	2000      	movs	r0, #0
 801e10a:	f7ed fdbf 	bl	800bc8c <osMutexNew>
 801e10e:	4602      	mov	r2, r0
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	2b00      	cmp	r3, #0
 801e11a:	d102      	bne.n	801e122 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e11c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e120:	e000      	b.n	801e124 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e122:	2300      	movs	r3, #0
}
 801e124:	4618      	mov	r0, r3
 801e126:	3708      	adds	r7, #8
 801e128:	46bd      	mov	sp, r7
 801e12a:	bd80      	pop	{r7, pc}

0801e12c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e12c:	b580      	push	{r7, lr}
 801e12e:	b082      	sub	sp, #8
 801e130:	af00      	add	r7, sp, #0
 801e132:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e13c:	4618      	mov	r0, r3
 801e13e:	f7ed fe3f 	bl	800bdc0 <osMutexAcquire>
#endif
}
 801e142:	bf00      	nop
 801e144:	3708      	adds	r7, #8
 801e146:	46bd      	mov	sp, r7
 801e148:	bd80      	pop	{r7, pc}

0801e14a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e14a:	b580      	push	{r7, lr}
 801e14c:	b082      	sub	sp, #8
 801e14e:	af00      	add	r7, sp, #0
 801e150:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	681b      	ldr	r3, [r3, #0]
 801e156:	4618      	mov	r0, r3
 801e158:	f7ed fe90 	bl	800be7c <osMutexRelease>
}
 801e15c:	bf00      	nop
 801e15e:	3708      	adds	r7, #8
 801e160:	46bd      	mov	sp, r7
 801e162:	bd80      	pop	{r7, pc}

0801e164 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e164:	b580      	push	{r7, lr}
 801e166:	b08e      	sub	sp, #56	@ 0x38
 801e168:	af00      	add	r7, sp, #0
 801e16a:	60f8      	str	r0, [r7, #12]
 801e16c:	60b9      	str	r1, [r7, #8]
 801e16e:	607a      	str	r2, [r7, #4]
 801e170:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801e172:	f107 0314 	add.w	r3, r7, #20
 801e176:	2224      	movs	r2, #36	@ 0x24
 801e178:	2100      	movs	r1, #0
 801e17a:	4618      	mov	r0, r3
 801e17c:	f000 ff66 	bl	801f04c <memset>
 801e180:	68fb      	ldr	r3, [r7, #12]
 801e182:	617b      	str	r3, [r7, #20]
 801e184:	683b      	ldr	r3, [r7, #0]
 801e186:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e18a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801e18c:	f107 0314 	add.w	r3, r7, #20
 801e190:	461a      	mov	r2, r3
 801e192:	6879      	ldr	r1, [r7, #4]
 801e194:	68b8      	ldr	r0, [r7, #8]
 801e196:	f7ed fb87 	bl	800b8a8 <osThreadNew>
 801e19a:	4603      	mov	r3, r0
#endif
}
 801e19c:	4618      	mov	r0, r3
 801e19e:	3738      	adds	r7, #56	@ 0x38
 801e1a0:	46bd      	mov	sp, r7
 801e1a2:	bd80      	pop	{r7, pc}

0801e1a4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e1a4:	b580      	push	{r7, lr}
 801e1a6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801e1a8:	4b04      	ldr	r3, [pc, #16]	@ (801e1bc <sys_arch_protect+0x18>)
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e1b0:	4618      	mov	r0, r3
 801e1b2:	f7ed fe05 	bl	800bdc0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801e1b6:	2301      	movs	r3, #1
}
 801e1b8:	4618      	mov	r0, r3
 801e1ba:	bd80      	pop	{r7, pc}
 801e1bc:	200228fc 	.word	0x200228fc

0801e1c0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e1c0:	b580      	push	{r7, lr}
 801e1c2:	b082      	sub	sp, #8
 801e1c4:	af00      	add	r7, sp, #0
 801e1c6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e1c8:	4b04      	ldr	r3, [pc, #16]	@ (801e1dc <sys_arch_unprotect+0x1c>)
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	f7ed fe55 	bl	800be7c <osMutexRelease>
}
 801e1d2:	bf00      	nop
 801e1d4:	3708      	adds	r7, #8
 801e1d6:	46bd      	mov	sp, r7
 801e1d8:	bd80      	pop	{r7, pc}
 801e1da:	bf00      	nop
 801e1dc:	200228fc 	.word	0x200228fc

0801e1e0 <TestDispatcher>:
extern osMessageQueueId_t inMsgQueueHandle;
extern osMessageQueueId_t uartQueueHandle;
extern osMessageQueueId_t i2cQueueHandle;

void TestDispatcher(void)
{
 801e1e0:	b580      	push	{r7, lr}
 801e1e2:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801e1e6:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("IN dispatcher\n");
 801e1e8:	4841      	ldr	r0, [pc, #260]	@ (801e2f0 <TestDispatcher+0x110>)
 801e1ea:	f000 fe3f 	bl	801ee6c <puts>
		InMsg_t in_msg;
		TestData_t test_data;

		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, osWaitForever) == osOK)
 801e1ee:	4b41      	ldr	r3, [pc, #260]	@ (801e2f4 <TestDispatcher+0x114>)
 801e1f0:	6818      	ldr	r0, [r3, #0]
 801e1f2:	4639      	mov	r1, r7
 801e1f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e1f8:	2200      	movs	r2, #0
 801e1fa:	f7ee f919 	bl	800c430 <osMessageQueueGet>
 801e1fe:	4603      	mov	r3, r0
 801e200:	2b00      	cmp	r3, #0
 801e202:	d1f1      	bne.n	801e1e8 <TestDispatcher+0x8>
		{
			printf("Dispatcher got msg to periph %d!\n", in_msg.peripheral);
 801e204:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e208:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e20c:	7b1b      	ldrb	r3, [r3, #12]
 801e20e:	4619      	mov	r1, r3
 801e210:	4839      	ldr	r0, [pc, #228]	@ (801e2f8 <TestDispatcher+0x118>)
 801e212:	f000 fdbb 	bl	801ed8c <iprintf>

			// load test_data
			test_data.addr = in_msg.addr;
 801e216:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e21a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e21e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801e222:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801e226:	6812      	ldr	r2, [r2, #0]
 801e228:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801e22a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e22e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e232:	889a      	ldrh	r2, [r3, #4]
 801e234:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e238:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e23c:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801e23e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e242:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e246:	689a      	ldr	r2, [r3, #8]
 801e248:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e24c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e250:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801e252:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e256:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e25a:	7b5a      	ldrb	r2, [r3, #13]
 801e25c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e260:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e264:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801e266:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e26a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e26e:	7b9a      	ldrb	r2, [r3, #14]
 801e270:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e274:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e278:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801e27a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e27e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e282:	7b9b      	ldrb	r3, [r3, #14]
 801e284:	461a      	mov	r2, r3
 801e286:	463b      	mov	r3, r7
 801e288:	f103 010f 	add.w	r1, r3, #15
 801e28c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801e290:	330e      	adds	r3, #14
 801e292:	4618      	mov	r0, r3
 801e294:	f000 ff4f 	bl	801f136 <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801e298:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e29c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e2a0:	7b1b      	ldrb	r3, [r3, #12]
 801e2a2:	f003 0302 	and.w	r3, r3, #2
 801e2a6:	2b00      	cmp	r3, #0
 801e2a8:	d00b      	beq.n	801e2c2 <TestDispatcher+0xe2>
			{
				printf("dispatcher sent to UART\n");
 801e2aa:	4814      	ldr	r0, [pc, #80]	@ (801e2fc <TestDispatcher+0x11c>)
 801e2ac:	f000 fdde 	bl	801ee6c <puts>
				osMessageQueuePut(uartQueueHandle, &test_data, 0, osWaitForever);
 801e2b0:	4b13      	ldr	r3, [pc, #76]	@ (801e300 <TestDispatcher+0x120>)
 801e2b2:	6818      	ldr	r0, [r3, #0]
 801e2b4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801e2b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2bc:	2200      	movs	r2, #0
 801e2be:	f7ee f843 	bl	800c348 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_I2C)
 801e2c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e2c6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e2ca:	7b1b      	ldrb	r3, [r3, #12]
 801e2cc:	f003 0308 	and.w	r3, r3, #8
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	d089      	beq.n	801e1e8 <TestDispatcher+0x8>
			{
				printf("dispatcher sent to I2C\n");
 801e2d4:	480b      	ldr	r0, [pc, #44]	@ (801e304 <TestDispatcher+0x124>)
 801e2d6:	f000 fdc9 	bl	801ee6c <puts>
				osMessageQueuePut(i2cQueueHandle, &test_data, 0, osWaitForever);
 801e2da:	4b0b      	ldr	r3, [pc, #44]	@ (801e308 <TestDispatcher+0x128>)
 801e2dc:	6818      	ldr	r0, [r3, #0]
 801e2de:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801e2e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2e6:	2200      	movs	r2, #0
 801e2e8:	f7ee f82e 	bl	800c348 <osMessageQueuePut>
	{
 801e2ec:	e77c      	b.n	801e1e8 <TestDispatcher+0x8>
 801e2ee:	bf00      	nop
 801e2f0:	08023e1c 	.word	0x08023e1c
 801e2f4:	20000320 	.word	0x20000320
 801e2f8:	08023e2c 	.word	0x08023e2c
 801e2fc:	08023e50 	.word	0x08023e50
 801e300:	20000328 	.word	0x20000328
 801e304:	08023e68 	.word	0x08023e68
 801e308:	2000032c 	.word	0x2000032c

0801e30c <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801e30c:	b580      	push	{r7, lr}
 801e30e:	b086      	sub	sp, #24
 801e310:	af00      	add	r7, sp, #0
 801e312:	60f8      	str	r0, [r7, #12]
 801e314:	607a      	str	r2, [r7, #4]
 801e316:	461a      	mov	r2, r3
 801e318:	460b      	mov	r3, r1
 801e31a:	72fb      	strb	r3, [r7, #11]
 801e31c:	4613      	mov	r3, r2
 801e31e:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 801e320:	7afb      	ldrb	r3, [r7, #11]
 801e322:	461a      	mov	r2, r3
 801e324:	68f9      	ldr	r1, [r7, #12]
 801e326:	480b      	ldr	r0, [pc, #44]	@ (801e354 <Match_CRC+0x48>)
 801e328:	f7e4 fc7e 	bl	8002c28 <HAL_CRC_Calculate>
 801e32c:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801e32e:	7abb      	ldrb	r3, [r7, #10]
 801e330:	461a      	mov	r2, r3
 801e332:	6879      	ldr	r1, [r7, #4]
 801e334:	4807      	ldr	r0, [pc, #28]	@ (801e354 <Match_CRC+0x48>)
 801e336:	f7e4 fc77 	bl	8002c28 <HAL_CRC_Calculate>
 801e33a:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 801e33c:	697a      	ldr	r2, [r7, #20]
 801e33e:	693b      	ldr	r3, [r7, #16]
 801e340:	429a      	cmp	r2, r3
 801e342:	d101      	bne.n	801e348 <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 801e344:	2301      	movs	r3, #1
 801e346:	e000      	b.n	801e34a <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 801e348:	2300      	movs	r3, #0
}
 801e34a:	4618      	mov	r0, r3
 801e34c:	3718      	adds	r7, #24
 801e34e:	46bd      	mov	sp, r7
 801e350:	bd80      	pop	{r7, pc}
 801e352:	bf00      	nop
 801e354:	200002d4 	.word	0x200002d4

0801e358 <UDP_Server_Init>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Server_Init(void)
{
 801e358:	b580      	push	{r7, lr}
 801e35a:	b082      	sub	sp, #8
 801e35c:	af00      	add	r7, sp, #0

	err_t err;

	conn = netconn_new(NETCONN_UDP);
 801e35e:	2200      	movs	r2, #0
 801e360:	2100      	movs	r1, #0
 801e362:	2020      	movs	r0, #32
 801e364:	f7f1 fe76 	bl	8010054 <netconn_new_with_proto_and_callback>
 801e368:	4603      	mov	r3, r0
 801e36a:	4a16      	ldr	r2, [pc, #88]	@ (801e3c4 <UDP_Server_Init+0x6c>)
 801e36c:	6013      	str	r3, [r2, #0]
	if (conn == NULL)
 801e36e:	4b15      	ldr	r3, [pc, #84]	@ (801e3c4 <UDP_Server_Init+0x6c>)
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	2b00      	cmp	r3, #0
 801e374:	d104      	bne.n	801e380 <UDP_Server_Init+0x28>
	{
		printf("error creating UDP connection\n");
 801e376:	4814      	ldr	r0, [pc, #80]	@ (801e3c8 <UDP_Server_Init+0x70>)
 801e378:	f000 fd78 	bl	801ee6c <puts>
		while(1);
 801e37c:	bf00      	nop
 801e37e:	e7fd      	b.n	801e37c <UDP_Server_Init+0x24>
	}

	err = netconn_bind(conn, IP_ADDR_ANY, SERVER_PORT);
 801e380:	4b10      	ldr	r3, [pc, #64]	@ (801e3c4 <UDP_Server_Init+0x6c>)
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801e388:	4910      	ldr	r1, [pc, #64]	@ (801e3cc <UDP_Server_Init+0x74>)
 801e38a:	4618      	mov	r0, r3
 801e38c:	f7f1 ff1c 	bl	80101c8 <netconn_bind>
 801e390:	4603      	mov	r3, r0
 801e392:	71fb      	strb	r3, [r7, #7]
	if (err != ERR_OK)
 801e394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e398:	2b00      	cmp	r3, #0
 801e39a:	d00c      	beq.n	801e3b6 <UDP_Server_Init+0x5e>
	{
		printf("error binding UDP port\n");
 801e39c:	480c      	ldr	r0, [pc, #48]	@ (801e3d0 <UDP_Server_Init+0x78>)
 801e39e:	f000 fd65 	bl	801ee6c <puts>
		netconn_delete(conn);
 801e3a2:	4b08      	ldr	r3, [pc, #32]	@ (801e3c4 <UDP_Server_Init+0x6c>)
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	4618      	mov	r0, r3
 801e3a8:	f7f1 fef2 	bl	8010190 <netconn_delete>
		conn = NULL;
 801e3ac:	4b05      	ldr	r3, [pc, #20]	@ (801e3c4 <UDP_Server_Init+0x6c>)
 801e3ae:	2200      	movs	r2, #0
 801e3b0:	601a      	str	r2, [r3, #0]
		while(1);
 801e3b2:	bf00      	nop
 801e3b4:	e7fd      	b.n	801e3b2 <UDP_Server_Init+0x5a>
	}

	printf("UDP init success\n");
 801e3b6:	4807      	ldr	r0, [pc, #28]	@ (801e3d4 <UDP_Server_Init+0x7c>)
 801e3b8:	f000 fd58 	bl	801ee6c <puts>
}
 801e3bc:	bf00      	nop
 801e3be:	3708      	adds	r7, #8
 801e3c0:	46bd      	mov	sp, r7
 801e3c2:	bd80      	pop	{r7, pc}
 801e3c4:	20022900 	.word	0x20022900
 801e3c8:	08023e80 	.word	0x08023e80
 801e3cc:	08024334 	.word	0x08024334
 801e3d0:	08023ea0 	.word	0x08023ea0
 801e3d4:	08023eb8 	.word	0x08023eb8

0801e3d8 <UDP_Listen>:

void UDP_Listen(void)
{
 801e3d8:	b590      	push	{r4, r7, lr}
 801e3da:	b0c7      	sub	sp, #284	@ 0x11c
 801e3dc:	af00      	add	r7, sp, #0
	printf("Listening started\n");
 801e3de:	485c      	ldr	r0, [pc, #368]	@ (801e550 <UDP_Listen+0x178>)
 801e3e0:	f000 fd44 	bl	801ee6c <puts>
	InMsg_t in_msg;
	int n_read;

	while(1)
	{
		printf("IN listener\n");
 801e3e4:	485b      	ldr	r0, [pc, #364]	@ (801e554 <UDP_Listen+0x17c>)
 801e3e6:	f000 fd41 	bl	801ee6c <puts>
		if (osMutexAcquire(netconnMutexHandle, osWaitForever) == osOK)
 801e3ea:	4b5b      	ldr	r3, [pc, #364]	@ (801e558 <UDP_Listen+0x180>)
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e3f2:	4618      	mov	r0, r3
 801e3f4:	f7ed fce4 	bl	800bdc0 <osMutexAcquire>
 801e3f8:	4603      	mov	r3, r0
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	d1f2      	bne.n	801e3e4 <UDP_Listen+0xc>
		{
			if(netconn_recv(conn, &buf) == ERR_OK)
 801e3fe:	4b57      	ldr	r3, [pc, #348]	@ (801e55c <UDP_Listen+0x184>)
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801e406:	4611      	mov	r1, r2
 801e408:	4618      	mov	r0, r3
 801e40a:	f7f2 f8f3 	bl	80105f4 <netconn_recv>
 801e40e:	4603      	mov	r3, r0
 801e410:	2b00      	cmp	r3, #0
 801e412:	d1e7      	bne.n	801e3e4 <UDP_Listen+0xc>
			{
				printf("Got message\n");
 801e414:	4852      	ldr	r0, [pc, #328]	@ (801e560 <UDP_Listen+0x188>)
 801e416:	f000 fd29 	bl	801ee6c <puts>
				// Load in_msg
				ip_addr_copy(in_msg.addr, *netbuf_fromaddr(buf));
 801e41a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801e41e:	689a      	ldr	r2, [r3, #8]
 801e420:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801e424:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801e428:	601a      	str	r2, [r3, #0]
				in_msg.port = netbuf_fromport(buf);
 801e42a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801e42e:	899a      	ldrh	r2, [r3, #12]
 801e430:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801e434:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801e438:	809a      	strh	r2, [r3, #4]

				n_read = 0;
 801e43a:	2300      	movs	r3, #0
 801e43c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
				netbuf_copy_partial(buf, &in_msg.test_id, sizeof(in_msg.test_id), n_read);
 801e440:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801e444:	6818      	ldr	r0, [r3, #0]
 801e446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e44a:	b29a      	uxth	r2, r3
 801e44c:	463b      	mov	r3, r7
 801e44e:	f103 0108 	add.w	r1, r3, #8
 801e452:	4613      	mov	r3, r2
 801e454:	2204      	movs	r2, #4
 801e456:	f7f5 feaf 	bl	80141b8 <pbuf_copy_partial>
				n_read += sizeof(in_msg.test_id);
 801e45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e45e:	3304      	adds	r3, #4
 801e460:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				netbuf_copy_partial(buf, &in_msg.peripheral, 1, n_read++);
 801e464:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801e468:	6818      	ldr	r0, [r3, #0]
 801e46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e46e:	1c5a      	adds	r2, r3, #1
 801e470:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801e474:	b29a      	uxth	r2, r3
 801e476:	463b      	mov	r3, r7
 801e478:	f103 010c 	add.w	r1, r3, #12
 801e47c:	4613      	mov	r3, r2
 801e47e:	2201      	movs	r2, #1
 801e480:	f7f5 fe9a 	bl	80141b8 <pbuf_copy_partial>
				netbuf_copy_partial(buf, &in_msg.n_iter, 1, n_read++);
 801e484:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801e488:	6818      	ldr	r0, [r3, #0]
 801e48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e48e:	1c5a      	adds	r2, r3, #1
 801e490:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801e494:	b29a      	uxth	r2, r3
 801e496:	463b      	mov	r3, r7
 801e498:	f103 010d 	add.w	r1, r3, #13
 801e49c:	4613      	mov	r3, r2
 801e49e:	2201      	movs	r2, #1
 801e4a0:	f7f5 fe8a 	bl	80141b8 <pbuf_copy_partial>
				netbuf_copy_partial(buf, &in_msg.p_len, 1, n_read++);
 801e4a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801e4a8:	6818      	ldr	r0, [r3, #0]
 801e4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ae:	1c5a      	adds	r2, r3, #1
 801e4b0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801e4b4:	b29a      	uxth	r2, r3
 801e4b6:	463b      	mov	r3, r7
 801e4b8:	f103 010e 	add.w	r1, r3, #14
 801e4bc:	4613      	mov	r3, r2
 801e4be:	2201      	movs	r2, #1
 801e4c0:	f7f5 fe7a 	bl	80141b8 <pbuf_copy_partial>
				netbuf_copy_partial(buf, &in_msg.payload, in_msg.p_len, n_read);
 801e4c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801e4c8:	6818      	ldr	r0, [r3, #0]
 801e4ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801e4ce:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801e4d2:	7b9b      	ldrb	r3, [r3, #14]
 801e4d4:	461c      	mov	r4, r3
 801e4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4da:	b29a      	uxth	r2, r3
 801e4dc:	463b      	mov	r3, r7
 801e4de:	f103 010f 	add.w	r1, r3, #15
 801e4e2:	4613      	mov	r3, r2
 801e4e4:	4622      	mov	r2, r4
 801e4e6:	f7f5 fe67 	bl	80141b8 <pbuf_copy_partial>

				if (in_msg.p_len < sizeof(in_msg.payload))
				    in_msg.payload[in_msg.p_len] = '\0';
 801e4ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801e4ee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801e4f2:	7b9b      	ldrb	r3, [r3, #14]
 801e4f4:	461a      	mov	r2, r3
 801e4f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801e4fa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801e4fe:	4413      	add	r3, r2
 801e500:	2200      	movs	r2, #0
 801e502:	73da      	strb	r2, [r3, #15]
				printf("Peripheral is: %d\n", in_msg.peripheral);
 801e504:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801e508:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801e50c:	7b1b      	ldrb	r3, [r3, #12]
 801e50e:	4619      	mov	r1, r3
 801e510:	4814      	ldr	r0, [pc, #80]	@ (801e564 <UDP_Listen+0x18c>)
 801e512:	f000 fc3b 	bl	801ed8c <iprintf>
				printf("n iterations is: %d\n", in_msg.n_iter);
 801e516:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801e51a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801e51e:	7b5b      	ldrb	r3, [r3, #13]
 801e520:	4619      	mov	r1, r3
 801e522:	4811      	ldr	r0, [pc, #68]	@ (801e568 <UDP_Listen+0x190>)
 801e524:	f000 fc32 	bl	801ed8c <iprintf>
				printf("Message is: %s\n", in_msg.payload);
 801e528:	463b      	mov	r3, r7
 801e52a:	330f      	adds	r3, #15
 801e52c:	4619      	mov	r1, r3
 801e52e:	480f      	ldr	r0, [pc, #60]	@ (801e56c <UDP_Listen+0x194>)
 801e530:	f000 fc2c 	bl	801ed8c <iprintf>



			    // send in_msg to InMsgQueue
			    osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, osWaitForever);
 801e534:	4b0e      	ldr	r3, [pc, #56]	@ (801e570 <UDP_Listen+0x198>)
 801e536:	6818      	ldr	r0, [r3, #0]
 801e538:	4639      	mov	r1, r7
 801e53a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e53e:	2200      	movs	r2, #0
 801e540:	f7ed ff02 	bl	800c348 <osMessageQueuePut>

			    netbuf_delete(buf);
 801e544:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801e548:	4618      	mov	r0, r3
 801e54a:	f7f3 fd29 	bl	8011fa0 <netbuf_delete>
		printf("IN listener\n");
 801e54e:	e749      	b.n	801e3e4 <UDP_Listen+0xc>
 801e550:	08023ecc 	.word	0x08023ecc
 801e554:	08023ee0 	.word	0x08023ee0
 801e558:	2000033c 	.word	0x2000033c
 801e55c:	20022900 	.word	0x20022900
 801e560:	08023eec 	.word	0x08023eec
 801e564:	08023ef8 	.word	0x08023ef8
 801e568:	08023f0c 	.word	0x08023f0c
 801e56c:	08023f24 	.word	0x08023f24
 801e570:	20000320 	.word	0x20000320

0801e574 <UDP_Response>:
		}
	}
}

void UDP_Response(void)
{
 801e574:	b580      	push	{r7, lr}
 801e576:	b088      	sub	sp, #32
 801e578:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t response[RESPONSE_SIZE];

	while(1)
	{
		printf("IN responder\n");
 801e57a:	4824      	ldr	r0, [pc, #144]	@ (801e60c <UDP_Response+0x98>)
 801e57c:	f000 fc76 	bl	801ee6c <puts>
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801e580:	4b23      	ldr	r3, [pc, #140]	@ (801e610 <UDP_Response+0x9c>)
 801e582:	6818      	ldr	r0, [r3, #0]
 801e584:	f107 010c 	add.w	r1, r7, #12
 801e588:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e58c:	2200      	movs	r2, #0
 801e58e:	f7ed ff4f 	bl	800c430 <osMessageQueueGet>
 801e592:	4603      	mov	r3, r0
 801e594:	2b00      	cmp	r3, #0
 801e596:	d132      	bne.n	801e5fe <UDP_Response+0x8a>
		{
			//Load response buffer
			memcpy(response, &out_msg.test_id, sizeof(out_msg.test_id));
 801e598:	697b      	ldr	r3, [r7, #20]
 801e59a:	607b      	str	r3, [r7, #4]
			response[sizeof(out_msg.test_id)] = out_msg.test_result;
 801e59c:	7e3b      	ldrb	r3, [r7, #24]
 801e59e:	723b      	strb	r3, [r7, #8]

			// Send response
			buf = netbuf_new();
 801e5a0:	f7f3 fcea 	bl	8011f78 <netbuf_new>
 801e5a4:	61f8      	str	r0, [r7, #28]
			if (!buf) continue;
 801e5a6:	69fb      	ldr	r3, [r7, #28]
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	d02c      	beq.n	801e606 <UDP_Response+0x92>

			netbuf_ref(buf, response, RESPONSE_SIZE);
 801e5ac:	1d3b      	adds	r3, r7, #4
 801e5ae:	2205      	movs	r2, #5
 801e5b0:	4619      	mov	r1, r3
 801e5b2:	69f8      	ldr	r0, [r7, #28]
 801e5b4:	f7f3 fd14 	bl	8011fe0 <netbuf_ref>

			if (osMutexAcquire(netconnMutexHandle, osWaitForever) == osOK)
 801e5b8:	4b16      	ldr	r3, [pc, #88]	@ (801e614 <UDP_Response+0xa0>)
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e5c0:	4618      	mov	r0, r3
 801e5c2:	f7ed fbfd 	bl	800bdc0 <osMutexAcquire>
 801e5c6:	4603      	mov	r3, r0
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	d1d6      	bne.n	801e57a <UDP_Response+0x6>
			{
				netconn_connect(conn, &out_msg.addr, out_msg.port);
 801e5cc:	4b12      	ldr	r3, [pc, #72]	@ (801e618 <UDP_Response+0xa4>)
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	8a3a      	ldrh	r2, [r7, #16]
 801e5d2:	f107 010c 	add.w	r1, r7, #12
 801e5d6:	4618      	mov	r0, r3
 801e5d8:	f7f1 fe2e 	bl	8010238 <netconn_connect>
				netconn_send(conn, buf);
 801e5dc:	4b0e      	ldr	r3, [pc, #56]	@ (801e618 <UDP_Response+0xa4>)
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	69f9      	ldr	r1, [r7, #28]
 801e5e2:	4618      	mov	r0, r3
 801e5e4:	f7f2 f880 	bl	80106e8 <netconn_send>
				netconn_disconnect(conn);
 801e5e8:	4b0b      	ldr	r3, [pc, #44]	@ (801e618 <UDP_Response+0xa4>)
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	4618      	mov	r0, r3
 801e5ee:	f7f1 fe5b 	bl	80102a8 <netconn_disconnect>
				osMutexRelease(netconnMutexHandle);
 801e5f2:	4b08      	ldr	r3, [pc, #32]	@ (801e614 <UDP_Response+0xa0>)
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	4618      	mov	r0, r3
 801e5f8:	f7ed fc40 	bl	800be7c <osMutexRelease>
 801e5fc:	e7bd      	b.n	801e57a <UDP_Response+0x6>
			}
		}
		else osDelay(1);
 801e5fe:	2001      	movs	r0, #1
 801e600:	f7ed f9f8 	bl	800b9f4 <osDelay>
 801e604:	e7b9      	b.n	801e57a <UDP_Response+0x6>
			if (!buf) continue;
 801e606:	bf00      	nop
		printf("IN responder\n");
 801e608:	e7b7      	b.n	801e57a <UDP_Response+0x6>
 801e60a:	bf00      	nop
 801e60c:	08023f34 	.word	0x08023f34
 801e610:	20000324 	.word	0x20000324
 801e614:	2000033c 	.word	0x2000033c
 801e618:	20022900 	.word	0x20022900

0801e61c <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 801e61c:	b580      	push	{r7, lr}
 801e61e:	b0ca      	sub	sp, #296	@ 0x128
 801e620:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("IN i2c");
 801e622:	4838      	ldr	r0, [pc, #224]	@ (801e704 <I2cTestTask+0xe8>)
 801e624:	f000 fbb2 	bl	801ed8c <iprintf>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801e628:	4b37      	ldr	r3, [pc, #220]	@ (801e708 <I2cTestTask+0xec>)
 801e62a:	6818      	ldr	r0, [r3, #0]
 801e62c:	f107 0114 	add.w	r1, r7, #20
 801e630:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e634:	2200      	movs	r2, #0
 801e636:	f7ed fefb 	bl	800c430 <osMessageQueueGet>
 801e63a:	4603      	mov	r3, r0
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d15d      	bne.n	801e6fc <I2cTestTask+0xe0>
		{
			printf("i2c received test ID: %lu\n", test_data.test_id);
 801e640:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e644:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e648:	689b      	ldr	r3, [r3, #8]
 801e64a:	4619      	mov	r1, r3
 801e64c:	482f      	ldr	r0, [pc, #188]	@ (801e70c <I2cTestTask+0xf0>)
 801e64e:	f000 fb9d 	bl	801ed8c <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801e652:	2300      	movs	r3, #0
 801e654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e658:	e017      	b.n	801e68a <I2cTestTask+0x6e>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801e65a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e65e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e662:	7b5a      	ldrb	r2, [r3, #13]
 801e664:	f107 0314 	add.w	r3, r7, #20
 801e668:	330e      	adds	r3, #14
 801e66a:	4611      	mov	r1, r2
 801e66c:	4618      	mov	r0, r3
 801e66e:	f000 f851 	bl	801e714 <I2C_Test_Perform>
 801e672:	4603      	mov	r3, r0
 801e674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801e678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e67c:	2bff      	cmp	r3, #255	@ 0xff
 801e67e:	d00e      	beq.n	801e69e <I2cTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801e680:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e684:	3301      	adds	r3, #1
 801e686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e68a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e68e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e692:	7b1b      	ldrb	r3, [r3, #12]
 801e694:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801e698:	429a      	cmp	r2, r3
 801e69a:	d3de      	bcc.n	801e65a <I2cTestTask+0x3e>
 801e69c:	e000      	b.n	801e6a0 <I2cTestTask+0x84>
					break;
 801e69e:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801e6a0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e6a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801e6a8:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801e6ac:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801e6b0:	6812      	ldr	r2, [r2, #0]
 801e6b2:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801e6b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e6b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e6bc:	889a      	ldrh	r2, [r3, #4]
 801e6be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e6c2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801e6c6:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801e6c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e6cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e6d0:	689a      	ldr	r2, [r3, #8]
 801e6d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e6d6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801e6da:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801e6dc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e6e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801e6e4:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801e6e8:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801e6ea:	4b09      	ldr	r3, [pc, #36]	@ (801e710 <I2cTestTask+0xf4>)
 801e6ec:	6818      	ldr	r0, [r3, #0]
 801e6ee:	1d39      	adds	r1, r7, #4
 801e6f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e6f4:	2200      	movs	r2, #0
 801e6f6:	f7ed fe27 	bl	800c348 <osMessageQueuePut>
 801e6fa:	e792      	b.n	801e622 <I2cTestTask+0x6>
		}
		else osDelay(1);
 801e6fc:	2001      	movs	r0, #1
 801e6fe:	f7ed f979 	bl	800b9f4 <osDelay>
		printf("IN i2c");
 801e702:	e78e      	b.n	801e622 <I2cTestTask+0x6>
 801e704:	08023f44 	.word	0x08023f44
 801e708:	2000032c 	.word	0x2000032c
 801e70c:	08023f4c 	.word	0x08023f4c
 801e710:	20000324 	.word	0x20000324

0801e714 <I2C_Test_Perform>:


}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801e714:	b590      	push	{r4, r7, lr}
 801e716:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801e71a:	af00      	add	r7, sp, #0
 801e71c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801e720:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801e724:	6018      	str	r0, [r3, #0]
 801e726:	460a      	mov	r2, r1
 801e728:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801e72c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801e730:	701a      	strb	r2, [r3, #0]
	printf("Performing i2c test\n");
#endif

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 801e732:	4b4d      	ldr	r3, [pc, #308]	@ (801e868 <I2C_Test_Perform+0x154>)
 801e734:	2200      	movs	r2, #0
 801e736:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 801e738:	4b4c      	ldr	r3, [pc, #304]	@ (801e86c <I2C_Test_Perform+0x158>)
 801e73a:	2200      	movs	r2, #0
 801e73c:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 801e73e:	4b4c      	ldr	r3, [pc, #304]	@ (801e870 <I2C_Test_Perform+0x15c>)
 801e740:	2200      	movs	r2, #0
 801e742:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 801e744:	4b4b      	ldr	r3, [pc, #300]	@ (801e874 <I2C_Test_Perform+0x160>)
 801e746:	2200      	movs	r2, #0
 801e748:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 801e74a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801e74e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801e752:	781b      	ldrb	r3, [r3, #0]
 801e754:	b29a      	uxth	r2, r3
 801e756:	f107 0308 	add.w	r3, r7, #8
 801e75a:	4619      	mov	r1, r3
 801e75c:	4846      	ldr	r0, [pc, #280]	@ (801e878 <I2C_Test_Perform+0x164>)
 801e75e:	f7e6 ffdb 	bl	8005718 <HAL_I2C_Slave_Receive_DMA>
 801e762:	4603      	mov	r3, r0
 801e764:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801e768:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d001      	beq.n	801e774 <I2C_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
#endif
		return TEST_FAILED;
 801e770:	23ff      	movs	r3, #255	@ 0xff
 801e772:	e074      	b.n	801e85e <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 801e774:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801e778:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801e77c:	781b      	ldrb	r3, [r3, #0]
 801e77e:	b29b      	uxth	r3, r3
 801e780:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 801e784:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 801e788:	6812      	ldr	r2, [r2, #0]
 801e78a:	2114      	movs	r1, #20
 801e78c:	483b      	ldr	r0, [pc, #236]	@ (801e87c <I2C_Test_Perform+0x168>)
 801e78e:	f7e6 fcd3 	bl	8005138 <HAL_I2C_Master_Transmit_DMA>
 801e792:	4603      	mov	r3, r0
 801e794:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801e798:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	d001      	beq.n	801e7a4 <I2C_Test_Perform+0x90>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
#endif
		return TEST_FAILED;
 801e7a0:	23ff      	movs	r3, #255	@ 0xff
 801e7a2:	e05c      	b.n	801e85e <I2C_Test_Perform+0x14a>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 801e7a4:	bf00      	nop
 801e7a6:	4b33      	ldr	r3, [pc, #204]	@ (801e874 <I2C_Test_Perform+0x160>)
 801e7a8:	781b      	ldrb	r3, [r3, #0]
 801e7aa:	b2db      	uxtb	r3, r3
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d0fa      	beq.n	801e7a6 <I2C_Test_Perform+0x92>
 801e7b0:	4b2d      	ldr	r3, [pc, #180]	@ (801e868 <I2C_Test_Perform+0x154>)
 801e7b2:	781b      	ldrb	r3, [r3, #0]
 801e7b4:	b2db      	uxtb	r3, r3
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	d0f5      	beq.n	801e7a6 <I2C_Test_Perform+0x92>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 801e7ba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801e7be:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801e7c2:	781b      	ldrb	r3, [r3, #0]
 801e7c4:	b29b      	uxth	r3, r3
 801e7c6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801e7ca:	2114      	movs	r1, #20
 801e7cc:	482b      	ldr	r0, [pc, #172]	@ (801e87c <I2C_Test_Perform+0x168>)
 801e7ce:	f7e6 fdc7 	bl	8005360 <HAL_I2C_Master_Receive_DMA>
 801e7d2:	4603      	mov	r3, r0
 801e7d4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801e7d8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d001      	beq.n	801e7e4 <I2C_Test_Perform+0xd0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
#endif
		return TEST_FAILED;
 801e7e0:	23ff      	movs	r3, #255	@ 0xff
 801e7e2:	e03c      	b.n	801e85e <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 801e7e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801e7e8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801e7ec:	781b      	ldrb	r3, [r3, #0]
 801e7ee:	b29a      	uxth	r2, r3
 801e7f0:	f107 0308 	add.w	r3, r7, #8
 801e7f4:	4619      	mov	r1, r3
 801e7f6:	4820      	ldr	r0, [pc, #128]	@ (801e878 <I2C_Test_Perform+0x164>)
 801e7f8:	f7e6 fea2 	bl	8005540 <HAL_I2C_Slave_Transmit_DMA>
 801e7fc:	4603      	mov	r3, r0
 801e7fe:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801e802:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801e806:	2b00      	cmp	r3, #0
 801e808:	d001      	beq.n	801e80e <I2C_Test_Perform+0xfa>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
#endif
		return TEST_FAILED;
 801e80a:	23ff      	movs	r3, #255	@ 0xff
 801e80c:	e027      	b.n	801e85e <I2C_Test_Perform+0x14a>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 801e80e:	bf00      	nop
 801e810:	4b16      	ldr	r3, [pc, #88]	@ (801e86c <I2C_Test_Perform+0x158>)
 801e812:	781b      	ldrb	r3, [r3, #0]
 801e814:	b2db      	uxtb	r3, r3
 801e816:	2b00      	cmp	r3, #0
 801e818:	d0fa      	beq.n	801e810 <I2C_Test_Perform+0xfc>
 801e81a:	4b15      	ldr	r3, [pc, #84]	@ (801e870 <I2C_Test_Perform+0x15c>)
 801e81c:	781b      	ldrb	r3, [r3, #0]
 801e81e:	b2db      	uxtb	r3, r3
 801e820:	2b00      	cmp	r3, #0
 801e822:	d0f5      	beq.n	801e810 <I2C_Test_Perform+0xfc>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801e824:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801e828:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801e82c:	781c      	ldrb	r4, [r3, #0]
 801e82e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801e832:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801e836:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801e83a:	7819      	ldrb	r1, [r3, #0]
 801e83c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801e840:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801e844:	4623      	mov	r3, r4
 801e846:	6800      	ldr	r0, [r0, #0]
 801e848:	f7ff fd60 	bl	801e30c <Match_CRC>
 801e84c:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801e850:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801e854:	2b01      	cmp	r3, #1
 801e856:	d101      	bne.n	801e85c <I2C_Test_Perform+0x148>
 801e858:	2301      	movs	r3, #1
 801e85a:	e000      	b.n	801e85e <I2C_Test_Perform+0x14a>

	return TEST_FAILED;
 801e85c:	23ff      	movs	r3, #255	@ 0xff
}
 801e85e:	4618      	mov	r0, r3
 801e860:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801e864:	46bd      	mov	sp, r7
 801e866:	bd90      	pop	{r4, r7, pc}
 801e868:	20022904 	.word	0x20022904
 801e86c:	20022905 	.word	0x20022905
 801e870:	20022906 	.word	0x20022906
 801e874:	20022907 	.word	0x20022907
 801e878:	20000398 	.word	0x20000398
 801e87c:	20000344 	.word	0x20000344

0801e880 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e880:	b480      	push	{r7}
 801e882:	b083      	sub	sp, #12
 801e884:	af00      	add	r7, sp, #0
 801e886:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	4a06      	ldr	r2, [pc, #24]	@ (801e8a4 <HAL_I2C_MasterTxCpltCallback+0x24>)
 801e88c:	4293      	cmp	r3, r2
 801e88e:	d102      	bne.n	801e896 <HAL_I2C_MasterTxCpltCallback+0x16>
 801e890:	4b05      	ldr	r3, [pc, #20]	@ (801e8a8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 801e892:	2201      	movs	r2, #1
 801e894:	701a      	strb	r2, [r3, #0]
}
 801e896:	bf00      	nop
 801e898:	370c      	adds	r7, #12
 801e89a:	46bd      	mov	sp, r7
 801e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8a0:	4770      	bx	lr
 801e8a2:	bf00      	nop
 801e8a4:	20000344 	.word	0x20000344
 801e8a8:	20022904 	.word	0x20022904

0801e8ac <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e8ac:	b480      	push	{r7}
 801e8ae:	b083      	sub	sp, #12
 801e8b0:	af00      	add	r7, sp, #0
 801e8b2:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	4a06      	ldr	r2, [pc, #24]	@ (801e8d0 <HAL_I2C_MasterRxCpltCallback+0x24>)
 801e8b8:	4293      	cmp	r3, r2
 801e8ba:	d102      	bne.n	801e8c2 <HAL_I2C_MasterRxCpltCallback+0x16>
 801e8bc:	4b05      	ldr	r3, [pc, #20]	@ (801e8d4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 801e8be:	2201      	movs	r2, #1
 801e8c0:	701a      	strb	r2, [r3, #0]
}
 801e8c2:	bf00      	nop
 801e8c4:	370c      	adds	r7, #12
 801e8c6:	46bd      	mov	sp, r7
 801e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8cc:	4770      	bx	lr
 801e8ce:	bf00      	nop
 801e8d0:	20000344 	.word	0x20000344
 801e8d4:	20022905 	.word	0x20022905

0801e8d8 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e8d8:	b480      	push	{r7}
 801e8da:	b083      	sub	sp, #12
 801e8dc:	af00      	add	r7, sp, #0
 801e8de:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	4a06      	ldr	r2, [pc, #24]	@ (801e8fc <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801e8e4:	4293      	cmp	r3, r2
 801e8e6:	d102      	bne.n	801e8ee <HAL_I2C_SlaveTxCpltCallback+0x16>
 801e8e8:	4b05      	ldr	r3, [pc, #20]	@ (801e900 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 801e8ea:	2201      	movs	r2, #1
 801e8ec:	701a      	strb	r2, [r3, #0]
}
 801e8ee:	bf00      	nop
 801e8f0:	370c      	adds	r7, #12
 801e8f2:	46bd      	mov	sp, r7
 801e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8f8:	4770      	bx	lr
 801e8fa:	bf00      	nop
 801e8fc:	20000398 	.word	0x20000398
 801e900:	20022906 	.word	0x20022906

0801e904 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e904:	b480      	push	{r7}
 801e906:	b083      	sub	sp, #12
 801e908:	af00      	add	r7, sp, #0
 801e90a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	4a06      	ldr	r2, [pc, #24]	@ (801e928 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801e910:	4293      	cmp	r3, r2
 801e912:	d102      	bne.n	801e91a <HAL_I2C_SlaveRxCpltCallback+0x16>
 801e914:	4b05      	ldr	r3, [pc, #20]	@ (801e92c <HAL_I2C_SlaveRxCpltCallback+0x28>)
 801e916:	2201      	movs	r2, #1
 801e918:	701a      	strb	r2, [r3, #0]
}
 801e91a:	bf00      	nop
 801e91c:	370c      	adds	r7, #12
 801e91e:	46bd      	mov	sp, r7
 801e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e924:	4770      	bx	lr
 801e926:	bf00      	nop
 801e928:	20000398 	.word	0x20000398
 801e92c:	20022907 	.word	0x20022907

0801e930 <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 801e930:	b580      	push	{r7, lr}
 801e932:	b0ca      	sub	sp, #296	@ 0x128
 801e934:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("IN uart\n");
 801e936:	4838      	ldr	r0, [pc, #224]	@ (801ea18 <UartTestTask+0xe8>)
 801e938:	f000 fa98 	bl	801ee6c <puts>
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801e93c:	4b37      	ldr	r3, [pc, #220]	@ (801ea1c <UartTestTask+0xec>)
 801e93e:	6818      	ldr	r0, [r3, #0]
 801e940:	f107 0114 	add.w	r1, r7, #20
 801e944:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e948:	2200      	movs	r2, #0
 801e94a:	f7ed fd71 	bl	800c430 <osMessageQueueGet>
 801e94e:	4603      	mov	r3, r0
 801e950:	2b00      	cmp	r3, #0
 801e952:	d15d      	bne.n	801ea10 <UartTestTask+0xe0>
		{
			printf("uart received test ID: %lu\n", test_data.test_id);
 801e954:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e958:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e95c:	689b      	ldr	r3, [r3, #8]
 801e95e:	4619      	mov	r1, r3
 801e960:	482f      	ldr	r0, [pc, #188]	@ (801ea20 <UartTestTask+0xf0>)
 801e962:	f000 fa13 	bl	801ed8c <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801e966:	2300      	movs	r3, #0
 801e968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e96c:	e017      	b.n	801e99e <UartTestTask+0x6e>
			{
				result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801e96e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e972:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e976:	7b5a      	ldrb	r2, [r3, #13]
 801e978:	f107 0314 	add.w	r3, r7, #20
 801e97c:	330e      	adds	r3, #14
 801e97e:	4611      	mov	r1, r2
 801e980:	4618      	mov	r0, r3
 801e982:	f000 f851 	bl	801ea28 <UART_Test_Perform>
 801e986:	4603      	mov	r3, r0
 801e988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801e98c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e990:	2bff      	cmp	r3, #255	@ 0xff
 801e992:	d00e      	beq.n	801e9b2 <UartTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801e994:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e998:	3301      	adds	r3, #1
 801e99a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e99e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e9a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e9a6:	7b1b      	ldrb	r3, [r3, #12]
 801e9a8:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801e9ac:	429a      	cmp	r2, r3
 801e9ae:	d3de      	bcc.n	801e96e <UartTestTask+0x3e>
 801e9b0:	e000      	b.n	801e9b4 <UartTestTask+0x84>
					break;
 801e9b2:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801e9b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e9b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801e9bc:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801e9c0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801e9c4:	6812      	ldr	r2, [r2, #0]
 801e9c6:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801e9c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e9cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e9d0:	889a      	ldrh	r2, [r3, #4]
 801e9d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e9d6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801e9da:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801e9dc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e9e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e9e4:	689a      	ldr	r2, [r3, #8]
 801e9e6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e9ea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801e9ee:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801e9f0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e9f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801e9f8:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801e9fc:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801e9fe:	4b09      	ldr	r3, [pc, #36]	@ (801ea24 <UartTestTask+0xf4>)
 801ea00:	6818      	ldr	r0, [r3, #0]
 801ea02:	1d39      	adds	r1, r7, #4
 801ea04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ea08:	2200      	movs	r2, #0
 801ea0a:	f7ed fc9d 	bl	800c348 <osMessageQueuePut>
 801ea0e:	e792      	b.n	801e936 <UartTestTask+0x6>
		}
		else osDelay(1);
 801ea10:	2001      	movs	r0, #1
 801ea12:	f7ec ffef 	bl	800b9f4 <osDelay>
		printf("IN uart\n");
 801ea16:	e78e      	b.n	801e936 <UartTestTask+0x6>
 801ea18:	08023f68 	.word	0x08023f68
 801ea1c:	20000328 	.word	0x20000328
 801ea20:	08023f70 	.word	0x08023f70
 801ea24:	20000324 	.word	0x20000324

0801ea28 <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801ea28:	b590      	push	{r4, r7, lr}
 801ea2a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801ea2e:	af00      	add	r7, sp, #0
 801ea30:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ea34:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801ea38:	6018      	str	r0, [r3, #0]
 801ea3a:	460a      	mov	r2, r1
 801ea3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ea40:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ea44:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing uart test\n");
#endif

	uart4_rx_done = 0;
 801ea46:	4b3d      	ldr	r3, [pc, #244]	@ (801eb3c <UART_Test_Perform+0x114>)
 801ea48:	2200      	movs	r2, #0
 801ea4a:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 801ea4c:	4b3c      	ldr	r3, [pc, #240]	@ (801eb40 <UART_Test_Perform+0x118>)
 801ea4e:	2200      	movs	r2, #0
 801ea50:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 801ea52:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ea56:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ea5a:	781b      	ldrb	r3, [r3, #0]
 801ea5c:	b29a      	uxth	r2, r3
 801ea5e:	f107 030c 	add.w	r3, r7, #12
 801ea62:	4619      	mov	r1, r3
 801ea64:	4837      	ldr	r0, [pc, #220]	@ (801eb44 <UART_Test_Perform+0x11c>)
 801ea66:	f7ea fdc1 	bl	80095ec <HAL_UART_Receive_DMA>
 801ea6a:	4603      	mov	r3, r0
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d001      	beq.n	801ea74 <UART_Test_Perform+0x4c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
#endif
		return TEST_FAILED;
 801ea70:	23ff      	movs	r3, #255	@ 0xff
 801ea72:	e05d      	b.n	801eb30 <UART_Test_Perform+0x108>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 801ea74:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ea78:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ea7c:	781b      	ldrb	r3, [r3, #0]
 801ea7e:	b29a      	uxth	r2, r3
 801ea80:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ea84:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801ea88:	6819      	ldr	r1, [r3, #0]
 801ea8a:	482f      	ldr	r0, [pc, #188]	@ (801eb48 <UART_Test_Perform+0x120>)
 801ea8c:	f7ea fd50 	bl	8009530 <HAL_UART_Transmit_IT>
 801ea90:	4603      	mov	r3, r0
 801ea92:	2b00      	cmp	r3, #0
 801ea94:	d001      	beq.n	801ea9a <UART_Test_Perform+0x72>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
#endif
		return TEST_FAILED;
 801ea96:	23ff      	movs	r3, #255	@ 0xff
 801ea98:	e04a      	b.n	801eb30 <UART_Test_Perform+0x108>
	}
	while (!uart5_rx_done);
 801ea9a:	bf00      	nop
 801ea9c:	4b28      	ldr	r3, [pc, #160]	@ (801eb40 <UART_Test_Perform+0x118>)
 801ea9e:	781b      	ldrb	r3, [r3, #0]
 801eaa0:	b2db      	uxtb	r3, r3
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	d0fa      	beq.n	801ea9c <UART_Test_Perform+0x74>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 801eaa6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801eaaa:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801eaae:	781b      	ldrb	r3, [r3, #0]
 801eab0:	b29a      	uxth	r2, r3
 801eab2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 801eab6:	4619      	mov	r1, r3
 801eab8:	4823      	ldr	r0, [pc, #140]	@ (801eb48 <UART_Test_Perform+0x120>)
 801eaba:	f7ea fd97 	bl	80095ec <HAL_UART_Receive_DMA>
 801eabe:	4603      	mov	r3, r0
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d001      	beq.n	801eac8 <UART_Test_Perform+0xa0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
#endif
		return TEST_FAILED;
 801eac4:	23ff      	movs	r3, #255	@ 0xff
 801eac6:	e033      	b.n	801eb30 <UART_Test_Perform+0x108>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 801eac8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801eacc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ead0:	781b      	ldrb	r3, [r3, #0]
 801ead2:	b29a      	uxth	r2, r3
 801ead4:	f107 030c 	add.w	r3, r7, #12
 801ead8:	4619      	mov	r1, r3
 801eada:	481a      	ldr	r0, [pc, #104]	@ (801eb44 <UART_Test_Perform+0x11c>)
 801eadc:	f7ea fd28 	bl	8009530 <HAL_UART_Transmit_IT>
 801eae0:	4603      	mov	r3, r0
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	d001      	beq.n	801eaea <UART_Test_Perform+0xc2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
#endif
		return TEST_FAILED;
 801eae6:	23ff      	movs	r3, #255	@ 0xff
 801eae8:	e022      	b.n	801eb30 <UART_Test_Perform+0x108>
	}
	while (!uart4_rx_done);
 801eaea:	bf00      	nop
 801eaec:	4b13      	ldr	r3, [pc, #76]	@ (801eb3c <UART_Test_Perform+0x114>)
 801eaee:	781b      	ldrb	r3, [r3, #0]
 801eaf0:	b2db      	uxtb	r3, r3
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d0fa      	beq.n	801eaec <UART_Test_Perform+0xc4>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 801eaf6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801eafa:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801eafe:	781c      	ldrb	r4, [r3, #0]
 801eb00:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 801eb04:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801eb08:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801eb0c:	7819      	ldrb	r1, [r3, #0]
 801eb0e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801eb12:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801eb16:	4623      	mov	r3, r4
 801eb18:	6800      	ldr	r0, [r0, #0]
 801eb1a:	f7ff fbf7 	bl	801e30c <Match_CRC>
 801eb1e:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801eb22:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801eb26:	2b01      	cmp	r3, #1
 801eb28:	d101      	bne.n	801eb2e <UART_Test_Perform+0x106>
 801eb2a:	2301      	movs	r3, #1
 801eb2c:	e000      	b.n	801eb30 <UART_Test_Perform+0x108>

	return TEST_FAILED;
 801eb2e:	23ff      	movs	r3, #255	@ 0xff
}
 801eb30:	4618      	mov	r0, r3
 801eb32:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801eb36:	46bd      	mov	sp, r7
 801eb38:	bd90      	pop	{r4, r7, pc}
 801eb3a:	bf00      	nop
 801eb3c:	20022908 	.word	0x20022908
 801eb40:	20022909 	.word	0x20022909
 801eb44:	20000984 	.word	0x20000984
 801eb48:	200008fc 	.word	0x200008fc

0801eb4c <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801eb4c:	b480      	push	{r7}
 801eb4e:	b083      	sub	sp, #12
 801eb50:	af00      	add	r7, sp, #0
 801eb52:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	4a09      	ldr	r2, [pc, #36]	@ (801eb7c <HAL_UART_RxCpltCallback+0x30>)
 801eb58:	4293      	cmp	r3, r2
 801eb5a:	d102      	bne.n	801eb62 <HAL_UART_RxCpltCallback+0x16>
 801eb5c:	4b08      	ldr	r3, [pc, #32]	@ (801eb80 <HAL_UART_RxCpltCallback+0x34>)
 801eb5e:	2201      	movs	r2, #1
 801eb60:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	4a07      	ldr	r2, [pc, #28]	@ (801eb84 <HAL_UART_RxCpltCallback+0x38>)
 801eb66:	4293      	cmp	r3, r2
 801eb68:	d102      	bne.n	801eb70 <HAL_UART_RxCpltCallback+0x24>
 801eb6a:	4b07      	ldr	r3, [pc, #28]	@ (801eb88 <HAL_UART_RxCpltCallback+0x3c>)
 801eb6c:	2201      	movs	r2, #1
 801eb6e:	701a      	strb	r2, [r3, #0]
}
 801eb70:	bf00      	nop
 801eb72:	370c      	adds	r7, #12
 801eb74:	46bd      	mov	sp, r7
 801eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb7a:	4770      	bx	lr
 801eb7c:	200008fc 	.word	0x200008fc
 801eb80:	20022908 	.word	0x20022908
 801eb84:	20000984 	.word	0x20000984
 801eb88:	20022909 	.word	0x20022909

0801eb8c <rand>:
 801eb8c:	4b16      	ldr	r3, [pc, #88]	@ (801ebe8 <rand+0x5c>)
 801eb8e:	b510      	push	{r4, lr}
 801eb90:	681c      	ldr	r4, [r3, #0]
 801eb92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eb94:	b9b3      	cbnz	r3, 801ebc4 <rand+0x38>
 801eb96:	2018      	movs	r0, #24
 801eb98:	f000 fb44 	bl	801f224 <malloc>
 801eb9c:	4602      	mov	r2, r0
 801eb9e:	6320      	str	r0, [r4, #48]	@ 0x30
 801eba0:	b920      	cbnz	r0, 801ebac <rand+0x20>
 801eba2:	4b12      	ldr	r3, [pc, #72]	@ (801ebec <rand+0x60>)
 801eba4:	4812      	ldr	r0, [pc, #72]	@ (801ebf0 <rand+0x64>)
 801eba6:	2152      	movs	r1, #82	@ 0x52
 801eba8:	f000 fad4 	bl	801f154 <__assert_func>
 801ebac:	4911      	ldr	r1, [pc, #68]	@ (801ebf4 <rand+0x68>)
 801ebae:	4b12      	ldr	r3, [pc, #72]	@ (801ebf8 <rand+0x6c>)
 801ebb0:	e9c0 1300 	strd	r1, r3, [r0]
 801ebb4:	4b11      	ldr	r3, [pc, #68]	@ (801ebfc <rand+0x70>)
 801ebb6:	6083      	str	r3, [r0, #8]
 801ebb8:	230b      	movs	r3, #11
 801ebba:	8183      	strh	r3, [r0, #12]
 801ebbc:	2100      	movs	r1, #0
 801ebbe:	2001      	movs	r0, #1
 801ebc0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ebc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ebc6:	480e      	ldr	r0, [pc, #56]	@ (801ec00 <rand+0x74>)
 801ebc8:	690b      	ldr	r3, [r1, #16]
 801ebca:	694c      	ldr	r4, [r1, #20]
 801ebcc:	4a0d      	ldr	r2, [pc, #52]	@ (801ec04 <rand+0x78>)
 801ebce:	4358      	muls	r0, r3
 801ebd0:	fb02 0004 	mla	r0, r2, r4, r0
 801ebd4:	fba3 3202 	umull	r3, r2, r3, r2
 801ebd8:	3301      	adds	r3, #1
 801ebda:	eb40 0002 	adc.w	r0, r0, r2
 801ebde:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ebe2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ebe6:	bd10      	pop	{r4, pc}
 801ebe8:	20000080 	.word	0x20000080
 801ebec:	08024346 	.word	0x08024346
 801ebf0:	0802435d 	.word	0x0802435d
 801ebf4:	abcd330e 	.word	0xabcd330e
 801ebf8:	e66d1234 	.word	0xe66d1234
 801ebfc:	0005deec 	.word	0x0005deec
 801ec00:	5851f42d 	.word	0x5851f42d
 801ec04:	4c957f2d 	.word	0x4c957f2d

0801ec08 <std>:
 801ec08:	2300      	movs	r3, #0
 801ec0a:	b510      	push	{r4, lr}
 801ec0c:	4604      	mov	r4, r0
 801ec0e:	e9c0 3300 	strd	r3, r3, [r0]
 801ec12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ec16:	6083      	str	r3, [r0, #8]
 801ec18:	8181      	strh	r1, [r0, #12]
 801ec1a:	6643      	str	r3, [r0, #100]	@ 0x64
 801ec1c:	81c2      	strh	r2, [r0, #14]
 801ec1e:	6183      	str	r3, [r0, #24]
 801ec20:	4619      	mov	r1, r3
 801ec22:	2208      	movs	r2, #8
 801ec24:	305c      	adds	r0, #92	@ 0x5c
 801ec26:	f000 fa11 	bl	801f04c <memset>
 801ec2a:	4b0d      	ldr	r3, [pc, #52]	@ (801ec60 <std+0x58>)
 801ec2c:	6263      	str	r3, [r4, #36]	@ 0x24
 801ec2e:	4b0d      	ldr	r3, [pc, #52]	@ (801ec64 <std+0x5c>)
 801ec30:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ec32:	4b0d      	ldr	r3, [pc, #52]	@ (801ec68 <std+0x60>)
 801ec34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ec36:	4b0d      	ldr	r3, [pc, #52]	@ (801ec6c <std+0x64>)
 801ec38:	6323      	str	r3, [r4, #48]	@ 0x30
 801ec3a:	4b0d      	ldr	r3, [pc, #52]	@ (801ec70 <std+0x68>)
 801ec3c:	6224      	str	r4, [r4, #32]
 801ec3e:	429c      	cmp	r4, r3
 801ec40:	d006      	beq.n	801ec50 <std+0x48>
 801ec42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ec46:	4294      	cmp	r4, r2
 801ec48:	d002      	beq.n	801ec50 <std+0x48>
 801ec4a:	33d0      	adds	r3, #208	@ 0xd0
 801ec4c:	429c      	cmp	r4, r3
 801ec4e:	d105      	bne.n	801ec5c <std+0x54>
 801ec50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ec54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec58:	f000 ba6a 	b.w	801f130 <__retarget_lock_init_recursive>
 801ec5c:	bd10      	pop	{r4, pc}
 801ec5e:	bf00      	nop
 801ec60:	0801ee7d 	.word	0x0801ee7d
 801ec64:	0801ee9f 	.word	0x0801ee9f
 801ec68:	0801eed7 	.word	0x0801eed7
 801ec6c:	0801eefb 	.word	0x0801eefb
 801ec70:	2002290c 	.word	0x2002290c

0801ec74 <stdio_exit_handler>:
 801ec74:	4a02      	ldr	r2, [pc, #8]	@ (801ec80 <stdio_exit_handler+0xc>)
 801ec76:	4903      	ldr	r1, [pc, #12]	@ (801ec84 <stdio_exit_handler+0x10>)
 801ec78:	4803      	ldr	r0, [pc, #12]	@ (801ec88 <stdio_exit_handler+0x14>)
 801ec7a:	f000 b869 	b.w	801ed50 <_fwalk_sglue>
 801ec7e:	bf00      	nop
 801ec80:	20000074 	.word	0x20000074
 801ec84:	0801fa35 	.word	0x0801fa35
 801ec88:	20000084 	.word	0x20000084

0801ec8c <cleanup_stdio>:
 801ec8c:	6841      	ldr	r1, [r0, #4]
 801ec8e:	4b0c      	ldr	r3, [pc, #48]	@ (801ecc0 <cleanup_stdio+0x34>)
 801ec90:	4299      	cmp	r1, r3
 801ec92:	b510      	push	{r4, lr}
 801ec94:	4604      	mov	r4, r0
 801ec96:	d001      	beq.n	801ec9c <cleanup_stdio+0x10>
 801ec98:	f000 fecc 	bl	801fa34 <_fflush_r>
 801ec9c:	68a1      	ldr	r1, [r4, #8]
 801ec9e:	4b09      	ldr	r3, [pc, #36]	@ (801ecc4 <cleanup_stdio+0x38>)
 801eca0:	4299      	cmp	r1, r3
 801eca2:	d002      	beq.n	801ecaa <cleanup_stdio+0x1e>
 801eca4:	4620      	mov	r0, r4
 801eca6:	f000 fec5 	bl	801fa34 <_fflush_r>
 801ecaa:	68e1      	ldr	r1, [r4, #12]
 801ecac:	4b06      	ldr	r3, [pc, #24]	@ (801ecc8 <cleanup_stdio+0x3c>)
 801ecae:	4299      	cmp	r1, r3
 801ecb0:	d004      	beq.n	801ecbc <cleanup_stdio+0x30>
 801ecb2:	4620      	mov	r0, r4
 801ecb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ecb8:	f000 bebc 	b.w	801fa34 <_fflush_r>
 801ecbc:	bd10      	pop	{r4, pc}
 801ecbe:	bf00      	nop
 801ecc0:	2002290c 	.word	0x2002290c
 801ecc4:	20022974 	.word	0x20022974
 801ecc8:	200229dc 	.word	0x200229dc

0801eccc <global_stdio_init.part.0>:
 801eccc:	b510      	push	{r4, lr}
 801ecce:	4b0b      	ldr	r3, [pc, #44]	@ (801ecfc <global_stdio_init.part.0+0x30>)
 801ecd0:	4c0b      	ldr	r4, [pc, #44]	@ (801ed00 <global_stdio_init.part.0+0x34>)
 801ecd2:	4a0c      	ldr	r2, [pc, #48]	@ (801ed04 <global_stdio_init.part.0+0x38>)
 801ecd4:	601a      	str	r2, [r3, #0]
 801ecd6:	4620      	mov	r0, r4
 801ecd8:	2200      	movs	r2, #0
 801ecda:	2104      	movs	r1, #4
 801ecdc:	f7ff ff94 	bl	801ec08 <std>
 801ece0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ece4:	2201      	movs	r2, #1
 801ece6:	2109      	movs	r1, #9
 801ece8:	f7ff ff8e 	bl	801ec08 <std>
 801ecec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ecf0:	2202      	movs	r2, #2
 801ecf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ecf6:	2112      	movs	r1, #18
 801ecf8:	f7ff bf86 	b.w	801ec08 <std>
 801ecfc:	20022a44 	.word	0x20022a44
 801ed00:	2002290c 	.word	0x2002290c
 801ed04:	0801ec75 	.word	0x0801ec75

0801ed08 <__sfp_lock_acquire>:
 801ed08:	4801      	ldr	r0, [pc, #4]	@ (801ed10 <__sfp_lock_acquire+0x8>)
 801ed0a:	f000 ba12 	b.w	801f132 <__retarget_lock_acquire_recursive>
 801ed0e:	bf00      	nop
 801ed10:	20022a4d 	.word	0x20022a4d

0801ed14 <__sfp_lock_release>:
 801ed14:	4801      	ldr	r0, [pc, #4]	@ (801ed1c <__sfp_lock_release+0x8>)
 801ed16:	f000 ba0d 	b.w	801f134 <__retarget_lock_release_recursive>
 801ed1a:	bf00      	nop
 801ed1c:	20022a4d 	.word	0x20022a4d

0801ed20 <__sinit>:
 801ed20:	b510      	push	{r4, lr}
 801ed22:	4604      	mov	r4, r0
 801ed24:	f7ff fff0 	bl	801ed08 <__sfp_lock_acquire>
 801ed28:	6a23      	ldr	r3, [r4, #32]
 801ed2a:	b11b      	cbz	r3, 801ed34 <__sinit+0x14>
 801ed2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed30:	f7ff bff0 	b.w	801ed14 <__sfp_lock_release>
 801ed34:	4b04      	ldr	r3, [pc, #16]	@ (801ed48 <__sinit+0x28>)
 801ed36:	6223      	str	r3, [r4, #32]
 801ed38:	4b04      	ldr	r3, [pc, #16]	@ (801ed4c <__sinit+0x2c>)
 801ed3a:	681b      	ldr	r3, [r3, #0]
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	d1f5      	bne.n	801ed2c <__sinit+0xc>
 801ed40:	f7ff ffc4 	bl	801eccc <global_stdio_init.part.0>
 801ed44:	e7f2      	b.n	801ed2c <__sinit+0xc>
 801ed46:	bf00      	nop
 801ed48:	0801ec8d 	.word	0x0801ec8d
 801ed4c:	20022a44 	.word	0x20022a44

0801ed50 <_fwalk_sglue>:
 801ed50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ed54:	4607      	mov	r7, r0
 801ed56:	4688      	mov	r8, r1
 801ed58:	4614      	mov	r4, r2
 801ed5a:	2600      	movs	r6, #0
 801ed5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ed60:	f1b9 0901 	subs.w	r9, r9, #1
 801ed64:	d505      	bpl.n	801ed72 <_fwalk_sglue+0x22>
 801ed66:	6824      	ldr	r4, [r4, #0]
 801ed68:	2c00      	cmp	r4, #0
 801ed6a:	d1f7      	bne.n	801ed5c <_fwalk_sglue+0xc>
 801ed6c:	4630      	mov	r0, r6
 801ed6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed72:	89ab      	ldrh	r3, [r5, #12]
 801ed74:	2b01      	cmp	r3, #1
 801ed76:	d907      	bls.n	801ed88 <_fwalk_sglue+0x38>
 801ed78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ed7c:	3301      	adds	r3, #1
 801ed7e:	d003      	beq.n	801ed88 <_fwalk_sglue+0x38>
 801ed80:	4629      	mov	r1, r5
 801ed82:	4638      	mov	r0, r7
 801ed84:	47c0      	blx	r8
 801ed86:	4306      	orrs	r6, r0
 801ed88:	3568      	adds	r5, #104	@ 0x68
 801ed8a:	e7e9      	b.n	801ed60 <_fwalk_sglue+0x10>

0801ed8c <iprintf>:
 801ed8c:	b40f      	push	{r0, r1, r2, r3}
 801ed8e:	b507      	push	{r0, r1, r2, lr}
 801ed90:	4906      	ldr	r1, [pc, #24]	@ (801edac <iprintf+0x20>)
 801ed92:	ab04      	add	r3, sp, #16
 801ed94:	6808      	ldr	r0, [r1, #0]
 801ed96:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed9a:	6881      	ldr	r1, [r0, #8]
 801ed9c:	9301      	str	r3, [sp, #4]
 801ed9e:	f000 fb21 	bl	801f3e4 <_vfiprintf_r>
 801eda2:	b003      	add	sp, #12
 801eda4:	f85d eb04 	ldr.w	lr, [sp], #4
 801eda8:	b004      	add	sp, #16
 801edaa:	4770      	bx	lr
 801edac:	20000080 	.word	0x20000080

0801edb0 <putchar>:
 801edb0:	4b02      	ldr	r3, [pc, #8]	@ (801edbc <putchar+0xc>)
 801edb2:	4601      	mov	r1, r0
 801edb4:	6818      	ldr	r0, [r3, #0]
 801edb6:	6882      	ldr	r2, [r0, #8]
 801edb8:	f000 bed8 	b.w	801fb6c <_putc_r>
 801edbc:	20000080 	.word	0x20000080

0801edc0 <_puts_r>:
 801edc0:	6a03      	ldr	r3, [r0, #32]
 801edc2:	b570      	push	{r4, r5, r6, lr}
 801edc4:	6884      	ldr	r4, [r0, #8]
 801edc6:	4605      	mov	r5, r0
 801edc8:	460e      	mov	r6, r1
 801edca:	b90b      	cbnz	r3, 801edd0 <_puts_r+0x10>
 801edcc:	f7ff ffa8 	bl	801ed20 <__sinit>
 801edd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801edd2:	07db      	lsls	r3, r3, #31
 801edd4:	d405      	bmi.n	801ede2 <_puts_r+0x22>
 801edd6:	89a3      	ldrh	r3, [r4, #12]
 801edd8:	0598      	lsls	r0, r3, #22
 801edda:	d402      	bmi.n	801ede2 <_puts_r+0x22>
 801eddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801edde:	f000 f9a8 	bl	801f132 <__retarget_lock_acquire_recursive>
 801ede2:	89a3      	ldrh	r3, [r4, #12]
 801ede4:	0719      	lsls	r1, r3, #28
 801ede6:	d502      	bpl.n	801edee <_puts_r+0x2e>
 801ede8:	6923      	ldr	r3, [r4, #16]
 801edea:	2b00      	cmp	r3, #0
 801edec:	d135      	bne.n	801ee5a <_puts_r+0x9a>
 801edee:	4621      	mov	r1, r4
 801edf0:	4628      	mov	r0, r5
 801edf2:	f000 f8c5 	bl	801ef80 <__swsetup_r>
 801edf6:	b380      	cbz	r0, 801ee5a <_puts_r+0x9a>
 801edf8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801edfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801edfe:	07da      	lsls	r2, r3, #31
 801ee00:	d405      	bmi.n	801ee0e <_puts_r+0x4e>
 801ee02:	89a3      	ldrh	r3, [r4, #12]
 801ee04:	059b      	lsls	r3, r3, #22
 801ee06:	d402      	bmi.n	801ee0e <_puts_r+0x4e>
 801ee08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee0a:	f000 f993 	bl	801f134 <__retarget_lock_release_recursive>
 801ee0e:	4628      	mov	r0, r5
 801ee10:	bd70      	pop	{r4, r5, r6, pc}
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	da04      	bge.n	801ee20 <_puts_r+0x60>
 801ee16:	69a2      	ldr	r2, [r4, #24]
 801ee18:	429a      	cmp	r2, r3
 801ee1a:	dc17      	bgt.n	801ee4c <_puts_r+0x8c>
 801ee1c:	290a      	cmp	r1, #10
 801ee1e:	d015      	beq.n	801ee4c <_puts_r+0x8c>
 801ee20:	6823      	ldr	r3, [r4, #0]
 801ee22:	1c5a      	adds	r2, r3, #1
 801ee24:	6022      	str	r2, [r4, #0]
 801ee26:	7019      	strb	r1, [r3, #0]
 801ee28:	68a3      	ldr	r3, [r4, #8]
 801ee2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ee2e:	3b01      	subs	r3, #1
 801ee30:	60a3      	str	r3, [r4, #8]
 801ee32:	2900      	cmp	r1, #0
 801ee34:	d1ed      	bne.n	801ee12 <_puts_r+0x52>
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	da11      	bge.n	801ee5e <_puts_r+0x9e>
 801ee3a:	4622      	mov	r2, r4
 801ee3c:	210a      	movs	r1, #10
 801ee3e:	4628      	mov	r0, r5
 801ee40:	f000 f85f 	bl	801ef02 <__swbuf_r>
 801ee44:	3001      	adds	r0, #1
 801ee46:	d0d7      	beq.n	801edf8 <_puts_r+0x38>
 801ee48:	250a      	movs	r5, #10
 801ee4a:	e7d7      	b.n	801edfc <_puts_r+0x3c>
 801ee4c:	4622      	mov	r2, r4
 801ee4e:	4628      	mov	r0, r5
 801ee50:	f000 f857 	bl	801ef02 <__swbuf_r>
 801ee54:	3001      	adds	r0, #1
 801ee56:	d1e7      	bne.n	801ee28 <_puts_r+0x68>
 801ee58:	e7ce      	b.n	801edf8 <_puts_r+0x38>
 801ee5a:	3e01      	subs	r6, #1
 801ee5c:	e7e4      	b.n	801ee28 <_puts_r+0x68>
 801ee5e:	6823      	ldr	r3, [r4, #0]
 801ee60:	1c5a      	adds	r2, r3, #1
 801ee62:	6022      	str	r2, [r4, #0]
 801ee64:	220a      	movs	r2, #10
 801ee66:	701a      	strb	r2, [r3, #0]
 801ee68:	e7ee      	b.n	801ee48 <_puts_r+0x88>
	...

0801ee6c <puts>:
 801ee6c:	4b02      	ldr	r3, [pc, #8]	@ (801ee78 <puts+0xc>)
 801ee6e:	4601      	mov	r1, r0
 801ee70:	6818      	ldr	r0, [r3, #0]
 801ee72:	f7ff bfa5 	b.w	801edc0 <_puts_r>
 801ee76:	bf00      	nop
 801ee78:	20000080 	.word	0x20000080

0801ee7c <__sread>:
 801ee7c:	b510      	push	{r4, lr}
 801ee7e:	460c      	mov	r4, r1
 801ee80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee84:	f000 f90c 	bl	801f0a0 <_read_r>
 801ee88:	2800      	cmp	r0, #0
 801ee8a:	bfab      	itete	ge
 801ee8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ee8e:	89a3      	ldrhlt	r3, [r4, #12]
 801ee90:	181b      	addge	r3, r3, r0
 801ee92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ee96:	bfac      	ite	ge
 801ee98:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ee9a:	81a3      	strhlt	r3, [r4, #12]
 801ee9c:	bd10      	pop	{r4, pc}

0801ee9e <__swrite>:
 801ee9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eea2:	461f      	mov	r7, r3
 801eea4:	898b      	ldrh	r3, [r1, #12]
 801eea6:	05db      	lsls	r3, r3, #23
 801eea8:	4605      	mov	r5, r0
 801eeaa:	460c      	mov	r4, r1
 801eeac:	4616      	mov	r6, r2
 801eeae:	d505      	bpl.n	801eebc <__swrite+0x1e>
 801eeb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eeb4:	2302      	movs	r3, #2
 801eeb6:	2200      	movs	r2, #0
 801eeb8:	f000 f8e0 	bl	801f07c <_lseek_r>
 801eebc:	89a3      	ldrh	r3, [r4, #12]
 801eebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801eec6:	81a3      	strh	r3, [r4, #12]
 801eec8:	4632      	mov	r2, r6
 801eeca:	463b      	mov	r3, r7
 801eecc:	4628      	mov	r0, r5
 801eece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eed2:	f000 b8f7 	b.w	801f0c4 <_write_r>

0801eed6 <__sseek>:
 801eed6:	b510      	push	{r4, lr}
 801eed8:	460c      	mov	r4, r1
 801eeda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eede:	f000 f8cd 	bl	801f07c <_lseek_r>
 801eee2:	1c43      	adds	r3, r0, #1
 801eee4:	89a3      	ldrh	r3, [r4, #12]
 801eee6:	bf15      	itete	ne
 801eee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801eeea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801eeee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801eef2:	81a3      	strheq	r3, [r4, #12]
 801eef4:	bf18      	it	ne
 801eef6:	81a3      	strhne	r3, [r4, #12]
 801eef8:	bd10      	pop	{r4, pc}

0801eefa <__sclose>:
 801eefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eefe:	f000 b8ad 	b.w	801f05c <_close_r>

0801ef02 <__swbuf_r>:
 801ef02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef04:	460e      	mov	r6, r1
 801ef06:	4614      	mov	r4, r2
 801ef08:	4605      	mov	r5, r0
 801ef0a:	b118      	cbz	r0, 801ef14 <__swbuf_r+0x12>
 801ef0c:	6a03      	ldr	r3, [r0, #32]
 801ef0e:	b90b      	cbnz	r3, 801ef14 <__swbuf_r+0x12>
 801ef10:	f7ff ff06 	bl	801ed20 <__sinit>
 801ef14:	69a3      	ldr	r3, [r4, #24]
 801ef16:	60a3      	str	r3, [r4, #8]
 801ef18:	89a3      	ldrh	r3, [r4, #12]
 801ef1a:	071a      	lsls	r2, r3, #28
 801ef1c:	d501      	bpl.n	801ef22 <__swbuf_r+0x20>
 801ef1e:	6923      	ldr	r3, [r4, #16]
 801ef20:	b943      	cbnz	r3, 801ef34 <__swbuf_r+0x32>
 801ef22:	4621      	mov	r1, r4
 801ef24:	4628      	mov	r0, r5
 801ef26:	f000 f82b 	bl	801ef80 <__swsetup_r>
 801ef2a:	b118      	cbz	r0, 801ef34 <__swbuf_r+0x32>
 801ef2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801ef30:	4638      	mov	r0, r7
 801ef32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef34:	6823      	ldr	r3, [r4, #0]
 801ef36:	6922      	ldr	r2, [r4, #16]
 801ef38:	1a98      	subs	r0, r3, r2
 801ef3a:	6963      	ldr	r3, [r4, #20]
 801ef3c:	b2f6      	uxtb	r6, r6
 801ef3e:	4283      	cmp	r3, r0
 801ef40:	4637      	mov	r7, r6
 801ef42:	dc05      	bgt.n	801ef50 <__swbuf_r+0x4e>
 801ef44:	4621      	mov	r1, r4
 801ef46:	4628      	mov	r0, r5
 801ef48:	f000 fd74 	bl	801fa34 <_fflush_r>
 801ef4c:	2800      	cmp	r0, #0
 801ef4e:	d1ed      	bne.n	801ef2c <__swbuf_r+0x2a>
 801ef50:	68a3      	ldr	r3, [r4, #8]
 801ef52:	3b01      	subs	r3, #1
 801ef54:	60a3      	str	r3, [r4, #8]
 801ef56:	6823      	ldr	r3, [r4, #0]
 801ef58:	1c5a      	adds	r2, r3, #1
 801ef5a:	6022      	str	r2, [r4, #0]
 801ef5c:	701e      	strb	r6, [r3, #0]
 801ef5e:	6962      	ldr	r2, [r4, #20]
 801ef60:	1c43      	adds	r3, r0, #1
 801ef62:	429a      	cmp	r2, r3
 801ef64:	d004      	beq.n	801ef70 <__swbuf_r+0x6e>
 801ef66:	89a3      	ldrh	r3, [r4, #12]
 801ef68:	07db      	lsls	r3, r3, #31
 801ef6a:	d5e1      	bpl.n	801ef30 <__swbuf_r+0x2e>
 801ef6c:	2e0a      	cmp	r6, #10
 801ef6e:	d1df      	bne.n	801ef30 <__swbuf_r+0x2e>
 801ef70:	4621      	mov	r1, r4
 801ef72:	4628      	mov	r0, r5
 801ef74:	f000 fd5e 	bl	801fa34 <_fflush_r>
 801ef78:	2800      	cmp	r0, #0
 801ef7a:	d0d9      	beq.n	801ef30 <__swbuf_r+0x2e>
 801ef7c:	e7d6      	b.n	801ef2c <__swbuf_r+0x2a>
	...

0801ef80 <__swsetup_r>:
 801ef80:	b538      	push	{r3, r4, r5, lr}
 801ef82:	4b29      	ldr	r3, [pc, #164]	@ (801f028 <__swsetup_r+0xa8>)
 801ef84:	4605      	mov	r5, r0
 801ef86:	6818      	ldr	r0, [r3, #0]
 801ef88:	460c      	mov	r4, r1
 801ef8a:	b118      	cbz	r0, 801ef94 <__swsetup_r+0x14>
 801ef8c:	6a03      	ldr	r3, [r0, #32]
 801ef8e:	b90b      	cbnz	r3, 801ef94 <__swsetup_r+0x14>
 801ef90:	f7ff fec6 	bl	801ed20 <__sinit>
 801ef94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ef98:	0719      	lsls	r1, r3, #28
 801ef9a:	d422      	bmi.n	801efe2 <__swsetup_r+0x62>
 801ef9c:	06da      	lsls	r2, r3, #27
 801ef9e:	d407      	bmi.n	801efb0 <__swsetup_r+0x30>
 801efa0:	2209      	movs	r2, #9
 801efa2:	602a      	str	r2, [r5, #0]
 801efa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801efa8:	81a3      	strh	r3, [r4, #12]
 801efaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801efae:	e033      	b.n	801f018 <__swsetup_r+0x98>
 801efb0:	0758      	lsls	r0, r3, #29
 801efb2:	d512      	bpl.n	801efda <__swsetup_r+0x5a>
 801efb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801efb6:	b141      	cbz	r1, 801efca <__swsetup_r+0x4a>
 801efb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801efbc:	4299      	cmp	r1, r3
 801efbe:	d002      	beq.n	801efc6 <__swsetup_r+0x46>
 801efc0:	4628      	mov	r0, r5
 801efc2:	f000 f8e5 	bl	801f190 <_free_r>
 801efc6:	2300      	movs	r3, #0
 801efc8:	6363      	str	r3, [r4, #52]	@ 0x34
 801efca:	89a3      	ldrh	r3, [r4, #12]
 801efcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801efd0:	81a3      	strh	r3, [r4, #12]
 801efd2:	2300      	movs	r3, #0
 801efd4:	6063      	str	r3, [r4, #4]
 801efd6:	6923      	ldr	r3, [r4, #16]
 801efd8:	6023      	str	r3, [r4, #0]
 801efda:	89a3      	ldrh	r3, [r4, #12]
 801efdc:	f043 0308 	orr.w	r3, r3, #8
 801efe0:	81a3      	strh	r3, [r4, #12]
 801efe2:	6923      	ldr	r3, [r4, #16]
 801efe4:	b94b      	cbnz	r3, 801effa <__swsetup_r+0x7a>
 801efe6:	89a3      	ldrh	r3, [r4, #12]
 801efe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801efec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801eff0:	d003      	beq.n	801effa <__swsetup_r+0x7a>
 801eff2:	4621      	mov	r1, r4
 801eff4:	4628      	mov	r0, r5
 801eff6:	f000 fd7d 	bl	801faf4 <__smakebuf_r>
 801effa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801effe:	f013 0201 	ands.w	r2, r3, #1
 801f002:	d00a      	beq.n	801f01a <__swsetup_r+0x9a>
 801f004:	2200      	movs	r2, #0
 801f006:	60a2      	str	r2, [r4, #8]
 801f008:	6962      	ldr	r2, [r4, #20]
 801f00a:	4252      	negs	r2, r2
 801f00c:	61a2      	str	r2, [r4, #24]
 801f00e:	6922      	ldr	r2, [r4, #16]
 801f010:	b942      	cbnz	r2, 801f024 <__swsetup_r+0xa4>
 801f012:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f016:	d1c5      	bne.n	801efa4 <__swsetup_r+0x24>
 801f018:	bd38      	pop	{r3, r4, r5, pc}
 801f01a:	0799      	lsls	r1, r3, #30
 801f01c:	bf58      	it	pl
 801f01e:	6962      	ldrpl	r2, [r4, #20]
 801f020:	60a2      	str	r2, [r4, #8]
 801f022:	e7f4      	b.n	801f00e <__swsetup_r+0x8e>
 801f024:	2000      	movs	r0, #0
 801f026:	e7f7      	b.n	801f018 <__swsetup_r+0x98>
 801f028:	20000080 	.word	0x20000080

0801f02c <memcmp>:
 801f02c:	b510      	push	{r4, lr}
 801f02e:	3901      	subs	r1, #1
 801f030:	4402      	add	r2, r0
 801f032:	4290      	cmp	r0, r2
 801f034:	d101      	bne.n	801f03a <memcmp+0xe>
 801f036:	2000      	movs	r0, #0
 801f038:	e005      	b.n	801f046 <memcmp+0x1a>
 801f03a:	7803      	ldrb	r3, [r0, #0]
 801f03c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f040:	42a3      	cmp	r3, r4
 801f042:	d001      	beq.n	801f048 <memcmp+0x1c>
 801f044:	1b18      	subs	r0, r3, r4
 801f046:	bd10      	pop	{r4, pc}
 801f048:	3001      	adds	r0, #1
 801f04a:	e7f2      	b.n	801f032 <memcmp+0x6>

0801f04c <memset>:
 801f04c:	4402      	add	r2, r0
 801f04e:	4603      	mov	r3, r0
 801f050:	4293      	cmp	r3, r2
 801f052:	d100      	bne.n	801f056 <memset+0xa>
 801f054:	4770      	bx	lr
 801f056:	f803 1b01 	strb.w	r1, [r3], #1
 801f05a:	e7f9      	b.n	801f050 <memset+0x4>

0801f05c <_close_r>:
 801f05c:	b538      	push	{r3, r4, r5, lr}
 801f05e:	4d06      	ldr	r5, [pc, #24]	@ (801f078 <_close_r+0x1c>)
 801f060:	2300      	movs	r3, #0
 801f062:	4604      	mov	r4, r0
 801f064:	4608      	mov	r0, r1
 801f066:	602b      	str	r3, [r5, #0]
 801f068:	f7e2 fcf8 	bl	8001a5c <_close>
 801f06c:	1c43      	adds	r3, r0, #1
 801f06e:	d102      	bne.n	801f076 <_close_r+0x1a>
 801f070:	682b      	ldr	r3, [r5, #0]
 801f072:	b103      	cbz	r3, 801f076 <_close_r+0x1a>
 801f074:	6023      	str	r3, [r4, #0]
 801f076:	bd38      	pop	{r3, r4, r5, pc}
 801f078:	20022a48 	.word	0x20022a48

0801f07c <_lseek_r>:
 801f07c:	b538      	push	{r3, r4, r5, lr}
 801f07e:	4d07      	ldr	r5, [pc, #28]	@ (801f09c <_lseek_r+0x20>)
 801f080:	4604      	mov	r4, r0
 801f082:	4608      	mov	r0, r1
 801f084:	4611      	mov	r1, r2
 801f086:	2200      	movs	r2, #0
 801f088:	602a      	str	r2, [r5, #0]
 801f08a:	461a      	mov	r2, r3
 801f08c:	f7e2 fd0d 	bl	8001aaa <_lseek>
 801f090:	1c43      	adds	r3, r0, #1
 801f092:	d102      	bne.n	801f09a <_lseek_r+0x1e>
 801f094:	682b      	ldr	r3, [r5, #0]
 801f096:	b103      	cbz	r3, 801f09a <_lseek_r+0x1e>
 801f098:	6023      	str	r3, [r4, #0]
 801f09a:	bd38      	pop	{r3, r4, r5, pc}
 801f09c:	20022a48 	.word	0x20022a48

0801f0a0 <_read_r>:
 801f0a0:	b538      	push	{r3, r4, r5, lr}
 801f0a2:	4d07      	ldr	r5, [pc, #28]	@ (801f0c0 <_read_r+0x20>)
 801f0a4:	4604      	mov	r4, r0
 801f0a6:	4608      	mov	r0, r1
 801f0a8:	4611      	mov	r1, r2
 801f0aa:	2200      	movs	r2, #0
 801f0ac:	602a      	str	r2, [r5, #0]
 801f0ae:	461a      	mov	r2, r3
 801f0b0:	f7e2 fcb7 	bl	8001a22 <_read>
 801f0b4:	1c43      	adds	r3, r0, #1
 801f0b6:	d102      	bne.n	801f0be <_read_r+0x1e>
 801f0b8:	682b      	ldr	r3, [r5, #0]
 801f0ba:	b103      	cbz	r3, 801f0be <_read_r+0x1e>
 801f0bc:	6023      	str	r3, [r4, #0]
 801f0be:	bd38      	pop	{r3, r4, r5, pc}
 801f0c0:	20022a48 	.word	0x20022a48

0801f0c4 <_write_r>:
 801f0c4:	b538      	push	{r3, r4, r5, lr}
 801f0c6:	4d07      	ldr	r5, [pc, #28]	@ (801f0e4 <_write_r+0x20>)
 801f0c8:	4604      	mov	r4, r0
 801f0ca:	4608      	mov	r0, r1
 801f0cc:	4611      	mov	r1, r2
 801f0ce:	2200      	movs	r2, #0
 801f0d0:	602a      	str	r2, [r5, #0]
 801f0d2:	461a      	mov	r2, r3
 801f0d4:	f7e2 f816 	bl	8001104 <_write>
 801f0d8:	1c43      	adds	r3, r0, #1
 801f0da:	d102      	bne.n	801f0e2 <_write_r+0x1e>
 801f0dc:	682b      	ldr	r3, [r5, #0]
 801f0de:	b103      	cbz	r3, 801f0e2 <_write_r+0x1e>
 801f0e0:	6023      	str	r3, [r4, #0]
 801f0e2:	bd38      	pop	{r3, r4, r5, pc}
 801f0e4:	20022a48 	.word	0x20022a48

0801f0e8 <__libc_init_array>:
 801f0e8:	b570      	push	{r4, r5, r6, lr}
 801f0ea:	4d0d      	ldr	r5, [pc, #52]	@ (801f120 <__libc_init_array+0x38>)
 801f0ec:	4c0d      	ldr	r4, [pc, #52]	@ (801f124 <__libc_init_array+0x3c>)
 801f0ee:	1b64      	subs	r4, r4, r5
 801f0f0:	10a4      	asrs	r4, r4, #2
 801f0f2:	2600      	movs	r6, #0
 801f0f4:	42a6      	cmp	r6, r4
 801f0f6:	d109      	bne.n	801f10c <__libc_init_array+0x24>
 801f0f8:	4d0b      	ldr	r5, [pc, #44]	@ (801f128 <__libc_init_array+0x40>)
 801f0fa:	4c0c      	ldr	r4, [pc, #48]	@ (801f12c <__libc_init_array+0x44>)
 801f0fc:	f000 fde8 	bl	801fcd0 <_init>
 801f100:	1b64      	subs	r4, r4, r5
 801f102:	10a4      	asrs	r4, r4, #2
 801f104:	2600      	movs	r6, #0
 801f106:	42a6      	cmp	r6, r4
 801f108:	d105      	bne.n	801f116 <__libc_init_array+0x2e>
 801f10a:	bd70      	pop	{r4, r5, r6, pc}
 801f10c:	f855 3b04 	ldr.w	r3, [r5], #4
 801f110:	4798      	blx	r3
 801f112:	3601      	adds	r6, #1
 801f114:	e7ee      	b.n	801f0f4 <__libc_init_array+0xc>
 801f116:	f855 3b04 	ldr.w	r3, [r5], #4
 801f11a:	4798      	blx	r3
 801f11c:	3601      	adds	r6, #1
 801f11e:	e7f2      	b.n	801f106 <__libc_init_array+0x1e>
 801f120:	0802442c 	.word	0x0802442c
 801f124:	0802442c 	.word	0x0802442c
 801f128:	0802442c 	.word	0x0802442c
 801f12c:	08024430 	.word	0x08024430

0801f130 <__retarget_lock_init_recursive>:
 801f130:	4770      	bx	lr

0801f132 <__retarget_lock_acquire_recursive>:
 801f132:	4770      	bx	lr

0801f134 <__retarget_lock_release_recursive>:
 801f134:	4770      	bx	lr

0801f136 <memcpy>:
 801f136:	440a      	add	r2, r1
 801f138:	4291      	cmp	r1, r2
 801f13a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801f13e:	d100      	bne.n	801f142 <memcpy+0xc>
 801f140:	4770      	bx	lr
 801f142:	b510      	push	{r4, lr}
 801f144:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f148:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f14c:	4291      	cmp	r1, r2
 801f14e:	d1f9      	bne.n	801f144 <memcpy+0xe>
 801f150:	bd10      	pop	{r4, pc}
	...

0801f154 <__assert_func>:
 801f154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f156:	4614      	mov	r4, r2
 801f158:	461a      	mov	r2, r3
 801f15a:	4b09      	ldr	r3, [pc, #36]	@ (801f180 <__assert_func+0x2c>)
 801f15c:	681b      	ldr	r3, [r3, #0]
 801f15e:	4605      	mov	r5, r0
 801f160:	68d8      	ldr	r0, [r3, #12]
 801f162:	b14c      	cbz	r4, 801f178 <__assert_func+0x24>
 801f164:	4b07      	ldr	r3, [pc, #28]	@ (801f184 <__assert_func+0x30>)
 801f166:	9100      	str	r1, [sp, #0]
 801f168:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f16c:	4906      	ldr	r1, [pc, #24]	@ (801f188 <__assert_func+0x34>)
 801f16e:	462b      	mov	r3, r5
 801f170:	f000 fc88 	bl	801fa84 <fiprintf>
 801f174:	f000 fd60 	bl	801fc38 <abort>
 801f178:	4b04      	ldr	r3, [pc, #16]	@ (801f18c <__assert_func+0x38>)
 801f17a:	461c      	mov	r4, r3
 801f17c:	e7f3      	b.n	801f166 <__assert_func+0x12>
 801f17e:	bf00      	nop
 801f180:	20000080 	.word	0x20000080
 801f184:	080243b5 	.word	0x080243b5
 801f188:	080243c2 	.word	0x080243c2
 801f18c:	080243f0 	.word	0x080243f0

0801f190 <_free_r>:
 801f190:	b538      	push	{r3, r4, r5, lr}
 801f192:	4605      	mov	r5, r0
 801f194:	2900      	cmp	r1, #0
 801f196:	d041      	beq.n	801f21c <_free_r+0x8c>
 801f198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f19c:	1f0c      	subs	r4, r1, #4
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	bfb8      	it	lt
 801f1a2:	18e4      	addlt	r4, r4, r3
 801f1a4:	f000 f8e8 	bl	801f378 <__malloc_lock>
 801f1a8:	4a1d      	ldr	r2, [pc, #116]	@ (801f220 <_free_r+0x90>)
 801f1aa:	6813      	ldr	r3, [r2, #0]
 801f1ac:	b933      	cbnz	r3, 801f1bc <_free_r+0x2c>
 801f1ae:	6063      	str	r3, [r4, #4]
 801f1b0:	6014      	str	r4, [r2, #0]
 801f1b2:	4628      	mov	r0, r5
 801f1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f1b8:	f000 b8e4 	b.w	801f384 <__malloc_unlock>
 801f1bc:	42a3      	cmp	r3, r4
 801f1be:	d908      	bls.n	801f1d2 <_free_r+0x42>
 801f1c0:	6820      	ldr	r0, [r4, #0]
 801f1c2:	1821      	adds	r1, r4, r0
 801f1c4:	428b      	cmp	r3, r1
 801f1c6:	bf01      	itttt	eq
 801f1c8:	6819      	ldreq	r1, [r3, #0]
 801f1ca:	685b      	ldreq	r3, [r3, #4]
 801f1cc:	1809      	addeq	r1, r1, r0
 801f1ce:	6021      	streq	r1, [r4, #0]
 801f1d0:	e7ed      	b.n	801f1ae <_free_r+0x1e>
 801f1d2:	461a      	mov	r2, r3
 801f1d4:	685b      	ldr	r3, [r3, #4]
 801f1d6:	b10b      	cbz	r3, 801f1dc <_free_r+0x4c>
 801f1d8:	42a3      	cmp	r3, r4
 801f1da:	d9fa      	bls.n	801f1d2 <_free_r+0x42>
 801f1dc:	6811      	ldr	r1, [r2, #0]
 801f1de:	1850      	adds	r0, r2, r1
 801f1e0:	42a0      	cmp	r0, r4
 801f1e2:	d10b      	bne.n	801f1fc <_free_r+0x6c>
 801f1e4:	6820      	ldr	r0, [r4, #0]
 801f1e6:	4401      	add	r1, r0
 801f1e8:	1850      	adds	r0, r2, r1
 801f1ea:	4283      	cmp	r3, r0
 801f1ec:	6011      	str	r1, [r2, #0]
 801f1ee:	d1e0      	bne.n	801f1b2 <_free_r+0x22>
 801f1f0:	6818      	ldr	r0, [r3, #0]
 801f1f2:	685b      	ldr	r3, [r3, #4]
 801f1f4:	6053      	str	r3, [r2, #4]
 801f1f6:	4408      	add	r0, r1
 801f1f8:	6010      	str	r0, [r2, #0]
 801f1fa:	e7da      	b.n	801f1b2 <_free_r+0x22>
 801f1fc:	d902      	bls.n	801f204 <_free_r+0x74>
 801f1fe:	230c      	movs	r3, #12
 801f200:	602b      	str	r3, [r5, #0]
 801f202:	e7d6      	b.n	801f1b2 <_free_r+0x22>
 801f204:	6820      	ldr	r0, [r4, #0]
 801f206:	1821      	adds	r1, r4, r0
 801f208:	428b      	cmp	r3, r1
 801f20a:	bf04      	itt	eq
 801f20c:	6819      	ldreq	r1, [r3, #0]
 801f20e:	685b      	ldreq	r3, [r3, #4]
 801f210:	6063      	str	r3, [r4, #4]
 801f212:	bf04      	itt	eq
 801f214:	1809      	addeq	r1, r1, r0
 801f216:	6021      	streq	r1, [r4, #0]
 801f218:	6054      	str	r4, [r2, #4]
 801f21a:	e7ca      	b.n	801f1b2 <_free_r+0x22>
 801f21c:	bd38      	pop	{r3, r4, r5, pc}
 801f21e:	bf00      	nop
 801f220:	20022a54 	.word	0x20022a54

0801f224 <malloc>:
 801f224:	4b02      	ldr	r3, [pc, #8]	@ (801f230 <malloc+0xc>)
 801f226:	4601      	mov	r1, r0
 801f228:	6818      	ldr	r0, [r3, #0]
 801f22a:	f000 b825 	b.w	801f278 <_malloc_r>
 801f22e:	bf00      	nop
 801f230:	20000080 	.word	0x20000080

0801f234 <sbrk_aligned>:
 801f234:	b570      	push	{r4, r5, r6, lr}
 801f236:	4e0f      	ldr	r6, [pc, #60]	@ (801f274 <sbrk_aligned+0x40>)
 801f238:	460c      	mov	r4, r1
 801f23a:	6831      	ldr	r1, [r6, #0]
 801f23c:	4605      	mov	r5, r0
 801f23e:	b911      	cbnz	r1, 801f246 <sbrk_aligned+0x12>
 801f240:	f000 fcea 	bl	801fc18 <_sbrk_r>
 801f244:	6030      	str	r0, [r6, #0]
 801f246:	4621      	mov	r1, r4
 801f248:	4628      	mov	r0, r5
 801f24a:	f000 fce5 	bl	801fc18 <_sbrk_r>
 801f24e:	1c43      	adds	r3, r0, #1
 801f250:	d103      	bne.n	801f25a <sbrk_aligned+0x26>
 801f252:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801f256:	4620      	mov	r0, r4
 801f258:	bd70      	pop	{r4, r5, r6, pc}
 801f25a:	1cc4      	adds	r4, r0, #3
 801f25c:	f024 0403 	bic.w	r4, r4, #3
 801f260:	42a0      	cmp	r0, r4
 801f262:	d0f8      	beq.n	801f256 <sbrk_aligned+0x22>
 801f264:	1a21      	subs	r1, r4, r0
 801f266:	4628      	mov	r0, r5
 801f268:	f000 fcd6 	bl	801fc18 <_sbrk_r>
 801f26c:	3001      	adds	r0, #1
 801f26e:	d1f2      	bne.n	801f256 <sbrk_aligned+0x22>
 801f270:	e7ef      	b.n	801f252 <sbrk_aligned+0x1e>
 801f272:	bf00      	nop
 801f274:	20022a50 	.word	0x20022a50

0801f278 <_malloc_r>:
 801f278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f27c:	1ccd      	adds	r5, r1, #3
 801f27e:	f025 0503 	bic.w	r5, r5, #3
 801f282:	3508      	adds	r5, #8
 801f284:	2d0c      	cmp	r5, #12
 801f286:	bf38      	it	cc
 801f288:	250c      	movcc	r5, #12
 801f28a:	2d00      	cmp	r5, #0
 801f28c:	4606      	mov	r6, r0
 801f28e:	db01      	blt.n	801f294 <_malloc_r+0x1c>
 801f290:	42a9      	cmp	r1, r5
 801f292:	d904      	bls.n	801f29e <_malloc_r+0x26>
 801f294:	230c      	movs	r3, #12
 801f296:	6033      	str	r3, [r6, #0]
 801f298:	2000      	movs	r0, #0
 801f29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f29e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f374 <_malloc_r+0xfc>
 801f2a2:	f000 f869 	bl	801f378 <__malloc_lock>
 801f2a6:	f8d8 3000 	ldr.w	r3, [r8]
 801f2aa:	461c      	mov	r4, r3
 801f2ac:	bb44      	cbnz	r4, 801f300 <_malloc_r+0x88>
 801f2ae:	4629      	mov	r1, r5
 801f2b0:	4630      	mov	r0, r6
 801f2b2:	f7ff ffbf 	bl	801f234 <sbrk_aligned>
 801f2b6:	1c43      	adds	r3, r0, #1
 801f2b8:	4604      	mov	r4, r0
 801f2ba:	d158      	bne.n	801f36e <_malloc_r+0xf6>
 801f2bc:	f8d8 4000 	ldr.w	r4, [r8]
 801f2c0:	4627      	mov	r7, r4
 801f2c2:	2f00      	cmp	r7, #0
 801f2c4:	d143      	bne.n	801f34e <_malloc_r+0xd6>
 801f2c6:	2c00      	cmp	r4, #0
 801f2c8:	d04b      	beq.n	801f362 <_malloc_r+0xea>
 801f2ca:	6823      	ldr	r3, [r4, #0]
 801f2cc:	4639      	mov	r1, r7
 801f2ce:	4630      	mov	r0, r6
 801f2d0:	eb04 0903 	add.w	r9, r4, r3
 801f2d4:	f000 fca0 	bl	801fc18 <_sbrk_r>
 801f2d8:	4581      	cmp	r9, r0
 801f2da:	d142      	bne.n	801f362 <_malloc_r+0xea>
 801f2dc:	6821      	ldr	r1, [r4, #0]
 801f2de:	1a6d      	subs	r5, r5, r1
 801f2e0:	4629      	mov	r1, r5
 801f2e2:	4630      	mov	r0, r6
 801f2e4:	f7ff ffa6 	bl	801f234 <sbrk_aligned>
 801f2e8:	3001      	adds	r0, #1
 801f2ea:	d03a      	beq.n	801f362 <_malloc_r+0xea>
 801f2ec:	6823      	ldr	r3, [r4, #0]
 801f2ee:	442b      	add	r3, r5
 801f2f0:	6023      	str	r3, [r4, #0]
 801f2f2:	f8d8 3000 	ldr.w	r3, [r8]
 801f2f6:	685a      	ldr	r2, [r3, #4]
 801f2f8:	bb62      	cbnz	r2, 801f354 <_malloc_r+0xdc>
 801f2fa:	f8c8 7000 	str.w	r7, [r8]
 801f2fe:	e00f      	b.n	801f320 <_malloc_r+0xa8>
 801f300:	6822      	ldr	r2, [r4, #0]
 801f302:	1b52      	subs	r2, r2, r5
 801f304:	d420      	bmi.n	801f348 <_malloc_r+0xd0>
 801f306:	2a0b      	cmp	r2, #11
 801f308:	d917      	bls.n	801f33a <_malloc_r+0xc2>
 801f30a:	1961      	adds	r1, r4, r5
 801f30c:	42a3      	cmp	r3, r4
 801f30e:	6025      	str	r5, [r4, #0]
 801f310:	bf18      	it	ne
 801f312:	6059      	strne	r1, [r3, #4]
 801f314:	6863      	ldr	r3, [r4, #4]
 801f316:	bf08      	it	eq
 801f318:	f8c8 1000 	streq.w	r1, [r8]
 801f31c:	5162      	str	r2, [r4, r5]
 801f31e:	604b      	str	r3, [r1, #4]
 801f320:	4630      	mov	r0, r6
 801f322:	f000 f82f 	bl	801f384 <__malloc_unlock>
 801f326:	f104 000b 	add.w	r0, r4, #11
 801f32a:	1d23      	adds	r3, r4, #4
 801f32c:	f020 0007 	bic.w	r0, r0, #7
 801f330:	1ac2      	subs	r2, r0, r3
 801f332:	bf1c      	itt	ne
 801f334:	1a1b      	subne	r3, r3, r0
 801f336:	50a3      	strne	r3, [r4, r2]
 801f338:	e7af      	b.n	801f29a <_malloc_r+0x22>
 801f33a:	6862      	ldr	r2, [r4, #4]
 801f33c:	42a3      	cmp	r3, r4
 801f33e:	bf0c      	ite	eq
 801f340:	f8c8 2000 	streq.w	r2, [r8]
 801f344:	605a      	strne	r2, [r3, #4]
 801f346:	e7eb      	b.n	801f320 <_malloc_r+0xa8>
 801f348:	4623      	mov	r3, r4
 801f34a:	6864      	ldr	r4, [r4, #4]
 801f34c:	e7ae      	b.n	801f2ac <_malloc_r+0x34>
 801f34e:	463c      	mov	r4, r7
 801f350:	687f      	ldr	r7, [r7, #4]
 801f352:	e7b6      	b.n	801f2c2 <_malloc_r+0x4a>
 801f354:	461a      	mov	r2, r3
 801f356:	685b      	ldr	r3, [r3, #4]
 801f358:	42a3      	cmp	r3, r4
 801f35a:	d1fb      	bne.n	801f354 <_malloc_r+0xdc>
 801f35c:	2300      	movs	r3, #0
 801f35e:	6053      	str	r3, [r2, #4]
 801f360:	e7de      	b.n	801f320 <_malloc_r+0xa8>
 801f362:	230c      	movs	r3, #12
 801f364:	6033      	str	r3, [r6, #0]
 801f366:	4630      	mov	r0, r6
 801f368:	f000 f80c 	bl	801f384 <__malloc_unlock>
 801f36c:	e794      	b.n	801f298 <_malloc_r+0x20>
 801f36e:	6005      	str	r5, [r0, #0]
 801f370:	e7d6      	b.n	801f320 <_malloc_r+0xa8>
 801f372:	bf00      	nop
 801f374:	20022a54 	.word	0x20022a54

0801f378 <__malloc_lock>:
 801f378:	4801      	ldr	r0, [pc, #4]	@ (801f380 <__malloc_lock+0x8>)
 801f37a:	f7ff beda 	b.w	801f132 <__retarget_lock_acquire_recursive>
 801f37e:	bf00      	nop
 801f380:	20022a4c 	.word	0x20022a4c

0801f384 <__malloc_unlock>:
 801f384:	4801      	ldr	r0, [pc, #4]	@ (801f38c <__malloc_unlock+0x8>)
 801f386:	f7ff bed5 	b.w	801f134 <__retarget_lock_release_recursive>
 801f38a:	bf00      	nop
 801f38c:	20022a4c 	.word	0x20022a4c

0801f390 <__sfputc_r>:
 801f390:	6893      	ldr	r3, [r2, #8]
 801f392:	3b01      	subs	r3, #1
 801f394:	2b00      	cmp	r3, #0
 801f396:	b410      	push	{r4}
 801f398:	6093      	str	r3, [r2, #8]
 801f39a:	da08      	bge.n	801f3ae <__sfputc_r+0x1e>
 801f39c:	6994      	ldr	r4, [r2, #24]
 801f39e:	42a3      	cmp	r3, r4
 801f3a0:	db01      	blt.n	801f3a6 <__sfputc_r+0x16>
 801f3a2:	290a      	cmp	r1, #10
 801f3a4:	d103      	bne.n	801f3ae <__sfputc_r+0x1e>
 801f3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f3aa:	f7ff bdaa 	b.w	801ef02 <__swbuf_r>
 801f3ae:	6813      	ldr	r3, [r2, #0]
 801f3b0:	1c58      	adds	r0, r3, #1
 801f3b2:	6010      	str	r0, [r2, #0]
 801f3b4:	7019      	strb	r1, [r3, #0]
 801f3b6:	4608      	mov	r0, r1
 801f3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f3bc:	4770      	bx	lr

0801f3be <__sfputs_r>:
 801f3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3c0:	4606      	mov	r6, r0
 801f3c2:	460f      	mov	r7, r1
 801f3c4:	4614      	mov	r4, r2
 801f3c6:	18d5      	adds	r5, r2, r3
 801f3c8:	42ac      	cmp	r4, r5
 801f3ca:	d101      	bne.n	801f3d0 <__sfputs_r+0x12>
 801f3cc:	2000      	movs	r0, #0
 801f3ce:	e007      	b.n	801f3e0 <__sfputs_r+0x22>
 801f3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f3d4:	463a      	mov	r2, r7
 801f3d6:	4630      	mov	r0, r6
 801f3d8:	f7ff ffda 	bl	801f390 <__sfputc_r>
 801f3dc:	1c43      	adds	r3, r0, #1
 801f3de:	d1f3      	bne.n	801f3c8 <__sfputs_r+0xa>
 801f3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f3e4 <_vfiprintf_r>:
 801f3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3e8:	460d      	mov	r5, r1
 801f3ea:	b09d      	sub	sp, #116	@ 0x74
 801f3ec:	4614      	mov	r4, r2
 801f3ee:	4698      	mov	r8, r3
 801f3f0:	4606      	mov	r6, r0
 801f3f2:	b118      	cbz	r0, 801f3fc <_vfiprintf_r+0x18>
 801f3f4:	6a03      	ldr	r3, [r0, #32]
 801f3f6:	b90b      	cbnz	r3, 801f3fc <_vfiprintf_r+0x18>
 801f3f8:	f7ff fc92 	bl	801ed20 <__sinit>
 801f3fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f3fe:	07d9      	lsls	r1, r3, #31
 801f400:	d405      	bmi.n	801f40e <_vfiprintf_r+0x2a>
 801f402:	89ab      	ldrh	r3, [r5, #12]
 801f404:	059a      	lsls	r2, r3, #22
 801f406:	d402      	bmi.n	801f40e <_vfiprintf_r+0x2a>
 801f408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f40a:	f7ff fe92 	bl	801f132 <__retarget_lock_acquire_recursive>
 801f40e:	89ab      	ldrh	r3, [r5, #12]
 801f410:	071b      	lsls	r3, r3, #28
 801f412:	d501      	bpl.n	801f418 <_vfiprintf_r+0x34>
 801f414:	692b      	ldr	r3, [r5, #16]
 801f416:	b99b      	cbnz	r3, 801f440 <_vfiprintf_r+0x5c>
 801f418:	4629      	mov	r1, r5
 801f41a:	4630      	mov	r0, r6
 801f41c:	f7ff fdb0 	bl	801ef80 <__swsetup_r>
 801f420:	b170      	cbz	r0, 801f440 <_vfiprintf_r+0x5c>
 801f422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f424:	07dc      	lsls	r4, r3, #31
 801f426:	d504      	bpl.n	801f432 <_vfiprintf_r+0x4e>
 801f428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f42c:	b01d      	add	sp, #116	@ 0x74
 801f42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f432:	89ab      	ldrh	r3, [r5, #12]
 801f434:	0598      	lsls	r0, r3, #22
 801f436:	d4f7      	bmi.n	801f428 <_vfiprintf_r+0x44>
 801f438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f43a:	f7ff fe7b 	bl	801f134 <__retarget_lock_release_recursive>
 801f43e:	e7f3      	b.n	801f428 <_vfiprintf_r+0x44>
 801f440:	2300      	movs	r3, #0
 801f442:	9309      	str	r3, [sp, #36]	@ 0x24
 801f444:	2320      	movs	r3, #32
 801f446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f44a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f44e:	2330      	movs	r3, #48	@ 0x30
 801f450:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f600 <_vfiprintf_r+0x21c>
 801f454:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f458:	f04f 0901 	mov.w	r9, #1
 801f45c:	4623      	mov	r3, r4
 801f45e:	469a      	mov	sl, r3
 801f460:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f464:	b10a      	cbz	r2, 801f46a <_vfiprintf_r+0x86>
 801f466:	2a25      	cmp	r2, #37	@ 0x25
 801f468:	d1f9      	bne.n	801f45e <_vfiprintf_r+0x7a>
 801f46a:	ebba 0b04 	subs.w	fp, sl, r4
 801f46e:	d00b      	beq.n	801f488 <_vfiprintf_r+0xa4>
 801f470:	465b      	mov	r3, fp
 801f472:	4622      	mov	r2, r4
 801f474:	4629      	mov	r1, r5
 801f476:	4630      	mov	r0, r6
 801f478:	f7ff ffa1 	bl	801f3be <__sfputs_r>
 801f47c:	3001      	adds	r0, #1
 801f47e:	f000 80a7 	beq.w	801f5d0 <_vfiprintf_r+0x1ec>
 801f482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f484:	445a      	add	r2, fp
 801f486:	9209      	str	r2, [sp, #36]	@ 0x24
 801f488:	f89a 3000 	ldrb.w	r3, [sl]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	f000 809f 	beq.w	801f5d0 <_vfiprintf_r+0x1ec>
 801f492:	2300      	movs	r3, #0
 801f494:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801f498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f49c:	f10a 0a01 	add.w	sl, sl, #1
 801f4a0:	9304      	str	r3, [sp, #16]
 801f4a2:	9307      	str	r3, [sp, #28]
 801f4a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f4a8:	931a      	str	r3, [sp, #104]	@ 0x68
 801f4aa:	4654      	mov	r4, sl
 801f4ac:	2205      	movs	r2, #5
 801f4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f4b2:	4853      	ldr	r0, [pc, #332]	@ (801f600 <_vfiprintf_r+0x21c>)
 801f4b4:	f7e0 feac 	bl	8000210 <memchr>
 801f4b8:	9a04      	ldr	r2, [sp, #16]
 801f4ba:	b9d8      	cbnz	r0, 801f4f4 <_vfiprintf_r+0x110>
 801f4bc:	06d1      	lsls	r1, r2, #27
 801f4be:	bf44      	itt	mi
 801f4c0:	2320      	movmi	r3, #32
 801f4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f4c6:	0713      	lsls	r3, r2, #28
 801f4c8:	bf44      	itt	mi
 801f4ca:	232b      	movmi	r3, #43	@ 0x2b
 801f4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f4d0:	f89a 3000 	ldrb.w	r3, [sl]
 801f4d4:	2b2a      	cmp	r3, #42	@ 0x2a
 801f4d6:	d015      	beq.n	801f504 <_vfiprintf_r+0x120>
 801f4d8:	9a07      	ldr	r2, [sp, #28]
 801f4da:	4654      	mov	r4, sl
 801f4dc:	2000      	movs	r0, #0
 801f4de:	f04f 0c0a 	mov.w	ip, #10
 801f4e2:	4621      	mov	r1, r4
 801f4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f4e8:	3b30      	subs	r3, #48	@ 0x30
 801f4ea:	2b09      	cmp	r3, #9
 801f4ec:	d94b      	bls.n	801f586 <_vfiprintf_r+0x1a2>
 801f4ee:	b1b0      	cbz	r0, 801f51e <_vfiprintf_r+0x13a>
 801f4f0:	9207      	str	r2, [sp, #28]
 801f4f2:	e014      	b.n	801f51e <_vfiprintf_r+0x13a>
 801f4f4:	eba0 0308 	sub.w	r3, r0, r8
 801f4f8:	fa09 f303 	lsl.w	r3, r9, r3
 801f4fc:	4313      	orrs	r3, r2
 801f4fe:	9304      	str	r3, [sp, #16]
 801f500:	46a2      	mov	sl, r4
 801f502:	e7d2      	b.n	801f4aa <_vfiprintf_r+0xc6>
 801f504:	9b03      	ldr	r3, [sp, #12]
 801f506:	1d19      	adds	r1, r3, #4
 801f508:	681b      	ldr	r3, [r3, #0]
 801f50a:	9103      	str	r1, [sp, #12]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	bfbb      	ittet	lt
 801f510:	425b      	neglt	r3, r3
 801f512:	f042 0202 	orrlt.w	r2, r2, #2
 801f516:	9307      	strge	r3, [sp, #28]
 801f518:	9307      	strlt	r3, [sp, #28]
 801f51a:	bfb8      	it	lt
 801f51c:	9204      	strlt	r2, [sp, #16]
 801f51e:	7823      	ldrb	r3, [r4, #0]
 801f520:	2b2e      	cmp	r3, #46	@ 0x2e
 801f522:	d10a      	bne.n	801f53a <_vfiprintf_r+0x156>
 801f524:	7863      	ldrb	r3, [r4, #1]
 801f526:	2b2a      	cmp	r3, #42	@ 0x2a
 801f528:	d132      	bne.n	801f590 <_vfiprintf_r+0x1ac>
 801f52a:	9b03      	ldr	r3, [sp, #12]
 801f52c:	1d1a      	adds	r2, r3, #4
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	9203      	str	r2, [sp, #12]
 801f532:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f536:	3402      	adds	r4, #2
 801f538:	9305      	str	r3, [sp, #20]
 801f53a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801f610 <_vfiprintf_r+0x22c>
 801f53e:	7821      	ldrb	r1, [r4, #0]
 801f540:	2203      	movs	r2, #3
 801f542:	4650      	mov	r0, sl
 801f544:	f7e0 fe64 	bl	8000210 <memchr>
 801f548:	b138      	cbz	r0, 801f55a <_vfiprintf_r+0x176>
 801f54a:	9b04      	ldr	r3, [sp, #16]
 801f54c:	eba0 000a 	sub.w	r0, r0, sl
 801f550:	2240      	movs	r2, #64	@ 0x40
 801f552:	4082      	lsls	r2, r0
 801f554:	4313      	orrs	r3, r2
 801f556:	3401      	adds	r4, #1
 801f558:	9304      	str	r3, [sp, #16]
 801f55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f55e:	4829      	ldr	r0, [pc, #164]	@ (801f604 <_vfiprintf_r+0x220>)
 801f560:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f564:	2206      	movs	r2, #6
 801f566:	f7e0 fe53 	bl	8000210 <memchr>
 801f56a:	2800      	cmp	r0, #0
 801f56c:	d03f      	beq.n	801f5ee <_vfiprintf_r+0x20a>
 801f56e:	4b26      	ldr	r3, [pc, #152]	@ (801f608 <_vfiprintf_r+0x224>)
 801f570:	bb1b      	cbnz	r3, 801f5ba <_vfiprintf_r+0x1d6>
 801f572:	9b03      	ldr	r3, [sp, #12]
 801f574:	3307      	adds	r3, #7
 801f576:	f023 0307 	bic.w	r3, r3, #7
 801f57a:	3308      	adds	r3, #8
 801f57c:	9303      	str	r3, [sp, #12]
 801f57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f580:	443b      	add	r3, r7
 801f582:	9309      	str	r3, [sp, #36]	@ 0x24
 801f584:	e76a      	b.n	801f45c <_vfiprintf_r+0x78>
 801f586:	fb0c 3202 	mla	r2, ip, r2, r3
 801f58a:	460c      	mov	r4, r1
 801f58c:	2001      	movs	r0, #1
 801f58e:	e7a8      	b.n	801f4e2 <_vfiprintf_r+0xfe>
 801f590:	2300      	movs	r3, #0
 801f592:	3401      	adds	r4, #1
 801f594:	9305      	str	r3, [sp, #20]
 801f596:	4619      	mov	r1, r3
 801f598:	f04f 0c0a 	mov.w	ip, #10
 801f59c:	4620      	mov	r0, r4
 801f59e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f5a2:	3a30      	subs	r2, #48	@ 0x30
 801f5a4:	2a09      	cmp	r2, #9
 801f5a6:	d903      	bls.n	801f5b0 <_vfiprintf_r+0x1cc>
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	d0c6      	beq.n	801f53a <_vfiprintf_r+0x156>
 801f5ac:	9105      	str	r1, [sp, #20]
 801f5ae:	e7c4      	b.n	801f53a <_vfiprintf_r+0x156>
 801f5b0:	fb0c 2101 	mla	r1, ip, r1, r2
 801f5b4:	4604      	mov	r4, r0
 801f5b6:	2301      	movs	r3, #1
 801f5b8:	e7f0      	b.n	801f59c <_vfiprintf_r+0x1b8>
 801f5ba:	ab03      	add	r3, sp, #12
 801f5bc:	9300      	str	r3, [sp, #0]
 801f5be:	462a      	mov	r2, r5
 801f5c0:	4b12      	ldr	r3, [pc, #72]	@ (801f60c <_vfiprintf_r+0x228>)
 801f5c2:	a904      	add	r1, sp, #16
 801f5c4:	4630      	mov	r0, r6
 801f5c6:	f3af 8000 	nop.w
 801f5ca:	4607      	mov	r7, r0
 801f5cc:	1c78      	adds	r0, r7, #1
 801f5ce:	d1d6      	bne.n	801f57e <_vfiprintf_r+0x19a>
 801f5d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f5d2:	07d9      	lsls	r1, r3, #31
 801f5d4:	d405      	bmi.n	801f5e2 <_vfiprintf_r+0x1fe>
 801f5d6:	89ab      	ldrh	r3, [r5, #12]
 801f5d8:	059a      	lsls	r2, r3, #22
 801f5da:	d402      	bmi.n	801f5e2 <_vfiprintf_r+0x1fe>
 801f5dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f5de:	f7ff fda9 	bl	801f134 <__retarget_lock_release_recursive>
 801f5e2:	89ab      	ldrh	r3, [r5, #12]
 801f5e4:	065b      	lsls	r3, r3, #25
 801f5e6:	f53f af1f 	bmi.w	801f428 <_vfiprintf_r+0x44>
 801f5ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f5ec:	e71e      	b.n	801f42c <_vfiprintf_r+0x48>
 801f5ee:	ab03      	add	r3, sp, #12
 801f5f0:	9300      	str	r3, [sp, #0]
 801f5f2:	462a      	mov	r2, r5
 801f5f4:	4b05      	ldr	r3, [pc, #20]	@ (801f60c <_vfiprintf_r+0x228>)
 801f5f6:	a904      	add	r1, sp, #16
 801f5f8:	4630      	mov	r0, r6
 801f5fa:	f000 f879 	bl	801f6f0 <_printf_i>
 801f5fe:	e7e4      	b.n	801f5ca <_vfiprintf_r+0x1e6>
 801f600:	080243f1 	.word	0x080243f1
 801f604:	080243fb 	.word	0x080243fb
 801f608:	00000000 	.word	0x00000000
 801f60c:	0801f3bf 	.word	0x0801f3bf
 801f610:	080243f7 	.word	0x080243f7

0801f614 <_printf_common>:
 801f614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f618:	4616      	mov	r6, r2
 801f61a:	4698      	mov	r8, r3
 801f61c:	688a      	ldr	r2, [r1, #8]
 801f61e:	690b      	ldr	r3, [r1, #16]
 801f620:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f624:	4293      	cmp	r3, r2
 801f626:	bfb8      	it	lt
 801f628:	4613      	movlt	r3, r2
 801f62a:	6033      	str	r3, [r6, #0]
 801f62c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801f630:	4607      	mov	r7, r0
 801f632:	460c      	mov	r4, r1
 801f634:	b10a      	cbz	r2, 801f63a <_printf_common+0x26>
 801f636:	3301      	adds	r3, #1
 801f638:	6033      	str	r3, [r6, #0]
 801f63a:	6823      	ldr	r3, [r4, #0]
 801f63c:	0699      	lsls	r1, r3, #26
 801f63e:	bf42      	ittt	mi
 801f640:	6833      	ldrmi	r3, [r6, #0]
 801f642:	3302      	addmi	r3, #2
 801f644:	6033      	strmi	r3, [r6, #0]
 801f646:	6825      	ldr	r5, [r4, #0]
 801f648:	f015 0506 	ands.w	r5, r5, #6
 801f64c:	d106      	bne.n	801f65c <_printf_common+0x48>
 801f64e:	f104 0a19 	add.w	sl, r4, #25
 801f652:	68e3      	ldr	r3, [r4, #12]
 801f654:	6832      	ldr	r2, [r6, #0]
 801f656:	1a9b      	subs	r3, r3, r2
 801f658:	42ab      	cmp	r3, r5
 801f65a:	dc26      	bgt.n	801f6aa <_printf_common+0x96>
 801f65c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801f660:	6822      	ldr	r2, [r4, #0]
 801f662:	3b00      	subs	r3, #0
 801f664:	bf18      	it	ne
 801f666:	2301      	movne	r3, #1
 801f668:	0692      	lsls	r2, r2, #26
 801f66a:	d42b      	bmi.n	801f6c4 <_printf_common+0xb0>
 801f66c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801f670:	4641      	mov	r1, r8
 801f672:	4638      	mov	r0, r7
 801f674:	47c8      	blx	r9
 801f676:	3001      	adds	r0, #1
 801f678:	d01e      	beq.n	801f6b8 <_printf_common+0xa4>
 801f67a:	6823      	ldr	r3, [r4, #0]
 801f67c:	6922      	ldr	r2, [r4, #16]
 801f67e:	f003 0306 	and.w	r3, r3, #6
 801f682:	2b04      	cmp	r3, #4
 801f684:	bf02      	ittt	eq
 801f686:	68e5      	ldreq	r5, [r4, #12]
 801f688:	6833      	ldreq	r3, [r6, #0]
 801f68a:	1aed      	subeq	r5, r5, r3
 801f68c:	68a3      	ldr	r3, [r4, #8]
 801f68e:	bf0c      	ite	eq
 801f690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f694:	2500      	movne	r5, #0
 801f696:	4293      	cmp	r3, r2
 801f698:	bfc4      	itt	gt
 801f69a:	1a9b      	subgt	r3, r3, r2
 801f69c:	18ed      	addgt	r5, r5, r3
 801f69e:	2600      	movs	r6, #0
 801f6a0:	341a      	adds	r4, #26
 801f6a2:	42b5      	cmp	r5, r6
 801f6a4:	d11a      	bne.n	801f6dc <_printf_common+0xc8>
 801f6a6:	2000      	movs	r0, #0
 801f6a8:	e008      	b.n	801f6bc <_printf_common+0xa8>
 801f6aa:	2301      	movs	r3, #1
 801f6ac:	4652      	mov	r2, sl
 801f6ae:	4641      	mov	r1, r8
 801f6b0:	4638      	mov	r0, r7
 801f6b2:	47c8      	blx	r9
 801f6b4:	3001      	adds	r0, #1
 801f6b6:	d103      	bne.n	801f6c0 <_printf_common+0xac>
 801f6b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6c0:	3501      	adds	r5, #1
 801f6c2:	e7c6      	b.n	801f652 <_printf_common+0x3e>
 801f6c4:	18e1      	adds	r1, r4, r3
 801f6c6:	1c5a      	adds	r2, r3, #1
 801f6c8:	2030      	movs	r0, #48	@ 0x30
 801f6ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801f6ce:	4422      	add	r2, r4
 801f6d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801f6d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801f6d8:	3302      	adds	r3, #2
 801f6da:	e7c7      	b.n	801f66c <_printf_common+0x58>
 801f6dc:	2301      	movs	r3, #1
 801f6de:	4622      	mov	r2, r4
 801f6e0:	4641      	mov	r1, r8
 801f6e2:	4638      	mov	r0, r7
 801f6e4:	47c8      	blx	r9
 801f6e6:	3001      	adds	r0, #1
 801f6e8:	d0e6      	beq.n	801f6b8 <_printf_common+0xa4>
 801f6ea:	3601      	adds	r6, #1
 801f6ec:	e7d9      	b.n	801f6a2 <_printf_common+0x8e>
	...

0801f6f0 <_printf_i>:
 801f6f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f6f4:	7e0f      	ldrb	r7, [r1, #24]
 801f6f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f6f8:	2f78      	cmp	r7, #120	@ 0x78
 801f6fa:	4691      	mov	r9, r2
 801f6fc:	4680      	mov	r8, r0
 801f6fe:	460c      	mov	r4, r1
 801f700:	469a      	mov	sl, r3
 801f702:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801f706:	d807      	bhi.n	801f718 <_printf_i+0x28>
 801f708:	2f62      	cmp	r7, #98	@ 0x62
 801f70a:	d80a      	bhi.n	801f722 <_printf_i+0x32>
 801f70c:	2f00      	cmp	r7, #0
 801f70e:	f000 80d1 	beq.w	801f8b4 <_printf_i+0x1c4>
 801f712:	2f58      	cmp	r7, #88	@ 0x58
 801f714:	f000 80b8 	beq.w	801f888 <_printf_i+0x198>
 801f718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f71c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801f720:	e03a      	b.n	801f798 <_printf_i+0xa8>
 801f722:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801f726:	2b15      	cmp	r3, #21
 801f728:	d8f6      	bhi.n	801f718 <_printf_i+0x28>
 801f72a:	a101      	add	r1, pc, #4	@ (adr r1, 801f730 <_printf_i+0x40>)
 801f72c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f730:	0801f789 	.word	0x0801f789
 801f734:	0801f79d 	.word	0x0801f79d
 801f738:	0801f719 	.word	0x0801f719
 801f73c:	0801f719 	.word	0x0801f719
 801f740:	0801f719 	.word	0x0801f719
 801f744:	0801f719 	.word	0x0801f719
 801f748:	0801f79d 	.word	0x0801f79d
 801f74c:	0801f719 	.word	0x0801f719
 801f750:	0801f719 	.word	0x0801f719
 801f754:	0801f719 	.word	0x0801f719
 801f758:	0801f719 	.word	0x0801f719
 801f75c:	0801f89b 	.word	0x0801f89b
 801f760:	0801f7c7 	.word	0x0801f7c7
 801f764:	0801f855 	.word	0x0801f855
 801f768:	0801f719 	.word	0x0801f719
 801f76c:	0801f719 	.word	0x0801f719
 801f770:	0801f8bd 	.word	0x0801f8bd
 801f774:	0801f719 	.word	0x0801f719
 801f778:	0801f7c7 	.word	0x0801f7c7
 801f77c:	0801f719 	.word	0x0801f719
 801f780:	0801f719 	.word	0x0801f719
 801f784:	0801f85d 	.word	0x0801f85d
 801f788:	6833      	ldr	r3, [r6, #0]
 801f78a:	1d1a      	adds	r2, r3, #4
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	6032      	str	r2, [r6, #0]
 801f790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f794:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801f798:	2301      	movs	r3, #1
 801f79a:	e09c      	b.n	801f8d6 <_printf_i+0x1e6>
 801f79c:	6833      	ldr	r3, [r6, #0]
 801f79e:	6820      	ldr	r0, [r4, #0]
 801f7a0:	1d19      	adds	r1, r3, #4
 801f7a2:	6031      	str	r1, [r6, #0]
 801f7a4:	0606      	lsls	r6, r0, #24
 801f7a6:	d501      	bpl.n	801f7ac <_printf_i+0xbc>
 801f7a8:	681d      	ldr	r5, [r3, #0]
 801f7aa:	e003      	b.n	801f7b4 <_printf_i+0xc4>
 801f7ac:	0645      	lsls	r5, r0, #25
 801f7ae:	d5fb      	bpl.n	801f7a8 <_printf_i+0xb8>
 801f7b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801f7b4:	2d00      	cmp	r5, #0
 801f7b6:	da03      	bge.n	801f7c0 <_printf_i+0xd0>
 801f7b8:	232d      	movs	r3, #45	@ 0x2d
 801f7ba:	426d      	negs	r5, r5
 801f7bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f7c0:	4858      	ldr	r0, [pc, #352]	@ (801f924 <_printf_i+0x234>)
 801f7c2:	230a      	movs	r3, #10
 801f7c4:	e011      	b.n	801f7ea <_printf_i+0xfa>
 801f7c6:	6821      	ldr	r1, [r4, #0]
 801f7c8:	6833      	ldr	r3, [r6, #0]
 801f7ca:	0608      	lsls	r0, r1, #24
 801f7cc:	f853 5b04 	ldr.w	r5, [r3], #4
 801f7d0:	d402      	bmi.n	801f7d8 <_printf_i+0xe8>
 801f7d2:	0649      	lsls	r1, r1, #25
 801f7d4:	bf48      	it	mi
 801f7d6:	b2ad      	uxthmi	r5, r5
 801f7d8:	2f6f      	cmp	r7, #111	@ 0x6f
 801f7da:	4852      	ldr	r0, [pc, #328]	@ (801f924 <_printf_i+0x234>)
 801f7dc:	6033      	str	r3, [r6, #0]
 801f7de:	bf14      	ite	ne
 801f7e0:	230a      	movne	r3, #10
 801f7e2:	2308      	moveq	r3, #8
 801f7e4:	2100      	movs	r1, #0
 801f7e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801f7ea:	6866      	ldr	r6, [r4, #4]
 801f7ec:	60a6      	str	r6, [r4, #8]
 801f7ee:	2e00      	cmp	r6, #0
 801f7f0:	db05      	blt.n	801f7fe <_printf_i+0x10e>
 801f7f2:	6821      	ldr	r1, [r4, #0]
 801f7f4:	432e      	orrs	r6, r5
 801f7f6:	f021 0104 	bic.w	r1, r1, #4
 801f7fa:	6021      	str	r1, [r4, #0]
 801f7fc:	d04b      	beq.n	801f896 <_printf_i+0x1a6>
 801f7fe:	4616      	mov	r6, r2
 801f800:	fbb5 f1f3 	udiv	r1, r5, r3
 801f804:	fb03 5711 	mls	r7, r3, r1, r5
 801f808:	5dc7      	ldrb	r7, [r0, r7]
 801f80a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f80e:	462f      	mov	r7, r5
 801f810:	42bb      	cmp	r3, r7
 801f812:	460d      	mov	r5, r1
 801f814:	d9f4      	bls.n	801f800 <_printf_i+0x110>
 801f816:	2b08      	cmp	r3, #8
 801f818:	d10b      	bne.n	801f832 <_printf_i+0x142>
 801f81a:	6823      	ldr	r3, [r4, #0]
 801f81c:	07df      	lsls	r7, r3, #31
 801f81e:	d508      	bpl.n	801f832 <_printf_i+0x142>
 801f820:	6923      	ldr	r3, [r4, #16]
 801f822:	6861      	ldr	r1, [r4, #4]
 801f824:	4299      	cmp	r1, r3
 801f826:	bfde      	ittt	le
 801f828:	2330      	movle	r3, #48	@ 0x30
 801f82a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f82e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801f832:	1b92      	subs	r2, r2, r6
 801f834:	6122      	str	r2, [r4, #16]
 801f836:	f8cd a000 	str.w	sl, [sp]
 801f83a:	464b      	mov	r3, r9
 801f83c:	aa03      	add	r2, sp, #12
 801f83e:	4621      	mov	r1, r4
 801f840:	4640      	mov	r0, r8
 801f842:	f7ff fee7 	bl	801f614 <_printf_common>
 801f846:	3001      	adds	r0, #1
 801f848:	d14a      	bne.n	801f8e0 <_printf_i+0x1f0>
 801f84a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f84e:	b004      	add	sp, #16
 801f850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f854:	6823      	ldr	r3, [r4, #0]
 801f856:	f043 0320 	orr.w	r3, r3, #32
 801f85a:	6023      	str	r3, [r4, #0]
 801f85c:	4832      	ldr	r0, [pc, #200]	@ (801f928 <_printf_i+0x238>)
 801f85e:	2778      	movs	r7, #120	@ 0x78
 801f860:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801f864:	6823      	ldr	r3, [r4, #0]
 801f866:	6831      	ldr	r1, [r6, #0]
 801f868:	061f      	lsls	r7, r3, #24
 801f86a:	f851 5b04 	ldr.w	r5, [r1], #4
 801f86e:	d402      	bmi.n	801f876 <_printf_i+0x186>
 801f870:	065f      	lsls	r7, r3, #25
 801f872:	bf48      	it	mi
 801f874:	b2ad      	uxthmi	r5, r5
 801f876:	6031      	str	r1, [r6, #0]
 801f878:	07d9      	lsls	r1, r3, #31
 801f87a:	bf44      	itt	mi
 801f87c:	f043 0320 	orrmi.w	r3, r3, #32
 801f880:	6023      	strmi	r3, [r4, #0]
 801f882:	b11d      	cbz	r5, 801f88c <_printf_i+0x19c>
 801f884:	2310      	movs	r3, #16
 801f886:	e7ad      	b.n	801f7e4 <_printf_i+0xf4>
 801f888:	4826      	ldr	r0, [pc, #152]	@ (801f924 <_printf_i+0x234>)
 801f88a:	e7e9      	b.n	801f860 <_printf_i+0x170>
 801f88c:	6823      	ldr	r3, [r4, #0]
 801f88e:	f023 0320 	bic.w	r3, r3, #32
 801f892:	6023      	str	r3, [r4, #0]
 801f894:	e7f6      	b.n	801f884 <_printf_i+0x194>
 801f896:	4616      	mov	r6, r2
 801f898:	e7bd      	b.n	801f816 <_printf_i+0x126>
 801f89a:	6833      	ldr	r3, [r6, #0]
 801f89c:	6825      	ldr	r5, [r4, #0]
 801f89e:	6961      	ldr	r1, [r4, #20]
 801f8a0:	1d18      	adds	r0, r3, #4
 801f8a2:	6030      	str	r0, [r6, #0]
 801f8a4:	062e      	lsls	r6, r5, #24
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	d501      	bpl.n	801f8ae <_printf_i+0x1be>
 801f8aa:	6019      	str	r1, [r3, #0]
 801f8ac:	e002      	b.n	801f8b4 <_printf_i+0x1c4>
 801f8ae:	0668      	lsls	r0, r5, #25
 801f8b0:	d5fb      	bpl.n	801f8aa <_printf_i+0x1ba>
 801f8b2:	8019      	strh	r1, [r3, #0]
 801f8b4:	2300      	movs	r3, #0
 801f8b6:	6123      	str	r3, [r4, #16]
 801f8b8:	4616      	mov	r6, r2
 801f8ba:	e7bc      	b.n	801f836 <_printf_i+0x146>
 801f8bc:	6833      	ldr	r3, [r6, #0]
 801f8be:	1d1a      	adds	r2, r3, #4
 801f8c0:	6032      	str	r2, [r6, #0]
 801f8c2:	681e      	ldr	r6, [r3, #0]
 801f8c4:	6862      	ldr	r2, [r4, #4]
 801f8c6:	2100      	movs	r1, #0
 801f8c8:	4630      	mov	r0, r6
 801f8ca:	f7e0 fca1 	bl	8000210 <memchr>
 801f8ce:	b108      	cbz	r0, 801f8d4 <_printf_i+0x1e4>
 801f8d0:	1b80      	subs	r0, r0, r6
 801f8d2:	6060      	str	r0, [r4, #4]
 801f8d4:	6863      	ldr	r3, [r4, #4]
 801f8d6:	6123      	str	r3, [r4, #16]
 801f8d8:	2300      	movs	r3, #0
 801f8da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f8de:	e7aa      	b.n	801f836 <_printf_i+0x146>
 801f8e0:	6923      	ldr	r3, [r4, #16]
 801f8e2:	4632      	mov	r2, r6
 801f8e4:	4649      	mov	r1, r9
 801f8e6:	4640      	mov	r0, r8
 801f8e8:	47d0      	blx	sl
 801f8ea:	3001      	adds	r0, #1
 801f8ec:	d0ad      	beq.n	801f84a <_printf_i+0x15a>
 801f8ee:	6823      	ldr	r3, [r4, #0]
 801f8f0:	079b      	lsls	r3, r3, #30
 801f8f2:	d413      	bmi.n	801f91c <_printf_i+0x22c>
 801f8f4:	68e0      	ldr	r0, [r4, #12]
 801f8f6:	9b03      	ldr	r3, [sp, #12]
 801f8f8:	4298      	cmp	r0, r3
 801f8fa:	bfb8      	it	lt
 801f8fc:	4618      	movlt	r0, r3
 801f8fe:	e7a6      	b.n	801f84e <_printf_i+0x15e>
 801f900:	2301      	movs	r3, #1
 801f902:	4632      	mov	r2, r6
 801f904:	4649      	mov	r1, r9
 801f906:	4640      	mov	r0, r8
 801f908:	47d0      	blx	sl
 801f90a:	3001      	adds	r0, #1
 801f90c:	d09d      	beq.n	801f84a <_printf_i+0x15a>
 801f90e:	3501      	adds	r5, #1
 801f910:	68e3      	ldr	r3, [r4, #12]
 801f912:	9903      	ldr	r1, [sp, #12]
 801f914:	1a5b      	subs	r3, r3, r1
 801f916:	42ab      	cmp	r3, r5
 801f918:	dcf2      	bgt.n	801f900 <_printf_i+0x210>
 801f91a:	e7eb      	b.n	801f8f4 <_printf_i+0x204>
 801f91c:	2500      	movs	r5, #0
 801f91e:	f104 0619 	add.w	r6, r4, #25
 801f922:	e7f5      	b.n	801f910 <_printf_i+0x220>
 801f924:	08024402 	.word	0x08024402
 801f928:	08024413 	.word	0x08024413

0801f92c <__sflush_r>:
 801f92c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f934:	0716      	lsls	r6, r2, #28
 801f936:	4605      	mov	r5, r0
 801f938:	460c      	mov	r4, r1
 801f93a:	d454      	bmi.n	801f9e6 <__sflush_r+0xba>
 801f93c:	684b      	ldr	r3, [r1, #4]
 801f93e:	2b00      	cmp	r3, #0
 801f940:	dc02      	bgt.n	801f948 <__sflush_r+0x1c>
 801f942:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f944:	2b00      	cmp	r3, #0
 801f946:	dd48      	ble.n	801f9da <__sflush_r+0xae>
 801f948:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f94a:	2e00      	cmp	r6, #0
 801f94c:	d045      	beq.n	801f9da <__sflush_r+0xae>
 801f94e:	2300      	movs	r3, #0
 801f950:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f954:	682f      	ldr	r7, [r5, #0]
 801f956:	6a21      	ldr	r1, [r4, #32]
 801f958:	602b      	str	r3, [r5, #0]
 801f95a:	d030      	beq.n	801f9be <__sflush_r+0x92>
 801f95c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f95e:	89a3      	ldrh	r3, [r4, #12]
 801f960:	0759      	lsls	r1, r3, #29
 801f962:	d505      	bpl.n	801f970 <__sflush_r+0x44>
 801f964:	6863      	ldr	r3, [r4, #4]
 801f966:	1ad2      	subs	r2, r2, r3
 801f968:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f96a:	b10b      	cbz	r3, 801f970 <__sflush_r+0x44>
 801f96c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f96e:	1ad2      	subs	r2, r2, r3
 801f970:	2300      	movs	r3, #0
 801f972:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f974:	6a21      	ldr	r1, [r4, #32]
 801f976:	4628      	mov	r0, r5
 801f978:	47b0      	blx	r6
 801f97a:	1c43      	adds	r3, r0, #1
 801f97c:	89a3      	ldrh	r3, [r4, #12]
 801f97e:	d106      	bne.n	801f98e <__sflush_r+0x62>
 801f980:	6829      	ldr	r1, [r5, #0]
 801f982:	291d      	cmp	r1, #29
 801f984:	d82b      	bhi.n	801f9de <__sflush_r+0xb2>
 801f986:	4a2a      	ldr	r2, [pc, #168]	@ (801fa30 <__sflush_r+0x104>)
 801f988:	40ca      	lsrs	r2, r1
 801f98a:	07d6      	lsls	r6, r2, #31
 801f98c:	d527      	bpl.n	801f9de <__sflush_r+0xb2>
 801f98e:	2200      	movs	r2, #0
 801f990:	6062      	str	r2, [r4, #4]
 801f992:	04d9      	lsls	r1, r3, #19
 801f994:	6922      	ldr	r2, [r4, #16]
 801f996:	6022      	str	r2, [r4, #0]
 801f998:	d504      	bpl.n	801f9a4 <__sflush_r+0x78>
 801f99a:	1c42      	adds	r2, r0, #1
 801f99c:	d101      	bne.n	801f9a2 <__sflush_r+0x76>
 801f99e:	682b      	ldr	r3, [r5, #0]
 801f9a0:	b903      	cbnz	r3, 801f9a4 <__sflush_r+0x78>
 801f9a2:	6560      	str	r0, [r4, #84]	@ 0x54
 801f9a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f9a6:	602f      	str	r7, [r5, #0]
 801f9a8:	b1b9      	cbz	r1, 801f9da <__sflush_r+0xae>
 801f9aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f9ae:	4299      	cmp	r1, r3
 801f9b0:	d002      	beq.n	801f9b8 <__sflush_r+0x8c>
 801f9b2:	4628      	mov	r0, r5
 801f9b4:	f7ff fbec 	bl	801f190 <_free_r>
 801f9b8:	2300      	movs	r3, #0
 801f9ba:	6363      	str	r3, [r4, #52]	@ 0x34
 801f9bc:	e00d      	b.n	801f9da <__sflush_r+0xae>
 801f9be:	2301      	movs	r3, #1
 801f9c0:	4628      	mov	r0, r5
 801f9c2:	47b0      	blx	r6
 801f9c4:	4602      	mov	r2, r0
 801f9c6:	1c50      	adds	r0, r2, #1
 801f9c8:	d1c9      	bne.n	801f95e <__sflush_r+0x32>
 801f9ca:	682b      	ldr	r3, [r5, #0]
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	d0c6      	beq.n	801f95e <__sflush_r+0x32>
 801f9d0:	2b1d      	cmp	r3, #29
 801f9d2:	d001      	beq.n	801f9d8 <__sflush_r+0xac>
 801f9d4:	2b16      	cmp	r3, #22
 801f9d6:	d11e      	bne.n	801fa16 <__sflush_r+0xea>
 801f9d8:	602f      	str	r7, [r5, #0]
 801f9da:	2000      	movs	r0, #0
 801f9dc:	e022      	b.n	801fa24 <__sflush_r+0xf8>
 801f9de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f9e2:	b21b      	sxth	r3, r3
 801f9e4:	e01b      	b.n	801fa1e <__sflush_r+0xf2>
 801f9e6:	690f      	ldr	r7, [r1, #16]
 801f9e8:	2f00      	cmp	r7, #0
 801f9ea:	d0f6      	beq.n	801f9da <__sflush_r+0xae>
 801f9ec:	0793      	lsls	r3, r2, #30
 801f9ee:	680e      	ldr	r6, [r1, #0]
 801f9f0:	bf08      	it	eq
 801f9f2:	694b      	ldreq	r3, [r1, #20]
 801f9f4:	600f      	str	r7, [r1, #0]
 801f9f6:	bf18      	it	ne
 801f9f8:	2300      	movne	r3, #0
 801f9fa:	eba6 0807 	sub.w	r8, r6, r7
 801f9fe:	608b      	str	r3, [r1, #8]
 801fa00:	f1b8 0f00 	cmp.w	r8, #0
 801fa04:	dde9      	ble.n	801f9da <__sflush_r+0xae>
 801fa06:	6a21      	ldr	r1, [r4, #32]
 801fa08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801fa0a:	4643      	mov	r3, r8
 801fa0c:	463a      	mov	r2, r7
 801fa0e:	4628      	mov	r0, r5
 801fa10:	47b0      	blx	r6
 801fa12:	2800      	cmp	r0, #0
 801fa14:	dc08      	bgt.n	801fa28 <__sflush_r+0xfc>
 801fa16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fa1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fa1e:	81a3      	strh	r3, [r4, #12]
 801fa20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa28:	4407      	add	r7, r0
 801fa2a:	eba8 0800 	sub.w	r8, r8, r0
 801fa2e:	e7e7      	b.n	801fa00 <__sflush_r+0xd4>
 801fa30:	20400001 	.word	0x20400001

0801fa34 <_fflush_r>:
 801fa34:	b538      	push	{r3, r4, r5, lr}
 801fa36:	690b      	ldr	r3, [r1, #16]
 801fa38:	4605      	mov	r5, r0
 801fa3a:	460c      	mov	r4, r1
 801fa3c:	b913      	cbnz	r3, 801fa44 <_fflush_r+0x10>
 801fa3e:	2500      	movs	r5, #0
 801fa40:	4628      	mov	r0, r5
 801fa42:	bd38      	pop	{r3, r4, r5, pc}
 801fa44:	b118      	cbz	r0, 801fa4e <_fflush_r+0x1a>
 801fa46:	6a03      	ldr	r3, [r0, #32]
 801fa48:	b90b      	cbnz	r3, 801fa4e <_fflush_r+0x1a>
 801fa4a:	f7ff f969 	bl	801ed20 <__sinit>
 801fa4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	d0f3      	beq.n	801fa3e <_fflush_r+0xa>
 801fa56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801fa58:	07d0      	lsls	r0, r2, #31
 801fa5a:	d404      	bmi.n	801fa66 <_fflush_r+0x32>
 801fa5c:	0599      	lsls	r1, r3, #22
 801fa5e:	d402      	bmi.n	801fa66 <_fflush_r+0x32>
 801fa60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fa62:	f7ff fb66 	bl	801f132 <__retarget_lock_acquire_recursive>
 801fa66:	4628      	mov	r0, r5
 801fa68:	4621      	mov	r1, r4
 801fa6a:	f7ff ff5f 	bl	801f92c <__sflush_r>
 801fa6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fa70:	07da      	lsls	r2, r3, #31
 801fa72:	4605      	mov	r5, r0
 801fa74:	d4e4      	bmi.n	801fa40 <_fflush_r+0xc>
 801fa76:	89a3      	ldrh	r3, [r4, #12]
 801fa78:	059b      	lsls	r3, r3, #22
 801fa7a:	d4e1      	bmi.n	801fa40 <_fflush_r+0xc>
 801fa7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fa7e:	f7ff fb59 	bl	801f134 <__retarget_lock_release_recursive>
 801fa82:	e7dd      	b.n	801fa40 <_fflush_r+0xc>

0801fa84 <fiprintf>:
 801fa84:	b40e      	push	{r1, r2, r3}
 801fa86:	b503      	push	{r0, r1, lr}
 801fa88:	4601      	mov	r1, r0
 801fa8a:	ab03      	add	r3, sp, #12
 801fa8c:	4805      	ldr	r0, [pc, #20]	@ (801faa4 <fiprintf+0x20>)
 801fa8e:	f853 2b04 	ldr.w	r2, [r3], #4
 801fa92:	6800      	ldr	r0, [r0, #0]
 801fa94:	9301      	str	r3, [sp, #4]
 801fa96:	f7ff fca5 	bl	801f3e4 <_vfiprintf_r>
 801fa9a:	b002      	add	sp, #8
 801fa9c:	f85d eb04 	ldr.w	lr, [sp], #4
 801faa0:	b003      	add	sp, #12
 801faa2:	4770      	bx	lr
 801faa4:	20000080 	.word	0x20000080

0801faa8 <__swhatbuf_r>:
 801faa8:	b570      	push	{r4, r5, r6, lr}
 801faaa:	460c      	mov	r4, r1
 801faac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fab0:	2900      	cmp	r1, #0
 801fab2:	b096      	sub	sp, #88	@ 0x58
 801fab4:	4615      	mov	r5, r2
 801fab6:	461e      	mov	r6, r3
 801fab8:	da0d      	bge.n	801fad6 <__swhatbuf_r+0x2e>
 801faba:	89a3      	ldrh	r3, [r4, #12]
 801fabc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801fac0:	f04f 0100 	mov.w	r1, #0
 801fac4:	bf14      	ite	ne
 801fac6:	2340      	movne	r3, #64	@ 0x40
 801fac8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801facc:	2000      	movs	r0, #0
 801face:	6031      	str	r1, [r6, #0]
 801fad0:	602b      	str	r3, [r5, #0]
 801fad2:	b016      	add	sp, #88	@ 0x58
 801fad4:	bd70      	pop	{r4, r5, r6, pc}
 801fad6:	466a      	mov	r2, sp
 801fad8:	f000 f87c 	bl	801fbd4 <_fstat_r>
 801fadc:	2800      	cmp	r0, #0
 801fade:	dbec      	blt.n	801faba <__swhatbuf_r+0x12>
 801fae0:	9901      	ldr	r1, [sp, #4]
 801fae2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801fae6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801faea:	4259      	negs	r1, r3
 801faec:	4159      	adcs	r1, r3
 801faee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801faf2:	e7eb      	b.n	801facc <__swhatbuf_r+0x24>

0801faf4 <__smakebuf_r>:
 801faf4:	898b      	ldrh	r3, [r1, #12]
 801faf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801faf8:	079d      	lsls	r5, r3, #30
 801fafa:	4606      	mov	r6, r0
 801fafc:	460c      	mov	r4, r1
 801fafe:	d507      	bpl.n	801fb10 <__smakebuf_r+0x1c>
 801fb00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801fb04:	6023      	str	r3, [r4, #0]
 801fb06:	6123      	str	r3, [r4, #16]
 801fb08:	2301      	movs	r3, #1
 801fb0a:	6163      	str	r3, [r4, #20]
 801fb0c:	b003      	add	sp, #12
 801fb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb10:	ab01      	add	r3, sp, #4
 801fb12:	466a      	mov	r2, sp
 801fb14:	f7ff ffc8 	bl	801faa8 <__swhatbuf_r>
 801fb18:	9f00      	ldr	r7, [sp, #0]
 801fb1a:	4605      	mov	r5, r0
 801fb1c:	4639      	mov	r1, r7
 801fb1e:	4630      	mov	r0, r6
 801fb20:	f7ff fbaa 	bl	801f278 <_malloc_r>
 801fb24:	b948      	cbnz	r0, 801fb3a <__smakebuf_r+0x46>
 801fb26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb2a:	059a      	lsls	r2, r3, #22
 801fb2c:	d4ee      	bmi.n	801fb0c <__smakebuf_r+0x18>
 801fb2e:	f023 0303 	bic.w	r3, r3, #3
 801fb32:	f043 0302 	orr.w	r3, r3, #2
 801fb36:	81a3      	strh	r3, [r4, #12]
 801fb38:	e7e2      	b.n	801fb00 <__smakebuf_r+0xc>
 801fb3a:	89a3      	ldrh	r3, [r4, #12]
 801fb3c:	6020      	str	r0, [r4, #0]
 801fb3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fb42:	81a3      	strh	r3, [r4, #12]
 801fb44:	9b01      	ldr	r3, [sp, #4]
 801fb46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801fb4a:	b15b      	cbz	r3, 801fb64 <__smakebuf_r+0x70>
 801fb4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fb50:	4630      	mov	r0, r6
 801fb52:	f000 f851 	bl	801fbf8 <_isatty_r>
 801fb56:	b128      	cbz	r0, 801fb64 <__smakebuf_r+0x70>
 801fb58:	89a3      	ldrh	r3, [r4, #12]
 801fb5a:	f023 0303 	bic.w	r3, r3, #3
 801fb5e:	f043 0301 	orr.w	r3, r3, #1
 801fb62:	81a3      	strh	r3, [r4, #12]
 801fb64:	89a3      	ldrh	r3, [r4, #12]
 801fb66:	431d      	orrs	r5, r3
 801fb68:	81a5      	strh	r5, [r4, #12]
 801fb6a:	e7cf      	b.n	801fb0c <__smakebuf_r+0x18>

0801fb6c <_putc_r>:
 801fb6c:	b570      	push	{r4, r5, r6, lr}
 801fb6e:	460d      	mov	r5, r1
 801fb70:	4614      	mov	r4, r2
 801fb72:	4606      	mov	r6, r0
 801fb74:	b118      	cbz	r0, 801fb7e <_putc_r+0x12>
 801fb76:	6a03      	ldr	r3, [r0, #32]
 801fb78:	b90b      	cbnz	r3, 801fb7e <_putc_r+0x12>
 801fb7a:	f7ff f8d1 	bl	801ed20 <__sinit>
 801fb7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fb80:	07d8      	lsls	r0, r3, #31
 801fb82:	d405      	bmi.n	801fb90 <_putc_r+0x24>
 801fb84:	89a3      	ldrh	r3, [r4, #12]
 801fb86:	0599      	lsls	r1, r3, #22
 801fb88:	d402      	bmi.n	801fb90 <_putc_r+0x24>
 801fb8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fb8c:	f7ff fad1 	bl	801f132 <__retarget_lock_acquire_recursive>
 801fb90:	68a3      	ldr	r3, [r4, #8]
 801fb92:	3b01      	subs	r3, #1
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	60a3      	str	r3, [r4, #8]
 801fb98:	da05      	bge.n	801fba6 <_putc_r+0x3a>
 801fb9a:	69a2      	ldr	r2, [r4, #24]
 801fb9c:	4293      	cmp	r3, r2
 801fb9e:	db12      	blt.n	801fbc6 <_putc_r+0x5a>
 801fba0:	b2eb      	uxtb	r3, r5
 801fba2:	2b0a      	cmp	r3, #10
 801fba4:	d00f      	beq.n	801fbc6 <_putc_r+0x5a>
 801fba6:	6823      	ldr	r3, [r4, #0]
 801fba8:	1c5a      	adds	r2, r3, #1
 801fbaa:	6022      	str	r2, [r4, #0]
 801fbac:	701d      	strb	r5, [r3, #0]
 801fbae:	b2ed      	uxtb	r5, r5
 801fbb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fbb2:	07da      	lsls	r2, r3, #31
 801fbb4:	d405      	bmi.n	801fbc2 <_putc_r+0x56>
 801fbb6:	89a3      	ldrh	r3, [r4, #12]
 801fbb8:	059b      	lsls	r3, r3, #22
 801fbba:	d402      	bmi.n	801fbc2 <_putc_r+0x56>
 801fbbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fbbe:	f7ff fab9 	bl	801f134 <__retarget_lock_release_recursive>
 801fbc2:	4628      	mov	r0, r5
 801fbc4:	bd70      	pop	{r4, r5, r6, pc}
 801fbc6:	4629      	mov	r1, r5
 801fbc8:	4622      	mov	r2, r4
 801fbca:	4630      	mov	r0, r6
 801fbcc:	f7ff f999 	bl	801ef02 <__swbuf_r>
 801fbd0:	4605      	mov	r5, r0
 801fbd2:	e7ed      	b.n	801fbb0 <_putc_r+0x44>

0801fbd4 <_fstat_r>:
 801fbd4:	b538      	push	{r3, r4, r5, lr}
 801fbd6:	4d07      	ldr	r5, [pc, #28]	@ (801fbf4 <_fstat_r+0x20>)
 801fbd8:	2300      	movs	r3, #0
 801fbda:	4604      	mov	r4, r0
 801fbdc:	4608      	mov	r0, r1
 801fbde:	4611      	mov	r1, r2
 801fbe0:	602b      	str	r3, [r5, #0]
 801fbe2:	f7e1 ff47 	bl	8001a74 <_fstat>
 801fbe6:	1c43      	adds	r3, r0, #1
 801fbe8:	d102      	bne.n	801fbf0 <_fstat_r+0x1c>
 801fbea:	682b      	ldr	r3, [r5, #0]
 801fbec:	b103      	cbz	r3, 801fbf0 <_fstat_r+0x1c>
 801fbee:	6023      	str	r3, [r4, #0]
 801fbf0:	bd38      	pop	{r3, r4, r5, pc}
 801fbf2:	bf00      	nop
 801fbf4:	20022a48 	.word	0x20022a48

0801fbf8 <_isatty_r>:
 801fbf8:	b538      	push	{r3, r4, r5, lr}
 801fbfa:	4d06      	ldr	r5, [pc, #24]	@ (801fc14 <_isatty_r+0x1c>)
 801fbfc:	2300      	movs	r3, #0
 801fbfe:	4604      	mov	r4, r0
 801fc00:	4608      	mov	r0, r1
 801fc02:	602b      	str	r3, [r5, #0]
 801fc04:	f7e1 ff46 	bl	8001a94 <_isatty>
 801fc08:	1c43      	adds	r3, r0, #1
 801fc0a:	d102      	bne.n	801fc12 <_isatty_r+0x1a>
 801fc0c:	682b      	ldr	r3, [r5, #0]
 801fc0e:	b103      	cbz	r3, 801fc12 <_isatty_r+0x1a>
 801fc10:	6023      	str	r3, [r4, #0]
 801fc12:	bd38      	pop	{r3, r4, r5, pc}
 801fc14:	20022a48 	.word	0x20022a48

0801fc18 <_sbrk_r>:
 801fc18:	b538      	push	{r3, r4, r5, lr}
 801fc1a:	4d06      	ldr	r5, [pc, #24]	@ (801fc34 <_sbrk_r+0x1c>)
 801fc1c:	2300      	movs	r3, #0
 801fc1e:	4604      	mov	r4, r0
 801fc20:	4608      	mov	r0, r1
 801fc22:	602b      	str	r3, [r5, #0]
 801fc24:	f7e1 ff4e 	bl	8001ac4 <_sbrk>
 801fc28:	1c43      	adds	r3, r0, #1
 801fc2a:	d102      	bne.n	801fc32 <_sbrk_r+0x1a>
 801fc2c:	682b      	ldr	r3, [r5, #0]
 801fc2e:	b103      	cbz	r3, 801fc32 <_sbrk_r+0x1a>
 801fc30:	6023      	str	r3, [r4, #0]
 801fc32:	bd38      	pop	{r3, r4, r5, pc}
 801fc34:	20022a48 	.word	0x20022a48

0801fc38 <abort>:
 801fc38:	b508      	push	{r3, lr}
 801fc3a:	2006      	movs	r0, #6
 801fc3c:	f000 f82c 	bl	801fc98 <raise>
 801fc40:	2001      	movs	r0, #1
 801fc42:	f7e1 fee3 	bl	8001a0c <_exit>

0801fc46 <_raise_r>:
 801fc46:	291f      	cmp	r1, #31
 801fc48:	b538      	push	{r3, r4, r5, lr}
 801fc4a:	4605      	mov	r5, r0
 801fc4c:	460c      	mov	r4, r1
 801fc4e:	d904      	bls.n	801fc5a <_raise_r+0x14>
 801fc50:	2316      	movs	r3, #22
 801fc52:	6003      	str	r3, [r0, #0]
 801fc54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fc58:	bd38      	pop	{r3, r4, r5, pc}
 801fc5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801fc5c:	b112      	cbz	r2, 801fc64 <_raise_r+0x1e>
 801fc5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fc62:	b94b      	cbnz	r3, 801fc78 <_raise_r+0x32>
 801fc64:	4628      	mov	r0, r5
 801fc66:	f000 f831 	bl	801fccc <_getpid_r>
 801fc6a:	4622      	mov	r2, r4
 801fc6c:	4601      	mov	r1, r0
 801fc6e:	4628      	mov	r0, r5
 801fc70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc74:	f000 b818 	b.w	801fca8 <_kill_r>
 801fc78:	2b01      	cmp	r3, #1
 801fc7a:	d00a      	beq.n	801fc92 <_raise_r+0x4c>
 801fc7c:	1c59      	adds	r1, r3, #1
 801fc7e:	d103      	bne.n	801fc88 <_raise_r+0x42>
 801fc80:	2316      	movs	r3, #22
 801fc82:	6003      	str	r3, [r0, #0]
 801fc84:	2001      	movs	r0, #1
 801fc86:	e7e7      	b.n	801fc58 <_raise_r+0x12>
 801fc88:	2100      	movs	r1, #0
 801fc8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801fc8e:	4620      	mov	r0, r4
 801fc90:	4798      	blx	r3
 801fc92:	2000      	movs	r0, #0
 801fc94:	e7e0      	b.n	801fc58 <_raise_r+0x12>
	...

0801fc98 <raise>:
 801fc98:	4b02      	ldr	r3, [pc, #8]	@ (801fca4 <raise+0xc>)
 801fc9a:	4601      	mov	r1, r0
 801fc9c:	6818      	ldr	r0, [r3, #0]
 801fc9e:	f7ff bfd2 	b.w	801fc46 <_raise_r>
 801fca2:	bf00      	nop
 801fca4:	20000080 	.word	0x20000080

0801fca8 <_kill_r>:
 801fca8:	b538      	push	{r3, r4, r5, lr}
 801fcaa:	4d07      	ldr	r5, [pc, #28]	@ (801fcc8 <_kill_r+0x20>)
 801fcac:	2300      	movs	r3, #0
 801fcae:	4604      	mov	r4, r0
 801fcb0:	4608      	mov	r0, r1
 801fcb2:	4611      	mov	r1, r2
 801fcb4:	602b      	str	r3, [r5, #0]
 801fcb6:	f7e1 fe97 	bl	80019e8 <_kill>
 801fcba:	1c43      	adds	r3, r0, #1
 801fcbc:	d102      	bne.n	801fcc4 <_kill_r+0x1c>
 801fcbe:	682b      	ldr	r3, [r5, #0]
 801fcc0:	b103      	cbz	r3, 801fcc4 <_kill_r+0x1c>
 801fcc2:	6023      	str	r3, [r4, #0]
 801fcc4:	bd38      	pop	{r3, r4, r5, pc}
 801fcc6:	bf00      	nop
 801fcc8:	20022a48 	.word	0x20022a48

0801fccc <_getpid_r>:
 801fccc:	f7e1 be84 	b.w	80019d8 <_getpid>

0801fcd0 <_init>:
 801fcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcd2:	bf00      	nop
 801fcd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcd6:	bc08      	pop	{r3}
 801fcd8:	469e      	mov	lr, r3
 801fcda:	4770      	bx	lr

0801fcdc <_fini>:
 801fcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcde:	bf00      	nop
 801fce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fce2:	bc08      	pop	{r3}
 801fce4:	469e      	mov	lr, r3
 801fce6:	4770      	bx	lr
