
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021688  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cb8  08021858  08021858  00022858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026510  08026510  00028210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08026510  08026510  00027510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026518  08026518  00028210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026518  08026518  00027518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802651c  0802651c  0002751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08026520  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  080265f0  000280d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  08026690  00028170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00022d90  20000210  08026730  00028210  2**2
                  ALLOC
 12 ._user_heap_stack 00005000  20022fa0  08026730  00028fa0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00028210  2**0
                  CONTENTS, READONLY
 14 .debug_info   000445e6  00000000  00000000  00028240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000af20  00000000  00000000  0006c826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000030f0  00000000  00000000  00077748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002668  00000000  00000000  0007a838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f536  00000000  00000000  0007cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004fb8f  00000000  00000000  000bc3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123597  00000000  00000000  0010bf65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022f4fc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cfc0  00000000  00000000  0022f540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0023c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08021840 	.word	0x08021840

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08021840 	.word	0x08021840

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 ff09 	bl	8002454 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fe18 	bl	800127c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f002 f8a9 	bl	80027b4 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fe08 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fcc1 	bl	800506c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fe03 	bl	8003338 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fda0 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000274 	.word	0x20000274
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fbc9 	bl	8002f24 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd70 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d4 	.word	0x200002d4
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 fb54 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 fb6d 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 fb4c 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 fb65 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 fb44 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 fb5d 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 fb3c 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 fb55 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 fb34 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 fb4d 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 fb2c 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 fb45 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 fb24 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 fb3d 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 fb1c 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 fb35 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 fb14 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 fb2d 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 fb0c 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 fb25 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 fb04 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 fb1d 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 fafc 	bl	8002ed0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 fb15 	bl	8002f08 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f01f ffff 	bl	80208fc <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08021944 	.word	0x08021944

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  printf("Starting FreeRTOS...\n");
 8000920:	484c      	ldr	r0, [pc, #304]	@ (8000a54 <MX_FREERTOS_Init+0x138>)
 8000922:	f020 f85b 	bl	80209dc <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000926:	4a4c      	ldr	r2, [pc, #304]	@ (8000a58 <MX_FREERTOS_Init+0x13c>)
 8000928:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800092c:	2010      	movs	r0, #16
 800092e:	f00c fdfd 	bl	800d52c <osMessageQueueNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a49      	ldr	r2, [pc, #292]	@ (8000a5c <MX_FREERTOS_Init+0x140>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000938:	4a49      	ldr	r2, [pc, #292]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 800093a:	2110      	movs	r1, #16
 800093c:	2010      	movs	r0, #16
 800093e:	f00c fdf5 	bl	800d52c <osMessageQueueNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a47      	ldr	r2, [pc, #284]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000948:	4a47      	ldr	r2, [pc, #284]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 800094a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800094e:	2008      	movs	r0, #8
 8000950:	f00c fdec 	bl	800d52c <osMessageQueueNew>
 8000954:	4603      	mov	r3, r0
 8000956:	4a45      	ldr	r2, [pc, #276]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 8000958:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 800095a:	4a45      	ldr	r2, [pc, #276]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 800095c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000960:	2008      	movs	r0, #8
 8000962:	f00c fde3 	bl	800d52c <osMessageQueueNew>
 8000966:	4603      	mov	r3, r0
 8000968:	4a42      	ldr	r2, [pc, #264]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 800096a:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 800096c:	4a42      	ldr	r2, [pc, #264]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 800096e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000972:	2008      	movs	r0, #8
 8000974:	f00c fdda 	bl	800d52c <osMessageQueueNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a40      	ldr	r2, [pc, #256]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 800097c:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 800097e:	4a40      	ldr	r2, [pc, #256]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 8000980:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000984:	2008      	movs	r0, #8
 8000986:	f00c fdd1 	bl	800d52c <osMessageQueueNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 8000990:	4a3d      	ldr	r2, [pc, #244]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 8000992:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000996:	2008      	movs	r0, #8
 8000998:	f00c fdc8 	bl	800d52c <osMessageQueueNew>
 800099c:	4603      	mov	r3, r0
 800099e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 80009a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	483b      	ldr	r0, [pc, #236]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 80009a8:	f00c f8f6 	bl	800cb98 <osThreadNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 80009b0:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009b2:	4a3a      	ldr	r2, [pc, #232]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	483a      	ldr	r0, [pc, #232]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009b8:	f00c f8ee 	bl	800cb98 <osThreadNew>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a39      	ldr	r2, [pc, #228]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009c0:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009c2:	4a39      	ldr	r2, [pc, #228]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4839      	ldr	r0, [pc, #228]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009c8:	f00c f8e6 	bl	800cb98 <osThreadNew>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a38      	ldr	r2, [pc, #224]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009d0:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009d2:	4a38      	ldr	r2, [pc, #224]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4838      	ldr	r0, [pc, #224]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009d8:	f00c f8de 	bl	800cb98 <osThreadNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a37      	ldr	r2, [pc, #220]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009e0:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009e2:	4a37      	ldr	r2, [pc, #220]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4837      	ldr	r0, [pc, #220]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 80009e8:	f00c f8d6 	bl	800cb98 <osThreadNew>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a36      	ldr	r2, [pc, #216]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 80009f0:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009f2:	4a36      	ldr	r2, [pc, #216]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4836      	ldr	r0, [pc, #216]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 80009f8:	f00c f8ce 	bl	800cb98 <osThreadNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a35      	ldr	r2, [pc, #212]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 8000a00:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 8000a02:	4a35      	ldr	r2, [pc, #212]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4835      	ldr	r0, [pc, #212]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 8000a08:	f00c f8c6 	bl	800cb98 <osThreadNew>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a34      	ldr	r2, [pc, #208]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a10:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a12:	4a34      	ldr	r2, [pc, #208]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4834      	ldr	r0, [pc, #208]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a18:	f00c f8be 	bl	800cb98 <osThreadNew>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a33      	ldr	r2, [pc, #204]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a20:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a22:	4a33      	ldr	r2, [pc, #204]	@ (8000af0 <MX_FREERTOS_Init+0x1d4>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4833      	ldr	r0, [pc, #204]	@ (8000af4 <MX_FREERTOS_Init+0x1d8>)
 8000a28:	f00c f8b6 	bl	800cb98 <osThreadNew>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <MX_FREERTOS_Init+0x1dc>)
 8000a30:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a32:	4a32      	ldr	r2, [pc, #200]	@ (8000afc <MX_FREERTOS_Init+0x1e0>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4832      	ldr	r0, [pc, #200]	@ (8000b00 <MX_FREERTOS_Init+0x1e4>)
 8000a38:	f00c f8ae 	bl	800cb98 <osThreadNew>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a31      	ldr	r2, [pc, #196]	@ (8000b04 <MX_FREERTOS_Init+0x1e8>)
 8000a40:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of initDoneEvent */
  initDoneEventHandle = osEventFlagsNew(&initDoneEvent_attributes);
 8000a42:	4831      	ldr	r0, [pc, #196]	@ (8000b08 <MX_FREERTOS_Init+0x1ec>)
 8000a44:	f00c f97c 	bl	800cd40 <osEventFlagsNew>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a30      	ldr	r2, [pc, #192]	@ (8000b0c <MX_FREERTOS_Init+0x1f0>)
 8000a4c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08021964 	.word	0x08021964
 8000a58:	080261f0 	.word	0x080261f0
 8000a5c:	20000320 	.word	0x20000320
 8000a60:	08026208 	.word	0x08026208
 8000a64:	20000324 	.word	0x20000324
 8000a68:	08026220 	.word	0x08026220
 8000a6c:	20000328 	.word	0x20000328
 8000a70:	08026238 	.word	0x08026238
 8000a74:	2000032c 	.word	0x2000032c
 8000a78:	08026250 	.word	0x08026250
 8000a7c:	20000330 	.word	0x20000330
 8000a80:	08026268 	.word	0x08026268
 8000a84:	20000334 	.word	0x20000334
 8000a88:	08026280 	.word	0x08026280
 8000a8c:	20000338 	.word	0x20000338
 8000a90:	08026088 	.word	0x08026088
 8000a94:	08000b11 	.word	0x08000b11
 8000a98:	200002f8 	.word	0x200002f8
 8000a9c:	080260ac 	.word	0x080260ac
 8000aa0:	08000b39 	.word	0x08000b39
 8000aa4:	200002fc 	.word	0x200002fc
 8000aa8:	080260d0 	.word	0x080260d0
 8000aac:	08000b81 	.word	0x08000b81
 8000ab0:	20000300 	.word	0x20000300
 8000ab4:	080260f4 	.word	0x080260f4
 8000ab8:	08000b95 	.word	0x08000b95
 8000abc:	20000304 	.word	0x20000304
 8000ac0:	08026118 	.word	0x08026118
 8000ac4:	08000ba9 	.word	0x08000ba9
 8000ac8:	20000308 	.word	0x20000308
 8000acc:	0802613c 	.word	0x0802613c
 8000ad0:	08000bbd 	.word	0x08000bbd
 8000ad4:	2000030c 	.word	0x2000030c
 8000ad8:	08026160 	.word	0x08026160
 8000adc:	08000bd1 	.word	0x08000bd1
 8000ae0:	20000310 	.word	0x20000310
 8000ae4:	08026184 	.word	0x08026184
 8000ae8:	08000be5 	.word	0x08000be5
 8000aec:	20000314 	.word	0x20000314
 8000af0:	080261a8 	.word	0x080261a8
 8000af4:	08000bf9 	.word	0x08000bf9
 8000af8:	20000318 	.word	0x20000318
 8000afc:	080261cc 	.word	0x080261cc
 8000b00:	08000c0d 	.word	0x08000c0d
 8000b04:	2000031c 	.word	0x2000031c
 8000b08:	08026298 	.word	0x08026298
 8000b0c:	2000033c 	.word	0x2000033c

08000b10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b18:	f00b f94c 	bl	800bdb4 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  UDP_Server_Init();
 8000b1c:	f01e ff64 	bl	801f9e8 <UDP_Server_Init>
  osEventFlagsSet(initDoneEventHandle, 0x01);
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <StartDefaultTask+0x24>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2101      	movs	r1, #1
 8000b26:	4618      	mov	r0, r3
 8000b28:	f00c f95c 	bl	800cde4 <osEventFlagsSet>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f00c f8d9 	bl	800cce4 <osDelay>
 8000b32:	e7fb      	b.n	8000b2c <StartDefaultTask+0x1c>
 8000b34:	2000033c 	.word	0x2000033c

08000b38 <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  printf("Listener waiting for network...\n");
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <StartTaskUdpListener+0x38>)
 8000b42:	f01f ff4b 	bl	80209dc <puts>
  osEventFlagsWait(initDoneEventHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <StartTaskUdpListener+0x3c>)
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2101      	movs	r1, #1
 8000b52:	f00c f99d 	bl	800ce90 <osEventFlagsWait>
  printf("Network set...\n");
 8000b56:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <StartTaskUdpListener+0x40>)
 8000b58:	f01f ff40 	bl	80209dc <puts>
  printf("Starting UDP Listener...\n");
 8000b5c:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <StartTaskUdpListener+0x44>)
 8000b5e:	f01f ff3d 	bl	80209dc <puts>
  UDP_Listen(); // loops here
 8000b62:	f01e ff95 	bl	801fa90 <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	0802197c 	.word	0x0802197c
 8000b74:	2000033c 	.word	0x2000033c
 8000b78:	0802199c 	.word	0x0802199c
 8000b7c:	080219ac 	.word	0x080219ac

08000b80 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000b88:	f01e fe28 	bl	801f7dc <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000b9c:	f01f fc80 	bl	80204a0 <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000bb0:	f01f f8aa 	bl	801fd08 <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000bc4:	f01f fa2a 	bl	802001c <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  AdcTestTask(); // loops here
 8000bd8:	f01e fd4c 	bl	801f674 <AdcTestTask>
  /* USER CODE END StartTaskAdcTest */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  TimTestTask(); // loops here
 8000bec:	f01f fb88 	bl	8020300 <TimTestTask>
  /* USER CODE END StartTaskTimTest */
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000c00:	f01f f824 	bl	801fc4c <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	printf("adc Q size: %lu\n", osMessageQueueGetCount(adcQueueHandle));
	printf("timer Q size: %lu\n", osMessageQueueGetCount(timQueueHandle));
	printf("--------------------------------------\n");
    osDelay(10000);
    */
	osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f00c f865 	bl	800cce4 <osDelay>
 8000c1a:	e7fb      	b.n	8000c14 <StartLoggerTask+0x8>

08000c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c22:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a26      	ldr	r2, [pc, #152]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a20      	ldr	r2, [pc, #128]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_GPIO_Init+0xa4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

}
 8000cb2:	bf00      	nop
 8000cb4:	371c      	adds	r7, #28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <MX_I2C1_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d40 <MX_I2C1_Init+0x7c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cda:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfe:	480e      	ldr	r0, [pc, #56]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000d00:	f004 fb60 	bl	80053c4 <HAL_I2C_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d0a:	f000 fab7 	bl	800127c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000d12:	f006 fd03 	bl	800771c <HAL_I2CEx_ConfigAnalogFilter>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d1c:	f000 faae 	bl	800127c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000d24:	f006 fd45 	bl	80077b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d2e:	f000 faa5 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000340 	.word	0x20000340
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	20404768 	.word	0x20404768

08000d44 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dbc <MX_I2C2_Init+0x78>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d50:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc0 <MX_I2C2_Init+0x7c>)
 8000d52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000d54:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d56:	2214      	movs	r2, #20
 8000d58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d7e:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d80:	f004 fb20 	bl	80053c4 <HAL_I2C_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d8a:	f000 fa77 	bl	800127c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d92:	f006 fcc3 	bl	800771c <HAL_I2CEx_ConfigAnalogFilter>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d9c:	f000 fa6e 	bl	800127c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000da4:	f006 fd05 	bl	80077b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dae:	f000 fa65 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000394 	.word	0x20000394
 8000dbc:	40005800 	.word	0x40005800
 8000dc0:	20404768 	.word	0x20404768

08000dc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ac      	sub	sp, #176	@ 0xb0
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ddc:	f107 0318 	add.w	r3, r7, #24
 8000de0:	2284      	movs	r2, #132	@ 0x84
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f01f fee9 	bl	8020bbc <memset>
  if(i2cHandle->Instance==I2C1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a57      	ldr	r2, [pc, #348]	@ (8000f4c <HAL_I2C_MspInit+0x188>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	f040 80b9 	bne.w	8000f68 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000df6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	4618      	mov	r0, r3
 8000e06:	f007 fa2d 	bl	8008264 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000e10:	f000 fa34 	bl	800127c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b4e      	ldr	r3, [pc, #312]	@ (8000f50 <HAL_I2C_MspInit+0x18c>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	4a4d      	ldr	r2, [pc, #308]	@ (8000f50 <HAL_I2C_MspInit+0x18c>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e20:	4b4b      	ldr	r3, [pc, #300]	@ (8000f50 <HAL_I2C_MspInit+0x18c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e34:	2312      	movs	r3, #18
 8000e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e46:	2304      	movs	r3, #4
 8000e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e50:	4619      	mov	r1, r3
 8000e52:	4840      	ldr	r0, [pc, #256]	@ (8000f54 <HAL_I2C_MspInit+0x190>)
 8000e54:	f004 f90a 	bl	800506c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e58:	4b3d      	ldr	r3, [pc, #244]	@ (8000f50 <HAL_I2C_MspInit+0x18c>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f50 <HAL_I2C_MspInit+0x18c>)
 8000e5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e64:	4b3a      	ldr	r3, [pc, #232]	@ (8000f50 <HAL_I2C_MspInit+0x18c>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000e70:	4b39      	ldr	r3, [pc, #228]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000e72:	4a3a      	ldr	r2, [pc, #232]	@ (8000f5c <HAL_I2C_MspInit+0x198>)
 8000e74:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e76:	4b38      	ldr	r3, [pc, #224]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000e78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e7c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7e:	4b36      	ldr	r3, [pc, #216]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e84:	4b34      	ldr	r3, [pc, #208]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8a:	4b33      	ldr	r3, [pc, #204]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000e8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e90:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e92:	4b31      	ldr	r3, [pc, #196]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e98:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000eb0:	4829      	ldr	r0, [pc, #164]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000eb2:	f002 fa41 	bl	8003338 <HAL_DMA_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000ebc:	f000 f9de 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a25      	ldr	r2, [pc, #148]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000ec4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ec6:	4a24      	ldr	r2, [pc, #144]	@ (8000f58 <HAL_I2C_MspInit+0x194>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000ecc:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000ece:	4a25      	ldr	r2, [pc, #148]	@ (8000f64 <HAL_I2C_MspInit+0x1a0>)
 8000ed0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000ed4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ed8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000edc:	2240      	movs	r2, #64	@ 0x40
 8000ede:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000ee8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f00:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f06:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f0c:	4814      	ldr	r0, [pc, #80]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000f0e:	f002 fa13 	bl	8003338 <HAL_DMA_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000f18:	f000 f9b0 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000f20:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <HAL_I2C_MspInit+0x19c>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2105      	movs	r1, #5
 8000f2c:	201f      	movs	r0, #31
 8000f2e:	f001 ffcf 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f32:	201f      	movs	r0, #31
 8000f34:	f001 ffe8 	bl	8002f08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2105      	movs	r1, #5
 8000f3c:	2020      	movs	r0, #32
 8000f3e:	f001 ffc7 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f42:	2020      	movs	r0, #32
 8000f44:	f001 ffe0 	bl	8002f08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f48:	e0be      	b.n	80010c8 <HAL_I2C_MspInit+0x304>
 8000f4a:	bf00      	nop
 8000f4c:	40005400 	.word	0x40005400
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020400 	.word	0x40020400
 8000f58:	200003e8 	.word	0x200003e8
 8000f5c:	40026088 	.word	0x40026088
 8000f60:	20000448 	.word	0x20000448
 8000f64:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a58      	ldr	r2, [pc, #352]	@ (80010d0 <HAL_I2C_MspInit+0x30c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	f040 80aa 	bne.w	80010c8 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f007 f96d 	bl	8008264 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000f90:	f000 f974 	bl	800127c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b4f      	ldr	r3, [pc, #316]	@ (80010d4 <HAL_I2C_MspInit+0x310>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f98:	4a4e      	ldr	r2, [pc, #312]	@ (80010d4 <HAL_I2C_MspInit+0x310>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80010d4 <HAL_I2C_MspInit+0x310>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb4:	2312      	movs	r3, #18
 8000fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4841      	ldr	r0, [pc, #260]	@ (80010d8 <HAL_I2C_MspInit+0x314>)
 8000fd4:	f004 f84a 	bl	800506c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80010d4 <HAL_I2C_MspInit+0x310>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	4a3d      	ldr	r2, [pc, #244]	@ (80010d4 <HAL_I2C_MspInit+0x310>)
 8000fde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <HAL_I2C_MspInit+0x310>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 8000ff2:	4a3b      	ldr	r2, [pc, #236]	@ (80010e0 <HAL_I2C_MspInit+0x31c>)
 8000ff4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000ff6:	4b39      	ldr	r3, [pc, #228]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 8000ff8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000ffc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffe:	4b37      	ldr	r3, [pc, #220]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001004:	4b35      	ldr	r3, [pc, #212]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800100a:	4b34      	ldr	r3, [pc, #208]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 800100c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001010:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001012:	4b32      	ldr	r3, [pc, #200]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001018:	4b30      	ldr	r3, [pc, #192]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800101e:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102a:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001030:	482a      	ldr	r0, [pc, #168]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 8001032:	f002 f981 	bl	8003338 <HAL_DMA_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 800103c:	f000 f91e 	bl	800127c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a26      	ldr	r2, [pc, #152]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 8001044:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001046:	4a25      	ldr	r2, [pc, #148]	@ (80010dc <HAL_I2C_MspInit+0x318>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 800104e:	4a26      	ldr	r2, [pc, #152]	@ (80010e8 <HAL_I2C_MspInit+0x324>)
 8001050:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001052:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 8001054:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001058:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800105a:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 800105c:	2240      	movs	r2, #64	@ 0x40
 800105e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001060:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 8001068:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800106c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106e:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001074:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 8001082:	2200      	movs	r2, #0
 8001084:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800108c:	4815      	ldr	r0, [pc, #84]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 800108e:	f002 f953 	bl	8003338 <HAL_DMA_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001098:	f000 f8f0 	bl	800127c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 80010a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80010a2:	4a10      	ldr	r2, [pc, #64]	@ (80010e4 <HAL_I2C_MspInit+0x320>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2105      	movs	r1, #5
 80010ac:	2021      	movs	r0, #33	@ 0x21
 80010ae:	f001 ff0f 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80010b2:	2021      	movs	r0, #33	@ 0x21
 80010b4:	f001 ff28 	bl	8002f08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2105      	movs	r1, #5
 80010bc:	2022      	movs	r0, #34	@ 0x22
 80010be:	f001 ff07 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80010c2:	2022      	movs	r0, #34	@ 0x22
 80010c4:	f001 ff20 	bl	8002f08 <HAL_NVIC_EnableIRQ>
}
 80010c8:	bf00      	nop
 80010ca:	37b0      	adds	r7, #176	@ 0xb0
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40005800 	.word	0x40005800
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020400 	.word	0x40020400
 80010dc:	200004a8 	.word	0x200004a8
 80010e0:	40026058 	.word	0x40026058
 80010e4:	20000508 	.word	0x20000508
 80010e8:	400260b8 	.word	0x400260b8

080010ec <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <_write+0x3c>)
 80010fa:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <_write+0x40>)
 8001108:	f009 fb00 	bl	800a70c <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 800110c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001110:	2201      	movs	r2, #1
 8001112:	6979      	ldr	r1, [r7, #20]
 8001114:	4805      	ldr	r0, [pc, #20]	@ (800112c <_write+0x40>)
 8001116:	f009 faf9 	bl	800a70c <HAL_UART_Transmit>
	return len + 1;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3301      	adds	r3, #1
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	080219c8 	.word	0x080219c8
 800112c:	20000a08 	.word	0x20000a08

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f001 f93d 	bl	80023b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f822 	bl	8001180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113c:	f7ff fd6e 	bl	8000c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001140:	f7ff fb52 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001144:	f000 fe4c 	bl	8001de0 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001148:	f7ff fb0c 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 800114c:	f000 fde8 	bl	8001d20 <MX_UART4_Init>
  MX_UART5_Init();
 8001150:	f000 fe16 	bl	8001d80 <MX_UART5_Init>
  MX_I2C1_Init();
 8001154:	f7ff fdb6 	bl	8000cc4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001158:	f7ff fdf4 	bl	8000d44 <MX_I2C2_Init>
  MX_SPI1_Init();
 800115c:	f000 f894 	bl	8001288 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001160:	f000 f8d0 	bl	8001304 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001164:	f7ff fa3a 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001168:	f000 fd38 	bl	8001bdc <MX_TIM6_Init>
  MX_TIM2_Init();
 800116c:	f000 fce8 	bl	8001b40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001170:	f00b fc80 	bl	800ca74 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001174:	f7ff fbd2 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001178:	f00b fcb0 	bl	800cadc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <main+0x4c>

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	@ 0x50
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	2230      	movs	r2, #48	@ 0x30
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f01f fd14 	bl	8020bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <SystemClock_Config+0xd0>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	4a29      	ldr	r2, [pc, #164]	@ (8001250 <SystemClock_Config+0xd0>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <SystemClock_Config+0xd0>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	4b25      	ldr	r3, [pc, #148]	@ (8001254 <SystemClock_Config+0xd4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a24      	ldr	r2, [pc, #144]	@ (8001254 <SystemClock_Config+0xd4>)
 80011c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <SystemClock_Config+0xd4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011e8:	2308      	movs	r3, #8
 80011ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011ec:	23d8      	movs	r3, #216	@ 0xd8
 80011ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f006 fb75 	bl	80078ec <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001208:	f000 f838 	bl	800127c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800120c:	f006 fb1e 	bl	800784c <HAL_PWREx_EnableOverDrive>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001216:	f000 f831 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121a:	230f      	movs	r3, #15
 800121c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121e:	2302      	movs	r3, #2
 8001220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001226:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800122a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800122c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001230:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2107      	movs	r1, #7
 8001238:	4618      	mov	r0, r3
 800123a:	f006 fdfb 	bl	8007e34 <HAL_RCC_ClockConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001244:	f000 f81a 	bl	800127c <Error_Handler>
  }
}
 8001248:	bf00      	nop
 800124a:	3750      	adds	r7, #80	@ 0x50
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	40007000 	.word	0x40007000

08001258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800126a:	f001 f8af 	bl	80023cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40001400 	.word	0x40001400

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <Error_Handler+0x8>

08001288 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_SPI1_Init+0x74>)
 800128e:	4a1c      	ldr	r2, [pc, #112]	@ (8001300 <MX_SPI1_Init+0x78>)
 8001290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_SPI1_Init+0x74>)
 8001294:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_SPI1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a0:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012b6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012be:	2218      	movs	r2, #24
 80012c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012d4:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012d6:	2207      	movs	r2, #7
 80012d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012da:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012e2:	2208      	movs	r2, #8
 80012e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012e8:	f007 fbac 	bl	8008a44 <HAL_SPI_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f7ff ffc3 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000568 	.word	0x20000568
 8001300:	40013000 	.word	0x40013000

08001304 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_SPI4_Init+0x68>)
 800130a:	4a19      	ldr	r2, [pc, #100]	@ (8001370 <MX_SPI4_Init+0x6c>)
 800130c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_SPI4_Init+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_SPI4_Init+0x68>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <MX_SPI4_Init+0x68>)
 800131c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001320:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_SPI4_Init+0x68>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <MX_SPI4_Init+0x68>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_SPI4_Init+0x68>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <MX_SPI4_Init+0x68>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_SPI4_Init+0x68>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <MX_SPI4_Init+0x68>)
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_SPI4_Init+0x68>)
 8001348:	2207      	movs	r2, #7
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800134c:	4b07      	ldr	r3, [pc, #28]	@ (800136c <MX_SPI4_Init+0x68>)
 800134e:	2200      	movs	r2, #0
 8001350:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_SPI4_Init+0x68>)
 8001354:	2200      	movs	r2, #0
 8001356:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	@ (800136c <MX_SPI4_Init+0x68>)
 800135a:	f007 fb73 	bl	8008a44 <HAL_SPI_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8001364:	f7ff ff8a 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200005cc 	.word	0x200005cc
 8001370:	40013400 	.word	0x40013400

08001374 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	@ 0x30
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4aa1      	ldr	r2, [pc, #644]	@ (8001618 <HAL_SPI_MspInit+0x2a4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	f040 80a9 	bne.w	80014ea <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001398:	4ba0      	ldr	r3, [pc, #640]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 800139a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139c:	4a9f      	ldr	r2, [pc, #636]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 800139e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a4:	4b9d      	ldr	r3, [pc, #628]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 80013a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b9a      	ldr	r3, [pc, #616]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b4:	4a99      	ldr	r2, [pc, #612]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80013bc:	4b97      	ldr	r3, [pc, #604]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	4b94      	ldr	r3, [pc, #592]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013cc:	4a93      	ldr	r2, [pc, #588]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d4:	4b91      	ldr	r3, [pc, #580]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013e0:	2370      	movs	r3, #112	@ 0x70
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f0:	2305      	movs	r3, #5
 80013f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	4889      	ldr	r0, [pc, #548]	@ (8001620 <HAL_SPI_MspInit+0x2ac>)
 80013fc:	f003 fe36 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001400:	2320      	movs	r3, #32
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001410:	2305      	movs	r3, #5
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4882      	ldr	r0, [pc, #520]	@ (8001624 <HAL_SPI_MspInit+0x2b0>)
 800141c:	f003 fe26 	bl	800506c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8001420:	4b81      	ldr	r3, [pc, #516]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 8001422:	4a82      	ldr	r2, [pc, #520]	@ (800162c <HAL_SPI_MspInit+0x2b8>)
 8001424:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001426:	4b80      	ldr	r3, [pc, #512]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 8001428:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800142c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142e:	4b7e      	ldr	r3, [pc, #504]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001434:	4b7c      	ldr	r3, [pc, #496]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800143a:	4b7b      	ldr	r3, [pc, #492]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 800143c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001440:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001442:	4b79      	ldr	r3, [pc, #484]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001448:	4b77      	ldr	r3, [pc, #476]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800144e:	4b76      	ldr	r3, [pc, #472]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001454:	4b74      	ldr	r3, [pc, #464]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800145a:	4b73      	ldr	r3, [pc, #460]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001460:	4871      	ldr	r0, [pc, #452]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 8001462:	f001 ff69 	bl	8003338 <HAL_DMA_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 800146c:	f7ff ff06 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a6d      	ldr	r2, [pc, #436]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 8001474:	659a      	str	r2, [r3, #88]	@ 0x58
 8001476:	4a6c      	ldr	r2, [pc, #432]	@ (8001628 <HAL_SPI_MspInit+0x2b4>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800147c:	4b6c      	ldr	r3, [pc, #432]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 800147e:	4a6d      	ldr	r2, [pc, #436]	@ (8001634 <HAL_SPI_MspInit+0x2c0>)
 8001480:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001482:	4b6b      	ldr	r3, [pc, #428]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 8001484:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001488:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800148a:	4b69      	ldr	r3, [pc, #420]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 800148c:	2240      	movs	r2, #64	@ 0x40
 800148e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001490:	4b67      	ldr	r3, [pc, #412]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001496:	4b66      	ldr	r3, [pc, #408]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 8001498:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800149c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149e:	4b64      	ldr	r3, [pc, #400]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a4:	4b62      	ldr	r3, [pc, #392]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014aa:	4b61      	ldr	r3, [pc, #388]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b6:	4b5e      	ldr	r3, [pc, #376]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014bc:	485c      	ldr	r0, [pc, #368]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 80014be:	f001 ff3b 	bl	8003338 <HAL_DMA_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80014c8:	f7ff fed8 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a58      	ldr	r2, [pc, #352]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 80014d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80014d2:	4a57      	ldr	r2, [pc, #348]	@ (8001630 <HAL_SPI_MspInit+0x2bc>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	2105      	movs	r1, #5
 80014dc:	2023      	movs	r0, #35	@ 0x23
 80014de:	f001 fcf7 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014e2:	2023      	movs	r0, #35	@ 0x23
 80014e4:	f001 fd10 	bl	8002f08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80014e8:	e091      	b.n	800160e <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a52      	ldr	r2, [pc, #328]	@ (8001638 <HAL_SPI_MspInit+0x2c4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	f040 808c 	bne.w	800160e <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014f6:	4b49      	ldr	r3, [pc, #292]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	4a48      	ldr	r2, [pc, #288]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 80014fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001500:	6453      	str	r3, [r2, #68]	@ 0x44
 8001502:	4b46      	ldr	r3, [pc, #280]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800150e:	4b43      	ldr	r3, [pc, #268]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a42      	ldr	r2, [pc, #264]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 8001514:	f043 0310 	orr.w	r3, r3, #16
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b40      	ldr	r3, [pc, #256]	@ (800161c <HAL_SPI_MspInit+0x2a8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001526:	2374      	movs	r3, #116	@ 0x74
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001536:	2305      	movs	r3, #5
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	483e      	ldr	r0, [pc, #248]	@ (800163c <HAL_SPI_MspInit+0x2c8>)
 8001542:	f003 fd93 	bl	800506c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001546:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 8001548:	4a3e      	ldr	r2, [pc, #248]	@ (8001644 <HAL_SPI_MspInit+0x2d0>)
 800154a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 800154c:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 800154e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001552:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001554:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155a:	4b39      	ldr	r3, [pc, #228]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001560:	4b37      	ldr	r3, [pc, #220]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 8001562:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001566:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001568:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156e:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001574:	4b32      	ldr	r3, [pc, #200]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800157a:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001580:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001586:	482e      	ldr	r0, [pc, #184]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 8001588:	f001 fed6 	bl	8003338 <HAL_DMA_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8001592:	f7ff fe73 	bl	800127c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a29      	ldr	r2, [pc, #164]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 800159a:	659a      	str	r2, [r3, #88]	@ 0x58
 800159c:	4a28      	ldr	r2, [pc, #160]	@ (8001640 <HAL_SPI_MspInit+0x2cc>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80015a2:	4b29      	ldr	r3, [pc, #164]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015a4:	4a29      	ldr	r2, [pc, #164]	@ (800164c <HAL_SPI_MspInit+0x2d8>)
 80015a6:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80015a8:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015ae:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b0:	4b25      	ldr	r3, [pc, #148]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015b2:	2240      	movs	r2, #64	@ 0x40
 80015b4:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b6:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015bc:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015c2:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80015e2:	4819      	ldr	r0, [pc, #100]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015e4:	f001 fea8 	bl	8003338 <HAL_DMA_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80015ee:	f7ff fe45 	bl	800127c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80015f8:	4a13      	ldr	r2, [pc, #76]	@ (8001648 <HAL_SPI_MspInit+0x2d4>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	2054      	movs	r0, #84	@ 0x54
 8001604:	f001 fc64 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001608:	2054      	movs	r0, #84	@ 0x54
 800160a:	f001 fc7d 	bl	8002f08 <HAL_NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	@ 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40013000 	.word	0x40013000
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	20000630 	.word	0x20000630
 800162c:	40026440 	.word	0x40026440
 8001630:	20000690 	.word	0x20000690
 8001634:	40026458 	.word	0x40026458
 8001638:	40013400 	.word	0x40013400
 800163c:	40021000 	.word	0x40021000
 8001640:	200006f0 	.word	0x200006f0
 8001644:	40026410 	.word	0x40026410
 8001648:	20000750 	.word	0x20000750
 800164c:	40026428 	.word	0x40026428

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	4a10      	ldr	r2, [pc, #64]	@ (800169c <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	@ 0x40
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <HAL_MspInit+0x4c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <HAL_MspInit+0x4c>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001678:	6453      	str	r3, [r2, #68]	@ 0x44
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_MspInit+0x4c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	210f      	movs	r1, #15
 800168a:	f06f 0001 	mvn.w	r0, #1
 800168e:	f001 fc1f 	bl	8002ed0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	@ 0x38
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80016b0:	4b33      	ldr	r3, [pc, #204]	@ (8001780 <HAL_InitTick+0xe0>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	4a32      	ldr	r2, [pc, #200]	@ (8001780 <HAL_InitTick+0xe0>)
 80016b6:	f043 0320 	orr.w	r3, r3, #32
 80016ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80016bc:	4b30      	ldr	r3, [pc, #192]	@ (8001780 <HAL_InitTick+0xe0>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c8:	f107 0210 	add.w	r2, r7, #16
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f006 fd94 	bl	8008200 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d103      	bne.n	80016ea <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016e2:	f006 fd65 	bl	80081b0 <HAL_RCC_GetPCLK1Freq>
 80016e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80016e8:	e004      	b.n	80016f4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016ea:	f006 fd61 	bl	80081b0 <HAL_RCC_GetPCLK1Freq>
 80016ee:	4603      	mov	r3, r0
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016f6:	4a23      	ldr	r2, [pc, #140]	@ (8001784 <HAL_InitTick+0xe4>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	0c9b      	lsrs	r3, r3, #18
 80016fe:	3b01      	subs	r3, #1
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001702:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <HAL_InitTick+0xe8>)
 8001704:	4a21      	ldr	r2, [pc, #132]	@ (800178c <HAL_InitTick+0xec>)
 8001706:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001708:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <HAL_InitTick+0xe8>)
 800170a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800170e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001710:	4a1d      	ldr	r2, [pc, #116]	@ (8001788 <HAL_InitTick+0xe8>)
 8001712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001714:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001716:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <HAL_InitTick+0xe8>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <HAL_InitTick+0xe8>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_InitTick+0xe8>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001728:	4817      	ldr	r0, [pc, #92]	@ (8001788 <HAL_InitTick+0xe8>)
 800172a:	f008 fa53 	bl	8009bd4 <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001734:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001738:	2b00      	cmp	r3, #0
 800173a:	d11b      	bne.n	8001774 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800173c:	4812      	ldr	r0, [pc, #72]	@ (8001788 <HAL_InitTick+0xe8>)
 800173e:	f008 fb39 	bl	8009db4 <HAL_TIM_Base_Start_IT>
 8001742:	4603      	mov	r3, r0
 8001744:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001748:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800174c:	2b00      	cmp	r3, #0
 800174e:	d111      	bne.n	8001774 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001750:	2037      	movs	r0, #55	@ 0x37
 8001752:	f001 fbd9 	bl	8002f08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d808      	bhi.n	800176e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	2037      	movs	r0, #55	@ 0x37
 8001762:	f001 fbb5 	bl	8002ed0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <HAL_InitTick+0xf0>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e002      	b.n	8001774 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001774:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001778:	4618      	mov	r0, r3
 800177a:	3738      	adds	r7, #56	@ 0x38
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800
 8001784:	431bde83 	.word	0x431bde83
 8001788:	200007b0 	.word	0x200007b0
 800178c:	40001400 	.word	0x40001400
 8001790:	20000004 	.word	0x20000004

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <DMA1_Stream0_IRQHandler+0x10>)
 80017d2:	f001 ff51 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000af0 	.word	0x20000af0

080017e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <DMA1_Stream1_IRQHandler+0x10>)
 80017e6:	f001 ff47 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000898 	.word	0x20000898

080017f4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <DMA1_Stream2_IRQHandler+0x10>)
 80017fa:	f001 ff3d 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000a90 	.word	0x20000a90

08001808 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <DMA1_Stream3_IRQHandler+0x10>)
 800180e:	f001 ff33 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200004a8 	.word	0x200004a8

0800181c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <DMA1_Stream5_IRQHandler+0x10>)
 8001822:	f001 ff29 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200003e8 	.word	0x200003e8

08001830 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <DMA1_Stream6_IRQHandler+0x10>)
 8001836:	f001 ff1f 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000448 	.word	0x20000448

08001844 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <I2C1_EV_IRQHandler+0x10>)
 800184a:	f004 f9fd 	bl	8005c48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000340 	.word	0x20000340

08001858 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <I2C1_ER_IRQHandler+0x10>)
 800185e:	f004 fa0d 	bl	8005c7c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000340 	.word	0x20000340

0800186c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <I2C2_EV_IRQHandler+0x10>)
 8001872:	f004 f9e9 	bl	8005c48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000394 	.word	0x20000394

08001880 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <I2C2_ER_IRQHandler+0x10>)
 8001886:	f004 f9f9 	bl	8005c7c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000394 	.word	0x20000394

08001894 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <SPI1_IRQHandler+0x10>)
 800189a:	f007 fd13 	bl	80092c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000568 	.word	0x20000568

080018a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <USART3_IRQHandler+0x10>)
 80018ae:	f009 f859 	bl	800a964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000a08 	.word	0x20000a08

080018bc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <DMA1_Stream7_IRQHandler+0x10>)
 80018c2:	f001 fed9 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000508 	.word	0x20000508

080018d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <UART4_IRQHandler+0x10>)
 80018d6:	f009 f845 	bl	800a964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200008f8 	.word	0x200008f8

080018e4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <UART5_IRQHandler+0x10>)
 80018ea:	f009 f83b 	bl	800a964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000980 	.word	0x20000980

080018f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <TIM6_DAC_IRQHandler+0x10>)
 80018fe:	f008 fad1 	bl	8009ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000084c 	.word	0x2000084c

0800190c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <TIM7_IRQHandler+0x10>)
 8001912:	f008 fac7 	bl	8009ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200007b0 	.word	0x200007b0

08001920 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <DMA2_Stream0_IRQHandler+0x10>)
 8001926:	f001 fea7 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200006f0 	.word	0x200006f0

08001934 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <DMA2_Stream1_IRQHandler+0x10>)
 800193a:	f001 fe9d 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000750 	.word	0x20000750

08001948 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <DMA2_Stream2_IRQHandler+0x10>)
 800194e:	f001 fe93 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000630 	.word	0x20000630

0800195c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA2_Stream3_IRQHandler+0x10>)
 8001962:	f001 fe89 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000690 	.word	0x20000690

08001970 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA2_Stream4_IRQHandler+0x10>)
 8001976:	f001 fe7f 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000274 	.word	0x20000274

08001984 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <ETH_IRQHandler+0x10>)
 800198a:	f002 fc87 	bl	800429c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20005558 	.word	0x20005558

08001998 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <ETH_WKUP_IRQHandler+0x10>)
 800199e:	f002 fc7d 	bl	800429c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20005558 	.word	0x20005558

080019ac <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <SPI4_IRQHandler+0x10>)
 80019b2:	f007 fc87 	bl	80092c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200005cc 	.word	0x200005cc

080019c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_kill>:

int _kill(int pid, int sig)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <_kill+0x20>)
 80019dc:	2216      	movs	r2, #22
 80019de:	601a      	str	r2, [r3, #0]
  return -1;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	20022f90 	.word	0x20022f90

080019f4 <_exit>:

void _exit (int status)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ffe5 	bl	80019d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a06:	bf00      	nop
 8001a08:	e7fd      	b.n	8001a06 <_exit+0x12>

08001a0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e00a      	b.n	8001a32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a1c:	f3af 8000 	nop.w
 8001a20:	4601      	mov	r1, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	60ba      	str	r2, [r7, #8]
 8001a28:	b2ca      	uxtb	r2, r1
 8001a2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dbf0      	blt.n	8001a1c <_read+0x12>
  }

  return len;
 8001a3a:	687b      	ldr	r3, [r7, #4]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_isatty>:

int _isatty(int file)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	@ (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d205      	bcs.n	8001ae8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <_sbrk+0x6c>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ae6:	e009      	b.n	8001afc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a06      	ldr	r2, [pc, #24]	@ (8001b10 <_sbrk+0x64>)
 8001af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20050000 	.word	0x20050000
 8001b0c:	00002000 	.word	0x00002000
 8001b10:	200007fc 	.word	0x200007fc
 8001b14:	20022fa0 	.word	0x20022fa0
 8001b18:	20022f90 	.word	0x20022f90

08001b1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b86:	4814      	ldr	r0, [pc, #80]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b88:	f008 f824 	bl	8009bd4 <HAL_TIM_Base_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b92:	f7ff fb73 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001ba4:	f008 fa86 	bl	800a0b4 <HAL_TIM_ConfigClockSource>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bae:	f7ff fb65 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001bc0:	f008 fcaa 	bl	800a518 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bca:	f7ff fb57 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000800 	.word	0x20000800

08001bdc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001bee:	4a15      	ldr	r2, [pc, #84]	@ (8001c44 <MX_TIM6_Init+0x68>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001bf4:	f240 221b 	movw	r2, #539	@ 0x21b
 8001bf8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001c02:	2263      	movs	r2, #99	@ 0x63
 8001c04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c0c:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001c0e:	f007 ffe1 	bl	8009bd4 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c18:	f7ff fb30 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001c2a:	f008 fc75 	bl	800a518 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c34:	f7ff fb22 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000084c 	.word	0x2000084c
 8001c44:	40001000 	.word	0x40001000

08001c48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c58:	d10c      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_TIM_Base_MspInit+0xc8>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001d10 <HAL_TIM_Base_MspInit+0xc8>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c66:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <HAL_TIM_Base_MspInit+0xc8>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c72:	e049      	b.n	8001d08 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a26      	ldr	r2, [pc, #152]	@ (8001d14 <HAL_TIM_Base_MspInit+0xcc>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d144      	bne.n	8001d08 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c7e:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <HAL_TIM_Base_MspInit+0xc8>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a23      	ldr	r2, [pc, #140]	@ (8001d10 <HAL_TIM_Base_MspInit+0xc8>)
 8001c84:	f043 0310 	orr.w	r3, r3, #16
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <HAL_TIM_Base_MspInit+0xc8>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001c96:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001c98:	4a20      	ldr	r2, [pc, #128]	@ (8001d1c <HAL_TIM_Base_MspInit+0xd4>)
 8001c9a:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001c9e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001ca2:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001caa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001cb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cb6:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001cba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cbe:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001cc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cc6:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001cce:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cd4:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001cdc:	480e      	ldr	r0, [pc, #56]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001cde:	f001 fb2b 	bl	8003338 <HAL_DMA_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001ce8:	f7ff fac8 	bl	800127c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001cf0:	621a      	str	r2, [r3, #32]
 8001cf2:	4a09      	ldr	r2, [pc, #36]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd0>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2105      	movs	r1, #5
 8001cfc:	2036      	movs	r0, #54	@ 0x36
 8001cfe:	f001 f8e7 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d02:	2036      	movs	r0, #54	@ 0x36
 8001d04:	f001 f900 	bl	8002f08 <HAL_NVIC_EnableIRQ>
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40001000 	.word	0x40001000
 8001d18:	20000898 	.word	0x20000898
 8001d1c:	40026028 	.word	0x40026028

08001d20 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d26:	4a15      	ldr	r2, [pc, #84]	@ (8001d7c <MX_UART4_Init+0x5c>)
 8001d28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <MX_UART4_Init+0x58>)
 8001d64:	f008 fc84 	bl	800a670 <HAL_UART_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d6e:	f7ff fa85 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200008f8 	.word	0x200008f8
 8001d7c:	40004c00 	.word	0x40004c00

08001d80 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001d86:	4a15      	ldr	r2, [pc, #84]	@ (8001ddc <MX_UART5_Init+0x5c>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d90:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db6:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	@ (8001dd8 <MX_UART5_Init+0x58>)
 8001dc4:	f008 fc54 	bl	800a670 <HAL_UART_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001dce:	f7ff fa55 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000980 	.word	0x20000980
 8001ddc:	40005000 	.word	0x40005000

08001de0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001de4:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001de6:	4a15      	ldr	r2, [pc, #84]	@ (8001e3c <MX_USART3_UART_Init+0x5c>)
 8001de8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dea:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001dec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001df0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001e06:	220c      	movs	r2, #12
 8001e08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e10:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e22:	4805      	ldr	r0, [pc, #20]	@ (8001e38 <MX_USART3_UART_Init+0x58>)
 8001e24:	f008 fc24 	bl	800a670 <HAL_UART_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e2e:	f7ff fa25 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000a08 	.word	0x20000a08
 8001e3c:	40004800 	.word	0x40004800

08001e40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b0b0      	sub	sp, #192	@ 0xc0
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e5c:	2284      	movs	r2, #132	@ 0x84
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f01e feab 	bl	8020bbc <memset>
  if(uartHandle->Instance==UART4)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4ab0      	ldr	r2, [pc, #704]	@ (800212c <HAL_UART_MspInit+0x2ec>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d173      	bne.n	8001f58 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f006 f9f0 	bl	8008264 <HAL_RCCEx_PeriphCLKConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e8a:	f7ff f9f7 	bl	800127c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e8e:	4ba8      	ldr	r3, [pc, #672]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	4aa7      	ldr	r2, [pc, #668]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001e94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9a:	4ba5      	ldr	r3, [pc, #660]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea6:	4ba2      	ldr	r3, [pc, #648]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4aa1      	ldr	r2, [pc, #644]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b9f      	ldr	r3, [pc, #636]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ebe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ede:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4893      	ldr	r0, [pc, #588]	@ (8002134 <HAL_UART_MspInit+0x2f4>)
 8001ee6:	f003 f8c1 	bl	800506c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001eea:	4b93      	ldr	r3, [pc, #588]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001eec:	4a93      	ldr	r2, [pc, #588]	@ (800213c <HAL_UART_MspInit+0x2fc>)
 8001eee:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001ef0:	4b91      	ldr	r3, [pc, #580]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001ef2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ef6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001efe:	4b8e      	ldr	r3, [pc, #568]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f04:	4b8c      	ldr	r3, [pc, #560]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001f06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f0a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f12:	4b89      	ldr	r3, [pc, #548]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001f18:	4b87      	ldr	r3, [pc, #540]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f1e:	4b86      	ldr	r3, [pc, #536]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f24:	4b84      	ldr	r3, [pc, #528]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001f2a:	4883      	ldr	r0, [pc, #524]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001f2c:	f001 fa04 	bl	8003338 <HAL_DMA_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001f36:	f7ff f9a1 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a7e      	ldr	r2, [pc, #504]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001f3e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001f40:	4a7d      	ldr	r2, [pc, #500]	@ (8002138 <HAL_UART_MspInit+0x2f8>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2105      	movs	r1, #5
 8001f4a:	2034      	movs	r0, #52	@ 0x34
 8001f4c:	f000 ffc0 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f50:	2034      	movs	r0, #52	@ 0x34
 8001f52:	f000 ffd9 	bl	8002f08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f56:	e0e4      	b.n	8002122 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a78      	ldr	r2, [pc, #480]	@ (8002140 <HAL_UART_MspInit+0x300>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	f040 8095 	bne.w	800208e <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f72:	4618      	mov	r0, r3
 8001f74:	f006 f976 	bl	8008264 <HAL_RCCEx_PeriphCLKConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001f7e:	f7ff f97d 	bl	800127c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f82:	4b6b      	ldr	r3, [pc, #428]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a6a      	ldr	r2, [pc, #424]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001f88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8e:	4b68      	ldr	r3, [pc, #416]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9a:	4b65      	ldr	r3, [pc, #404]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a64      	ldr	r2, [pc, #400]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b62      	ldr	r3, [pc, #392]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001fb8:	f043 0308 	orr.w	r3, r3, #8
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4850      	ldr	r0, [pc, #320]	@ (8002134 <HAL_UART_MspInit+0x2f4>)
 8001ff2:	f003 f83b 	bl	800506c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800200e:	2308      	movs	r3, #8
 8002010:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002014:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002018:	4619      	mov	r1, r3
 800201a:	484a      	ldr	r0, [pc, #296]	@ (8002144 <HAL_UART_MspInit+0x304>)
 800201c:	f003 f826 	bl	800506c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002020:	4b49      	ldr	r3, [pc, #292]	@ (8002148 <HAL_UART_MspInit+0x308>)
 8002022:	4a4a      	ldr	r2, [pc, #296]	@ (800214c <HAL_UART_MspInit+0x30c>)
 8002024:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002026:	4b48      	ldr	r3, [pc, #288]	@ (8002148 <HAL_UART_MspInit+0x308>)
 8002028:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800202c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800202e:	4b46      	ldr	r3, [pc, #280]	@ (8002148 <HAL_UART_MspInit+0x308>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002034:	4b44      	ldr	r3, [pc, #272]	@ (8002148 <HAL_UART_MspInit+0x308>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800203a:	4b43      	ldr	r3, [pc, #268]	@ (8002148 <HAL_UART_MspInit+0x308>)
 800203c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002040:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <HAL_UART_MspInit+0x308>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002048:	4b3f      	ldr	r3, [pc, #252]	@ (8002148 <HAL_UART_MspInit+0x308>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800204e:	4b3e      	ldr	r3, [pc, #248]	@ (8002148 <HAL_UART_MspInit+0x308>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002054:	4b3c      	ldr	r3, [pc, #240]	@ (8002148 <HAL_UART_MspInit+0x308>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800205a:	4b3b      	ldr	r3, [pc, #236]	@ (8002148 <HAL_UART_MspInit+0x308>)
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002060:	4839      	ldr	r0, [pc, #228]	@ (8002148 <HAL_UART_MspInit+0x308>)
 8002062:	f001 f969 	bl	8003338 <HAL_DMA_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_UART_MspInit+0x230>
      Error_Handler();
 800206c:	f7ff f906 	bl	800127c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a35      	ldr	r2, [pc, #212]	@ (8002148 <HAL_UART_MspInit+0x308>)
 8002074:	675a      	str	r2, [r3, #116]	@ 0x74
 8002076:	4a34      	ldr	r2, [pc, #208]	@ (8002148 <HAL_UART_MspInit+0x308>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2105      	movs	r1, #5
 8002080:	2035      	movs	r0, #53	@ 0x35
 8002082:	f000 ff25 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002086:	2035      	movs	r0, #53	@ 0x35
 8002088:	f000 ff3e 	bl	8002f08 <HAL_NVIC_EnableIRQ>
}
 800208c:	e049      	b.n	8002122 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2f      	ldr	r2, [pc, #188]	@ (8002150 <HAL_UART_MspInit+0x310>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d144      	bne.n	8002122 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002098:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800209c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800209e:	2300      	movs	r3, #0
 80020a0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020a6:	4618      	mov	r0, r3
 80020a8:	f006 f8dc 	bl	8008264 <HAL_RCCEx_PeriphCLKConfig>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_MspInit+0x276>
      Error_Handler();
 80020b2:	f7ff f8e3 	bl	800127c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ce:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a17      	ldr	r2, [pc, #92]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 80020d4:	f043 0308 	orr.w	r3, r3, #8
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <HAL_UART_MspInit+0x2f0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002100:	2307      	movs	r3, #7
 8002102:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002106:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800210a:	4619      	mov	r1, r3
 800210c:	480d      	ldr	r0, [pc, #52]	@ (8002144 <HAL_UART_MspInit+0x304>)
 800210e:	f002 ffad 	bl	800506c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2105      	movs	r1, #5
 8002116:	2027      	movs	r0, #39	@ 0x27
 8002118:	f000 feda 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800211c:	2027      	movs	r0, #39	@ 0x27
 800211e:	f000 fef3 	bl	8002f08 <HAL_NVIC_EnableIRQ>
}
 8002122:	bf00      	nop
 8002124:	37c0      	adds	r7, #192	@ 0xc0
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40004c00 	.word	0x40004c00
 8002130:	40023800 	.word	0x40023800
 8002134:	40020800 	.word	0x40020800
 8002138:	20000a90 	.word	0x20000a90
 800213c:	40026040 	.word	0x40026040
 8002140:	40005000 	.word	0x40005000
 8002144:	40020c00 	.word	0x40020c00
 8002148:	20000af0 	.word	0x20000af0
 800214c:	40026010 	.word	0x40026010
 8002150:	40004800 	.word	0x40004800

08002154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800218c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002158:	f7ff fce0 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800215e:	490d      	ldr	r1, [pc, #52]	@ (8002194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002160:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002174:	4c0a      	ldr	r4, [pc, #40]	@ (80021a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002182:	f01e fd69 	bl	8020c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002186:	f7fe ffd3 	bl	8001130 <main>
  bx  lr    
 800218a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800218c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8002198:	08026520 	.word	0x08026520
  ldr r2, =_sbss
 800219c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80021a0:	20022fa0 	.word	0x20022fa0

080021a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC_IRQHandler>

080021a6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <LAN8742_RegisterBusIO+0x28>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <LAN8742_RegisterBusIO+0x28>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <LAN8742_RegisterBusIO+0x28>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021d2:	e014      	b.n	80021fe <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d139      	bne.n	800229a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e01c      	b.n	800227a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	f107 020c 	add.w	r2, r7, #12
 8002248:	2112      	movs	r1, #18
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	4798      	blx	r3
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	da03      	bge.n	800225c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002254:	f06f 0304 	mvn.w	r3, #4
 8002258:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800225a:	e00b      	b.n	8002274 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	d105      	bne.n	8002274 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
         break;
 8002272:	e005      	b.n	8002280 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3301      	adds	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b1f      	cmp	r3, #31
 800227e:	d9df      	bls.n	8002240 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b1f      	cmp	r3, #31
 8002286:	d902      	bls.n	800228e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002288:	f06f 0302 	mvn.w	r3, #2
 800228c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800229a:	693b      	ldr	r3, [r7, #16]
 }
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6810      	ldr	r0, [r2, #0]
 80022b8:	f107 020c 	add.w	r2, r7, #12
 80022bc:	2101      	movs	r1, #1
 80022be:	4798      	blx	r3
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da02      	bge.n	80022cc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022c6:	f06f 0304 	mvn.w	r3, #4
 80022ca:	e06e      	b.n	80023aa <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6810      	ldr	r0, [r2, #0]
 80022d4:	f107 020c 	add.w	r2, r7, #12
 80022d8:	2101      	movs	r1, #1
 80022da:	4798      	blx	r3
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da02      	bge.n	80022e8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022e2:	f06f 0304 	mvn.w	r3, #4
 80022e6:	e060      	b.n	80023aa <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e059      	b.n	80023aa <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6810      	ldr	r0, [r2, #0]
 80022fe:	f107 020c 	add.w	r2, r7, #12
 8002302:	2100      	movs	r1, #0
 8002304:	4798      	blx	r3
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	da02      	bge.n	8002312 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800230c:	f06f 0304 	mvn.w	r3, #4
 8002310:	e04b      	b.n	80023aa <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d11b      	bne.n	8002354 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <LAN8742_GetLinkState+0x90>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002330:	2302      	movs	r3, #2
 8002332:	e03a      	b.n	80023aa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800233e:	2303      	movs	r3, #3
 8002340:	e033      	b.n	80023aa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800234c:	2304      	movs	r3, #4
 800234e:	e02c      	b.n	80023aa <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002350:	2305      	movs	r3, #5
 8002352:	e02a      	b.n	80023aa <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6810      	ldr	r0, [r2, #0]
 800235c:	f107 020c 	add.w	r2, r7, #12
 8002360:	211f      	movs	r1, #31
 8002362:	4798      	blx	r3
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	da02      	bge.n	8002370 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800236a:	f06f 0304 	mvn.w	r3, #4
 800236e:	e01c      	b.n	80023aa <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800237a:	2306      	movs	r3, #6
 800237c:	e015      	b.n	80023aa <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 031c 	and.w	r3, r3, #28
 8002384:	2b18      	cmp	r3, #24
 8002386:	d101      	bne.n	800238c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002388:	2302      	movs	r3, #2
 800238a:	e00e      	b.n	80023aa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 031c 	and.w	r3, r3, #28
 8002392:	2b08      	cmp	r3, #8
 8002394:	d101      	bne.n	800239a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002396:	2303      	movs	r3, #3
 8002398:	e007      	b.n	80023aa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 031c 	and.w	r3, r3, #28
 80023a0:	2b14      	cmp	r3, #20
 80023a2:	d101      	bne.n	80023a8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80023a4:	2304      	movs	r3, #4
 80023a6:	e000      	b.n	80023aa <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80023a8:	2305      	movs	r3, #5
    }
  }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b6:	2003      	movs	r0, #3
 80023b8:	f000 fd7f 	bl	8002eba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023bc:	200f      	movs	r0, #15
 80023be:	f7ff f96f 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c2:	f7ff f945 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_IncTick+0x20>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_IncTick+0x24>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	@ (80023f0 <HAL_IncTick+0x24>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000008 	.word	0x20000008
 80023f0:	20000b50 	.word	0x20000b50

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <HAL_GetTick+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000b50 	.word	0x20000b50

0800240c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff ffee 	bl	80023f4 <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002424:	d005      	beq.n	8002432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_Delay+0x44>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002432:	bf00      	nop
 8002434:	f7ff ffde 	bl	80023f4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	429a      	cmp	r2, r3
 8002442:	d8f7      	bhi.n	8002434 <HAL_Delay+0x28>
  {
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000008 	.word	0x20000008

08002454 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e031      	b.n	80024ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe f904 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d116      	bne.n	80024c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <HAL_ADC_Init+0x84>)
 8002498:	4013      	ands	r3, r2
 800249a:	f043 0202 	orr.w	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fae0 	bl	8002a68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80024be:	e001      	b.n	80024c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	ffffeefd 	.word	0xffffeefd

080024dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_Start_DMA+0x22>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e0d6      	b.n	80026ac <HAL_ADC_Start_DMA+0x1d0>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d018      	beq.n	8002546 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002524:	4b63      	ldr	r3, [pc, #396]	@ (80026b4 <HAL_ADC_Start_DMA+0x1d8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a63      	ldr	r2, [pc, #396]	@ (80026b8 <HAL_ADC_Start_DMA+0x1dc>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	0c9a      	lsrs	r2, r3, #18
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002538:	e002      	b.n	8002540 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	3b01      	subs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f9      	bne.n	800253a <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	f040 809e 	bne.w	8002692 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800255a:	4b58      	ldr	r3, [pc, #352]	@ (80026bc <HAL_ADC_Start_DMA+0x1e0>)
 800255c:	4013      	ands	r3, r2
 800255e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800257c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800258c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002590:	d106      	bne.n	80025a0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f023 0206 	bic.w	r2, r3, #6
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44
 800259e:	e002      	b.n	80025a6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b2:	4a43      	ldr	r2, [pc, #268]	@ (80026c0 <HAL_ADC_Start_DMA+0x1e4>)
 80025b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ba:	4a42      	ldr	r2, [pc, #264]	@ (80026c4 <HAL_ADC_Start_DMA+0x1e8>)
 80025bc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c2:	4a41      	ldr	r2, [pc, #260]	@ (80026c8 <HAL_ADC_Start_DMA+0x1ec>)
 80025c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80025de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	334c      	adds	r3, #76	@ 0x4c
 80025fa:	4619      	mov	r1, r3
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f000 ff48 	bl	8003494 <HAL_DMA_Start_IT>
 8002604:	4603      	mov	r3, r0
 8002606:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002608:	4b30      	ldr	r3, [pc, #192]	@ (80026cc <HAL_ADC_Start_DMA+0x1f0>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d143      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	e03a      	b.n	80026aa <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a25      	ldr	r2, [pc, #148]	@ (80026d0 <HAL_ADC_Start_DMA+0x1f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10e      	bne.n	800265c <HAL_ADC_Start_DMA+0x180>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d107      	bne.n	800265c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800265a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800265c:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <HAL_ADC_Start_DMA+0x1f0>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d120      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	@ (80026d4 <HAL_ADC_Start_DMA+0x1f8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d11b      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1ce>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d114      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	e00b      	b.n	80026aa <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f043 0210 	orr.w	r2, r3, #16
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000000 	.word	0x20000000
 80026b8:	431bde83 	.word	0x431bde83
 80026bc:	fffff8fe 	.word	0xfffff8fe
 80026c0:	08002c5d 	.word	0x08002c5d
 80026c4:	08002d17 	.word	0x08002d17
 80026c8:	08002d33 	.word	0x08002d33
 80026cc:	40012300 	.word	0x40012300
 80026d0:	40012000 	.word	0x40012000
 80026d4:	40012200 	.word	0x40012200

080026d8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_Stop_DMA+0x1a>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e046      	b.n	8002780 <HAL_ADC_Stop_DMA+0xa8>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d12e      	bne.n	8002776 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002726:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d10f      	bne.n	8002756 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273a:	4618      	mov	r0, r3
 800273c:	f000 ff0a 	bl	8003554 <HAL_DMA_Abort>
 8002740:	4603      	mov	r3, r0
 8002742:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002764:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800276a:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <HAL_ADC_Stop_DMA+0xb0>)
 800276c:	4013      	ands	r3, r2
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	ffffeefe 	.word	0xffffeefe

0800278c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e13a      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x292>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d93a      	bls.n	8002856 <HAL_ADC_ConfigChannel+0xa2>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027e8:	d035      	beq.n	8002856 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68d9      	ldr	r1, [r3, #12]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	3b1e      	subs	r3, #30
 8002800:	2207      	movs	r2, #7
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	400a      	ands	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a8f      	ldr	r2, [pc, #572]	@ (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10a      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68d9      	ldr	r1, [r3, #12]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	061a      	lsls	r2, r3, #24
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800282e:	e039      	b.n	80028a4 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68d9      	ldr	r1, [r3, #12]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	4603      	mov	r3, r0
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4403      	add	r3, r0
 8002848:	3b1e      	subs	r3, #30
 800284a:	409a      	lsls	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002854:	e026      	b.n	80028a4 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2207      	movs	r2, #7
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43da      	mvns	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	400a      	ands	r2, r1
 800287c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6919      	ldr	r1, [r3, #16]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	4603      	mov	r3, r0
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4403      	add	r3, r0
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	409a      	lsls	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b06      	cmp	r3, #6
 80028aa:	d824      	bhi.n	80028f6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	3b05      	subs	r3, #5
 80028be:	221f      	movs	r2, #31
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43da      	mvns	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	400a      	ands	r2, r1
 80028cc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	3b05      	subs	r3, #5
 80028e8:	fa00 f203 	lsl.w	r2, r0, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80028f4:	e04c      	b.n	8002990 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d824      	bhi.n	8002948 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	3b23      	subs	r3, #35	@ 0x23
 8002910:	221f      	movs	r2, #31
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	400a      	ands	r2, r1
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	4618      	mov	r0, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	3b23      	subs	r3, #35	@ 0x23
 800293a:	fa00 f203 	lsl.w	r2, r0, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	631a      	str	r2, [r3, #48]	@ 0x30
 8002946:	e023      	b.n	8002990 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	3b41      	subs	r3, #65	@ 0x41
 800295a:	221f      	movs	r2, #31
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43da      	mvns	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	400a      	ands	r2, r1
 8002968:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	3b41      	subs	r3, #65	@ 0x41
 8002984:	fa00 f203 	lsl.w	r2, r0, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a30      	ldr	r2, [pc, #192]	@ (8002a58 <HAL_ADC_ConfigChannel+0x2a4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10a      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1fc>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029a2:	d105      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80029a4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 80029aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80029ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a28      	ldr	r2, [pc, #160]	@ (8002a58 <HAL_ADC_ConfigChannel+0x2a4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10f      	bne.n	80029da <HAL_ADC_ConfigChannel+0x226>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b12      	cmp	r3, #18
 80029c0:	d10b      	bne.n	80029da <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029c2:	4b26      	ldr	r3, [pc, #152]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a25      	ldr	r2, [pc, #148]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 80029c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80029cc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029ce:	4b23      	ldr	r3, [pc, #140]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a22      	ldr	r2, [pc, #136]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 80029d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1e      	ldr	r2, [pc, #120]	@ (8002a58 <HAL_ADC_ConfigChannel+0x2a4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d12b      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x288>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <HAL_ADC_ConfigChannel+0x242>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b11      	cmp	r3, #17
 80029f4:	d122      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80029f6:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a18      	ldr	r2, [pc, #96]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 80029fc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002a00:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a02:	4b16      	ldr	r3, [pc, #88]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a15      	ldr	r2, [pc, #84]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 8002a08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a0c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a10      	ldr	r2, [pc, #64]	@ (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a18:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <HAL_ADC_ConfigChannel+0x2ac>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a11      	ldr	r2, [pc, #68]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2b0>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	0c9a      	lsrs	r2, r3, #18
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a2e:	e002      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f9      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	10000012 	.word	0x10000012
 8002a58:	40012000 	.word	0x40012000
 8002a5c:	40012300 	.word	0x40012300
 8002a60:	20000000 	.word	0x20000000
 8002a64:	431bde83 	.word	0x431bde83

08002a68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a70:	4b78      	ldr	r3, [pc, #480]	@ (8002c54 <ADC_Init+0x1ec>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a77      	ldr	r2, [pc, #476]	@ (8002c54 <ADC_Init+0x1ec>)
 8002a76:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002a7a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a7c:	4b75      	ldr	r3, [pc, #468]	@ (8002c54 <ADC_Init+0x1ec>)
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4973      	ldr	r1, [pc, #460]	@ (8002c54 <ADC_Init+0x1ec>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	021a      	lsls	r2, r3, #8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6899      	ldr	r1, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	4a58      	ldr	r2, [pc, #352]	@ (8002c58 <ADC_Init+0x1f0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6899      	ldr	r1, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6899      	ldr	r1, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	e00f      	b.n	8002b62 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0202 	bic.w	r2, r2, #2
 8002b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6899      	ldr	r1, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	005a      	lsls	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01b      	beq.n	8002bc8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	035a      	lsls	r2, r3, #13
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	e007      	b.n	8002bd8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	051a      	lsls	r2, r3, #20
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6899      	ldr	r1, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c1a:	025a      	lsls	r2, r3, #9
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6899      	ldr	r1, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	029a      	lsls	r2, r3, #10
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	40012300 	.word	0x40012300
 8002c58:	0f000001 	.word	0x0f000001

08002c5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d13c      	bne.n	8002cf0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d12b      	bne.n	8002ce8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d127      	bne.n	8002ce8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d119      	bne.n	8002ce8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0220 	bic.w	r2, r2, #32
 8002cc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f01c fd5f 	bl	801f7ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cee:	e00e      	b.n	8002d0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff fd4f 	bl	80027a0 <HAL_ADC_ErrorCallback>
}
 8002d02:	e004      	b.n	8002d0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7ff fd31 	bl	800278c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2240      	movs	r2, #64	@ 0x40
 8002d44:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff fd24 	bl	80027a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <__NVIC_SetPriorityGrouping+0x40>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d88:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <__NVIC_SetPriorityGrouping+0x40>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00
 8002da4:	05fa0000 	.word	0x05fa0000

08002da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f003 0307 	and.w	r3, r3, #7
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	db0b      	blt.n	8002dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4907      	ldr	r1, [pc, #28]	@ (8002dfc <__NVIC_EnableIRQ+0x38>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2001      	movs	r0, #1
 8002de6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100

08002e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	@ (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	@ (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	@ 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f1c3 0307 	rsb	r3, r3, #7
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf28      	it	cs
 8002e72:	2304      	movcs	r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d902      	bls.n	8002e84 <NVIC_EncodePriority+0x30>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3b03      	subs	r3, #3
 8002e82:	e000      	b.n	8002e86 <NVIC_EncodePriority+0x32>
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43d9      	mvns	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	4313      	orrs	r3, r2
         );
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	@ 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff4c 	bl	8002d60 <__NVIC_SetPriorityGrouping>
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee2:	f7ff ff61 	bl	8002da8 <__NVIC_GetPriorityGrouping>
 8002ee6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	6978      	ldr	r0, [r7, #20]
 8002eee:	f7ff ffb1 	bl	8002e54 <NVIC_EncodePriority>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff80 	bl	8002e00 <__NVIC_SetPriority>
}
 8002f00:	bf00      	nop
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff54 	bl	8002dc4 <__NVIC_EnableIRQ>
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e054      	b.n	8002fe0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7f5b      	ldrb	r3, [r3, #29]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd fc2e 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	791b      	ldrb	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10c      	bne.n	8002f74 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a22      	ldr	r2, [pc, #136]	@ (8002fe8 <HAL_CRC_Init+0xc4>)
 8002f60:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0218 	bic.w	r2, r2, #24
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	e00c      	b.n	8002f8e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f94c 	bl	800321c <HAL_CRCEx_Polynomial_Set>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e028      	b.n	8002fe0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	795b      	ldrb	r3, [r3, #5]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f9e:	611a      	str	r2, [r3, #16]
 8002fa0:	e004      	b.n	8002fac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6912      	ldr	r2, [r2, #16]
 8002faa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699a      	ldr	r2, [r3, #24]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	04c11db7 	.word	0x04c11db7

08002fec <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2202      	movs	r2, #2
 8003000:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d006      	beq.n	8003028 <HAL_CRC_Calculate+0x3c>
 800301a:	2b03      	cmp	r3, #3
 800301c:	d829      	bhi.n	8003072 <HAL_CRC_Calculate+0x86>
 800301e:	2b01      	cmp	r3, #1
 8003020:	d019      	beq.n	8003056 <HAL_CRC_Calculate+0x6a>
 8003022:	2b02      	cmp	r3, #2
 8003024:	d01e      	beq.n	8003064 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003026:	e024      	b.n	8003072 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e00a      	b.n	8003044 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	441a      	add	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	3301      	adds	r3, #1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	d3f0      	bcc.n	800302e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	613b      	str	r3, [r7, #16]
      break;
 8003054:	e00e      	b.n	8003074 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f812 	bl	8003084 <CRC_Handle_8>
 8003060:	6138      	str	r0, [r7, #16]
      break;
 8003062:	e007      	b.n	8003074 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f89d 	bl	80031a8 <CRC_Handle_16>
 800306e:	6138      	str	r0, [r7, #16]
      break;
 8003070:	e000      	b.n	8003074 <HAL_CRC_Calculate+0x88>
      break;
 8003072:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800307a:	693b      	ldr	r3, [r7, #16]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	@ 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	e023      	b.n	80030de <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4413      	add	r3, r2
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	3301      	adds	r3, #1
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	440b      	add	r3, r1
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030b0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	440b      	add	r3, r1
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030c0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3303      	adds	r3, #3
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	440b      	add	r3, r1
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030d4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	3301      	adds	r3, #1
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3d6      	bcc.n	8003096 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d051      	beq.n	8003196 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d108      	bne.n	800310e <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	4413      	add	r3, r2
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	7013      	strb	r3, [r2, #0]
 800310c:	e043      	b.n	8003196 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d118      	bne.n	800314a <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	4413      	add	r3, r2
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b21b      	sxth	r3, r3
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	b21a      	sxth	r2, r3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	3301      	adds	r3, #1
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	440b      	add	r3, r1
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b21b      	sxth	r3, r3
 8003136:	4313      	orrs	r3, r2
 8003138:	b21b      	sxth	r3, r3
 800313a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	8b7a      	ldrh	r2, [r7, #26]
 8003146:	801a      	strh	r2, [r3, #0]
 8003148:	e025      	b.n	8003196 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b03      	cmp	r3, #3
 8003152:	d120      	bne.n	8003196 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4413      	add	r3, r2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	b21b      	sxth	r3, r3
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	b21a      	sxth	r2, r3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	3301      	adds	r3, #1
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	440b      	add	r3, r1
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b21b      	sxth	r3, r3
 8003172:	4313      	orrs	r3, r2
 8003174:	b21b      	sxth	r3, r3
 8003176:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	8b7a      	ldrh	r2, [r7, #26]
 8003182:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	4413      	add	r3, r2
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3724      	adds	r7, #36	@ 0x24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	e013      	b.n	80031e2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	4413      	add	r3, r2
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	041a      	lsls	r2, r3, #16
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	3302      	adds	r3, #2
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	440b      	add	r3, r1
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3301      	adds	r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	085b      	lsrs	r3, r3, #1
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3e6      	bcc.n	80031ba <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	4413      	add	r3, r2
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800322c:	231f      	movs	r3, #31
 800322e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
 800323e:	e063      	b.n	8003308 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003240:	bf00      	nop
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1e5a      	subs	r2, r3, #1
 8003246:	613a      	str	r2, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <HAL_CRCEx_Polynomial_Set+0x44>
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b18      	cmp	r3, #24
 8003264:	d846      	bhi.n	80032f4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003266:	a201      	add	r2, pc, #4	@ (adr r2, 800326c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	080032fb 	.word	0x080032fb
 8003270:	080032f5 	.word	0x080032f5
 8003274:	080032f5 	.word	0x080032f5
 8003278:	080032f5 	.word	0x080032f5
 800327c:	080032f5 	.word	0x080032f5
 8003280:	080032f5 	.word	0x080032f5
 8003284:	080032f5 	.word	0x080032f5
 8003288:	080032f5 	.word	0x080032f5
 800328c:	080032e9 	.word	0x080032e9
 8003290:	080032f5 	.word	0x080032f5
 8003294:	080032f5 	.word	0x080032f5
 8003298:	080032f5 	.word	0x080032f5
 800329c:	080032f5 	.word	0x080032f5
 80032a0:	080032f5 	.word	0x080032f5
 80032a4:	080032f5 	.word	0x080032f5
 80032a8:	080032f5 	.word	0x080032f5
 80032ac:	080032dd 	.word	0x080032dd
 80032b0:	080032f5 	.word	0x080032f5
 80032b4:	080032f5 	.word	0x080032f5
 80032b8:	080032f5 	.word	0x080032f5
 80032bc:	080032f5 	.word	0x080032f5
 80032c0:	080032f5 	.word	0x080032f5
 80032c4:	080032f5 	.word	0x080032f5
 80032c8:	080032f5 	.word	0x080032f5
 80032cc:	080032d1 	.word	0x080032d1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d913      	bls.n	80032fe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032da:	e010      	b.n	80032fe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b07      	cmp	r3, #7
 80032e0:	d90f      	bls.n	8003302 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032e6:	e00c      	b.n	8003302 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	d90b      	bls.n	8003306 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032f2:	e008      	b.n	8003306 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
        break;
 80032f8:	e006      	b.n	8003308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032fa:	bf00      	nop
 80032fc:	e004      	b.n	8003308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032fe:	bf00      	nop
 8003300:	e002      	b.n	8003308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003306:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 0118 	bic.w	r1, r3, #24
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800332a:	7dfb      	ldrb	r3, [r7, #23]
}
 800332c:	4618      	mov	r0, r3
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7ff f856 	bl	80023f4 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e099      	b.n	8003488 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003374:	e00f      	b.n	8003396 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003376:	f7ff f83d 	bl	80023f4 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b05      	cmp	r3, #5
 8003382:	d908      	bls.n	8003396 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2203      	movs	r2, #3
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e078      	b.n	8003488 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e8      	bne.n	8003376 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4b38      	ldr	r3, [pc, #224]	@ (8003490 <HAL_DMA_Init+0x158>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d107      	bne.n	8003400 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	4313      	orrs	r3, r2
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0307 	bic.w	r3, r3, #7
 8003416:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	2b04      	cmp	r3, #4
 8003428:	d117      	bne.n	800345a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00e      	beq.n	800345a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fb23 	bl	8003a88 <DMA_CheckFifoParam>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2240      	movs	r2, #64	@ 0x40
 800344c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003456:	2301      	movs	r3, #1
 8003458:	e016      	b.n	8003488 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fada 	bl	8003a1c <DMA_CalcBaseAndBitshift>
 8003468:	4603      	mov	r3, r0
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	223f      	movs	r2, #63	@ 0x3f
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	f010803f 	.word	0xf010803f

08003494 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_DMA_Start_IT+0x26>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e048      	b.n	800354c <HAL_DMA_Start_IT+0xb8>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d137      	bne.n	800353e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fa6c 	bl	80039c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ec:	223f      	movs	r2, #63	@ 0x3f
 80034ee:	409a      	lsls	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0216 	orr.w	r2, r2, #22
 8003502:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003512:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d007      	beq.n	800352c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0208 	orr.w	r2, r2, #8
 800352a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e005      	b.n	800354a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003546:	2302      	movs	r3, #2
 8003548:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800354a:	7dfb      	ldrb	r3, [r7, #23]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003562:	f7fe ff47 	bl	80023f4 <HAL_GetTick>
 8003566:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d008      	beq.n	8003586 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2280      	movs	r2, #128	@ 0x80
 8003578:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e052      	b.n	800362c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0216 	bic.w	r2, r2, #22
 8003594:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d103      	bne.n	80035b6 <HAL_DMA_Abort+0x62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0208 	bic.w	r2, r2, #8
 80035c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d6:	e013      	b.n	8003600 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035d8:	f7fe ff0c 	bl	80023f4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d90c      	bls.n	8003600 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2203      	movs	r2, #3
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e015      	b.n	800362c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e4      	bne.n	80035d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003612:	223f      	movs	r2, #63	@ 0x3f
 8003614:	409a      	lsls	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d004      	beq.n	8003652 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2280      	movs	r2, #128	@ 0x80
 800364c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e00c      	b.n	800366c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2205      	movs	r2, #5
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003684:	4b8e      	ldr	r3, [pc, #568]	@ (80038c0 <HAL_DMA_IRQHandler+0x248>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a8e      	ldr	r2, [pc, #568]	@ (80038c4 <HAL_DMA_IRQHandler+0x24c>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0a9b      	lsrs	r3, r3, #10
 8003690:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003696:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	2208      	movs	r2, #8
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01a      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	2208      	movs	r2, #8
 80036d2:	409a      	lsls	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003706:	2201      	movs	r2, #1
 8003708:	409a      	lsls	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003712:	f043 0202 	orr.w	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371e:	2204      	movs	r2, #4
 8003720:	409a      	lsls	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d012      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	2204      	movs	r2, #4
 800373e:	409a      	lsls	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003748:	f043 0204 	orr.w	r2, r3, #4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	2210      	movs	r2, #16
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d043      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03c      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003772:	2210      	movs	r2, #16
 8003774:	409a      	lsls	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d018      	beq.n	80037ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d024      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
 80037a6:	e01f      	b.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
 80037b8:	e016      	b.n	80037e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0208 	bic.w	r2, r2, #8
 80037d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ec:	2220      	movs	r2, #32
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 808f 	beq.w	8003918 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8087 	beq.w	8003918 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380e:	2220      	movs	r2, #32
 8003810:	409a      	lsls	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b05      	cmp	r3, #5
 8003820:	d136      	bne.n	8003890 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0216 	bic.w	r2, r2, #22
 8003830:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003840:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <HAL_DMA_IRQHandler+0x1da>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0208 	bic.w	r2, r2, #8
 8003860:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	223f      	movs	r2, #63	@ 0x3f
 8003868:	409a      	lsls	r2, r3
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d07e      	beq.n	8003984 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
        }
        return;
 800388e:	e079      	b.n	8003984 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01d      	beq.n	80038da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10d      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d031      	beq.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e02c      	b.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
 80038be:	bf00      	nop
 80038c0:	20000000 	.word	0x20000000
 80038c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d023      	beq.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
 80038d8:	e01e      	b.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10f      	bne.n	8003908 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0210 	bic.w	r2, r2, #16
 80038f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391c:	2b00      	cmp	r3, #0
 800391e:	d032      	beq.n	8003986 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d022      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2205      	movs	r2, #5
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3301      	adds	r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	429a      	cmp	r2, r3
 800394e:	d307      	bcc.n	8003960 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f2      	bne.n	8003944 <HAL_DMA_IRQHandler+0x2cc>
 800395e:	e000      	b.n	8003962 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003960:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
 8003982:	e000      	b.n	8003986 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003984:	bf00      	nop
    }
  }
}
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800399a:	b2db      	uxtb	r3, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b40      	cmp	r3, #64	@ 0x40
 80039ec:	d108      	bne.n	8003a00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039fe:	e007      	b.n	8003a10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	60da      	str	r2, [r3, #12]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	3b10      	subs	r3, #16
 8003a2c:	4a13      	ldr	r2, [pc, #76]	@ (8003a7c <DMA_CalcBaseAndBitshift+0x60>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a36:	4a12      	ldr	r2, [pc, #72]	@ (8003a80 <DMA_CalcBaseAndBitshift+0x64>)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d908      	bls.n	8003a5c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b0c      	ldr	r3, [pc, #48]	@ (8003a84 <DMA_CalcBaseAndBitshift+0x68>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	1d1a      	adds	r2, r3, #4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a5a:	e006      	b.n	8003a6a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	4b08      	ldr	r3, [pc, #32]	@ (8003a84 <DMA_CalcBaseAndBitshift+0x68>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	aaaaaaab 	.word	0xaaaaaaab
 8003a80:	080262c0 	.word	0x080262c0
 8003a84:	fffffc00 	.word	0xfffffc00

08003a88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d11f      	bne.n	8003ae2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d856      	bhi.n	8003b56 <DMA_CheckFifoParam+0xce>
 8003aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab0 <DMA_CheckFifoParam+0x28>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003ac1 	.word	0x08003ac1
 8003ab4:	08003ad3 	.word	0x08003ad3
 8003ab8:	08003ac1 	.word	0x08003ac1
 8003abc:	08003b57 	.word	0x08003b57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d046      	beq.n	8003b5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad0:	e043      	b.n	8003b5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ada:	d140      	bne.n	8003b5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae0:	e03d      	b.n	8003b5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aea:	d121      	bne.n	8003b30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d837      	bhi.n	8003b62 <DMA_CheckFifoParam+0xda>
 8003af2:	a201      	add	r2, pc, #4	@ (adr r2, 8003af8 <DMA_CheckFifoParam+0x70>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b09 	.word	0x08003b09
 8003afc:	08003b0f 	.word	0x08003b0f
 8003b00:	08003b09 	.word	0x08003b09
 8003b04:	08003b21 	.word	0x08003b21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e030      	b.n	8003b70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d025      	beq.n	8003b66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b1e:	e022      	b.n	8003b66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b28:	d11f      	bne.n	8003b6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b2e:	e01c      	b.n	8003b6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d903      	bls.n	8003b3e <DMA_CheckFifoParam+0xb6>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d003      	beq.n	8003b44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b3c:	e018      	b.n	8003b70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
      break;
 8003b42:	e015      	b.n	8003b70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      break;
 8003b54:	e00b      	b.n	8003b6e <DMA_CheckFifoParam+0xe6>
      break;
 8003b56:	bf00      	nop
 8003b58:	e00a      	b.n	8003b70 <DMA_CheckFifoParam+0xe8>
      break;
 8003b5a:	bf00      	nop
 8003b5c:	e008      	b.n	8003b70 <DMA_CheckFifoParam+0xe8>
      break;
 8003b5e:	bf00      	nop
 8003b60:	e006      	b.n	8003b70 <DMA_CheckFifoParam+0xe8>
      break;
 8003b62:	bf00      	nop
 8003b64:	e004      	b.n	8003b70 <DMA_CheckFifoParam+0xe8>
      break;
 8003b66:	bf00      	nop
 8003b68:	e002      	b.n	8003b70 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop

08003b80 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e086      	b.n	8003ca0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f008 fd3d 	bl	800c624 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003baa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ca8 <HAL_ETH_Init+0x128>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	4a3e      	ldr	r2, [pc, #248]	@ (8003ca8 <HAL_ETH_Init+0x128>)
 8003bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ca8 <HAL_ETH_Init+0x128>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cac <HAL_ETH_Init+0x12c>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4a39      	ldr	r2, [pc, #228]	@ (8003cac <HAL_ETH_Init+0x12c>)
 8003bc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003bcc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003bce:	4b37      	ldr	r3, [pc, #220]	@ (8003cac <HAL_ETH_Init+0x12c>)
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	4935      	ldr	r1, [pc, #212]	@ (8003cac <HAL_ETH_Init+0x12c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003bdc:	4b33      	ldr	r3, [pc, #204]	@ (8003cac <HAL_ETH_Init+0x12c>)
 8003bde:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bf6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf8:	f7fe fbfc 	bl	80023f4 <HAL_GetTick>
 8003bfc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bfe:	e011      	b.n	8003c24 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c00:	f7fe fbf8 	bl	80023f4 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c0e:	d909      	bls.n	8003c24 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2204      	movs	r2, #4
 8003c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	22e0      	movs	r2, #224	@ 0xe0
 8003c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e03d      	b.n	8003ca0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e4      	bne.n	8003c00 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 ff5c 	bl	8004af4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f001 f807 	bl	8004c50 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f001 f85d 	bl	8004d02 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2100      	movs	r1, #0
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 ffc5 	bl	8004be0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003c64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb0 <HAL_ETH_Init+0x130>)
 8003c74:	430b      	orrs	r3, r1
 8003c76:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003c8a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	00020060 	.word	0x00020060

08003cb4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d15f      	bne.n	8003d86 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9f6 	bl	80040cc <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7fe fb8f 	bl	800240c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d0c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d24:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fd80 	bl	800482c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0208 	orr.w	r2, r2, #8
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d44:	2001      	movs	r0, #1
 8003d46:	f7fe fb61 	bl	800240c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0204 	orr.w	r2, r2, #4
 8003d60:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d6a:	69d9      	ldr	r1, [r3, #28]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <HAL_ETH_Start_IT+0xdc>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d78:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2240      	movs	r2, #64	@ 0x40
 8003d7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	0001a0c1 	.word	0x0001a0c1

08003d94 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d16e      	bne.n	8003e84 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b34      	ldr	r3, [pc, #208]	@ (8003e90 <HAL_ETH_Stop_IT+0xfc>)
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dc4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ddc:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	f023 0302 	bic.w	r3, r3, #2
 8003df0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003df4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0204 	bic.w	r2, r2, #4
 8003e04:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e0e:	2001      	movs	r0, #1
 8003e10:	f7fe fafc 	bl	800240c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fd05 	bl	800482c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0208 	bic.w	r2, r2, #8
 8003e30:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	f7fe fae6 	bl	800240c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	e00e      	b.n	8003e6c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	3212      	adds	r2, #18
 8003e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e58:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d9ed      	bls.n	8003e4e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2210      	movs	r2, #16
 8003e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	fffe5f3e 	.word	0xfffe5f3e

08003e94 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e045      	b.n	8003f44 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ebe:	2b40      	cmp	r3, #64	@ 0x40
 8003ec0:	d13f      	bne.n	8003f42 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 ff86 	bl	8004de0 <ETH_Prepare_Tx_Descriptors>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee0:	f043 0202 	orr.w	r2, r3, #2
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e02a      	b.n	8003f44 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003eee:	f3bf 8f4f 	dsb	sy
}
 8003ef2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d904      	bls.n	8003f10 <HAL_ETH_Transmit_IT+0x7c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	1f1a      	subs	r2, r3, #4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e000      	b.n	8003f44 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	f043 0201 	orr.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0a4      	b.n	80040c2 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f7e:	2b40      	cmp	r3, #64	@ 0x40
 8003f80:	d001      	beq.n	8003f86 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e09d      	b.n	80040c2 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	3212      	adds	r2, #18
 8003f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f96:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f9c:	f1c3 0304 	rsb	r3, r3, #4
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003fa2:	e066      	b.n	8004072 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <HAL_ETH_ReadData+0x88>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d03c      	beq.n	800404e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ff6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800400c:	2301      	movs	r3, #1
 800400e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004028:	461a      	mov	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f008 fccd 	bl	800c9cc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2200      	movs	r2, #0
 800404c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3301      	adds	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d902      	bls.n	8004060 <HAL_ETH_ReadData+0x114>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3b04      	subs	r3, #4
 800405e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	3212      	adds	r2, #18
 8004066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	3301      	adds	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004076:	2b00      	cmp	r3, #0
 8004078:	db06      	blt.n	8004088 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	429a      	cmp	r2, r3
 8004080:	d202      	bcs.n	8004088 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004082:	7cfb      	ldrb	r3, [r7, #19]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d08d      	beq.n	8003fa4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f815 	bl	80040cc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d108      	bne.n	80040c0 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80040d8:	2301      	movs	r3, #1
 80040da:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040e0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	3212      	adds	r2, #18
 80040e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ec:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040f2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80040f4:	e042      	b.n	800417c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d112      	bne.n	8004124 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80040fe:	f107 0308 	add.w	r3, r7, #8
 8004102:	4618      	mov	r0, r3
 8004104:	f008 fc32 	bl	800c96c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	74fb      	strb	r3, [r7, #19]
 8004112:	e007      	b.n	8004124 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	461a      	mov	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	461a      	mov	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d028      	beq.n	800417c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	4b26      	ldr	r3, [pc, #152]	@ (80041d0 <ETH_UpdateDescriptor+0x104>)
 8004138:	4313      	orrs	r3, r2
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	6053      	str	r3, [r2, #4]
 800413e:	e005      	b.n	800414c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3301      	adds	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d902      	bls.n	800416a <ETH_UpdateDescriptor+0x9e>
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	3b04      	subs	r3, #4
 8004168:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	3212      	adds	r2, #18
 8004170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004174:	617b      	str	r3, [r7, #20]
      desccount--;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	3b01      	subs	r3, #1
 800417a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <ETH_UpdateDescriptor+0xbc>
 8004182:	7cfb      	ldrb	r3, [r7, #19]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1b6      	bne.n	80040f6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	429a      	cmp	r2, r3
 8004190:	d01a      	beq.n	80041c8 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3303      	adds	r3, #3
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800419c:	f3bf 8f5f 	dmb	sy
}
 80041a0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6919      	ldr	r1, [r3, #16]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	18ca      	adds	r2, r1, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ba:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80041c8:	bf00      	nop
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	80004000 	.word	0x80004000

080041d4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3318      	adds	r3, #24
 80041e0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80041f2:	e047      	b.n	8004284 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	3304      	adds	r3, #4
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3301      	adds	r3, #1
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b03      	cmp	r3, #3
 8004218:	d902      	bls.n	8004220 <HAL_ETH_ReleaseTxPacket+0x4c>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	3b04      	subs	r3, #4
 800421e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004224:	7bbb      	ldrb	r3, [r7, #14]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d02c      	beq.n	8004284 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68d9      	ldr	r1, [r3, #12]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	440b      	add	r3, r1
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	db1f      	blt.n	8004280 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	3304      	adds	r3, #4
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4618      	mov	r0, r3
 800424e:	f008 fbff 	bl	800ca50 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3304      	adds	r3, #4
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3301      	adds	r3, #1
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b03      	cmp	r3, #3
 800426a:	d902      	bls.n	8004272 <HAL_ETH_ReleaseTxPacket+0x9e>
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	3b04      	subs	r3, #4
 8004270:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800427e:	e001      	b.n	8004284 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_ETH_ReleaseTxPacket+0xbc>
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1b1      	bne.n	80041f4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042aa:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80042c4:	4b4b      	ldr	r3, [pc, #300]	@ (80043f4 <HAL_ETH_IRQHandler+0x158>)
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00e      	beq.n	80042f2 <HAL_ETH_IRQHandler+0x56>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b43      	ldr	r3, [pc, #268]	@ (80043f8 <HAL_ETH_IRQHandler+0x15c>)
 80042ea:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f007 fed9 	bl	800c0a4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00f      	beq.n	800431c <HAL_ETH_IRQHandler+0x80>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800430e:	461a      	mov	r2, r3
 8004310:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004314:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f007 fed4 	bl	800c0c4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d042      	beq.n	80043ac <HAL_ETH_IRQHandler+0x110>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d03d      	beq.n	80043ac <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004336:	f043 0208 	orr.w	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01a      	beq.n	8004380 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	4b29      	ldr	r3, [pc, #164]	@ (80043fc <HAL_ETH_IRQHandler+0x160>)
 8004356:	4013      	ands	r3, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004370:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004374:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	22e0      	movs	r2, #224	@ 0xe0
 800437a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800437e:	e012      	b.n	80043a6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	f248 6380 	movw	r3, #34432	@ 0x8680
 800438e:	4013      	ands	r3, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439e:	461a      	mov	r2, r3
 80043a0:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043a4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f007 fe9c 	bl	800c0e4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00e      	beq.n	80043d4 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f81a 	bl	8004400 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80043de:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <HAL_ETH_IRQHandler+0x158>)
 80043e0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80043e4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f814 	bl	8004414 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80043ec:	bf00      	nop
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40013c00 	.word	0x40013c00
 80043f8:	00010040 	.word	0x00010040
 80043fc:	007e2000 	.word	0x007e2000

08004400 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f003 031c 	and.w	r3, r3, #28
 8004444:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	02db      	lsls	r3, r3, #11
 800444a:	b29b      	uxth	r3, r3
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	019b      	lsls	r3, r3, #6
 8004456:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0302 	bic.w	r3, r3, #2
 8004466:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004478:	f7fd ffbc 	bl	80023f4 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800447e:	e00d      	b.n	800449c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004480:	f7fd ffb8 	bl	80023f4 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448e:	d301      	bcc.n	8004494 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e010      	b.n	80044b6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ec      	bne.n	8004480 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b086      	sub	sp, #24
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f003 031c 	and.w	r3, r3, #28
 80044da:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	02db      	lsls	r3, r3, #11
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	019b      	lsls	r3, r3, #6
 80044ec:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f043 0302 	orr.w	r3, r3, #2
 80044fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004518:	f7fd ff6c 	bl	80023f4 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800451e:	e00d      	b.n	800453c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004520:	f7fd ff68 	bl	80023f4 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452e:	d301      	bcc.n	8004534 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e009      	b.n	8004548 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ec      	bne.n	8004520 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0e6      	b.n	8004732 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800461e:	2b00      	cmp	r3, #0
 8004620:	bf0c      	ite	eq
 8004622:	2301      	moveq	r3, #1
 8004624:	2300      	movne	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf0c      	ite	eq
 800463c:	2301      	moveq	r3, #1
 800463e:	2300      	movne	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004652:	2b00      	cmp	r3, #0
 8004654:	bf14      	ite	ne
 8004656:	2301      	movne	r3, #1
 8004658:	2300      	moveq	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf14      	ite	ne
 800467e:	2301      	movne	r3, #1
 8004680:	2300      	moveq	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bf14      	ite	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	2300      	moveq	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	bf14      	ite	ne
 8004706:	2301      	movne	r3, #1
 8004708:	2300      	moveq	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf14      	ite	ne
 8004722:	2301      	movne	r3, #1
 8004724:	2300      	moveq	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e00b      	b.n	800476a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004758:	2b10      	cmp	r3, #16
 800475a:	d105      	bne.n	8004768 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800475c:	6839      	ldr	r1, [r7, #0]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f88a 	bl	8004878 <ETH_SetMACConfig>

    return HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	e000      	b.n	800476a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 031c 	bic.w	r3, r3, #28
 800478a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800478c:	f003 fd04 	bl	8008198 <HAL_RCC_GetHCLKFreq>
 8004790:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4a14      	ldr	r2, [pc, #80]	@ (80047e8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d804      	bhi.n	80047a4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f043 0308 	orr.w	r3, r3, #8
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	e019      	b.n	80047d8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4a11      	ldr	r2, [pc, #68]	@ (80047ec <HAL_ETH_SetMDIOClockRange+0x78>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d204      	bcs.n	80047b6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f043 030c 	orr.w	r3, r3, #12
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e010      	b.n	80047d8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4a0d      	ldr	r2, [pc, #52]	@ (80047f0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d90c      	bls.n	80047d8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4a0c      	ldr	r2, [pc, #48]	@ (80047f4 <HAL_ETH_SetMDIOClockRange+0x80>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d804      	bhi.n	80047d0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f043 0304 	orr.w	r3, r3, #4
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e003      	b.n	80047d8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f043 0310 	orr.w	r3, r3, #16
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	611a      	str	r2, [r3, #16]
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	02160ebf 	.word	0x02160ebf
 80047ec:	03938700 	.word	0x03938700
 80047f0:	05f5e0ff 	.word	0x05f5e0ff
 80047f4:	08f0d17f 	.word	0x08f0d17f

080047f8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800484a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800484e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800485c:	2001      	movs	r0, #1
 800485e:	f7fd fdd5 	bl	800240c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800486c:	6193      	str	r3, [r2, #24]
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4b53      	ldr	r3, [pc, #332]	@ (80049dc <ETH_SetMACConfig+0x164>)
 800488e:	4013      	ands	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	7b9b      	ldrb	r3, [r3, #14]
 8004896:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	7c12      	ldrb	r2, [r2, #16]
 800489c:	2a00      	cmp	r2, #0
 800489e:	d102      	bne.n	80048a6 <ETH_SetMACConfig+0x2e>
 80048a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048a4:	e000      	b.n	80048a8 <ETH_SetMACConfig+0x30>
 80048a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	7c52      	ldrb	r2, [r2, #17]
 80048ae:	2a00      	cmp	r2, #0
 80048b0:	d102      	bne.n	80048b8 <ETH_SetMACConfig+0x40>
 80048b2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80048b6:	e000      	b.n	80048ba <ETH_SetMACConfig+0x42>
 80048b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	7fdb      	ldrb	r3, [r3, #31]
 80048c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80048c8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80048ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	7f92      	ldrb	r2, [r2, #30]
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	d102      	bne.n	80048de <ETH_SetMACConfig+0x66>
 80048d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048dc:	e000      	b.n	80048e0 <ETH_SetMACConfig+0x68>
 80048de:	2200      	movs	r2, #0
                        macconf->Speed |
 80048e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	7f1b      	ldrb	r3, [r3, #28]
 80048e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80048e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80048ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	791b      	ldrb	r3, [r3, #4]
 80048f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80048f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80048fe:	2a00      	cmp	r2, #0
 8004900:	d102      	bne.n	8004908 <ETH_SetMACConfig+0x90>
 8004902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004906:	e000      	b.n	800490a <ETH_SetMACConfig+0x92>
 8004908:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800490a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	7bdb      	ldrb	r3, [r3, #15]
 8004910:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004912:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004918:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004920:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004922:	4313      	orrs	r3, r2
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800493a:	2001      	movs	r0, #1
 800493c:	f7fd fd66 	bl	800240c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004956:	4013      	ands	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004966:	2a00      	cmp	r2, #0
 8004968:	d101      	bne.n	800496e <ETH_SetMACConfig+0xf6>
 800496a:	2280      	movs	r2, #128	@ 0x80
 800496c:	e000      	b.n	8004970 <ETH_SetMACConfig+0xf8>
 800496e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004970:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004976:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800497e:	2a01      	cmp	r2, #1
 8004980:	d101      	bne.n	8004986 <ETH_SetMACConfig+0x10e>
 8004982:	2208      	movs	r2, #8
 8004984:	e000      	b.n	8004988 <ETH_SetMACConfig+0x110>
 8004986:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004988:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004990:	2a01      	cmp	r2, #1
 8004992:	d101      	bne.n	8004998 <ETH_SetMACConfig+0x120>
 8004994:	2204      	movs	r2, #4
 8004996:	e000      	b.n	800499a <ETH_SetMACConfig+0x122>
 8004998:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800499a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80049a2:	2a01      	cmp	r2, #1
 80049a4:	d101      	bne.n	80049aa <ETH_SetMACConfig+0x132>
 80049a6:	2202      	movs	r2, #2
 80049a8:	e000      	b.n	80049ac <ETH_SetMACConfig+0x134>
 80049aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049ac:	4313      	orrs	r3, r2
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049c4:	2001      	movs	r0, #1
 80049c6:	f7fd fd21 	bl	800240c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	619a      	str	r2, [r3, #24]
}
 80049d2:	bf00      	nop
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	fd20810f 	.word	0xfd20810f

080049e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4b3d      	ldr	r3, [pc, #244]	@ (8004af0 <ETH_SetDMAConfig+0x110>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	7b1b      	ldrb	r3, [r3, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <ETH_SetDMAConfig+0x2c>
 8004a06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004a0a:	e000      	b.n	8004a0e <ETH_SetDMAConfig+0x2e>
 8004a0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	7b5b      	ldrb	r3, [r3, #13]
 8004a12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	7f52      	ldrb	r2, [r2, #29]
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	d102      	bne.n	8004a24 <ETH_SetDMAConfig+0x44>
 8004a1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a22:	e000      	b.n	8004a26 <ETH_SetDMAConfig+0x46>
 8004a24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	7b9b      	ldrb	r3, [r3, #14]
 8004a2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	7f1b      	ldrb	r3, [r3, #28]
 8004a3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004a3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	7f9b      	ldrb	r3, [r3, #30]
 8004a42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a54:	4313      	orrs	r3, r2
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a64:	461a      	mov	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a76:	2001      	movs	r0, #1
 8004a78:	f7fd fcc8 	bl	800240c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a84:	461a      	mov	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	791b      	ldrb	r3, [r3, #4]
 8004a8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004a9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004aa0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004aa8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004aaa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ab2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004ab8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ac2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ac6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	f7fd fc99 	bl	800240c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6013      	str	r3, [r2, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	f8de3f23 	.word	0xf8de3f23

08004af4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b0a6      	sub	sp, #152	@ 0x98
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b36:	2300      	movs	r3, #0
 8004b38:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b60:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004b62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004b6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fe7f 	bl	8004878 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004baa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004bb4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004bb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bba:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004bca:	f107 0308 	add.w	r3, r7, #8
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff ff05 	bl	80049e0 <ETH_SetDMAConfig>
}
 8004bd6:	bf00      	nop
 8004bd8:	3798      	adds	r7, #152	@ 0x98
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3305      	adds	r3, #5
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	3204      	adds	r2, #4
 8004bf8:	7812      	ldrb	r2, [r2, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	4b11      	ldr	r3, [pc, #68]	@ (8004c48 <ETH_MACAddressConfig+0x68>)
 8004c02:	4413      	add	r3, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3303      	adds	r3, #3
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	061a      	lsls	r2, r3, #24
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3302      	adds	r3, #2
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	4313      	orrs	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <ETH_MACAddressConfig+0x6c>)
 8004c32:	4413      	add	r3, r2
 8004c34:	461a      	mov	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	6013      	str	r3, [r2, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40028040 	.word	0x40028040
 8004c4c:	40028044 	.word	0x40028044

08004c50 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	e03e      	b.n	8004cdc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68d9      	ldr	r1, [r3, #12]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	440b      	add	r3, r1
 8004c6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2200      	movs	r2, #0
 8004c86:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	3206      	adds	r2, #6
 8004c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d80c      	bhi.n	8004cc0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68d9      	ldr	r1, [r3, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	440b      	add	r3, r1
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	e004      	b.n	8004cca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d9bd      	bls.n	8004c5e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cf4:	611a      	str	r2, [r3, #16]
}
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e048      	b.n	8004da2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6919      	ldr	r1, [r3, #16]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	440b      	add	r3, r1
 8004d20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2200      	movs	r2, #0
 8004d32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2200      	movs	r2, #0
 8004d38:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2200      	movs	r2, #0
 8004d44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d4c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	3212      	adds	r2, #18
 8004d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d80c      	bhi.n	8004d92 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6919      	ldr	r1, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	440b      	add	r3, r1
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	60da      	str	r2, [r3, #12]
 8004d90:	e004      	b.n	8004d9c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	461a      	mov	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d9b3      	bls.n	8004d10 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dd2:	60da      	str	r2, [r3, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b091      	sub	sp, #68	@ 0x44
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3318      	adds	r3, #24
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e22:	d007      	beq.n	8004e34 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e28:	3304      	adds	r3, #4
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004e34:	2302      	movs	r3, #2
 8004e36:	e111      	b.n	800505c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e46:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	4b86      	ldr	r3, [pc, #536]	@ (8005068 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e52:	6852      	ldr	r2, [r2, #4]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004eba:	e082      	b.n	8004fc2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d006      	beq.n	8004edc <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e005      	b.n	8004ee8 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eea:	3301      	adds	r3, #1
 8004eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d902      	bls.n	8004efa <ETH_Prepare_Tx_Descriptors+0x11a>
 8004ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f02:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f10:	d007      	beq.n	8004f22 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f16:	3304      	adds	r3, #4
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d029      	beq.n	8004f76 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004f30:	2300      	movs	r3, #0
 8004f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f34:	e019      	b.n	8004f6a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004f36:	f3bf 8f5f 	dmb	sy
}
 8004f3a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d902      	bls.n	8004f5a <ETH_Prepare_Tx_Descriptors+0x17a>
 8004f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f56:	3b04      	subs	r3, #4
 8004f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f62:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f66:	3301      	adds	r3, #1
 8004f68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d3e1      	bcc.n	8004f36 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004f72:	2302      	movs	r3, #2
 8004f74:	e072      	b.n	800505c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f84:	3301      	adds	r3, #1
 8004f86:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	4b32      	ldr	r3, [pc, #200]	@ (8005068 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fa2:	6852      	ldr	r2, [r2, #4]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fac:	3301      	adds	r3, #1
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004fb0:	f3bf 8f5f 	dmb	sy
}
 8004fb4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f47f af78 	bne.w	8004ebc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d006      	beq.n	8004fe0 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e005      	b.n	8004fec <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	6a3a      	ldr	r2, [r7, #32]
 8004ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005000:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005002:	f3bf 8f5f 	dmb	sy
}
 8005006:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800501a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501c:	3304      	adds	r3, #4
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005028:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502a:	f3ef 8310 	mrs	r3, PRIMASK
 800502e:	613b      	str	r3, [r7, #16]
  return(result);
 8005030:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	2301      	movs	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f383 8810 	msr	PRIMASK, r3
}
 800503e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005046:	4413      	add	r3, r2
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	629a      	str	r2, [r3, #40]	@ 0x28
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f383 8810 	msr	PRIMASK, r3
}
 8005058:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3744      	adds	r7, #68	@ 0x44
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	ffffe000 	.word	0xffffe000

0800506c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800506c:	b480      	push	{r7}
 800506e:	b089      	sub	sp, #36	@ 0x24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	e175      	b.n	8005378 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800508c:	2201      	movs	r2, #1
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4013      	ands	r3, r2
 800509e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	f040 8164 	bne.w	8005372 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d005      	beq.n	80050c2 <HAL_GPIO_Init+0x56>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d130      	bne.n	8005124 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	2203      	movs	r2, #3
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f8:	2201      	movs	r2, #1
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 0201 	and.w	r2, r3, #1
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	2b03      	cmp	r3, #3
 800512e:	d017      	beq.n	8005160 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	2203      	movs	r2, #3
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d123      	bne.n	80051b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	08da      	lsrs	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3208      	adds	r2, #8
 8005174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	220f      	movs	r2, #15
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	08da      	lsrs	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3208      	adds	r2, #8
 80051ae:	69b9      	ldr	r1, [r7, #24]
 80051b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	2203      	movs	r2, #3
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0203 	and.w	r2, r3, #3
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80be 	beq.w	8005372 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f6:	4b66      	ldr	r3, [pc, #408]	@ (8005390 <HAL_GPIO_Init+0x324>)
 80051f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fa:	4a65      	ldr	r2, [pc, #404]	@ (8005390 <HAL_GPIO_Init+0x324>)
 80051fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005200:	6453      	str	r3, [r2, #68]	@ 0x44
 8005202:	4b63      	ldr	r3, [pc, #396]	@ (8005390 <HAL_GPIO_Init+0x324>)
 8005204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800520e:	4a61      	ldr	r2, [pc, #388]	@ (8005394 <HAL_GPIO_Init+0x328>)
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	089b      	lsrs	r3, r3, #2
 8005214:	3302      	adds	r3, #2
 8005216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	220f      	movs	r2, #15
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4013      	ands	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a58      	ldr	r2, [pc, #352]	@ (8005398 <HAL_GPIO_Init+0x32c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d037      	beq.n	80052aa <HAL_GPIO_Init+0x23e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a57      	ldr	r2, [pc, #348]	@ (800539c <HAL_GPIO_Init+0x330>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d031      	beq.n	80052a6 <HAL_GPIO_Init+0x23a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a56      	ldr	r2, [pc, #344]	@ (80053a0 <HAL_GPIO_Init+0x334>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d02b      	beq.n	80052a2 <HAL_GPIO_Init+0x236>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a55      	ldr	r2, [pc, #340]	@ (80053a4 <HAL_GPIO_Init+0x338>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d025      	beq.n	800529e <HAL_GPIO_Init+0x232>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a54      	ldr	r2, [pc, #336]	@ (80053a8 <HAL_GPIO_Init+0x33c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01f      	beq.n	800529a <HAL_GPIO_Init+0x22e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a53      	ldr	r2, [pc, #332]	@ (80053ac <HAL_GPIO_Init+0x340>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d019      	beq.n	8005296 <HAL_GPIO_Init+0x22a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a52      	ldr	r2, [pc, #328]	@ (80053b0 <HAL_GPIO_Init+0x344>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_GPIO_Init+0x226>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a51      	ldr	r2, [pc, #324]	@ (80053b4 <HAL_GPIO_Init+0x348>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00d      	beq.n	800528e <HAL_GPIO_Init+0x222>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a50      	ldr	r2, [pc, #320]	@ (80053b8 <HAL_GPIO_Init+0x34c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <HAL_GPIO_Init+0x21e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a4f      	ldr	r2, [pc, #316]	@ (80053bc <HAL_GPIO_Init+0x350>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d101      	bne.n	8005286 <HAL_GPIO_Init+0x21a>
 8005282:	2309      	movs	r3, #9
 8005284:	e012      	b.n	80052ac <HAL_GPIO_Init+0x240>
 8005286:	230a      	movs	r3, #10
 8005288:	e010      	b.n	80052ac <HAL_GPIO_Init+0x240>
 800528a:	2308      	movs	r3, #8
 800528c:	e00e      	b.n	80052ac <HAL_GPIO_Init+0x240>
 800528e:	2307      	movs	r3, #7
 8005290:	e00c      	b.n	80052ac <HAL_GPIO_Init+0x240>
 8005292:	2306      	movs	r3, #6
 8005294:	e00a      	b.n	80052ac <HAL_GPIO_Init+0x240>
 8005296:	2305      	movs	r3, #5
 8005298:	e008      	b.n	80052ac <HAL_GPIO_Init+0x240>
 800529a:	2304      	movs	r3, #4
 800529c:	e006      	b.n	80052ac <HAL_GPIO_Init+0x240>
 800529e:	2303      	movs	r3, #3
 80052a0:	e004      	b.n	80052ac <HAL_GPIO_Init+0x240>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e002      	b.n	80052ac <HAL_GPIO_Init+0x240>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_GPIO_Init+0x240>
 80052aa:	2300      	movs	r3, #0
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	f002 0203 	and.w	r2, r2, #3
 80052b2:	0092      	lsls	r2, r2, #2
 80052b4:	4093      	lsls	r3, r2
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80052bc:	4935      	ldr	r1, [pc, #212]	@ (8005394 <HAL_GPIO_Init+0x328>)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	089b      	lsrs	r3, r3, #2
 80052c2:	3302      	adds	r3, #2
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ca:	4b3d      	ldr	r3, [pc, #244]	@ (80053c0 <HAL_GPIO_Init+0x354>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	43db      	mvns	r3, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4013      	ands	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052ee:	4a34      	ldr	r2, [pc, #208]	@ (80053c0 <HAL_GPIO_Init+0x354>)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052f4:	4b32      	ldr	r3, [pc, #200]	@ (80053c0 <HAL_GPIO_Init+0x354>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4013      	ands	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005318:	4a29      	ldr	r2, [pc, #164]	@ (80053c0 <HAL_GPIO_Init+0x354>)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800531e:	4b28      	ldr	r3, [pc, #160]	@ (80053c0 <HAL_GPIO_Init+0x354>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005342:	4a1f      	ldr	r2, [pc, #124]	@ (80053c0 <HAL_GPIO_Init+0x354>)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005348:	4b1d      	ldr	r3, [pc, #116]	@ (80053c0 <HAL_GPIO_Init+0x354>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800536c:	4a14      	ldr	r2, [pc, #80]	@ (80053c0 <HAL_GPIO_Init+0x354>)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3301      	adds	r3, #1
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	f67f ae86 	bls.w	800508c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	3724      	adds	r7, #36	@ 0x24
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800
 8005394:	40013800 	.word	0x40013800
 8005398:	40020000 	.word	0x40020000
 800539c:	40020400 	.word	0x40020400
 80053a0:	40020800 	.word	0x40020800
 80053a4:	40020c00 	.word	0x40020c00
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40021400 	.word	0x40021400
 80053b0:	40021800 	.word	0x40021800
 80053b4:	40021c00 	.word	0x40021c00
 80053b8:	40022000 	.word	0x40022000
 80053bc:	40022400 	.word	0x40022400
 80053c0:	40013c00 	.word	0x40013c00

080053c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e08b      	b.n	80054ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fb fcea 	bl	8000dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2224      	movs	r2, #36	@ 0x24
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0201 	bic.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005414:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005424:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d107      	bne.n	800543e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	e006      	b.n	800544c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800544a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d108      	bne.n	8005466 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	e007      	b.n	8005476 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005474:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b1d      	ldr	r3, [pc, #116]	@ (80054f8 <HAL_I2C_Init+0x134>)
 8005482:	430b      	orrs	r3, r1
 8005484:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005494:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69d9      	ldr	r1, [r3, #28]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	02008000 	.word	0x02008000

080054fc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	@ 0x28
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	461a      	mov	r2, r3
 8005508:	460b      	mov	r3, r1
 800550a:	817b      	strh	r3, [r7, #10]
 800550c:	4613      	mov	r3, r2
 800550e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b20      	cmp	r3, #32
 800551e:	f040 80ef 	bne.w	8005700 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800552c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005530:	d101      	bne.n	8005536 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005532:	2302      	movs	r3, #2
 8005534:	e0e5      	b.n	8005702 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005540:	2302      	movs	r3, #2
 8005542:	e0de      	b.n	8005702 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2221      	movs	r2, #33	@ 0x21
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2210      	movs	r2, #16
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	893a      	ldrh	r2, [r7, #8]
 800556c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a66      	ldr	r2, [pc, #408]	@ (800570c <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005572:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a66      	ldr	r2, [pc, #408]	@ (8005710 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005578:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	2bff      	cmp	r3, #255	@ 0xff
 8005582:	d906      	bls.n	8005592 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	22ff      	movs	r2, #255	@ 0xff
 8005588:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800558a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	e007      	b.n	80055a2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800559c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055a0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01a      	beq.n	80055e0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	781a      	ldrb	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d074      	beq.n	80056d2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d022      	beq.n	8005636 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	4a47      	ldr	r2, [pc, #284]	@ (8005714 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80055f6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fc:	4a46      	ldr	r2, [pc, #280]	@ (8005718 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80055fe:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005604:	2200      	movs	r2, #0
 8005606:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560c:	2200      	movs	r2, #0
 800560e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005620:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005626:	f7fd ff35 	bl	8003494 <HAL_DMA_Start_IT>
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800562e:	7dfb      	ldrb	r3, [r7, #23]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d13a      	bne.n	80056aa <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005634:	e013      	b.n	800565e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e051      	b.n	8005702 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005662:	b2db      	uxtb	r3, r3
 8005664:	3301      	adds	r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	8979      	ldrh	r1, [r7, #10]
 800566a:	4b2c      	ldr	r3, [pc, #176]	@ (800571c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f001 ff3f 	bl	80074f4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005690:	2110      	movs	r1, #16
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f001 ff60 	bl	8007558 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e028      	b.n	80056fc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056be:	f043 0210 	orr.w	r2, r3, #16
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e017      	b.n	8005702 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a12      	ldr	r2, [pc, #72]	@ (8005720 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80056d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	8979      	ldrh	r1, [r7, #10]
 80056de:	4b0f      	ldr	r3, [pc, #60]	@ (800571c <HAL_I2C_Master_Transmit_DMA+0x220>)
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f001 ff04 	bl	80074f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80056f4:	2101      	movs	r1, #1
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f001 ff2e 	bl	8007558 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e000      	b.n	8005702 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005700:	2302      	movs	r3, #2
  }
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	ffff0000 	.word	0xffff0000
 8005710:	0800624b 	.word	0x0800624b
 8005714:	08007277 	.word	0x08007277
 8005718:	08007445 	.word	0x08007445
 800571c:	80002000 	.word	0x80002000
 8005720:	08005dbf 	.word	0x08005dbf

08005724 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	607a      	str	r2, [r7, #4]
 800572e:	461a      	mov	r2, r3
 8005730:	460b      	mov	r3, r1
 8005732:	817b      	strh	r3, [r7, #10]
 8005734:	4613      	mov	r3, r2
 8005736:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b20      	cmp	r3, #32
 8005742:	f040 80cd 	bne.w	80058e0 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005754:	d101      	bne.n	800575a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005756:	2302      	movs	r3, #2
 8005758:	e0c3      	b.n	80058e2 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_I2C_Master_Receive_DMA+0x44>
 8005764:	2302      	movs	r3, #2
 8005766:	e0bc      	b.n	80058e2 <HAL_I2C_Master_Receive_DMA+0x1be>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2222      	movs	r2, #34	@ 0x22
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2210      	movs	r2, #16
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	893a      	ldrh	r2, [r7, #8]
 8005790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4a55      	ldr	r2, [pc, #340]	@ (80058ec <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005796:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4a55      	ldr	r2, [pc, #340]	@ (80058f0 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800579c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2bff      	cmp	r3, #255	@ 0xff
 80057a6:	d906      	bls.n	80057b6 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80057ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e007      	b.n	80057c6 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80057c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057c4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d070      	beq.n	80058b0 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d020      	beq.n	8005818 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057da:	4a46      	ldr	r2, [pc, #280]	@ (80058f4 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80057dc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e2:	4a45      	ldr	r2, [pc, #276]	@ (80058f8 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80057e4:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ea:	2200      	movs	r2, #0
 80057ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f2:	2200      	movs	r2, #0
 80057f4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3324      	adds	r3, #36	@ 0x24
 8005800:	4619      	mov	r1, r3
 8005802:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005808:	f7fd fe44 	bl	8003494 <HAL_DMA_Start_IT>
 800580c:	4603      	mov	r3, r0
 800580e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005810:	7cfb      	ldrb	r3, [r7, #19]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d138      	bne.n	8005888 <HAL_I2C_Master_Receive_DMA+0x164>
 8005816:	e013      	b.n	8005840 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e050      	b.n	80058e2 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005844:	b2da      	uxtb	r2, r3
 8005846:	8979      	ldrh	r1, [r7, #10]
 8005848:	4b2c      	ldr	r3, [pc, #176]	@ (80058fc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f001 fe50 	bl	80074f4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800586e:	2110      	movs	r1, #16
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f001 fe71 	bl	8007558 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e029      	b.n	80058dc <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589c:	f043 0210 	orr.w	r2, r3, #16
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e018      	b.n	80058e2 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4a13      	ldr	r2, [pc, #76]	@ (8005900 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80058b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	8979      	ldrh	r1, [r7, #10]
 80058be:	4b0f      	ldr	r3, [pc, #60]	@ (80058fc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f001 fe14 	bl	80074f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058d4:	2102      	movs	r1, #2
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f001 fe3e 	bl	8007558 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	e000      	b.n	80058e2 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80058e0:	2302      	movs	r3, #2
  }
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	ffff0000 	.word	0xffff0000
 80058f0:	0800624b 	.word	0x0800624b
 80058f4:	0800734d 	.word	0x0800734d
 80058f8:	08007445 	.word	0x08007445
 80058fc:	80002400 	.word	0x80002400
 8005900:	08005dbf 	.word	0x08005dbf

08005904 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b20      	cmp	r3, #32
 800591c:	f040 80d1 	bne.w	8005ac2 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005932:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0c5      	b.n	8005ac4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005942:	2302      	movs	r3, #2
 8005944:	e0be      	b.n	8005ac4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2221      	movs	r2, #33	@ 0x21
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a53      	ldr	r2, [pc, #332]	@ (8005acc <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 800597e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a53      	ldr	r2, [pc, #332]	@ (8005ad0 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 8005984:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800598e:	d117      	bne.n	80059c0 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d068      	beq.n	8005a9c <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d022      	beq.n	8005a18 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ad4 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 80059d8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	4a3e      	ldr	r2, [pc, #248]	@ (8005ad8 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 80059e0:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e6:	2200      	movs	r2, #0
 80059e8:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ee:	2200      	movs	r2, #0
 80059f0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 80059fa:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a02:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a08:	f7fd fd44 	bl	8003494 <HAL_DMA_Start_IT>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d12e      	bne.n	8005a74 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005a16:	e013      	b.n	8005a40 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2228      	movs	r2, #40	@ 0x28
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e041      	b.n	8005ac4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a4e:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f001 fd7b 	bl	8007558 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	e024      	b.n	8005abe <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2228      	movs	r2, #40	@ 0x28
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a88:	f043 0210 	orr.w	r2, r3, #16
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e013      	b.n	8005ac4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005aaa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ab4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f001 fd4d 	bl	8007558 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e000      	b.n	8005ac4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005ac2:	2302      	movs	r3, #2
  }
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	ffff0000 	.word	0xffff0000
 8005ad0:	080066ed 	.word	0x080066ed
 8005ad4:	0800730d 	.word	0x0800730d
 8005ad8:	08007445 	.word	0x08007445

08005adc <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	f040 809b 	bne.w	8005c2e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b0a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e08f      	b.n	8005c30 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_I2C_Slave_Receive_DMA+0x42>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e088      	b.n	8005c30 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2222      	movs	r2, #34	@ 0x22
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	88fa      	ldrh	r2, [r7, #6]
 8005b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a38      	ldr	r2, [pc, #224]	@ (8005c38 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005b56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a38      	ldr	r2, [pc, #224]	@ (8005c3c <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005b5c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6a:	4a35      	ldr	r2, [pc, #212]	@ (8005c40 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b72:	4a34      	ldr	r2, [pc, #208]	@ (8005c44 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005b74:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b82:	2200      	movs	r2, #0
 8005b84:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3324      	adds	r3, #36	@ 0x24
 8005b90:	4619      	mov	r1, r3
 8005b92:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005b98:	f7fd fc7c 	bl	8003494 <HAL_DMA_Start_IT>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d12f      	bne.n	8005c06 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005ba6:	e013      	b.n	8005bd0 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2228      	movs	r2, #40	@ 0x28
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e02f      	b.n	8005c30 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bde:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005be8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f001 fcb3 	bl	8007558 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c00:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e014      	b.n	8005c30 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2228      	movs	r2, #40	@ 0x28
 8005c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1a:	f043 0210 	orr.w	r2, r3, #16
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005c2e:	2302      	movs	r3, #2
  }
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	ffff0000 	.word	0xffff0000
 8005c3c:	080066ed 	.word	0x080066ed
 8005c40:	080073ff 	.word	0x080073ff
 8005c44:	08007445 	.word	0x08007445

08005c48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
  }
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d010      	beq.n	8005cc2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	09db      	lsrs	r3, r3, #7
 8005ca4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb0:	f043 0201 	orr.w	r2, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cc0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	0a9b      	lsrs	r3, r3, #10
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d010      	beq.n	8005cf0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	09db      	lsrs	r3, r3, #7
 8005cd2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cde:	f043 0208 	orr.w	r2, r3, #8
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	0a5b      	lsrs	r3, r3, #9
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d010      	beq.n	8005d1e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	09db      	lsrs	r3, r3, #7
 8005d00:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0c:	f043 0202 	orr.w	r2, r3, #2
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d1c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 030b 	and.w	r3, r3, #11
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f965 	bl	8007000 <I2C_ITError>
  }
}
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	70fb      	strb	r3, [r7, #3]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af02      	add	r7, sp, #8
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <I2C_Master_ISR_IT+0x1e>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e12e      	b.n	800603a <I2C_Master_ISR_IT+0x27c>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	091b      	lsrs	r3, r3, #4
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d013      	beq.n	8005e18 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	091b      	lsrs	r3, r3, #4
 8005df4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00d      	beq.n	8005e18 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2210      	movs	r2, #16
 8005e02:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e08:	f043 0204 	orr.w	r2, r3, #4
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f001 fa0c 	bl	800722e <I2C_Flush_TXDR>
 8005e16:	e0fb      	b.n	8006010 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	089b      	lsrs	r3, r3, #2
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d023      	beq.n	8005e6c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01d      	beq.n	8005e6c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0304 	bic.w	r3, r3, #4
 8005e36:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e6a:	e0d1      	b.n	8006010 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	099b      	lsrs	r3, r3, #6
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d12a      	bne.n	8005ece <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	085b      	lsrs	r3, r3, #1
 8005e7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d024      	beq.n	8005ece <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01e      	beq.n	8005ece <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 80ba 	beq.w	8006010 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005ecc:	e0a0      	b.n	8006010 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	09db      	lsrs	r3, r3, #7
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d06b      	beq.n	8005fb2 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	099b      	lsrs	r3, r3, #6
 8005ede:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d065      	beq.n	8005fb2 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d04e      	beq.n	8005f8e <I2C_Master_ISR_IT+0x1d0>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d14a      	bne.n	8005f8e <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f04:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2bff      	cmp	r3, #255	@ 0xff
 8005f0e:	d91c      	bls.n	8005f4a <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d103      	bne.n	8005f2c <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f2a:	e002      	b.n	8005f32 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	22ff      	movs	r2, #255	@ 0xff
 8005f30:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	8a79      	ldrh	r1, [r7, #18]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f001 fad6 	bl	80074f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f48:	e032      	b.n	8005fb0 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f5c:	d00b      	beq.n	8005f76 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f62:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f68:	8a79      	ldrh	r1, [r7, #18]
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	9000      	str	r0, [sp, #0]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f001 fac0 	bl	80074f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f74:	e01c      	b.n	8005fb0 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	8a79      	ldrh	r1, [r7, #18]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f001 fab4 	bl	80074f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f8c:	e010      	b.n	8005fb0 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f9c:	d003      	beq.n	8005fa6 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fd09 	bl	80069b6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fa4:	e034      	b.n	8006010 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fa6:	2140      	movs	r1, #64	@ 0x40
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f001 f829 	bl	8007000 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fae:	e02f      	b.n	8006010 <I2C_Master_ISR_IT+0x252>
 8005fb0:	e02e      	b.n	8006010 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	099b      	lsrs	r3, r3, #6
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d028      	beq.n	8006010 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	099b      	lsrs	r3, r3, #6
 8005fc2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d022      	beq.n	8006010 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d119      	bne.n	8006008 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fe2:	d015      	beq.n	8006010 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fec:	d108      	bne.n	8006000 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ffc:	605a      	str	r2, [r3, #4]
 8005ffe:	e007      	b.n	8006010 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fcd8 	bl	80069b6 <I2C_ITMasterSeqCplt>
 8006006:	e003      	b.n	8006010 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006008:	2140      	movs	r1, #64	@ 0x40
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fff8 	bl	8007000 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006028:	6979      	ldr	r1, [r7, #20]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fd5e 	bl	8006aec <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <I2C_Slave_ISR_IT+0x24>
 8006062:	2302      	movs	r3, #2
 8006064:	e0ed      	b.n	8006242 <I2C_Slave_ISR_IT+0x200>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006082:	2b00      	cmp	r3, #0
 8006084:	d004      	beq.n	8006090 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006086:	6939      	ldr	r1, [r7, #16]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fdf9 	bl	8006c80 <I2C_ITSlaveCplt>
 800608e:	e0d3      	b.n	8006238 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d04d      	beq.n	8006138 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	091b      	lsrs	r3, r3, #4
 80060a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d047      	beq.n	8006138 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d128      	bne.n	8006104 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b28      	cmp	r3, #40	@ 0x28
 80060bc:	d108      	bne.n	80060d0 <I2C_Slave_ISR_IT+0x8e>
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060c4:	d104      	bne.n	80060d0 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80060c6:	6939      	ldr	r1, [r7, #16]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 ff43 	bl	8006f54 <I2C_ITListenCplt>
 80060ce:	e032      	b.n	8006136 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b29      	cmp	r3, #41	@ 0x29
 80060da:	d10e      	bne.n	80060fa <I2C_Slave_ISR_IT+0xb8>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060e2:	d00a      	beq.n	80060fa <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2210      	movs	r2, #16
 80060ea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f001 f89e 	bl	800722e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 fc9c 	bl	8006a30 <I2C_ITSlaveSeqCplt>
 80060f8:	e01d      	b.n	8006136 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2210      	movs	r2, #16
 8006100:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006102:	e096      	b.n	8006232 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2210      	movs	r2, #16
 800610a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006110:	f043 0204 	orr.w	r2, r3, #4
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <I2C_Slave_ISR_IT+0xe6>
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006124:	f040 8085 	bne.w	8006232 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612c:	4619      	mov	r1, r3
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 ff66 	bl	8007000 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006134:	e07d      	b.n	8006232 <I2C_Slave_ISR_IT+0x1f0>
 8006136:	e07c      	b.n	8006232 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	089b      	lsrs	r3, r3, #2
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d030      	beq.n	80061a6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800614c:	2b00      	cmp	r3, #0
 800614e:	d02a      	beq.n	80061a6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d018      	beq.n	800618c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d14f      	bne.n	8006236 <I2C_Slave_ISR_IT+0x1f4>
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800619c:	d04b      	beq.n	8006236 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fc46 	bl	8006a30 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80061a4:	e047      	b.n	8006236 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	08db      	lsrs	r3, r3, #3
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	08db      	lsrs	r3, r3, #3
 80061b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d004      	beq.n	80061c8 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80061be:	6939      	ldr	r1, [r7, #16]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fb74 	bl	80068ae <I2C_ITAddrCplt>
 80061c6:	e037      	b.n	8006238 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d031      	beq.n	8006238 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d02b      	beq.n	8006238 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d018      	beq.n	800621c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ee:	781a      	ldrb	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	851a      	strh	r2, [r3, #40]	@ 0x28
 800621a:	e00d      	b.n	8006238 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006222:	d002      	beq.n	800622a <I2C_Slave_ISR_IT+0x1e8>
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fc00 	bl	8006a30 <I2C_ITSlaveSeqCplt>
 8006230:	e002      	b.n	8006238 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006232:	bf00      	nop
 8006234:	e000      	b.n	8006238 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006236:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b088      	sub	sp, #32
 800624e:	af02      	add	r7, sp, #8
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <I2C_Master_ISR_DMA+0x1a>
 8006260:	2302      	movs	r3, #2
 8006262:	e0f0      	b.n	8006446 <I2C_Master_ISR_DMA+0x1fc>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	091b      	lsrs	r3, r3, #4
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d017      	beq.n	80062a8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	091b      	lsrs	r3, r3, #4
 800627c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006280:	2b00      	cmp	r3, #0
 8006282:	d011      	beq.n	80062a8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2210      	movs	r2, #16
 800628a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006290:	f043 0204 	orr.w	r2, r3, #4
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006298:	2120      	movs	r1, #32
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f001 f95c 	bl	8007558 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 ffc4 	bl	800722e <I2C_Flush_TXDR>
 80062a6:	e0c9      	b.n	800643c <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	09db      	lsrs	r3, r3, #7
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8081 	beq.w	80063b8 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	099b      	lsrs	r3, r3, #6
 80062ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d07a      	beq.n	80063b8 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062d0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d05c      	beq.n	8006396 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062e8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2bff      	cmp	r3, #255	@ 0xff
 80062f2:	d914      	bls.n	800631e <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	0c1b      	lsrs	r3, r3, #16
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	d103      	bne.n	8006310 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800630e:	e002      	b.n	8006316 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	22ff      	movs	r2, #255	@ 0xff
 8006314:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8006316:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	e010      	b.n	8006340 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006330:	d003      	beq.n	800633a <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	e002      	b.n	8006340 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800633a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800633e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006344:	b2da      	uxtb	r2, r3
 8006346:	8a79      	ldrh	r1, [r7, #18]
 8006348:	2300      	movs	r3, #0
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 f8d0 	bl	80074f4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b22      	cmp	r3, #34	@ 0x22
 8006370:	d108      	bne.n	8006384 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006380:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006382:	e05b      	b.n	800643c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006392:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006394:	e052      	b.n	800643c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063a4:	d003      	beq.n	80063ae <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fb05 	bl	80069b6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80063ac:	e046      	b.n	800643c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063ae:	2140      	movs	r1, #64	@ 0x40
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fe25 	bl	8007000 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80063b6:	e041      	b.n	800643c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	099b      	lsrs	r3, r3, #6
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d029      	beq.n	8006418 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	099b      	lsrs	r3, r3, #6
 80063c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d023      	beq.n	8006418 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d119      	bne.n	800640e <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063e8:	d027      	beq.n	800643a <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063f2:	d108      	bne.n	8006406 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006402:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006404:	e019      	b.n	800643a <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fad5 	bl	80069b6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800640c:	e015      	b.n	800643a <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800640e:	2140      	movs	r1, #64	@ 0x40
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fdf5 	bl	8007000 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006416:	e010      	b.n	800643a <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fb5a 	bl	8006aec <I2C_ITMasterCplt>
 8006438:	e000      	b.n	800643c <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800643a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800645c:	4b94      	ldr	r3, [pc, #592]	@ (80066b0 <I2C_Mem_ISR_DMA+0x260>)
 800645e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <I2C_Mem_ISR_DMA+0x1e>
 800646a:	2302      	movs	r3, #2
 800646c:	e139      	b.n	80066e2 <I2C_Mem_ISR_DMA+0x292>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	091b      	lsrs	r3, r3, #4
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d017      	beq.n	80064b2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	091b      	lsrs	r3, r3, #4
 8006486:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800648a:	2b00      	cmp	r3, #0
 800648c:	d011      	beq.n	80064b2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2210      	movs	r2, #16
 8006494:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649a:	f043 0204 	orr.w	r2, r3, #4
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064a2:	2120      	movs	r1, #32
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f001 f857 	bl	8007558 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 febf 	bl	800722e <I2C_Flush_TXDR>
 80064b0:	e112      	b.n	80066d8 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00f      	beq.n	80064de <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064da:	651a      	str	r2, [r3, #80]	@ 0x50
 80064dc:	e0fc      	b.n	80066d8 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	09db      	lsrs	r3, r3, #7
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d06e      	beq.n	80065c8 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	099b      	lsrs	r3, r3, #6
 80064ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d068      	beq.n	80065c8 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064f6:	2101      	movs	r1, #1
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f001 f8b1 	bl	8007660 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80064fe:	2110      	movs	r1, #16
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f001 f829 	bl	8007558 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d056      	beq.n	80065be <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	2bff      	cmp	r3, #255	@ 0xff
 8006518:	d91e      	bls.n	8006558 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	0c1b      	lsrs	r3, r3, #16
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b01      	cmp	r3, #1
 800652c:	d103      	bne.n	8006536 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006534:	e002      	b.n	800653c <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	22ff      	movs	r2, #255	@ 0xff
 800653a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006540:	b299      	uxth	r1, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006546:	b2da      	uxtb	r2, r3
 8006548:	2300      	movs	r3, #0
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 ffcf 	bl	80074f4 <I2C_TransferConfig>
 8006556:	e011      	b.n	800657c <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006566:	b299      	uxth	r1, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800656c:	b2da      	uxtb	r2, r3
 800656e:	2300      	movs	r3, #0
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 ffbc 	bl	80074f4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b22      	cmp	r3, #34	@ 0x22
 8006598:	d108      	bne.n	80065ac <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065aa:	e095      	b.n	80066d8 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065ba:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065bc:	e08c      	b.n	80066d8 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065be:	2140      	movs	r1, #64	@ 0x40
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fd1d 	bl	8007000 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80065c6:	e087      	b.n	80066d8 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	099b      	lsrs	r3, r3, #6
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d071      	beq.n	80066b8 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	099b      	lsrs	r3, r3, #6
 80065d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d06b      	beq.n	80066b8 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80065e0:	2101      	movs	r1, #1
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f001 f83c 	bl	8007660 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80065e8:	2110      	movs	r1, #16
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 ffb4 	bl	8007558 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b22      	cmp	r3, #34	@ 0x22
 80065fa:	d101      	bne.n	8006600 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 80065fc:	4b2d      	ldr	r3, [pc, #180]	@ (80066b4 <I2C_Mem_ISR_DMA+0x264>)
 80065fe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006604:	b29b      	uxth	r3, r3
 8006606:	2bff      	cmp	r3, #255	@ 0xff
 8006608:	d91e      	bls.n	8006648 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b01      	cmp	r3, #1
 800661c:	d103      	bne.n	8006626 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006624:	e002      	b.n	800662c <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	22ff      	movs	r2, #255	@ 0xff
 800662a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006630:	b299      	uxth	r1, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006636:	b2da      	uxtb	r2, r3
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 ff57 	bl	80074f4 <I2C_TransferConfig>
 8006646:	e011      	b.n	800666c <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006656:	b299      	uxth	r1, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800665c:	b2da      	uxtb	r2, r3
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 ff44 	bl	80074f4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b22      	cmp	r3, #34	@ 0x22
 8006688:	d108      	bne.n	800669c <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006698:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800669a:	e01d      	b.n	80066d8 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066aa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ac:	e014      	b.n	80066d8 <I2C_Mem_ISR_DMA+0x288>
 80066ae:	bf00      	nop
 80066b0:	80002000 	.word	0x80002000
 80066b4:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d009      	beq.n	80066d8 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	095b      	lsrs	r3, r3, #5
 80066c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fa0a 	bl	8006aec <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop

080066ec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <I2C_Slave_ISR_DMA+0x24>
 800670c:	2302      	movs	r3, #2
 800670e:	e0ca      	b.n	80068a6 <I2C_Slave_ISR_DMA+0x1ba>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800672c:	2b00      	cmp	r3, #0
 800672e:	d004      	beq.n	800673a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 faa4 	bl	8006c80 <I2C_ITSlaveCplt>
 8006738:	e0b0      	b.n	800689c <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	091b      	lsrs	r3, r3, #4
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 809a 	beq.w	800687c <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	091b      	lsrs	r3, r3, #4
 800674c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8093 	beq.w	800687c <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	0b9b      	lsrs	r3, r3, #14
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d105      	bne.n	800676e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	0bdb      	lsrs	r3, r3, #15
 8006766:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800676a:	2b00      	cmp	r3, #0
 800676c:	d07f      	beq.n	800686e <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0bdb      	lsrs	r3, r3, #15
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800678e:	2301      	movs	r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00d      	beq.n	80067b6 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	0b9b      	lsrs	r3, r3, #14
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d128      	bne.n	800680e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b28      	cmp	r3, #40	@ 0x28
 80067c6:	d108      	bne.n	80067da <I2C_Slave_ISR_DMA+0xee>
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067ce:	d104      	bne.n	80067da <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fbbe 	bl	8006f54 <I2C_ITListenCplt>
 80067d8:	e048      	b.n	800686c <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b29      	cmp	r3, #41	@ 0x29
 80067e4:	d10e      	bne.n	8006804 <I2C_Slave_ISR_DMA+0x118>
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067ec:	d00a      	beq.n	8006804 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2210      	movs	r2, #16
 80067f4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fd19 	bl	800722e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f917 	bl	8006a30 <I2C_ITSlaveSeqCplt>
 8006802:	e033      	b.n	800686c <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2210      	movs	r2, #16
 800680a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800680c:	e034      	b.n	8006878 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2210      	movs	r2, #16
 8006814:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681a:	f043 0204 	orr.w	r2, r3, #4
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006828:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <I2C_Slave_ISR_DMA+0x14c>
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006836:	d11f      	bne.n	8006878 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	2b21      	cmp	r3, #33	@ 0x21
 800683c:	d002      	beq.n	8006844 <I2C_Slave_ISR_DMA+0x158>
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	2b29      	cmp	r3, #41	@ 0x29
 8006842:	d103      	bne.n	800684c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2221      	movs	r2, #33	@ 0x21
 8006848:	631a      	str	r2, [r3, #48]	@ 0x30
 800684a:	e008      	b.n	800685e <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b22      	cmp	r3, #34	@ 0x22
 8006850:	d002      	beq.n	8006858 <I2C_Slave_ISR_DMA+0x16c>
 8006852:	7dfb      	ldrb	r3, [r7, #23]
 8006854:	2b2a      	cmp	r3, #42	@ 0x2a
 8006856:	d102      	bne.n	800685e <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2222      	movs	r2, #34	@ 0x22
 800685c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006862:	4619      	mov	r1, r3
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fbcb 	bl	8007000 <I2C_ITError>
      if (treatdmanack == 1U)
 800686a:	e005      	b.n	8006878 <I2C_Slave_ISR_DMA+0x18c>
 800686c:	e004      	b.n	8006878 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2210      	movs	r2, #16
 8006874:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006876:	e011      	b.n	800689c <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8006878:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800687a:	e00f      	b.n	800689c <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	08db      	lsrs	r3, r3, #3
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	08db      	lsrs	r3, r3, #3
 800688c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f809 	bl	80068ae <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3720      	adds	r7, #32
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80068c4:	2b28      	cmp	r3, #40	@ 0x28
 80068c6:	d16a      	bne.n	800699e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	0c1b      	lsrs	r3, r3, #16
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	0c1b      	lsrs	r3, r3, #16
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80068e6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068f4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006902:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d138      	bne.n	800697e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800690c:	897b      	ldrh	r3, [r7, #10]
 800690e:	09db      	lsrs	r3, r3, #7
 8006910:	b29a      	uxth	r2, r3
 8006912:	89bb      	ldrh	r3, [r7, #12]
 8006914:	4053      	eors	r3, r2
 8006916:	b29b      	uxth	r3, r3
 8006918:	f003 0306 	and.w	r3, r3, #6
 800691c:	2b00      	cmp	r3, #0
 800691e:	d11c      	bne.n	800695a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006920:	897b      	ldrh	r3, [r7, #10]
 8006922:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006932:	2b02      	cmp	r3, #2
 8006934:	d13b      	bne.n	80069ae <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2208      	movs	r2, #8
 8006942:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800694c:	89ba      	ldrh	r2, [r7, #12]
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff f9f3 	bl	8005d3e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006958:	e029      	b.n	80069ae <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800695a:	893b      	ldrh	r3, [r7, #8]
 800695c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800695e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fe7c 	bl	8007660 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006970:	89ba      	ldrh	r2, [r7, #12]
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff f9e1 	bl	8005d3e <HAL_I2C_AddrCallback>
}
 800697c:	e017      	b.n	80069ae <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800697e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fe6c 	bl	8007660 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006990:	89ba      	ldrh	r2, [r7, #12]
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff f9d1 	bl	8005d3e <HAL_I2C_AddrCallback>
}
 800699c:	e007      	b.n	80069ae <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2208      	movs	r2, #8
 80069a4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80069ae:	bf00      	nop
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b21      	cmp	r3, #33	@ 0x21
 80069d0:	d115      	bne.n	80069fe <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2211      	movs	r2, #17
 80069de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069e6:	2101      	movs	r1, #1
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fe39 	bl	8007660 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f019 fab8 	bl	801ff6c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069fc:	e014      	b.n	8006a28 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2212      	movs	r2, #18
 8006a0a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a12:	2102      	movs	r1, #2
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fe23 	bl	8007660 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f019 fab8 	bl	801ff98 <HAL_I2C_MasterRxCpltCallback>
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	0b9b      	lsrs	r3, r3, #14
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d008      	beq.n	8006a66 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	e00d      	b.n	8006a82 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	0bdb      	lsrs	r3, r3, #15
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d007      	beq.n	8006a82 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a80:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b29      	cmp	r3, #41	@ 0x29
 8006a8c:	d112      	bne.n	8006ab4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2228      	movs	r2, #40	@ 0x28
 8006a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2221      	movs	r2, #33	@ 0x21
 8006a9a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fdde 	bl	8007660 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f019 fa89 	bl	801ffc4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ab2:	e017      	b.n	8006ae4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006abe:	d111      	bne.n	8006ae4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2228      	movs	r2, #40	@ 0x28
 8006ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2222      	movs	r2, #34	@ 0x22
 8006acc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ace:	2102      	movs	r1, #2
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fdc5 	bl	8007660 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f019 fa86 	bl	801fff0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2220      	movs	r2, #32
 8006b00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b21      	cmp	r3, #33	@ 0x21
 8006b0c:	d107      	bne.n	8006b1e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b0e:	2101      	movs	r1, #1
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fda5 	bl	8007660 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2211      	movs	r2, #17
 8006b1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b1c:	e00c      	b.n	8006b38 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b22      	cmp	r3, #34	@ 0x22
 8006b28:	d106      	bne.n	8006b38 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b2a:	2102      	movs	r1, #2
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fd97 	bl	8007660 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2212      	movs	r2, #18
 8006b36:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6859      	ldr	r1, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b4d      	ldr	r3, [pc, #308]	@ (8006c78 <I2C_ITMasterCplt+0x18c>)
 8006b44:	400b      	ands	r3, r1
 8006b46:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a4a      	ldr	r2, [pc, #296]	@ (8006c7c <I2C_ITMasterCplt+0x190>)
 8006b52:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	091b      	lsrs	r3, r3, #4
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2210      	movs	r2, #16
 8006b66:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6c:	f043 0204 	orr.w	r2, r3, #4
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b60      	cmp	r3, #96	@ 0x60
 8006b7e:	d10b      	bne.n	8006b98 <I2C_ITMasterCplt+0xac>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006b96:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fb48 	bl	800722e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b60      	cmp	r3, #96	@ 0x60
 8006bae:	d002      	beq.n	8006bb6 <I2C_ITMasterCplt+0xca>
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d006      	beq.n	8006bc4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fa1f 	bl	8007000 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bc2:	e054      	b.n	8006c6e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b21      	cmp	r3, #33	@ 0x21
 8006bce:	d124      	bne.n	8006c1a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b40      	cmp	r3, #64	@ 0x40
 8006be8:	d10b      	bne.n	8006c02 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff f8b7 	bl	8005d6e <HAL_I2C_MemTxCpltCallback>
}
 8006c00:	e035      	b.n	8006c6e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f019 f9aa 	bl	801ff6c <HAL_I2C_MasterTxCpltCallback>
}
 8006c18:	e029      	b.n	8006c6e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b22      	cmp	r3, #34	@ 0x22
 8006c24:	d123      	bne.n	8006c6e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b40      	cmp	r3, #64	@ 0x40
 8006c3e:	d10b      	bne.n	8006c58 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff f896 	bl	8005d82 <HAL_I2C_MemRxCpltCallback>
}
 8006c56:	e00a      	b.n	8006c6e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f019 f995 	bl	801ff98 <HAL_I2C_MasterRxCpltCallback>
}
 8006c6e:	bf00      	nop
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	fe00e800 	.word	0xfe00e800
 8006c7c:	ffff0000 	.word	0xffff0000

08006c80 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cac:	7afb      	ldrb	r3, [r7, #11]
 8006cae:	2b21      	cmp	r3, #33	@ 0x21
 8006cb0:	d002      	beq.n	8006cb8 <I2C_ITSlaveCplt+0x38>
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	2b29      	cmp	r3, #41	@ 0x29
 8006cb6:	d108      	bne.n	8006cca <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006cb8:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fccf 	bl	8007660 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2221      	movs	r2, #33	@ 0x21
 8006cc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cc8:	e019      	b.n	8006cfe <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	2b22      	cmp	r3, #34	@ 0x22
 8006cce:	d002      	beq.n	8006cd6 <I2C_ITSlaveCplt+0x56>
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd4:	d108      	bne.n	8006ce8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006cd6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fcc0 	bl	8007660 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2222      	movs	r2, #34	@ 0x22
 8006ce4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ce6:	e00a      	b.n	8006cfe <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006ce8:	7afb      	ldrb	r3, [r7, #11]
 8006cea:	2b28      	cmp	r3, #40	@ 0x28
 8006cec:	d107      	bne.n	8006cfe <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006cee:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fcb4 	bl	8007660 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d0c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6859      	ldr	r1, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	4b8c      	ldr	r3, [pc, #560]	@ (8006f4c <I2C_ITSlaveCplt+0x2cc>)
 8006d1a:	400b      	ands	r3, r1
 8006d1c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa85 	bl	800722e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	0b9b      	lsrs	r3, r3, #14
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d013      	beq.n	8006d58 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d3e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d020      	beq.n	8006d8a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d56:	e018      	b.n	8006d8a <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	0bdb      	lsrs	r3, r3, #15
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d012      	beq.n	8006d8a <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d72:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d006      	beq.n	8006d8a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	089b      	lsrs	r3, r3, #2
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d020      	beq.n	8006dd8 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 0304 	bic.w	r3, r3, #4
 8006d9c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de6:	f043 0204 	orr.w	r2, r3, #4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	091b      	lsrs	r3, r3, #4
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d04a      	beq.n	8006e90 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	091b      	lsrs	r3, r3, #4
 8006dfe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d044      	beq.n	8006e90 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d128      	bne.n	8006e62 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b28      	cmp	r3, #40	@ 0x28
 8006e1a:	d108      	bne.n	8006e2e <I2C_ITSlaveCplt+0x1ae>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e22:	d104      	bne.n	8006e2e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e24:	6979      	ldr	r1, [r7, #20]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f894 	bl	8006f54 <I2C_ITListenCplt>
 8006e2c:	e030      	b.n	8006e90 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b29      	cmp	r3, #41	@ 0x29
 8006e38:	d10e      	bne.n	8006e58 <I2C_ITSlaveCplt+0x1d8>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e40:	d00a      	beq.n	8006e58 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2210      	movs	r2, #16
 8006e48:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f9ef 	bl	800722e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff fded 	bl	8006a30 <I2C_ITSlaveSeqCplt>
 8006e56:	e01b      	b.n	8006e90 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2210      	movs	r2, #16
 8006e5e:	61da      	str	r2, [r3, #28]
 8006e60:	e016      	b.n	8006e90 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2210      	movs	r2, #16
 8006e68:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6e:	f043 0204 	orr.w	r2, r3, #4
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <I2C_ITSlaveCplt+0x204>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e82:	d105      	bne.n	8006e90 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f8b8 	bl	8007000 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d010      	beq.n	8006ec8 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f8a7 	bl	8007000 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b28      	cmp	r3, #40	@ 0x28
 8006ebc:	d141      	bne.n	8006f42 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ebe:	6979      	ldr	r1, [r7, #20]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f847 	bl	8006f54 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ec6:	e03c      	b.n	8006f42 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ed0:	d014      	beq.n	8006efc <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff fdac 	bl	8006a30 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a1d      	ldr	r2, [pc, #116]	@ (8006f50 <I2C_ITSlaveCplt+0x2d0>)
 8006edc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7fe ff30 	bl	8005d5a <HAL_I2C_ListenCpltCallback>
}
 8006efa:	e022      	b.n	8006f42 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b22      	cmp	r3, #34	@ 0x22
 8006f06:	d10e      	bne.n	8006f26 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f019 f866 	bl	801fff0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f24:	e00d      	b.n	8006f42 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f019 f841 	bl	801ffc4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f42:	bf00      	nop
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	fe00e800 	.word	0xfe00e800
 8006f50:	ffff0000 	.word	0xffff0000

08006f54 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a26      	ldr	r2, [pc, #152]	@ (8006ffc <I2C_ITListenCplt+0xa8>)
 8006f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	089b      	lsrs	r3, r3, #2
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d022      	beq.n	8006fd2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d012      	beq.n	8006fd2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fca:	f043 0204 	orr.w	r2, r3, #4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fd2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb42 	bl	8007660 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2210      	movs	r2, #16
 8006fe2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7fe feb4 	bl	8005d5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	ffff0000 	.word	0xffff0000

08007000 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007010:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a6d      	ldr	r2, [pc, #436]	@ (80071d4 <I2C_ITError+0x1d4>)
 800701e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	2b28      	cmp	r3, #40	@ 0x28
 8007036:	d005      	beq.n	8007044 <I2C_ITError+0x44>
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	2b29      	cmp	r3, #41	@ 0x29
 800703c:	d002      	beq.n	8007044 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	2b2a      	cmp	r3, #42	@ 0x2a
 8007042:	d10b      	bne.n	800705c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007044:	2103      	movs	r1, #3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb0a 	bl	8007660 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2228      	movs	r2, #40	@ 0x28
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a60      	ldr	r2, [pc, #384]	@ (80071d8 <I2C_ITError+0x1d8>)
 8007058:	635a      	str	r2, [r3, #52]	@ 0x34
 800705a:	e030      	b.n	80070be <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800705c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fafd 	bl	8007660 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f8e1 	bl	800722e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b60      	cmp	r3, #96	@ 0x60
 8007076:	d01f      	beq.n	80070b8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	d114      	bne.n	80070b8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	2b10      	cmp	r3, #16
 800709a:	d109      	bne.n	80070b0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2210      	movs	r2, #16
 80070a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a8:	f043 0204 	orr.w	r2, r3, #4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2220      	movs	r2, #32
 80070b6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d039      	beq.n	8007140 <I2C_ITError+0x140>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b11      	cmp	r3, #17
 80070d0:	d002      	beq.n	80070d8 <I2C_ITError+0xd8>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b21      	cmp	r3, #33	@ 0x21
 80070d6:	d133      	bne.n	8007140 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070e6:	d107      	bne.n	80070f8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fc fc45 	bl	800398c <HAL_DMA_GetState>
 8007102:	4603      	mov	r3, r0
 8007104:	2b01      	cmp	r3, #1
 8007106:	d017      	beq.n	8007138 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710c:	4a33      	ldr	r2, [pc, #204]	@ (80071dc <I2C_ITError+0x1dc>)
 800710e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711c:	4618      	mov	r0, r3
 800711e:	f7fc fa89 	bl	8003634 <HAL_DMA_Abort_IT>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d04d      	beq.n	80071c4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007132:	4610      	mov	r0, r2
 8007134:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007136:	e045      	b.n	80071c4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f851 	bl	80071e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800713e:	e041      	b.n	80071c4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d039      	beq.n	80071bc <I2C_ITError+0x1bc>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2b12      	cmp	r3, #18
 800714c:	d002      	beq.n	8007154 <I2C_ITError+0x154>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b22      	cmp	r3, #34	@ 0x22
 8007152:	d133      	bne.n	80071bc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800715e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007162:	d107      	bne.n	8007174 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007172:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007178:	4618      	mov	r0, r3
 800717a:	f7fc fc07 	bl	800398c <HAL_DMA_GetState>
 800717e:	4603      	mov	r3, r0
 8007180:	2b01      	cmp	r3, #1
 8007182:	d017      	beq.n	80071b4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007188:	4a14      	ldr	r2, [pc, #80]	@ (80071dc <I2C_ITError+0x1dc>)
 800718a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007198:	4618      	mov	r0, r3
 800719a:	f7fc fa4b 	bl	8003634 <HAL_DMA_Abort_IT>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d011      	beq.n	80071c8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071ae:	4610      	mov	r0, r2
 80071b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071b2:	e009      	b.n	80071c8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f813 	bl	80071e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071ba:	e005      	b.n	80071c8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f80f 	bl	80071e0 <I2C_TreatErrorCallback>
  }
}
 80071c2:	e002      	b.n	80071ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071c8:	bf00      	nop
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	ffff0000 	.word	0xffff0000
 80071d8:	08006043 	.word	0x08006043
 80071dc:	080074b9 	.word	0x080074b9

080071e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b60      	cmp	r3, #96	@ 0x60
 80071f2:	d10e      	bne.n	8007212 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7fe fdcd 	bl	8005daa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007210:	e009      	b.n	8007226 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7fe fdb8 	bl	8005d96 <HAL_I2C_ErrorCallback>
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b02      	cmp	r3, #2
 8007242:	d103      	bne.n	800724c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2200      	movs	r2, #0
 800724a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d007      	beq.n	800726a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	619a      	str	r2, [r3, #24]
  }
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007282:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007292:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d104      	bne.n	80072a8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800729e:	2120      	movs	r1, #32
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f959 	bl	8007558 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80072a6:	e02d      	b.n	8007304 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80072b0:	441a      	add	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2bff      	cmp	r3, #255	@ 0xff
 80072be:	d903      	bls.n	80072c8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	22ff      	movs	r2, #255	@ 0xff
 80072c4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80072c6:	e004      	b.n	80072d2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	4619      	mov	r1, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3328      	adds	r3, #40	@ 0x28
 80072e2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072e8:	f7fc f8d4 	bl	8003494 <HAL_DMA_Start_IT>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80072f2:	2110      	movs	r1, #16
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7ff fe83 	bl	8007000 <I2C_ITError>
}
 80072fa:	e003      	b.n	8007304 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80072fc:	2140      	movs	r1, #64	@ 0x40
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f92a 	bl	8007558 <I2C_Enable_IRQ>
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007326:	d002      	beq.n	800732e <I2C_DMASlaveTransmitCplt+0x22>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800733c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff fb76 	bl	8006a30 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007358:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007368:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d104      	bne.n	800737e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007374:	2120      	movs	r1, #32
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 f8ee 	bl	8007558 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800737c:	e03b      	b.n	80073f6 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007386:	441a      	add	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007390:	b29b      	uxth	r3, r3
 8007392:	2bff      	cmp	r3, #255	@ 0xff
 8007394:	d911      	bls.n	80073ba <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	0c1b      	lsrs	r3, r3, #16
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d103      	bne.n	80073b2 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073b0:	e008      	b.n	80073c4 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	22ff      	movs	r2, #255	@ 0xff
 80073b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073b8:	e004      	b.n	80073c4 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3324      	adds	r3, #36	@ 0x24
 80073ce:	4619      	mov	r1, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80073da:	f7fc f85b 	bl	8003494 <HAL_DMA_Start_IT>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80073e4:	2110      	movs	r1, #16
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff fe0a 	bl	8007000 <I2C_ITError>
}
 80073ec:	e003      	b.n	80073f6 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80073ee:	2140      	movs	r1, #64	@ 0x40
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f8b1 	bl	8007558 <I2C_Enable_IRQ>
}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007410:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10e      	bne.n	800743c <I2C_DMASlaveReceiveCplt+0x3e>
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007424:	d00a      	beq.n	800743c <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007434:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff fafa 	bl	8006a30 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800743c:	bf00      	nop
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007454:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800746a:	2301      	movs	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d007      	beq.n	8007486 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007482:	2301      	movs	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fc fa8e 	bl	80039a8 <HAL_DMA_GetError>
 800748c:	4603      	mov	r3, r0
 800748e:	2b02      	cmp	r3, #2
 8007490:	d00e      	beq.n	80074b0 <I2C_DMAError+0x6c>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00b      	beq.n	80074b0 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074a6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074a8:	2110      	movs	r1, #16
 80074aa:	68b8      	ldr	r0, [r7, #8]
 80074ac:	f7ff fda8 	bl	8007000 <I2C_ITError>
  }
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d2:	2200      	movs	r2, #0
 80074d4:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e2:	2200      	movs	r2, #0
 80074e4:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff fe7a 	bl	80071e0 <I2C_TreatErrorCallback>
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	607b      	str	r3, [r7, #4]
 80074fe:	460b      	mov	r3, r1
 8007500:	817b      	strh	r3, [r7, #10]
 8007502:	4613      	mov	r3, r2
 8007504:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007506:	897b      	ldrh	r3, [r7, #10]
 8007508:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800750c:	7a7b      	ldrb	r3, [r7, #9]
 800750e:	041b      	lsls	r3, r3, #16
 8007510:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007514:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	4313      	orrs	r3, r2
 800751e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007522:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	0d5b      	lsrs	r3, r3, #21
 800752e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007532:	4b08      	ldr	r3, [pc, #32]	@ (8007554 <I2C_TransferConfig+0x60>)
 8007534:	430b      	orrs	r3, r1
 8007536:	43db      	mvns	r3, r3
 8007538:	ea02 0103 	and.w	r1, r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	430a      	orrs	r2, r1
 8007544:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	03ff63ff 	.word	0x03ff63ff

08007558 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800756c:	4a39      	ldr	r2, [pc, #228]	@ (8007654 <I2C_Enable_IRQ+0xfc>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d032      	beq.n	80075d8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007576:	4a38      	ldr	r2, [pc, #224]	@ (8007658 <I2C_Enable_IRQ+0x100>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d02d      	beq.n	80075d8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007580:	4a36      	ldr	r2, [pc, #216]	@ (800765c <I2C_Enable_IRQ+0x104>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d028      	beq.n	80075d8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007586:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800758a:	2b00      	cmp	r3, #0
 800758c:	da03      	bge.n	8007596 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007594:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007596:	887b      	ldrh	r3, [r7, #2]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075a8:	887b      	ldrh	r3, [r7, #2]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80075b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80075ba:	887b      	ldrh	r3, [r7, #2]
 80075bc:	2b10      	cmp	r3, #16
 80075be:	d103      	bne.n	80075c8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80075c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075c8:	887b      	ldrh	r3, [r7, #2]
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	d133      	bne.n	8007636 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f043 0320 	orr.w	r3, r3, #32
 80075d4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075d6:	e02e      	b.n	8007636 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da03      	bge.n	80075e8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80075e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075e8:	887b      	ldrh	r3, [r7, #2]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075fa:	887b      	ldrh	r3, [r7, #2]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800760a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800760c:	887b      	ldrh	r3, [r7, #2]
 800760e:	2b10      	cmp	r3, #16
 8007610:	d103      	bne.n	800761a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007618:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800761a:	887b      	ldrh	r3, [r7, #2]
 800761c:	2b20      	cmp	r3, #32
 800761e:	d103      	bne.n	8007628 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007626:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007628:	887b      	ldrh	r3, [r7, #2]
 800762a:	2b40      	cmp	r3, #64	@ 0x40
 800762c:	d103      	bne.n	8007636 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007634:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6819      	ldr	r1, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	430a      	orrs	r2, r1
 8007644:	601a      	str	r2, [r3, #0]
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	0800624b 	.word	0x0800624b
 8007658:	080066ed 	.word	0x080066ed
 800765c:	08006451 	.word	0x08006451

08007660 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007670:	887b      	ldrh	r3, [r7, #2]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00f      	beq.n	800769a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007680:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007688:	b2db      	uxtb	r3, r3
 800768a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800768e:	2b28      	cmp	r3, #40	@ 0x28
 8007690:	d003      	beq.n	800769a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007698:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800769a:	887b      	ldrh	r3, [r7, #2]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00f      	beq.n	80076c4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80076aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076b8:	2b28      	cmp	r3, #40	@ 0x28
 80076ba:	d003      	beq.n	80076c4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da03      	bge.n	80076d4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80076d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076d4:	887b      	ldrh	r3, [r7, #2]
 80076d6:	2b10      	cmp	r3, #16
 80076d8:	d103      	bne.n	80076e2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80076e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076e2:	887b      	ldrh	r3, [r7, #2]
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d103      	bne.n	80076f0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f043 0320 	orr.w	r3, r3, #32
 80076ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80076f0:	887b      	ldrh	r3, [r7, #2]
 80076f2:	2b40      	cmp	r3, #64	@ 0x40
 80076f4:	d103      	bne.n	80076fe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076fc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6819      	ldr	r1, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	43da      	mvns	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	400a      	ands	r2, r1
 800770e:	601a      	str	r2, [r3, #0]
}
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b20      	cmp	r3, #32
 8007730:	d138      	bne.n	80077a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800773c:	2302      	movs	r3, #2
 800773e:	e032      	b.n	80077a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2224      	movs	r2, #36	@ 0x24
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0201 	bic.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800776e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6819      	ldr	r1, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0201 	orr.w	r2, r2, #1
 800778e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e000      	b.n	80077a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077a4:	2302      	movs	r3, #2
  }
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d139      	bne.n	800783c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e033      	b.n	800783e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2224      	movs	r2, #36	@ 0x24
 80077e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0201 	bic.w	r2, r2, #1
 80077f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	021b      	lsls	r3, r3, #8
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	e000      	b.n	800783e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800783c:	2302      	movs	r3, #2
  }
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007856:	4b23      	ldr	r3, [pc, #140]	@ (80078e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	4a22      	ldr	r2, [pc, #136]	@ (80078e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800785c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007860:	6413      	str	r3, [r2, #64]	@ 0x40
 8007862:	4b20      	ldr	r3, [pc, #128]	@ (80078e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800786e:	4b1e      	ldr	r3, [pc, #120]	@ (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1d      	ldr	r2, [pc, #116]	@ (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007878:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800787a:	f7fa fdbb 	bl	80023f4 <HAL_GetTick>
 800787e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007880:	e009      	b.n	8007896 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007882:	f7fa fdb7 	bl	80023f4 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007890:	d901      	bls.n	8007896 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e022      	b.n	80078dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007896:	4b14      	ldr	r3, [pc, #80]	@ (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800789e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a2:	d1ee      	bne.n	8007882 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078a4:	4b10      	ldr	r3, [pc, #64]	@ (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a0f      	ldr	r2, [pc, #60]	@ (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078b0:	f7fa fda0 	bl	80023f4 <HAL_GetTick>
 80078b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078b6:	e009      	b.n	80078cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078b8:	f7fa fd9c 	bl	80023f4 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078c6:	d901      	bls.n	80078cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e007      	b.n	80078dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078cc:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078d8:	d1ee      	bne.n	80078b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	40023800 	.word	0x40023800
 80078e8:	40007000 	.word	0x40007000

080078ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e291      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8087 	beq.w	8007a1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007910:	4b96      	ldr	r3, [pc, #600]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 030c 	and.w	r3, r3, #12
 8007918:	2b04      	cmp	r3, #4
 800791a:	d00c      	beq.n	8007936 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800791c:	4b93      	ldr	r3, [pc, #588]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 030c 	and.w	r3, r3, #12
 8007924:	2b08      	cmp	r3, #8
 8007926:	d112      	bne.n	800794e <HAL_RCC_OscConfig+0x62>
 8007928:	4b90      	ldr	r3, [pc, #576]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007934:	d10b      	bne.n	800794e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007936:	4b8d      	ldr	r3, [pc, #564]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d06c      	beq.n	8007a1c <HAL_RCC_OscConfig+0x130>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d168      	bne.n	8007a1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e26b      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007956:	d106      	bne.n	8007966 <HAL_RCC_OscConfig+0x7a>
 8007958:	4b84      	ldr	r3, [pc, #528]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a83      	ldr	r2, [pc, #524]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 800795e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	e02e      	b.n	80079c4 <HAL_RCC_OscConfig+0xd8>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10c      	bne.n	8007988 <HAL_RCC_OscConfig+0x9c>
 800796e:	4b7f      	ldr	r3, [pc, #508]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a7e      	ldr	r2, [pc, #504]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	4b7c      	ldr	r3, [pc, #496]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a7b      	ldr	r2, [pc, #492]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007980:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	e01d      	b.n	80079c4 <HAL_RCC_OscConfig+0xd8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007990:	d10c      	bne.n	80079ac <HAL_RCC_OscConfig+0xc0>
 8007992:	4b76      	ldr	r3, [pc, #472]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a75      	ldr	r2, [pc, #468]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	4b73      	ldr	r3, [pc, #460]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a72      	ldr	r2, [pc, #456]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e00b      	b.n	80079c4 <HAL_RCC_OscConfig+0xd8>
 80079ac:	4b6f      	ldr	r3, [pc, #444]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a6e      	ldr	r2, [pc, #440]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	4b6c      	ldr	r3, [pc, #432]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a6b      	ldr	r2, [pc, #428]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d013      	beq.n	80079f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079cc:	f7fa fd12 	bl	80023f4 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d4:	f7fa fd0e 	bl	80023f4 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b64      	cmp	r3, #100	@ 0x64
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e21f      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079e6:	4b61      	ldr	r3, [pc, #388]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f0      	beq.n	80079d4 <HAL_RCC_OscConfig+0xe8>
 80079f2:	e014      	b.n	8007a1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f4:	f7fa fcfe 	bl	80023f4 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079fc:	f7fa fcfa 	bl	80023f4 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b64      	cmp	r3, #100	@ 0x64
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e20b      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a0e:	4b57      	ldr	r3, [pc, #348]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1f0      	bne.n	80079fc <HAL_RCC_OscConfig+0x110>
 8007a1a:	e000      	b.n	8007a1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d069      	beq.n	8007afe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a2a:	4b50      	ldr	r3, [pc, #320]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 030c 	and.w	r3, r3, #12
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00b      	beq.n	8007a4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a36:	4b4d      	ldr	r3, [pc, #308]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 030c 	and.w	r3, r3, #12
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d11c      	bne.n	8007a7c <HAL_RCC_OscConfig+0x190>
 8007a42:	4b4a      	ldr	r3, [pc, #296]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d116      	bne.n	8007a7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a4e:	4b47      	ldr	r3, [pc, #284]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <HAL_RCC_OscConfig+0x17a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d001      	beq.n	8007a66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e1df      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a66:	4b41      	ldr	r3, [pc, #260]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	493d      	ldr	r1, [pc, #244]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a7a:	e040      	b.n	8007afe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d023      	beq.n	8007acc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a84:	4b39      	ldr	r3, [pc, #228]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a38      	ldr	r2, [pc, #224]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a8a:	f043 0301 	orr.w	r3, r3, #1
 8007a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a90:	f7fa fcb0 	bl	80023f4 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a98:	f7fa fcac 	bl	80023f4 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e1bd      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aaa:	4b30      	ldr	r3, [pc, #192]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f0      	beq.n	8007a98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	4929      	ldr	r1, [pc, #164]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	600b      	str	r3, [r1, #0]
 8007aca:	e018      	b.n	8007afe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007acc:	4b27      	ldr	r3, [pc, #156]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a26      	ldr	r2, [pc, #152]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007ad2:	f023 0301 	bic.w	r3, r3, #1
 8007ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad8:	f7fa fc8c 	bl	80023f4 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ade:	e008      	b.n	8007af2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ae0:	f7fa fc88 	bl	80023f4 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d901      	bls.n	8007af2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e199      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007af2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1f0      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0308 	and.w	r3, r3, #8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d038      	beq.n	8007b7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d019      	beq.n	8007b46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b12:	4b16      	ldr	r3, [pc, #88]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b16:	4a15      	ldr	r2, [pc, #84]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007b18:	f043 0301 	orr.w	r3, r3, #1
 8007b1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b1e:	f7fa fc69 	bl	80023f4 <HAL_GetTick>
 8007b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b24:	e008      	b.n	8007b38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b26:	f7fa fc65 	bl	80023f4 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d901      	bls.n	8007b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e176      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b38:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0f0      	beq.n	8007b26 <HAL_RCC_OscConfig+0x23a>
 8007b44:	e01a      	b.n	8007b7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b46:	4b09      	ldr	r3, [pc, #36]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b4a:	4a08      	ldr	r2, [pc, #32]	@ (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b52:	f7fa fc4f 	bl	80023f4 <HAL_GetTick>
 8007b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b58:	e00a      	b.n	8007b70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b5a:	f7fa fc4b 	bl	80023f4 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d903      	bls.n	8007b70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e15c      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
 8007b6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b70:	4b91      	ldr	r3, [pc, #580]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1ee      	bne.n	8007b5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 80a4 	beq.w	8007cd2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b8a:	4b8b      	ldr	r3, [pc, #556]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10d      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b96:	4b88      	ldr	r3, [pc, #544]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9a:	4a87      	ldr	r2, [pc, #540]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ba2:	4b85      	ldr	r3, [pc, #532]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007baa:	60bb      	str	r3, [r7, #8]
 8007bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bb2:	4b82      	ldr	r3, [pc, #520]	@ (8007dbc <HAL_RCC_OscConfig+0x4d0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d118      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8007dbc <HAL_RCC_OscConfig+0x4d0>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8007dbc <HAL_RCC_OscConfig+0x4d0>)
 8007bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bca:	f7fa fc13 	bl	80023f4 <HAL_GetTick>
 8007bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bd0:	e008      	b.n	8007be4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bd2:	f7fa fc0f 	bl	80023f4 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b64      	cmp	r3, #100	@ 0x64
 8007bde:	d901      	bls.n	8007be4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e120      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007be4:	4b75      	ldr	r3, [pc, #468]	@ (8007dbc <HAL_RCC_OscConfig+0x4d0>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0f0      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d106      	bne.n	8007c06 <HAL_RCC_OscConfig+0x31a>
 8007bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bfc:	4a6e      	ldr	r2, [pc, #440]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007bfe:	f043 0301 	orr.w	r3, r3, #1
 8007c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c04:	e02d      	b.n	8007c62 <HAL_RCC_OscConfig+0x376>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10c      	bne.n	8007c28 <HAL_RCC_OscConfig+0x33c>
 8007c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c12:	4a69      	ldr	r2, [pc, #420]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c14:	f023 0301 	bic.w	r3, r3, #1
 8007c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c1a:	4b67      	ldr	r3, [pc, #412]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c1e:	4a66      	ldr	r2, [pc, #408]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c20:	f023 0304 	bic.w	r3, r3, #4
 8007c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c26:	e01c      	b.n	8007c62 <HAL_RCC_OscConfig+0x376>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b05      	cmp	r3, #5
 8007c2e:	d10c      	bne.n	8007c4a <HAL_RCC_OscConfig+0x35e>
 8007c30:	4b61      	ldr	r3, [pc, #388]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c34:	4a60      	ldr	r2, [pc, #384]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c36:	f043 0304 	orr.w	r3, r3, #4
 8007c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c3c:	4b5e      	ldr	r3, [pc, #376]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c40:	4a5d      	ldr	r2, [pc, #372]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c48:	e00b      	b.n	8007c62 <HAL_RCC_OscConfig+0x376>
 8007c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c4e:	4a5a      	ldr	r2, [pc, #360]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c50:	f023 0301 	bic.w	r3, r3, #1
 8007c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c56:	4b58      	ldr	r3, [pc, #352]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c5a:	4a57      	ldr	r2, [pc, #348]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c5c:	f023 0304 	bic.w	r3, r3, #4
 8007c60:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d015      	beq.n	8007c96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6a:	f7fa fbc3 	bl	80023f4 <HAL_GetTick>
 8007c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c70:	e00a      	b.n	8007c88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c72:	f7fa fbbf 	bl	80023f4 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e0ce      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c88:	4b4b      	ldr	r3, [pc, #300]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0ee      	beq.n	8007c72 <HAL_RCC_OscConfig+0x386>
 8007c94:	e014      	b.n	8007cc0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c96:	f7fa fbad 	bl	80023f4 <HAL_GetTick>
 8007c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c9c:	e00a      	b.n	8007cb4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c9e:	f7fa fba9 	bl	80023f4 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e0b8      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cb4:	4b40      	ldr	r3, [pc, #256]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1ee      	bne.n	8007c9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d105      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cca:	4a3b      	ldr	r2, [pc, #236]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cd0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 80a4 	beq.w	8007e24 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cdc:	4b36      	ldr	r3, [pc, #216]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 030c 	and.w	r3, r3, #12
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d06b      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d149      	bne.n	8007d84 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cf0:	4b31      	ldr	r3, [pc, #196]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a30      	ldr	r2, [pc, #192]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfc:	f7fa fb7a 	bl	80023f4 <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d04:	f7fa fb76 	bl	80023f4 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e087      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d16:	4b28      	ldr	r3, [pc, #160]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1f0      	bne.n	8007d04 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	69da      	ldr	r2, [r3, #28]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d30:	019b      	lsls	r3, r3, #6
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d38:	085b      	lsrs	r3, r3, #1
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	041b      	lsls	r3, r3, #16
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d44:	061b      	lsls	r3, r3, #24
 8007d46:	4313      	orrs	r3, r2
 8007d48:	4a1b      	ldr	r2, [pc, #108]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d4a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d4e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d50:	4b19      	ldr	r3, [pc, #100]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a18      	ldr	r2, [pc, #96]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d5c:	f7fa fb4a 	bl	80023f4 <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d62:	e008      	b.n	8007d76 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d64:	f7fa fb46 	bl	80023f4 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e057      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d76:	4b10      	ldr	r3, [pc, #64]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0f0      	beq.n	8007d64 <HAL_RCC_OscConfig+0x478>
 8007d82:	e04f      	b.n	8007e24 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d84:	4b0c      	ldr	r3, [pc, #48]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a0b      	ldr	r2, [pc, #44]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d90:	f7fa fb30 	bl	80023f4 <HAL_GetTick>
 8007d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d96:	e008      	b.n	8007daa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d98:	f7fa fb2c 	bl	80023f4 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d901      	bls.n	8007daa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e03d      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007daa:	4b03      	ldr	r3, [pc, #12]	@ (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f0      	bne.n	8007d98 <HAL_RCC_OscConfig+0x4ac>
 8007db6:	e035      	b.n	8007e24 <HAL_RCC_OscConfig+0x538>
 8007db8:	40023800 	.word	0x40023800
 8007dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e30 <HAL_RCC_OscConfig+0x544>)
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d028      	beq.n	8007e20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d121      	bne.n	8007e20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d11a      	bne.n	8007e20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007df0:	4013      	ands	r3, r2
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007df6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d111      	bne.n	8007e20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d107      	bne.n	8007e20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d001      	beq.n	8007e24 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40023800 	.word	0x40023800

08007e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e0d0      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e4c:	4b6a      	ldr	r3, [pc, #424]	@ (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d910      	bls.n	8007e7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e5a:	4b67      	ldr	r3, [pc, #412]	@ (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f023 020f 	bic.w	r2, r3, #15
 8007e62:	4965      	ldr	r1, [pc, #404]	@ (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e6a:	4b63      	ldr	r3, [pc, #396]	@ (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d001      	beq.n	8007e7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e0b8      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d020      	beq.n	8007eca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e94:	4b59      	ldr	r3, [pc, #356]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	4a58      	ldr	r2, [pc, #352]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007e9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007e9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0308 	and.w	r3, r3, #8
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007eac:	4b53      	ldr	r3, [pc, #332]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	4a52      	ldr	r2, [pc, #328]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007eb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007eb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eb8:	4b50      	ldr	r3, [pc, #320]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	494d      	ldr	r1, [pc, #308]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d040      	beq.n	8007f58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d107      	bne.n	8007eee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ede:	4b47      	ldr	r3, [pc, #284]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d115      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e07f      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d107      	bne.n	8007f06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ef6:	4b41      	ldr	r3, [pc, #260]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e073      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f06:	4b3d      	ldr	r3, [pc, #244]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e06b      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f16:	4b39      	ldr	r3, [pc, #228]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f023 0203 	bic.w	r2, r3, #3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	4936      	ldr	r1, [pc, #216]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f28:	f7fa fa64 	bl	80023f4 <HAL_GetTick>
 8007f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f2e:	e00a      	b.n	8007f46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f30:	f7fa fa60 	bl	80023f4 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e053      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f46:	4b2d      	ldr	r3, [pc, #180]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 020c 	and.w	r2, r3, #12
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d1eb      	bne.n	8007f30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f58:	4b27      	ldr	r3, [pc, #156]	@ (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 030f 	and.w	r3, r3, #15
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d210      	bcs.n	8007f88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f66:	4b24      	ldr	r3, [pc, #144]	@ (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f023 020f 	bic.w	r2, r3, #15
 8007f6e:	4922      	ldr	r1, [pc, #136]	@ (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f76:	4b20      	ldr	r3, [pc, #128]	@ (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d001      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e032      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d008      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f94:	4b19      	ldr	r3, [pc, #100]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	4916      	ldr	r1, [pc, #88]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007fb2:	4b12      	ldr	r3, [pc, #72]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	490e      	ldr	r1, [pc, #56]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fc6:	f000 f821 	bl	800800c <HAL_RCC_GetSysClockFreq>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	091b      	lsrs	r3, r3, #4
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	490a      	ldr	r1, [pc, #40]	@ (8008000 <HAL_RCC_ClockConfig+0x1cc>)
 8007fd8:	5ccb      	ldrb	r3, [r1, r3]
 8007fda:	fa22 f303 	lsr.w	r3, r2, r3
 8007fde:	4a09      	ldr	r2, [pc, #36]	@ (8008004 <HAL_RCC_ClockConfig+0x1d0>)
 8007fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007fe2:	4b09      	ldr	r3, [pc, #36]	@ (8008008 <HAL_RCC_ClockConfig+0x1d4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7f9 fb5a 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	40023c00 	.word	0x40023c00
 8007ffc:	40023800 	.word	0x40023800
 8008000:	080262a8 	.word	0x080262a8
 8008004:	20000000 	.word	0x20000000
 8008008:	20000004 	.word	0x20000004

0800800c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800800c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008010:	b090      	sub	sp, #64	@ 0x40
 8008012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	637b      	str	r3, [r7, #52]	@ 0x34
 8008018:	2300      	movs	r3, #0
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800801c:	2300      	movs	r3, #0
 800801e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008024:	4b59      	ldr	r3, [pc, #356]	@ (800818c <HAL_RCC_GetSysClockFreq+0x180>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 030c 	and.w	r3, r3, #12
 800802c:	2b08      	cmp	r3, #8
 800802e:	d00d      	beq.n	800804c <HAL_RCC_GetSysClockFreq+0x40>
 8008030:	2b08      	cmp	r3, #8
 8008032:	f200 80a1 	bhi.w	8008178 <HAL_RCC_GetSysClockFreq+0x16c>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_RCC_GetSysClockFreq+0x34>
 800803a:	2b04      	cmp	r3, #4
 800803c:	d003      	beq.n	8008046 <HAL_RCC_GetSysClockFreq+0x3a>
 800803e:	e09b      	b.n	8008178 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008040:	4b53      	ldr	r3, [pc, #332]	@ (8008190 <HAL_RCC_GetSysClockFreq+0x184>)
 8008042:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008044:	e09b      	b.n	800817e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008046:	4b53      	ldr	r3, [pc, #332]	@ (8008194 <HAL_RCC_GetSysClockFreq+0x188>)
 8008048:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800804a:	e098      	b.n	800817e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800804c:	4b4f      	ldr	r3, [pc, #316]	@ (800818c <HAL_RCC_GetSysClockFreq+0x180>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008054:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008056:	4b4d      	ldr	r3, [pc, #308]	@ (800818c <HAL_RCC_GetSysClockFreq+0x180>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d028      	beq.n	80080b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008062:	4b4a      	ldr	r3, [pc, #296]	@ (800818c <HAL_RCC_GetSysClockFreq+0x180>)
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	099b      	lsrs	r3, r3, #6
 8008068:	2200      	movs	r2, #0
 800806a:	623b      	str	r3, [r7, #32]
 800806c:	627a      	str	r2, [r7, #36]	@ 0x24
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008074:	2100      	movs	r1, #0
 8008076:	4b47      	ldr	r3, [pc, #284]	@ (8008194 <HAL_RCC_GetSysClockFreq+0x188>)
 8008078:	fb03 f201 	mul.w	r2, r3, r1
 800807c:	2300      	movs	r3, #0
 800807e:	fb00 f303 	mul.w	r3, r0, r3
 8008082:	4413      	add	r3, r2
 8008084:	4a43      	ldr	r2, [pc, #268]	@ (8008194 <HAL_RCC_GetSysClockFreq+0x188>)
 8008086:	fba0 1202 	umull	r1, r2, r0, r2
 800808a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800808c:	460a      	mov	r2, r1
 800808e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008092:	4413      	add	r3, r2
 8008094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008098:	2200      	movs	r2, #0
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	61fa      	str	r2, [r7, #28]
 800809e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080a6:	f7f8 f903 	bl	80002b0 <__aeabi_uldivmod>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4613      	mov	r3, r2
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080b2:	e053      	b.n	800815c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080b4:	4b35      	ldr	r3, [pc, #212]	@ (800818c <HAL_RCC_GetSysClockFreq+0x180>)
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	099b      	lsrs	r3, r3, #6
 80080ba:	2200      	movs	r2, #0
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	617a      	str	r2, [r7, #20]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80080c6:	f04f 0b00 	mov.w	fp, #0
 80080ca:	4652      	mov	r2, sl
 80080cc:	465b      	mov	r3, fp
 80080ce:	f04f 0000 	mov.w	r0, #0
 80080d2:	f04f 0100 	mov.w	r1, #0
 80080d6:	0159      	lsls	r1, r3, #5
 80080d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080dc:	0150      	lsls	r0, r2, #5
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	ebb2 080a 	subs.w	r8, r2, sl
 80080e6:	eb63 090b 	sbc.w	r9, r3, fp
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80080fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80080fe:	ebb2 0408 	subs.w	r4, r2, r8
 8008102:	eb63 0509 	sbc.w	r5, r3, r9
 8008106:	f04f 0200 	mov.w	r2, #0
 800810a:	f04f 0300 	mov.w	r3, #0
 800810e:	00eb      	lsls	r3, r5, #3
 8008110:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008114:	00e2      	lsls	r2, r4, #3
 8008116:	4614      	mov	r4, r2
 8008118:	461d      	mov	r5, r3
 800811a:	eb14 030a 	adds.w	r3, r4, sl
 800811e:	603b      	str	r3, [r7, #0]
 8008120:	eb45 030b 	adc.w	r3, r5, fp
 8008124:	607b      	str	r3, [r7, #4]
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008132:	4629      	mov	r1, r5
 8008134:	028b      	lsls	r3, r1, #10
 8008136:	4621      	mov	r1, r4
 8008138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800813c:	4621      	mov	r1, r4
 800813e:	028a      	lsls	r2, r1, #10
 8008140:	4610      	mov	r0, r2
 8008142:	4619      	mov	r1, r3
 8008144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008146:	2200      	movs	r2, #0
 8008148:	60bb      	str	r3, [r7, #8]
 800814a:	60fa      	str	r2, [r7, #12]
 800814c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008150:	f7f8 f8ae 	bl	80002b0 <__aeabi_uldivmod>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4613      	mov	r3, r2
 800815a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800815c:	4b0b      	ldr	r3, [pc, #44]	@ (800818c <HAL_RCC_GetSysClockFreq+0x180>)
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	0c1b      	lsrs	r3, r3, #16
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	3301      	adds	r3, #1
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800816c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	fbb2 f3f3 	udiv	r3, r2, r3
 8008174:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008176:	e002      	b.n	800817e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008178:	4b05      	ldr	r3, [pc, #20]	@ (8008190 <HAL_RCC_GetSysClockFreq+0x184>)
 800817a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800817c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008180:	4618      	mov	r0, r3
 8008182:	3740      	adds	r7, #64	@ 0x40
 8008184:	46bd      	mov	sp, r7
 8008186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800818a:	bf00      	nop
 800818c:	40023800 	.word	0x40023800
 8008190:	00f42400 	.word	0x00f42400
 8008194:	017d7840 	.word	0x017d7840

08008198 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800819c:	4b03      	ldr	r3, [pc, #12]	@ (80081ac <HAL_RCC_GetHCLKFreq+0x14>)
 800819e:	681b      	ldr	r3, [r3, #0]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000000 	.word	0x20000000

080081b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081b4:	f7ff fff0 	bl	8008198 <HAL_RCC_GetHCLKFreq>
 80081b8:	4602      	mov	r2, r0
 80081ba:	4b05      	ldr	r3, [pc, #20]	@ (80081d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	0a9b      	lsrs	r3, r3, #10
 80081c0:	f003 0307 	and.w	r3, r3, #7
 80081c4:	4903      	ldr	r1, [pc, #12]	@ (80081d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081c6:	5ccb      	ldrb	r3, [r1, r3]
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40023800 	.word	0x40023800
 80081d4:	080262b8 	.word	0x080262b8

080081d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081dc:	f7ff ffdc 	bl	8008198 <HAL_RCC_GetHCLKFreq>
 80081e0:	4602      	mov	r2, r0
 80081e2:	4b05      	ldr	r3, [pc, #20]	@ (80081f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	0b5b      	lsrs	r3, r3, #13
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	4903      	ldr	r1, [pc, #12]	@ (80081fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80081ee:	5ccb      	ldrb	r3, [r1, r3]
 80081f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	40023800 	.word	0x40023800
 80081fc:	080262b8 	.word	0x080262b8

08008200 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	220f      	movs	r2, #15
 800820e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008210:	4b12      	ldr	r3, [pc, #72]	@ (800825c <HAL_RCC_GetClockConfig+0x5c>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f003 0203 	and.w	r2, r3, #3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800821c:	4b0f      	ldr	r3, [pc, #60]	@ (800825c <HAL_RCC_GetClockConfig+0x5c>)
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008228:	4b0c      	ldr	r3, [pc, #48]	@ (800825c <HAL_RCC_GetClockConfig+0x5c>)
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008234:	4b09      	ldr	r3, [pc, #36]	@ (800825c <HAL_RCC_GetClockConfig+0x5c>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	08db      	lsrs	r3, r3, #3
 800823a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008242:	4b07      	ldr	r3, [pc, #28]	@ (8008260 <HAL_RCC_GetClockConfig+0x60>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 020f 	and.w	r2, r3, #15
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	601a      	str	r2, [r3, #0]
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40023800 	.word	0x40023800
 8008260:	40023c00 	.word	0x40023c00

08008264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d012      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800828c:	4b69      	ldr	r3, [pc, #420]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	4a68      	ldr	r2, [pc, #416]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008292:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008296:	6093      	str	r3, [r2, #8]
 8008298:	4b66      	ldr	r3, [pc, #408]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a0:	4964      	ldr	r1, [pc, #400]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082ae:	2301      	movs	r3, #1
 80082b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d017      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082be:	4b5d      	ldr	r3, [pc, #372]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082cc:	4959      	ldr	r1, [pc, #356]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082dc:	d101      	bne.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80082de:	2301      	movs	r3, #1
 80082e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80082ea:	2301      	movs	r3, #1
 80082ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d017      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80082fa:	4b4e      	ldr	r3, [pc, #312]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008300:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008308:	494a      	ldr	r1, [pc, #296]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830a:	4313      	orrs	r3, r2
 800830c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008314:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008318:	d101      	bne.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800831a:	2301      	movs	r3, #1
 800831c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008326:	2301      	movs	r3, #1
 8008328:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0320 	and.w	r3, r3, #32
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 808b 	beq.w	800845e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008348:	4b3a      	ldr	r3, [pc, #232]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800834a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834c:	4a39      	ldr	r2, [pc, #228]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800834e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008352:	6413      	str	r3, [r2, #64]	@ 0x40
 8008354:	4b37      	ldr	r3, [pc, #220]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800835c:	60bb      	str	r3, [r7, #8]
 800835e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008360:	4b35      	ldr	r3, [pc, #212]	@ (8008438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a34      	ldr	r2, [pc, #208]	@ (8008438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800836a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800836c:	f7fa f842 	bl	80023f4 <HAL_GetTick>
 8008370:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008372:	e008      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008374:	f7fa f83e 	bl	80023f4 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b64      	cmp	r3, #100	@ 0x64
 8008380:	d901      	bls.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e357      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008386:	4b2c      	ldr	r3, [pc, #176]	@ (8008438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0f0      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008392:	4b28      	ldr	r3, [pc, #160]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800839a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d035      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d02e      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083b0:	4b20      	ldr	r3, [pc, #128]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083ba:	4b1e      	ldr	r3, [pc, #120]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083be:	4a1d      	ldr	r2, [pc, #116]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083c4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083c6:	4b1b      	ldr	r3, [pc, #108]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ca:	4a1a      	ldr	r2, [pc, #104]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80083d2:	4a18      	ldr	r2, [pc, #96]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083d8:	4b16      	ldr	r3, [pc, #88]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d114      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e4:	f7fa f806 	bl	80023f4 <HAL_GetTick>
 80083e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ea:	e00a      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083ec:	f7fa f802 	bl	80023f4 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d901      	bls.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e319      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008402:	4b0c      	ldr	r3, [pc, #48]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0ee      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800841a:	d111      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800841c:	4b05      	ldr	r3, [pc, #20]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008428:	4b04      	ldr	r3, [pc, #16]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800842a:	400b      	ands	r3, r1
 800842c:	4901      	ldr	r1, [pc, #4]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800842e:	4313      	orrs	r3, r2
 8008430:	608b      	str	r3, [r1, #8]
 8008432:	e00b      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008434:	40023800 	.word	0x40023800
 8008438:	40007000 	.word	0x40007000
 800843c:	0ffffcff 	.word	0x0ffffcff
 8008440:	4baa      	ldr	r3, [pc, #680]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	4aa9      	ldr	r2, [pc, #676]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008446:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800844a:	6093      	str	r3, [r2, #8]
 800844c:	4ba7      	ldr	r3, [pc, #668]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800844e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008458:	49a4      	ldr	r1, [pc, #656]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800845a:	4313      	orrs	r3, r2
 800845c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0310 	and.w	r3, r3, #16
 8008466:	2b00      	cmp	r3, #0
 8008468:	d010      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800846a:	4ba0      	ldr	r3, [pc, #640]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800846c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008470:	4a9e      	ldr	r2, [pc, #632]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008472:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008476:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800847a:	4b9c      	ldr	r3, [pc, #624]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800847c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008484:	4999      	ldr	r1, [pc, #612]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008486:	4313      	orrs	r3, r2
 8008488:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008498:	4b94      	ldr	r3, [pc, #592]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800849a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800849e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084a6:	4991      	ldr	r1, [pc, #580]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a8:	4313      	orrs	r3, r2
 80084aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084ba:	4b8c      	ldr	r3, [pc, #560]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084c8:	4988      	ldr	r1, [pc, #544]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084dc:	4b83      	ldr	r3, [pc, #524]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084ea:	4980      	ldr	r1, [pc, #512]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084fe:	4b7b      	ldr	r3, [pc, #492]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008504:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800850c:	4977      	ldr	r1, [pc, #476]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850e:	4313      	orrs	r3, r2
 8008510:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00a      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008520:	4b72      	ldr	r3, [pc, #456]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008526:	f023 0203 	bic.w	r2, r3, #3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800852e:	496f      	ldr	r1, [pc, #444]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008530:	4313      	orrs	r3, r2
 8008532:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00a      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008542:	4b6a      	ldr	r3, [pc, #424]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008548:	f023 020c 	bic.w	r2, r3, #12
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008550:	4966      	ldr	r1, [pc, #408]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008552:	4313      	orrs	r3, r2
 8008554:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00a      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008564:	4b61      	ldr	r3, [pc, #388]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800856a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008572:	495e      	ldr	r1, [pc, #376]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008574:	4313      	orrs	r3, r2
 8008576:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008586:	4b59      	ldr	r3, [pc, #356]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800858c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008594:	4955      	ldr	r1, [pc, #340]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008596:	4313      	orrs	r3, r2
 8008598:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00a      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085a8:	4b50      	ldr	r3, [pc, #320]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b6:	494d      	ldr	r1, [pc, #308]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80085ca:	4b48      	ldr	r3, [pc, #288]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085d8:	4944      	ldr	r1, [pc, #272]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00a      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80085ec:	4b3f      	ldr	r3, [pc, #252]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085fa:	493c      	ldr	r1, [pc, #240]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00a      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800860e:	4b37      	ldr	r3, [pc, #220]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008614:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800861c:	4933      	ldr	r1, [pc, #204]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800861e:	4313      	orrs	r3, r2
 8008620:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00a      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008630:	4b2e      	ldr	r3, [pc, #184]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008636:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800863e:	492b      	ldr	r1, [pc, #172]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008640:	4313      	orrs	r3, r2
 8008642:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d011      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008652:	4b26      	ldr	r3, [pc, #152]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008658:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008660:	4922      	ldr	r1, [pc, #136]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008662:	4313      	orrs	r3, r2
 8008664:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800866c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008670:	d101      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008672:	2301      	movs	r3, #1
 8008674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008682:	2301      	movs	r3, #1
 8008684:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00a      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008692:	4b16      	ldr	r3, [pc, #88]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008698:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086a0:	4912      	ldr	r1, [pc, #72]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086b4:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c4:	4909      	ldr	r1, [pc, #36]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d006      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 80d9 	beq.w	8008892 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086e0:	4b02      	ldr	r3, [pc, #8]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a01      	ldr	r2, [pc, #4]	@ (80086ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086ea:	e001      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80086ec:	40023800 	.word	0x40023800
 80086f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086f2:	f7f9 fe7f 	bl	80023f4 <HAL_GetTick>
 80086f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086f8:	e008      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086fa:	f7f9 fe7b 	bl	80023f4 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b64      	cmp	r3, #100	@ 0x64
 8008706:	d901      	bls.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e194      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800870c:	4b6c      	ldr	r3, [pc, #432]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1f0      	bne.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	d021      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008728:	2b00      	cmp	r3, #0
 800872a:	d11d      	bne.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800872c:	4b64      	ldr	r3, [pc, #400]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800872e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008732:	0c1b      	lsrs	r3, r3, #16
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800873a:	4b61      	ldr	r3, [pc, #388]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800873c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008740:	0e1b      	lsrs	r3, r3, #24
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	019a      	lsls	r2, r3, #6
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	041b      	lsls	r3, r3, #16
 8008752:	431a      	orrs	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	061b      	lsls	r3, r3, #24
 8008758:	431a      	orrs	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	071b      	lsls	r3, r3, #28
 8008760:	4957      	ldr	r1, [pc, #348]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008762:	4313      	orrs	r3, r2
 8008764:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008778:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800877c:	d00a      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008786:	2b00      	cmp	r3, #0
 8008788:	d02e      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008792:	d129      	bne.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008794:	4b4a      	ldr	r3, [pc, #296]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800879a:	0c1b      	lsrs	r3, r3, #16
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087a2:	4b47      	ldr	r3, [pc, #284]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087a8:	0f1b      	lsrs	r3, r3, #28
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	019a      	lsls	r2, r3, #6
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	041b      	lsls	r3, r3, #16
 80087ba:	431a      	orrs	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	061b      	lsls	r3, r3, #24
 80087c2:	431a      	orrs	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	071b      	lsls	r3, r3, #28
 80087c8:	493d      	ldr	r1, [pc, #244]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80087d0:	4b3b      	ldr	r3, [pc, #236]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087d6:	f023 021f 	bic.w	r2, r3, #31
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087de:	3b01      	subs	r3, #1
 80087e0:	4937      	ldr	r1, [pc, #220]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d01d      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80087f4:	4b32      	ldr	r3, [pc, #200]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087fa:	0e1b      	lsrs	r3, r3, #24
 80087fc:	f003 030f 	and.w	r3, r3, #15
 8008800:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008802:	4b2f      	ldr	r3, [pc, #188]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008808:	0f1b      	lsrs	r3, r3, #28
 800880a:	f003 0307 	and.w	r3, r3, #7
 800880e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	019a      	lsls	r2, r3, #6
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	431a      	orrs	r2, r3
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	061b      	lsls	r3, r3, #24
 8008822:	431a      	orrs	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	071b      	lsls	r3, r3, #28
 8008828:	4925      	ldr	r1, [pc, #148]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d011      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	019a      	lsls	r2, r3, #6
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	041b      	lsls	r3, r3, #16
 8008848:	431a      	orrs	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	061b      	lsls	r3, r3, #24
 8008850:	431a      	orrs	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	071b      	lsls	r3, r3, #28
 8008858:	4919      	ldr	r1, [pc, #100]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800885a:	4313      	orrs	r3, r2
 800885c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008860:	4b17      	ldr	r3, [pc, #92]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a16      	ldr	r2, [pc, #88]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008866:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800886a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800886c:	f7f9 fdc2 	bl	80023f4 <HAL_GetTick>
 8008870:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008872:	e008      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008874:	f7f9 fdbe 	bl	80023f4 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	2b64      	cmp	r3, #100	@ 0x64
 8008880:	d901      	bls.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e0d7      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008886:	4b0e      	ldr	r3, [pc, #56]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0f0      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b01      	cmp	r3, #1
 8008896:	f040 80cd 	bne.w	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800889a:	4b09      	ldr	r3, [pc, #36]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a08      	ldr	r2, [pc, #32]	@ (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088a6:	f7f9 fda5 	bl	80023f4 <HAL_GetTick>
 80088aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088ac:	e00a      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088ae:	f7f9 fda1 	bl	80023f4 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b64      	cmp	r3, #100	@ 0x64
 80088ba:	d903      	bls.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e0ba      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80088c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088c4:	4b5e      	ldr	r3, [pc, #376]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088d0:	d0ed      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d009      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d02e      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d12a      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80088fa:	4b51      	ldr	r3, [pc, #324]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008900:	0c1b      	lsrs	r3, r3, #16
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008908:	4b4d      	ldr	r3, [pc, #308]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800890a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800890e:	0f1b      	lsrs	r3, r3, #28
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	019a      	lsls	r2, r3, #6
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	041b      	lsls	r3, r3, #16
 8008920:	431a      	orrs	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	061b      	lsls	r3, r3, #24
 8008928:	431a      	orrs	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	071b      	lsls	r3, r3, #28
 800892e:	4944      	ldr	r1, [pc, #272]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008930:	4313      	orrs	r3, r2
 8008932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008936:	4b42      	ldr	r3, [pc, #264]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800893c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008944:	3b01      	subs	r3, #1
 8008946:	021b      	lsls	r3, r3, #8
 8008948:	493d      	ldr	r1, [pc, #244]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800894a:	4313      	orrs	r3, r2
 800894c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d022      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008964:	d11d      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008966:	4b36      	ldr	r3, [pc, #216]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800896c:	0e1b      	lsrs	r3, r3, #24
 800896e:	f003 030f 	and.w	r3, r3, #15
 8008972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008974:	4b32      	ldr	r3, [pc, #200]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800897a:	0f1b      	lsrs	r3, r3, #28
 800897c:	f003 0307 	and.w	r3, r3, #7
 8008980:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	019a      	lsls	r2, r3, #6
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	041b      	lsls	r3, r3, #16
 800898e:	431a      	orrs	r2, r3
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	061b      	lsls	r3, r3, #24
 8008994:	431a      	orrs	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	071b      	lsls	r3, r3, #28
 800899a:	4929      	ldr	r1, [pc, #164]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800899c:	4313      	orrs	r3, r2
 800899e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0308 	and.w	r3, r3, #8
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d028      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089ae:	4b24      	ldr	r3, [pc, #144]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b4:	0e1b      	lsrs	r3, r3, #24
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089bc:	4b20      	ldr	r3, [pc, #128]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c2:	0c1b      	lsrs	r3, r3, #16
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	019a      	lsls	r2, r3, #6
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	041b      	lsls	r3, r3, #16
 80089d4:	431a      	orrs	r2, r3
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	061b      	lsls	r3, r3, #24
 80089da:	431a      	orrs	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	071b      	lsls	r3, r3, #28
 80089e2:	4917      	ldr	r1, [pc, #92]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80089ea:	4b15      	ldr	r3, [pc, #84]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f8:	4911      	ldr	r1, [pc, #68]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a00:	4b0f      	ldr	r3, [pc, #60]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a0e      	ldr	r2, [pc, #56]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a0c:	f7f9 fcf2 	bl	80023f4 <HAL_GetTick>
 8008a10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a12:	e008      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a14:	f7f9 fcee 	bl	80023f4 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b64      	cmp	r3, #100	@ 0x64
 8008a20:	d901      	bls.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e007      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a26:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a32:	d1ef      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3720      	adds	r7, #32
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	40023800 	.word	0x40023800

08008a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e09d      	b.n	8008b92 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d108      	bne.n	8008a70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a66:	d009      	beq.n	8008a7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	61da      	str	r2, [r3, #28]
 8008a6e:	e005      	b.n	8008a7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7f8 fc6c 	bl	8001374 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ab2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008abc:	d902      	bls.n	8008ac4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
 8008ac2:	e002      	b.n	8008aca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ac4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ac8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008ad2:	d007      	beq.n	8008ae4 <HAL_SPI_Init+0xa0>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008adc:	d002      	beq.n	8008ae4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	431a      	orrs	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b26:	ea42 0103 	orr.w	r1, r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	0c1b      	lsrs	r3, r3, #16
 8008b40:	f003 0204 	and.w	r2, r3, #4
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b52:	f003 0308 	and.w	r3, r3, #8
 8008b56:	431a      	orrs	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b60:	ea42 0103 	orr.w	r1, r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d001      	beq.n	8008bba <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e0d4      	b.n	8008d64 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <HAL_SPI_Transmit_DMA+0x2a>
 8008bc0:	88fb      	ldrh	r3, [r7, #6]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e0cc      	b.n	8008d64 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d101      	bne.n	8008bd8 <HAL_SPI_Transmit_DMA+0x3c>
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	e0c5      	b.n	8008d64 <HAL_SPI_Transmit_DMA+0x1c8>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2203      	movs	r2, #3
 8008be4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	88fa      	ldrh	r2, [r7, #6]
 8008bf8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	88fa      	ldrh	r2, [r7, #6]
 8008bfe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c2a:	d10f      	bne.n	8008c4c <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c50:	4a46      	ldr	r2, [pc, #280]	@ (8008d6c <HAL_SPI_Transmit_DMA+0x1d0>)
 8008c52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c58:	4a45      	ldr	r2, [pc, #276]	@ (8008d70 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008c5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c60:	4a44      	ldr	r2, [pc, #272]	@ (8008d74 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008c62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c68:	2200      	movs	r2, #0
 8008c6a:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c7a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c84:	d82d      	bhi.n	8008ce2 <HAL_SPI_Transmit_DMA+0x146>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c90:	d127      	bne.n	8008ce2 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10f      	bne.n	8008cc0 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cae:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	085b      	lsrs	r3, r3, #1
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cbe:	e010      	b.n	8008ce2 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	085b      	lsrs	r3, r3, #1
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	3301      	adds	r3, #1
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cea:	4619      	mov	r1, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cf8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008cfa:	f7fa fbcb 	bl	8003494 <HAL_DMA_Start_IT>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00b      	beq.n	8008d1c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d08:	f043 0210 	orr.w	r2, r3, #16
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e023      	b.n	8008d64 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d26:	2b40      	cmp	r3, #64	@ 0x40
 8008d28:	d007      	beq.n	8008d3a <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d38:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f042 0220 	orr.w	r2, r2, #32
 8008d50:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0202 	orr.w	r2, r2, #2
 8008d60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	0800970d 	.word	0x0800970d
 8008d70:	08009529 	.word	0x08009529
 8008d74:	08009761 	.word	0x08009761

08008d78 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4613      	mov	r3, r2
 8008d84:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d001      	beq.n	8008d96 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008d92:	2302      	movs	r3, #2
 8008d94:	e105      	b.n	8008fa2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <HAL_SPI_Receive_DMA+0x2a>
 8008d9c:	88fb      	ldrh	r3, [r7, #6]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e0fd      	b.n	8008fa2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d110      	bne.n	8008dd0 <HAL_SPI_Receive_DMA+0x58>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008db6:	d10b      	bne.n	8008dd0 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2204      	movs	r2, #4
 8008dbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 f8f6 	bl	8008fb8 <HAL_SPI_TransmitReceive_DMA>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	e0e8      	b.n	8008fa2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d101      	bne.n	8008dde <HAL_SPI_Receive_DMA+0x66>
 8008dda:	2302      	movs	r3, #2
 8008ddc:	e0e1      	b.n	8008fa2 <HAL_SPI_Receive_DMA+0x22a>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2204      	movs	r2, #4
 8008dea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	88fa      	ldrh	r2, [r7, #6]
 8008dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	88fa      	ldrh	r2, [r7, #6]
 8008e06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e2a:	d10f      	bne.n	8008e4c <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e5a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e64:	d908      	bls.n	8008e78 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e74:	605a      	str	r2, [r3, #4]
 8008e76:	e042      	b.n	8008efe <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e86:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e92:	d134      	bne.n	8008efe <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ea2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d111      	bne.n	8008ed8 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ec2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	085b      	lsrs	r3, r3, #1
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008ed6:	e012      	b.n	8008efe <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ee6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	085b      	lsrs	r3, r3, #1
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f02:	4a2a      	ldr	r2, [pc, #168]	@ (8008fac <HAL_SPI_Receive_DMA+0x234>)
 8008f04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0a:	4a29      	ldr	r2, [pc, #164]	@ (8008fb0 <HAL_SPI_Receive_DMA+0x238>)
 8008f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f12:	4a28      	ldr	r2, [pc, #160]	@ (8008fb4 <HAL_SPI_Receive_DMA+0x23c>)
 8008f14:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	330c      	adds	r3, #12
 8008f28:	4619      	mov	r1, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f36:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f38:	f7fa faac 	bl	8003494 <HAL_DMA_Start_IT>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00b      	beq.n	8008f5a <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f46:	f043 0210 	orr.w	r2, r3, #16
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e023      	b.n	8008fa2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f64:	2b40      	cmp	r3, #64	@ 0x40
 8008f66:	d007      	beq.n	8008f78 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f76:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0220 	orr.w	r2, r2, #32
 8008f8e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0201 	orr.w	r2, r2, #1
 8008f9e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	08009729 	.word	0x08009729
 8008fb0:	080095d1 	.word	0x080095d1
 8008fb4:	08009761 	.word	0x08009761

08008fb8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fcc:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d00c      	beq.n	8008ff4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fe0:	d106      	bne.n	8008ff0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d102      	bne.n	8008ff0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d001      	beq.n	8008ff4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e158      	b.n	80092a6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009000:	887b      	ldrh	r3, [r7, #2]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e14d      	b.n	80092a6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_SPI_TransmitReceive_DMA+0x60>
 8009014:	2302      	movs	r3, #2
 8009016:	e146      	b.n	80092a6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b04      	cmp	r3, #4
 800902a:	d003      	beq.n	8009034 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2205      	movs	r2, #5
 8009030:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	887a      	ldrh	r2, [r7, #2]
 8009044:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	887a      	ldrh	r2, [r7, #2]
 800904a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	887a      	ldrh	r2, [r7, #2]
 8009056:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	887a      	ldrh	r2, [r7, #2]
 800905e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800907c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009086:	d908      	bls.n	800909a <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009096:	605a      	str	r2, [r3, #4]
 8009098:	e06f      	b.n	800917a <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090a8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090b4:	d126      	bne.n	8009104 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10f      	bne.n	80090e2 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80090d0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	085b      	lsrs	r3, r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80090e0:	e010      	b.n	8009104 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090f0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	3301      	adds	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800910e:	d134      	bne.n	800917a <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800911e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009126:	b29b      	uxth	r3, r3
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b00      	cmp	r3, #0
 800912e:	d111      	bne.n	8009154 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800913e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009146:	b29b      	uxth	r3, r3
 8009148:	085b      	lsrs	r3, r3, #1
 800914a:	b29a      	uxth	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009152:	e012      	b.n	800917a <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009162:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800916a:	b29b      	uxth	r3, r3
 800916c:	085b      	lsrs	r3, r3, #1
 800916e:	b29b      	uxth	r3, r3
 8009170:	3301      	adds	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b04      	cmp	r3, #4
 8009184:	d108      	bne.n	8009198 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800918a:	4a49      	ldr	r2, [pc, #292]	@ (80092b0 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800918c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009192:	4a48      	ldr	r2, [pc, #288]	@ (80092b4 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8009194:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009196:	e007      	b.n	80091a8 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800919c:	4a46      	ldr	r2, [pc, #280]	@ (80092b8 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800919e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a4:	4a45      	ldr	r2, [pc, #276]	@ (80092bc <HAL_SPI_TransmitReceive_DMA+0x304>)
 80091a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ac:	4a44      	ldr	r2, [pc, #272]	@ (80092c0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80091ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b4:	2200      	movs	r2, #0
 80091b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	4619      	mov	r1, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091d2:	f7fa f95f 	bl	8003494 <HAL_DMA_Start_IT>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00b      	beq.n	80091f4 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091e0:	f043 0210 	orr.w	r2, r3, #16
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e058      	b.n	80092a6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0201 	orr.w	r2, r2, #1
 8009202:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009208:	2200      	movs	r2, #0
 800920a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009210:	2200      	movs	r2, #0
 8009212:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009218:	2200      	movs	r2, #0
 800921a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009220:	2200      	movs	r2, #0
 8009222:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922c:	4619      	mov	r1, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	330c      	adds	r3, #12
 8009234:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800923a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800923c:	f7fa f92a 	bl	8003494 <HAL_DMA_Start_IT>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00b      	beq.n	800925e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800924a:	f043 0210 	orr.w	r2, r3, #16
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e023      	b.n	80092a6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009268:	2b40      	cmp	r3, #64	@ 0x40
 800926a:	d007      	beq.n	800927c <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800927a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0220 	orr.w	r2, r2, #32
 8009292:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0202 	orr.w	r2, r2, #2
 80092a2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3718      	adds	r7, #24
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	08009729 	.word	0x08009729
 80092b4:	080095d1 	.word	0x080095d1
 80092b8:	08009745 	.word	0x08009745
 80092bc:	0800967b 	.word	0x0800967b
 80092c0:	08009761 	.word	0x08009761

080092c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	099b      	lsrs	r3, r3, #6
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10f      	bne.n	8009308 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	099b      	lsrs	r3, r3, #6
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d004      	beq.n	8009308 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
    return;
 8009306:	e0d7      	b.n	80094b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	085b      	lsrs	r3, r3, #1
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <HAL_SPI_IRQHandler+0x66>
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	09db      	lsrs	r3, r3, #7
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	d004      	beq.n	800932a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	4798      	blx	r3
    return;
 8009328:	e0c6      	b.n	80094b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	095b      	lsrs	r3, r3, #5
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10c      	bne.n	8009350 <HAL_SPI_IRQHandler+0x8c>
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	099b      	lsrs	r3, r3, #6
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b00      	cmp	r3, #0
 8009340:	d106      	bne.n	8009350 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	0a1b      	lsrs	r3, r3, #8
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 80b4 	beq.w	80094b8 <HAL_SPI_IRQHandler+0x1f4>
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	095b      	lsrs	r3, r3, #5
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 80ad 	beq.w	80094b8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	099b      	lsrs	r3, r3, #6
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d023      	beq.n	80093b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b03      	cmp	r3, #3
 8009374:	d011      	beq.n	800939a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800937a:	f043 0204 	orr.w	r2, r3, #4
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	617b      	str	r3, [r7, #20]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	617b      	str	r3, [r7, #20]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	e00b      	b.n	80093b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800939a:	2300      	movs	r3, #0
 800939c:	613b      	str	r3, [r7, #16]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	613b      	str	r3, [r7, #16]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	613b      	str	r3, [r7, #16]
 80093ae:	693b      	ldr	r3, [r7, #16]
        return;
 80093b0:	e082      	b.n	80094b8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	095b      	lsrs	r3, r3, #5
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d014      	beq.n	80093e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093c2:	f043 0201 	orr.w	r2, r3, #1
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	0a1b      	lsrs	r3, r3, #8
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00c      	beq.n	800940e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f8:	f043 0208 	orr.w	r2, r3, #8
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009400:	2300      	movs	r3, #0
 8009402:	60bb      	str	r3, [r7, #8]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	60bb      	str	r3, [r7, #8]
 800940c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009412:	2b00      	cmp	r3, #0
 8009414:	d04f      	beq.n	80094b6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009424:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b00      	cmp	r3, #0
 8009436:	d104      	bne.n	8009442 <HAL_SPI_IRQHandler+0x17e>
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d034      	beq.n	80094ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f022 0203 	bic.w	r2, r2, #3
 8009450:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009456:	2b00      	cmp	r3, #0
 8009458:	d011      	beq.n	800947e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800945e:	4a18      	ldr	r2, [pc, #96]	@ (80094c0 <HAL_SPI_IRQHandler+0x1fc>)
 8009460:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009466:	4618      	mov	r0, r3
 8009468:	f7fa f8e4 	bl	8003634 <HAL_DMA_Abort_IT>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d005      	beq.n	800947e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009476:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009482:	2b00      	cmp	r3, #0
 8009484:	d016      	beq.n	80094b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800948a:	4a0d      	ldr	r2, [pc, #52]	@ (80094c0 <HAL_SPI_IRQHandler+0x1fc>)
 800948c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009492:	4618      	mov	r0, r3
 8009494:	f7fa f8ce 	bl	8003634 <HAL_DMA_Abort_IT>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80094aa:	e003      	b.n	80094b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f831 	bl	8009514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80094b2:	e000      	b.n	80094b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80094b4:	bf00      	nop
    return;
 80094b6:	bf00      	nop
  }
}
 80094b8:	3720      	adds	r7, #32
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	080097a1 	.word	0x080097a1

080094c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009534:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009536:	f7f8 ff5d 	bl	80023f4 <HAL_GetTick>
 800953a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800954a:	d03b      	beq.n	80095c4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0220 	bic.w	r2, r2, #32
 800955a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 0202 	bic.w	r2, r2, #2
 800956a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	2164      	movs	r1, #100	@ 0x64
 8009570:	6978      	ldr	r0, [r7, #20]
 8009572:	f000 fac5 	bl	8009b00 <SPI_EndRxTxTransaction>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d005      	beq.n	8009588 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009580:	f043 0220 	orr.w	r2, r3, #32
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009590:	2300      	movs	r3, #0
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2200      	movs	r2, #0
 80095aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80095bc:	6978      	ldr	r0, [r7, #20]
 80095be:	f7ff ffa9 	bl	8009514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80095c2:	e002      	b.n	80095ca <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80095c4:	6978      	ldr	r0, [r7, #20]
 80095c6:	f016 fe5b 	bl	8020280 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095dc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095de:	f7f8 ff09 	bl	80023f4 <HAL_GetTick>
 80095e2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095f2:	d03c      	beq.n	800966e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 0220 	bic.w	r2, r2, #32
 8009602:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10d      	bne.n	8009628 <SPI_DMAReceiveCplt+0x58>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009614:	d108      	bne.n	8009628 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0203 	bic.w	r2, r2, #3
 8009624:	605a      	str	r2, [r3, #4]
 8009626:	e007      	b.n	8009638 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 0201 	bic.w	r2, r2, #1
 8009636:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	2164      	movs	r1, #100	@ 0x64
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f000 f9e3 	bl	8009a08 <SPI_EndRxTransaction>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2220      	movs	r2, #32
 800964c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f7ff ff54 	bl	8009514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800966c:	e002      	b.n	8009674 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f016 fe26 	bl	80202c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009686:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009688:	f7f8 feb4 	bl	80023f4 <HAL_GetTick>
 800968c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800969c:	d030      	beq.n	8009700 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f022 0220 	bic.w	r2, r2, #32
 80096ac:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	2164      	movs	r1, #100	@ 0x64
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 fa24 	bl	8009b00 <SPI_EndRxTxTransaction>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d005      	beq.n	80096ca <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096c2:	f043 0220 	orr.w	r2, r3, #32
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f022 0203 	bic.w	r2, r2, #3
 80096d8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7ff ff0b 	bl	8009514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80096fe:	e002      	b.n	8009706 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff fedf 	bl	80094c4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009718:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f7ff fedc 	bl	80094d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009720:	bf00      	nop
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009734:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f7ff fed8 	bl	80094ec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800973c:	bf00      	nop
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009750:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7ff fed4 	bl	8009500 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009758:	bf00      	nop
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f022 0203 	bic.w	r2, r2, #3
 800977c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009782:	f043 0210 	orr.w	r2, r3, #16
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7ff febe 	bl	8009514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009798:	bf00      	nop
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f7ff fea9 	bl	8009514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097c2:	bf00      	nop
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
	...

080097cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	4613      	mov	r3, r2
 80097da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097dc:	f7f8 fe0a 	bl	80023f4 <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e4:	1a9b      	subs	r3, r3, r2
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	4413      	add	r3, r2
 80097ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097ec:	f7f8 fe02 	bl	80023f4 <HAL_GetTick>
 80097f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097f2:	4b39      	ldr	r3, [pc, #228]	@ (80098d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	015b      	lsls	r3, r3, #5
 80097f8:	0d1b      	lsrs	r3, r3, #20
 80097fa:	69fa      	ldr	r2, [r7, #28]
 80097fc:	fb02 f303 	mul.w	r3, r2, r3
 8009800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009802:	e055      	b.n	80098b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800980a:	d051      	beq.n	80098b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800980c:	f7f8 fdf2 	bl	80023f4 <HAL_GetTick>
 8009810:	4602      	mov	r2, r0
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	69fa      	ldr	r2, [r7, #28]
 8009818:	429a      	cmp	r2, r3
 800981a:	d902      	bls.n	8009822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d13d      	bne.n	800989e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800983a:	d111      	bne.n	8009860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009844:	d004      	beq.n	8009850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800984e:	d107      	bne.n	8009860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800985e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009868:	d10f      	bne.n	800988a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e018      	b.n	80098d0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	e002      	b.n	80098b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	4013      	ands	r3, r2
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	429a      	cmp	r2, r3
 80098be:	bf0c      	ite	eq
 80098c0:	2301      	moveq	r3, #1
 80098c2:	2300      	movne	r3, #0
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	461a      	mov	r2, r3
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d19a      	bne.n	8009804 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3720      	adds	r7, #32
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20000000 	.word	0x20000000

080098dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08a      	sub	sp, #40	@ 0x28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80098ee:	f7f8 fd81 	bl	80023f4 <HAL_GetTick>
 80098f2:	4602      	mov	r2, r0
 80098f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f6:	1a9b      	subs	r3, r3, r2
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	4413      	add	r3, r2
 80098fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80098fe:	f7f8 fd79 	bl	80023f4 <HAL_GetTick>
 8009902:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	330c      	adds	r3, #12
 800990a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800990c:	4b3d      	ldr	r3, [pc, #244]	@ (8009a04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	00da      	lsls	r2, r3, #3
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	0d1b      	lsrs	r3, r3, #20
 800991c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800991e:	fb02 f303 	mul.w	r3, r2, r3
 8009922:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009924:	e061      	b.n	80099ea <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800992c:	d107      	bne.n	800993e <SPI_WaitFifoStateUntilTimeout+0x62>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d104      	bne.n	800993e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800993c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009944:	d051      	beq.n	80099ea <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009946:	f7f8 fd55 	bl	80023f4 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009952:	429a      	cmp	r2, r3
 8009954:	d902      	bls.n	800995c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009958:	2b00      	cmp	r3, #0
 800995a:	d13d      	bne.n	80099d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800996a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009974:	d111      	bne.n	800999a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800997e:	d004      	beq.n	800998a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009988:	d107      	bne.n	800999a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009998:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800999e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099a2:	d10f      	bne.n	80099c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e011      	b.n	80099fc <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d102      	bne.n	80099e4 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80099de:	2300      	movs	r3, #0
 80099e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80099e2:	e002      	b.n	80099ea <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689a      	ldr	r2, [r3, #8]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	4013      	ands	r3, r2
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d195      	bne.n	8009926 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3728      	adds	r7, #40	@ 0x28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20000000 	.word	0x20000000

08009a08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af02      	add	r7, sp, #8
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a1c:	d111      	bne.n	8009a42 <SPI_EndRxTransaction+0x3a>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a26:	d004      	beq.n	8009a32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a30:	d107      	bne.n	8009a42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a4a:	d112      	bne.n	8009a72 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	2180      	movs	r1, #128	@ 0x80
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff feb8 	bl	80097cc <SPI_WaitFlagStateUntilTimeout>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d021      	beq.n	8009aa6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a66:	f043 0220 	orr.w	r2, r3, #32
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e03d      	b.n	8009aee <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a72:	4b21      	ldr	r3, [pc, #132]	@ (8009af8 <SPI_EndRxTransaction+0xf0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a21      	ldr	r2, [pc, #132]	@ (8009afc <SPI_EndRxTransaction+0xf4>)
 8009a78:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7c:	0d5b      	lsrs	r3, r3, #21
 8009a7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009a82:	fb02 f303 	mul.w	r3, r2, r3
 8009a86:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a9e:	2b80      	cmp	r3, #128	@ 0x80
 8009aa0:	d0f2      	beq.n	8009a88 <SPI_EndRxTransaction+0x80>
 8009aa2:	e000      	b.n	8009aa6 <SPI_EndRxTransaction+0x9e>
        break;
 8009aa4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009aae:	d11d      	bne.n	8009aec <SPI_EndRxTransaction+0xe4>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ab8:	d004      	beq.n	8009ac4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ac2:	d113      	bne.n	8009aec <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f7ff ff03 	bl	80098dc <SPI_WaitFifoStateUntilTimeout>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ae0:	f043 0220 	orr.w	r2, r3, #32
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e000      	b.n	8009aee <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20000000 	.word	0x20000000
 8009afc:	165e9f81 	.word	0x165e9f81

08009b00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f7ff fedf 	bl	80098dc <SPI_WaitFifoStateUntilTimeout>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d007      	beq.n	8009b34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b28:	f043 0220 	orr.w	r2, r3, #32
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e046      	b.n	8009bc2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b34:	4b25      	ldr	r3, [pc, #148]	@ (8009bcc <SPI_EndRxTxTransaction+0xcc>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a25      	ldr	r2, [pc, #148]	@ (8009bd0 <SPI_EndRxTxTransaction+0xd0>)
 8009b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3e:	0d5b      	lsrs	r3, r3, #21
 8009b40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b44:	fb02 f303 	mul.w	r3, r2, r3
 8009b48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b52:	d112      	bne.n	8009b7a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2180      	movs	r1, #128	@ 0x80
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f7ff fe34 	bl	80097cc <SPI_WaitFlagStateUntilTimeout>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d016      	beq.n	8009b98 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b6e:	f043 0220 	orr.w	r2, r3, #32
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e023      	b.n	8009bc2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00a      	beq.n	8009b96 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	3b01      	subs	r3, #1
 8009b84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b90:	2b80      	cmp	r3, #128	@ 0x80
 8009b92:	d0f2      	beq.n	8009b7a <SPI_EndRxTxTransaction+0x7a>
 8009b94:	e000      	b.n	8009b98 <SPI_EndRxTxTransaction+0x98>
        break;
 8009b96:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7ff fe99 	bl	80098dc <SPI_WaitFifoStateUntilTimeout>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d007      	beq.n	8009bc0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bb4:	f043 0220 	orr.w	r2, r3, #32
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e000      	b.n	8009bc2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	20000000 	.word	0x20000000
 8009bd0:	165e9f81 	.word	0x165e9f81

08009bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e049      	b.n	8009c7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d106      	bne.n	8009c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7f8 f824 	bl	8001c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2202      	movs	r2, #2
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4619      	mov	r1, r3
 8009c12:	4610      	mov	r0, r2
 8009c14:	f000 fb40 	bl	800a298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d001      	beq.n	8009c9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e04c      	b.n	8009d36 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a26      	ldr	r2, [pc, #152]	@ (8009d44 <HAL_TIM_Base_Start+0xc0>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d022      	beq.n	8009cf4 <HAL_TIM_Base_Start+0x70>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cb6:	d01d      	beq.n	8009cf4 <HAL_TIM_Base_Start+0x70>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a22      	ldr	r2, [pc, #136]	@ (8009d48 <HAL_TIM_Base_Start+0xc4>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d018      	beq.n	8009cf4 <HAL_TIM_Base_Start+0x70>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a21      	ldr	r2, [pc, #132]	@ (8009d4c <HAL_TIM_Base_Start+0xc8>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d013      	beq.n	8009cf4 <HAL_TIM_Base_Start+0x70>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8009d50 <HAL_TIM_Base_Start+0xcc>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00e      	beq.n	8009cf4 <HAL_TIM_Base_Start+0x70>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a1e      	ldr	r2, [pc, #120]	@ (8009d54 <HAL_TIM_Base_Start+0xd0>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d009      	beq.n	8009cf4 <HAL_TIM_Base_Start+0x70>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8009d58 <HAL_TIM_Base_Start+0xd4>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d004      	beq.n	8009cf4 <HAL_TIM_Base_Start+0x70>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a1b      	ldr	r2, [pc, #108]	@ (8009d5c <HAL_TIM_Base_Start+0xd8>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d115      	bne.n	8009d20 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689a      	ldr	r2, [r3, #8]
 8009cfa:	4b19      	ldr	r3, [pc, #100]	@ (8009d60 <HAL_TIM_Base_Start+0xdc>)
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b06      	cmp	r3, #6
 8009d04:	d015      	beq.n	8009d32 <HAL_TIM_Base_Start+0xae>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d0c:	d011      	beq.n	8009d32 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f042 0201 	orr.w	r2, r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d1e:	e008      	b.n	8009d32 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f042 0201 	orr.w	r2, r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	e000      	b.n	8009d34 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	40010000 	.word	0x40010000
 8009d48:	40000400 	.word	0x40000400
 8009d4c:	40000800 	.word	0x40000800
 8009d50:	40000c00 	.word	0x40000c00
 8009d54:	40010400 	.word	0x40010400
 8009d58:	40014000 	.word	0x40014000
 8009d5c:	40001800 	.word	0x40001800
 8009d60:	00010007 	.word	0x00010007

08009d64 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6a1a      	ldr	r2, [r3, #32]
 8009d72:	4b0f      	ldr	r3, [pc, #60]	@ (8009db0 <HAL_TIM_Base_Stop+0x4c>)
 8009d74:	4013      	ands	r3, r2
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10f      	bne.n	8009d9a <HAL_TIM_Base_Stop+0x36>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6a1a      	ldr	r2, [r3, #32]
 8009d80:	f240 4344 	movw	r3, #1092	@ 0x444
 8009d84:	4013      	ands	r3, r2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d107      	bne.n	8009d9a <HAL_TIM_Base_Stop+0x36>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f022 0201 	bic.w	r2, r2, #1
 8009d98:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	00111111 	.word	0x00111111

08009db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d001      	beq.n	8009dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e054      	b.n	8009e76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a26      	ldr	r2, [pc, #152]	@ (8009e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d022      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009df6:	d01d      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a22      	ldr	r2, [pc, #136]	@ (8009e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d018      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a21      	ldr	r2, [pc, #132]	@ (8009e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d013      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a1f      	ldr	r2, [pc, #124]	@ (8009e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00e      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009e94 <HAL_TIM_Base_Start_IT+0xe0>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d009      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a1c      	ldr	r2, [pc, #112]	@ (8009e98 <HAL_TIM_Base_Start_IT+0xe4>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d004      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8009e9c <HAL_TIM_Base_Start_IT+0xe8>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d115      	bne.n	8009e60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689a      	ldr	r2, [r3, #8]
 8009e3a:	4b19      	ldr	r3, [pc, #100]	@ (8009ea0 <HAL_TIM_Base_Start_IT+0xec>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b06      	cmp	r3, #6
 8009e44:	d015      	beq.n	8009e72 <HAL_TIM_Base_Start_IT+0xbe>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e4c:	d011      	beq.n	8009e72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f042 0201 	orr.w	r2, r2, #1
 8009e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e5e:	e008      	b.n	8009e72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0201 	orr.w	r2, r2, #1
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	e000      	b.n	8009e74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	40010000 	.word	0x40010000
 8009e88:	40000400 	.word	0x40000400
 8009e8c:	40000800 	.word	0x40000800
 8009e90:	40000c00 	.word	0x40000c00
 8009e94:	40010400 	.word	0x40010400
 8009e98:	40014000 	.word	0x40014000
 8009e9c:	40001800 	.word	0x40001800
 8009ea0:	00010007 	.word	0x00010007

08009ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f003 0302 	and.w	r3, r3, #2
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d020      	beq.n	8009f08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d01b      	beq.n	8009f08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f06f 0202 	mvn.w	r2, #2
 8009ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	f003 0303 	and.w	r3, r3, #3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d003      	beq.n	8009ef6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f9b4 	bl	800a25c <HAL_TIM_IC_CaptureCallback>
 8009ef4:	e005      	b.n	8009f02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f9a6 	bl	800a248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f9b7 	bl	800a270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d020      	beq.n	8009f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f003 0304 	and.w	r3, r3, #4
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01b      	beq.n	8009f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f06f 0204 	mvn.w	r2, #4
 8009f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2202      	movs	r2, #2
 8009f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f98e 	bl	800a25c <HAL_TIM_IC_CaptureCallback>
 8009f40:	e005      	b.n	8009f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f980 	bl	800a248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f991 	bl	800a270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	f003 0308 	and.w	r3, r3, #8
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d020      	beq.n	8009fa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f003 0308 	and.w	r3, r3, #8
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d01b      	beq.n	8009fa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f06f 0208 	mvn.w	r2, #8
 8009f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2204      	movs	r2, #4
 8009f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	f003 0303 	and.w	r3, r3, #3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f968 	bl	800a25c <HAL_TIM_IC_CaptureCallback>
 8009f8c:	e005      	b.n	8009f9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f95a 	bl	800a248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f96b 	bl	800a270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f003 0310 	and.w	r3, r3, #16
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d020      	beq.n	8009fec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f003 0310 	and.w	r3, r3, #16
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d01b      	beq.n	8009fec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f06f 0210 	mvn.w	r2, #16
 8009fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2208      	movs	r2, #8
 8009fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f942 	bl	800a25c <HAL_TIM_IC_CaptureCallback>
 8009fd8:	e005      	b.n	8009fe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f934 	bl	800a248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f945 	bl	800a270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00c      	beq.n	800a010 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d007      	beq.n	800a010 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0201 	mvn.w	r2, #1
 800a008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7f7 f924 	bl	8001258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a016:	2b00      	cmp	r3, #0
 800a018:	d104      	bne.n	800a024 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00c      	beq.n	800a03e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d007      	beq.n	800a03e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fb05 	bl	800a648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00c      	beq.n	800a062 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d007      	beq.n	800a062 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a05a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fafd 	bl	800a65c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00c      	beq.n	800a086 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a072:	2b00      	cmp	r3, #0
 800a074:	d007      	beq.n	800a086 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a07e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f8ff 	bl	800a284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00c      	beq.n	800a0aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f003 0320 	and.w	r3, r3, #32
 800a096:	2b00      	cmp	r3, #0
 800a098:	d007      	beq.n	800a0aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f06f 0220 	mvn.w	r2, #32
 800a0a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fac5 	bl	800a634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0aa:	bf00      	nop
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d101      	bne.n	800a0d0 <HAL_TIM_ConfigClockSource+0x1c>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e0b4      	b.n	800a23a <HAL_TIM_ConfigClockSource+0x186>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	4b56      	ldr	r3, [pc, #344]	@ (800a244 <HAL_TIM_ConfigClockSource+0x190>)
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a108:	d03e      	beq.n	800a188 <HAL_TIM_ConfigClockSource+0xd4>
 800a10a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a10e:	f200 8087 	bhi.w	800a220 <HAL_TIM_ConfigClockSource+0x16c>
 800a112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a116:	f000 8086 	beq.w	800a226 <HAL_TIM_ConfigClockSource+0x172>
 800a11a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a11e:	d87f      	bhi.n	800a220 <HAL_TIM_ConfigClockSource+0x16c>
 800a120:	2b70      	cmp	r3, #112	@ 0x70
 800a122:	d01a      	beq.n	800a15a <HAL_TIM_ConfigClockSource+0xa6>
 800a124:	2b70      	cmp	r3, #112	@ 0x70
 800a126:	d87b      	bhi.n	800a220 <HAL_TIM_ConfigClockSource+0x16c>
 800a128:	2b60      	cmp	r3, #96	@ 0x60
 800a12a:	d050      	beq.n	800a1ce <HAL_TIM_ConfigClockSource+0x11a>
 800a12c:	2b60      	cmp	r3, #96	@ 0x60
 800a12e:	d877      	bhi.n	800a220 <HAL_TIM_ConfigClockSource+0x16c>
 800a130:	2b50      	cmp	r3, #80	@ 0x50
 800a132:	d03c      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0xfa>
 800a134:	2b50      	cmp	r3, #80	@ 0x50
 800a136:	d873      	bhi.n	800a220 <HAL_TIM_ConfigClockSource+0x16c>
 800a138:	2b40      	cmp	r3, #64	@ 0x40
 800a13a:	d058      	beq.n	800a1ee <HAL_TIM_ConfigClockSource+0x13a>
 800a13c:	2b40      	cmp	r3, #64	@ 0x40
 800a13e:	d86f      	bhi.n	800a220 <HAL_TIM_ConfigClockSource+0x16c>
 800a140:	2b30      	cmp	r3, #48	@ 0x30
 800a142:	d064      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0x15a>
 800a144:	2b30      	cmp	r3, #48	@ 0x30
 800a146:	d86b      	bhi.n	800a220 <HAL_TIM_ConfigClockSource+0x16c>
 800a148:	2b20      	cmp	r3, #32
 800a14a:	d060      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0x15a>
 800a14c:	2b20      	cmp	r3, #32
 800a14e:	d867      	bhi.n	800a220 <HAL_TIM_ConfigClockSource+0x16c>
 800a150:	2b00      	cmp	r3, #0
 800a152:	d05c      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0x15a>
 800a154:	2b10      	cmp	r3, #16
 800a156:	d05a      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0x15a>
 800a158:	e062      	b.n	800a220 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a16a:	f000 f9b5 	bl	800a4d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a17c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	609a      	str	r2, [r3, #8]
      break;
 800a186:	e04f      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a198:	f000 f99e 	bl	800a4d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1aa:	609a      	str	r2, [r3, #8]
      break;
 800a1ac:	e03c      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f000 f912 	bl	800a3e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2150      	movs	r1, #80	@ 0x50
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 f96b 	bl	800a4a2 <TIM_ITRx_SetConfig>
      break;
 800a1cc:	e02c      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1da:	461a      	mov	r2, r3
 800a1dc:	f000 f931 	bl	800a442 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2160      	movs	r1, #96	@ 0x60
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 f95b 	bl	800a4a2 <TIM_ITRx_SetConfig>
      break;
 800a1ec:	e01c      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f000 f8f2 	bl	800a3e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2140      	movs	r1, #64	@ 0x40
 800a206:	4618      	mov	r0, r3
 800a208:	f000 f94b 	bl	800a4a2 <TIM_ITRx_SetConfig>
      break;
 800a20c:	e00c      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	4610      	mov	r0, r2
 800a21a:	f000 f942 	bl	800a4a2 <TIM_ITRx_SetConfig>
      break;
 800a21e:	e003      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	73fb      	strb	r3, [r7, #15]
      break;
 800a224:	e000      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a238:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	fffeff88 	.word	0xfffeff88

0800a248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a43      	ldr	r2, [pc, #268]	@ (800a3b8 <TIM_Base_SetConfig+0x120>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d013      	beq.n	800a2d8 <TIM_Base_SetConfig+0x40>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2b6:	d00f      	beq.n	800a2d8 <TIM_Base_SetConfig+0x40>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a40      	ldr	r2, [pc, #256]	@ (800a3bc <TIM_Base_SetConfig+0x124>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d00b      	beq.n	800a2d8 <TIM_Base_SetConfig+0x40>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a3f      	ldr	r2, [pc, #252]	@ (800a3c0 <TIM_Base_SetConfig+0x128>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d007      	beq.n	800a2d8 <TIM_Base_SetConfig+0x40>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a3e      	ldr	r2, [pc, #248]	@ (800a3c4 <TIM_Base_SetConfig+0x12c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d003      	beq.n	800a2d8 <TIM_Base_SetConfig+0x40>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a3d      	ldr	r2, [pc, #244]	@ (800a3c8 <TIM_Base_SetConfig+0x130>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d108      	bne.n	800a2ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a32      	ldr	r2, [pc, #200]	@ (800a3b8 <TIM_Base_SetConfig+0x120>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d02b      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2f8:	d027      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a2f      	ldr	r2, [pc, #188]	@ (800a3bc <TIM_Base_SetConfig+0x124>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d023      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a2e      	ldr	r2, [pc, #184]	@ (800a3c0 <TIM_Base_SetConfig+0x128>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d01f      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a2d      	ldr	r2, [pc, #180]	@ (800a3c4 <TIM_Base_SetConfig+0x12c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d01b      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a2c      	ldr	r2, [pc, #176]	@ (800a3c8 <TIM_Base_SetConfig+0x130>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d017      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a2b      	ldr	r2, [pc, #172]	@ (800a3cc <TIM_Base_SetConfig+0x134>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d013      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a2a      	ldr	r2, [pc, #168]	@ (800a3d0 <TIM_Base_SetConfig+0x138>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d00f      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a29      	ldr	r2, [pc, #164]	@ (800a3d4 <TIM_Base_SetConfig+0x13c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00b      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a28      	ldr	r2, [pc, #160]	@ (800a3d8 <TIM_Base_SetConfig+0x140>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d007      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a27      	ldr	r2, [pc, #156]	@ (800a3dc <TIM_Base_SetConfig+0x144>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d003      	beq.n	800a34a <TIM_Base_SetConfig+0xb2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a26      	ldr	r2, [pc, #152]	@ (800a3e0 <TIM_Base_SetConfig+0x148>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d108      	bne.n	800a35c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	4313      	orrs	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	689a      	ldr	r2, [r3, #8]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a0e      	ldr	r2, [pc, #56]	@ (800a3b8 <TIM_Base_SetConfig+0x120>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d003      	beq.n	800a38a <TIM_Base_SetConfig+0xf2>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a10      	ldr	r2, [pc, #64]	@ (800a3c8 <TIM_Base_SetConfig+0x130>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d103      	bne.n	800a392 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	691a      	ldr	r2, [r3, #16]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f043 0204 	orr.w	r2, r3, #4
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	601a      	str	r2, [r3, #0]
}
 800a3aa:	bf00      	nop
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	40010000 	.word	0x40010000
 800a3bc:	40000400 	.word	0x40000400
 800a3c0:	40000800 	.word	0x40000800
 800a3c4:	40000c00 	.word	0x40000c00
 800a3c8:	40010400 	.word	0x40010400
 800a3cc:	40014000 	.word	0x40014000
 800a3d0:	40014400 	.word	0x40014400
 800a3d4:	40014800 	.word	0x40014800
 800a3d8:	40001800 	.word	0x40001800
 800a3dc:	40001c00 	.word	0x40001c00
 800a3e0:	40002000 	.word	0x40002000

0800a3e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b087      	sub	sp, #28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6a1b      	ldr	r3, [r3, #32]
 800a3f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	f023 0201 	bic.w	r2, r3, #1
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a40e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	4313      	orrs	r3, r2
 800a418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f023 030a 	bic.w	r3, r3, #10
 800a420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4313      	orrs	r3, r2
 800a428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	697a      	ldr	r2, [r7, #20]
 800a434:	621a      	str	r2, [r3, #32]
}
 800a436:	bf00      	nop
 800a438:	371c      	adds	r7, #28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a442:	b480      	push	{r7}
 800a444:	b087      	sub	sp, #28
 800a446:	af00      	add	r7, sp, #0
 800a448:	60f8      	str	r0, [r7, #12]
 800a44a:	60b9      	str	r1, [r7, #8]
 800a44c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6a1b      	ldr	r3, [r3, #32]
 800a458:	f023 0210 	bic.w	r2, r3, #16
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a46c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	031b      	lsls	r3, r3, #12
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	4313      	orrs	r3, r2
 800a476:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a47e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	621a      	str	r2, [r3, #32]
}
 800a496:	bf00      	nop
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b085      	sub	sp, #20
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	f043 0307 	orr.w	r3, r3, #7
 800a4c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	609a      	str	r2, [r3, #8]
}
 800a4cc:	bf00      	nop
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	021a      	lsls	r2, r3, #8
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	4313      	orrs	r3, r2
 800a504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	609a      	str	r2, [r3, #8]
}
 800a50c:	bf00      	nop
 800a50e:	371c      	adds	r7, #28
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d101      	bne.n	800a530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a52c:	2302      	movs	r3, #2
 800a52e:	e06d      	b.n	800a60c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a30      	ldr	r2, [pc, #192]	@ (800a618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d004      	beq.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a2f      	ldr	r2, [pc, #188]	@ (800a61c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d108      	bne.n	800a576 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a56a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	4313      	orrs	r3, r2
 800a574:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a57c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4313      	orrs	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a20      	ldr	r2, [pc, #128]	@ (800a618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d022      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5a2:	d01d      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a620 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d018      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a1c      	ldr	r2, [pc, #112]	@ (800a624 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d013      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a1a      	ldr	r2, [pc, #104]	@ (800a628 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00e      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a15      	ldr	r2, [pc, #84]	@ (800a61c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d009      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a16      	ldr	r2, [pc, #88]	@ (800a62c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d004      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a15      	ldr	r2, [pc, #84]	@ (800a630 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d10c      	bne.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	40010000 	.word	0x40010000
 800a61c:	40010400 	.word	0x40010400
 800a620:	40000400 	.word	0x40000400
 800a624:	40000800 	.word	0x40000800
 800a628:	40000c00 	.word	0x40000c00
 800a62c:	40014000 	.word	0x40014000
 800a630:	40001800 	.word	0x40001800

0800a634 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e040      	b.n	800a704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7f7 fbd4 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2224      	movs	r2, #36	@ 0x24
 800a69c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f022 0201 	bic.w	r2, r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fece 	bl	800b458 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fc67 	bl	800af90 <UART_SetConfig>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d101      	bne.n	800a6cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e01b      	b.n	800a704 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689a      	ldr	r2, [r3, #8]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f042 0201 	orr.w	r2, r2, #1
 800a6fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 ff4d 	bl	800b59c <UART_CheckIdleState>
 800a702:	4603      	mov	r3, r0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08a      	sub	sp, #40	@ 0x28
 800a710:	af02      	add	r7, sp, #8
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	603b      	str	r3, [r7, #0]
 800a718:	4613      	mov	r3, r2
 800a71a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a720:	2b20      	cmp	r3, #32
 800a722:	d177      	bne.n	800a814 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <HAL_UART_Transmit+0x24>
 800a72a:	88fb      	ldrh	r3, [r7, #6]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e070      	b.n	800a816 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2221      	movs	r2, #33	@ 0x21
 800a740:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a742:	f7f7 fe57 	bl	80023f4 <HAL_GetTick>
 800a746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	88fa      	ldrh	r2, [r7, #6]
 800a74c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	88fa      	ldrh	r2, [r7, #6]
 800a754:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a760:	d108      	bne.n	800a774 <HAL_UART_Transmit+0x68>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d104      	bne.n	800a774 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a76a:	2300      	movs	r3, #0
 800a76c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	61bb      	str	r3, [r7, #24]
 800a772:	e003      	b.n	800a77c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a778:	2300      	movs	r3, #0
 800a77a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a77c:	e02f      	b.n	800a7de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2200      	movs	r2, #0
 800a786:	2180      	movs	r1, #128	@ 0x80
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 ff5e 	bl	800b64a <UART_WaitOnFlagUntilTimeout>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d004      	beq.n	800a79e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2220      	movs	r2, #32
 800a798:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e03b      	b.n	800a816 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10b      	bne.n	800a7bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	3302      	adds	r3, #2
 800a7b8:	61bb      	str	r3, [r7, #24]
 800a7ba:	e007      	b.n	800a7cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	781a      	ldrb	r2, [r3, #0]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1c9      	bne.n	800a77e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2140      	movs	r1, #64	@ 0x40
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 ff28 	bl	800b64a <UART_WaitOnFlagUntilTimeout>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d004      	beq.n	800a80a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2220      	movs	r2, #32
 800a804:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a806:	2303      	movs	r3, #3
 800a808:	e005      	b.n	800a816 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2220      	movs	r2, #32
 800a80e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a810:	2300      	movs	r3, #0
 800a812:	e000      	b.n	800a816 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a814:	2302      	movs	r3, #2
  }
}
 800a816:	4618      	mov	r0, r3
 800a818:	3720      	adds	r7, #32
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a820:	b480      	push	{r7}
 800a822:	b08b      	sub	sp, #44	@ 0x2c
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	4613      	mov	r3, r2
 800a82c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a832:	2b20      	cmp	r3, #32
 800a834:	d147      	bne.n	800a8c6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <HAL_UART_Transmit_IT+0x22>
 800a83c:	88fb      	ldrh	r3, [r7, #6]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e040      	b.n	800a8c8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2221      	movs	r2, #33	@ 0x21
 800a86e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a878:	d107      	bne.n	800a88a <HAL_UART_Transmit_IT+0x6a>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d103      	bne.n	800a88a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	4a13      	ldr	r2, [pc, #76]	@ (800a8d4 <HAL_UART_Transmit_IT+0xb4>)
 800a886:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a888:	e002      	b.n	800a890 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4a12      	ldr	r2, [pc, #72]	@ (800a8d8 <HAL_UART_Transmit_IT+0xb8>)
 800a88e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	e853 3f00 	ldrex	r3, [r3]
 800a89c:	613b      	str	r3, [r7, #16]
   return(result);
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ae:	623b      	str	r3, [r7, #32]
 800a8b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b2:	69f9      	ldr	r1, [r7, #28]
 800a8b4:	6a3a      	ldr	r2, [r7, #32]
 800a8b6:	e841 2300 	strex	r3, r2, [r1]
 800a8ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1e6      	bne.n	800a890 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e000      	b.n	800a8c8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a8c6:	2302      	movs	r3, #2
  }
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	372c      	adds	r7, #44	@ 0x2c
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	0800bca1 	.word	0x0800bca1
 800a8d8:	0800bbeb 	.word	0x0800bbeb

0800a8dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08a      	sub	sp, #40	@ 0x28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8f0:	2b20      	cmp	r3, #32
 800a8f2:	d132      	bne.n	800a95a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <HAL_UART_Receive_DMA+0x24>
 800a8fa:	88fb      	ldrh	r3, [r7, #6]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e02b      	b.n	800a95c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d018      	beq.n	800a94a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	613b      	str	r3, [r7, #16]
   return(result);
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a92c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a936:	623b      	str	r3, [r7, #32]
 800a938:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	69f9      	ldr	r1, [r7, #28]
 800a93c:	6a3a      	ldr	r2, [r7, #32]
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	61bb      	str	r3, [r7, #24]
   return(result);
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e6      	bne.n	800a918 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a94a:	88fb      	ldrh	r3, [r7, #6]
 800a94c:	461a      	mov	r2, r3
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fee7 	bl	800b724 <UART_Start_Receive_DMA>
 800a956:	4603      	mov	r3, r0
 800a958:	e000      	b.n	800a95c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a95a:	2302      	movs	r3, #2
  }
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3728      	adds	r7, #40	@ 0x28
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b0ba      	sub	sp, #232	@ 0xe8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a98a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a98e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a992:	4013      	ands	r3, r2
 800a994:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d115      	bne.n	800a9cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9a4:	f003 0320 	and.w	r3, r3, #32
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00f      	beq.n	800a9cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9b0:	f003 0320 	and.w	r3, r3, #32
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d009      	beq.n	800a9cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 82b1 	beq.w	800af24 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	4798      	blx	r3
      }
      return;
 800a9ca:	e2ab      	b.n	800af24 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a9cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 8117 	beq.w	800ac04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a9d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d106      	bne.n	800a9f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a9e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a9e6:	4b85      	ldr	r3, [pc, #532]	@ (800abfc <HAL_UART_IRQHandler+0x298>)
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 810a 	beq.w	800ac04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9f4:	f003 0301 	and.w	r3, r3, #1
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d011      	beq.n	800aa20 <HAL_UART_IRQHandler+0xbc>
 800a9fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00b      	beq.n	800aa20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa16:	f043 0201 	orr.w	r2, r3, #1
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d011      	beq.n	800aa50 <HAL_UART_IRQHandler+0xec>
 800aa2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00b      	beq.n	800aa50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa46:	f043 0204 	orr.w	r2, r3, #4
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa54:	f003 0304 	and.w	r3, r3, #4
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d011      	beq.n	800aa80 <HAL_UART_IRQHandler+0x11c>
 800aa5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00b      	beq.n	800aa80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2204      	movs	r2, #4
 800aa6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa76:	f043 0202 	orr.w	r2, r3, #2
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa84:	f003 0308 	and.w	r3, r3, #8
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d017      	beq.n	800aabc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa90:	f003 0320 	and.w	r3, r3, #32
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d105      	bne.n	800aaa4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aa98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2208      	movs	r2, #8
 800aaaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aab2:	f043 0208 	orr.w	r2, r3, #8
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d012      	beq.n	800aaee <HAL_UART_IRQHandler+0x18a>
 800aac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aacc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00c      	beq.n	800aaee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aadc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aae4:	f043 0220 	orr.w	r2, r3, #32
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 8217 	beq.w	800af28 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aafe:	f003 0320 	and.w	r3, r3, #32
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00d      	beq.n	800ab22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab0a:	f003 0320 	and.w	r3, r3, #32
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d007      	beq.n	800ab22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab36:	2b40      	cmp	r3, #64	@ 0x40
 800ab38:	d005      	beq.n	800ab46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d04f      	beq.n	800abe6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 feb2 	bl	800b8b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab56:	2b40      	cmp	r3, #64	@ 0x40
 800ab58:	d141      	bne.n	800abde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3308      	adds	r3, #8
 800ab60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab68:	e853 3f00 	ldrex	r3, [r3]
 800ab6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ab70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3308      	adds	r3, #8
 800ab82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ab86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ab8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ab92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ab96:	e841 2300 	strex	r3, r2, [r1]
 800ab9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ab9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1d9      	bne.n	800ab5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d013      	beq.n	800abd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abb2:	4a13      	ldr	r2, [pc, #76]	@ (800ac00 <HAL_UART_IRQHandler+0x29c>)
 800abb4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abba:	4618      	mov	r0, r3
 800abbc:	f7f8 fd3a 	bl	8003634 <HAL_DMA_Abort_IT>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d017      	beq.n	800abf6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800abd0:	4610      	mov	r0, r2
 800abd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abd4:	e00f      	b.n	800abf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f9c4 	bl	800af64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abdc:	e00b      	b.n	800abf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f9c0 	bl	800af64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe4:	e007      	b.n	800abf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f9bc 	bl	800af64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800abf4:	e198      	b.n	800af28 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abf6:	bf00      	nop
    return;
 800abf8:	e196      	b.n	800af28 <HAL_UART_IRQHandler+0x5c4>
 800abfa:	bf00      	nop
 800abfc:	04000120 	.word	0x04000120
 800ac00:	0800bbc7 	.word	0x0800bbc7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	f040 8166 	bne.w	800aeda <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac12:	f003 0310 	and.w	r3, r3, #16
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 815f 	beq.w	800aeda <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac20:	f003 0310 	and.w	r3, r3, #16
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8158 	beq.w	800aeda <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2210      	movs	r2, #16
 800ac30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac3c:	2b40      	cmp	r3, #64	@ 0x40
 800ac3e:	f040 80d0 	bne.w	800ade2 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f000 80ab 	beq.w	800adae <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ac5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac62:	429a      	cmp	r2, r3
 800ac64:	f080 80a3 	bcs.w	800adae <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac76:	69db      	ldr	r3, [r3, #28]
 800ac78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac7c:	f000 8086 	beq.w	800ad8c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ac94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	461a      	mov	r2, r3
 800aca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800acb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800acba:	e841 2300 	strex	r3, r2, [r1]
 800acbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800acc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1da      	bne.n	800ac80 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3308      	adds	r3, #8
 800acd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800acd4:	e853 3f00 	ldrex	r3, [r3]
 800acd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800acda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acdc:	f023 0301 	bic.w	r3, r3, #1
 800ace0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3308      	adds	r3, #8
 800acea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800acee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800acf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800acf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800acfa:	e841 2300 	strex	r3, r2, [r1]
 800acfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1e1      	bne.n	800acca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3308      	adds	r3, #8
 800ad0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad10:	e853 3f00 	ldrex	r3, [r3]
 800ad14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3308      	adds	r3, #8
 800ad26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad32:	e841 2300 	strex	r3, r2, [r1]
 800ad36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1e3      	bne.n	800ad06 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2220      	movs	r2, #32
 800ad42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad54:	e853 3f00 	ldrex	r3, [r3]
 800ad58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad5c:	f023 0310 	bic.w	r3, r3, #16
 800ad60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1e4      	bne.n	800ad4c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7f8 fbe4 	bl	8003554 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2202      	movs	r2, #2
 800ad90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	4619      	mov	r1, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f8e6 	bl	800af78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800adac:	e0be      	b.n	800af2c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800adb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800adb8:	429a      	cmp	r2, r3
 800adba:	f040 80b7 	bne.w	800af2c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adc2:	69db      	ldr	r3, [r3, #28]
 800adc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adc8:	f040 80b0 	bne.w	800af2c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2202      	movs	r2, #2
 800add0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f8cc 	bl	800af78 <HAL_UARTEx_RxEventCallback>
      return;
 800ade0:	e0a4      	b.n	800af2c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800adee:	b29b      	uxth	r3, r3
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 8096 	beq.w	800af30 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ae04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8091 	beq.w	800af30 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae16:	e853 3f00 	ldrex	r3, [r3]
 800ae1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae30:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae38:	e841 2300 	strex	r3, r2, [r1]
 800ae3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1e4      	bne.n	800ae0e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3308      	adds	r3, #8
 800ae4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4e:	e853 3f00 	ldrex	r3, [r3]
 800ae52:	623b      	str	r3, [r7, #32]
   return(result);
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	f023 0301 	bic.w	r3, r3, #1
 800ae5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	3308      	adds	r3, #8
 800ae64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ae68:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae70:	e841 2300 	strex	r3, r2, [r1]
 800ae74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e3      	bne.n	800ae44 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f023 0310 	bic.w	r3, r3, #16
 800aea4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	461a      	mov	r2, r3
 800aeae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aeb2:	61fb      	str	r3, [r7, #28]
 800aeb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb6:	69b9      	ldr	r1, [r7, #24]
 800aeb8:	69fa      	ldr	r2, [r7, #28]
 800aeba:	e841 2300 	strex	r3, r2, [r1]
 800aebe:	617b      	str	r3, [r7, #20]
   return(result);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e4      	bne.n	800ae90 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2202      	movs	r2, #2
 800aeca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f850 	bl	800af78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aed8:	e02a      	b.n	800af30 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aeda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00e      	beq.n	800af04 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d008      	beq.n	800af04 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d01c      	beq.n	800af34 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	4798      	blx	r3
    }
    return;
 800af02:	e017      	b.n	800af34 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d012      	beq.n	800af36 <HAL_UART_IRQHandler+0x5d2>
 800af10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00c      	beq.n	800af36 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 ff1f 	bl	800bd60 <UART_EndTransmit_IT>
    return;
 800af22:	e008      	b.n	800af36 <HAL_UART_IRQHandler+0x5d2>
      return;
 800af24:	bf00      	nop
 800af26:	e006      	b.n	800af36 <HAL_UART_IRQHandler+0x5d2>
    return;
 800af28:	bf00      	nop
 800af2a:	e004      	b.n	800af36 <HAL_UART_IRQHandler+0x5d2>
      return;
 800af2c:	bf00      	nop
 800af2e:	e002      	b.n	800af36 <HAL_UART_IRQHandler+0x5d2>
      return;
 800af30:	bf00      	nop
 800af32:	e000      	b.n	800af36 <HAL_UART_IRQHandler+0x5d2>
    return;
 800af34:	bf00      	nop
  }

}
 800af36:	37e8      	adds	r7, #232	@ 0xe8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	460b      	mov	r3, r1
 800af82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	431a      	orrs	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	431a      	orrs	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	4ba6      	ldr	r3, [pc, #664]	@ (800b254 <UART_SetConfig+0x2c4>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	6812      	ldr	r2, [r2, #0]
 800afc2:	6979      	ldr	r1, [r7, #20]
 800afc4:	430b      	orrs	r3, r1
 800afc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68da      	ldr	r2, [r3, #12]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	430a      	orrs	r2, r1
 800afdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	4313      	orrs	r3, r2
 800afec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	697a      	ldr	r2, [r7, #20]
 800affe:	430a      	orrs	r2, r1
 800b000:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a94      	ldr	r2, [pc, #592]	@ (800b258 <UART_SetConfig+0x2c8>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d120      	bne.n	800b04e <UART_SetConfig+0xbe>
 800b00c:	4b93      	ldr	r3, [pc, #588]	@ (800b25c <UART_SetConfig+0x2cc>)
 800b00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b012:	f003 0303 	and.w	r3, r3, #3
 800b016:	2b03      	cmp	r3, #3
 800b018:	d816      	bhi.n	800b048 <UART_SetConfig+0xb8>
 800b01a:	a201      	add	r2, pc, #4	@ (adr r2, 800b020 <UART_SetConfig+0x90>)
 800b01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b020:	0800b031 	.word	0x0800b031
 800b024:	0800b03d 	.word	0x0800b03d
 800b028:	0800b037 	.word	0x0800b037
 800b02c:	0800b043 	.word	0x0800b043
 800b030:	2301      	movs	r3, #1
 800b032:	77fb      	strb	r3, [r7, #31]
 800b034:	e150      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b036:	2302      	movs	r3, #2
 800b038:	77fb      	strb	r3, [r7, #31]
 800b03a:	e14d      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b03c:	2304      	movs	r3, #4
 800b03e:	77fb      	strb	r3, [r7, #31]
 800b040:	e14a      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b042:	2308      	movs	r3, #8
 800b044:	77fb      	strb	r3, [r7, #31]
 800b046:	e147      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b048:	2310      	movs	r3, #16
 800b04a:	77fb      	strb	r3, [r7, #31]
 800b04c:	e144      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a83      	ldr	r2, [pc, #524]	@ (800b260 <UART_SetConfig+0x2d0>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d132      	bne.n	800b0be <UART_SetConfig+0x12e>
 800b058:	4b80      	ldr	r3, [pc, #512]	@ (800b25c <UART_SetConfig+0x2cc>)
 800b05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b05e:	f003 030c 	and.w	r3, r3, #12
 800b062:	2b0c      	cmp	r3, #12
 800b064:	d828      	bhi.n	800b0b8 <UART_SetConfig+0x128>
 800b066:	a201      	add	r2, pc, #4	@ (adr r2, 800b06c <UART_SetConfig+0xdc>)
 800b068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06c:	0800b0a1 	.word	0x0800b0a1
 800b070:	0800b0b9 	.word	0x0800b0b9
 800b074:	0800b0b9 	.word	0x0800b0b9
 800b078:	0800b0b9 	.word	0x0800b0b9
 800b07c:	0800b0ad 	.word	0x0800b0ad
 800b080:	0800b0b9 	.word	0x0800b0b9
 800b084:	0800b0b9 	.word	0x0800b0b9
 800b088:	0800b0b9 	.word	0x0800b0b9
 800b08c:	0800b0a7 	.word	0x0800b0a7
 800b090:	0800b0b9 	.word	0x0800b0b9
 800b094:	0800b0b9 	.word	0x0800b0b9
 800b098:	0800b0b9 	.word	0x0800b0b9
 800b09c:	0800b0b3 	.word	0x0800b0b3
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	77fb      	strb	r3, [r7, #31]
 800b0a4:	e118      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	77fb      	strb	r3, [r7, #31]
 800b0aa:	e115      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	77fb      	strb	r3, [r7, #31]
 800b0b0:	e112      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b0b2:	2308      	movs	r3, #8
 800b0b4:	77fb      	strb	r3, [r7, #31]
 800b0b6:	e10f      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b0b8:	2310      	movs	r3, #16
 800b0ba:	77fb      	strb	r3, [r7, #31]
 800b0bc:	e10c      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a68      	ldr	r2, [pc, #416]	@ (800b264 <UART_SetConfig+0x2d4>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d120      	bne.n	800b10a <UART_SetConfig+0x17a>
 800b0c8:	4b64      	ldr	r3, [pc, #400]	@ (800b25c <UART_SetConfig+0x2cc>)
 800b0ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b0d2:	2b30      	cmp	r3, #48	@ 0x30
 800b0d4:	d013      	beq.n	800b0fe <UART_SetConfig+0x16e>
 800b0d6:	2b30      	cmp	r3, #48	@ 0x30
 800b0d8:	d814      	bhi.n	800b104 <UART_SetConfig+0x174>
 800b0da:	2b20      	cmp	r3, #32
 800b0dc:	d009      	beq.n	800b0f2 <UART_SetConfig+0x162>
 800b0de:	2b20      	cmp	r3, #32
 800b0e0:	d810      	bhi.n	800b104 <UART_SetConfig+0x174>
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d002      	beq.n	800b0ec <UART_SetConfig+0x15c>
 800b0e6:	2b10      	cmp	r3, #16
 800b0e8:	d006      	beq.n	800b0f8 <UART_SetConfig+0x168>
 800b0ea:	e00b      	b.n	800b104 <UART_SetConfig+0x174>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	77fb      	strb	r3, [r7, #31]
 800b0f0:	e0f2      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	77fb      	strb	r3, [r7, #31]
 800b0f6:	e0ef      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b0f8:	2304      	movs	r3, #4
 800b0fa:	77fb      	strb	r3, [r7, #31]
 800b0fc:	e0ec      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b0fe:	2308      	movs	r3, #8
 800b100:	77fb      	strb	r3, [r7, #31]
 800b102:	e0e9      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b104:	2310      	movs	r3, #16
 800b106:	77fb      	strb	r3, [r7, #31]
 800b108:	e0e6      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a56      	ldr	r2, [pc, #344]	@ (800b268 <UART_SetConfig+0x2d8>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d120      	bne.n	800b156 <UART_SetConfig+0x1c6>
 800b114:	4b51      	ldr	r3, [pc, #324]	@ (800b25c <UART_SetConfig+0x2cc>)
 800b116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b11a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b11e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b120:	d013      	beq.n	800b14a <UART_SetConfig+0x1ba>
 800b122:	2bc0      	cmp	r3, #192	@ 0xc0
 800b124:	d814      	bhi.n	800b150 <UART_SetConfig+0x1c0>
 800b126:	2b80      	cmp	r3, #128	@ 0x80
 800b128:	d009      	beq.n	800b13e <UART_SetConfig+0x1ae>
 800b12a:	2b80      	cmp	r3, #128	@ 0x80
 800b12c:	d810      	bhi.n	800b150 <UART_SetConfig+0x1c0>
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <UART_SetConfig+0x1a8>
 800b132:	2b40      	cmp	r3, #64	@ 0x40
 800b134:	d006      	beq.n	800b144 <UART_SetConfig+0x1b4>
 800b136:	e00b      	b.n	800b150 <UART_SetConfig+0x1c0>
 800b138:	2300      	movs	r3, #0
 800b13a:	77fb      	strb	r3, [r7, #31]
 800b13c:	e0cc      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b13e:	2302      	movs	r3, #2
 800b140:	77fb      	strb	r3, [r7, #31]
 800b142:	e0c9      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b144:	2304      	movs	r3, #4
 800b146:	77fb      	strb	r3, [r7, #31]
 800b148:	e0c6      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b14a:	2308      	movs	r3, #8
 800b14c:	77fb      	strb	r3, [r7, #31]
 800b14e:	e0c3      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b150:	2310      	movs	r3, #16
 800b152:	77fb      	strb	r3, [r7, #31]
 800b154:	e0c0      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a44      	ldr	r2, [pc, #272]	@ (800b26c <UART_SetConfig+0x2dc>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d125      	bne.n	800b1ac <UART_SetConfig+0x21c>
 800b160:	4b3e      	ldr	r3, [pc, #248]	@ (800b25c <UART_SetConfig+0x2cc>)
 800b162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b16a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b16e:	d017      	beq.n	800b1a0 <UART_SetConfig+0x210>
 800b170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b174:	d817      	bhi.n	800b1a6 <UART_SetConfig+0x216>
 800b176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b17a:	d00b      	beq.n	800b194 <UART_SetConfig+0x204>
 800b17c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b180:	d811      	bhi.n	800b1a6 <UART_SetConfig+0x216>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <UART_SetConfig+0x1fe>
 800b186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b18a:	d006      	beq.n	800b19a <UART_SetConfig+0x20a>
 800b18c:	e00b      	b.n	800b1a6 <UART_SetConfig+0x216>
 800b18e:	2300      	movs	r3, #0
 800b190:	77fb      	strb	r3, [r7, #31]
 800b192:	e0a1      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b194:	2302      	movs	r3, #2
 800b196:	77fb      	strb	r3, [r7, #31]
 800b198:	e09e      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b19a:	2304      	movs	r3, #4
 800b19c:	77fb      	strb	r3, [r7, #31]
 800b19e:	e09b      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b1a0:	2308      	movs	r3, #8
 800b1a2:	77fb      	strb	r3, [r7, #31]
 800b1a4:	e098      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b1a6:	2310      	movs	r3, #16
 800b1a8:	77fb      	strb	r3, [r7, #31]
 800b1aa:	e095      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a2f      	ldr	r2, [pc, #188]	@ (800b270 <UART_SetConfig+0x2e0>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d125      	bne.n	800b202 <UART_SetConfig+0x272>
 800b1b6:	4b29      	ldr	r3, [pc, #164]	@ (800b25c <UART_SetConfig+0x2cc>)
 800b1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b1c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b1c4:	d017      	beq.n	800b1f6 <UART_SetConfig+0x266>
 800b1c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b1ca:	d817      	bhi.n	800b1fc <UART_SetConfig+0x26c>
 800b1cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1d0:	d00b      	beq.n	800b1ea <UART_SetConfig+0x25a>
 800b1d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1d6:	d811      	bhi.n	800b1fc <UART_SetConfig+0x26c>
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d003      	beq.n	800b1e4 <UART_SetConfig+0x254>
 800b1dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1e0:	d006      	beq.n	800b1f0 <UART_SetConfig+0x260>
 800b1e2:	e00b      	b.n	800b1fc <UART_SetConfig+0x26c>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	77fb      	strb	r3, [r7, #31]
 800b1e8:	e076      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	77fb      	strb	r3, [r7, #31]
 800b1ee:	e073      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b1f0:	2304      	movs	r3, #4
 800b1f2:	77fb      	strb	r3, [r7, #31]
 800b1f4:	e070      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b1f6:	2308      	movs	r3, #8
 800b1f8:	77fb      	strb	r3, [r7, #31]
 800b1fa:	e06d      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b1fc:	2310      	movs	r3, #16
 800b1fe:	77fb      	strb	r3, [r7, #31]
 800b200:	e06a      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a1b      	ldr	r2, [pc, #108]	@ (800b274 <UART_SetConfig+0x2e4>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d138      	bne.n	800b27e <UART_SetConfig+0x2ee>
 800b20c:	4b13      	ldr	r3, [pc, #76]	@ (800b25c <UART_SetConfig+0x2cc>)
 800b20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b212:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b216:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b21a:	d017      	beq.n	800b24c <UART_SetConfig+0x2bc>
 800b21c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b220:	d82a      	bhi.n	800b278 <UART_SetConfig+0x2e8>
 800b222:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b226:	d00b      	beq.n	800b240 <UART_SetConfig+0x2b0>
 800b228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b22c:	d824      	bhi.n	800b278 <UART_SetConfig+0x2e8>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <UART_SetConfig+0x2aa>
 800b232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b236:	d006      	beq.n	800b246 <UART_SetConfig+0x2b6>
 800b238:	e01e      	b.n	800b278 <UART_SetConfig+0x2e8>
 800b23a:	2300      	movs	r3, #0
 800b23c:	77fb      	strb	r3, [r7, #31]
 800b23e:	e04b      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b240:	2302      	movs	r3, #2
 800b242:	77fb      	strb	r3, [r7, #31]
 800b244:	e048      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b246:	2304      	movs	r3, #4
 800b248:	77fb      	strb	r3, [r7, #31]
 800b24a:	e045      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b24c:	2308      	movs	r3, #8
 800b24e:	77fb      	strb	r3, [r7, #31]
 800b250:	e042      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b252:	bf00      	nop
 800b254:	efff69f3 	.word	0xefff69f3
 800b258:	40011000 	.word	0x40011000
 800b25c:	40023800 	.word	0x40023800
 800b260:	40004400 	.word	0x40004400
 800b264:	40004800 	.word	0x40004800
 800b268:	40004c00 	.word	0x40004c00
 800b26c:	40005000 	.word	0x40005000
 800b270:	40011400 	.word	0x40011400
 800b274:	40007800 	.word	0x40007800
 800b278:	2310      	movs	r3, #16
 800b27a:	77fb      	strb	r3, [r7, #31]
 800b27c:	e02c      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a72      	ldr	r2, [pc, #456]	@ (800b44c <UART_SetConfig+0x4bc>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d125      	bne.n	800b2d4 <UART_SetConfig+0x344>
 800b288:	4b71      	ldr	r3, [pc, #452]	@ (800b450 <UART_SetConfig+0x4c0>)
 800b28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b28e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b292:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b296:	d017      	beq.n	800b2c8 <UART_SetConfig+0x338>
 800b298:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b29c:	d817      	bhi.n	800b2ce <UART_SetConfig+0x33e>
 800b29e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2a2:	d00b      	beq.n	800b2bc <UART_SetConfig+0x32c>
 800b2a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2a8:	d811      	bhi.n	800b2ce <UART_SetConfig+0x33e>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <UART_SetConfig+0x326>
 800b2ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2b2:	d006      	beq.n	800b2c2 <UART_SetConfig+0x332>
 800b2b4:	e00b      	b.n	800b2ce <UART_SetConfig+0x33e>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	77fb      	strb	r3, [r7, #31]
 800b2ba:	e00d      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b2bc:	2302      	movs	r3, #2
 800b2be:	77fb      	strb	r3, [r7, #31]
 800b2c0:	e00a      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b2c2:	2304      	movs	r3, #4
 800b2c4:	77fb      	strb	r3, [r7, #31]
 800b2c6:	e007      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b2c8:	2308      	movs	r3, #8
 800b2ca:	77fb      	strb	r3, [r7, #31]
 800b2cc:	e004      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b2ce:	2310      	movs	r3, #16
 800b2d0:	77fb      	strb	r3, [r7, #31]
 800b2d2:	e001      	b.n	800b2d8 <UART_SetConfig+0x348>
 800b2d4:	2310      	movs	r3, #16
 800b2d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	69db      	ldr	r3, [r3, #28]
 800b2dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2e0:	d15b      	bne.n	800b39a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b2e2:	7ffb      	ldrb	r3, [r7, #31]
 800b2e4:	2b08      	cmp	r3, #8
 800b2e6:	d828      	bhi.n	800b33a <UART_SetConfig+0x3aa>
 800b2e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2f0 <UART_SetConfig+0x360>)
 800b2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ee:	bf00      	nop
 800b2f0:	0800b315 	.word	0x0800b315
 800b2f4:	0800b31d 	.word	0x0800b31d
 800b2f8:	0800b325 	.word	0x0800b325
 800b2fc:	0800b33b 	.word	0x0800b33b
 800b300:	0800b32b 	.word	0x0800b32b
 800b304:	0800b33b 	.word	0x0800b33b
 800b308:	0800b33b 	.word	0x0800b33b
 800b30c:	0800b33b 	.word	0x0800b33b
 800b310:	0800b333 	.word	0x0800b333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b314:	f7fc ff4c 	bl	80081b0 <HAL_RCC_GetPCLK1Freq>
 800b318:	61b8      	str	r0, [r7, #24]
        break;
 800b31a:	e013      	b.n	800b344 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b31c:	f7fc ff5c 	bl	80081d8 <HAL_RCC_GetPCLK2Freq>
 800b320:	61b8      	str	r0, [r7, #24]
        break;
 800b322:	e00f      	b.n	800b344 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b324:	4b4b      	ldr	r3, [pc, #300]	@ (800b454 <UART_SetConfig+0x4c4>)
 800b326:	61bb      	str	r3, [r7, #24]
        break;
 800b328:	e00c      	b.n	800b344 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b32a:	f7fc fe6f 	bl	800800c <HAL_RCC_GetSysClockFreq>
 800b32e:	61b8      	str	r0, [r7, #24]
        break;
 800b330:	e008      	b.n	800b344 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b336:	61bb      	str	r3, [r7, #24]
        break;
 800b338:	e004      	b.n	800b344 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b33a:	2300      	movs	r3, #0
 800b33c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	77bb      	strb	r3, [r7, #30]
        break;
 800b342:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d074      	beq.n	800b434 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	005a      	lsls	r2, r3, #1
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	085b      	lsrs	r3, r3, #1
 800b354:	441a      	add	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	2b0f      	cmp	r3, #15
 800b364:	d916      	bls.n	800b394 <UART_SetConfig+0x404>
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b36c:	d212      	bcs.n	800b394 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	b29b      	uxth	r3, r3
 800b372:	f023 030f 	bic.w	r3, r3, #15
 800b376:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	085b      	lsrs	r3, r3, #1
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	f003 0307 	and.w	r3, r3, #7
 800b382:	b29a      	uxth	r2, r3
 800b384:	89fb      	ldrh	r3, [r7, #14]
 800b386:	4313      	orrs	r3, r2
 800b388:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	89fa      	ldrh	r2, [r7, #14]
 800b390:	60da      	str	r2, [r3, #12]
 800b392:	e04f      	b.n	800b434 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	77bb      	strb	r3, [r7, #30]
 800b398:	e04c      	b.n	800b434 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b39a:	7ffb      	ldrb	r3, [r7, #31]
 800b39c:	2b08      	cmp	r3, #8
 800b39e:	d828      	bhi.n	800b3f2 <UART_SetConfig+0x462>
 800b3a0:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a8 <UART_SetConfig+0x418>)
 800b3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a6:	bf00      	nop
 800b3a8:	0800b3cd 	.word	0x0800b3cd
 800b3ac:	0800b3d5 	.word	0x0800b3d5
 800b3b0:	0800b3dd 	.word	0x0800b3dd
 800b3b4:	0800b3f3 	.word	0x0800b3f3
 800b3b8:	0800b3e3 	.word	0x0800b3e3
 800b3bc:	0800b3f3 	.word	0x0800b3f3
 800b3c0:	0800b3f3 	.word	0x0800b3f3
 800b3c4:	0800b3f3 	.word	0x0800b3f3
 800b3c8:	0800b3eb 	.word	0x0800b3eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3cc:	f7fc fef0 	bl	80081b0 <HAL_RCC_GetPCLK1Freq>
 800b3d0:	61b8      	str	r0, [r7, #24]
        break;
 800b3d2:	e013      	b.n	800b3fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3d4:	f7fc ff00 	bl	80081d8 <HAL_RCC_GetPCLK2Freq>
 800b3d8:	61b8      	str	r0, [r7, #24]
        break;
 800b3da:	e00f      	b.n	800b3fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b454 <UART_SetConfig+0x4c4>)
 800b3de:	61bb      	str	r3, [r7, #24]
        break;
 800b3e0:	e00c      	b.n	800b3fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3e2:	f7fc fe13 	bl	800800c <HAL_RCC_GetSysClockFreq>
 800b3e6:	61b8      	str	r0, [r7, #24]
        break;
 800b3e8:	e008      	b.n	800b3fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3ee:	61bb      	str	r3, [r7, #24]
        break;
 800b3f0:	e004      	b.n	800b3fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	77bb      	strb	r3, [r7, #30]
        break;
 800b3fa:	bf00      	nop
    }

    if (pclk != 0U)
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d018      	beq.n	800b434 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	085a      	lsrs	r2, r3, #1
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	441a      	add	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	fbb2 f3f3 	udiv	r3, r2, r3
 800b414:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2b0f      	cmp	r3, #15
 800b41a:	d909      	bls.n	800b430 <UART_SetConfig+0x4a0>
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b422:	d205      	bcs.n	800b430 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	b29a      	uxth	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	60da      	str	r2, [r3, #12]
 800b42e:	e001      	b.n	800b434 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b440:	7fbb      	ldrb	r3, [r7, #30]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3720      	adds	r7, #32
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	40007c00 	.word	0x40007c00
 800b450:	40023800 	.word	0x40023800
 800b454:	00f42400 	.word	0x00f42400

0800b458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b464:	f003 0308 	and.w	r3, r3, #8
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00a      	beq.n	800b482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	430a      	orrs	r2, r1
 800b480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00a      	beq.n	800b4c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ca:	f003 0304 	and.w	r3, r3, #4
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ec:	f003 0310 	and.w	r3, r3, #16
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00a      	beq.n	800b50a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b50e:	f003 0320 	and.w	r3, r3, #32
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00a      	beq.n	800b52c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	430a      	orrs	r2, r1
 800b52a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b534:	2b00      	cmp	r3, #0
 800b536:	d01a      	beq.n	800b56e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	430a      	orrs	r2, r1
 800b54c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b556:	d10a      	bne.n	800b56e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	430a      	orrs	r2, r1
 800b56c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00a      	beq.n	800b590 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	430a      	orrs	r2, r1
 800b58e:	605a      	str	r2, [r3, #4]
  }
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08c      	sub	sp, #48	@ 0x30
 800b5a0:	af02      	add	r7, sp, #8
 800b5a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5ac:	f7f6 ff22 	bl	80023f4 <HAL_GetTick>
 800b5b0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 0308 	and.w	r3, r3, #8
 800b5bc:	2b08      	cmp	r3, #8
 800b5be:	d12e      	bne.n	800b61e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f83b 	bl	800b64a <UART_WaitOnFlagUntilTimeout>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d021      	beq.n	800b61e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	e853 3f00 	ldrex	r3, [r3]
 800b5e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5ee:	623b      	str	r3, [r7, #32]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	61fb      	str	r3, [r7, #28]
 800b5fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fc:	69b9      	ldr	r1, [r7, #24]
 800b5fe:	69fa      	ldr	r2, [r7, #28]
 800b600:	e841 2300 	strex	r3, r2, [r1]
 800b604:	617b      	str	r3, [r7, #20]
   return(result);
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1e6      	bne.n	800b5da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2220      	movs	r2, #32
 800b610:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e011      	b.n	800b642 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2220      	movs	r2, #32
 800b622:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2220      	movs	r2, #32
 800b628:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3728      	adds	r7, #40	@ 0x28
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	60f8      	str	r0, [r7, #12]
 800b652:	60b9      	str	r1, [r7, #8]
 800b654:	603b      	str	r3, [r7, #0]
 800b656:	4613      	mov	r3, r2
 800b658:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b65a:	e04f      	b.n	800b6fc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b662:	d04b      	beq.n	800b6fc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b664:	f7f6 fec6 	bl	80023f4 <HAL_GetTick>
 800b668:	4602      	mov	r2, r0
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	69ba      	ldr	r2, [r7, #24]
 800b670:	429a      	cmp	r2, r3
 800b672:	d302      	bcc.n	800b67a <UART_WaitOnFlagUntilTimeout+0x30>
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b67a:	2303      	movs	r3, #3
 800b67c:	e04e      	b.n	800b71c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d037      	beq.n	800b6fc <UART_WaitOnFlagUntilTimeout+0xb2>
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2b80      	cmp	r3, #128	@ 0x80
 800b690:	d034      	beq.n	800b6fc <UART_WaitOnFlagUntilTimeout+0xb2>
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b40      	cmp	r3, #64	@ 0x40
 800b696:	d031      	beq.n	800b6fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	f003 0308 	and.w	r3, r3, #8
 800b6a2:	2b08      	cmp	r3, #8
 800b6a4:	d110      	bne.n	800b6c8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2208      	movs	r2, #8
 800b6ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f000 f8fe 	bl	800b8b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2208      	movs	r2, #8
 800b6b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e029      	b.n	800b71c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6d6:	d111      	bne.n	800b6fc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f000 f8e4 	bl	800b8b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2220      	movs	r2, #32
 800b6ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e00f      	b.n	800b71c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	69da      	ldr	r2, [r3, #28]
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	4013      	ands	r3, r2
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	429a      	cmp	r2, r3
 800b70a:	bf0c      	ite	eq
 800b70c:	2301      	moveq	r3, #1
 800b70e:	2300      	movne	r3, #0
 800b710:	b2db      	uxtb	r3, r3
 800b712:	461a      	mov	r2, r3
 800b714:	79fb      	ldrb	r3, [r7, #7]
 800b716:	429a      	cmp	r2, r3
 800b718:	d0a0      	beq.n	800b65c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b096      	sub	sp, #88	@ 0x58
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	4613      	mov	r3, r2
 800b730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	88fa      	ldrh	r2, [r7, #6]
 800b73c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2222      	movs	r2, #34	@ 0x22
 800b74c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b754:	2b00      	cmp	r3, #0
 800b756:	d028      	beq.n	800b7aa <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b75c:	4a3e      	ldr	r2, [pc, #248]	@ (800b858 <UART_Start_Receive_DMA+0x134>)
 800b75e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b764:	4a3d      	ldr	r2, [pc, #244]	@ (800b85c <UART_Start_Receive_DMA+0x138>)
 800b766:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b76c:	4a3c      	ldr	r2, [pc, #240]	@ (800b860 <UART_Start_Receive_DMA+0x13c>)
 800b76e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b774:	2200      	movs	r2, #0
 800b776:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3324      	adds	r3, #36	@ 0x24
 800b782:	4619      	mov	r1, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b788:	461a      	mov	r2, r3
 800b78a:	88fb      	ldrh	r3, [r7, #6]
 800b78c:	f7f7 fe82 	bl	8003494 <HAL_DMA_Start_IT>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d009      	beq.n	800b7aa <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2210      	movs	r2, #16
 800b79a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2220      	movs	r2, #32
 800b7a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e051      	b.n	800b84e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d018      	beq.n	800b7e4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ba:	e853 3f00 	ldrex	r3, [r3]
 800b7be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7d2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b7d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7d8:	e841 2300 	strex	r3, r2, [r1]
 800b7dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b7de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1e6      	bne.n	800b7b2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	3308      	adds	r3, #8
 800b7ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ee:	e853 3f00 	ldrex	r3, [r3]
 800b7f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f6:	f043 0301 	orr.w	r3, r3, #1
 800b7fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3308      	adds	r3, #8
 800b802:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b804:	637a      	str	r2, [r7, #52]	@ 0x34
 800b806:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b808:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b80a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b80c:	e841 2300 	strex	r3, r2, [r1]
 800b810:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1e5      	bne.n	800b7e4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3308      	adds	r3, #8
 800b81e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	e853 3f00 	ldrex	r3, [r3]
 800b826:	613b      	str	r3, [r7, #16]
   return(result);
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b82e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3308      	adds	r3, #8
 800b836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b838:	623a      	str	r2, [r7, #32]
 800b83a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83c:	69f9      	ldr	r1, [r7, #28]
 800b83e:	6a3a      	ldr	r2, [r7, #32]
 800b840:	e841 2300 	strex	r3, r2, [r1]
 800b844:	61bb      	str	r3, [r7, #24]
   return(result);
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1e5      	bne.n	800b818 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3758      	adds	r7, #88	@ 0x58
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	0800b979 	.word	0x0800b979
 800b85c:	0800bad7 	.word	0x0800bad7
 800b860:	0800bb49 	.word	0x0800bb49

0800b864 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b864:	b480      	push	{r7}
 800b866:	b089      	sub	sp, #36	@ 0x24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	e853 3f00 	ldrex	r3, [r3]
 800b878:	60bb      	str	r3, [r7, #8]
   return(result);
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b880:	61fb      	str	r3, [r7, #28]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	61bb      	str	r3, [r7, #24]
 800b88c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	6979      	ldr	r1, [r7, #20]
 800b890:	69ba      	ldr	r2, [r7, #24]
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	613b      	str	r3, [r7, #16]
   return(result);
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e6      	bne.n	800b86c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2220      	movs	r2, #32
 800b8a2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b8a4:	bf00      	nop
 800b8a6:	3724      	adds	r7, #36	@ 0x24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b095      	sub	sp, #84	@ 0x54
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8c0:	e853 3f00 	ldrex	r3, [r3]
 800b8c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8de:	e841 2300 	strex	r3, r2, [r1]
 800b8e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1e6      	bne.n	800b8b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	f023 0301 	bic.w	r3, r3, #1
 800b900:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	3308      	adds	r3, #8
 800b908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b90a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b90c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b912:	e841 2300 	strex	r3, r2, [r1]
 800b916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1e5      	bne.n	800b8ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b922:	2b01      	cmp	r3, #1
 800b924:	d118      	bne.n	800b958 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	e853 3f00 	ldrex	r3, [r3]
 800b932:	60bb      	str	r3, [r7, #8]
   return(result);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	f023 0310 	bic.w	r3, r3, #16
 800b93a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	461a      	mov	r2, r3
 800b942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b944:	61bb      	str	r3, [r7, #24]
 800b946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b948:	6979      	ldr	r1, [r7, #20]
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	e841 2300 	strex	r3, r2, [r1]
 800b950:	613b      	str	r3, [r7, #16]
   return(result);
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e6      	bne.n	800b926 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2220      	movs	r2, #32
 800b95c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b96c:	bf00      	nop
 800b96e:	3754      	adds	r7, #84	@ 0x54
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b09c      	sub	sp, #112	@ 0x70
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b984:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b98e:	d071      	beq.n	800ba74 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b992:	2200      	movs	r2, #0
 800b994:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9a0:	e853 3f00 	ldrex	r3, [r3]
 800b9a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b9a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b9bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b9be:	e841 2300 	strex	r3, r2, [r1]
 800b9c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b9c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1e6      	bne.n	800b998 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d4:	e853 3f00 	ldrex	r3, [r3]
 800b9d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9dc:	f023 0301 	bic.w	r3, r3, #1
 800b9e0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b9e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3308      	adds	r3, #8
 800b9e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b9ea:	643a      	str	r2, [r7, #64]	@ 0x40
 800b9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9f2:	e841 2300 	strex	r3, r2, [r1]
 800b9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1e5      	bne.n	800b9ca <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3308      	adds	r3, #8
 800ba04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	e853 3f00 	ldrex	r3, [r3]
 800ba0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba14:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba26:	e841 2300 	strex	r3, r2, [r1]
 800ba2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1e5      	bne.n	800b9fe <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba34:	2220      	movs	r2, #32
 800ba36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d118      	bne.n	800ba74 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	e853 3f00 	ldrex	r3, [r3]
 800ba4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	f023 0310 	bic.w	r3, r3, #16
 800ba56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba60:	61bb      	str	r3, [r7, #24]
 800ba62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba64:	6979      	ldr	r1, [r7, #20]
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	e841 2300 	strex	r3, r2, [r1]
 800ba6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e6      	bne.n	800ba42 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba76:	2200      	movs	r2, #0
 800ba78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d122      	bne.n	800bac8 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800ba82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba84:	2200      	movs	r2, #0
 800ba86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800ba94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ba9a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d204      	bcs.n	800baac <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800baa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baa4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800baa8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800baac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bab8:	b29b      	uxth	r3, r3
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	b29b      	uxth	r3, r3
 800babe:	4619      	mov	r1, r3
 800bac0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bac2:	f7ff fa59 	bl	800af78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bac6:	e002      	b.n	800bace <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800bac8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800baca:	f014 fdf7 	bl	80206bc <HAL_UART_RxCpltCallback>
}
 800bace:	bf00      	nop
 800bad0:	3770      	adds	r7, #112	@ 0x70
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2201      	movs	r2, #1
 800bae8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d123      	bne.n	800bb3a <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800baf8:	085b      	lsrs	r3, r3, #1
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb10:	897a      	ldrh	r2, [r7, #10]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d803      	bhi.n	800bb1e <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	897a      	ldrh	r2, [r7, #10]
 800bb1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	4619      	mov	r1, r3
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f7ff fa20 	bl	800af78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb38:	e002      	b.n	800bb40 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f7ff fa08 	bl	800af50 <HAL_UART_RxHalfCpltCallback>
}
 800bb40:	bf00      	nop
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb5a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb62:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb6e:	2b80      	cmp	r3, #128	@ 0x80
 800bb70:	d109      	bne.n	800bb86 <UART_DMAError+0x3e>
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	2b21      	cmp	r3, #33	@ 0x21
 800bb76:	d106      	bne.n	800bb86 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800bb80:	6978      	ldr	r0, [r7, #20]
 800bb82:	f7ff fe6f 	bl	800b864 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb90:	2b40      	cmp	r3, #64	@ 0x40
 800bb92:	d109      	bne.n	800bba8 <UART_DMAError+0x60>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2b22      	cmp	r3, #34	@ 0x22
 800bb98:	d106      	bne.n	800bba8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800bba2:	6978      	ldr	r0, [r7, #20]
 800bba4:	f7ff fe84 	bl	800b8b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbae:	f043 0210 	orr.w	r2, r3, #16
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbb8:	6978      	ldr	r0, [r7, #20]
 800bbba:	f7ff f9d3 	bl	800af64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbbe:	bf00      	nop
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b084      	sub	sp, #16
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f7ff f9c1 	bl	800af64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbe2:	bf00      	nop
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b08f      	sub	sp, #60	@ 0x3c
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bbf6:	2b21      	cmp	r3, #33	@ 0x21
 800bbf8:	d14c      	bne.n	800bc94 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d132      	bne.n	800bc6c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	e853 3f00 	ldrex	r3, [r3]
 800bc12:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	461a      	mov	r2, r3
 800bc22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc2c:	e841 2300 	strex	r3, r2, [r1]
 800bc30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1e6      	bne.n	800bc06 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	e853 3f00 	ldrex	r3, [r3]
 800bc44:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	461a      	mov	r2, r3
 800bc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc56:	61bb      	str	r3, [r7, #24]
 800bc58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	6979      	ldr	r1, [r7, #20]
 800bc5c:	69ba      	ldr	r2, [r7, #24]
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	613b      	str	r3, [r7, #16]
   return(result);
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e6      	bne.n	800bc38 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bc6a:	e013      	b.n	800bc94 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc70:	781a      	ldrb	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bc94:	bf00      	nop
 800bc96:	373c      	adds	r7, #60	@ 0x3c
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b091      	sub	sp, #68	@ 0x44
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bcac:	2b21      	cmp	r3, #33	@ 0x21
 800bcae:	d151      	bne.n	800bd54 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d132      	bne.n	800bd22 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc4:	e853 3f00 	ldrex	r3, [r3]
 800bcc8:	623b      	str	r3, [r7, #32]
   return(result);
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcda:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bce2:	e841 2300 	strex	r3, r2, [r1]
 800bce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1e6      	bne.n	800bcbc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	e853 3f00 	ldrex	r3, [r3]
 800bcfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd02:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	461a      	mov	r2, r3
 800bd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd0c:	61fb      	str	r3, [r7, #28]
 800bd0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd10:	69b9      	ldr	r1, [r7, #24]
 800bd12:	69fa      	ldr	r2, [r7, #28]
 800bd14:	e841 2300 	strex	r3, r2, [r1]
 800bd18:	617b      	str	r3, [r7, #20]
   return(result);
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1e6      	bne.n	800bcee <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bd20:	e018      	b.n	800bd54 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bd28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd36:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd3c:	1c9a      	adds	r2, r3, #2
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bd54:	bf00      	nop
 800bd56:	3744      	adds	r7, #68	@ 0x44
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	e853 3f00 	ldrex	r3, [r3]
 800bd74:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd7c:	61fb      	str	r3, [r7, #28]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	461a      	mov	r2, r3
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	61bb      	str	r3, [r7, #24]
 800bd88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8a:	6979      	ldr	r1, [r7, #20]
 800bd8c:	69ba      	ldr	r2, [r7, #24]
 800bd8e:	e841 2300 	strex	r3, r2, [r1]
 800bd92:	613b      	str	r3, [r7, #16]
   return(result);
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1e6      	bne.n	800bd68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2220      	movs	r2, #32
 800bd9e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff f8c8 	bl	800af3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdac:	bf00      	nop
 800bdae:	3720      	adds	r7, #32
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800bdba:	4b92      	ldr	r3, [pc, #584]	@ (800c004 <MX_LWIP_Init+0x250>)
 800bdbc:	220a      	movs	r2, #10
 800bdbe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800bdc0:	4b90      	ldr	r3, [pc, #576]	@ (800c004 <MX_LWIP_Init+0x250>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800bdc6:	4b8f      	ldr	r3, [pc, #572]	@ (800c004 <MX_LWIP_Init+0x250>)
 800bdc8:	2201      	movs	r2, #1
 800bdca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800bdcc:	4b8d      	ldr	r3, [pc, #564]	@ (800c004 <MX_LWIP_Init+0x250>)
 800bdce:	2264      	movs	r2, #100	@ 0x64
 800bdd0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800bdd2:	4b8d      	ldr	r3, [pc, #564]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bdd4:	22ff      	movs	r2, #255	@ 0xff
 800bdd6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800bdd8:	4b8b      	ldr	r3, [pc, #556]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bdda:	22ff      	movs	r2, #255	@ 0xff
 800bddc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800bdde:	4b8a      	ldr	r3, [pc, #552]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bde0:	22ff      	movs	r2, #255	@ 0xff
 800bde2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800bde4:	4b88      	ldr	r3, [pc, #544]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bde6:	2200      	movs	r2, #0
 800bde8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800bdea:	4b88      	ldr	r3, [pc, #544]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bdec:	220a      	movs	r2, #10
 800bdee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800bdf0:	4b86      	ldr	r3, [pc, #536]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800bdf6:	4b85      	ldr	r3, [pc, #532]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800bdfc:	4b83      	ldr	r3, [pc, #524]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bdfe:	2265      	movs	r2, #101	@ 0x65
 800be00:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800be02:	2100      	movs	r1, #0
 800be04:	2000      	movs	r0, #0
 800be06:	f007 fc4b 	bl	80136a0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800be0a:	4b7e      	ldr	r3, [pc, #504]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	061a      	lsls	r2, r3, #24
 800be10:	4b7c      	ldr	r3, [pc, #496]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be12:	785b      	ldrb	r3, [r3, #1]
 800be14:	041b      	lsls	r3, r3, #16
 800be16:	431a      	orrs	r2, r3
 800be18:	4b7a      	ldr	r3, [pc, #488]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be1a:	789b      	ldrb	r3, [r3, #2]
 800be1c:	021b      	lsls	r3, r3, #8
 800be1e:	4313      	orrs	r3, r2
 800be20:	4a78      	ldr	r2, [pc, #480]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be22:	78d2      	ldrb	r2, [r2, #3]
 800be24:	4313      	orrs	r3, r2
 800be26:	061a      	lsls	r2, r3, #24
 800be28:	4b76      	ldr	r3, [pc, #472]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	0619      	lsls	r1, r3, #24
 800be2e:	4b75      	ldr	r3, [pc, #468]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be30:	785b      	ldrb	r3, [r3, #1]
 800be32:	041b      	lsls	r3, r3, #16
 800be34:	4319      	orrs	r1, r3
 800be36:	4b73      	ldr	r3, [pc, #460]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be38:	789b      	ldrb	r3, [r3, #2]
 800be3a:	021b      	lsls	r3, r3, #8
 800be3c:	430b      	orrs	r3, r1
 800be3e:	4971      	ldr	r1, [pc, #452]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be40:	78c9      	ldrb	r1, [r1, #3]
 800be42:	430b      	orrs	r3, r1
 800be44:	021b      	lsls	r3, r3, #8
 800be46:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800be4a:	431a      	orrs	r2, r3
 800be4c:	4b6d      	ldr	r3, [pc, #436]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	0619      	lsls	r1, r3, #24
 800be52:	4b6c      	ldr	r3, [pc, #432]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be54:	785b      	ldrb	r3, [r3, #1]
 800be56:	041b      	lsls	r3, r3, #16
 800be58:	4319      	orrs	r1, r3
 800be5a:	4b6a      	ldr	r3, [pc, #424]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be5c:	789b      	ldrb	r3, [r3, #2]
 800be5e:	021b      	lsls	r3, r3, #8
 800be60:	430b      	orrs	r3, r1
 800be62:	4968      	ldr	r1, [pc, #416]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be64:	78c9      	ldrb	r1, [r1, #3]
 800be66:	430b      	orrs	r3, r1
 800be68:	0a1b      	lsrs	r3, r3, #8
 800be6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800be6e:	431a      	orrs	r2, r3
 800be70:	4b64      	ldr	r3, [pc, #400]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	0619      	lsls	r1, r3, #24
 800be76:	4b63      	ldr	r3, [pc, #396]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be78:	785b      	ldrb	r3, [r3, #1]
 800be7a:	041b      	lsls	r3, r3, #16
 800be7c:	4319      	orrs	r1, r3
 800be7e:	4b61      	ldr	r3, [pc, #388]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be80:	789b      	ldrb	r3, [r3, #2]
 800be82:	021b      	lsls	r3, r3, #8
 800be84:	430b      	orrs	r3, r1
 800be86:	495f      	ldr	r1, [pc, #380]	@ (800c004 <MX_LWIP_Init+0x250>)
 800be88:	78c9      	ldrb	r1, [r1, #3]
 800be8a:	430b      	orrs	r3, r1
 800be8c:	0e1b      	lsrs	r3, r3, #24
 800be8e:	4313      	orrs	r3, r2
 800be90:	4a5f      	ldr	r2, [pc, #380]	@ (800c010 <MX_LWIP_Init+0x25c>)
 800be92:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800be94:	4b5c      	ldr	r3, [pc, #368]	@ (800c008 <MX_LWIP_Init+0x254>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	061a      	lsls	r2, r3, #24
 800be9a:	4b5b      	ldr	r3, [pc, #364]	@ (800c008 <MX_LWIP_Init+0x254>)
 800be9c:	785b      	ldrb	r3, [r3, #1]
 800be9e:	041b      	lsls	r3, r3, #16
 800bea0:	431a      	orrs	r2, r3
 800bea2:	4b59      	ldr	r3, [pc, #356]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bea4:	789b      	ldrb	r3, [r3, #2]
 800bea6:	021b      	lsls	r3, r3, #8
 800bea8:	4313      	orrs	r3, r2
 800beaa:	4a57      	ldr	r2, [pc, #348]	@ (800c008 <MX_LWIP_Init+0x254>)
 800beac:	78d2      	ldrb	r2, [r2, #3]
 800beae:	4313      	orrs	r3, r2
 800beb0:	061a      	lsls	r2, r3, #24
 800beb2:	4b55      	ldr	r3, [pc, #340]	@ (800c008 <MX_LWIP_Init+0x254>)
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	0619      	lsls	r1, r3, #24
 800beb8:	4b53      	ldr	r3, [pc, #332]	@ (800c008 <MX_LWIP_Init+0x254>)
 800beba:	785b      	ldrb	r3, [r3, #1]
 800bebc:	041b      	lsls	r3, r3, #16
 800bebe:	4319      	orrs	r1, r3
 800bec0:	4b51      	ldr	r3, [pc, #324]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bec2:	789b      	ldrb	r3, [r3, #2]
 800bec4:	021b      	lsls	r3, r3, #8
 800bec6:	430b      	orrs	r3, r1
 800bec8:	494f      	ldr	r1, [pc, #316]	@ (800c008 <MX_LWIP_Init+0x254>)
 800beca:	78c9      	ldrb	r1, [r1, #3]
 800becc:	430b      	orrs	r3, r1
 800bece:	021b      	lsls	r3, r3, #8
 800bed0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bed4:	431a      	orrs	r2, r3
 800bed6:	4b4c      	ldr	r3, [pc, #304]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	0619      	lsls	r1, r3, #24
 800bedc:	4b4a      	ldr	r3, [pc, #296]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bede:	785b      	ldrb	r3, [r3, #1]
 800bee0:	041b      	lsls	r3, r3, #16
 800bee2:	4319      	orrs	r1, r3
 800bee4:	4b48      	ldr	r3, [pc, #288]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bee6:	789b      	ldrb	r3, [r3, #2]
 800bee8:	021b      	lsls	r3, r3, #8
 800beea:	430b      	orrs	r3, r1
 800beec:	4946      	ldr	r1, [pc, #280]	@ (800c008 <MX_LWIP_Init+0x254>)
 800beee:	78c9      	ldrb	r1, [r1, #3]
 800bef0:	430b      	orrs	r3, r1
 800bef2:	0a1b      	lsrs	r3, r3, #8
 800bef4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bef8:	431a      	orrs	r2, r3
 800befa:	4b43      	ldr	r3, [pc, #268]	@ (800c008 <MX_LWIP_Init+0x254>)
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	0619      	lsls	r1, r3, #24
 800bf00:	4b41      	ldr	r3, [pc, #260]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bf02:	785b      	ldrb	r3, [r3, #1]
 800bf04:	041b      	lsls	r3, r3, #16
 800bf06:	4319      	orrs	r1, r3
 800bf08:	4b3f      	ldr	r3, [pc, #252]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bf0a:	789b      	ldrb	r3, [r3, #2]
 800bf0c:	021b      	lsls	r3, r3, #8
 800bf0e:	430b      	orrs	r3, r1
 800bf10:	493d      	ldr	r1, [pc, #244]	@ (800c008 <MX_LWIP_Init+0x254>)
 800bf12:	78c9      	ldrb	r1, [r1, #3]
 800bf14:	430b      	orrs	r3, r1
 800bf16:	0e1b      	lsrs	r3, r3, #24
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	4a3e      	ldr	r2, [pc, #248]	@ (800c014 <MX_LWIP_Init+0x260>)
 800bf1c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bf1e:	4b3b      	ldr	r3, [pc, #236]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	061a      	lsls	r2, r3, #24
 800bf24:	4b39      	ldr	r3, [pc, #228]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	041b      	lsls	r3, r3, #16
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	4b37      	ldr	r3, [pc, #220]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf2e:	789b      	ldrb	r3, [r3, #2]
 800bf30:	021b      	lsls	r3, r3, #8
 800bf32:	4313      	orrs	r3, r2
 800bf34:	4a35      	ldr	r2, [pc, #212]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf36:	78d2      	ldrb	r2, [r2, #3]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	061a      	lsls	r2, r3, #24
 800bf3c:	4b33      	ldr	r3, [pc, #204]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	0619      	lsls	r1, r3, #24
 800bf42:	4b32      	ldr	r3, [pc, #200]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf44:	785b      	ldrb	r3, [r3, #1]
 800bf46:	041b      	lsls	r3, r3, #16
 800bf48:	4319      	orrs	r1, r3
 800bf4a:	4b30      	ldr	r3, [pc, #192]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf4c:	789b      	ldrb	r3, [r3, #2]
 800bf4e:	021b      	lsls	r3, r3, #8
 800bf50:	430b      	orrs	r3, r1
 800bf52:	492e      	ldr	r1, [pc, #184]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf54:	78c9      	ldrb	r1, [r1, #3]
 800bf56:	430b      	orrs	r3, r1
 800bf58:	021b      	lsls	r3, r3, #8
 800bf5a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	4b2a      	ldr	r3, [pc, #168]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	0619      	lsls	r1, r3, #24
 800bf66:	4b29      	ldr	r3, [pc, #164]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf68:	785b      	ldrb	r3, [r3, #1]
 800bf6a:	041b      	lsls	r3, r3, #16
 800bf6c:	4319      	orrs	r1, r3
 800bf6e:	4b27      	ldr	r3, [pc, #156]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf70:	789b      	ldrb	r3, [r3, #2]
 800bf72:	021b      	lsls	r3, r3, #8
 800bf74:	430b      	orrs	r3, r1
 800bf76:	4925      	ldr	r1, [pc, #148]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf78:	78c9      	ldrb	r1, [r1, #3]
 800bf7a:	430b      	orrs	r3, r1
 800bf7c:	0a1b      	lsrs	r3, r3, #8
 800bf7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf82:	431a      	orrs	r2, r3
 800bf84:	4b21      	ldr	r3, [pc, #132]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	0619      	lsls	r1, r3, #24
 800bf8a:	4b20      	ldr	r3, [pc, #128]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf8c:	785b      	ldrb	r3, [r3, #1]
 800bf8e:	041b      	lsls	r3, r3, #16
 800bf90:	4319      	orrs	r1, r3
 800bf92:	4b1e      	ldr	r3, [pc, #120]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf94:	789b      	ldrb	r3, [r3, #2]
 800bf96:	021b      	lsls	r3, r3, #8
 800bf98:	430b      	orrs	r3, r1
 800bf9a:	491c      	ldr	r1, [pc, #112]	@ (800c00c <MX_LWIP_Init+0x258>)
 800bf9c:	78c9      	ldrb	r1, [r1, #3]
 800bf9e:	430b      	orrs	r3, r1
 800bfa0:	0e1b      	lsrs	r3, r3, #24
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	4a1c      	ldr	r2, [pc, #112]	@ (800c018 <MX_LWIP_Init+0x264>)
 800bfa6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bfa8:	4b1c      	ldr	r3, [pc, #112]	@ (800c01c <MX_LWIP_Init+0x268>)
 800bfaa:	9302      	str	r3, [sp, #8]
 800bfac:	4b1c      	ldr	r3, [pc, #112]	@ (800c020 <MX_LWIP_Init+0x26c>)
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	4b18      	ldr	r3, [pc, #96]	@ (800c018 <MX_LWIP_Init+0x264>)
 800bfb6:	4a17      	ldr	r2, [pc, #92]	@ (800c014 <MX_LWIP_Init+0x260>)
 800bfb8:	4915      	ldr	r1, [pc, #84]	@ (800c010 <MX_LWIP_Init+0x25c>)
 800bfba:	481a      	ldr	r0, [pc, #104]	@ (800c024 <MX_LWIP_Init+0x270>)
 800bfbc:	f008 f960 	bl	8014280 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bfc0:	4818      	ldr	r0, [pc, #96]	@ (800c024 <MX_LWIP_Init+0x270>)
 800bfc2:	f008 fbf1 	bl	80147a8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bfc6:	4817      	ldr	r0, [pc, #92]	@ (800c024 <MX_LWIP_Init+0x270>)
 800bfc8:	f008 fc12 	bl	80147f0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bfcc:	4916      	ldr	r1, [pc, #88]	@ (800c028 <MX_LWIP_Init+0x274>)
 800bfce:	4815      	ldr	r0, [pc, #84]	@ (800c024 <MX_LWIP_Init+0x270>)
 800bfd0:	f008 fd10 	bl	80149f4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bfd4:	2224      	movs	r2, #36	@ 0x24
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	4814      	ldr	r0, [pc, #80]	@ (800c02c <MX_LWIP_Init+0x278>)
 800bfda:	f014 fdef 	bl	8020bbc <memset>
  attributes.name = "EthLink";
 800bfde:	4b13      	ldr	r3, [pc, #76]	@ (800c02c <MX_LWIP_Init+0x278>)
 800bfe0:	4a13      	ldr	r2, [pc, #76]	@ (800c030 <MX_LWIP_Init+0x27c>)
 800bfe2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bfe4:	4b11      	ldr	r3, [pc, #68]	@ (800c02c <MX_LWIP_Init+0x278>)
 800bfe6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bfea:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bfec:	4b0f      	ldr	r3, [pc, #60]	@ (800c02c <MX_LWIP_Init+0x278>)
 800bfee:	2210      	movs	r2, #16
 800bff0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bff2:	4a0e      	ldr	r2, [pc, #56]	@ (800c02c <MX_LWIP_Init+0x278>)
 800bff4:	490b      	ldr	r1, [pc, #44]	@ (800c024 <MX_LWIP_Init+0x270>)
 800bff6:	480f      	ldr	r0, [pc, #60]	@ (800c034 <MX_LWIP_Init+0x280>)
 800bff8:	f000 fdce 	bl	800cb98 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bffc:	bf00      	nop
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	20000b94 	.word	0x20000b94
 800c008:	20000b98 	.word	0x20000b98
 800c00c:	20000b9c 	.word	0x20000b9c
 800c010:	20000b88 	.word	0x20000b88
 800c014:	20000b8c 	.word	0x20000b8c
 800c018:	20000b90 	.word	0x20000b90
 800c01c:	080135b1 	.word	0x080135b1
 800c020:	0800c579 	.word	0x0800c579
 800c024:	20000b54 	.word	0x20000b54
 800c028:	0800c039 	.word	0x0800c039
 800c02c:	20000ba0 	.word	0x20000ba0
 800c030:	080219cc 	.word	0x080219cc
 800c034:	0800c851 	.word	0x0800c851

0800c038 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c05e:	2320      	movs	r3, #32
 800c060:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c062:	f3bf 8f4f 	dsb	sy
}
 800c066:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800c068:	e00b      	b.n	800c082 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c06a:	4a0d      	ldr	r2, [pc, #52]	@ (800c0a0 <SCB_InvalidateDCache_by_Addr+0x54>)
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	693a      	ldr	r2, [r7, #16]
 800c076:	4413      	add	r3, r2
 800c078:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c07a:	697a      	ldr	r2, [r7, #20]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	dcf0      	bgt.n	800c06a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c088:	f3bf 8f4f 	dsb	sy
}
 800c08c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c08e:	f3bf 8f6f 	isb	sy
}
 800c092:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800c094:	bf00      	nop
 800c096:	371c      	adds	r7, #28
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	e000ed00 	.word	0xe000ed00

0800c0a4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c0ac:	4b04      	ldr	r3, [pc, #16]	@ (800c0c0 <HAL_ETH_RxCpltCallback+0x1c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f001 f9ad 	bl	800d410 <osSemaphoreRelease>
}
 800c0b6:	bf00      	nop
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	20005550 	.word	0x20005550

0800c0c4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c0cc:	4b04      	ldr	r3, [pc, #16]	@ (800c0e0 <HAL_ETH_TxCpltCallback+0x1c>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f001 f99d 	bl	800d410 <osSemaphoreRelease>
}
 800c0d6:	bf00      	nop
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	20005554 	.word	0x20005554

0800c0e4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7f8 fb90 	bl	8004812 <HAL_ETH_GetDMAError>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0f8:	2b80      	cmp	r3, #128	@ 0x80
 800c0fa:	d104      	bne.n	800c106 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c0fc:	4b04      	ldr	r3, [pc, #16]	@ (800c110 <HAL_ETH_ErrorCallback+0x2c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4618      	mov	r0, r3
 800c102:	f001 f985 	bl	800d410 <osSemaphoreRelease>
  }
}
 800c106:	bf00      	nop
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20005550 	.word	0x20005550

0800c114 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b0aa      	sub	sp, #168	@ 0xa8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c11c:	2300      	movs	r3, #0
 800c11e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c128:	2300      	movs	r3, #0
 800c12a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c12e:	f107 0310 	add.w	r3, r7, #16
 800c132:	2264      	movs	r2, #100	@ 0x64
 800c134:	2100      	movs	r1, #0
 800c136:	4618      	mov	r0, r3
 800c138:	f014 fd40 	bl	8020bbc <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c13c:	4b89      	ldr	r3, [pc, #548]	@ (800c364 <low_level_init+0x250>)
 800c13e:	4a8a      	ldr	r2, [pc, #552]	@ (800c368 <low_level_init+0x254>)
 800c140:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c142:	2300      	movs	r3, #0
 800c144:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c146:	2380      	movs	r3, #128	@ 0x80
 800c148:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c14a:	23e1      	movs	r3, #225	@ 0xe1
 800c14c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c14e:	2300      	movs	r3, #0
 800c150:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c152:	2300      	movs	r3, #0
 800c154:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c156:	2300      	movs	r3, #0
 800c158:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c15a:	4a82      	ldr	r2, [pc, #520]	@ (800c364 <low_level_init+0x250>)
 800c15c:	f107 0308 	add.w	r3, r7, #8
 800c160:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c162:	4b80      	ldr	r3, [pc, #512]	@ (800c364 <low_level_init+0x250>)
 800c164:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c168:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c16a:	4b7e      	ldr	r3, [pc, #504]	@ (800c364 <low_level_init+0x250>)
 800c16c:	4a7f      	ldr	r2, [pc, #508]	@ (800c36c <low_level_init+0x258>)
 800c16e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c170:	4b7c      	ldr	r3, [pc, #496]	@ (800c364 <low_level_init+0x250>)
 800c172:	4a7f      	ldr	r2, [pc, #508]	@ (800c370 <low_level_init+0x25c>)
 800c174:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c176:	4b7b      	ldr	r3, [pc, #492]	@ (800c364 <low_level_init+0x250>)
 800c178:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c17c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c17e:	4879      	ldr	r0, [pc, #484]	@ (800c364 <low_level_init+0x250>)
 800c180:	f7f7 fcfe 	bl	8003b80 <HAL_ETH_Init>
 800c184:	4603      	mov	r3, r0
 800c186:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c18a:	2238      	movs	r2, #56	@ 0x38
 800c18c:	2100      	movs	r1, #0
 800c18e:	4879      	ldr	r0, [pc, #484]	@ (800c374 <low_level_init+0x260>)
 800c190:	f014 fd14 	bl	8020bbc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c194:	4b77      	ldr	r3, [pc, #476]	@ (800c374 <low_level_init+0x260>)
 800c196:	2221      	movs	r2, #33	@ 0x21
 800c198:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c19a:	4b76      	ldr	r3, [pc, #472]	@ (800c374 <low_level_init+0x260>)
 800c19c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c1a0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c1a2:	4b74      	ldr	r3, [pc, #464]	@ (800c374 <low_level_init+0x260>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c1a8:	4873      	ldr	r0, [pc, #460]	@ (800c378 <low_level_init+0x264>)
 800c1aa:	f007 ff1b 	bl	8013fe4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2206      	movs	r2, #6
 800c1b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c1b6:	4b6b      	ldr	r3, [pc, #428]	@ (800c364 <low_level_init+0x250>)
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c1c2:	4b68      	ldr	r3, [pc, #416]	@ (800c364 <low_level_init+0x250>)
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	785a      	ldrb	r2, [r3, #1]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c1ce:	4b65      	ldr	r3, [pc, #404]	@ (800c364 <low_level_init+0x250>)
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	789a      	ldrb	r2, [r3, #2]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c1da:	4b62      	ldr	r3, [pc, #392]	@ (800c364 <low_level_init+0x250>)
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	78da      	ldrb	r2, [r3, #3]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c1e6:	4b5f      	ldr	r3, [pc, #380]	@ (800c364 <low_level_init+0x250>)
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	791a      	ldrb	r2, [r3, #4]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c1f2:	4b5c      	ldr	r3, [pc, #368]	@ (800c364 <low_level_init+0x250>)
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	795a      	ldrb	r2, [r3, #5]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c204:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c20c:	f043 030a 	orr.w	r3, r3, #10
 800c210:	b2da      	uxtb	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c218:	2200      	movs	r2, #0
 800c21a:	2100      	movs	r1, #0
 800c21c:	2001      	movs	r0, #1
 800c21e:	f000 fff5 	bl	800d20c <osSemaphoreNew>
 800c222:	4603      	mov	r3, r0
 800c224:	4a55      	ldr	r2, [pc, #340]	@ (800c37c <low_level_init+0x268>)
 800c226:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c228:	2200      	movs	r2, #0
 800c22a:	2100      	movs	r1, #0
 800c22c:	2001      	movs	r0, #1
 800c22e:	f000 ffed 	bl	800d20c <osSemaphoreNew>
 800c232:	4603      	mov	r3, r0
 800c234:	4a52      	ldr	r2, [pc, #328]	@ (800c380 <low_level_init+0x26c>)
 800c236:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c238:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c23c:	2224      	movs	r2, #36	@ 0x24
 800c23e:	2100      	movs	r1, #0
 800c240:	4618      	mov	r0, r3
 800c242:	f014 fcbb 	bl	8020bbc <memset>
  attributes.name = "EthIf";
 800c246:	4b4f      	ldr	r3, [pc, #316]	@ (800c384 <low_level_init+0x270>)
 800c248:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c24a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c24e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c252:	2330      	movs	r3, #48	@ 0x30
 800c254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c258:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c25c:	461a      	mov	r2, r3
 800c25e:	6879      	ldr	r1, [r7, #4]
 800c260:	4849      	ldr	r0, [pc, #292]	@ (800c388 <low_level_init+0x274>)
 800c262:	f000 fc99 	bl	800cb98 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c266:	4949      	ldr	r1, [pc, #292]	@ (800c38c <low_level_init+0x278>)
 800c268:	4849      	ldr	r0, [pc, #292]	@ (800c390 <low_level_init+0x27c>)
 800c26a:	f7f5 ff9c 	bl	80021a6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c26e:	4848      	ldr	r0, [pc, #288]	@ (800c390 <low_level_init+0x27c>)
 800c270:	f7f5 ffcb 	bl	800220a <LAN8742_Init>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d006      	beq.n	800c288 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f008 fb8a 	bl	8014994 <netif_set_link_down>
    netif_set_down(netif);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f008 fb21 	bl	80148c8 <netif_set_down>
 800c286:	e06a      	b.n	800c35e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c288:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d164      	bne.n	800c35a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c290:	483f      	ldr	r0, [pc, #252]	@ (800c390 <low_level_init+0x27c>)
 800c292:	f7f6 f807 	bl	80022a4 <LAN8742_GetLinkState>
 800c296:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c29a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	dc06      	bgt.n	800c2b0 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f008 fb76 	bl	8014994 <netif_set_link_down>
      netif_set_down(netif);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f008 fb0d 	bl	80148c8 <netif_set_down>
 800c2ae:	e056      	b.n	800c35e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c2b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c2b4:	3b02      	subs	r3, #2
 800c2b6:	2b03      	cmp	r3, #3
 800c2b8:	d82a      	bhi.n	800c310 <low_level_init+0x1fc>
 800c2ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c0 <low_level_init+0x1ac>)
 800c2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c0:	0800c2d1 	.word	0x0800c2d1
 800c2c4:	0800c2e3 	.word	0x0800c2e3
 800c2c8:	0800c2f3 	.word	0x0800c2f3
 800c2cc:	0800c303 	.word	0x0800c303
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c2d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c2d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c2e0:	e01f      	b.n	800c322 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c2e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c2f0:	e017      	b.n	800c322 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c2f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c300:	e00f      	b.n	800c322 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c302:	2300      	movs	r3, #0
 800c304:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c308:	2300      	movs	r3, #0
 800c30a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c30e:	e008      	b.n	800c322 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c310:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c314:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c318:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c31c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c320:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c322:	f107 0310 	add.w	r3, r7, #16
 800c326:	4619      	mov	r1, r3
 800c328:	480e      	ldr	r0, [pc, #56]	@ (800c364 <low_level_init+0x250>)
 800c32a:	f7f8 f911 	bl	8004550 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c32e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c332:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c334:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c338:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c33a:	f107 0310 	add.w	r3, r7, #16
 800c33e:	4619      	mov	r1, r3
 800c340:	4808      	ldr	r0, [pc, #32]	@ (800c364 <low_level_init+0x250>)
 800c342:	f7f8 f9fc 	bl	800473e <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c346:	4807      	ldr	r0, [pc, #28]	@ (800c364 <low_level_init+0x250>)
 800c348:	f7f7 fcb4 	bl	8003cb4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f008 fa4f 	bl	80147f0 <netif_set_up>
    netif_set_link_up(netif);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f008 faea 	bl	801492c <netif_set_link_up>
 800c358:	e001      	b.n	800c35e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c35a:	f7f4 ff8f 	bl	800127c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c35e:	37a8      	adds	r7, #168	@ 0xa8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	20005558 	.word	0x20005558
 800c368:	40028000 	.word	0x40028000
 800c36c:	20000170 	.word	0x20000170
 800c370:	200000d0 	.word	0x200000d0
 800c374:	20005608 	.word	0x20005608
 800c378:	080262c8 	.word	0x080262c8
 800c37c:	20005550 	.word	0x20005550
 800c380:	20005554 	.word	0x20005554
 800c384:	080219ec 	.word	0x080219ec
 800c388:	0800c525 	.word	0x0800c525
 800c38c:	2000000c 	.word	0x2000000c
 800c390:	20005640 	.word	0x20005640

0800c394 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b092      	sub	sp, #72	@ 0x48
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c3ac:	f107 030c 	add.w	r3, r7, #12
 800c3b0:	2230      	movs	r2, #48	@ 0x30
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f014 fc01 	bl	8020bbc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c3ba:	f107 030c 	add.w	r3, r7, #12
 800c3be:	2230      	movs	r2, #48	@ 0x30
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f014 fbfa 	bl	8020bbc <memset>

  for(q = p; q != NULL; q = q->next)
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3cc:	e045      	b.n	800c45a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c3ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3d0:	2b03      	cmp	r3, #3
 800c3d2:	d902      	bls.n	800c3da <low_level_output+0x46>
      return ERR_IF;
 800c3d4:	f06f 030b 	mvn.w	r3, #11
 800c3d8:	e07f      	b.n	800c4da <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c3da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3dc:	6859      	ldr	r1, [r3, #4]
 800c3de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	4413      	add	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	3348      	adds	r3, #72	@ 0x48
 800c3ea:	443b      	add	r3, r7
 800c3ec:	3b3c      	subs	r3, #60	@ 0x3c
 800c3ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c3f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3f2:	895b      	ldrh	r3, [r3, #10]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	3348      	adds	r3, #72	@ 0x48
 800c402:	443b      	add	r3, r7
 800c404:	3b38      	subs	r3, #56	@ 0x38
 800c406:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d011      	beq.n	800c432 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c410:	1e5a      	subs	r2, r3, #1
 800c412:	f107 000c 	add.w	r0, r7, #12
 800c416:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c418:	460b      	mov	r3, r1
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	440b      	add	r3, r1
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	18c1      	adds	r1, r0, r3
 800c422:	4613      	mov	r3, r2
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	4413      	add	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	3348      	adds	r3, #72	@ 0x48
 800c42c:	443b      	add	r3, r7
 800c42e:	3b34      	subs	r3, #52	@ 0x34
 800c430:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d109      	bne.n	800c44e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c43a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c43c:	4613      	mov	r3, r2
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	4413      	add	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	3348      	adds	r3, #72	@ 0x48
 800c446:	443b      	add	r3, r7
 800c448:	3b34      	subs	r3, #52	@ 0x34
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c44e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c450:	3301      	adds	r3, #1
 800c452:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	643b      	str	r3, [r7, #64]	@ 0x40
 800c45a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1b6      	bne.n	800c3ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	891b      	ldrh	r3, [r3, #8]
 800c464:	461a      	mov	r2, r3
 800c466:	4b1f      	ldr	r3, [pc, #124]	@ (800c4e4 <low_level_output+0x150>)
 800c468:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c46a:	4a1e      	ldr	r2, [pc, #120]	@ (800c4e4 <low_level_output+0x150>)
 800c46c:	f107 030c 	add.w	r3, r7, #12
 800c470:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c472:	4a1c      	ldr	r2, [pc, #112]	@ (800c4e4 <low_level_output+0x150>)
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c478:	6838      	ldr	r0, [r7, #0]
 800c47a:	f008 ff73 	bl	8015364 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c47e:	4919      	ldr	r1, [pc, #100]	@ (800c4e4 <low_level_output+0x150>)
 800c480:	4819      	ldr	r0, [pc, #100]	@ (800c4e8 <low_level_output+0x154>)
 800c482:	f7f7 fd07 	bl	8003e94 <HAL_ETH_Transmit_IT>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d103      	bne.n	800c494 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c492:	e01b      	b.n	800c4cc <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c494:	4814      	ldr	r0, [pc, #80]	@ (800c4e8 <low_level_output+0x154>)
 800c496:	f7f8 f9af 	bl	80047f8 <HAL_ETH_GetError>
 800c49a:	4603      	mov	r3, r0
 800c49c:	f003 0302 	and.w	r3, r3, #2
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00d      	beq.n	800c4c0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c4a4:	4b11      	ldr	r3, [pc, #68]	@ (800c4ec <low_level_output+0x158>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 ff49 	bl	800d344 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c4b2:	480d      	ldr	r0, [pc, #52]	@ (800c4e8 <low_level_output+0x154>)
 800c4b4:	f7f7 fe8e 	bl	80041d4 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c4b8:	23fe      	movs	r3, #254	@ 0xfe
 800c4ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c4be:	e005      	b.n	800c4cc <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c4c0:	6838      	ldr	r0, [r7, #0]
 800c4c2:	f008 fe91 	bl	80151e8 <pbuf_free>
        errval =  ERR_IF;
 800c4c6:	23f4      	movs	r3, #244	@ 0xf4
 800c4c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c4cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c4d0:	f113 0f02 	cmn.w	r3, #2
 800c4d4:	d0d3      	beq.n	800c47e <low_level_output+0xea>

  return errval;
 800c4d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3748      	adds	r7, #72	@ 0x48
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20005608 	.word	0x20005608
 800c4e8:	20005558 	.word	0x20005558
 800c4ec:	20005554 	.word	0x20005554

0800c4f0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c4fc:	4b07      	ldr	r3, [pc, #28]	@ (800c51c <low_level_input+0x2c>)
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d105      	bne.n	800c510 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c504:	f107 030c 	add.w	r3, r7, #12
 800c508:	4619      	mov	r1, r3
 800c50a:	4805      	ldr	r0, [pc, #20]	@ (800c520 <low_level_input+0x30>)
 800c50c:	f7f7 fd1e 	bl	8003f4c <HAL_ETH_ReadData>
  }

  return p;
 800c510:	68fb      	ldr	r3, [r7, #12]
}
 800c512:	4618      	mov	r0, r3
 800c514:	3710      	adds	r7, #16
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	2000554c 	.word	0x2000554c
 800c520:	20005558 	.word	0x20005558

0800c524 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c52c:	2300      	movs	r3, #0
 800c52e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c534:	4b0f      	ldr	r3, [pc, #60]	@ (800c574 <ethernetif_input+0x50>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 ff01 	bl	800d344 <osSemaphoreAcquire>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1f5      	bne.n	800c534 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c548:	68b8      	ldr	r0, [r7, #8]
 800c54a:	f7ff ffd1 	bl	800c4f0 <low_level_input>
 800c54e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00a      	beq.n	800c56c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	68b9      	ldr	r1, [r7, #8]
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	4798      	blx	r3
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f008 fe3e 	bl	80151e8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1ea      	bne.n	800c548 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c572:	e7df      	b.n	800c534 <ethernetif_input+0x10>
 800c574:	20005550 	.word	0x20005550

0800c578 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d106      	bne.n	800c594 <ethernetif_init+0x1c>
 800c586:	4b0e      	ldr	r3, [pc, #56]	@ (800c5c0 <ethernetif_init+0x48>)
 800c588:	f240 220d 	movw	r2, #525	@ 0x20d
 800c58c:	490d      	ldr	r1, [pc, #52]	@ (800c5c4 <ethernetif_init+0x4c>)
 800c58e:	480e      	ldr	r0, [pc, #56]	@ (800c5c8 <ethernetif_init+0x50>)
 800c590:	f014 f9b4 	bl	80208fc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2273      	movs	r2, #115	@ 0x73
 800c598:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2274      	movs	r2, #116	@ 0x74
 800c5a0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a09      	ldr	r2, [pc, #36]	@ (800c5cc <ethernetif_init+0x54>)
 800c5a8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4a08      	ldr	r2, [pc, #32]	@ (800c5d0 <ethernetif_init+0x58>)
 800c5ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f7ff fdaf 	bl	800c114 <low_level_init>

  return ERR_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	080219f4 	.word	0x080219f4
 800c5c4:	08021a10 	.word	0x08021a10
 800c5c8:	08021a20 	.word	0x08021a20
 800c5cc:	0801d4f1 	.word	0x0801d4f1
 800c5d0:	0800c395 	.word	0x0800c395

0800c5d4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c5e0:	68f9      	ldr	r1, [r7, #12]
 800c5e2:	4809      	ldr	r0, [pc, #36]	@ (800c608 <pbuf_free_custom+0x34>)
 800c5e4:	f007 fdf6 	bl	80141d4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c5e8:	4b08      	ldr	r3, [pc, #32]	@ (800c60c <pbuf_free_custom+0x38>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d107      	bne.n	800c600 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c5f0:	4b06      	ldr	r3, [pc, #24]	@ (800c60c <pbuf_free_custom+0x38>)
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c5f6:	4b06      	ldr	r3, [pc, #24]	@ (800c610 <pbuf_free_custom+0x3c>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f000 ff08 	bl	800d410 <osSemaphoreRelease>
  }
}
 800c600:	bf00      	nop
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	080262c8 	.word	0x080262c8
 800c60c:	2000554c 	.word	0x2000554c
 800c610:	20005550 	.word	0x20005550

0800c614 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c618:	f7f5 feec 	bl	80023f4 <HAL_GetTick>
 800c61c:	4603      	mov	r3, r0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08e      	sub	sp, #56	@ 0x38
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c62c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c630:	2200      	movs	r2, #0
 800c632:	601a      	str	r2, [r3, #0]
 800c634:	605a      	str	r2, [r3, #4]
 800c636:	609a      	str	r2, [r3, #8]
 800c638:	60da      	str	r2, [r3, #12]
 800c63a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a56      	ldr	r2, [pc, #344]	@ (800c79c <HAL_ETH_MspInit+0x178>)
 800c642:	4293      	cmp	r3, r2
 800c644:	f040 80a6 	bne.w	800c794 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c648:	4b55      	ldr	r3, [pc, #340]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c64a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c64c:	4a54      	ldr	r2, [pc, #336]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c64e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c652:	6313      	str	r3, [r2, #48]	@ 0x30
 800c654:	4b52      	ldr	r3, [pc, #328]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c65c:	623b      	str	r3, [r7, #32]
 800c65e:	6a3b      	ldr	r3, [r7, #32]
 800c660:	4b4f      	ldr	r3, [pc, #316]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c664:	4a4e      	ldr	r2, [pc, #312]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c666:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c66a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c66c:	4b4c      	ldr	r3, [pc, #304]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c66e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c670:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c674:	61fb      	str	r3, [r7, #28]
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	4b49      	ldr	r3, [pc, #292]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c67a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c67c:	4a48      	ldr	r2, [pc, #288]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c67e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c682:	6313      	str	r3, [r2, #48]	@ 0x30
 800c684:	4b46      	ldr	r3, [pc, #280]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c68c:	61bb      	str	r3, [r7, #24]
 800c68e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c690:	4b43      	ldr	r3, [pc, #268]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c694:	4a42      	ldr	r2, [pc, #264]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c696:	f043 0304 	orr.w	r3, r3, #4
 800c69a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c69c:	4b40      	ldr	r3, [pc, #256]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c69e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6a8:	4b3d      	ldr	r3, [pc, #244]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c6aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ac:	4a3c      	ldr	r2, [pc, #240]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c6ae:	f043 0301 	orr.w	r3, r3, #1
 800c6b2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6b4:	4b3a      	ldr	r3, [pc, #232]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c6b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6b8:	f003 0301 	and.w	r3, r3, #1
 800c6bc:	613b      	str	r3, [r7, #16]
 800c6be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6c0:	4b37      	ldr	r3, [pc, #220]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c6c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6c4:	4a36      	ldr	r2, [pc, #216]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c6c6:	f043 0302 	orr.w	r3, r3, #2
 800c6ca:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6cc:	4b34      	ldr	r3, [pc, #208]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c6ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6d0:	f003 0302 	and.w	r3, r3, #2
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c6d8:	4b31      	ldr	r3, [pc, #196]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c6da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6dc:	4a30      	ldr	r2, [pc, #192]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6e2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6e4:	4b2e      	ldr	r3, [pc, #184]	@ (800c7a0 <HAL_ETH_MspInit+0x17c>)
 800c6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ec:	60bb      	str	r3, [r7, #8]
 800c6ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c6f0:	2332      	movs	r3, #50	@ 0x32
 800c6f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c700:	230b      	movs	r3, #11
 800c702:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c708:	4619      	mov	r1, r3
 800c70a:	4826      	ldr	r0, [pc, #152]	@ (800c7a4 <HAL_ETH_MspInit+0x180>)
 800c70c:	f7f8 fcae 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c710:	2386      	movs	r3, #134	@ 0x86
 800c712:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c714:	2302      	movs	r3, #2
 800c716:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c718:	2300      	movs	r3, #0
 800c71a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c71c:	2303      	movs	r3, #3
 800c71e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c720:	230b      	movs	r3, #11
 800c722:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c728:	4619      	mov	r1, r3
 800c72a:	481f      	ldr	r0, [pc, #124]	@ (800c7a8 <HAL_ETH_MspInit+0x184>)
 800c72c:	f7f8 fc9e 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c730:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c734:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c736:	2302      	movs	r3, #2
 800c738:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c73e:	2303      	movs	r3, #3
 800c740:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c742:	230b      	movs	r3, #11
 800c744:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c74a:	4619      	mov	r1, r3
 800c74c:	4817      	ldr	r0, [pc, #92]	@ (800c7ac <HAL_ETH_MspInit+0x188>)
 800c74e:	f7f8 fc8d 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c752:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c756:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c758:	2302      	movs	r3, #2
 800c75a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c75c:	2300      	movs	r3, #0
 800c75e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c760:	2303      	movs	r3, #3
 800c762:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c764:	230b      	movs	r3, #11
 800c766:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c76c:	4619      	mov	r1, r3
 800c76e:	4810      	ldr	r0, [pc, #64]	@ (800c7b0 <HAL_ETH_MspInit+0x18c>)
 800c770:	f7f8 fc7c 	bl	800506c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c774:	2200      	movs	r2, #0
 800c776:	2105      	movs	r1, #5
 800c778:	203d      	movs	r0, #61	@ 0x3d
 800c77a:	f7f6 fba9 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c77e:	203d      	movs	r0, #61	@ 0x3d
 800c780:	f7f6 fbc2 	bl	8002f08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800c784:	2200      	movs	r2, #0
 800c786:	2105      	movs	r1, #5
 800c788:	203e      	movs	r0, #62	@ 0x3e
 800c78a:	f7f6 fba1 	bl	8002ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c78e:	203e      	movs	r0, #62	@ 0x3e
 800c790:	f7f6 fbba 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c794:	bf00      	nop
 800c796:	3738      	adds	r7, #56	@ 0x38
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	40028000 	.word	0x40028000
 800c7a0:	40023800 	.word	0x40023800
 800c7a4:	40020800 	.word	0x40020800
 800c7a8:	40020000 	.word	0x40020000
 800c7ac:	40020400 	.word	0x40020400
 800c7b0:	40021800 	.word	0x40021800

0800c7b4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c7b8:	4802      	ldr	r0, [pc, #8]	@ (800c7c4 <ETH_PHY_IO_Init+0x10>)
 800c7ba:	f7f7 ffdb 	bl	8004774 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	20005558 	.word	0x20005558

0800c7c8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	af00      	add	r7, sp, #0
  return 0;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	68f9      	ldr	r1, [r7, #12]
 800c7ea:	4807      	ldr	r0, [pc, #28]	@ (800c808 <ETH_PHY_IO_ReadReg+0x30>)
 800c7ec:	f7f7 fe1c 	bl	8004428 <HAL_ETH_ReadPHYRegister>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c7f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7fa:	e000      	b.n	800c7fe <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	20005558 	.word	0x20005558

0800c80c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	68f9      	ldr	r1, [r7, #12]
 800c81e:	4807      	ldr	r0, [pc, #28]	@ (800c83c <ETH_PHY_IO_WriteReg+0x30>)
 800c820:	f7f7 fe4d 	bl	80044be <HAL_ETH_WritePHYRegister>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d002      	beq.n	800c830 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c82a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c82e:	e000      	b.n	800c832 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	20005558 	.word	0x20005558

0800c840 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c844:	f7f5 fdd6 	bl	80023f4 <HAL_GetTick>
 800c848:	4603      	mov	r3, r0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	bd80      	pop	{r7, pc}
	...

0800c850 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b0a0      	sub	sp, #128	@ 0x80
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c858:	f107 0308 	add.w	r3, r7, #8
 800c85c:	2264      	movs	r2, #100	@ 0x64
 800c85e:	2100      	movs	r1, #0
 800c860:	4618      	mov	r0, r3
 800c862:	f014 f9ab 	bl	8020bbc <memset>
  int32_t PHYLinkState = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c86a:	2300      	movs	r3, #0
 800c86c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c86e:	2300      	movs	r3, #0
 800c870:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c872:	2300      	movs	r3, #0
 800c874:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c87a:	483a      	ldr	r0, [pc, #232]	@ (800c964 <ethernet_link_thread+0x114>)
 800c87c:	f7f5 fd12 	bl	80022a4 <LAN8742_GetLinkState>
 800c880:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c884:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c888:	089b      	lsrs	r3, r3, #2
 800c88a:	f003 0301 	and.w	r3, r3, #1
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00c      	beq.n	800c8ae <ethernet_link_thread+0x5e>
 800c894:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c896:	2b01      	cmp	r3, #1
 800c898:	dc09      	bgt.n	800c8ae <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c89a:	4833      	ldr	r0, [pc, #204]	@ (800c968 <ethernet_link_thread+0x118>)
 800c89c:	f7f7 fa7a 	bl	8003d94 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c8a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c8a2:	f008 f811 	bl	80148c8 <netif_set_down>
    netif_set_link_down(netif);
 800c8a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c8a8:	f008 f874 	bl	8014994 <netif_set_link_down>
 800c8ac:	e055      	b.n	800c95a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c8ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8b4:	f003 0304 	and.w	r3, r3, #4
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d14e      	bne.n	800c95a <ethernet_link_thread+0x10a>
 800c8bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	dd4b      	ble.n	800c95a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c8c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8c4:	3b02      	subs	r3, #2
 800c8c6:	2b03      	cmp	r3, #3
 800c8c8:	d82a      	bhi.n	800c920 <ethernet_link_thread+0xd0>
 800c8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c8d0 <ethernet_link_thread+0x80>)
 800c8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d0:	0800c8e1 	.word	0x0800c8e1
 800c8d4:	0800c8f3 	.word	0x0800c8f3
 800c8d8:	0800c903 	.word	0x0800c903
 800c8dc:	0800c913 	.word	0x0800c913
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c8e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c8e4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c8e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c8ea:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c8f0:	e017      	b.n	800c922 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c8f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c8fa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c900:	e00f      	b.n	800c922 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c902:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c906:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c908:	2300      	movs	r3, #0
 800c90a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c90c:	2301      	movs	r3, #1
 800c90e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c910:	e007      	b.n	800c922 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c912:	2300      	movs	r3, #0
 800c914:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c916:	2300      	movs	r3, #0
 800c918:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c91a:	2301      	movs	r3, #1
 800c91c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c91e:	e000      	b.n	800c922 <ethernet_link_thread+0xd2>
    default:
      break;
 800c920:	bf00      	nop
    }

    if(linkchanged)
 800c922:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c924:	2b00      	cmp	r3, #0
 800c926:	d018      	beq.n	800c95a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c928:	f107 0308 	add.w	r3, r7, #8
 800c92c:	4619      	mov	r1, r3
 800c92e:	480e      	ldr	r0, [pc, #56]	@ (800c968 <ethernet_link_thread+0x118>)
 800c930:	f7f7 fe0e 	bl	8004550 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c934:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c936:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c93a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c93c:	f107 0308 	add.w	r3, r7, #8
 800c940:	4619      	mov	r1, r3
 800c942:	4809      	ldr	r0, [pc, #36]	@ (800c968 <ethernet_link_thread+0x118>)
 800c944:	f7f7 fefb 	bl	800473e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c948:	4807      	ldr	r0, [pc, #28]	@ (800c968 <ethernet_link_thread+0x118>)
 800c94a:	f7f7 f9b3 	bl	8003cb4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c94e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c950:	f007 ff4e 	bl	80147f0 <netif_set_up>
      netif_set_link_up(netif);
 800c954:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c956:	f007 ffe9 	bl	801492c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c95a:	2064      	movs	r0, #100	@ 0x64
 800c95c:	f000 f9c2 	bl	800cce4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c960:	e78b      	b.n	800c87a <ethernet_link_thread+0x2a>
 800c962:	bf00      	nop
 800c964:	20005640 	.word	0x20005640
 800c968:	20005558 	.word	0x20005558

0800c96c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af02      	add	r7, sp, #8
 800c972:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c974:	4812      	ldr	r0, [pc, #72]	@ (800c9c0 <HAL_ETH_RxAllocateCallback+0x54>)
 800c976:	f007 fbb9 	bl	80140ec <memp_malloc_pool>
 800c97a:	60f8      	str	r0, [r7, #12]
  if (p)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d014      	beq.n	800c9ac <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f103 0220 	add.w	r2, r3, #32
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	4a0d      	ldr	r2, [pc, #52]	@ (800c9c4 <HAL_ETH_RxAllocateCallback+0x58>)
 800c990:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c99a:	9201      	str	r2, [sp, #4]
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2241      	movs	r2, #65	@ 0x41
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	f008 fa3d 	bl	8014e24 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c9aa:	e005      	b.n	800c9b8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c9ac:	4b06      	ldr	r3, [pc, #24]	@ (800c9c8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	601a      	str	r2, [r3, #0]
}
 800c9b8:	bf00      	nop
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	080262c8 	.word	0x080262c8
 800c9c4:	0800c5d5 	.word	0x0800c5d5
 800c9c8:	2000554c 	.word	0x2000554c

0800c9cc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b088      	sub	sp, #32
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
 800c9d8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	3b20      	subs	r3, #32
 800c9ea:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	887a      	ldrh	r2, [r7, #2]
 800c9fc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d103      	bne.n	800ca0e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	69fa      	ldr	r2, [r7, #28]
 800ca0a:	601a      	str	r2, [r3, #0]
 800ca0c:	e003      	b.n	800ca16 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	69fa      	ldr	r2, [r7, #28]
 800ca14:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	69fa      	ldr	r2, [r7, #28]
 800ca1a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	61fb      	str	r3, [r7, #28]
 800ca22:	e009      	b.n	800ca38 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	891a      	ldrh	r2, [r3, #8]
 800ca28:	887b      	ldrh	r3, [r7, #2]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	61fb      	str	r3, [r7, #28]
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d1f2      	bne.n	800ca24 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800ca3e:	887b      	ldrh	r3, [r7, #2]
 800ca40:	4619      	mov	r1, r3
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f7ff fb02 	bl	800c04c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800ca48:	bf00      	nop
 800ca4a:	3720      	adds	r7, #32
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f008 fbc5 	bl	80151e8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800ca5e:	bf00      	nop
 800ca60:	3708      	adds	r7, #8
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca66:	b480      	push	{r7}
 800ca68:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ca6a:	bf00      	nop
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca7a:	f3ef 8305 	mrs	r3, IPSR
 800ca7e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10f      	bne.n	800caa6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca86:	f3ef 8310 	mrs	r3, PRIMASK
 800ca8a:	607b      	str	r3, [r7, #4]
  return(result);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d105      	bne.n	800ca9e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ca92:	f3ef 8311 	mrs	r3, BASEPRI
 800ca96:	603b      	str	r3, [r7, #0]
  return(result);
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d007      	beq.n	800caae <osKernelInitialize+0x3a>
 800ca9e:	4b0e      	ldr	r3, [pc, #56]	@ (800cad8 <osKernelInitialize+0x64>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d103      	bne.n	800caae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800caa6:	f06f 0305 	mvn.w	r3, #5
 800caaa:	60fb      	str	r3, [r7, #12]
 800caac:	e00c      	b.n	800cac8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800caae:	4b0a      	ldr	r3, [pc, #40]	@ (800cad8 <osKernelInitialize+0x64>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d105      	bne.n	800cac2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cab6:	4b08      	ldr	r3, [pc, #32]	@ (800cad8 <osKernelInitialize+0x64>)
 800cab8:	2201      	movs	r2, #1
 800caba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	e002      	b.n	800cac8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cac6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cac8:	68fb      	ldr	r3, [r7, #12]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	20005660 	.word	0x20005660

0800cadc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cae2:	f3ef 8305 	mrs	r3, IPSR
 800cae6:	60bb      	str	r3, [r7, #8]
  return(result);
 800cae8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10f      	bne.n	800cb0e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caee:	f3ef 8310 	mrs	r3, PRIMASK
 800caf2:	607b      	str	r3, [r7, #4]
  return(result);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d105      	bne.n	800cb06 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cafa:	f3ef 8311 	mrs	r3, BASEPRI
 800cafe:	603b      	str	r3, [r7, #0]
  return(result);
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d007      	beq.n	800cb16 <osKernelStart+0x3a>
 800cb06:	4b0f      	ldr	r3, [pc, #60]	@ (800cb44 <osKernelStart+0x68>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b02      	cmp	r3, #2
 800cb0c:	d103      	bne.n	800cb16 <osKernelStart+0x3a>
    stat = osErrorISR;
 800cb0e:	f06f 0305 	mvn.w	r3, #5
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	e010      	b.n	800cb38 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cb16:	4b0b      	ldr	r3, [pc, #44]	@ (800cb44 <osKernelStart+0x68>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d109      	bne.n	800cb32 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb1e:	f7ff ffa2 	bl	800ca66 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb22:	4b08      	ldr	r3, [pc, #32]	@ (800cb44 <osKernelStart+0x68>)
 800cb24:	2202      	movs	r2, #2
 800cb26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb28:	f002 fd32 	bl	800f590 <vTaskStartScheduler>
      stat = osOK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	60fb      	str	r3, [r7, #12]
 800cb30:	e002      	b.n	800cb38 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cb32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cb38:	68fb      	ldr	r3, [r7, #12]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	20005660 	.word	0x20005660

0800cb48 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb4e:	f3ef 8305 	mrs	r3, IPSR
 800cb52:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb54:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10f      	bne.n	800cb7a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb5a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb5e:	607b      	str	r3, [r7, #4]
  return(result);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d105      	bne.n	800cb72 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb66:	f3ef 8311 	mrs	r3, BASEPRI
 800cb6a:	603b      	str	r3, [r7, #0]
  return(result);
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d007      	beq.n	800cb82 <osKernelGetTickCount+0x3a>
 800cb72:	4b08      	ldr	r3, [pc, #32]	@ (800cb94 <osKernelGetTickCount+0x4c>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d103      	bne.n	800cb82 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cb7a:	f002 fe3b 	bl	800f7f4 <xTaskGetTickCountFromISR>
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	e002      	b.n	800cb88 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800cb82:	f002 fe27 	bl	800f7d4 <xTaskGetTickCount>
 800cb86:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800cb88:	68fb      	ldr	r3, [r7, #12]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	20005660 	.word	0x20005660

0800cb98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b090      	sub	sp, #64	@ 0x40
 800cb9c:	af04      	add	r7, sp, #16
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cba4:	2300      	movs	r3, #0
 800cba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cba8:	f3ef 8305 	mrs	r3, IPSR
 800cbac:	61fb      	str	r3, [r7, #28]
  return(result);
 800cbae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f040 8090 	bne.w	800ccd6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbb6:	f3ef 8310 	mrs	r3, PRIMASK
 800cbba:	61bb      	str	r3, [r7, #24]
  return(result);
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d105      	bne.n	800cbce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cbc2:	f3ef 8311 	mrs	r3, BASEPRI
 800cbc6:	617b      	str	r3, [r7, #20]
  return(result);
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <osThreadNew+0x3e>
 800cbce:	4b44      	ldr	r3, [pc, #272]	@ (800cce0 <osThreadNew+0x148>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	d07f      	beq.n	800ccd6 <osThreadNew+0x13e>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d07c      	beq.n	800ccd6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800cbdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cbe2:	2318      	movs	r3, #24
 800cbe4:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800cbea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbee:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d045      	beq.n	800cc82 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d002      	beq.n	800cc04 <osThreadNew+0x6c>
        name = attr->name;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	699b      	ldr	r3, [r3, #24]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	699b      	ldr	r3, [r3, #24]
 800cc10:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d008      	beq.n	800cc2a <osThreadNew+0x92>
 800cc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1a:	2b38      	cmp	r3, #56	@ 0x38
 800cc1c:	d805      	bhi.n	800cc2a <osThreadNew+0x92>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	f003 0301 	and.w	r3, r3, #1
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <osThreadNew+0x96>
        return (NULL);
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	e054      	b.n	800ccd8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d003      	beq.n	800cc3e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	695b      	ldr	r3, [r3, #20]
 800cc3a:	089b      	lsrs	r3, r3, #2
 800cc3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00e      	beq.n	800cc64 <osThreadNew+0xcc>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	2ba7      	cmp	r3, #167	@ 0xa7
 800cc4c:	d90a      	bls.n	800cc64 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d006      	beq.n	800cc64 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	695b      	ldr	r3, [r3, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d002      	beq.n	800cc64 <osThreadNew+0xcc>
        mem = 1;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	623b      	str	r3, [r7, #32]
 800cc62:	e010      	b.n	800cc86 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10c      	bne.n	800cc86 <osThreadNew+0xee>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d108      	bne.n	800cc86 <osThreadNew+0xee>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d104      	bne.n	800cc86 <osThreadNew+0xee>
          mem = 0;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	623b      	str	r3, [r7, #32]
 800cc80:	e001      	b.n	800cc86 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d110      	bne.n	800ccae <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc94:	9202      	str	r2, [sp, #8]
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f002 fa76 	bl	800f194 <xTaskCreateStatic>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	613b      	str	r3, [r7, #16]
 800ccac:	e013      	b.n	800ccd6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ccae:	6a3b      	ldr	r3, [r7, #32]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d110      	bne.n	800ccd6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ccb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	f107 0310 	add.w	r3, r7, #16
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f002 faca 	bl	800f260 <xTaskCreate>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d001      	beq.n	800ccd6 <osThreadNew+0x13e>
          hTask = NULL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ccd6:	693b      	ldr	r3, [r7, #16]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3730      	adds	r7, #48	@ 0x30
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	20005660 	.word	0x20005660

0800cce4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccec:	f3ef 8305 	mrs	r3, IPSR
 800ccf0:	613b      	str	r3, [r7, #16]
  return(result);
 800ccf2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10f      	bne.n	800cd18 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccf8:	f3ef 8310 	mrs	r3, PRIMASK
 800ccfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d105      	bne.n	800cd10 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd04:	f3ef 8311 	mrs	r3, BASEPRI
 800cd08:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d007      	beq.n	800cd20 <osDelay+0x3c>
 800cd10:	4b0a      	ldr	r3, [pc, #40]	@ (800cd3c <osDelay+0x58>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d103      	bne.n	800cd20 <osDelay+0x3c>
    stat = osErrorISR;
 800cd18:	f06f 0305 	mvn.w	r3, #5
 800cd1c:	617b      	str	r3, [r7, #20]
 800cd1e:	e007      	b.n	800cd30 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f002 fbf8 	bl	800f520 <vTaskDelay>
    }
  }

  return (stat);
 800cd30:	697b      	ldr	r3, [r7, #20]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20005660 	.word	0x20005660

0800cd40 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd4c:	f3ef 8305 	mrs	r3, IPSR
 800cd50:	617b      	str	r3, [r7, #20]
  return(result);
 800cd52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d13d      	bne.n	800cdd4 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd58:	f3ef 8310 	mrs	r3, PRIMASK
 800cd5c:	613b      	str	r3, [r7, #16]
  return(result);
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d105      	bne.n	800cd70 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd64:	f3ef 8311 	mrs	r3, BASEPRI
 800cd68:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d003      	beq.n	800cd78 <osEventFlagsNew+0x38>
 800cd70:	4b1b      	ldr	r3, [pc, #108]	@ (800cde0 <osEventFlagsNew+0xa0>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b02      	cmp	r3, #2
 800cd76:	d02d      	beq.n	800cdd4 <osEventFlagsNew+0x94>
    mem = -1;
 800cd78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd7c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d015      	beq.n	800cdb0 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d006      	beq.n	800cd9a <osEventFlagsNew+0x5a>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	2b1f      	cmp	r3, #31
 800cd92:	d902      	bls.n	800cd9a <osEventFlagsNew+0x5a>
        mem = 1;
 800cd94:	2301      	movs	r3, #1
 800cd96:	61bb      	str	r3, [r7, #24]
 800cd98:	e00c      	b.n	800cdb4 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d108      	bne.n	800cdb4 <osEventFlagsNew+0x74>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d104      	bne.n	800cdb4 <osEventFlagsNew+0x74>
          mem = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	61bb      	str	r3, [r7, #24]
 800cdae:	e001      	b.n	800cdb4 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d106      	bne.n	800cdc8 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f000 fdbc 	bl	800d93c <xEventGroupCreateStatic>
 800cdc4:	61f8      	str	r0, [r7, #28]
 800cdc6:	e005      	b.n	800cdd4 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d102      	bne.n	800cdd4 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800cdce:	f000 fdf2 	bl	800d9b6 <xEventGroupCreate>
 800cdd2:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800cdd4:	69fb      	ldr	r3, [r7, #28]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3720      	adds	r7, #32
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	20005660 	.word	0x20005660

0800cde4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b088      	sub	sp, #32
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d003      	beq.n	800ce00 <osEventFlagsSet+0x1c>
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cdfe:	d303      	bcc.n	800ce08 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800ce00:	f06f 0303 	mvn.w	r3, #3
 800ce04:	61fb      	str	r3, [r7, #28]
 800ce06:	e03a      	b.n	800ce7e <osEventFlagsSet+0x9a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce08:	f3ef 8305 	mrs	r3, IPSR
 800ce0c:	617b      	str	r3, [r7, #20]
  return(result);
 800ce0e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10f      	bne.n	800ce34 <osEventFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce14:	f3ef 8310 	mrs	r3, PRIMASK
 800ce18:	613b      	str	r3, [r7, #16]
  return(result);
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d105      	bne.n	800ce2c <osEventFlagsSet+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce20:	f3ef 8311 	mrs	r3, BASEPRI
 800ce24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d021      	beq.n	800ce70 <osEventFlagsSet+0x8c>
 800ce2c:	4b16      	ldr	r3, [pc, #88]	@ (800ce88 <osEventFlagsSet+0xa4>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d11d      	bne.n	800ce70 <osEventFlagsSet+0x8c>
    yield = pdFALSE;
 800ce34:	2300      	movs	r3, #0
 800ce36:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800ce38:	f107 0308 	add.w	r3, r7, #8
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	69b8      	ldr	r0, [r7, #24]
 800ce42:	f000 ff6d 	bl	800dd20 <xEventGroupSetBitsFromISR>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d103      	bne.n	800ce54 <osEventFlagsSet+0x70>
      rflags = (uint32_t)osErrorResource;
 800ce4c:	f06f 0302 	mvn.w	r3, #2
 800ce50:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800ce52:	e013      	b.n	800ce7c <osEventFlagsSet+0x98>
    } else {
      rflags = flags;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00e      	beq.n	800ce7c <osEventFlagsSet+0x98>
 800ce5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce8c <osEventFlagsSet+0xa8>)
 800ce60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800ce6e:	e005      	b.n	800ce7c <osEventFlagsSet+0x98>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800ce70:	6839      	ldr	r1, [r7, #0]
 800ce72:	69b8      	ldr	r0, [r7, #24]
 800ce74:	f000 fe94 	bl	800dba0 <xEventGroupSetBits>
 800ce78:	61f8      	str	r0, [r7, #28]
 800ce7a:	e000      	b.n	800ce7e <osEventFlagsSet+0x9a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800ce7c:	bf00      	nop
  }

  return (rflags);
 800ce7e:	69fb      	ldr	r3, [r7, #28]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3720      	adds	r7, #32
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	20005660 	.word	0x20005660
 800ce8c:	e000ed04 	.word	0xe000ed04

0800ce90 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08e      	sub	sp, #56	@ 0x38
 800ce94:	af02      	add	r7, sp, #8
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d003      	beq.n	800ceb0 <osEventFlagsWait+0x20>
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ceae:	d303      	bcc.n	800ceb8 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800ceb0:	f06f 0303 	mvn.w	r3, #3
 800ceb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceb6:	e059      	b.n	800cf6c <osEventFlagsWait+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceb8:	f3ef 8305 	mrs	r3, IPSR
 800cebc:	61fb      	str	r3, [r7, #28]
  return(result);
 800cebe:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10f      	bne.n	800cee4 <osEventFlagsWait+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cec4:	f3ef 8310 	mrs	r3, PRIMASK
 800cec8:	61bb      	str	r3, [r7, #24]
  return(result);
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d105      	bne.n	800cedc <osEventFlagsWait+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ced0:	f3ef 8311 	mrs	r3, BASEPRI
 800ced4:	617b      	str	r3, [r7, #20]
  return(result);
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d007      	beq.n	800ceec <osEventFlagsWait+0x5c>
 800cedc:	4b26      	ldr	r3, [pc, #152]	@ (800cf78 <osEventFlagsWait+0xe8>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d103      	bne.n	800ceec <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorISR;
 800cee4:	f06f 0305 	mvn.w	r3, #5
 800cee8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceea:	e03f      	b.n	800cf6c <osEventFlagsWait+0xdc>
  }
  else {
    if (options & osFlagsWaitAll) {
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f003 0301 	and.w	r3, r3, #1
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d002      	beq.n	800cefc <osEventFlagsWait+0x6c>
      wait_all = pdTRUE;
 800cef6:	2301      	movs	r3, #1
 800cef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cefa:	e001      	b.n	800cf00 <osEventFlagsWait+0x70>
    } else {
      wait_all = pdFAIL;
 800cefc:	2300      	movs	r3, #0
 800cefe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if (options & osFlagsNoClear) {
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f003 0302 	and.w	r3, r3, #2
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d002      	beq.n	800cf10 <osEventFlagsWait+0x80>
      exit_clr = pdFAIL;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf0e:	e001      	b.n	800cf14 <osEventFlagsWait+0x84>
    } else {
      exit_clr = pdTRUE;
 800cf10:	2301      	movs	r3, #1
 800cf12:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf1c:	68b9      	ldr	r1, [r7, #8]
 800cf1e:	6a38      	ldr	r0, [r7, #32]
 800cf20:	f000 fd64 	bl	800d9ec <xEventGroupWaitBits>
 800cf24:	6278      	str	r0, [r7, #36]	@ 0x24

    if (options & osFlagsWaitAll) {
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f003 0301 	and.w	r3, r3, #1
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00e      	beq.n	800cf4e <osEventFlagsWait+0xbe>
      if (flags != rflags) {
 800cf30:	68ba      	ldr	r2, [r7, #8]
 800cf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d019      	beq.n	800cf6c <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 800cf3e:	f06f 0301 	mvn.w	r3, #1
 800cf42:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf44:	e012      	b.n	800cf6c <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800cf46:	f06f 0302 	mvn.w	r3, #2
 800cf4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf4c:	e00e      	b.n	800cf6c <osEventFlagsWait+0xdc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf52:	4013      	ands	r3, r2
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d109      	bne.n	800cf6c <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d003      	beq.n	800cf66 <osEventFlagsWait+0xd6>
          rflags = (uint32_t)osErrorTimeout;
 800cf5e:	f06f 0301 	mvn.w	r3, #1
 800cf62:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf64:	e002      	b.n	800cf6c <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800cf66:	f06f 0302 	mvn.w	r3, #2
 800cf6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
  }

  return (rflags);
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3730      	adds	r7, #48	@ 0x30
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	20005660 	.word	0x20005660

0800cf7c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b08a      	sub	sp, #40	@ 0x28
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cf84:	2300      	movs	r3, #0
 800cf86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf88:	f3ef 8305 	mrs	r3, IPSR
 800cf8c:	613b      	str	r3, [r7, #16]
  return(result);
 800cf8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f040 8085 	bne.w	800d0a0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf96:	f3ef 8310 	mrs	r3, PRIMASK
 800cf9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d105      	bne.n	800cfae <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfa2:	f3ef 8311 	mrs	r3, BASEPRI
 800cfa6:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <osMutexNew+0x3a>
 800cfae:	4b3f      	ldr	r3, [pc, #252]	@ (800d0ac <osMutexNew+0x130>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	d074      	beq.n	800d0a0 <osMutexNew+0x124>
    if (attr != NULL) {
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <osMutexNew+0x48>
      type = attr->attr_bits;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	623b      	str	r3, [r7, #32]
 800cfc2:	e001      	b.n	800cfc8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cfc8:	6a3b      	ldr	r3, [r7, #32]
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d002      	beq.n	800cfd8 <osMutexNew+0x5c>
      rmtx = 1U;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	61fb      	str	r3, [r7, #28]
 800cfd6:	e001      	b.n	800cfdc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	f003 0308 	and.w	r3, r3, #8
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d15c      	bne.n	800d0a0 <osMutexNew+0x124>
      mem = -1;
 800cfe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfea:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d015      	beq.n	800d01e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d006      	beq.n	800d008 <osMutexNew+0x8c>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	2b4f      	cmp	r3, #79	@ 0x4f
 800d000:	d902      	bls.n	800d008 <osMutexNew+0x8c>
          mem = 1;
 800d002:	2301      	movs	r3, #1
 800d004:	61bb      	str	r3, [r7, #24]
 800d006:	e00c      	b.n	800d022 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d108      	bne.n	800d022 <osMutexNew+0xa6>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d104      	bne.n	800d022 <osMutexNew+0xa6>
            mem = 0;
 800d018:	2300      	movs	r3, #0
 800d01a:	61bb      	str	r3, [r7, #24]
 800d01c:	e001      	b.n	800d022 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	2b01      	cmp	r3, #1
 800d026:	d112      	bne.n	800d04e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d007      	beq.n	800d03e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	4619      	mov	r1, r3
 800d034:	2004      	movs	r0, #4
 800d036:	f001 f8c6 	bl	800e1c6 <xQueueCreateMutexStatic>
 800d03a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d03c:	e016      	b.n	800d06c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	4619      	mov	r1, r3
 800d044:	2001      	movs	r0, #1
 800d046:	f001 f8be 	bl	800e1c6 <xQueueCreateMutexStatic>
 800d04a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d04c:	e00e      	b.n	800d06c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10b      	bne.n	800d06c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d004      	beq.n	800d064 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800d05a:	2004      	movs	r0, #4
 800d05c:	f001 f89b 	bl	800e196 <xQueueCreateMutex>
 800d060:	6278      	str	r0, [r7, #36]	@ 0x24
 800d062:	e003      	b.n	800d06c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800d064:	2001      	movs	r0, #1
 800d066:	f001 f896 	bl	800e196 <xQueueCreateMutex>
 800d06a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00c      	beq.n	800d08c <osMutexNew+0x110>
        if (attr != NULL) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d003      	beq.n	800d080 <osMutexNew+0x104>
          name = attr->name;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	617b      	str	r3, [r7, #20]
 800d07e:	e001      	b.n	800d084 <osMutexNew+0x108>
        } else {
          name = NULL;
 800d080:	2300      	movs	r3, #0
 800d082:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800d084:	6979      	ldr	r1, [r7, #20]
 800d086:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d088:	f001 fffc 	bl	800f084 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d006      	beq.n	800d0a0 <osMutexNew+0x124>
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d003      	beq.n	800d0a0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09a:	f043 0301 	orr.w	r3, r3, #1
 800d09e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3728      	adds	r7, #40	@ 0x28
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20005660 	.word	0x20005660

0800d0b0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b088      	sub	sp, #32
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f023 0301 	bic.w	r3, r3, #1
 800d0c0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f003 0301 	and.w	r3, r3, #1
 800d0c8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0ce:	f3ef 8305 	mrs	r3, IPSR
 800d0d2:	613b      	str	r3, [r7, #16]
  return(result);
 800d0d4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10f      	bne.n	800d0fa <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0da:	f3ef 8310 	mrs	r3, PRIMASK
 800d0de:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d105      	bne.n	800d0f2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0e6:	f3ef 8311 	mrs	r3, BASEPRI
 800d0ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d007      	beq.n	800d102 <osMutexAcquire+0x52>
 800d0f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d168 <osMutexAcquire+0xb8>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d103      	bne.n	800d102 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800d0fa:	f06f 0305 	mvn.w	r3, #5
 800d0fe:	61fb      	str	r3, [r7, #28]
 800d100:	e02c      	b.n	800d15c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d103      	bne.n	800d110 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800d108:	f06f 0303 	mvn.w	r3, #3
 800d10c:	61fb      	str	r3, [r7, #28]
 800d10e:	e025      	b.n	800d15c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d011      	beq.n	800d13a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d116:	6839      	ldr	r1, [r7, #0]
 800d118:	69b8      	ldr	r0, [r7, #24]
 800d11a:	f001 f8a6 	bl	800e26a <xQueueTakeMutexRecursive>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b01      	cmp	r3, #1
 800d122:	d01b      	beq.n	800d15c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d003      	beq.n	800d132 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800d12a:	f06f 0301 	mvn.w	r3, #1
 800d12e:	61fb      	str	r3, [r7, #28]
 800d130:	e014      	b.n	800d15c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d132:	f06f 0302 	mvn.w	r3, #2
 800d136:	61fb      	str	r3, [r7, #28]
 800d138:	e010      	b.n	800d15c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d13a:	6839      	ldr	r1, [r7, #0]
 800d13c:	69b8      	ldr	r0, [r7, #24]
 800d13e:	f001 fc71 	bl	800ea24 <xQueueSemaphoreTake>
 800d142:	4603      	mov	r3, r0
 800d144:	2b01      	cmp	r3, #1
 800d146:	d009      	beq.n	800d15c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800d14e:	f06f 0301 	mvn.w	r3, #1
 800d152:	61fb      	str	r3, [r7, #28]
 800d154:	e002      	b.n	800d15c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d156:	f06f 0302 	mvn.w	r3, #2
 800d15a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d15c:	69fb      	ldr	r3, [r7, #28]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3720      	adds	r7, #32
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20005660 	.word	0x20005660

0800d16c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b088      	sub	sp, #32
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f023 0301 	bic.w	r3, r3, #1
 800d17a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f003 0301 	and.w	r3, r3, #1
 800d182:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d184:	2300      	movs	r3, #0
 800d186:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d188:	f3ef 8305 	mrs	r3, IPSR
 800d18c:	613b      	str	r3, [r7, #16]
  return(result);
 800d18e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10f      	bne.n	800d1b4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d194:	f3ef 8310 	mrs	r3, PRIMASK
 800d198:	60fb      	str	r3, [r7, #12]
  return(result);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d105      	bne.n	800d1ac <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1a0:	f3ef 8311 	mrs	r3, BASEPRI
 800d1a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d007      	beq.n	800d1bc <osMutexRelease+0x50>
 800d1ac:	4b16      	ldr	r3, [pc, #88]	@ (800d208 <osMutexRelease+0x9c>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	d103      	bne.n	800d1bc <osMutexRelease+0x50>
    stat = osErrorISR;
 800d1b4:	f06f 0305 	mvn.w	r3, #5
 800d1b8:	61fb      	str	r3, [r7, #28]
 800d1ba:	e01f      	b.n	800d1fc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d103      	bne.n	800d1ca <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800d1c2:	f06f 0303 	mvn.w	r3, #3
 800d1c6:	61fb      	str	r3, [r7, #28]
 800d1c8:	e018      	b.n	800d1fc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d009      	beq.n	800d1e4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d1d0:	69b8      	ldr	r0, [r7, #24]
 800d1d2:	f001 f813 	bl	800e1fc <xQueueGiveMutexRecursive>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d00f      	beq.n	800d1fc <osMutexRelease+0x90>
        stat = osErrorResource;
 800d1dc:	f06f 0302 	mvn.w	r3, #2
 800d1e0:	61fb      	str	r3, [r7, #28]
 800d1e2:	e00b      	b.n	800d1fc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	69b8      	ldr	r0, [r7, #24]
 800d1ec:	f001 f8ec 	bl	800e3c8 <xQueueGenericSend>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d002      	beq.n	800d1fc <osMutexRelease+0x90>
        stat = osErrorResource;
 800d1f6:	f06f 0302 	mvn.w	r3, #2
 800d1fa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d1fc:	69fb      	ldr	r3, [r7, #28]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3720      	adds	r7, #32
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	20005660 	.word	0x20005660

0800d20c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b08c      	sub	sp, #48	@ 0x30
 800d210:	af02      	add	r7, sp, #8
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d218:	2300      	movs	r3, #0
 800d21a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d21c:	f3ef 8305 	mrs	r3, IPSR
 800d220:	61bb      	str	r3, [r7, #24]
  return(result);
 800d222:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d224:	2b00      	cmp	r3, #0
 800d226:	f040 8086 	bne.w	800d336 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d22a:	f3ef 8310 	mrs	r3, PRIMASK
 800d22e:	617b      	str	r3, [r7, #20]
  return(result);
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d105      	bne.n	800d242 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d236:	f3ef 8311 	mrs	r3, BASEPRI
 800d23a:	613b      	str	r3, [r7, #16]
  return(result);
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d003      	beq.n	800d24a <osSemaphoreNew+0x3e>
 800d242:	4b3f      	ldr	r3, [pc, #252]	@ (800d340 <osSemaphoreNew+0x134>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b02      	cmp	r3, #2
 800d248:	d075      	beq.n	800d336 <osSemaphoreNew+0x12a>
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d072      	beq.n	800d336 <osSemaphoreNew+0x12a>
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	429a      	cmp	r2, r3
 800d256:	d86e      	bhi.n	800d336 <osSemaphoreNew+0x12a>
    mem = -1;
 800d258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d25c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d015      	beq.n	800d290 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d006      	beq.n	800d27a <osSemaphoreNew+0x6e>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	2b4f      	cmp	r3, #79	@ 0x4f
 800d272:	d902      	bls.n	800d27a <osSemaphoreNew+0x6e>
        mem = 1;
 800d274:	2301      	movs	r3, #1
 800d276:	623b      	str	r3, [r7, #32]
 800d278:	e00c      	b.n	800d294 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d108      	bne.n	800d294 <osSemaphoreNew+0x88>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d104      	bne.n	800d294 <osSemaphoreNew+0x88>
          mem = 0;
 800d28a:	2300      	movs	r3, #0
 800d28c:	623b      	str	r3, [r7, #32]
 800d28e:	e001      	b.n	800d294 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d290:	2300      	movs	r3, #0
 800d292:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d29a:	d04c      	beq.n	800d336 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d128      	bne.n	800d2f4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d2a2:	6a3b      	ldr	r3, [r7, #32]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d10a      	bne.n	800d2be <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	2203      	movs	r2, #3
 800d2ae:	9200      	str	r2, [sp, #0]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	2100      	movs	r1, #0
 800d2b4:	2001      	movs	r0, #1
 800d2b6:	f000 fe67 	bl	800df88 <xQueueGenericCreateStatic>
 800d2ba:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2bc:	e005      	b.n	800d2ca <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d2be:	2203      	movs	r2, #3
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	2001      	movs	r0, #1
 800d2c4:	f000 fee7 	bl	800e096 <xQueueGenericCreate>
 800d2c8:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d022      	beq.n	800d316 <osSemaphoreNew+0x10a>
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d01f      	beq.n	800d316 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	2200      	movs	r2, #0
 800d2da:	2100      	movs	r1, #0
 800d2dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d2de:	f001 f873 	bl	800e3c8 <xQueueGenericSend>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d016      	beq.n	800d316 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d2e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d2ea:	f001 fd7d 	bl	800ede8 <vQueueDelete>
            hSemaphore = NULL;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2f2:	e010      	b.n	800d316 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d2f4:	6a3b      	ldr	r3, [r7, #32]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d108      	bne.n	800d30c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	461a      	mov	r2, r3
 800d300:	68b9      	ldr	r1, [r7, #8]
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f000 ffea 	bl	800e2dc <xQueueCreateCountingSemaphoreStatic>
 800d308:	6278      	str	r0, [r7, #36]	@ 0x24
 800d30a:	e004      	b.n	800d316 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d30c:	68b9      	ldr	r1, [r7, #8]
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f001 f821 	bl	800e356 <xQueueCreateCountingSemaphore>
 800d314:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00c      	beq.n	800d336 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d003      	beq.n	800d32a <osSemaphoreNew+0x11e>
          name = attr->name;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	61fb      	str	r3, [r7, #28]
 800d328:	e001      	b.n	800d32e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d32e:	69f9      	ldr	r1, [r7, #28]
 800d330:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d332:	f001 fea7 	bl	800f084 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3728      	adds	r7, #40	@ 0x28
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	20005660 	.word	0x20005660

0800d344 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d344:	b580      	push	{r7, lr}
 800d346:	b088      	sub	sp, #32
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d352:	2300      	movs	r3, #0
 800d354:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d103      	bne.n	800d364 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d35c:	f06f 0303 	mvn.w	r3, #3
 800d360:	61fb      	str	r3, [r7, #28]
 800d362:	e04b      	b.n	800d3fc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d364:	f3ef 8305 	mrs	r3, IPSR
 800d368:	617b      	str	r3, [r7, #20]
  return(result);
 800d36a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d10f      	bne.n	800d390 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d370:	f3ef 8310 	mrs	r3, PRIMASK
 800d374:	613b      	str	r3, [r7, #16]
  return(result);
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d105      	bne.n	800d388 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d37c:	f3ef 8311 	mrs	r3, BASEPRI
 800d380:	60fb      	str	r3, [r7, #12]
  return(result);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d026      	beq.n	800d3d6 <osSemaphoreAcquire+0x92>
 800d388:	4b1f      	ldr	r3, [pc, #124]	@ (800d408 <osSemaphoreAcquire+0xc4>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	d122      	bne.n	800d3d6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d003      	beq.n	800d39e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d396:	f06f 0303 	mvn.w	r3, #3
 800d39a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d39c:	e02d      	b.n	800d3fa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d3a2:	f107 0308 	add.w	r3, r7, #8
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	69b8      	ldr	r0, [r7, #24]
 800d3ac:	f001 fc52 	bl	800ec54 <xQueueReceiveFromISR>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d003      	beq.n	800d3be <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d3b6:	f06f 0302 	mvn.w	r3, #2
 800d3ba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d3bc:	e01d      	b.n	800d3fa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d01a      	beq.n	800d3fa <osSemaphoreAcquire+0xb6>
 800d3c4:	4b11      	ldr	r3, [pc, #68]	@ (800d40c <osSemaphoreAcquire+0xc8>)
 800d3c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3ca:	601a      	str	r2, [r3, #0]
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d3d4:	e011      	b.n	800d3fa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d3d6:	6839      	ldr	r1, [r7, #0]
 800d3d8:	69b8      	ldr	r0, [r7, #24]
 800d3da:	f001 fb23 	bl	800ea24 <xQueueSemaphoreTake>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d00b      	beq.n	800d3fc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d003      	beq.n	800d3f2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d3ea:	f06f 0301 	mvn.w	r3, #1
 800d3ee:	61fb      	str	r3, [r7, #28]
 800d3f0:	e004      	b.n	800d3fc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d3f2:	f06f 0302 	mvn.w	r3, #2
 800d3f6:	61fb      	str	r3, [r7, #28]
 800d3f8:	e000      	b.n	800d3fc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d3fa:	bf00      	nop
      }
    }
  }

  return (stat);
 800d3fc:	69fb      	ldr	r3, [r7, #28]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3720      	adds	r7, #32
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	20005660 	.word	0x20005660
 800d40c:	e000ed04 	.word	0xe000ed04

0800d410 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d410:	b580      	push	{r7, lr}
 800d412:	b088      	sub	sp, #32
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d420:	69bb      	ldr	r3, [r7, #24]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d103      	bne.n	800d42e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d426:	f06f 0303 	mvn.w	r3, #3
 800d42a:	61fb      	str	r3, [r7, #28]
 800d42c:	e03e      	b.n	800d4ac <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d42e:	f3ef 8305 	mrs	r3, IPSR
 800d432:	617b      	str	r3, [r7, #20]
  return(result);
 800d434:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10f      	bne.n	800d45a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d43a:	f3ef 8310 	mrs	r3, PRIMASK
 800d43e:	613b      	str	r3, [r7, #16]
  return(result);
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d105      	bne.n	800d452 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d446:	f3ef 8311 	mrs	r3, BASEPRI
 800d44a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d01e      	beq.n	800d490 <osSemaphoreRelease+0x80>
 800d452:	4b19      	ldr	r3, [pc, #100]	@ (800d4b8 <osSemaphoreRelease+0xa8>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b02      	cmp	r3, #2
 800d458:	d11a      	bne.n	800d490 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d45a:	2300      	movs	r3, #0
 800d45c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d45e:	f107 0308 	add.w	r3, r7, #8
 800d462:	4619      	mov	r1, r3
 800d464:	69b8      	ldr	r0, [r7, #24]
 800d466:	f001 f95c 	bl	800e722 <xQueueGiveFromISR>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d003      	beq.n	800d478 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d470:	f06f 0302 	mvn.w	r3, #2
 800d474:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d476:	e018      	b.n	800d4aa <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d015      	beq.n	800d4aa <osSemaphoreRelease+0x9a>
 800d47e:	4b0f      	ldr	r3, [pc, #60]	@ (800d4bc <osSemaphoreRelease+0xac>)
 800d480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d48e:	e00c      	b.n	800d4aa <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d490:	2300      	movs	r3, #0
 800d492:	2200      	movs	r2, #0
 800d494:	2100      	movs	r1, #0
 800d496:	69b8      	ldr	r0, [r7, #24]
 800d498:	f000 ff96 	bl	800e3c8 <xQueueGenericSend>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d004      	beq.n	800d4ac <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d4a2:	f06f 0302 	mvn.w	r3, #2
 800d4a6:	61fb      	str	r3, [r7, #28]
 800d4a8:	e000      	b.n	800d4ac <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d4aa:	bf00      	nop
    }
  }

  return (stat);
 800d4ac:	69fb      	ldr	r3, [r7, #28]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3720      	adds	r7, #32
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	20005660 	.word	0x20005660
 800d4bc:	e000ed04 	.word	0xe000ed04

0800d4c0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4cc:	f3ef 8305 	mrs	r3, IPSR
 800d4d0:	617b      	str	r3, [r7, #20]
  return(result);
 800d4d2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d10f      	bne.n	800d4f8 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4d8:	f3ef 8310 	mrs	r3, PRIMASK
 800d4dc:	613b      	str	r3, [r7, #16]
  return(result);
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d105      	bne.n	800d4f0 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4e4:	f3ef 8311 	mrs	r3, BASEPRI
 800d4e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d007      	beq.n	800d500 <osSemaphoreDelete+0x40>
 800d4f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d528 <osSemaphoreDelete+0x68>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d103      	bne.n	800d500 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d4f8:	f06f 0305 	mvn.w	r3, #5
 800d4fc:	61fb      	str	r3, [r7, #28]
 800d4fe:	e00e      	b.n	800d51e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d103      	bne.n	800d50e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d506:	f06f 0303 	mvn.w	r3, #3
 800d50a:	61fb      	str	r3, [r7, #28]
 800d50c:	e007      	b.n	800d51e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d50e:	69b8      	ldr	r0, [r7, #24]
 800d510:	f001 fde2 	bl	800f0d8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d514:	2300      	movs	r3, #0
 800d516:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d518:	69b8      	ldr	r0, [r7, #24]
 800d51a:	f001 fc65 	bl	800ede8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d51e:	69fb      	ldr	r3, [r7, #28]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3720      	adds	r7, #32
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	20005660 	.word	0x20005660

0800d52c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b08c      	sub	sp, #48	@ 0x30
 800d530:	af02      	add	r7, sp, #8
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d538:	2300      	movs	r3, #0
 800d53a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d53c:	f3ef 8305 	mrs	r3, IPSR
 800d540:	61bb      	str	r3, [r7, #24]
  return(result);
 800d542:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d544:	2b00      	cmp	r3, #0
 800d546:	d16f      	bne.n	800d628 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d548:	f3ef 8310 	mrs	r3, PRIMASK
 800d54c:	617b      	str	r3, [r7, #20]
  return(result);
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d105      	bne.n	800d560 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d554:	f3ef 8311 	mrs	r3, BASEPRI
 800d558:	613b      	str	r3, [r7, #16]
  return(result);
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d003      	beq.n	800d568 <osMessageQueueNew+0x3c>
 800d560:	4b34      	ldr	r3, [pc, #208]	@ (800d634 <osMessageQueueNew+0x108>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b02      	cmp	r3, #2
 800d566:	d05f      	beq.n	800d628 <osMessageQueueNew+0xfc>
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d05c      	beq.n	800d628 <osMessageQueueNew+0xfc>
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d059      	beq.n	800d628 <osMessageQueueNew+0xfc>
    mem = -1;
 800d574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d578:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d029      	beq.n	800d5d4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d012      	beq.n	800d5ae <osMessageQueueNew+0x82>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	2b4f      	cmp	r3, #79	@ 0x4f
 800d58e:	d90e      	bls.n	800d5ae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00a      	beq.n	800d5ae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	695a      	ldr	r2, [r3, #20]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	68b9      	ldr	r1, [r7, #8]
 800d5a0:	fb01 f303 	mul.w	r3, r1, r3
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d302      	bcc.n	800d5ae <osMessageQueueNew+0x82>
        mem = 1;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	623b      	str	r3, [r7, #32]
 800d5ac:	e014      	b.n	800d5d8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d110      	bne.n	800d5d8 <osMessageQueueNew+0xac>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10c      	bne.n	800d5d8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d108      	bne.n	800d5d8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d104      	bne.n	800d5d8 <osMessageQueueNew+0xac>
          mem = 0;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	623b      	str	r3, [r7, #32]
 800d5d2:	e001      	b.n	800d5d8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d10b      	bne.n	800d5f6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	691a      	ldr	r2, [r3, #16]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	9100      	str	r1, [sp, #0]
 800d5ea:	68b9      	ldr	r1, [r7, #8]
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f000 fccb 	bl	800df88 <xQueueGenericCreateStatic>
 800d5f2:	6278      	str	r0, [r7, #36]	@ 0x24
 800d5f4:	e008      	b.n	800d608 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d5f6:	6a3b      	ldr	r3, [r7, #32]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d105      	bne.n	800d608 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	68b9      	ldr	r1, [r7, #8]
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f000 fd48 	bl	800e096 <xQueueGenericCreate>
 800d606:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00c      	beq.n	800d628 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <osMessageQueueNew+0xf0>
        name = attr->name;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	61fb      	str	r3, [r7, #28]
 800d61a:	e001      	b.n	800d620 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d61c:	2300      	movs	r3, #0
 800d61e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d620:	69f9      	ldr	r1, [r7, #28]
 800d622:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d624:	f001 fd2e 	bl	800f084 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3728      	adds	r7, #40	@ 0x28
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	20005660 	.word	0x20005660

0800d638 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08a      	sub	sp, #40	@ 0x28
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	603b      	str	r3, [r7, #0]
 800d644:	4613      	mov	r3, r2
 800d646:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d650:	f3ef 8305 	mrs	r3, IPSR
 800d654:	61fb      	str	r3, [r7, #28]
  return(result);
 800d656:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10f      	bne.n	800d67c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d65c:	f3ef 8310 	mrs	r3, PRIMASK
 800d660:	61bb      	str	r3, [r7, #24]
  return(result);
 800d662:	69bb      	ldr	r3, [r7, #24]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d105      	bne.n	800d674 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d668:	f3ef 8311 	mrs	r3, BASEPRI
 800d66c:	617b      	str	r3, [r7, #20]
  return(result);
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d02c      	beq.n	800d6ce <osMessageQueuePut+0x96>
 800d674:	4b28      	ldr	r3, [pc, #160]	@ (800d718 <osMessageQueuePut+0xe0>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b02      	cmp	r3, #2
 800d67a:	d128      	bne.n	800d6ce <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d67c:	6a3b      	ldr	r3, [r7, #32]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d005      	beq.n	800d68e <osMessageQueuePut+0x56>
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d002      	beq.n	800d68e <osMessageQueuePut+0x56>
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d003      	beq.n	800d696 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d68e:	f06f 0303 	mvn.w	r3, #3
 800d692:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d694:	e039      	b.n	800d70a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d696:	2300      	movs	r3, #0
 800d698:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d69a:	f107 0210 	add.w	r2, r7, #16
 800d69e:	2300      	movs	r3, #0
 800d6a0:	68b9      	ldr	r1, [r7, #8]
 800d6a2:	6a38      	ldr	r0, [r7, #32]
 800d6a4:	f000 ff9a 	bl	800e5dc <xQueueGenericSendFromISR>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d003      	beq.n	800d6b6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d6ae:	f06f 0302 	mvn.w	r3, #2
 800d6b2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6b4:	e029      	b.n	800d70a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d026      	beq.n	800d70a <osMessageQueuePut+0xd2>
 800d6bc:	4b17      	ldr	r3, [pc, #92]	@ (800d71c <osMessageQueuePut+0xe4>)
 800d6be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6c2:	601a      	str	r2, [r3, #0]
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6cc:	e01d      	b.n	800d70a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d6ce:	6a3b      	ldr	r3, [r7, #32]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d002      	beq.n	800d6da <osMessageQueuePut+0xa2>
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d103      	bne.n	800d6e2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d6da:	f06f 0303 	mvn.w	r3, #3
 800d6de:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6e0:	e014      	b.n	800d70c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	683a      	ldr	r2, [r7, #0]
 800d6e6:	68b9      	ldr	r1, [r7, #8]
 800d6e8:	6a38      	ldr	r0, [r7, #32]
 800d6ea:	f000 fe6d 	bl	800e3c8 <xQueueGenericSend>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d00b      	beq.n	800d70c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d003      	beq.n	800d702 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d6fa:	f06f 0301 	mvn.w	r3, #1
 800d6fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800d700:	e004      	b.n	800d70c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d702:	f06f 0302 	mvn.w	r3, #2
 800d706:	627b      	str	r3, [r7, #36]	@ 0x24
 800d708:	e000      	b.n	800d70c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d70a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3728      	adds	r7, #40	@ 0x28
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20005660 	.word	0x20005660
 800d71c:	e000ed04 	.word	0xe000ed04

0800d720 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d720:	b580      	push	{r7, lr}
 800d722:	b08a      	sub	sp, #40	@ 0x28
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d732:	2300      	movs	r3, #0
 800d734:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d736:	f3ef 8305 	mrs	r3, IPSR
 800d73a:	61fb      	str	r3, [r7, #28]
  return(result);
 800d73c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10f      	bne.n	800d762 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d742:	f3ef 8310 	mrs	r3, PRIMASK
 800d746:	61bb      	str	r3, [r7, #24]
  return(result);
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d105      	bne.n	800d75a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d74e:	f3ef 8311 	mrs	r3, BASEPRI
 800d752:	617b      	str	r3, [r7, #20]
  return(result);
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d02c      	beq.n	800d7b4 <osMessageQueueGet+0x94>
 800d75a:	4b28      	ldr	r3, [pc, #160]	@ (800d7fc <osMessageQueueGet+0xdc>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b02      	cmp	r3, #2
 800d760:	d128      	bne.n	800d7b4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d005      	beq.n	800d774 <osMessageQueueGet+0x54>
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <osMessageQueueGet+0x54>
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d003      	beq.n	800d77c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d774:	f06f 0303 	mvn.w	r3, #3
 800d778:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d77a:	e038      	b.n	800d7ee <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d77c:	2300      	movs	r3, #0
 800d77e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d780:	f107 0310 	add.w	r3, r7, #16
 800d784:	461a      	mov	r2, r3
 800d786:	68b9      	ldr	r1, [r7, #8]
 800d788:	6a38      	ldr	r0, [r7, #32]
 800d78a:	f001 fa63 	bl	800ec54 <xQueueReceiveFromISR>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b01      	cmp	r3, #1
 800d792:	d003      	beq.n	800d79c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d794:	f06f 0302 	mvn.w	r3, #2
 800d798:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d79a:	e028      	b.n	800d7ee <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d025      	beq.n	800d7ee <osMessageQueueGet+0xce>
 800d7a2:	4b17      	ldr	r3, [pc, #92]	@ (800d800 <osMessageQueueGet+0xe0>)
 800d7a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7b2:	e01c      	b.n	800d7ee <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d7b4:	6a3b      	ldr	r3, [r7, #32]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <osMessageQueueGet+0xa0>
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d103      	bne.n	800d7c8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d7c0:	f06f 0303 	mvn.w	r3, #3
 800d7c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7c6:	e013      	b.n	800d7f0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d7c8:	683a      	ldr	r2, [r7, #0]
 800d7ca:	68b9      	ldr	r1, [r7, #8]
 800d7cc:	6a38      	ldr	r0, [r7, #32]
 800d7ce:	f001 f841 	bl	800e854 <xQueueReceive>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d00b      	beq.n	800d7f0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d003      	beq.n	800d7e6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d7de:	f06f 0301 	mvn.w	r3, #1
 800d7e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7e4:	e004      	b.n	800d7f0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d7e6:	f06f 0302 	mvn.w	r3, #2
 800d7ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7ec:	e000      	b.n	800d7f0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7ee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3728      	adds	r7, #40	@ 0x28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20005660 	.word	0x20005660
 800d800:	e000ed04 	.word	0xe000ed04

0800d804 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d102      	bne.n	800d81c <osMessageQueueGetCount+0x18>
    count = 0U;
 800d816:	2300      	movs	r3, #0
 800d818:	61fb      	str	r3, [r7, #28]
 800d81a:	e01e      	b.n	800d85a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d81c:	f3ef 8305 	mrs	r3, IPSR
 800d820:	617b      	str	r3, [r7, #20]
  return(result);
 800d822:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10f      	bne.n	800d848 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d828:	f3ef 8310 	mrs	r3, PRIMASK
 800d82c:	613b      	str	r3, [r7, #16]
  return(result);
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d105      	bne.n	800d840 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d834:	f3ef 8311 	mrs	r3, BASEPRI
 800d838:	60fb      	str	r3, [r7, #12]
  return(result);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d008      	beq.n	800d852 <osMessageQueueGetCount+0x4e>
 800d840:	4b08      	ldr	r3, [pc, #32]	@ (800d864 <osMessageQueueGetCount+0x60>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b02      	cmp	r3, #2
 800d846:	d104      	bne.n	800d852 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d848:	69b8      	ldr	r0, [r7, #24]
 800d84a:	f001 faac 	bl	800eda6 <uxQueueMessagesWaitingFromISR>
 800d84e:	61f8      	str	r0, [r7, #28]
 800d850:	e003      	b.n	800d85a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d852:	69b8      	ldr	r0, [r7, #24]
 800d854:	f001 fa86 	bl	800ed64 <uxQueueMessagesWaiting>
 800d858:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800d85a:	69fb      	ldr	r3, [r7, #28]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3720      	adds	r7, #32
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	20005660 	.word	0x20005660

0800d868 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800d868:	b580      	push	{r7, lr}
 800d86a:	b088      	sub	sp, #32
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d874:	f3ef 8305 	mrs	r3, IPSR
 800d878:	617b      	str	r3, [r7, #20]
  return(result);
 800d87a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10f      	bne.n	800d8a0 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d880:	f3ef 8310 	mrs	r3, PRIMASK
 800d884:	613b      	str	r3, [r7, #16]
  return(result);
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d105      	bne.n	800d898 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d88c:	f3ef 8311 	mrs	r3, BASEPRI
 800d890:	60fb      	str	r3, [r7, #12]
  return(result);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d007      	beq.n	800d8a8 <osMessageQueueDelete+0x40>
 800d898:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d0 <osMessageQueueDelete+0x68>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d103      	bne.n	800d8a8 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800d8a0:	f06f 0305 	mvn.w	r3, #5
 800d8a4:	61fb      	str	r3, [r7, #28]
 800d8a6:	e00e      	b.n	800d8c6 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d103      	bne.n	800d8b6 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800d8ae:	f06f 0303 	mvn.w	r3, #3
 800d8b2:	61fb      	str	r3, [r7, #28]
 800d8b4:	e007      	b.n	800d8c6 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800d8b6:	69b8      	ldr	r0, [r7, #24]
 800d8b8:	f001 fc0e 	bl	800f0d8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800d8c0:	69b8      	ldr	r0, [r7, #24]
 800d8c2:	f001 fa91 	bl	800ede8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d8c6:	69fb      	ldr	r3, [r7, #28]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3720      	adds	r7, #32
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	20005660 	.word	0x20005660

0800d8d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	4a07      	ldr	r2, [pc, #28]	@ (800d900 <vApplicationGetIdleTaskMemory+0x2c>)
 800d8e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	4a06      	ldr	r2, [pc, #24]	@ (800d904 <vApplicationGetIdleTaskMemory+0x30>)
 800d8ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8f2:	601a      	str	r2, [r3, #0]
}
 800d8f4:	bf00      	nop
 800d8f6:	3714      	adds	r7, #20
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr
 800d900:	20005664 	.word	0x20005664
 800d904:	2000570c 	.word	0x2000570c

0800d908 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4a07      	ldr	r2, [pc, #28]	@ (800d934 <vApplicationGetTimerTaskMemory+0x2c>)
 800d918:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	4a06      	ldr	r2, [pc, #24]	@ (800d938 <vApplicationGetTimerTaskMemory+0x30>)
 800d91e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d926:	601a      	str	r2, [r3, #0]
}
 800d928:	bf00      	nop
 800d92a:	3714      	adds	r7, #20
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr
 800d934:	20005f0c 	.word	0x20005f0c
 800d938:	20005fb4 	.word	0x20005fb4

0800d93c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d10d      	bne.n	800d966 <xEventGroupCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94e:	b672      	cpsid	i
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	b662      	cpsie	i
 800d95e:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d960:	bf00      	nop
 800d962:	bf00      	nop
 800d964:	e7fd      	b.n	800d962 <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800d966:	2320      	movs	r3, #32
 800d968:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	2b20      	cmp	r3, #32
 800d96e:	d00d      	beq.n	800d98c <xEventGroupCreateStatic+0x50>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d974:	b672      	cpsid	i
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	b662      	cpsie	i
 800d984:	60fb      	str	r3, [r7, #12]
}
 800d986:	bf00      	nop
 800d988:	bf00      	nop
 800d98a:	e7fd      	b.n	800d988 <xEventGroupCreateStatic+0x4c>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00a      	beq.n	800d9ac <xEventGroupCreateStatic+0x70>
		{
			pxEventBits->uxEventBits = 0;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	2200      	movs	r2, #0
 800d99a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	3304      	adds	r3, #4
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f000 f9d1 	bl	800dd48 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800d9ac:	697b      	ldr	r3, [r7, #20]
	}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3718      	adds	r7, #24
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d9bc:	2020      	movs	r0, #32
 800d9be:	f003 fab3 	bl	8010f28 <pvPortMalloc>
 800d9c2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00a      	beq.n	800d9e0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	3304      	adds	r3, #4
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f000 f9b7 	bl	800dd48 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d9e0:	687b      	ldr	r3, [r7, #4]
	}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
	...

0800d9ec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b090      	sub	sp, #64	@ 0x40
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	607a      	str	r2, [r7, #4]
 800d9f8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d9fe:	2300      	movs	r3, #0
 800da00:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800da02:	2300      	movs	r3, #0
 800da04:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10d      	bne.n	800da28 <xEventGroupWaitBits+0x3c>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da10:	b672      	cpsid	i
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	b662      	cpsie	i
 800da20:	623b      	str	r3, [r7, #32]
}
 800da22:	bf00      	nop
 800da24:	bf00      	nop
 800da26:	e7fd      	b.n	800da24 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800da2e:	d30d      	bcc.n	800da4c <xEventGroupWaitBits+0x60>
	__asm volatile
 800da30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da34:	b672      	cpsid	i
 800da36:	f383 8811 	msr	BASEPRI, r3
 800da3a:	f3bf 8f6f 	isb	sy
 800da3e:	f3bf 8f4f 	dsb	sy
 800da42:	b662      	cpsie	i
 800da44:	61fb      	str	r3, [r7, #28]
}
 800da46:	bf00      	nop
 800da48:	bf00      	nop
 800da4a:	e7fd      	b.n	800da48 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d10d      	bne.n	800da6e <xEventGroupWaitBits+0x82>
	__asm volatile
 800da52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da56:	b672      	cpsid	i
 800da58:	f383 8811 	msr	BASEPRI, r3
 800da5c:	f3bf 8f6f 	isb	sy
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	b662      	cpsie	i
 800da66:	61bb      	str	r3, [r7, #24]
}
 800da68:	bf00      	nop
 800da6a:	bf00      	nop
 800da6c:	e7fd      	b.n	800da6a <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da6e:	f002 fa95 	bl	800ff9c <xTaskGetSchedulerState>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d102      	bne.n	800da7e <xEventGroupWaitBits+0x92>
 800da78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d101      	bne.n	800da82 <xEventGroupWaitBits+0x96>
 800da7e:	2301      	movs	r3, #1
 800da80:	e000      	b.n	800da84 <xEventGroupWaitBits+0x98>
 800da82:	2300      	movs	r3, #0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10d      	bne.n	800daa4 <xEventGroupWaitBits+0xb8>
	__asm volatile
 800da88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da8c:	b672      	cpsid	i
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	b662      	cpsie	i
 800da9c:	617b      	str	r3, [r7, #20]
}
 800da9e:	bf00      	nop
 800daa0:	bf00      	nop
 800daa2:	e7fd      	b.n	800daa0 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 800daa4:	f001 fde8 	bl	800f678 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800daa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800daae:	683a      	ldr	r2, [r7, #0]
 800dab0:	68b9      	ldr	r1, [r7, #8]
 800dab2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dab4:	f000 f911 	bl	800dcda <prvTestWaitCondition>
 800dab8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800daba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00e      	beq.n	800dade <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800dac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800dac4:	2300      	movs	r3, #0
 800dac6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d028      	beq.n	800db20 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800dace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	43db      	mvns	r3, r3
 800dad6:	401a      	ands	r2, r3
 800dad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	e020      	b.n	800db20 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800dade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d104      	bne.n	800daee <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800dae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800dae8:	2301      	movs	r3, #1
 800daea:	633b      	str	r3, [r7, #48]	@ 0x30
 800daec:	e018      	b.n	800db20 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d003      	beq.n	800dafc <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800daf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dafa:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d003      	beq.n	800db0a <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800db02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800db08:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800db0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db0c:	1d18      	adds	r0, r3, #4
 800db0e:	68ba      	ldr	r2, [r7, #8]
 800db10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db12:	4313      	orrs	r3, r2
 800db14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db16:	4619      	mov	r1, r3
 800db18:	f001 ffee 	bl	800faf8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800db1c:	2300      	movs	r3, #0
 800db1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800db20:	f001 fdb8 	bl	800f694 <xTaskResumeAll>
 800db24:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800db26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d031      	beq.n	800db90 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 800db2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d107      	bne.n	800db42 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 800db32:	4b1a      	ldr	r3, [pc, #104]	@ (800db9c <xEventGroupWaitBits+0x1b0>)
 800db34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	f3bf 8f4f 	dsb	sy
 800db3e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800db42:	f002 fbad 	bl	80102a0 <uxTaskResetEventItemValue>
 800db46:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800db48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d11a      	bne.n	800db88 <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 800db52:	f003 f8bb 	bl	8010ccc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800db56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800db5c:	683a      	ldr	r2, [r7, #0]
 800db5e:	68b9      	ldr	r1, [r7, #8]
 800db60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800db62:	f000 f8ba 	bl	800dcda <prvTestWaitCondition>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d009      	beq.n	800db80 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d006      	beq.n	800db80 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800db72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	43db      	mvns	r3, r3
 800db7a:	401a      	ands	r2, r3
 800db7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db7e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800db80:	2301      	movs	r3, #1
 800db82:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800db84:	f003 f8d8 	bl	8010d38 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800db88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800db8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800db90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800db92:	4618      	mov	r0, r3
 800db94:	3740      	adds	r7, #64	@ 0x40
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	e000ed04 	.word	0xe000ed04

0800dba0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b08e      	sub	sp, #56	@ 0x38
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d10d      	bne.n	800dbd8 <xEventGroupSetBits+0x38>
	__asm volatile
 800dbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc0:	b672      	cpsid	i
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	b662      	cpsie	i
 800dbd0:	613b      	str	r3, [r7, #16]
}
 800dbd2:	bf00      	nop
 800dbd4:	bf00      	nop
 800dbd6:	e7fd      	b.n	800dbd4 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dbde:	d30d      	bcc.n	800dbfc <xEventGroupSetBits+0x5c>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe4:	b672      	cpsid	i
 800dbe6:	f383 8811 	msr	BASEPRI, r3
 800dbea:	f3bf 8f6f 	isb	sy
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	b662      	cpsie	i
 800dbf4:	60fb      	str	r3, [r7, #12]
}
 800dbf6:	bf00      	nop
 800dbf8:	bf00      	nop
 800dbfa:	e7fd      	b.n	800dbf8 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800dbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbfe:	3304      	adds	r3, #4
 800dc00:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc04:	3308      	adds	r3, #8
 800dc06:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800dc08:	f001 fd36 	bl	800f678 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800dc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800dc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	431a      	orrs	r2, r3
 800dc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc1c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800dc1e:	e03c      	b.n	800dc9a <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 800dc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800dc26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800dc36:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dc3e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d108      	bne.n	800dc5c <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800dc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	4013      	ands	r3, r2
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00b      	beq.n	800dc6e <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 800dc56:	2301      	movs	r3, #1
 800dc58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc5a:	e008      	b.n	800dc6e <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800dc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	4013      	ands	r3, r2
 800dc64:	69ba      	ldr	r2, [r7, #24]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d101      	bne.n	800dc6e <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800dc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d010      	beq.n	800dc96 <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d003      	beq.n	800dc86 <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800dc7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	4313      	orrs	r3, r2
 800dc84:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800dc86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dc92:	f002 f807 	bl	800fca4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800dc9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d1be      	bne.n	800dc20 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800dca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca8:	43db      	mvns	r3, r3
 800dcaa:	401a      	ands	r2, r3
 800dcac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcae:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800dcb0:	f001 fcf0 	bl	800f694 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800dcb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcb6:	681b      	ldr	r3, [r3, #0]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3738      	adds	r7, #56	@ 0x38
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800dcca:	6839      	ldr	r1, [r7, #0]
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7ff ff67 	bl	800dba0 <xEventGroupSetBits>
}
 800dcd2:	bf00      	nop
 800dcd4:	3708      	adds	r7, #8
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800dcda:	b480      	push	{r7}
 800dcdc:	b087      	sub	sp, #28
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	60f8      	str	r0, [r7, #12]
 800dce2:	60b9      	str	r1, [r7, #8]
 800dce4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800dce6:	2300      	movs	r3, #0
 800dce8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d107      	bne.n	800dd00 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	4013      	ands	r3, r2
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00a      	beq.n	800dd10 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	617b      	str	r3, [r7, #20]
 800dcfe:	e007      	b.n	800dd10 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	4013      	ands	r3, r2
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d101      	bne.n	800dd10 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800dd10:	697b      	ldr	r3, [r7, #20]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	371c      	adds	r7, #28
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr
	...

0800dd20 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b086      	sub	sp, #24
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	68ba      	ldr	r2, [r7, #8]
 800dd30:	68f9      	ldr	r1, [r7, #12]
 800dd32:	4804      	ldr	r0, [pc, #16]	@ (800dd44 <xEventGroupSetBitsFromISR+0x24>)
 800dd34:	f002 fe9c 	bl	8010a70 <xTimerPendFunctionCallFromISR>
 800dd38:	6178      	str	r0, [r7, #20]

		return xReturn;
 800dd3a:	697b      	ldr	r3, [r7, #20]
	}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3718      	adds	r7, #24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	0800dcc1 	.word	0x0800dcc1

0800dd48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b083      	sub	sp, #12
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f103 0208 	add.w	r2, r3, #8
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f103 0208 	add.w	r2, r3, #8
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f103 0208 	add.w	r2, r3, #8
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd7c:	bf00      	nop
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd96:	bf00      	nop
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dda2:	b480      	push	{r7}
 800dda4:	b085      	sub	sp, #20
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	689a      	ldr	r2, [r3, #8]
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	683a      	ldr	r2, [r7, #0]
 800ddc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	1c5a      	adds	r2, r3, #1
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	601a      	str	r2, [r3, #0]
}
 800ddde:	bf00      	nop
 800dde0:	3714      	adds	r7, #20
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr

0800ddea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddea:	b480      	push	{r7}
 800ddec:	b085      	sub	sp, #20
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de00:	d103      	bne.n	800de0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	691b      	ldr	r3, [r3, #16]
 800de06:	60fb      	str	r3, [r7, #12]
 800de08:	e00c      	b.n	800de24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	3308      	adds	r3, #8
 800de0e:	60fb      	str	r3, [r7, #12]
 800de10:	e002      	b.n	800de18 <vListInsert+0x2e>
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	60fb      	str	r3, [r7, #12]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	68ba      	ldr	r2, [r7, #8]
 800de20:	429a      	cmp	r2, r3
 800de22:	d2f6      	bcs.n	800de12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	685a      	ldr	r2, [r3, #4]
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	1c5a      	adds	r2, r3, #1
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	601a      	str	r2, [r3, #0]
}
 800de50:	bf00      	nop
 800de52:	3714      	adds	r7, #20
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr

0800de5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	691b      	ldr	r3, [r3, #16]
 800de68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	6892      	ldr	r2, [r2, #8]
 800de72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	6852      	ldr	r2, [r2, #4]
 800de7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	429a      	cmp	r2, r3
 800de86:	d103      	bne.n	800de90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	689a      	ldr	r2, [r3, #8]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	1e5a      	subs	r2, r3, #1
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3714      	adds	r7, #20
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr

0800deb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10d      	bne.n	800dee0 <xQueueGenericReset+0x30>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec8:	b672      	cpsid	i
 800deca:	f383 8811 	msr	BASEPRI, r3
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	f3bf 8f4f 	dsb	sy
 800ded6:	b662      	cpsie	i
 800ded8:	60bb      	str	r3, [r7, #8]
}
 800deda:	bf00      	nop
 800dedc:	bf00      	nop
 800dede:	e7fd      	b.n	800dedc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800dee0:	f002 fef4 	bl	8010ccc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deec:	68f9      	ldr	r1, [r7, #12]
 800deee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800def0:	fb01 f303 	mul.w	r3, r1, r3
 800def4:	441a      	add	r2, r3
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df10:	3b01      	subs	r3, #1
 800df12:	68f9      	ldr	r1, [r7, #12]
 800df14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df16:	fb01 f303 	mul.w	r3, r1, r3
 800df1a:	441a      	add	r2, r3
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	22ff      	movs	r2, #255	@ 0xff
 800df24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	22ff      	movs	r2, #255	@ 0xff
 800df2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d114      	bne.n	800df60 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	691b      	ldr	r3, [r3, #16]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d01a      	beq.n	800df74 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3310      	adds	r3, #16
 800df42:	4618      	mov	r0, r3
 800df44:	f001 fe48 	bl	800fbd8 <xTaskRemoveFromEventList>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d012      	beq.n	800df74 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df4e:	4b0d      	ldr	r3, [pc, #52]	@ (800df84 <xQueueGenericReset+0xd4>)
 800df50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	e009      	b.n	800df74 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	3310      	adds	r3, #16
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff feef 	bl	800dd48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	3324      	adds	r3, #36	@ 0x24
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff feea 	bl	800dd48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df74:	f002 fee0 	bl	8010d38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df78:	2301      	movs	r3, #1
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	e000ed04 	.word	0xe000ed04

0800df88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b08e      	sub	sp, #56	@ 0x38
 800df8c:	af02      	add	r7, sp, #8
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
 800df94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10d      	bne.n	800dfb8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800df9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa0:	b672      	cpsid	i
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	b662      	cpsie	i
 800dfb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dfb2:	bf00      	nop
 800dfb4:	bf00      	nop
 800dfb6:	e7fd      	b.n	800dfb4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10d      	bne.n	800dfda <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800dfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc2:	b672      	cpsid	i
 800dfc4:	f383 8811 	msr	BASEPRI, r3
 800dfc8:	f3bf 8f6f 	isb	sy
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	b662      	cpsie	i
 800dfd2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dfd4:	bf00      	nop
 800dfd6:	bf00      	nop
 800dfd8:	e7fd      	b.n	800dfd6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d002      	beq.n	800dfe6 <xQueueGenericCreateStatic+0x5e>
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <xQueueGenericCreateStatic+0x62>
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e000      	b.n	800dfec <xQueueGenericCreateStatic+0x64>
 800dfea:	2300      	movs	r3, #0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d10d      	bne.n	800e00c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800dff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff4:	b672      	cpsid	i
 800dff6:	f383 8811 	msr	BASEPRI, r3
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	b662      	cpsie	i
 800e004:	623b      	str	r3, [r7, #32]
}
 800e006:	bf00      	nop
 800e008:	bf00      	nop
 800e00a:	e7fd      	b.n	800e008 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d102      	bne.n	800e018 <xQueueGenericCreateStatic+0x90>
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d101      	bne.n	800e01c <xQueueGenericCreateStatic+0x94>
 800e018:	2301      	movs	r3, #1
 800e01a:	e000      	b.n	800e01e <xQueueGenericCreateStatic+0x96>
 800e01c:	2300      	movs	r3, #0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10d      	bne.n	800e03e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800e022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e026:	b672      	cpsid	i
 800e028:	f383 8811 	msr	BASEPRI, r3
 800e02c:	f3bf 8f6f 	isb	sy
 800e030:	f3bf 8f4f 	dsb	sy
 800e034:	b662      	cpsie	i
 800e036:	61fb      	str	r3, [r7, #28]
}
 800e038:	bf00      	nop
 800e03a:	bf00      	nop
 800e03c:	e7fd      	b.n	800e03a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e03e:	2350      	movs	r3, #80	@ 0x50
 800e040:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	2b50      	cmp	r3, #80	@ 0x50
 800e046:	d00d      	beq.n	800e064 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800e048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e04c:	b672      	cpsid	i
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	b662      	cpsie	i
 800e05c:	61bb      	str	r3, [r7, #24]
}
 800e05e:	bf00      	nop
 800e060:	bf00      	nop
 800e062:	e7fd      	b.n	800e060 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e064:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00d      	beq.n	800e08c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e078:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	4613      	mov	r3, r2
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	68b9      	ldr	r1, [r7, #8]
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f000 f848 	bl	800e11c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e08e:	4618      	mov	r0, r3
 800e090:	3730      	adds	r7, #48	@ 0x30
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}

0800e096 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e096:	b580      	push	{r7, lr}
 800e098:	b08a      	sub	sp, #40	@ 0x28
 800e09a:	af02      	add	r7, sp, #8
 800e09c:	60f8      	str	r0, [r7, #12]
 800e09e:	60b9      	str	r1, [r7, #8]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d10d      	bne.n	800e0c6 <xQueueGenericCreate+0x30>
	__asm volatile
 800e0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ae:	b672      	cpsid	i
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	b662      	cpsie	i
 800e0be:	613b      	str	r3, [r7, #16]
}
 800e0c0:	bf00      	nop
 800e0c2:	bf00      	nop
 800e0c4:	e7fd      	b.n	800e0c2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d102      	bne.n	800e0d2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	61fb      	str	r3, [r7, #28]
 800e0d0:	e004      	b.n	800e0dc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	68ba      	ldr	r2, [r7, #8]
 800e0d6:	fb02 f303 	mul.w	r3, r2, r3
 800e0da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	3350      	adds	r3, #80	@ 0x50
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f002 ff21 	bl	8010f28 <pvPortMalloc>
 800e0e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d011      	beq.n	800e112 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	3350      	adds	r3, #80	@ 0x50
 800e0f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e100:	79fa      	ldrb	r2, [r7, #7]
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	4613      	mov	r3, r2
 800e108:	697a      	ldr	r2, [r7, #20]
 800e10a:	68b9      	ldr	r1, [r7, #8]
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 f805 	bl	800e11c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e112:	69bb      	ldr	r3, [r7, #24]
	}
 800e114:	4618      	mov	r0, r3
 800e116:	3720      	adds	r7, #32
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	607a      	str	r2, [r7, #4]
 800e128:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d103      	bne.n	800e138 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	69ba      	ldr	r2, [r7, #24]
 800e134:	601a      	str	r2, [r3, #0]
 800e136:	e002      	b.n	800e13e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e138:	69bb      	ldr	r3, [r7, #24]
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	68ba      	ldr	r2, [r7, #8]
 800e148:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e14a:	2101      	movs	r1, #1
 800e14c:	69b8      	ldr	r0, [r7, #24]
 800e14e:	f7ff feaf 	bl	800deb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	78fa      	ldrb	r2, [r7, #3]
 800e156:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e15a:	bf00      	nop
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e162:	b580      	push	{r7, lr}
 800e164:	b082      	sub	sp, #8
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00e      	beq.n	800e18e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e182:	2300      	movs	r3, #0
 800e184:	2200      	movs	r2, #0
 800e186:	2100      	movs	r1, #0
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f91d 	bl	800e3c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e18e:	bf00      	nop
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e196:	b580      	push	{r7, lr}
 800e198:	b086      	sub	sp, #24
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	4603      	mov	r3, r0
 800e19e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	617b      	str	r3, [r7, #20]
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e1a8:	79fb      	ldrb	r3, [r7, #7]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	6939      	ldr	r1, [r7, #16]
 800e1ae:	6978      	ldr	r0, [r7, #20]
 800e1b0:	f7ff ff71 	bl	800e096 <xQueueGenericCreate>
 800e1b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f7ff ffd3 	bl	800e162 <prvInitialiseMutex>

		return xNewQueue;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
	}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3718      	adds	r7, #24
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b088      	sub	sp, #32
 800e1ca:	af02      	add	r7, sp, #8
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	6039      	str	r1, [r7, #0]
 800e1d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	617b      	str	r3, [r7, #20]
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	6939      	ldr	r1, [r7, #16]
 800e1e4:	6978      	ldr	r0, [r7, #20]
 800e1e6:	f7ff fecf 	bl	800df88 <xQueueGenericCreateStatic>
 800e1ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f7ff ffb8 	bl	800e162 <prvInitialiseMutex>

		return xNewQueue;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
	}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3718      	adds	r7, #24
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e1fc:	b590      	push	{r4, r7, lr}
 800e1fe:	b087      	sub	sp, #28
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10d      	bne.n	800e22a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e212:	b672      	cpsid	i
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	b662      	cpsie	i
 800e222:	60fb      	str	r3, [r7, #12]
}
 800e224:	bf00      	nop
 800e226:	bf00      	nop
 800e228:	e7fd      	b.n	800e226 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	689c      	ldr	r4, [r3, #8]
 800e22e:	f001 fea5 	bl	800ff7c <xTaskGetCurrentTaskHandle>
 800e232:	4603      	mov	r3, r0
 800e234:	429c      	cmp	r4, r3
 800e236:	d111      	bne.n	800e25c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	1e5a      	subs	r2, r3, #1
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d105      	bne.n	800e256 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e24a:	2300      	movs	r3, #0
 800e24c:	2200      	movs	r2, #0
 800e24e:	2100      	movs	r1, #0
 800e250:	6938      	ldr	r0, [r7, #16]
 800e252:	f000 f8b9 	bl	800e3c8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e256:	2301      	movs	r3, #1
 800e258:	617b      	str	r3, [r7, #20]
 800e25a:	e001      	b.n	800e260 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e25c:	2300      	movs	r3, #0
 800e25e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e260:	697b      	ldr	r3, [r7, #20]
	}
 800e262:	4618      	mov	r0, r3
 800e264:	371c      	adds	r7, #28
 800e266:	46bd      	mov	sp, r7
 800e268:	bd90      	pop	{r4, r7, pc}

0800e26a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e26a:	b590      	push	{r4, r7, lr}
 800e26c:	b087      	sub	sp, #28
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d10d      	bne.n	800e29a <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800e27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e282:	b672      	cpsid	i
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	b662      	cpsie	i
 800e292:	60fb      	str	r3, [r7, #12]
}
 800e294:	bf00      	nop
 800e296:	bf00      	nop
 800e298:	e7fd      	b.n	800e296 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	689c      	ldr	r4, [r3, #8]
 800e29e:	f001 fe6d 	bl	800ff7c <xTaskGetCurrentTaskHandle>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	429c      	cmp	r4, r3
 800e2a6:	d107      	bne.n	800e2b8 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	617b      	str	r3, [r7, #20]
 800e2b6:	e00c      	b.n	800e2d2 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e2b8:	6839      	ldr	r1, [r7, #0]
 800e2ba:	6938      	ldr	r0, [r7, #16]
 800e2bc:	f000 fbb2 	bl	800ea24 <xQueueSemaphoreTake>
 800e2c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d004      	beq.n	800e2d2 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	1c5a      	adds	r2, r3, #1
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e2d2:	697b      	ldr	r3, [r7, #20]
	}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	371c      	adds	r7, #28
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd90      	pop	{r4, r7, pc}

0800e2dc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b08a      	sub	sp, #40	@ 0x28
 800e2e0:	af02      	add	r7, sp, #8
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10d      	bne.n	800e30a <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f2:	b672      	cpsid	i
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	b662      	cpsie	i
 800e302:	61bb      	str	r3, [r7, #24]
}
 800e304:	bf00      	nop
 800e306:	bf00      	nop
 800e308:	e7fd      	b.n	800e306 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d90d      	bls.n	800e32e <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e316:	b672      	cpsid	i
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	b662      	cpsie	i
 800e326:	617b      	str	r3, [r7, #20]
}
 800e328:	bf00      	nop
 800e32a:	bf00      	nop
 800e32c:	e7fd      	b.n	800e32a <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e32e:	2302      	movs	r3, #2
 800e330:	9300      	str	r3, [sp, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	2100      	movs	r1, #0
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f7ff fe25 	bl	800df88 <xQueueGenericCreateStatic>
 800e33e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d002      	beq.n	800e34c <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e34c:	69fb      	ldr	r3, [r7, #28]
	}
 800e34e:	4618      	mov	r0, r3
 800e350:	3720      	adds	r7, #32
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e356:	b580      	push	{r7, lr}
 800e358:	b086      	sub	sp, #24
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10d      	bne.n	800e382 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800e366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e36a:	b672      	cpsid	i
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	b662      	cpsie	i
 800e37a:	613b      	str	r3, [r7, #16]
}
 800e37c:	bf00      	nop
 800e37e:	bf00      	nop
 800e380:	e7fd      	b.n	800e37e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e382:	683a      	ldr	r2, [r7, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	429a      	cmp	r2, r3
 800e388:	d90d      	bls.n	800e3a6 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800e38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38e:	b672      	cpsid	i
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	b662      	cpsie	i
 800e39e:	60fb      	str	r3, [r7, #12]
}
 800e3a0:	bf00      	nop
 800e3a2:	bf00      	nop
 800e3a4:	e7fd      	b.n	800e3a2 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e3a6:	2202      	movs	r2, #2
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7ff fe73 	bl	800e096 <xQueueGenericCreate>
 800e3b0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	683a      	ldr	r2, [r7, #0]
 800e3bc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e3be:	697b      	ldr	r3, [r7, #20]
	}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b08e      	sub	sp, #56	@ 0x38
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
 800e3d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d10d      	bne.n	800e400 <xQueueGenericSend+0x38>
	__asm volatile
 800e3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e8:	b672      	cpsid	i
 800e3ea:	f383 8811 	msr	BASEPRI, r3
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	b662      	cpsie	i
 800e3f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e3fa:	bf00      	nop
 800e3fc:	bf00      	nop
 800e3fe:	e7fd      	b.n	800e3fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d103      	bne.n	800e40e <xQueueGenericSend+0x46>
 800e406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d101      	bne.n	800e412 <xQueueGenericSend+0x4a>
 800e40e:	2301      	movs	r3, #1
 800e410:	e000      	b.n	800e414 <xQueueGenericSend+0x4c>
 800e412:	2300      	movs	r3, #0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10d      	bne.n	800e434 <xQueueGenericSend+0x6c>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41c:	b672      	cpsid	i
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	b662      	cpsie	i
 800e42c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e42e:	bf00      	nop
 800e430:	bf00      	nop
 800e432:	e7fd      	b.n	800e430 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	2b02      	cmp	r3, #2
 800e438:	d103      	bne.n	800e442 <xQueueGenericSend+0x7a>
 800e43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d101      	bne.n	800e446 <xQueueGenericSend+0x7e>
 800e442:	2301      	movs	r3, #1
 800e444:	e000      	b.n	800e448 <xQueueGenericSend+0x80>
 800e446:	2300      	movs	r3, #0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d10d      	bne.n	800e468 <xQueueGenericSend+0xa0>
	__asm volatile
 800e44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e450:	b672      	cpsid	i
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	b662      	cpsie	i
 800e460:	623b      	str	r3, [r7, #32]
}
 800e462:	bf00      	nop
 800e464:	bf00      	nop
 800e466:	e7fd      	b.n	800e464 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e468:	f001 fd98 	bl	800ff9c <xTaskGetSchedulerState>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d102      	bne.n	800e478 <xQueueGenericSend+0xb0>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d101      	bne.n	800e47c <xQueueGenericSend+0xb4>
 800e478:	2301      	movs	r3, #1
 800e47a:	e000      	b.n	800e47e <xQueueGenericSend+0xb6>
 800e47c:	2300      	movs	r3, #0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d10d      	bne.n	800e49e <xQueueGenericSend+0xd6>
	__asm volatile
 800e482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e486:	b672      	cpsid	i
 800e488:	f383 8811 	msr	BASEPRI, r3
 800e48c:	f3bf 8f6f 	isb	sy
 800e490:	f3bf 8f4f 	dsb	sy
 800e494:	b662      	cpsie	i
 800e496:	61fb      	str	r3, [r7, #28]
}
 800e498:	bf00      	nop
 800e49a:	bf00      	nop
 800e49c:	e7fd      	b.n	800e49a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e49e:	f002 fc15 	bl	8010ccc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d302      	bcc.n	800e4b4 <xQueueGenericSend+0xec>
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b02      	cmp	r3, #2
 800e4b2:	d129      	bne.n	800e508 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4b4:	683a      	ldr	r2, [r7, #0]
 800e4b6:	68b9      	ldr	r1, [r7, #8]
 800e4b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e4ba:	f000 fcd3 	bl	800ee64 <prvCopyDataToQueue>
 800e4be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d010      	beq.n	800e4ea <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ca:	3324      	adds	r3, #36	@ 0x24
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f001 fb83 	bl	800fbd8 <xTaskRemoveFromEventList>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d013      	beq.n	800e500 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4d8:	4b3f      	ldr	r3, [pc, #252]	@ (800e5d8 <xQueueGenericSend+0x210>)
 800e4da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4de:	601a      	str	r2, [r3, #0]
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	e00a      	b.n	800e500 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d007      	beq.n	800e500 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e4f0:	4b39      	ldr	r3, [pc, #228]	@ (800e5d8 <xQueueGenericSend+0x210>)
 800e4f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4f6:	601a      	str	r2, [r3, #0]
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e500:	f002 fc1a 	bl	8010d38 <vPortExitCritical>
				return pdPASS;
 800e504:	2301      	movs	r3, #1
 800e506:	e063      	b.n	800e5d0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d103      	bne.n	800e516 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e50e:	f002 fc13 	bl	8010d38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e512:	2300      	movs	r3, #0
 800e514:	e05c      	b.n	800e5d0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d106      	bne.n	800e52a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e51c:	f107 0314 	add.w	r3, r7, #20
 800e520:	4618      	mov	r0, r3
 800e522:	f001 fc27 	bl	800fd74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e526:	2301      	movs	r3, #1
 800e528:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e52a:	f002 fc05 	bl	8010d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e52e:	f001 f8a3 	bl	800f678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e532:	f002 fbcb 	bl	8010ccc <vPortEnterCritical>
 800e536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e538:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e53c:	b25b      	sxtb	r3, r3
 800e53e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e542:	d103      	bne.n	800e54c <xQueueGenericSend+0x184>
 800e544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e546:	2200      	movs	r2, #0
 800e548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e54e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e552:	b25b      	sxtb	r3, r3
 800e554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e558:	d103      	bne.n	800e562 <xQueueGenericSend+0x19a>
 800e55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55c:	2200      	movs	r2, #0
 800e55e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e562:	f002 fbe9 	bl	8010d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e566:	1d3a      	adds	r2, r7, #4
 800e568:	f107 0314 	add.w	r3, r7, #20
 800e56c:	4611      	mov	r1, r2
 800e56e:	4618      	mov	r0, r3
 800e570:	f001 fc16 	bl	800fda0 <xTaskCheckForTimeOut>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d124      	bne.n	800e5c4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e57a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e57c:	f000 fd6a 	bl	800f054 <prvIsQueueFull>
 800e580:	4603      	mov	r3, r0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d018      	beq.n	800e5b8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e588:	3310      	adds	r3, #16
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	4611      	mov	r1, r2
 800e58e:	4618      	mov	r0, r3
 800e590:	f001 fa8a 	bl	800faa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e596:	f000 fcf5 	bl	800ef84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e59a:	f001 f87b 	bl	800f694 <xTaskResumeAll>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	f47f af7c 	bne.w	800e49e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800e5d8 <xQueueGenericSend+0x210>)
 800e5a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	f3bf 8f6f 	isb	sy
 800e5b6:	e772      	b.n	800e49e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5ba:	f000 fce3 	bl	800ef84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5be:	f001 f869 	bl	800f694 <xTaskResumeAll>
 800e5c2:	e76c      	b.n	800e49e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5c6:	f000 fcdd 	bl	800ef84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5ca:	f001 f863 	bl	800f694 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3738      	adds	r7, #56	@ 0x38
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	e000ed04 	.word	0xe000ed04

0800e5dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b08e      	sub	sp, #56	@ 0x38
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
 800e5e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10d      	bne.n	800e610 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f8:	b672      	cpsid	i
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	b662      	cpsie	i
 800e608:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e60a:	bf00      	nop
 800e60c:	bf00      	nop
 800e60e:	e7fd      	b.n	800e60c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d103      	bne.n	800e61e <xQueueGenericSendFromISR+0x42>
 800e616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d101      	bne.n	800e622 <xQueueGenericSendFromISR+0x46>
 800e61e:	2301      	movs	r3, #1
 800e620:	e000      	b.n	800e624 <xQueueGenericSendFromISR+0x48>
 800e622:	2300      	movs	r3, #0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d10d      	bne.n	800e644 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e62c:	b672      	cpsid	i
 800e62e:	f383 8811 	msr	BASEPRI, r3
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	f3bf 8f4f 	dsb	sy
 800e63a:	b662      	cpsie	i
 800e63c:	623b      	str	r3, [r7, #32]
}
 800e63e:	bf00      	nop
 800e640:	bf00      	nop
 800e642:	e7fd      	b.n	800e640 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	2b02      	cmp	r3, #2
 800e648:	d103      	bne.n	800e652 <xQueueGenericSendFromISR+0x76>
 800e64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d101      	bne.n	800e656 <xQueueGenericSendFromISR+0x7a>
 800e652:	2301      	movs	r3, #1
 800e654:	e000      	b.n	800e658 <xQueueGenericSendFromISR+0x7c>
 800e656:	2300      	movs	r3, #0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10d      	bne.n	800e678 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e660:	b672      	cpsid	i
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	b662      	cpsie	i
 800e670:	61fb      	str	r3, [r7, #28]
}
 800e672:	bf00      	nop
 800e674:	bf00      	nop
 800e676:	e7fd      	b.n	800e674 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e678:	f002 fc10 	bl	8010e9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e67c:	f3ef 8211 	mrs	r2, BASEPRI
 800e680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e684:	b672      	cpsid	i
 800e686:	f383 8811 	msr	BASEPRI, r3
 800e68a:	f3bf 8f6f 	isb	sy
 800e68e:	f3bf 8f4f 	dsb	sy
 800e692:	b662      	cpsie	i
 800e694:	61ba      	str	r2, [r7, #24]
 800e696:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e698:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e69e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d302      	bcc.n	800e6ae <xQueueGenericSendFromISR+0xd2>
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2b02      	cmp	r3, #2
 800e6ac:	d12c      	bne.n	800e708 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6b8:	683a      	ldr	r2, [r7, #0]
 800e6ba:	68b9      	ldr	r1, [r7, #8]
 800e6bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6be:	f000 fbd1 	bl	800ee64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6ca:	d112      	bne.n	800e6f2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d016      	beq.n	800e702 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d6:	3324      	adds	r3, #36	@ 0x24
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f001 fa7d 	bl	800fbd8 <xTaskRemoveFromEventList>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d00e      	beq.n	800e702 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00b      	beq.n	800e702 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	601a      	str	r2, [r3, #0]
 800e6f0:	e007      	b.n	800e702 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e6f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	b25a      	sxtb	r2, r3
 800e6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e702:	2301      	movs	r3, #1
 800e704:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e706:	e001      	b.n	800e70c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e708:	2300      	movs	r3, #0
 800e70a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e70e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e716:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3738      	adds	r7, #56	@ 0x38
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b08e      	sub	sp, #56	@ 0x38
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
 800e72a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10d      	bne.n	800e752 <xQueueGiveFromISR+0x30>
	__asm volatile
 800e736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e73a:	b672      	cpsid	i
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	b662      	cpsie	i
 800e74a:	623b      	str	r3, [r7, #32]
}
 800e74c:	bf00      	nop
 800e74e:	bf00      	nop
 800e750:	e7fd      	b.n	800e74e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00d      	beq.n	800e776 <xQueueGiveFromISR+0x54>
	__asm volatile
 800e75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e75e:	b672      	cpsid	i
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	b662      	cpsie	i
 800e76e:	61fb      	str	r3, [r7, #28]
}
 800e770:	bf00      	nop
 800e772:	bf00      	nop
 800e774:	e7fd      	b.n	800e772 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d103      	bne.n	800e786 <xQueueGiveFromISR+0x64>
 800e77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e780:	689b      	ldr	r3, [r3, #8]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d101      	bne.n	800e78a <xQueueGiveFromISR+0x68>
 800e786:	2301      	movs	r3, #1
 800e788:	e000      	b.n	800e78c <xQueueGiveFromISR+0x6a>
 800e78a:	2300      	movs	r3, #0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d10d      	bne.n	800e7ac <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e794:	b672      	cpsid	i
 800e796:	f383 8811 	msr	BASEPRI, r3
 800e79a:	f3bf 8f6f 	isb	sy
 800e79e:	f3bf 8f4f 	dsb	sy
 800e7a2:	b662      	cpsie	i
 800e7a4:	61bb      	str	r3, [r7, #24]
}
 800e7a6:	bf00      	nop
 800e7a8:	bf00      	nop
 800e7aa:	e7fd      	b.n	800e7a8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7ac:	f002 fb76 	bl	8010e9c <vPortValidateInterruptPriority>
	__asm volatile
 800e7b0:	f3ef 8211 	mrs	r2, BASEPRI
 800e7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b8:	b672      	cpsid	i
 800e7ba:	f383 8811 	msr	BASEPRI, r3
 800e7be:	f3bf 8f6f 	isb	sy
 800e7c2:	f3bf 8f4f 	dsb	sy
 800e7c6:	b662      	cpsie	i
 800e7c8:	617a      	str	r2, [r7, #20]
 800e7ca:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e7cc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7d4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d22b      	bcs.n	800e838 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ec:	1c5a      	adds	r2, r3, #1
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e7f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e7f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7fa:	d112      	bne.n	800e822 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e800:	2b00      	cmp	r3, #0
 800e802:	d016      	beq.n	800e832 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e806:	3324      	adds	r3, #36	@ 0x24
 800e808:	4618      	mov	r0, r3
 800e80a:	f001 f9e5 	bl	800fbd8 <xTaskRemoveFromEventList>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00e      	beq.n	800e832 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00b      	beq.n	800e832 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	2201      	movs	r2, #1
 800e81e:	601a      	str	r2, [r3, #0]
 800e820:	e007      	b.n	800e832 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e822:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e826:	3301      	adds	r3, #1
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	b25a      	sxtb	r2, r3
 800e82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e82e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e832:	2301      	movs	r3, #1
 800e834:	637b      	str	r3, [r7, #52]	@ 0x34
 800e836:	e001      	b.n	800e83c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e838:	2300      	movs	r3, #0
 800e83a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e83e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f383 8811 	msr	BASEPRI, r3
}
 800e846:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3738      	adds	r7, #56	@ 0x38
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
	...

0800e854 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b08c      	sub	sp, #48	@ 0x30
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e860:	2300      	movs	r3, #0
 800e862:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10d      	bne.n	800e88a <xQueueReceive+0x36>
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e872:	b672      	cpsid	i
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
 800e880:	b662      	cpsie	i
 800e882:	623b      	str	r3, [r7, #32]
}
 800e884:	bf00      	nop
 800e886:	bf00      	nop
 800e888:	e7fd      	b.n	800e886 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d103      	bne.n	800e898 <xQueueReceive+0x44>
 800e890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e894:	2b00      	cmp	r3, #0
 800e896:	d101      	bne.n	800e89c <xQueueReceive+0x48>
 800e898:	2301      	movs	r3, #1
 800e89a:	e000      	b.n	800e89e <xQueueReceive+0x4a>
 800e89c:	2300      	movs	r3, #0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10d      	bne.n	800e8be <xQueueReceive+0x6a>
	__asm volatile
 800e8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a6:	b672      	cpsid	i
 800e8a8:	f383 8811 	msr	BASEPRI, r3
 800e8ac:	f3bf 8f6f 	isb	sy
 800e8b0:	f3bf 8f4f 	dsb	sy
 800e8b4:	b662      	cpsie	i
 800e8b6:	61fb      	str	r3, [r7, #28]
}
 800e8b8:	bf00      	nop
 800e8ba:	bf00      	nop
 800e8bc:	e7fd      	b.n	800e8ba <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8be:	f001 fb6d 	bl	800ff9c <xTaskGetSchedulerState>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d102      	bne.n	800e8ce <xQueueReceive+0x7a>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d101      	bne.n	800e8d2 <xQueueReceive+0x7e>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	e000      	b.n	800e8d4 <xQueueReceive+0x80>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d10d      	bne.n	800e8f4 <xQueueReceive+0xa0>
	__asm volatile
 800e8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8dc:	b672      	cpsid	i
 800e8de:	f383 8811 	msr	BASEPRI, r3
 800e8e2:	f3bf 8f6f 	isb	sy
 800e8e6:	f3bf 8f4f 	dsb	sy
 800e8ea:	b662      	cpsie	i
 800e8ec:	61bb      	str	r3, [r7, #24]
}
 800e8ee:	bf00      	nop
 800e8f0:	bf00      	nop
 800e8f2:	e7fd      	b.n	800e8f0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8f4:	f002 f9ea 	bl	8010ccc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e900:	2b00      	cmp	r3, #0
 800e902:	d01f      	beq.n	800e944 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e904:	68b9      	ldr	r1, [r7, #8]
 800e906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e908:	f000 fb16 	bl	800ef38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e90e:	1e5a      	subs	r2, r3, #1
 800e910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e912:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e916:	691b      	ldr	r3, [r3, #16]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00f      	beq.n	800e93c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91e:	3310      	adds	r3, #16
 800e920:	4618      	mov	r0, r3
 800e922:	f001 f959 	bl	800fbd8 <xTaskRemoveFromEventList>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d007      	beq.n	800e93c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e92c:	4b3c      	ldr	r3, [pc, #240]	@ (800ea20 <xQueueReceive+0x1cc>)
 800e92e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e932:	601a      	str	r2, [r3, #0]
 800e934:	f3bf 8f4f 	dsb	sy
 800e938:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e93c:	f002 f9fc 	bl	8010d38 <vPortExitCritical>
				return pdPASS;
 800e940:	2301      	movs	r3, #1
 800e942:	e069      	b.n	800ea18 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d103      	bne.n	800e952 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e94a:	f002 f9f5 	bl	8010d38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e94e:	2300      	movs	r3, #0
 800e950:	e062      	b.n	800ea18 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e954:	2b00      	cmp	r3, #0
 800e956:	d106      	bne.n	800e966 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e958:	f107 0310 	add.w	r3, r7, #16
 800e95c:	4618      	mov	r0, r3
 800e95e:	f001 fa09 	bl	800fd74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e962:	2301      	movs	r3, #1
 800e964:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e966:	f002 f9e7 	bl	8010d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e96a:	f000 fe85 	bl	800f678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e96e:	f002 f9ad 	bl	8010ccc <vPortEnterCritical>
 800e972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e974:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e978:	b25b      	sxtb	r3, r3
 800e97a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e97e:	d103      	bne.n	800e988 <xQueueReceive+0x134>
 800e980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e982:	2200      	movs	r2, #0
 800e984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e98a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e98e:	b25b      	sxtb	r3, r3
 800e990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e994:	d103      	bne.n	800e99e <xQueueReceive+0x14a>
 800e996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e998:	2200      	movs	r2, #0
 800e99a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e99e:	f002 f9cb 	bl	8010d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9a2:	1d3a      	adds	r2, r7, #4
 800e9a4:	f107 0310 	add.w	r3, r7, #16
 800e9a8:	4611      	mov	r1, r2
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f001 f9f8 	bl	800fda0 <xTaskCheckForTimeOut>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d123      	bne.n	800e9fe <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9b8:	f000 fb36 	bl	800f028 <prvIsQueueEmpty>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d017      	beq.n	800e9f2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c4:	3324      	adds	r3, #36	@ 0x24
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f001 f86c 	bl	800faa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9d2:	f000 fad7 	bl	800ef84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9d6:	f000 fe5d 	bl	800f694 <xTaskResumeAll>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d189      	bne.n	800e8f4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800ea20 <xQueueReceive+0x1cc>)
 800e9e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9e6:	601a      	str	r2, [r3, #0]
 800e9e8:	f3bf 8f4f 	dsb	sy
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	e780      	b.n	800e8f4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e9f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9f4:	f000 fac6 	bl	800ef84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9f8:	f000 fe4c 	bl	800f694 <xTaskResumeAll>
 800e9fc:	e77a      	b.n	800e8f4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e9fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea00:	f000 fac0 	bl	800ef84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea04:	f000 fe46 	bl	800f694 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea0a:	f000 fb0d 	bl	800f028 <prvIsQueueEmpty>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f43f af6f 	beq.w	800e8f4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3730      	adds	r7, #48	@ 0x30
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	e000ed04 	.word	0xe000ed04

0800ea24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b08e      	sub	sp, #56	@ 0x38
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea36:	2300      	movs	r3, #0
 800ea38:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d10d      	bne.n	800ea5c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800ea40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea44:	b672      	cpsid	i
 800ea46:	f383 8811 	msr	BASEPRI, r3
 800ea4a:	f3bf 8f6f 	isb	sy
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	b662      	cpsie	i
 800ea54:	623b      	str	r3, [r7, #32]
}
 800ea56:	bf00      	nop
 800ea58:	bf00      	nop
 800ea5a:	e7fd      	b.n	800ea58 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d00d      	beq.n	800ea80 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ea64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea68:	b672      	cpsid	i
 800ea6a:	f383 8811 	msr	BASEPRI, r3
 800ea6e:	f3bf 8f6f 	isb	sy
 800ea72:	f3bf 8f4f 	dsb	sy
 800ea76:	b662      	cpsie	i
 800ea78:	61fb      	str	r3, [r7, #28]
}
 800ea7a:	bf00      	nop
 800ea7c:	bf00      	nop
 800ea7e:	e7fd      	b.n	800ea7c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea80:	f001 fa8c 	bl	800ff9c <xTaskGetSchedulerState>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d102      	bne.n	800ea90 <xQueueSemaphoreTake+0x6c>
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d101      	bne.n	800ea94 <xQueueSemaphoreTake+0x70>
 800ea90:	2301      	movs	r3, #1
 800ea92:	e000      	b.n	800ea96 <xQueueSemaphoreTake+0x72>
 800ea94:	2300      	movs	r3, #0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d10d      	bne.n	800eab6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800ea9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea9e:	b672      	cpsid	i
 800eaa0:	f383 8811 	msr	BASEPRI, r3
 800eaa4:	f3bf 8f6f 	isb	sy
 800eaa8:	f3bf 8f4f 	dsb	sy
 800eaac:	b662      	cpsie	i
 800eaae:	61bb      	str	r3, [r7, #24]
}
 800eab0:	bf00      	nop
 800eab2:	bf00      	nop
 800eab4:	e7fd      	b.n	800eab2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eab6:	f002 f909 	bl	8010ccc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eaba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eabe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d024      	beq.n	800eb10 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac8:	1e5a      	subs	r2, r3, #1
 800eaca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eacc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d104      	bne.n	800eae0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ead6:	f001 fbfb 	bl	80102d0 <pvTaskIncrementMutexHeldCount>
 800eada:	4602      	mov	r2, r0
 800eadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eade:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00f      	beq.n	800eb08 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaea:	3310      	adds	r3, #16
 800eaec:	4618      	mov	r0, r3
 800eaee:	f001 f873 	bl	800fbd8 <xTaskRemoveFromEventList>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d007      	beq.n	800eb08 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eaf8:	4b55      	ldr	r3, [pc, #340]	@ (800ec50 <xQueueSemaphoreTake+0x22c>)
 800eafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eafe:	601a      	str	r2, [r3, #0]
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb08:	f002 f916 	bl	8010d38 <vPortExitCritical>
				return pdPASS;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	e09a      	b.n	800ec46 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d114      	bne.n	800eb40 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00d      	beq.n	800eb38 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800eb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb20:	b672      	cpsid	i
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	b662      	cpsie	i
 800eb30:	617b      	str	r3, [r7, #20]
}
 800eb32:	bf00      	nop
 800eb34:	bf00      	nop
 800eb36:	e7fd      	b.n	800eb34 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb38:	f002 f8fe 	bl	8010d38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	e082      	b.n	800ec46 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d106      	bne.n	800eb54 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb46:	f107 030c 	add.w	r3, r7, #12
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f001 f912 	bl	800fd74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb50:	2301      	movs	r3, #1
 800eb52:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb54:	f002 f8f0 	bl	8010d38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb58:	f000 fd8e 	bl	800f678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb5c:	f002 f8b6 	bl	8010ccc <vPortEnterCritical>
 800eb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb66:	b25b      	sxtb	r3, r3
 800eb68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb6c:	d103      	bne.n	800eb76 <xQueueSemaphoreTake+0x152>
 800eb6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb7c:	b25b      	sxtb	r3, r3
 800eb7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb82:	d103      	bne.n	800eb8c <xQueueSemaphoreTake+0x168>
 800eb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb86:	2200      	movs	r2, #0
 800eb88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb8c:	f002 f8d4 	bl	8010d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb90:	463a      	mov	r2, r7
 800eb92:	f107 030c 	add.w	r3, r7, #12
 800eb96:	4611      	mov	r1, r2
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f001 f901 	bl	800fda0 <xTaskCheckForTimeOut>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d132      	bne.n	800ec0a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eba4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eba6:	f000 fa3f 	bl	800f028 <prvIsQueueEmpty>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d026      	beq.n	800ebfe <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d109      	bne.n	800ebcc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ebb8:	f002 f888 	bl	8010ccc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ebbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f001 fa09 	bl	800ffd8 <xTaskPriorityInherit>
 800ebc6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ebc8:	f002 f8b6 	bl	8010d38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebce:	3324      	adds	r3, #36	@ 0x24
 800ebd0:	683a      	ldr	r2, [r7, #0]
 800ebd2:	4611      	mov	r1, r2
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f000 ff67 	bl	800faa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebdc:	f000 f9d2 	bl	800ef84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebe0:	f000 fd58 	bl	800f694 <xTaskResumeAll>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f47f af65 	bne.w	800eab6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ebec:	4b18      	ldr	r3, [pc, #96]	@ (800ec50 <xQueueSemaphoreTake+0x22c>)
 800ebee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebf2:	601a      	str	r2, [r3, #0]
 800ebf4:	f3bf 8f4f 	dsb	sy
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	e75b      	b.n	800eab6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ebfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec00:	f000 f9c0 	bl	800ef84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec04:	f000 fd46 	bl	800f694 <xTaskResumeAll>
 800ec08:	e755      	b.n	800eab6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec0c:	f000 f9ba 	bl	800ef84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec10:	f000 fd40 	bl	800f694 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec16:	f000 fa07 	bl	800f028 <prvIsQueueEmpty>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f43f af4a 	beq.w	800eab6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ec22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00d      	beq.n	800ec44 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ec28:	f002 f850 	bl	8010ccc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec2e:	f000 f901 	bl	800ee34 <prvGetDisinheritPriorityAfterTimeout>
 800ec32:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f001 faa8 	bl	8010190 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ec40:	f002 f87a 	bl	8010d38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3738      	adds	r7, #56	@ 0x38
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	e000ed04 	.word	0xe000ed04

0800ec54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b08e      	sub	sp, #56	@ 0x38
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ec64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d10d      	bne.n	800ec86 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800ec6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec6e:	b672      	cpsid	i
 800ec70:	f383 8811 	msr	BASEPRI, r3
 800ec74:	f3bf 8f6f 	isb	sy
 800ec78:	f3bf 8f4f 	dsb	sy
 800ec7c:	b662      	cpsie	i
 800ec7e:	623b      	str	r3, [r7, #32]
}
 800ec80:	bf00      	nop
 800ec82:	bf00      	nop
 800ec84:	e7fd      	b.n	800ec82 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d103      	bne.n	800ec94 <xQueueReceiveFromISR+0x40>
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d101      	bne.n	800ec98 <xQueueReceiveFromISR+0x44>
 800ec94:	2301      	movs	r3, #1
 800ec96:	e000      	b.n	800ec9a <xQueueReceiveFromISR+0x46>
 800ec98:	2300      	movs	r3, #0
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10d      	bne.n	800ecba <xQueueReceiveFromISR+0x66>
	__asm volatile
 800ec9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eca2:	b672      	cpsid	i
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	b662      	cpsie	i
 800ecb2:	61fb      	str	r3, [r7, #28]
}
 800ecb4:	bf00      	nop
 800ecb6:	bf00      	nop
 800ecb8:	e7fd      	b.n	800ecb6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecba:	f002 f8ef 	bl	8010e9c <vPortValidateInterruptPriority>
	__asm volatile
 800ecbe:	f3ef 8211 	mrs	r2, BASEPRI
 800ecc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc6:	b672      	cpsid	i
 800ecc8:	f383 8811 	msr	BASEPRI, r3
 800eccc:	f3bf 8f6f 	isb	sy
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	b662      	cpsie	i
 800ecd6:	61ba      	str	r2, [r7, #24]
 800ecd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ecda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ecdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ece2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ece4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d02f      	beq.n	800ed4a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ecea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ecf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ecf4:	68b9      	ldr	r1, [r7, #8]
 800ecf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ecf8:	f000 f91e 	bl	800ef38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ecfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecfe:	1e5a      	subs	r2, r3, #1
 800ed00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ed04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ed08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed0c:	d112      	bne.n	800ed34 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed10:	691b      	ldr	r3, [r3, #16]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d016      	beq.n	800ed44 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed18:	3310      	adds	r3, #16
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f000 ff5c 	bl	800fbd8 <xTaskRemoveFromEventList>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00e      	beq.n	800ed44 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00b      	beq.n	800ed44 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	601a      	str	r2, [r3, #0]
 800ed32:	e007      	b.n	800ed44 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ed34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed38:	3301      	adds	r3, #1
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	b25a      	sxtb	r2, r3
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ed44:	2301      	movs	r3, #1
 800ed46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed48:	e001      	b.n	800ed4e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed50:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	f383 8811 	msr	BASEPRI, r3
}
 800ed58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3738      	adds	r7, #56	@ 0x38
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10d      	bne.n	800ed8e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed76:	b672      	cpsid	i
 800ed78:	f383 8811 	msr	BASEPRI, r3
 800ed7c:	f3bf 8f6f 	isb	sy
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	b662      	cpsie	i
 800ed86:	60bb      	str	r3, [r7, #8]
}
 800ed88:	bf00      	nop
 800ed8a:	bf00      	nop
 800ed8c:	e7fd      	b.n	800ed8a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800ed8e:	f001 ff9d 	bl	8010ccc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed96:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ed98:	f001 ffce 	bl	8010d38 <vPortExitCritical>

	return uxReturn;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800eda6:	b480      	push	{r7}
 800eda8:	b087      	sub	sp, #28
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d10d      	bne.n	800edd4 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800edb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edbc:	b672      	cpsid	i
 800edbe:	f383 8811 	msr	BASEPRI, r3
 800edc2:	f3bf 8f6f 	isb	sy
 800edc6:	f3bf 8f4f 	dsb	sy
 800edca:	b662      	cpsie	i
 800edcc:	60fb      	str	r3, [r7, #12]
}
 800edce:	bf00      	nop
 800edd0:	bf00      	nop
 800edd2:	e7fd      	b.n	800edd0 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edd8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800edda:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800eddc:	4618      	mov	r0, r3
 800edde:	371c      	adds	r7, #28
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr

0800ede8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d10d      	bne.n	800ee16 <vQueueDelete+0x2e>
	__asm volatile
 800edfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edfe:	b672      	cpsid	i
 800ee00:	f383 8811 	msr	BASEPRI, r3
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	b662      	cpsie	i
 800ee0e:	60bb      	str	r3, [r7, #8]
}
 800ee10:	bf00      	nop
 800ee12:	bf00      	nop
 800ee14:	e7fd      	b.n	800ee12 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f000 f95e 	bl	800f0d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d102      	bne.n	800ee2c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f002 f950 	bl	80110cc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ee2c:	bf00      	nop
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ee34:	b480      	push	{r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d006      	beq.n	800ee52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ee4e:	60fb      	str	r3, [r7, #12]
 800ee50:	e001      	b.n	800ee56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ee52:	2300      	movs	r3, #0
 800ee54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ee56:	68fb      	ldr	r3, [r7, #12]
	}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3714      	adds	r7, #20
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b086      	sub	sp, #24
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee70:	2300      	movs	r3, #0
 800ee72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d10d      	bne.n	800ee9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d14d      	bne.n	800ef26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f001 f90a 	bl	80100a8 <xTaskPriorityDisinherit>
 800ee94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	609a      	str	r2, [r3, #8]
 800ee9c:	e043      	b.n	800ef26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d119      	bne.n	800eed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6858      	ldr	r0, [r3, #4]
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeac:	461a      	mov	r2, r3
 800eeae:	68b9      	ldr	r1, [r7, #8]
 800eeb0:	f011 fef9 	bl	8020ca6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	685a      	ldr	r2, [r3, #4]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eebc:	441a      	add	r2, r3
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	685a      	ldr	r2, [r3, #4]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d32b      	bcc.n	800ef26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	605a      	str	r2, [r3, #4]
 800eed6:	e026      	b.n	800ef26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	68d8      	ldr	r0, [r3, #12]
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eee0:	461a      	mov	r2, r3
 800eee2:	68b9      	ldr	r1, [r7, #8]
 800eee4:	f011 fedf 	bl	8020ca6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	68da      	ldr	r2, [r3, #12]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eef0:	425b      	negs	r3, r3
 800eef2:	441a      	add	r2, r3
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	68da      	ldr	r2, [r3, #12]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d207      	bcs.n	800ef14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	689a      	ldr	r2, [r3, #8]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef0c:	425b      	negs	r3, r3
 800ef0e:	441a      	add	r2, r3
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b02      	cmp	r3, #2
 800ef18:	d105      	bne.n	800ef26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	1c5a      	adds	r2, r3, #1
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ef2e:	697b      	ldr	r3, [r7, #20]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3718      	adds	r7, #24
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d018      	beq.n	800ef7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	68da      	ldr	r2, [r3, #12]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef52:	441a      	add	r2, r3
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	68da      	ldr	r2, [r3, #12]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	689b      	ldr	r3, [r3, #8]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d303      	bcc.n	800ef6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	68d9      	ldr	r1, [r3, #12]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef74:	461a      	mov	r2, r3
 800ef76:	6838      	ldr	r0, [r7, #0]
 800ef78:	f011 fe95 	bl	8020ca6 <memcpy>
	}
}
 800ef7c:	bf00      	nop
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ef8c:	f001 fe9e 	bl	8010ccc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef98:	e011      	b.n	800efbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d012      	beq.n	800efc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	3324      	adds	r3, #36	@ 0x24
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 fe16 	bl	800fbd8 <xTaskRemoveFromEventList>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d001      	beq.n	800efb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800efb2:	f000 ff5d 	bl	800fe70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800efb6:	7bfb      	ldrb	r3, [r7, #15]
 800efb8:	3b01      	subs	r3, #1
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800efbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	dce9      	bgt.n	800ef9a <prvUnlockQueue+0x16>
 800efc6:	e000      	b.n	800efca <prvUnlockQueue+0x46>
					break;
 800efc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	22ff      	movs	r2, #255	@ 0xff
 800efce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800efd2:	f001 feb1 	bl	8010d38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800efd6:	f001 fe79 	bl	8010ccc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800efe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800efe2:	e011      	b.n	800f008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	691b      	ldr	r3, [r3, #16]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d012      	beq.n	800f012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	3310      	adds	r3, #16
 800eff0:	4618      	mov	r0, r3
 800eff2:	f000 fdf1 	bl	800fbd8 <xTaskRemoveFromEventList>
 800eff6:	4603      	mov	r3, r0
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d001      	beq.n	800f000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800effc:	f000 ff38 	bl	800fe70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f000:	7bbb      	ldrb	r3, [r7, #14]
 800f002:	3b01      	subs	r3, #1
 800f004:	b2db      	uxtb	r3, r3
 800f006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	dce9      	bgt.n	800efe4 <prvUnlockQueue+0x60>
 800f010:	e000      	b.n	800f014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	22ff      	movs	r2, #255	@ 0xff
 800f018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f01c:	f001 fe8c 	bl	8010d38 <vPortExitCritical>
}
 800f020:	bf00      	nop
 800f022:	3710      	adds	r7, #16
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f030:	f001 fe4c 	bl	8010ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d102      	bne.n	800f042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f03c:	2301      	movs	r3, #1
 800f03e:	60fb      	str	r3, [r7, #12]
 800f040:	e001      	b.n	800f046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f042:	2300      	movs	r3, #0
 800f044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f046:	f001 fe77 	bl	8010d38 <vPortExitCritical>

	return xReturn;
 800f04a:	68fb      	ldr	r3, [r7, #12]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3710      	adds	r7, #16
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f05c:	f001 fe36 	bl	8010ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f068:	429a      	cmp	r2, r3
 800f06a:	d102      	bne.n	800f072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f06c:	2301      	movs	r3, #1
 800f06e:	60fb      	str	r3, [r7, #12]
 800f070:	e001      	b.n	800f076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f072:	2300      	movs	r3, #0
 800f074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f076:	f001 fe5f 	bl	8010d38 <vPortExitCritical>

	return xReturn;
 800f07a:	68fb      	ldr	r3, [r7, #12]
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3710      	adds	r7, #16
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f084:	b480      	push	{r7}
 800f086:	b085      	sub	sp, #20
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f08e:	2300      	movs	r3, #0
 800f090:	60fb      	str	r3, [r7, #12]
 800f092:	e014      	b.n	800f0be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f094:	4a0f      	ldr	r2, [pc, #60]	@ (800f0d4 <vQueueAddToRegistry+0x50>)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10b      	bne.n	800f0b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f0a0:	490c      	ldr	r1, [pc, #48]	@ (800f0d4 <vQueueAddToRegistry+0x50>)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	683a      	ldr	r2, [r7, #0]
 800f0a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f0aa:	4a0a      	ldr	r2, [pc, #40]	@ (800f0d4 <vQueueAddToRegistry+0x50>)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	4413      	add	r3, r2
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f0b6:	e006      	b.n	800f0c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	60fb      	str	r3, [r7, #12]
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2b0b      	cmp	r3, #11
 800f0c2:	d9e7      	bls.n	800f094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f0c4:	bf00      	nop
 800f0c6:	bf00      	nop
 800f0c8:	3714      	adds	r7, #20
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop
 800f0d4:	20006fb4 	.word	0x20006fb4

0800f0d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	e016      	b.n	800f114 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f0e6:	4a10      	ldr	r2, [pc, #64]	@ (800f128 <vQueueUnregisterQueue+0x50>)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	00db      	lsls	r3, r3, #3
 800f0ec:	4413      	add	r3, r2
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d10b      	bne.n	800f10e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f0f6:	4a0c      	ldr	r2, [pc, #48]	@ (800f128 <vQueueUnregisterQueue+0x50>)
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2100      	movs	r1, #0
 800f0fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f100:	4a09      	ldr	r2, [pc, #36]	@ (800f128 <vQueueUnregisterQueue+0x50>)
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	00db      	lsls	r3, r3, #3
 800f106:	4413      	add	r3, r2
 800f108:	2200      	movs	r2, #0
 800f10a:	605a      	str	r2, [r3, #4]
				break;
 800f10c:	e006      	b.n	800f11c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3301      	adds	r3, #1
 800f112:	60fb      	str	r3, [r7, #12]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2b0b      	cmp	r3, #11
 800f118:	d9e5      	bls.n	800f0e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f11a:	bf00      	nop
 800f11c:	bf00      	nop
 800f11e:	3714      	adds	r7, #20
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr
 800f128:	20006fb4 	.word	0x20006fb4

0800f12c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b086      	sub	sp, #24
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f13c:	f001 fdc6 	bl	8010ccc <vPortEnterCritical>
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f146:	b25b      	sxtb	r3, r3
 800f148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f14c:	d103      	bne.n	800f156 <vQueueWaitForMessageRestricted+0x2a>
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	2200      	movs	r2, #0
 800f152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f15c:	b25b      	sxtb	r3, r3
 800f15e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f162:	d103      	bne.n	800f16c <vQueueWaitForMessageRestricted+0x40>
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	2200      	movs	r2, #0
 800f168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f16c:	f001 fde4 	bl	8010d38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f174:	2b00      	cmp	r3, #0
 800f176:	d106      	bne.n	800f186 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	3324      	adds	r3, #36	@ 0x24
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	68b9      	ldr	r1, [r7, #8]
 800f180:	4618      	mov	r0, r3
 800f182:	f000 fcfb 	bl	800fb7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f186:	6978      	ldr	r0, [r7, #20]
 800f188:	f7ff fefc 	bl	800ef84 <prvUnlockQueue>
	}
 800f18c:	bf00      	nop
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f194:	b580      	push	{r7, lr}
 800f196:	b08e      	sub	sp, #56	@ 0x38
 800f198:	af04      	add	r7, sp, #16
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
 800f1a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d10d      	bne.n	800f1c4 <xTaskCreateStatic+0x30>
	__asm volatile
 800f1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ac:	b672      	cpsid	i
 800f1ae:	f383 8811 	msr	BASEPRI, r3
 800f1b2:	f3bf 8f6f 	isb	sy
 800f1b6:	f3bf 8f4f 	dsb	sy
 800f1ba:	b662      	cpsie	i
 800f1bc:	623b      	str	r3, [r7, #32]
}
 800f1be:	bf00      	nop
 800f1c0:	bf00      	nop
 800f1c2:	e7fd      	b.n	800f1c0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d10d      	bne.n	800f1e6 <xTaskCreateStatic+0x52>
	__asm volatile
 800f1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ce:	b672      	cpsid	i
 800f1d0:	f383 8811 	msr	BASEPRI, r3
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	f3bf 8f4f 	dsb	sy
 800f1dc:	b662      	cpsie	i
 800f1de:	61fb      	str	r3, [r7, #28]
}
 800f1e0:	bf00      	nop
 800f1e2:	bf00      	nop
 800f1e4:	e7fd      	b.n	800f1e2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f1e6:	23a8      	movs	r3, #168	@ 0xa8
 800f1e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	2ba8      	cmp	r3, #168	@ 0xa8
 800f1ee:	d00d      	beq.n	800f20c <xTaskCreateStatic+0x78>
	__asm volatile
 800f1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f4:	b672      	cpsid	i
 800f1f6:	f383 8811 	msr	BASEPRI, r3
 800f1fa:	f3bf 8f6f 	isb	sy
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	b662      	cpsie	i
 800f204:	61bb      	str	r3, [r7, #24]
}
 800f206:	bf00      	nop
 800f208:	bf00      	nop
 800f20a:	e7fd      	b.n	800f208 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f20c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f210:	2b00      	cmp	r3, #0
 800f212:	d01e      	beq.n	800f252 <xTaskCreateStatic+0xbe>
 800f214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f216:	2b00      	cmp	r3, #0
 800f218:	d01b      	beq.n	800f252 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f220:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f222:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f226:	2202      	movs	r2, #2
 800f228:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f22c:	2300      	movs	r3, #0
 800f22e:	9303      	str	r3, [sp, #12]
 800f230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f232:	9302      	str	r3, [sp, #8]
 800f234:	f107 0314 	add.w	r3, r7, #20
 800f238:	9301      	str	r3, [sp, #4]
 800f23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	68b9      	ldr	r1, [r7, #8]
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f000 f851 	bl	800f2ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f24a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f24c:	f000 f8f8 	bl	800f440 <prvAddNewTaskToReadyList>
 800f250:	e001      	b.n	800f256 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800f252:	2300      	movs	r3, #0
 800f254:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f256:	697b      	ldr	r3, [r7, #20]
	}
 800f258:	4618      	mov	r0, r3
 800f25a:	3728      	adds	r7, #40	@ 0x28
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f260:	b580      	push	{r7, lr}
 800f262:	b08c      	sub	sp, #48	@ 0x30
 800f264:	af04      	add	r7, sp, #16
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	60b9      	str	r1, [r7, #8]
 800f26a:	603b      	str	r3, [r7, #0]
 800f26c:	4613      	mov	r3, r2
 800f26e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f270:	88fb      	ldrh	r3, [r7, #6]
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	4618      	mov	r0, r3
 800f276:	f001 fe57 	bl	8010f28 <pvPortMalloc>
 800f27a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d00e      	beq.n	800f2a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f282:	20a8      	movs	r0, #168	@ 0xa8
 800f284:	f001 fe50 	bl	8010f28 <pvPortMalloc>
 800f288:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d003      	beq.n	800f298 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	697a      	ldr	r2, [r7, #20]
 800f294:	631a      	str	r2, [r3, #48]	@ 0x30
 800f296:	e005      	b.n	800f2a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f298:	6978      	ldr	r0, [r7, #20]
 800f29a:	f001 ff17 	bl	80110cc <vPortFree>
 800f29e:	e001      	b.n	800f2a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d017      	beq.n	800f2da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f2b2:	88fa      	ldrh	r2, [r7, #6]
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	9303      	str	r3, [sp, #12]
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	9302      	str	r3, [sp, #8]
 800f2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2be:	9301      	str	r3, [sp, #4]
 800f2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c2:	9300      	str	r3, [sp, #0]
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	68b9      	ldr	r1, [r7, #8]
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f000 f80f 	bl	800f2ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2ce:	69f8      	ldr	r0, [r7, #28]
 800f2d0:	f000 f8b6 	bl	800f440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	61bb      	str	r3, [r7, #24]
 800f2d8:	e002      	b.n	800f2e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f2da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f2de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f2e0:	69bb      	ldr	r3, [r7, #24]
	}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3720      	adds	r7, #32
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
	...

0800f2ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b088      	sub	sp, #32
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	607a      	str	r2, [r7, #4]
 800f2f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	461a      	mov	r2, r3
 800f304:	21a5      	movs	r1, #165	@ 0xa5
 800f306:	f011 fc59 	bl	8020bbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f30e:	6879      	ldr	r1, [r7, #4]
 800f310:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f314:	440b      	add	r3, r1
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	4413      	add	r3, r2
 800f31a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	f023 0307 	bic.w	r3, r3, #7
 800f322:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	f003 0307 	and.w	r3, r3, #7
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00d      	beq.n	800f34a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800f32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f332:	b672      	cpsid	i
 800f334:	f383 8811 	msr	BASEPRI, r3
 800f338:	f3bf 8f6f 	isb	sy
 800f33c:	f3bf 8f4f 	dsb	sy
 800f340:	b662      	cpsie	i
 800f342:	617b      	str	r3, [r7, #20]
}
 800f344:	bf00      	nop
 800f346:	bf00      	nop
 800f348:	e7fd      	b.n	800f346 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d01f      	beq.n	800f390 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f350:	2300      	movs	r3, #0
 800f352:	61fb      	str	r3, [r7, #28]
 800f354:	e012      	b.n	800f37c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f356:	68ba      	ldr	r2, [r7, #8]
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	4413      	add	r3, r2
 800f35c:	7819      	ldrb	r1, [r3, #0]
 800f35e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	4413      	add	r3, r2
 800f364:	3334      	adds	r3, #52	@ 0x34
 800f366:	460a      	mov	r2, r1
 800f368:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	4413      	add	r3, r2
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d006      	beq.n	800f384 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	3301      	adds	r3, #1
 800f37a:	61fb      	str	r3, [r7, #28]
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	2b0f      	cmp	r3, #15
 800f380:	d9e9      	bls.n	800f356 <prvInitialiseNewTask+0x6a>
 800f382:	e000      	b.n	800f386 <prvInitialiseNewTask+0x9a>
			{
				break;
 800f384:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f388:	2200      	movs	r2, #0
 800f38a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f38e:	e003      	b.n	800f398 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f392:	2200      	movs	r2, #0
 800f394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f39a:	2b37      	cmp	r3, #55	@ 0x37
 800f39c:	d901      	bls.n	800f3a2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f39e:	2337      	movs	r3, #55	@ 0x37
 800f3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b6:	3304      	adds	r3, #4
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7fe fce5 	bl	800dd88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c0:	3318      	adds	r3, #24
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fe fce0 	bl	800dd88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3dc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f0:	3354      	adds	r3, #84	@ 0x54
 800f3f2:	224c      	movs	r2, #76	@ 0x4c
 800f3f4:	2100      	movs	r1, #0
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f011 fbe0 	bl	8020bbc <memset>
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fe:	4a0d      	ldr	r2, [pc, #52]	@ (800f434 <prvInitialiseNewTask+0x148>)
 800f400:	659a      	str	r2, [r3, #88]	@ 0x58
 800f402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f404:	4a0c      	ldr	r2, [pc, #48]	@ (800f438 <prvInitialiseNewTask+0x14c>)
 800f406:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f40a:	4a0c      	ldr	r2, [pc, #48]	@ (800f43c <prvInitialiseNewTask+0x150>)
 800f40c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f40e:	683a      	ldr	r2, [r7, #0]
 800f410:	68f9      	ldr	r1, [r7, #12]
 800f412:	69b8      	ldr	r0, [r7, #24]
 800f414:	f001 fb4c 	bl	8010ab0 <pxPortInitialiseStack>
 800f418:	4602      	mov	r2, r0
 800f41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f41c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f420:	2b00      	cmp	r3, #0
 800f422:	d002      	beq.n	800f42a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f428:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f42a:	bf00      	nop
 800f42c:	3720      	adds	r7, #32
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	20022e54 	.word	0x20022e54
 800f438:	20022ebc 	.word	0x20022ebc
 800f43c:	20022f24 	.word	0x20022f24

0800f440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f448:	f001 fc40 	bl	8010ccc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f44c:	4b2d      	ldr	r3, [pc, #180]	@ (800f504 <prvAddNewTaskToReadyList+0xc4>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	3301      	adds	r3, #1
 800f452:	4a2c      	ldr	r2, [pc, #176]	@ (800f504 <prvAddNewTaskToReadyList+0xc4>)
 800f454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f456:	4b2c      	ldr	r3, [pc, #176]	@ (800f508 <prvAddNewTaskToReadyList+0xc8>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d109      	bne.n	800f472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f45e:	4a2a      	ldr	r2, [pc, #168]	@ (800f508 <prvAddNewTaskToReadyList+0xc8>)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f464:	4b27      	ldr	r3, [pc, #156]	@ (800f504 <prvAddNewTaskToReadyList+0xc4>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d110      	bne.n	800f48e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f46c:	f000 fd24 	bl	800feb8 <prvInitialiseTaskLists>
 800f470:	e00d      	b.n	800f48e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f472:	4b26      	ldr	r3, [pc, #152]	@ (800f50c <prvAddNewTaskToReadyList+0xcc>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d109      	bne.n	800f48e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f47a:	4b23      	ldr	r3, [pc, #140]	@ (800f508 <prvAddNewTaskToReadyList+0xc8>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f484:	429a      	cmp	r2, r3
 800f486:	d802      	bhi.n	800f48e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f488:	4a1f      	ldr	r2, [pc, #124]	@ (800f508 <prvAddNewTaskToReadyList+0xc8>)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f48e:	4b20      	ldr	r3, [pc, #128]	@ (800f510 <prvAddNewTaskToReadyList+0xd0>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	3301      	adds	r3, #1
 800f494:	4a1e      	ldr	r2, [pc, #120]	@ (800f510 <prvAddNewTaskToReadyList+0xd0>)
 800f496:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f498:	4b1d      	ldr	r3, [pc, #116]	@ (800f510 <prvAddNewTaskToReadyList+0xd0>)
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4a4:	4b1b      	ldr	r3, [pc, #108]	@ (800f514 <prvAddNewTaskToReadyList+0xd4>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d903      	bls.n	800f4b4 <prvAddNewTaskToReadyList+0x74>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4b0:	4a18      	ldr	r2, [pc, #96]	@ (800f514 <prvAddNewTaskToReadyList+0xd4>)
 800f4b2:	6013      	str	r3, [r2, #0]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4b8:	4613      	mov	r3, r2
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	4413      	add	r3, r2
 800f4be:	009b      	lsls	r3, r3, #2
 800f4c0:	4a15      	ldr	r2, [pc, #84]	@ (800f518 <prvAddNewTaskToReadyList+0xd8>)
 800f4c2:	441a      	add	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	3304      	adds	r3, #4
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	4610      	mov	r0, r2
 800f4cc:	f7fe fc69 	bl	800dda2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f4d0:	f001 fc32 	bl	8010d38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f4d4:	4b0d      	ldr	r3, [pc, #52]	@ (800f50c <prvAddNewTaskToReadyList+0xcc>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00e      	beq.n	800f4fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f4dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f508 <prvAddNewTaskToReadyList+0xc8>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d207      	bcs.n	800f4fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f4ea:	4b0c      	ldr	r3, [pc, #48]	@ (800f51c <prvAddNewTaskToReadyList+0xdc>)
 800f4ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	f3bf 8f4f 	dsb	sy
 800f4f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4fa:	bf00      	nop
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	200074d0 	.word	0x200074d0
 800f508:	20007014 	.word	0x20007014
 800f50c:	200074dc 	.word	0x200074dc
 800f510:	200074ec 	.word	0x200074ec
 800f514:	200074d8 	.word	0x200074d8
 800f518:	20007018 	.word	0x20007018
 800f51c:	e000ed04 	.word	0xe000ed04

0800f520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f528:	2300      	movs	r3, #0
 800f52a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d01a      	beq.n	800f568 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f532:	4b15      	ldr	r3, [pc, #84]	@ (800f588 <vTaskDelay+0x68>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00d      	beq.n	800f556 <vTaskDelay+0x36>
	__asm volatile
 800f53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f53e:	b672      	cpsid	i
 800f540:	f383 8811 	msr	BASEPRI, r3
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	b662      	cpsie	i
 800f54e:	60bb      	str	r3, [r7, #8]
}
 800f550:	bf00      	nop
 800f552:	bf00      	nop
 800f554:	e7fd      	b.n	800f552 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f556:	f000 f88f 	bl	800f678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f55a:	2100      	movs	r1, #0
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 fecb 	bl	80102f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f562:	f000 f897 	bl	800f694 <xTaskResumeAll>
 800f566:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d107      	bne.n	800f57e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f56e:	4b07      	ldr	r3, [pc, #28]	@ (800f58c <vTaskDelay+0x6c>)
 800f570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f574:	601a      	str	r2, [r3, #0]
 800f576:	f3bf 8f4f 	dsb	sy
 800f57a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f57e:	bf00      	nop
 800f580:	3710      	adds	r7, #16
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	200074f8 	.word	0x200074f8
 800f58c:	e000ed04 	.word	0xe000ed04

0800f590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b08a      	sub	sp, #40	@ 0x28
 800f594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f59a:	2300      	movs	r3, #0
 800f59c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f59e:	463a      	mov	r2, r7
 800f5a0:	1d39      	adds	r1, r7, #4
 800f5a2:	f107 0308 	add.w	r3, r7, #8
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fe f994 	bl	800d8d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f5ac:	6839      	ldr	r1, [r7, #0]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	68ba      	ldr	r2, [r7, #8]
 800f5b2:	9202      	str	r2, [sp, #8]
 800f5b4:	9301      	str	r3, [sp, #4]
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	460a      	mov	r2, r1
 800f5be:	4926      	ldr	r1, [pc, #152]	@ (800f658 <vTaskStartScheduler+0xc8>)
 800f5c0:	4826      	ldr	r0, [pc, #152]	@ (800f65c <vTaskStartScheduler+0xcc>)
 800f5c2:	f7ff fde7 	bl	800f194 <xTaskCreateStatic>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	4a25      	ldr	r2, [pc, #148]	@ (800f660 <vTaskStartScheduler+0xd0>)
 800f5ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f5cc:	4b24      	ldr	r3, [pc, #144]	@ (800f660 <vTaskStartScheduler+0xd0>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	617b      	str	r3, [r7, #20]
 800f5d8:	e001      	b.n	800f5de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d102      	bne.n	800f5ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f5e4:	f000 fedc 	bl	80103a0 <xTimerCreateTimerTask>
 800f5e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d11d      	bne.n	800f62c <vTaskStartScheduler+0x9c>
	__asm volatile
 800f5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f4:	b672      	cpsid	i
 800f5f6:	f383 8811 	msr	BASEPRI, r3
 800f5fa:	f3bf 8f6f 	isb	sy
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	b662      	cpsie	i
 800f604:	613b      	str	r3, [r7, #16]
}
 800f606:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f608:	4b16      	ldr	r3, [pc, #88]	@ (800f664 <vTaskStartScheduler+0xd4>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	3354      	adds	r3, #84	@ 0x54
 800f60e:	4a16      	ldr	r2, [pc, #88]	@ (800f668 <vTaskStartScheduler+0xd8>)
 800f610:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f612:	4b16      	ldr	r3, [pc, #88]	@ (800f66c <vTaskStartScheduler+0xdc>)
 800f614:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f618:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f61a:	4b15      	ldr	r3, [pc, #84]	@ (800f670 <vTaskStartScheduler+0xe0>)
 800f61c:	2201      	movs	r2, #1
 800f61e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f620:	4b14      	ldr	r3, [pc, #80]	@ (800f674 <vTaskStartScheduler+0xe4>)
 800f622:	2200      	movs	r2, #0
 800f624:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f626:	f001 fad3 	bl	8010bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f62a:	e011      	b.n	800f650 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f632:	d10d      	bne.n	800f650 <vTaskStartScheduler+0xc0>
	__asm volatile
 800f634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f638:	b672      	cpsid	i
 800f63a:	f383 8811 	msr	BASEPRI, r3
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	f3bf 8f4f 	dsb	sy
 800f646:	b662      	cpsie	i
 800f648:	60fb      	str	r3, [r7, #12]
}
 800f64a:	bf00      	nop
 800f64c:	bf00      	nop
 800f64e:	e7fd      	b.n	800f64c <vTaskStartScheduler+0xbc>
}
 800f650:	bf00      	nop
 800f652:	3718      	adds	r7, #24
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	08021a48 	.word	0x08021a48
 800f65c:	0800fe89 	.word	0x0800fe89
 800f660:	200074f4 	.word	0x200074f4
 800f664:	20007014 	.word	0x20007014
 800f668:	20000080 	.word	0x20000080
 800f66c:	200074f0 	.word	0x200074f0
 800f670:	200074dc 	.word	0x200074dc
 800f674:	200074d4 	.word	0x200074d4

0800f678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f678:	b480      	push	{r7}
 800f67a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f67c:	4b04      	ldr	r3, [pc, #16]	@ (800f690 <vTaskSuspendAll+0x18>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	3301      	adds	r3, #1
 800f682:	4a03      	ldr	r2, [pc, #12]	@ (800f690 <vTaskSuspendAll+0x18>)
 800f684:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f686:	bf00      	nop
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr
 800f690:	200074f8 	.word	0x200074f8

0800f694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f69a:	2300      	movs	r3, #0
 800f69c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f6a2:	4b43      	ldr	r3, [pc, #268]	@ (800f7b0 <xTaskResumeAll+0x11c>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10d      	bne.n	800f6c6 <xTaskResumeAll+0x32>
	__asm volatile
 800f6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ae:	b672      	cpsid	i
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	b662      	cpsie	i
 800f6be:	603b      	str	r3, [r7, #0]
}
 800f6c0:	bf00      	nop
 800f6c2:	bf00      	nop
 800f6c4:	e7fd      	b.n	800f6c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f6c6:	f001 fb01 	bl	8010ccc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f6ca:	4b39      	ldr	r3, [pc, #228]	@ (800f7b0 <xTaskResumeAll+0x11c>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	4a37      	ldr	r2, [pc, #220]	@ (800f7b0 <xTaskResumeAll+0x11c>)
 800f6d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6d4:	4b36      	ldr	r3, [pc, #216]	@ (800f7b0 <xTaskResumeAll+0x11c>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d162      	bne.n	800f7a2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f6dc:	4b35      	ldr	r3, [pc, #212]	@ (800f7b4 <xTaskResumeAll+0x120>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d05e      	beq.n	800f7a2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6e4:	e02f      	b.n	800f746 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6e6:	4b34      	ldr	r3, [pc, #208]	@ (800f7b8 <xTaskResumeAll+0x124>)
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3318      	adds	r3, #24
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fe fbb2 	bl	800de5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	3304      	adds	r3, #4
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fe fbad 	bl	800de5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f706:	4b2d      	ldr	r3, [pc, #180]	@ (800f7bc <xTaskResumeAll+0x128>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d903      	bls.n	800f716 <xTaskResumeAll+0x82>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f712:	4a2a      	ldr	r2, [pc, #168]	@ (800f7bc <xTaskResumeAll+0x128>)
 800f714:	6013      	str	r3, [r2, #0]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f71a:	4613      	mov	r3, r2
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	4413      	add	r3, r2
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	4a27      	ldr	r2, [pc, #156]	@ (800f7c0 <xTaskResumeAll+0x12c>)
 800f724:	441a      	add	r2, r3
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	3304      	adds	r3, #4
 800f72a:	4619      	mov	r1, r3
 800f72c:	4610      	mov	r0, r2
 800f72e:	f7fe fb38 	bl	800dda2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f736:	4b23      	ldr	r3, [pc, #140]	@ (800f7c4 <xTaskResumeAll+0x130>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d302      	bcc.n	800f746 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f740:	4b21      	ldr	r3, [pc, #132]	@ (800f7c8 <xTaskResumeAll+0x134>)
 800f742:	2201      	movs	r2, #1
 800f744:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f746:	4b1c      	ldr	r3, [pc, #112]	@ (800f7b8 <xTaskResumeAll+0x124>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d1cb      	bne.n	800f6e6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d001      	beq.n	800f758 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f754:	f000 fbf2 	bl	800ff3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f758:	4b1c      	ldr	r3, [pc, #112]	@ (800f7cc <xTaskResumeAll+0x138>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d010      	beq.n	800f786 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f764:	f000 f858 	bl	800f818 <xTaskIncrementTick>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d002      	beq.n	800f774 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f76e:	4b16      	ldr	r3, [pc, #88]	@ (800f7c8 <xTaskResumeAll+0x134>)
 800f770:	2201      	movs	r2, #1
 800f772:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	3b01      	subs	r3, #1
 800f778:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1f1      	bne.n	800f764 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f780:	4b12      	ldr	r3, [pc, #72]	@ (800f7cc <xTaskResumeAll+0x138>)
 800f782:	2200      	movs	r2, #0
 800f784:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f786:	4b10      	ldr	r3, [pc, #64]	@ (800f7c8 <xTaskResumeAll+0x134>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d009      	beq.n	800f7a2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f78e:	2301      	movs	r3, #1
 800f790:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f792:	4b0f      	ldr	r3, [pc, #60]	@ (800f7d0 <xTaskResumeAll+0x13c>)
 800f794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f798:	601a      	str	r2, [r3, #0]
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7a2:	f001 fac9 	bl	8010d38 <vPortExitCritical>

	return xAlreadyYielded;
 800f7a6:	68bb      	ldr	r3, [r7, #8]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	200074f8 	.word	0x200074f8
 800f7b4:	200074d0 	.word	0x200074d0
 800f7b8:	200074a8 	.word	0x200074a8
 800f7bc:	200074d8 	.word	0x200074d8
 800f7c0:	20007018 	.word	0x20007018
 800f7c4:	20007014 	.word	0x20007014
 800f7c8:	200074e4 	.word	0x200074e4
 800f7cc:	200074e0 	.word	0x200074e0
 800f7d0:	e000ed04 	.word	0xe000ed04

0800f7d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f7da:	4b05      	ldr	r3, [pc, #20]	@ (800f7f0 <xTaskGetTickCount+0x1c>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f7e0:	687b      	ldr	r3, [r7, #4]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	370c      	adds	r7, #12
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop
 800f7f0:	200074d4 	.word	0x200074d4

0800f7f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7fa:	f001 fb4f 	bl	8010e9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f7fe:	2300      	movs	r3, #0
 800f800:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f802:	4b04      	ldr	r3, [pc, #16]	@ (800f814 <xTaskGetTickCountFromISR+0x20>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f808:	683b      	ldr	r3, [r7, #0]
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	200074d4 	.word	0x200074d4

0800f818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b086      	sub	sp, #24
 800f81c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f81e:	2300      	movs	r3, #0
 800f820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f822:	4b50      	ldr	r3, [pc, #320]	@ (800f964 <xTaskIncrementTick+0x14c>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	f040 808c 	bne.w	800f944 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f82c:	4b4e      	ldr	r3, [pc, #312]	@ (800f968 <xTaskIncrementTick+0x150>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	3301      	adds	r3, #1
 800f832:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f834:	4a4c      	ldr	r2, [pc, #304]	@ (800f968 <xTaskIncrementTick+0x150>)
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d123      	bne.n	800f888 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f840:	4b4a      	ldr	r3, [pc, #296]	@ (800f96c <xTaskIncrementTick+0x154>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00d      	beq.n	800f866 <xTaskIncrementTick+0x4e>
	__asm volatile
 800f84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f84e:	b672      	cpsid	i
 800f850:	f383 8811 	msr	BASEPRI, r3
 800f854:	f3bf 8f6f 	isb	sy
 800f858:	f3bf 8f4f 	dsb	sy
 800f85c:	b662      	cpsie	i
 800f85e:	603b      	str	r3, [r7, #0]
}
 800f860:	bf00      	nop
 800f862:	bf00      	nop
 800f864:	e7fd      	b.n	800f862 <xTaskIncrementTick+0x4a>
 800f866:	4b41      	ldr	r3, [pc, #260]	@ (800f96c <xTaskIncrementTick+0x154>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	60fb      	str	r3, [r7, #12]
 800f86c:	4b40      	ldr	r3, [pc, #256]	@ (800f970 <xTaskIncrementTick+0x158>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a3e      	ldr	r2, [pc, #248]	@ (800f96c <xTaskIncrementTick+0x154>)
 800f872:	6013      	str	r3, [r2, #0]
 800f874:	4a3e      	ldr	r2, [pc, #248]	@ (800f970 <xTaskIncrementTick+0x158>)
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	6013      	str	r3, [r2, #0]
 800f87a:	4b3e      	ldr	r3, [pc, #248]	@ (800f974 <xTaskIncrementTick+0x15c>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	3301      	adds	r3, #1
 800f880:	4a3c      	ldr	r2, [pc, #240]	@ (800f974 <xTaskIncrementTick+0x15c>)
 800f882:	6013      	str	r3, [r2, #0]
 800f884:	f000 fb5a 	bl	800ff3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f888:	4b3b      	ldr	r3, [pc, #236]	@ (800f978 <xTaskIncrementTick+0x160>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	693a      	ldr	r2, [r7, #16]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d349      	bcc.n	800f926 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f892:	4b36      	ldr	r3, [pc, #216]	@ (800f96c <xTaskIncrementTick+0x154>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d104      	bne.n	800f8a6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f89c:	4b36      	ldr	r3, [pc, #216]	@ (800f978 <xTaskIncrementTick+0x160>)
 800f89e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f8a2:	601a      	str	r2, [r3, #0]
					break;
 800f8a4:	e03f      	b.n	800f926 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8a6:	4b31      	ldr	r3, [pc, #196]	@ (800f96c <xTaskIncrementTick+0x154>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f8b6:	693a      	ldr	r2, [r7, #16]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d203      	bcs.n	800f8c6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f8be:	4a2e      	ldr	r2, [pc, #184]	@ (800f978 <xTaskIncrementTick+0x160>)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f8c4:	e02f      	b.n	800f926 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	3304      	adds	r3, #4
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fe fac6 	bl	800de5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d004      	beq.n	800f8e2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	3318      	adds	r3, #24
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fe fabd 	bl	800de5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8e6:	4b25      	ldr	r3, [pc, #148]	@ (800f97c <xTaskIncrementTick+0x164>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d903      	bls.n	800f8f6 <xTaskIncrementTick+0xde>
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8f2:	4a22      	ldr	r2, [pc, #136]	@ (800f97c <xTaskIncrementTick+0x164>)
 800f8f4:	6013      	str	r3, [r2, #0]
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	4413      	add	r3, r2
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4a1f      	ldr	r2, [pc, #124]	@ (800f980 <xTaskIncrementTick+0x168>)
 800f904:	441a      	add	r2, r3
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	3304      	adds	r3, #4
 800f90a:	4619      	mov	r1, r3
 800f90c:	4610      	mov	r0, r2
 800f90e:	f7fe fa48 	bl	800dda2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f916:	4b1b      	ldr	r3, [pc, #108]	@ (800f984 <xTaskIncrementTick+0x16c>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d3b8      	bcc.n	800f892 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f920:	2301      	movs	r3, #1
 800f922:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f924:	e7b5      	b.n	800f892 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f926:	4b17      	ldr	r3, [pc, #92]	@ (800f984 <xTaskIncrementTick+0x16c>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f92c:	4914      	ldr	r1, [pc, #80]	@ (800f980 <xTaskIncrementTick+0x168>)
 800f92e:	4613      	mov	r3, r2
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	4413      	add	r3, r2
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	440b      	add	r3, r1
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d907      	bls.n	800f94e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800f93e:	2301      	movs	r3, #1
 800f940:	617b      	str	r3, [r7, #20]
 800f942:	e004      	b.n	800f94e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f944:	4b10      	ldr	r3, [pc, #64]	@ (800f988 <xTaskIncrementTick+0x170>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	3301      	adds	r3, #1
 800f94a:	4a0f      	ldr	r2, [pc, #60]	@ (800f988 <xTaskIncrementTick+0x170>)
 800f94c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f94e:	4b0f      	ldr	r3, [pc, #60]	@ (800f98c <xTaskIncrementTick+0x174>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d001      	beq.n	800f95a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800f956:	2301      	movs	r3, #1
 800f958:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f95a:	697b      	ldr	r3, [r7, #20]
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3718      	adds	r7, #24
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	200074f8 	.word	0x200074f8
 800f968:	200074d4 	.word	0x200074d4
 800f96c:	200074a0 	.word	0x200074a0
 800f970:	200074a4 	.word	0x200074a4
 800f974:	200074e8 	.word	0x200074e8
 800f978:	200074f0 	.word	0x200074f0
 800f97c:	200074d8 	.word	0x200074d8
 800f980:	20007018 	.word	0x20007018
 800f984:	20007014 	.word	0x20007014
 800f988:	200074e0 	.word	0x200074e0
 800f98c:	200074e4 	.word	0x200074e4

0800f990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b086      	sub	sp, #24
 800f994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f996:	4b3e      	ldr	r3, [pc, #248]	@ (800fa90 <vTaskSwitchContext+0x100>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d003      	beq.n	800f9a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f99e:	4b3d      	ldr	r3, [pc, #244]	@ (800fa94 <vTaskSwitchContext+0x104>)
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f9a4:	e070      	b.n	800fa88 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800f9a6:	4b3b      	ldr	r3, [pc, #236]	@ (800fa94 <vTaskSwitchContext+0x104>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f9ac:	4b3a      	ldr	r3, [pc, #232]	@ (800fa98 <vTaskSwitchContext+0x108>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9b2:	613b      	str	r3, [r7, #16]
 800f9b4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f9b8:	60fb      	str	r3, [r7, #12]
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d111      	bne.n	800f9e8 <vTaskSwitchContext+0x58>
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	3304      	adds	r3, #4
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68fa      	ldr	r2, [r7, #12]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d10b      	bne.n	800f9e8 <vTaskSwitchContext+0x58>
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	3308      	adds	r3, #8
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68fa      	ldr	r2, [r7, #12]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d105      	bne.n	800f9e8 <vTaskSwitchContext+0x58>
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	330c      	adds	r3, #12
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	68fa      	ldr	r2, [r7, #12]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d008      	beq.n	800f9fa <vTaskSwitchContext+0x6a>
 800f9e8:	4b2b      	ldr	r3, [pc, #172]	@ (800fa98 <vTaskSwitchContext+0x108>)
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	4b2a      	ldr	r3, [pc, #168]	@ (800fa98 <vTaskSwitchContext+0x108>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	3334      	adds	r3, #52	@ 0x34
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	4610      	mov	r0, r2
 800f9f6:	f7f0 ff79 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9fa:	4b28      	ldr	r3, [pc, #160]	@ (800fa9c <vTaskSwitchContext+0x10c>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	617b      	str	r3, [r7, #20]
 800fa00:	e013      	b.n	800fa2a <vTaskSwitchContext+0x9a>
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d10d      	bne.n	800fa24 <vTaskSwitchContext+0x94>
	__asm volatile
 800fa08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa0c:	b672      	cpsid	i
 800fa0e:	f383 8811 	msr	BASEPRI, r3
 800fa12:	f3bf 8f6f 	isb	sy
 800fa16:	f3bf 8f4f 	dsb	sy
 800fa1a:	b662      	cpsie	i
 800fa1c:	607b      	str	r3, [r7, #4]
}
 800fa1e:	bf00      	nop
 800fa20:	bf00      	nop
 800fa22:	e7fd      	b.n	800fa20 <vTaskSwitchContext+0x90>
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	3b01      	subs	r3, #1
 800fa28:	617b      	str	r3, [r7, #20]
 800fa2a:	491d      	ldr	r1, [pc, #116]	@ (800faa0 <vTaskSwitchContext+0x110>)
 800fa2c:	697a      	ldr	r2, [r7, #20]
 800fa2e:	4613      	mov	r3, r2
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	4413      	add	r3, r2
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	440b      	add	r3, r1
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d0e1      	beq.n	800fa02 <vTaskSwitchContext+0x72>
 800fa3e:	697a      	ldr	r2, [r7, #20]
 800fa40:	4613      	mov	r3, r2
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4a15      	ldr	r2, [pc, #84]	@ (800faa0 <vTaskSwitchContext+0x110>)
 800fa4a:	4413      	add	r3, r2
 800fa4c:	60bb      	str	r3, [r7, #8]
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	685a      	ldr	r2, [r3, #4]
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	605a      	str	r2, [r3, #4]
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	685a      	ldr	r2, [r3, #4]
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	3308      	adds	r3, #8
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d104      	bne.n	800fa6e <vTaskSwitchContext+0xde>
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	605a      	str	r2, [r3, #4]
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	4a08      	ldr	r2, [pc, #32]	@ (800fa98 <vTaskSwitchContext+0x108>)
 800fa76:	6013      	str	r3, [r2, #0]
 800fa78:	4a08      	ldr	r2, [pc, #32]	@ (800fa9c <vTaskSwitchContext+0x10c>)
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa7e:	4b06      	ldr	r3, [pc, #24]	@ (800fa98 <vTaskSwitchContext+0x108>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	3354      	adds	r3, #84	@ 0x54
 800fa84:	4a07      	ldr	r2, [pc, #28]	@ (800faa4 <vTaskSwitchContext+0x114>)
 800fa86:	6013      	str	r3, [r2, #0]
}
 800fa88:	bf00      	nop
 800fa8a:	3718      	adds	r7, #24
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	200074f8 	.word	0x200074f8
 800fa94:	200074e4 	.word	0x200074e4
 800fa98:	20007014 	.word	0x20007014
 800fa9c:	200074d8 	.word	0x200074d8
 800faa0:	20007018 	.word	0x20007018
 800faa4:	20000080 	.word	0x20000080

0800faa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d10d      	bne.n	800fad4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800fab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fabc:	b672      	cpsid	i
 800fabe:	f383 8811 	msr	BASEPRI, r3
 800fac2:	f3bf 8f6f 	isb	sy
 800fac6:	f3bf 8f4f 	dsb	sy
 800faca:	b662      	cpsie	i
 800facc:	60fb      	str	r3, [r7, #12]
}
 800face:	bf00      	nop
 800fad0:	bf00      	nop
 800fad2:	e7fd      	b.n	800fad0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fad4:	4b07      	ldr	r3, [pc, #28]	@ (800faf4 <vTaskPlaceOnEventList+0x4c>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	3318      	adds	r3, #24
 800fada:	4619      	mov	r1, r3
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7fe f984 	bl	800ddea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fae2:	2101      	movs	r1, #1
 800fae4:	6838      	ldr	r0, [r7, #0]
 800fae6:	f000 fc07 	bl	80102f8 <prvAddCurrentTaskToDelayedList>
}
 800faea:	bf00      	nop
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop
 800faf4:	20007014 	.word	0x20007014

0800faf8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b086      	sub	sp, #24
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	60b9      	str	r1, [r7, #8]
 800fb02:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d10d      	bne.n	800fb26 <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 800fb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb0e:	b672      	cpsid	i
 800fb10:	f383 8811 	msr	BASEPRI, r3
 800fb14:	f3bf 8f6f 	isb	sy
 800fb18:	f3bf 8f4f 	dsb	sy
 800fb1c:	b662      	cpsie	i
 800fb1e:	617b      	str	r3, [r7, #20]
}
 800fb20:	bf00      	nop
 800fb22:	bf00      	nop
 800fb24:	e7fd      	b.n	800fb22 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800fb26:	4b13      	ldr	r3, [pc, #76]	@ (800fb74 <vTaskPlaceOnUnorderedEventList+0x7c>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d10d      	bne.n	800fb4a <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 800fb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb32:	b672      	cpsid	i
 800fb34:	f383 8811 	msr	BASEPRI, r3
 800fb38:	f3bf 8f6f 	isb	sy
 800fb3c:	f3bf 8f4f 	dsb	sy
 800fb40:	b662      	cpsie	i
 800fb42:	613b      	str	r3, [r7, #16]
}
 800fb44:	bf00      	nop
 800fb46:	bf00      	nop
 800fb48:	e7fd      	b.n	800fb46 <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fb4a:	4b0b      	ldr	r3, [pc, #44]	@ (800fb78 <vTaskPlaceOnUnorderedEventList+0x80>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	68ba      	ldr	r2, [r7, #8]
 800fb50:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fb54:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb56:	4b08      	ldr	r3, [pc, #32]	@ (800fb78 <vTaskPlaceOnUnorderedEventList+0x80>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3318      	adds	r3, #24
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f7fe f91f 	bl	800dda2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb64:	2101      	movs	r1, #1
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f000 fbc6 	bl	80102f8 <prvAddCurrentTaskToDelayedList>
}
 800fb6c:	bf00      	nop
 800fb6e:	3718      	adds	r7, #24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	200074f8 	.word	0x200074f8
 800fb78:	20007014 	.word	0x20007014

0800fb7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b086      	sub	sp, #24
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d10d      	bne.n	800fbaa <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800fb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb92:	b672      	cpsid	i
 800fb94:	f383 8811 	msr	BASEPRI, r3
 800fb98:	f3bf 8f6f 	isb	sy
 800fb9c:	f3bf 8f4f 	dsb	sy
 800fba0:	b662      	cpsie	i
 800fba2:	617b      	str	r3, [r7, #20]
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop
 800fba8:	e7fd      	b.n	800fba6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbaa:	4b0a      	ldr	r3, [pc, #40]	@ (800fbd4 <vTaskPlaceOnEventListRestricted+0x58>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	3318      	adds	r3, #24
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	68f8      	ldr	r0, [r7, #12]
 800fbb4:	f7fe f8f5 	bl	800dda2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d002      	beq.n	800fbc4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800fbbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fbc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fbc4:	6879      	ldr	r1, [r7, #4]
 800fbc6:	68b8      	ldr	r0, [r7, #8]
 800fbc8:	f000 fb96 	bl	80102f8 <prvAddCurrentTaskToDelayedList>
	}
 800fbcc:	bf00      	nop
 800fbce:	3718      	adds	r7, #24
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	20007014 	.word	0x20007014

0800fbd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b086      	sub	sp, #24
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d10d      	bne.n	800fc0a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800fbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf2:	b672      	cpsid	i
 800fbf4:	f383 8811 	msr	BASEPRI, r3
 800fbf8:	f3bf 8f6f 	isb	sy
 800fbfc:	f3bf 8f4f 	dsb	sy
 800fc00:	b662      	cpsie	i
 800fc02:	60fb      	str	r3, [r7, #12]
}
 800fc04:	bf00      	nop
 800fc06:	bf00      	nop
 800fc08:	e7fd      	b.n	800fc06 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	3318      	adds	r3, #24
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7fe f924 	bl	800de5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc14:	4b1d      	ldr	r3, [pc, #116]	@ (800fc8c <xTaskRemoveFromEventList+0xb4>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d11d      	bne.n	800fc58 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	3304      	adds	r3, #4
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fe f91b 	bl	800de5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc2a:	4b19      	ldr	r3, [pc, #100]	@ (800fc90 <xTaskRemoveFromEventList+0xb8>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d903      	bls.n	800fc3a <xTaskRemoveFromEventList+0x62>
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc36:	4a16      	ldr	r2, [pc, #88]	@ (800fc90 <xTaskRemoveFromEventList+0xb8>)
 800fc38:	6013      	str	r3, [r2, #0]
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc3e:	4613      	mov	r3, r2
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	4413      	add	r3, r2
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	4a13      	ldr	r2, [pc, #76]	@ (800fc94 <xTaskRemoveFromEventList+0xbc>)
 800fc48:	441a      	add	r2, r3
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	3304      	adds	r3, #4
 800fc4e:	4619      	mov	r1, r3
 800fc50:	4610      	mov	r0, r2
 800fc52:	f7fe f8a6 	bl	800dda2 <vListInsertEnd>
 800fc56:	e005      	b.n	800fc64 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	3318      	adds	r3, #24
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	480e      	ldr	r0, [pc, #56]	@ (800fc98 <xTaskRemoveFromEventList+0xc0>)
 800fc60:	f7fe f89f 	bl	800dda2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc68:	4b0c      	ldr	r3, [pc, #48]	@ (800fc9c <xTaskRemoveFromEventList+0xc4>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d905      	bls.n	800fc7e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc72:	2301      	movs	r3, #1
 800fc74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc76:	4b0a      	ldr	r3, [pc, #40]	@ (800fca0 <xTaskRemoveFromEventList+0xc8>)
 800fc78:	2201      	movs	r2, #1
 800fc7a:	601a      	str	r2, [r3, #0]
 800fc7c:	e001      	b.n	800fc82 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc82:	697b      	ldr	r3, [r7, #20]
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3718      	adds	r7, #24
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	200074f8 	.word	0x200074f8
 800fc90:	200074d8 	.word	0x200074d8
 800fc94:	20007018 	.word	0x20007018
 800fc98:	200074a8 	.word	0x200074a8
 800fc9c:	20007014 	.word	0x20007014
 800fca0:	200074e4 	.word	0x200074e4

0800fca4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800fcae:	4b2c      	ldr	r3, [pc, #176]	@ (800fd60 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d10d      	bne.n	800fcd2 <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 800fcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcba:	b672      	cpsid	i
 800fcbc:	f383 8811 	msr	BASEPRI, r3
 800fcc0:	f3bf 8f6f 	isb	sy
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	b662      	cpsie	i
 800fcca:	613b      	str	r3, [r7, #16]
}
 800fccc:	bf00      	nop
 800fcce:	bf00      	nop
 800fcd0:	e7fd      	b.n	800fcce <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d10d      	bne.n	800fd04 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 800fce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcec:	b672      	cpsid	i
 800fcee:	f383 8811 	msr	BASEPRI, r3
 800fcf2:	f3bf 8f6f 	isb	sy
 800fcf6:	f3bf 8f4f 	dsb	sy
 800fcfa:	b662      	cpsie	i
 800fcfc:	60fb      	str	r3, [r7, #12]
}
 800fcfe:	bf00      	nop
 800fd00:	bf00      	nop
 800fd02:	e7fd      	b.n	800fd00 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f7fe f8a9 	bl	800de5c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	3304      	adds	r3, #4
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fe f8a4 	bl	800de5c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd18:	4b12      	ldr	r3, [pc, #72]	@ (800fd64 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d903      	bls.n	800fd28 <vTaskRemoveFromUnorderedEventList+0x84>
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd24:	4a0f      	ldr	r2, [pc, #60]	@ (800fd64 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800fd26:	6013      	str	r3, [r2, #0]
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	009b      	lsls	r3, r3, #2
 800fd30:	4413      	add	r3, r2
 800fd32:	009b      	lsls	r3, r3, #2
 800fd34:	4a0c      	ldr	r2, [pc, #48]	@ (800fd68 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800fd36:	441a      	add	r2, r3
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	3304      	adds	r3, #4
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	4610      	mov	r0, r2
 800fd40:	f7fe f82f 	bl	800dda2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd48:	4b08      	ldr	r3, [pc, #32]	@ (800fd6c <vTaskRemoveFromUnorderedEventList+0xc8>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d902      	bls.n	800fd58 <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800fd52:	4b07      	ldr	r3, [pc, #28]	@ (800fd70 <vTaskRemoveFromUnorderedEventList+0xcc>)
 800fd54:	2201      	movs	r2, #1
 800fd56:	601a      	str	r2, [r3, #0]
	}
}
 800fd58:	bf00      	nop
 800fd5a:	3718      	adds	r7, #24
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	200074f8 	.word	0x200074f8
 800fd64:	200074d8 	.word	0x200074d8
 800fd68:	20007018 	.word	0x20007018
 800fd6c:	20007014 	.word	0x20007014
 800fd70:	200074e4 	.word	0x200074e4

0800fd74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd7c:	4b06      	ldr	r3, [pc, #24]	@ (800fd98 <vTaskInternalSetTimeOutState+0x24>)
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd84:	4b05      	ldr	r3, [pc, #20]	@ (800fd9c <vTaskInternalSetTimeOutState+0x28>)
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	605a      	str	r2, [r3, #4]
}
 800fd8c:	bf00      	nop
 800fd8e:	370c      	adds	r7, #12
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr
 800fd98:	200074e8 	.word	0x200074e8
 800fd9c:	200074d4 	.word	0x200074d4

0800fda0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b088      	sub	sp, #32
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d10d      	bne.n	800fdcc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800fdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb4:	b672      	cpsid	i
 800fdb6:	f383 8811 	msr	BASEPRI, r3
 800fdba:	f3bf 8f6f 	isb	sy
 800fdbe:	f3bf 8f4f 	dsb	sy
 800fdc2:	b662      	cpsie	i
 800fdc4:	613b      	str	r3, [r7, #16]
}
 800fdc6:	bf00      	nop
 800fdc8:	bf00      	nop
 800fdca:	e7fd      	b.n	800fdc8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d10d      	bne.n	800fdee <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800fdd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd6:	b672      	cpsid	i
 800fdd8:	f383 8811 	msr	BASEPRI, r3
 800fddc:	f3bf 8f6f 	isb	sy
 800fde0:	f3bf 8f4f 	dsb	sy
 800fde4:	b662      	cpsie	i
 800fde6:	60fb      	str	r3, [r7, #12]
}
 800fde8:	bf00      	nop
 800fdea:	bf00      	nop
 800fdec:	e7fd      	b.n	800fdea <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800fdee:	f000 ff6d 	bl	8010ccc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fdf2:	4b1d      	ldr	r3, [pc, #116]	@ (800fe68 <xTaskCheckForTimeOut+0xc8>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	69ba      	ldr	r2, [r7, #24]
 800fdfe:	1ad3      	subs	r3, r2, r3
 800fe00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fe0a:	d102      	bne.n	800fe12 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	61fb      	str	r3, [r7, #28]
 800fe10:	e023      	b.n	800fe5a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	4b15      	ldr	r3, [pc, #84]	@ (800fe6c <xTaskCheckForTimeOut+0xcc>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d007      	beq.n	800fe2e <xTaskCheckForTimeOut+0x8e>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	69ba      	ldr	r2, [r7, #24]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d302      	bcc.n	800fe2e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	61fb      	str	r3, [r7, #28]
 800fe2c:	e015      	b.n	800fe5a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	697a      	ldr	r2, [r7, #20]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d20b      	bcs.n	800fe50 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	1ad2      	subs	r2, r2, r3
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f7ff ff95 	bl	800fd74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	61fb      	str	r3, [r7, #28]
 800fe4e:	e004      	b.n	800fe5a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	2200      	movs	r2, #0
 800fe54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fe56:	2301      	movs	r3, #1
 800fe58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fe5a:	f000 ff6d 	bl	8010d38 <vPortExitCritical>

	return xReturn;
 800fe5e:	69fb      	ldr	r3, [r7, #28]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3720      	adds	r7, #32
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	200074d4 	.word	0x200074d4
 800fe6c:	200074e8 	.word	0x200074e8

0800fe70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fe70:	b480      	push	{r7}
 800fe72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fe74:	4b03      	ldr	r3, [pc, #12]	@ (800fe84 <vTaskMissedYield+0x14>)
 800fe76:	2201      	movs	r2, #1
 800fe78:	601a      	str	r2, [r3, #0]
}
 800fe7a:	bf00      	nop
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr
 800fe84:	200074e4 	.word	0x200074e4

0800fe88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fe90:	f000 f84c 	bl	800ff2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fe94:	4b06      	ldr	r3, [pc, #24]	@ (800feb0 <prvIdleTask+0x28>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d9f9      	bls.n	800fe90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fe9c:	4b05      	ldr	r3, [pc, #20]	@ (800feb4 <prvIdleTask+0x2c>)
 800fe9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	f3bf 8f4f 	dsb	sy
 800fea8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800feac:	e7f0      	b.n	800fe90 <prvIdleTask+0x8>
 800feae:	bf00      	nop
 800feb0:	20007018 	.word	0x20007018
 800feb4:	e000ed04 	.word	0xe000ed04

0800feb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800febe:	2300      	movs	r3, #0
 800fec0:	607b      	str	r3, [r7, #4]
 800fec2:	e00c      	b.n	800fede <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	4613      	mov	r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	4413      	add	r3, r2
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	4a10      	ldr	r2, [pc, #64]	@ (800ff10 <prvInitialiseTaskLists+0x58>)
 800fed0:	4413      	add	r3, r2
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fd ff38 	bl	800dd48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	3301      	adds	r3, #1
 800fedc:	607b      	str	r3, [r7, #4]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b37      	cmp	r3, #55	@ 0x37
 800fee2:	d9ef      	bls.n	800fec4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fee4:	480b      	ldr	r0, [pc, #44]	@ (800ff14 <prvInitialiseTaskLists+0x5c>)
 800fee6:	f7fd ff2f 	bl	800dd48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800feea:	480b      	ldr	r0, [pc, #44]	@ (800ff18 <prvInitialiseTaskLists+0x60>)
 800feec:	f7fd ff2c 	bl	800dd48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fef0:	480a      	ldr	r0, [pc, #40]	@ (800ff1c <prvInitialiseTaskLists+0x64>)
 800fef2:	f7fd ff29 	bl	800dd48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fef6:	480a      	ldr	r0, [pc, #40]	@ (800ff20 <prvInitialiseTaskLists+0x68>)
 800fef8:	f7fd ff26 	bl	800dd48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fefc:	4b09      	ldr	r3, [pc, #36]	@ (800ff24 <prvInitialiseTaskLists+0x6c>)
 800fefe:	4a05      	ldr	r2, [pc, #20]	@ (800ff14 <prvInitialiseTaskLists+0x5c>)
 800ff00:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ff02:	4b09      	ldr	r3, [pc, #36]	@ (800ff28 <prvInitialiseTaskLists+0x70>)
 800ff04:	4a04      	ldr	r2, [pc, #16]	@ (800ff18 <prvInitialiseTaskLists+0x60>)
 800ff06:	601a      	str	r2, [r3, #0]
}
 800ff08:	bf00      	nop
 800ff0a:	3708      	adds	r7, #8
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	20007018 	.word	0x20007018
 800ff14:	20007478 	.word	0x20007478
 800ff18:	2000748c 	.word	0x2000748c
 800ff1c:	200074a8 	.word	0x200074a8
 800ff20:	200074bc 	.word	0x200074bc
 800ff24:	200074a0 	.word	0x200074a0
 800ff28:	200074a4 	.word	0x200074a4

0800ff2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ff30:	bf00      	nop
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr
	...

0800ff3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff42:	4b0c      	ldr	r3, [pc, #48]	@ (800ff74 <prvResetNextTaskUnblockTime+0x38>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d104      	bne.n	800ff56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ff4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff78 <prvResetNextTaskUnblockTime+0x3c>)
 800ff4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ff54:	e008      	b.n	800ff68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff56:	4b07      	ldr	r3, [pc, #28]	@ (800ff74 <prvResetNextTaskUnblockTime+0x38>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	68db      	ldr	r3, [r3, #12]
 800ff5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	4a04      	ldr	r2, [pc, #16]	@ (800ff78 <prvResetNextTaskUnblockTime+0x3c>)
 800ff66:	6013      	str	r3, [r2, #0]
}
 800ff68:	bf00      	nop
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr
 800ff74:	200074a0 	.word	0x200074a0
 800ff78:	200074f0 	.word	0x200074f0

0800ff7c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ff82:	4b05      	ldr	r3, [pc, #20]	@ (800ff98 <xTaskGetCurrentTaskHandle+0x1c>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ff88:	687b      	ldr	r3, [r7, #4]
	}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop
 800ff98:	20007014 	.word	0x20007014

0800ff9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ffa2:	4b0b      	ldr	r3, [pc, #44]	@ (800ffd0 <xTaskGetSchedulerState+0x34>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d102      	bne.n	800ffb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	607b      	str	r3, [r7, #4]
 800ffae:	e008      	b.n	800ffc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffb0:	4b08      	ldr	r3, [pc, #32]	@ (800ffd4 <xTaskGetSchedulerState+0x38>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d102      	bne.n	800ffbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ffb8:	2302      	movs	r3, #2
 800ffba:	607b      	str	r3, [r7, #4]
 800ffbc:	e001      	b.n	800ffc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ffc2:	687b      	ldr	r3, [r7, #4]
	}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr
 800ffd0:	200074dc 	.word	0x200074dc
 800ffd4:	200074f8 	.word	0x200074f8

0800ffd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d051      	beq.n	8010092 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fff2:	4b2a      	ldr	r3, [pc, #168]	@ (801009c <xTaskPriorityInherit+0xc4>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d241      	bcs.n	8010080 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	699b      	ldr	r3, [r3, #24]
 8010000:	2b00      	cmp	r3, #0
 8010002:	db06      	blt.n	8010012 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010004:	4b25      	ldr	r3, [pc, #148]	@ (801009c <xTaskPriorityInherit+0xc4>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801000a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	6959      	ldr	r1, [r3, #20]
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801001a:	4613      	mov	r3, r2
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	4413      	add	r3, r2
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	4a1f      	ldr	r2, [pc, #124]	@ (80100a0 <xTaskPriorityInherit+0xc8>)
 8010024:	4413      	add	r3, r2
 8010026:	4299      	cmp	r1, r3
 8010028:	d122      	bne.n	8010070 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	3304      	adds	r3, #4
 801002e:	4618      	mov	r0, r3
 8010030:	f7fd ff14 	bl	800de5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010034:	4b19      	ldr	r3, [pc, #100]	@ (801009c <xTaskPriorityInherit+0xc4>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010042:	4b18      	ldr	r3, [pc, #96]	@ (80100a4 <xTaskPriorityInherit+0xcc>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	429a      	cmp	r2, r3
 8010048:	d903      	bls.n	8010052 <xTaskPriorityInherit+0x7a>
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801004e:	4a15      	ldr	r2, [pc, #84]	@ (80100a4 <xTaskPriorityInherit+0xcc>)
 8010050:	6013      	str	r3, [r2, #0]
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010056:	4613      	mov	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4413      	add	r3, r2
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	4a10      	ldr	r2, [pc, #64]	@ (80100a0 <xTaskPriorityInherit+0xc8>)
 8010060:	441a      	add	r2, r3
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	3304      	adds	r3, #4
 8010066:	4619      	mov	r1, r3
 8010068:	4610      	mov	r0, r2
 801006a:	f7fd fe9a 	bl	800dda2 <vListInsertEnd>
 801006e:	e004      	b.n	801007a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010070:	4b0a      	ldr	r3, [pc, #40]	@ (801009c <xTaskPriorityInherit+0xc4>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801007a:	2301      	movs	r3, #1
 801007c:	60fb      	str	r3, [r7, #12]
 801007e:	e008      	b.n	8010092 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010084:	4b05      	ldr	r3, [pc, #20]	@ (801009c <xTaskPriorityInherit+0xc4>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801008a:	429a      	cmp	r2, r3
 801008c:	d201      	bcs.n	8010092 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801008e:	2301      	movs	r3, #1
 8010090:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010092:	68fb      	ldr	r3, [r7, #12]
	}
 8010094:	4618      	mov	r0, r3
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	20007014 	.word	0x20007014
 80100a0:	20007018 	.word	0x20007018
 80100a4:	200074d8 	.word	0x200074d8

080100a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b086      	sub	sp, #24
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80100b4:	2300      	movs	r3, #0
 80100b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d05c      	beq.n	8010178 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80100be:	4b31      	ldr	r3, [pc, #196]	@ (8010184 <xTaskPriorityDisinherit+0xdc>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	693a      	ldr	r2, [r7, #16]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d00d      	beq.n	80100e4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80100c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100cc:	b672      	cpsid	i
 80100ce:	f383 8811 	msr	BASEPRI, r3
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	f3bf 8f4f 	dsb	sy
 80100da:	b662      	cpsie	i
 80100dc:	60fb      	str	r3, [r7, #12]
}
 80100de:	bf00      	nop
 80100e0:	bf00      	nop
 80100e2:	e7fd      	b.n	80100e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10d      	bne.n	8010108 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80100ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100f0:	b672      	cpsid	i
 80100f2:	f383 8811 	msr	BASEPRI, r3
 80100f6:	f3bf 8f6f 	isb	sy
 80100fa:	f3bf 8f4f 	dsb	sy
 80100fe:	b662      	cpsie	i
 8010100:	60bb      	str	r3, [r7, #8]
}
 8010102:	bf00      	nop
 8010104:	bf00      	nop
 8010106:	e7fd      	b.n	8010104 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801010c:	1e5a      	subs	r2, r3, #1
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801011a:	429a      	cmp	r2, r3
 801011c:	d02c      	beq.n	8010178 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010122:	2b00      	cmp	r3, #0
 8010124:	d128      	bne.n	8010178 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	3304      	adds	r3, #4
 801012a:	4618      	mov	r0, r3
 801012c:	f7fd fe96 	bl	800de5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801013c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010148:	4b0f      	ldr	r3, [pc, #60]	@ (8010188 <xTaskPriorityDisinherit+0xe0>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	429a      	cmp	r2, r3
 801014e:	d903      	bls.n	8010158 <xTaskPriorityDisinherit+0xb0>
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010154:	4a0c      	ldr	r2, [pc, #48]	@ (8010188 <xTaskPriorityDisinherit+0xe0>)
 8010156:	6013      	str	r3, [r2, #0]
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801015c:	4613      	mov	r3, r2
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	4413      	add	r3, r2
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	4a09      	ldr	r2, [pc, #36]	@ (801018c <xTaskPriorityDisinherit+0xe4>)
 8010166:	441a      	add	r2, r3
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	3304      	adds	r3, #4
 801016c:	4619      	mov	r1, r3
 801016e:	4610      	mov	r0, r2
 8010170:	f7fd fe17 	bl	800dda2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010174:	2301      	movs	r3, #1
 8010176:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010178:	697b      	ldr	r3, [r7, #20]
	}
 801017a:	4618      	mov	r0, r3
 801017c:	3718      	adds	r7, #24
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	20007014 	.word	0x20007014
 8010188:	200074d8 	.word	0x200074d8
 801018c:	20007018 	.word	0x20007018

08010190 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010190:	b580      	push	{r7, lr}
 8010192:	b088      	sub	sp, #32
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801019e:	2301      	movs	r3, #1
 80101a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d070      	beq.n	801028a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80101a8:	69bb      	ldr	r3, [r7, #24]
 80101aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d10d      	bne.n	80101cc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80101b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101b4:	b672      	cpsid	i
 80101b6:	f383 8811 	msr	BASEPRI, r3
 80101ba:	f3bf 8f6f 	isb	sy
 80101be:	f3bf 8f4f 	dsb	sy
 80101c2:	b662      	cpsie	i
 80101c4:	60fb      	str	r3, [r7, #12]
}
 80101c6:	bf00      	nop
 80101c8:	bf00      	nop
 80101ca:	e7fd      	b.n	80101c8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101d0:	683a      	ldr	r2, [r7, #0]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d902      	bls.n	80101dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	61fb      	str	r3, [r7, #28]
 80101da:	e002      	b.n	80101e2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101e6:	69fa      	ldr	r2, [r7, #28]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d04e      	beq.n	801028a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101f0:	697a      	ldr	r2, [r7, #20]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d149      	bne.n	801028a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80101f6:	4b27      	ldr	r3, [pc, #156]	@ (8010294 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	69ba      	ldr	r2, [r7, #24]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d10d      	bne.n	801021c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8010200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010204:	b672      	cpsid	i
 8010206:	f383 8811 	msr	BASEPRI, r3
 801020a:	f3bf 8f6f 	isb	sy
 801020e:	f3bf 8f4f 	dsb	sy
 8010212:	b662      	cpsie	i
 8010214:	60bb      	str	r3, [r7, #8]
}
 8010216:	bf00      	nop
 8010218:	bf00      	nop
 801021a:	e7fd      	b.n	8010218 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801021c:	69bb      	ldr	r3, [r7, #24]
 801021e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010220:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010222:	69bb      	ldr	r3, [r7, #24]
 8010224:	69fa      	ldr	r2, [r7, #28]
 8010226:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	699b      	ldr	r3, [r3, #24]
 801022c:	2b00      	cmp	r3, #0
 801022e:	db04      	blt.n	801023a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	6959      	ldr	r1, [r3, #20]
 801023e:	693a      	ldr	r2, [r7, #16]
 8010240:	4613      	mov	r3, r2
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	4413      	add	r3, r2
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	4a13      	ldr	r2, [pc, #76]	@ (8010298 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801024a:	4413      	add	r3, r2
 801024c:	4299      	cmp	r1, r3
 801024e:	d11c      	bne.n	801028a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	3304      	adds	r3, #4
 8010254:	4618      	mov	r0, r3
 8010256:	f7fd fe01 	bl	800de5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801025a:	69bb      	ldr	r3, [r7, #24]
 801025c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801025e:	4b0f      	ldr	r3, [pc, #60]	@ (801029c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	429a      	cmp	r2, r3
 8010264:	d903      	bls.n	801026e <vTaskPriorityDisinheritAfterTimeout+0xde>
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801026a:	4a0c      	ldr	r2, [pc, #48]	@ (801029c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801026c:	6013      	str	r3, [r2, #0]
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010272:	4613      	mov	r3, r2
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	4413      	add	r3, r2
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	4a07      	ldr	r2, [pc, #28]	@ (8010298 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801027c:	441a      	add	r2, r3
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	3304      	adds	r3, #4
 8010282:	4619      	mov	r1, r3
 8010284:	4610      	mov	r0, r2
 8010286:	f7fd fd8c 	bl	800dda2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801028a:	bf00      	nop
 801028c:	3720      	adds	r7, #32
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
 8010292:	bf00      	nop
 8010294:	20007014 	.word	0x20007014
 8010298:	20007018 	.word	0x20007018
 801029c:	200074d8 	.word	0x200074d8

080102a0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80102a6:	4b09      	ldr	r3, [pc, #36]	@ (80102cc <uxTaskResetEventItemValue+0x2c>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	699b      	ldr	r3, [r3, #24]
 80102ac:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102ae:	4b07      	ldr	r3, [pc, #28]	@ (80102cc <uxTaskResetEventItemValue+0x2c>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102b4:	4b05      	ldr	r3, [pc, #20]	@ (80102cc <uxTaskResetEventItemValue+0x2c>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80102bc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80102be:	687b      	ldr	r3, [r7, #4]
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr
 80102cc:	20007014 	.word	0x20007014

080102d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80102d0:	b480      	push	{r7}
 80102d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80102d4:	4b07      	ldr	r3, [pc, #28]	@ (80102f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d004      	beq.n	80102e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80102dc:	4b05      	ldr	r3, [pc, #20]	@ (80102f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102e2:	3201      	adds	r2, #1
 80102e4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80102e6:	4b03      	ldr	r3, [pc, #12]	@ (80102f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80102e8:	681b      	ldr	r3, [r3, #0]
	}
 80102ea:	4618      	mov	r0, r3
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr
 80102f4:	20007014 	.word	0x20007014

080102f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010302:	4b21      	ldr	r3, [pc, #132]	@ (8010388 <prvAddCurrentTaskToDelayedList+0x90>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010308:	4b20      	ldr	r3, [pc, #128]	@ (801038c <prvAddCurrentTaskToDelayedList+0x94>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	3304      	adds	r3, #4
 801030e:	4618      	mov	r0, r3
 8010310:	f7fd fda4 	bl	800de5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801031a:	d10a      	bne.n	8010332 <prvAddCurrentTaskToDelayedList+0x3a>
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d007      	beq.n	8010332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010322:	4b1a      	ldr	r3, [pc, #104]	@ (801038c <prvAddCurrentTaskToDelayedList+0x94>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	3304      	adds	r3, #4
 8010328:	4619      	mov	r1, r3
 801032a:	4819      	ldr	r0, [pc, #100]	@ (8010390 <prvAddCurrentTaskToDelayedList+0x98>)
 801032c:	f7fd fd39 	bl	800dda2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010330:	e026      	b.n	8010380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010332:	68fa      	ldr	r2, [r7, #12]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	4413      	add	r3, r2
 8010338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801033a:	4b14      	ldr	r3, [pc, #80]	@ (801038c <prvAddCurrentTaskToDelayedList+0x94>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	68ba      	ldr	r2, [r7, #8]
 8010340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010342:	68ba      	ldr	r2, [r7, #8]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	429a      	cmp	r2, r3
 8010348:	d209      	bcs.n	801035e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801034a:	4b12      	ldr	r3, [pc, #72]	@ (8010394 <prvAddCurrentTaskToDelayedList+0x9c>)
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	4b0f      	ldr	r3, [pc, #60]	@ (801038c <prvAddCurrentTaskToDelayedList+0x94>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	3304      	adds	r3, #4
 8010354:	4619      	mov	r1, r3
 8010356:	4610      	mov	r0, r2
 8010358:	f7fd fd47 	bl	800ddea <vListInsert>
}
 801035c:	e010      	b.n	8010380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801035e:	4b0e      	ldr	r3, [pc, #56]	@ (8010398 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	4b0a      	ldr	r3, [pc, #40]	@ (801038c <prvAddCurrentTaskToDelayedList+0x94>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	3304      	adds	r3, #4
 8010368:	4619      	mov	r1, r3
 801036a:	4610      	mov	r0, r2
 801036c:	f7fd fd3d 	bl	800ddea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010370:	4b0a      	ldr	r3, [pc, #40]	@ (801039c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68ba      	ldr	r2, [r7, #8]
 8010376:	429a      	cmp	r2, r3
 8010378:	d202      	bcs.n	8010380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801037a:	4a08      	ldr	r2, [pc, #32]	@ (801039c <prvAddCurrentTaskToDelayedList+0xa4>)
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	6013      	str	r3, [r2, #0]
}
 8010380:	bf00      	nop
 8010382:	3710      	adds	r7, #16
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	200074d4 	.word	0x200074d4
 801038c:	20007014 	.word	0x20007014
 8010390:	200074bc 	.word	0x200074bc
 8010394:	200074a4 	.word	0x200074a4
 8010398:	200074a0 	.word	0x200074a0
 801039c:	200074f0 	.word	0x200074f0

080103a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b08a      	sub	sp, #40	@ 0x28
 80103a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80103a6:	2300      	movs	r3, #0
 80103a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80103aa:	f000 fb21 	bl	80109f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80103ae:	4b1e      	ldr	r3, [pc, #120]	@ (8010428 <xTimerCreateTimerTask+0x88>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d021      	beq.n	80103fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80103b6:	2300      	movs	r3, #0
 80103b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80103ba:	2300      	movs	r3, #0
 80103bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80103be:	1d3a      	adds	r2, r7, #4
 80103c0:	f107 0108 	add.w	r1, r7, #8
 80103c4:	f107 030c 	add.w	r3, r7, #12
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fd fa9d 	bl	800d908 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80103ce:	6879      	ldr	r1, [r7, #4]
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	68fa      	ldr	r2, [r7, #12]
 80103d4:	9202      	str	r2, [sp, #8]
 80103d6:	9301      	str	r3, [sp, #4]
 80103d8:	2302      	movs	r3, #2
 80103da:	9300      	str	r3, [sp, #0]
 80103dc:	2300      	movs	r3, #0
 80103de:	460a      	mov	r2, r1
 80103e0:	4912      	ldr	r1, [pc, #72]	@ (801042c <xTimerCreateTimerTask+0x8c>)
 80103e2:	4813      	ldr	r0, [pc, #76]	@ (8010430 <xTimerCreateTimerTask+0x90>)
 80103e4:	f7fe fed6 	bl	800f194 <xTaskCreateStatic>
 80103e8:	4603      	mov	r3, r0
 80103ea:	4a12      	ldr	r2, [pc, #72]	@ (8010434 <xTimerCreateTimerTask+0x94>)
 80103ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80103ee:	4b11      	ldr	r3, [pc, #68]	@ (8010434 <xTimerCreateTimerTask+0x94>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d001      	beq.n	80103fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80103f6:	2301      	movs	r3, #1
 80103f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d10d      	bne.n	801041c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8010400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010404:	b672      	cpsid	i
 8010406:	f383 8811 	msr	BASEPRI, r3
 801040a:	f3bf 8f6f 	isb	sy
 801040e:	f3bf 8f4f 	dsb	sy
 8010412:	b662      	cpsie	i
 8010414:	613b      	str	r3, [r7, #16]
}
 8010416:	bf00      	nop
 8010418:	bf00      	nop
 801041a:	e7fd      	b.n	8010418 <xTimerCreateTimerTask+0x78>
	return xReturn;
 801041c:	697b      	ldr	r3, [r7, #20]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3718      	adds	r7, #24
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	2000752c 	.word	0x2000752c
 801042c:	08021a50 	.word	0x08021a50
 8010430:	08010579 	.word	0x08010579
 8010434:	20007530 	.word	0x20007530

08010438 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b08a      	sub	sp, #40	@ 0x28
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	607a      	str	r2, [r7, #4]
 8010444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010446:	2300      	movs	r3, #0
 8010448:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d10d      	bne.n	801046c <xTimerGenericCommand+0x34>
	__asm volatile
 8010450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010454:	b672      	cpsid	i
 8010456:	f383 8811 	msr	BASEPRI, r3
 801045a:	f3bf 8f6f 	isb	sy
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	b662      	cpsie	i
 8010464:	623b      	str	r3, [r7, #32]
}
 8010466:	bf00      	nop
 8010468:	bf00      	nop
 801046a:	e7fd      	b.n	8010468 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801046c:	4b19      	ldr	r3, [pc, #100]	@ (80104d4 <xTimerGenericCommand+0x9c>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d02a      	beq.n	80104ca <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	2b05      	cmp	r3, #5
 8010484:	dc18      	bgt.n	80104b8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010486:	f7ff fd89 	bl	800ff9c <xTaskGetSchedulerState>
 801048a:	4603      	mov	r3, r0
 801048c:	2b02      	cmp	r3, #2
 801048e:	d109      	bne.n	80104a4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010490:	4b10      	ldr	r3, [pc, #64]	@ (80104d4 <xTimerGenericCommand+0x9c>)
 8010492:	6818      	ldr	r0, [r3, #0]
 8010494:	f107 0110 	add.w	r1, r7, #16
 8010498:	2300      	movs	r3, #0
 801049a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801049c:	f7fd ff94 	bl	800e3c8 <xQueueGenericSend>
 80104a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80104a2:	e012      	b.n	80104ca <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80104a4:	4b0b      	ldr	r3, [pc, #44]	@ (80104d4 <xTimerGenericCommand+0x9c>)
 80104a6:	6818      	ldr	r0, [r3, #0]
 80104a8:	f107 0110 	add.w	r1, r7, #16
 80104ac:	2300      	movs	r3, #0
 80104ae:	2200      	movs	r2, #0
 80104b0:	f7fd ff8a 	bl	800e3c8 <xQueueGenericSend>
 80104b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80104b6:	e008      	b.n	80104ca <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80104b8:	4b06      	ldr	r3, [pc, #24]	@ (80104d4 <xTimerGenericCommand+0x9c>)
 80104ba:	6818      	ldr	r0, [r3, #0]
 80104bc:	f107 0110 	add.w	r1, r7, #16
 80104c0:	2300      	movs	r3, #0
 80104c2:	683a      	ldr	r2, [r7, #0]
 80104c4:	f7fe f88a 	bl	800e5dc <xQueueGenericSendFromISR>
 80104c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80104ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3728      	adds	r7, #40	@ 0x28
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	2000752c 	.word	0x2000752c

080104d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b088      	sub	sp, #32
 80104dc:	af02      	add	r7, sp, #8
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104e2:	4b24      	ldr	r3, [pc, #144]	@ (8010574 <prvProcessExpiredTimer+0x9c>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	68db      	ldr	r3, [r3, #12]
 80104ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	3304      	adds	r3, #4
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7fd fcb3 	bl	800de5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80104fc:	f003 0304 	and.w	r3, r3, #4
 8010500:	2b00      	cmp	r3, #0
 8010502:	d025      	beq.n	8010550 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	699a      	ldr	r2, [r3, #24]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	18d1      	adds	r1, r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	683a      	ldr	r2, [r7, #0]
 8010510:	6978      	ldr	r0, [r7, #20]
 8010512:	f000 f8d7 	bl	80106c4 <prvInsertTimerInActiveList>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d022      	beq.n	8010562 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801051c:	2300      	movs	r3, #0
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	2300      	movs	r3, #0
 8010522:	687a      	ldr	r2, [r7, #4]
 8010524:	2100      	movs	r1, #0
 8010526:	6978      	ldr	r0, [r7, #20]
 8010528:	f7ff ff86 	bl	8010438 <xTimerGenericCommand>
 801052c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d116      	bne.n	8010562 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8010534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010538:	b672      	cpsid	i
 801053a:	f383 8811 	msr	BASEPRI, r3
 801053e:	f3bf 8f6f 	isb	sy
 8010542:	f3bf 8f4f 	dsb	sy
 8010546:	b662      	cpsie	i
 8010548:	60fb      	str	r3, [r7, #12]
}
 801054a:	bf00      	nop
 801054c:	bf00      	nop
 801054e:	e7fd      	b.n	801054c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010556:	f023 0301 	bic.w	r3, r3, #1
 801055a:	b2da      	uxtb	r2, r3
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	6a1b      	ldr	r3, [r3, #32]
 8010566:	6978      	ldr	r0, [r7, #20]
 8010568:	4798      	blx	r3
}
 801056a:	bf00      	nop
 801056c:	3718      	adds	r7, #24
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	20007524 	.word	0x20007524

08010578 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010580:	f107 0308 	add.w	r3, r7, #8
 8010584:	4618      	mov	r0, r3
 8010586:	f000 f859 	bl	801063c <prvGetNextExpireTime>
 801058a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	4619      	mov	r1, r3
 8010590:	68f8      	ldr	r0, [r7, #12]
 8010592:	f000 f805 	bl	80105a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010596:	f000 f8d7 	bl	8010748 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801059a:	bf00      	nop
 801059c:	e7f0      	b.n	8010580 <prvTimerTask+0x8>
	...

080105a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80105aa:	f7ff f865 	bl	800f678 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80105ae:	f107 0308 	add.w	r3, r7, #8
 80105b2:	4618      	mov	r0, r3
 80105b4:	f000 f866 	bl	8010684 <prvSampleTimeNow>
 80105b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d130      	bne.n	8010622 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d10a      	bne.n	80105dc <prvProcessTimerOrBlockTask+0x3c>
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d806      	bhi.n	80105dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80105ce:	f7ff f861 	bl	800f694 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80105d2:	68f9      	ldr	r1, [r7, #12]
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7ff ff7f 	bl	80104d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80105da:	e024      	b.n	8010626 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d008      	beq.n	80105f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80105e2:	4b13      	ldr	r3, [pc, #76]	@ (8010630 <prvProcessTimerOrBlockTask+0x90>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d101      	bne.n	80105f0 <prvProcessTimerOrBlockTask+0x50>
 80105ec:	2301      	movs	r3, #1
 80105ee:	e000      	b.n	80105f2 <prvProcessTimerOrBlockTask+0x52>
 80105f0:	2300      	movs	r3, #0
 80105f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80105f4:	4b0f      	ldr	r3, [pc, #60]	@ (8010634 <prvProcessTimerOrBlockTask+0x94>)
 80105f6:	6818      	ldr	r0, [r3, #0]
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	1ad3      	subs	r3, r2, r3
 80105fe:	683a      	ldr	r2, [r7, #0]
 8010600:	4619      	mov	r1, r3
 8010602:	f7fe fd93 	bl	800f12c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010606:	f7ff f845 	bl	800f694 <xTaskResumeAll>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d10a      	bne.n	8010626 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010610:	4b09      	ldr	r3, [pc, #36]	@ (8010638 <prvProcessTimerOrBlockTask+0x98>)
 8010612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010616:	601a      	str	r2, [r3, #0]
 8010618:	f3bf 8f4f 	dsb	sy
 801061c:	f3bf 8f6f 	isb	sy
}
 8010620:	e001      	b.n	8010626 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010622:	f7ff f837 	bl	800f694 <xTaskResumeAll>
}
 8010626:	bf00      	nop
 8010628:	3710      	adds	r7, #16
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	20007528 	.word	0x20007528
 8010634:	2000752c 	.word	0x2000752c
 8010638:	e000ed04 	.word	0xe000ed04

0801063c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801063c:	b480      	push	{r7}
 801063e:	b085      	sub	sp, #20
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010644:	4b0e      	ldr	r3, [pc, #56]	@ (8010680 <prvGetNextExpireTime+0x44>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d101      	bne.n	8010652 <prvGetNextExpireTime+0x16>
 801064e:	2201      	movs	r2, #1
 8010650:	e000      	b.n	8010654 <prvGetNextExpireTime+0x18>
 8010652:	2200      	movs	r2, #0
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d105      	bne.n	801066c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010660:	4b07      	ldr	r3, [pc, #28]	@ (8010680 <prvGetNextExpireTime+0x44>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	60fb      	str	r3, [r7, #12]
 801066a:	e001      	b.n	8010670 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801066c:	2300      	movs	r3, #0
 801066e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010670:	68fb      	ldr	r3, [r7, #12]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3714      	adds	r7, #20
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr
 801067e:	bf00      	nop
 8010680:	20007524 	.word	0x20007524

08010684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b084      	sub	sp, #16
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801068c:	f7ff f8a2 	bl	800f7d4 <xTaskGetTickCount>
 8010690:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010692:	4b0b      	ldr	r3, [pc, #44]	@ (80106c0 <prvSampleTimeNow+0x3c>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	68fa      	ldr	r2, [r7, #12]
 8010698:	429a      	cmp	r2, r3
 801069a:	d205      	bcs.n	80106a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801069c:	f000 f940 	bl	8010920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2201      	movs	r2, #1
 80106a4:	601a      	str	r2, [r3, #0]
 80106a6:	e002      	b.n	80106ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2200      	movs	r2, #0
 80106ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80106ae:	4a04      	ldr	r2, [pc, #16]	@ (80106c0 <prvSampleTimeNow+0x3c>)
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80106b4:	68fb      	ldr	r3, [r7, #12]
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3710      	adds	r7, #16
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	20007534 	.word	0x20007534

080106c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b086      	sub	sp, #24
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	607a      	str	r2, [r7, #4]
 80106d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80106d2:	2300      	movs	r3, #0
 80106d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	68ba      	ldr	r2, [r7, #8]
 80106da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	68fa      	ldr	r2, [r7, #12]
 80106e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80106e2:	68ba      	ldr	r2, [r7, #8]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d812      	bhi.n	8010710 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	1ad2      	subs	r2, r2, r3
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	699b      	ldr	r3, [r3, #24]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d302      	bcc.n	80106fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80106f8:	2301      	movs	r3, #1
 80106fa:	617b      	str	r3, [r7, #20]
 80106fc:	e01b      	b.n	8010736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80106fe:	4b10      	ldr	r3, [pc, #64]	@ (8010740 <prvInsertTimerInActiveList+0x7c>)
 8010700:	681a      	ldr	r2, [r3, #0]
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	3304      	adds	r3, #4
 8010706:	4619      	mov	r1, r3
 8010708:	4610      	mov	r0, r2
 801070a:	f7fd fb6e 	bl	800ddea <vListInsert>
 801070e:	e012      	b.n	8010736 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	429a      	cmp	r2, r3
 8010716:	d206      	bcs.n	8010726 <prvInsertTimerInActiveList+0x62>
 8010718:	68ba      	ldr	r2, [r7, #8]
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	429a      	cmp	r2, r3
 801071e:	d302      	bcc.n	8010726 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010720:	2301      	movs	r3, #1
 8010722:	617b      	str	r3, [r7, #20]
 8010724:	e007      	b.n	8010736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010726:	4b07      	ldr	r3, [pc, #28]	@ (8010744 <prvInsertTimerInActiveList+0x80>)
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	3304      	adds	r3, #4
 801072e:	4619      	mov	r1, r3
 8010730:	4610      	mov	r0, r2
 8010732:	f7fd fb5a 	bl	800ddea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010736:	697b      	ldr	r3, [r7, #20]
}
 8010738:	4618      	mov	r0, r3
 801073a:	3718      	adds	r7, #24
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}
 8010740:	20007528 	.word	0x20007528
 8010744:	20007524 	.word	0x20007524

08010748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b08e      	sub	sp, #56	@ 0x38
 801074c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801074e:	e0d4      	b.n	80108fa <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	da1b      	bge.n	801078e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010756:	1d3b      	adds	r3, r7, #4
 8010758:	3304      	adds	r3, #4
 801075a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801075c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801075e:	2b00      	cmp	r3, #0
 8010760:	d10d      	bne.n	801077e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8010762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010766:	b672      	cpsid	i
 8010768:	f383 8811 	msr	BASEPRI, r3
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	f3bf 8f4f 	dsb	sy
 8010774:	b662      	cpsie	i
 8010776:	61fb      	str	r3, [r7, #28]
}
 8010778:	bf00      	nop
 801077a:	bf00      	nop
 801077c:	e7fd      	b.n	801077a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801077e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010784:	6850      	ldr	r0, [r2, #4]
 8010786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010788:	6892      	ldr	r2, [r2, #8]
 801078a:	4611      	mov	r1, r2
 801078c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2b00      	cmp	r3, #0
 8010792:	f2c0 80b2 	blt.w	80108fa <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801079a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801079c:	695b      	ldr	r3, [r3, #20]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d004      	beq.n	80107ac <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107a4:	3304      	adds	r3, #4
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7fd fb58 	bl	800de5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80107ac:	463b      	mov	r3, r7
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7ff ff68 	bl	8010684 <prvSampleTimeNow>
 80107b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2b09      	cmp	r3, #9
 80107ba:	f200 809b 	bhi.w	80108f4 <prvProcessReceivedCommands+0x1ac>
 80107be:	a201      	add	r2, pc, #4	@ (adr r2, 80107c4 <prvProcessReceivedCommands+0x7c>)
 80107c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c4:	080107ed 	.word	0x080107ed
 80107c8:	080107ed 	.word	0x080107ed
 80107cc:	080107ed 	.word	0x080107ed
 80107d0:	08010867 	.word	0x08010867
 80107d4:	0801087b 	.word	0x0801087b
 80107d8:	080108cb 	.word	0x080108cb
 80107dc:	080107ed 	.word	0x080107ed
 80107e0:	080107ed 	.word	0x080107ed
 80107e4:	08010867 	.word	0x08010867
 80107e8:	0801087b 	.word	0x0801087b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80107ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80107f2:	f043 0301 	orr.w	r3, r3, #1
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80107fe:	68ba      	ldr	r2, [r7, #8]
 8010800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010802:	699b      	ldr	r3, [r3, #24]
 8010804:	18d1      	adds	r1, r2, r3
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801080a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801080c:	f7ff ff5a 	bl	80106c4 <prvInsertTimerInActiveList>
 8010810:	4603      	mov	r3, r0
 8010812:	2b00      	cmp	r3, #0
 8010814:	d070      	beq.n	80108f8 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010818:	6a1b      	ldr	r3, [r3, #32]
 801081a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801081c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801081e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010824:	f003 0304 	and.w	r3, r3, #4
 8010828:	2b00      	cmp	r3, #0
 801082a:	d065      	beq.n	80108f8 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801082c:	68ba      	ldr	r2, [r7, #8]
 801082e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010830:	699b      	ldr	r3, [r3, #24]
 8010832:	441a      	add	r2, r3
 8010834:	2300      	movs	r3, #0
 8010836:	9300      	str	r3, [sp, #0]
 8010838:	2300      	movs	r3, #0
 801083a:	2100      	movs	r1, #0
 801083c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801083e:	f7ff fdfb 	bl	8010438 <xTimerGenericCommand>
 8010842:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010844:	6a3b      	ldr	r3, [r7, #32]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d156      	bne.n	80108f8 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 801084a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801084e:	b672      	cpsid	i
 8010850:	f383 8811 	msr	BASEPRI, r3
 8010854:	f3bf 8f6f 	isb	sy
 8010858:	f3bf 8f4f 	dsb	sy
 801085c:	b662      	cpsie	i
 801085e:	61bb      	str	r3, [r7, #24]
}
 8010860:	bf00      	nop
 8010862:	bf00      	nop
 8010864:	e7fd      	b.n	8010862 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801086c:	f023 0301 	bic.w	r3, r3, #1
 8010870:	b2da      	uxtb	r2, r3
 8010872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010874:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010878:	e03f      	b.n	80108fa <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801087a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010880:	f043 0301 	orr.w	r3, r3, #1
 8010884:	b2da      	uxtb	r2, r3
 8010886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010888:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801088c:	68ba      	ldr	r2, [r7, #8]
 801088e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010890:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010894:	699b      	ldr	r3, [r3, #24]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d10d      	bne.n	80108b6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 801089a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801089e:	b672      	cpsid	i
 80108a0:	f383 8811 	msr	BASEPRI, r3
 80108a4:	f3bf 8f6f 	isb	sy
 80108a8:	f3bf 8f4f 	dsb	sy
 80108ac:	b662      	cpsie	i
 80108ae:	617b      	str	r3, [r7, #20]
}
 80108b0:	bf00      	nop
 80108b2:	bf00      	nop
 80108b4:	e7fd      	b.n	80108b2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80108b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b8:	699a      	ldr	r2, [r3, #24]
 80108ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108bc:	18d1      	adds	r1, r2, r3
 80108be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108c4:	f7ff fefe 	bl	80106c4 <prvInsertTimerInActiveList>
					break;
 80108c8:	e017      	b.n	80108fa <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80108ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108d0:	f003 0302 	and.w	r3, r3, #2
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d103      	bne.n	80108e0 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80108d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108da:	f000 fbf7 	bl	80110cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80108de:	e00c      	b.n	80108fa <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108e6:	f023 0301 	bic.w	r3, r3, #1
 80108ea:	b2da      	uxtb	r2, r3
 80108ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80108f2:	e002      	b.n	80108fa <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80108f4:	bf00      	nop
 80108f6:	e000      	b.n	80108fa <prvProcessReceivedCommands+0x1b2>
					break;
 80108f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80108fa:	4b08      	ldr	r3, [pc, #32]	@ (801091c <prvProcessReceivedCommands+0x1d4>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	1d39      	adds	r1, r7, #4
 8010900:	2200      	movs	r2, #0
 8010902:	4618      	mov	r0, r3
 8010904:	f7fd ffa6 	bl	800e854 <xQueueReceive>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	f47f af20 	bne.w	8010750 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010910:	bf00      	nop
 8010912:	bf00      	nop
 8010914:	3730      	adds	r7, #48	@ 0x30
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	2000752c 	.word	0x2000752c

08010920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b088      	sub	sp, #32
 8010924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010926:	e04b      	b.n	80109c0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010928:	4b2f      	ldr	r3, [pc, #188]	@ (80109e8 <prvSwitchTimerLists+0xc8>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010932:	4b2d      	ldr	r3, [pc, #180]	@ (80109e8 <prvSwitchTimerLists+0xc8>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	68db      	ldr	r3, [r3, #12]
 801093a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	3304      	adds	r3, #4
 8010940:	4618      	mov	r0, r3
 8010942:	f7fd fa8b 	bl	800de5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	6a1b      	ldr	r3, [r3, #32]
 801094a:	68f8      	ldr	r0, [r7, #12]
 801094c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010954:	f003 0304 	and.w	r3, r3, #4
 8010958:	2b00      	cmp	r3, #0
 801095a:	d031      	beq.n	80109c0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	699b      	ldr	r3, [r3, #24]
 8010960:	693a      	ldr	r2, [r7, #16]
 8010962:	4413      	add	r3, r2
 8010964:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010966:	68ba      	ldr	r2, [r7, #8]
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	429a      	cmp	r2, r3
 801096c:	d90e      	bls.n	801098c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	68ba      	ldr	r2, [r7, #8]
 8010972:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	68fa      	ldr	r2, [r7, #12]
 8010978:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801097a:	4b1b      	ldr	r3, [pc, #108]	@ (80109e8 <prvSwitchTimerLists+0xc8>)
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	3304      	adds	r3, #4
 8010982:	4619      	mov	r1, r3
 8010984:	4610      	mov	r0, r2
 8010986:	f7fd fa30 	bl	800ddea <vListInsert>
 801098a:	e019      	b.n	80109c0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801098c:	2300      	movs	r3, #0
 801098e:	9300      	str	r3, [sp, #0]
 8010990:	2300      	movs	r3, #0
 8010992:	693a      	ldr	r2, [r7, #16]
 8010994:	2100      	movs	r1, #0
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f7ff fd4e 	bl	8010438 <xTimerGenericCommand>
 801099c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d10d      	bne.n	80109c0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80109a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109a8:	b672      	cpsid	i
 80109aa:	f383 8811 	msr	BASEPRI, r3
 80109ae:	f3bf 8f6f 	isb	sy
 80109b2:	f3bf 8f4f 	dsb	sy
 80109b6:	b662      	cpsie	i
 80109b8:	603b      	str	r3, [r7, #0]
}
 80109ba:	bf00      	nop
 80109bc:	bf00      	nop
 80109be:	e7fd      	b.n	80109bc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80109c0:	4b09      	ldr	r3, [pc, #36]	@ (80109e8 <prvSwitchTimerLists+0xc8>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d1ae      	bne.n	8010928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80109ca:	4b07      	ldr	r3, [pc, #28]	@ (80109e8 <prvSwitchTimerLists+0xc8>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80109d0:	4b06      	ldr	r3, [pc, #24]	@ (80109ec <prvSwitchTimerLists+0xcc>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4a04      	ldr	r2, [pc, #16]	@ (80109e8 <prvSwitchTimerLists+0xc8>)
 80109d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80109d8:	4a04      	ldr	r2, [pc, #16]	@ (80109ec <prvSwitchTimerLists+0xcc>)
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	6013      	str	r3, [r2, #0]
}
 80109de:	bf00      	nop
 80109e0:	3718      	adds	r7, #24
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	20007524 	.word	0x20007524
 80109ec:	20007528 	.word	0x20007528

080109f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80109f6:	f000 f969 	bl	8010ccc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80109fa:	4b15      	ldr	r3, [pc, #84]	@ (8010a50 <prvCheckForValidListAndQueue+0x60>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d120      	bne.n	8010a44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010a02:	4814      	ldr	r0, [pc, #80]	@ (8010a54 <prvCheckForValidListAndQueue+0x64>)
 8010a04:	f7fd f9a0 	bl	800dd48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a08:	4813      	ldr	r0, [pc, #76]	@ (8010a58 <prvCheckForValidListAndQueue+0x68>)
 8010a0a:	f7fd f99d 	bl	800dd48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a0e:	4b13      	ldr	r3, [pc, #76]	@ (8010a5c <prvCheckForValidListAndQueue+0x6c>)
 8010a10:	4a10      	ldr	r2, [pc, #64]	@ (8010a54 <prvCheckForValidListAndQueue+0x64>)
 8010a12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a14:	4b12      	ldr	r3, [pc, #72]	@ (8010a60 <prvCheckForValidListAndQueue+0x70>)
 8010a16:	4a10      	ldr	r2, [pc, #64]	@ (8010a58 <prvCheckForValidListAndQueue+0x68>)
 8010a18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	9300      	str	r3, [sp, #0]
 8010a1e:	4b11      	ldr	r3, [pc, #68]	@ (8010a64 <prvCheckForValidListAndQueue+0x74>)
 8010a20:	4a11      	ldr	r2, [pc, #68]	@ (8010a68 <prvCheckForValidListAndQueue+0x78>)
 8010a22:	2110      	movs	r1, #16
 8010a24:	200a      	movs	r0, #10
 8010a26:	f7fd faaf 	bl	800df88 <xQueueGenericCreateStatic>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	4a08      	ldr	r2, [pc, #32]	@ (8010a50 <prvCheckForValidListAndQueue+0x60>)
 8010a2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010a30:	4b07      	ldr	r3, [pc, #28]	@ (8010a50 <prvCheckForValidListAndQueue+0x60>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d005      	beq.n	8010a44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010a38:	4b05      	ldr	r3, [pc, #20]	@ (8010a50 <prvCheckForValidListAndQueue+0x60>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	490b      	ldr	r1, [pc, #44]	@ (8010a6c <prvCheckForValidListAndQueue+0x7c>)
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7fe fb20 	bl	800f084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a44:	f000 f978 	bl	8010d38 <vPortExitCritical>
}
 8010a48:	bf00      	nop
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	2000752c 	.word	0x2000752c
 8010a54:	200074fc 	.word	0x200074fc
 8010a58:	20007510 	.word	0x20007510
 8010a5c:	20007524 	.word	0x20007524
 8010a60:	20007528 	.word	0x20007528
 8010a64:	200075d8 	.word	0x200075d8
 8010a68:	20007538 	.word	0x20007538
 8010a6c:	08021a58 	.word	0x08021a58

08010a70 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b08a      	sub	sp, #40	@ 0x28
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	607a      	str	r2, [r7, #4]
 8010a7c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010a7e:	f06f 0301 	mvn.w	r3, #1
 8010a82:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a90:	4b06      	ldr	r3, [pc, #24]	@ (8010aac <xTimerPendFunctionCallFromISR+0x3c>)
 8010a92:	6818      	ldr	r0, [r3, #0]
 8010a94:	f107 0114 	add.w	r1, r7, #20
 8010a98:	2300      	movs	r3, #0
 8010a9a:	683a      	ldr	r2, [r7, #0]
 8010a9c:	f7fd fd9e 	bl	800e5dc <xQueueGenericSendFromISR>
 8010aa0:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3728      	adds	r7, #40	@ 0x28
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	2000752c 	.word	0x2000752c

08010ab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	3b04      	subs	r3, #4
 8010ac0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	3b04      	subs	r3, #4
 8010ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	f023 0201 	bic.w	r2, r3, #1
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	3b04      	subs	r3, #4
 8010ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8010b14 <pxPortInitialiseStack+0x64>)
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	3b14      	subs	r3, #20
 8010aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010aec:	687a      	ldr	r2, [r7, #4]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	3b04      	subs	r3, #4
 8010af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f06f 0202 	mvn.w	r2, #2
 8010afe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	3b20      	subs	r3, #32
 8010b04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b06:	68fb      	ldr	r3, [r7, #12]
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3714      	adds	r7, #20
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr
 8010b14:	08010b19 	.word	0x08010b19

08010b18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b22:	4b15      	ldr	r3, [pc, #84]	@ (8010b78 <prvTaskExitError+0x60>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010b2a:	d00d      	beq.n	8010b48 <prvTaskExitError+0x30>
	__asm volatile
 8010b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b30:	b672      	cpsid	i
 8010b32:	f383 8811 	msr	BASEPRI, r3
 8010b36:	f3bf 8f6f 	isb	sy
 8010b3a:	f3bf 8f4f 	dsb	sy
 8010b3e:	b662      	cpsie	i
 8010b40:	60fb      	str	r3, [r7, #12]
}
 8010b42:	bf00      	nop
 8010b44:	bf00      	nop
 8010b46:	e7fd      	b.n	8010b44 <prvTaskExitError+0x2c>
	__asm volatile
 8010b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b4c:	b672      	cpsid	i
 8010b4e:	f383 8811 	msr	BASEPRI, r3
 8010b52:	f3bf 8f6f 	isb	sy
 8010b56:	f3bf 8f4f 	dsb	sy
 8010b5a:	b662      	cpsie	i
 8010b5c:	60bb      	str	r3, [r7, #8]
}
 8010b5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b60:	bf00      	nop
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d0fc      	beq.n	8010b62 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b68:	bf00      	nop
 8010b6a:	bf00      	nop
 8010b6c:	3714      	adds	r7, #20
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop
 8010b78:	20000020 	.word	0x20000020
 8010b7c:	00000000 	.word	0x00000000

08010b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010b80:	4b07      	ldr	r3, [pc, #28]	@ (8010ba0 <pxCurrentTCBConst2>)
 8010b82:	6819      	ldr	r1, [r3, #0]
 8010b84:	6808      	ldr	r0, [r1, #0]
 8010b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8a:	f380 8809 	msr	PSP, r0
 8010b8e:	f3bf 8f6f 	isb	sy
 8010b92:	f04f 0000 	mov.w	r0, #0
 8010b96:	f380 8811 	msr	BASEPRI, r0
 8010b9a:	4770      	bx	lr
 8010b9c:	f3af 8000 	nop.w

08010ba0 <pxCurrentTCBConst2>:
 8010ba0:	20007014 	.word	0x20007014
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010ba4:	bf00      	nop
 8010ba6:	bf00      	nop

08010ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010ba8:	4808      	ldr	r0, [pc, #32]	@ (8010bcc <prvPortStartFirstTask+0x24>)
 8010baa:	6800      	ldr	r0, [r0, #0]
 8010bac:	6800      	ldr	r0, [r0, #0]
 8010bae:	f380 8808 	msr	MSP, r0
 8010bb2:	f04f 0000 	mov.w	r0, #0
 8010bb6:	f380 8814 	msr	CONTROL, r0
 8010bba:	b662      	cpsie	i
 8010bbc:	b661      	cpsie	f
 8010bbe:	f3bf 8f4f 	dsb	sy
 8010bc2:	f3bf 8f6f 	isb	sy
 8010bc6:	df00      	svc	0
 8010bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010bca:	bf00      	nop
 8010bcc:	e000ed08 	.word	0xe000ed08

08010bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010bd6:	4b37      	ldr	r3, [pc, #220]	@ (8010cb4 <xPortStartScheduler+0xe4>)
 8010bd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	22ff      	movs	r2, #255	@ 0xff
 8010be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010bf0:	78fb      	ldrb	r3, [r7, #3]
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010bf8:	b2da      	uxtb	r2, r3
 8010bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8010cb8 <xPortStartScheduler+0xe8>)
 8010bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c00:	2207      	movs	r2, #7
 8010c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c04:	e009      	b.n	8010c1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010c06:	4b2d      	ldr	r3, [pc, #180]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	3b01      	subs	r3, #1
 8010c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c10:	78fb      	ldrb	r3, [r7, #3]
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c1a:	78fb      	ldrb	r3, [r7, #3]
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c22:	2b80      	cmp	r3, #128	@ 0x80
 8010c24:	d0ef      	beq.n	8010c06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c26:	4b25      	ldr	r3, [pc, #148]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f1c3 0307 	rsb	r3, r3, #7
 8010c2e:	2b04      	cmp	r3, #4
 8010c30:	d00d      	beq.n	8010c4e <xPortStartScheduler+0x7e>
	__asm volatile
 8010c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c36:	b672      	cpsid	i
 8010c38:	f383 8811 	msr	BASEPRI, r3
 8010c3c:	f3bf 8f6f 	isb	sy
 8010c40:	f3bf 8f4f 	dsb	sy
 8010c44:	b662      	cpsie	i
 8010c46:	60bb      	str	r3, [r7, #8]
}
 8010c48:	bf00      	nop
 8010c4a:	bf00      	nop
 8010c4c:	e7fd      	b.n	8010c4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	021b      	lsls	r3, r3, #8
 8010c54:	4a19      	ldr	r2, [pc, #100]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010c58:	4b18      	ldr	r3, [pc, #96]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010c60:	4a16      	ldr	r2, [pc, #88]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	b2da      	uxtb	r2, r3
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c6c:	4b14      	ldr	r3, [pc, #80]	@ (8010cc0 <xPortStartScheduler+0xf0>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a13      	ldr	r2, [pc, #76]	@ (8010cc0 <xPortStartScheduler+0xf0>)
 8010c72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010c78:	4b11      	ldr	r3, [pc, #68]	@ (8010cc0 <xPortStartScheduler+0xf0>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4a10      	ldr	r2, [pc, #64]	@ (8010cc0 <xPortStartScheduler+0xf0>)
 8010c7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010c84:	f000 f8dc 	bl	8010e40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010c88:	4b0e      	ldr	r3, [pc, #56]	@ (8010cc4 <xPortStartScheduler+0xf4>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010c8e:	f000 f8fb 	bl	8010e88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010c92:	4b0d      	ldr	r3, [pc, #52]	@ (8010cc8 <xPortStartScheduler+0xf8>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4a0c      	ldr	r2, [pc, #48]	@ (8010cc8 <xPortStartScheduler+0xf8>)
 8010c98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010c9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010c9e:	f7ff ff83 	bl	8010ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010ca2:	f7fe fe75 	bl	800f990 <vTaskSwitchContext>
	prvTaskExitError();
 8010ca6:	f7ff ff37 	bl	8010b18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010caa:	2300      	movs	r3, #0
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3710      	adds	r7, #16
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	e000e400 	.word	0xe000e400
 8010cb8:	20007628 	.word	0x20007628
 8010cbc:	2000762c 	.word	0x2000762c
 8010cc0:	e000ed20 	.word	0xe000ed20
 8010cc4:	20000020 	.word	0x20000020
 8010cc8:	e000ef34 	.word	0xe000ef34

08010ccc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b083      	sub	sp, #12
 8010cd0:	af00      	add	r7, sp, #0
	__asm volatile
 8010cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cd6:	b672      	cpsid	i
 8010cd8:	f383 8811 	msr	BASEPRI, r3
 8010cdc:	f3bf 8f6f 	isb	sy
 8010ce0:	f3bf 8f4f 	dsb	sy
 8010ce4:	b662      	cpsie	i
 8010ce6:	607b      	str	r3, [r7, #4]
}
 8010ce8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010cea:	4b11      	ldr	r3, [pc, #68]	@ (8010d30 <vPortEnterCritical+0x64>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	3301      	adds	r3, #1
 8010cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8010d30 <vPortEnterCritical+0x64>)
 8010cf2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8010d30 <vPortEnterCritical+0x64>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	d112      	bne.n	8010d22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8010d34 <vPortEnterCritical+0x68>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d00d      	beq.n	8010d22 <vPortEnterCritical+0x56>
	__asm volatile
 8010d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d0a:	b672      	cpsid	i
 8010d0c:	f383 8811 	msr	BASEPRI, r3
 8010d10:	f3bf 8f6f 	isb	sy
 8010d14:	f3bf 8f4f 	dsb	sy
 8010d18:	b662      	cpsie	i
 8010d1a:	603b      	str	r3, [r7, #0]
}
 8010d1c:	bf00      	nop
 8010d1e:	bf00      	nop
 8010d20:	e7fd      	b.n	8010d1e <vPortEnterCritical+0x52>
	}
}
 8010d22:	bf00      	nop
 8010d24:	370c      	adds	r7, #12
 8010d26:	46bd      	mov	sp, r7
 8010d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop
 8010d30:	20000020 	.word	0x20000020
 8010d34:	e000ed04 	.word	0xe000ed04

08010d38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010d3e:	4b13      	ldr	r3, [pc, #76]	@ (8010d8c <vPortExitCritical+0x54>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d10d      	bne.n	8010d62 <vPortExitCritical+0x2a>
	__asm volatile
 8010d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d4a:	b672      	cpsid	i
 8010d4c:	f383 8811 	msr	BASEPRI, r3
 8010d50:	f3bf 8f6f 	isb	sy
 8010d54:	f3bf 8f4f 	dsb	sy
 8010d58:	b662      	cpsie	i
 8010d5a:	607b      	str	r3, [r7, #4]
}
 8010d5c:	bf00      	nop
 8010d5e:	bf00      	nop
 8010d60:	e7fd      	b.n	8010d5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010d62:	4b0a      	ldr	r3, [pc, #40]	@ (8010d8c <vPortExitCritical+0x54>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	3b01      	subs	r3, #1
 8010d68:	4a08      	ldr	r2, [pc, #32]	@ (8010d8c <vPortExitCritical+0x54>)
 8010d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d6c:	4b07      	ldr	r3, [pc, #28]	@ (8010d8c <vPortExitCritical+0x54>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d105      	bne.n	8010d80 <vPortExitCritical+0x48>
 8010d74:	2300      	movs	r3, #0
 8010d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	f383 8811 	msr	BASEPRI, r3
}
 8010d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010d80:	bf00      	nop
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	20000020 	.word	0x20000020

08010d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010d90:	f3ef 8009 	mrs	r0, PSP
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	4b15      	ldr	r3, [pc, #84]	@ (8010df0 <pxCurrentTCBConst>)
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	f01e 0f10 	tst.w	lr, #16
 8010da0:	bf08      	it	eq
 8010da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010daa:	6010      	str	r0, [r2, #0]
 8010dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010db4:	b672      	cpsid	i
 8010db6:	f380 8811 	msr	BASEPRI, r0
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	f3bf 8f6f 	isb	sy
 8010dc2:	b662      	cpsie	i
 8010dc4:	f7fe fde4 	bl	800f990 <vTaskSwitchContext>
 8010dc8:	f04f 0000 	mov.w	r0, #0
 8010dcc:	f380 8811 	msr	BASEPRI, r0
 8010dd0:	bc09      	pop	{r0, r3}
 8010dd2:	6819      	ldr	r1, [r3, #0]
 8010dd4:	6808      	ldr	r0, [r1, #0]
 8010dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dda:	f01e 0f10 	tst.w	lr, #16
 8010dde:	bf08      	it	eq
 8010de0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010de4:	f380 8809 	msr	PSP, r0
 8010de8:	f3bf 8f6f 	isb	sy
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop

08010df0 <pxCurrentTCBConst>:
 8010df0:	20007014 	.word	0x20007014
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010df4:	bf00      	nop
 8010df6:	bf00      	nop

08010df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8010dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e02:	b672      	cpsid	i
 8010e04:	f383 8811 	msr	BASEPRI, r3
 8010e08:	f3bf 8f6f 	isb	sy
 8010e0c:	f3bf 8f4f 	dsb	sy
 8010e10:	b662      	cpsie	i
 8010e12:	607b      	str	r3, [r7, #4]
}
 8010e14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e16:	f7fe fcff 	bl	800f818 <xTaskIncrementTick>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d003      	beq.n	8010e28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e20:	4b06      	ldr	r3, [pc, #24]	@ (8010e3c <SysTick_Handler+0x44>)
 8010e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	2300      	movs	r3, #0
 8010e2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	f383 8811 	msr	BASEPRI, r3
}
 8010e32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010e34:	bf00      	nop
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	e000ed04 	.word	0xe000ed04

08010e40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010e40:	b480      	push	{r7}
 8010e42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010e44:	4b0b      	ldr	r3, [pc, #44]	@ (8010e74 <vPortSetupTimerInterrupt+0x34>)
 8010e46:	2200      	movs	r2, #0
 8010e48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8010e78 <vPortSetupTimerInterrupt+0x38>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e50:	4b0a      	ldr	r3, [pc, #40]	@ (8010e7c <vPortSetupTimerInterrupt+0x3c>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4a0a      	ldr	r2, [pc, #40]	@ (8010e80 <vPortSetupTimerInterrupt+0x40>)
 8010e56:	fba2 2303 	umull	r2, r3, r2, r3
 8010e5a:	099b      	lsrs	r3, r3, #6
 8010e5c:	4a09      	ldr	r2, [pc, #36]	@ (8010e84 <vPortSetupTimerInterrupt+0x44>)
 8010e5e:	3b01      	subs	r3, #1
 8010e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010e62:	4b04      	ldr	r3, [pc, #16]	@ (8010e74 <vPortSetupTimerInterrupt+0x34>)
 8010e64:	2207      	movs	r2, #7
 8010e66:	601a      	str	r2, [r3, #0]
}
 8010e68:	bf00      	nop
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	e000e010 	.word	0xe000e010
 8010e78:	e000e018 	.word	0xe000e018
 8010e7c:	20000000 	.word	0x20000000
 8010e80:	10624dd3 	.word	0x10624dd3
 8010e84:	e000e014 	.word	0xe000e014

08010e88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010e88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010e98 <vPortEnableVFP+0x10>
 8010e8c:	6801      	ldr	r1, [r0, #0]
 8010e8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010e92:	6001      	str	r1, [r0, #0]
 8010e94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010e96:	bf00      	nop
 8010e98:	e000ed88 	.word	0xe000ed88

08010e9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b085      	sub	sp, #20
 8010ea0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010ea2:	f3ef 8305 	mrs	r3, IPSR
 8010ea6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	2b0f      	cmp	r3, #15
 8010eac:	d917      	bls.n	8010ede <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010eae:	4a1a      	ldr	r2, [pc, #104]	@ (8010f18 <vPortValidateInterruptPriority+0x7c>)
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010eb8:	4b18      	ldr	r3, [pc, #96]	@ (8010f1c <vPortValidateInterruptPriority+0x80>)
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	7afa      	ldrb	r2, [r7, #11]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d20d      	bcs.n	8010ede <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ec6:	b672      	cpsid	i
 8010ec8:	f383 8811 	msr	BASEPRI, r3
 8010ecc:	f3bf 8f6f 	isb	sy
 8010ed0:	f3bf 8f4f 	dsb	sy
 8010ed4:	b662      	cpsie	i
 8010ed6:	607b      	str	r3, [r7, #4]
}
 8010ed8:	bf00      	nop
 8010eda:	bf00      	nop
 8010edc:	e7fd      	b.n	8010eda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010ede:	4b10      	ldr	r3, [pc, #64]	@ (8010f20 <vPortValidateInterruptPriority+0x84>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8010f24 <vPortValidateInterruptPriority+0x88>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d90d      	bls.n	8010f0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8010eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ef2:	b672      	cpsid	i
 8010ef4:	f383 8811 	msr	BASEPRI, r3
 8010ef8:	f3bf 8f6f 	isb	sy
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	b662      	cpsie	i
 8010f02:	603b      	str	r3, [r7, #0]
}
 8010f04:	bf00      	nop
 8010f06:	bf00      	nop
 8010f08:	e7fd      	b.n	8010f06 <vPortValidateInterruptPriority+0x6a>
	}
 8010f0a:	bf00      	nop
 8010f0c:	3714      	adds	r7, #20
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	e000e3f0 	.word	0xe000e3f0
 8010f1c:	20007628 	.word	0x20007628
 8010f20:	e000ed0c 	.word	0xe000ed0c
 8010f24:	2000762c 	.word	0x2000762c

08010f28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b08a      	sub	sp, #40	@ 0x28
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f30:	2300      	movs	r3, #0
 8010f32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010f34:	f7fe fba0 	bl	800f678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010f38:	4b5f      	ldr	r3, [pc, #380]	@ (80110b8 <pvPortMalloc+0x190>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d101      	bne.n	8010f44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010f40:	f000 f924 	bl	801118c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010f44:	4b5d      	ldr	r3, [pc, #372]	@ (80110bc <pvPortMalloc+0x194>)
 8010f46:	681a      	ldr	r2, [r3, #0]
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4013      	ands	r3, r2
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f040 8094 	bne.w	801107a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d020      	beq.n	8010f9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010f58:	2208      	movs	r2, #8
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	4413      	add	r3, r2
 8010f5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f003 0307 	and.w	r3, r3, #7
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d017      	beq.n	8010f9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f023 0307 	bic.w	r3, r3, #7
 8010f70:	3308      	adds	r3, #8
 8010f72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f003 0307 	and.w	r3, r3, #7
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d00d      	beq.n	8010f9a <pvPortMalloc+0x72>
	__asm volatile
 8010f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f82:	b672      	cpsid	i
 8010f84:	f383 8811 	msr	BASEPRI, r3
 8010f88:	f3bf 8f6f 	isb	sy
 8010f8c:	f3bf 8f4f 	dsb	sy
 8010f90:	b662      	cpsie	i
 8010f92:	617b      	str	r3, [r7, #20]
}
 8010f94:	bf00      	nop
 8010f96:	bf00      	nop
 8010f98:	e7fd      	b.n	8010f96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d06c      	beq.n	801107a <pvPortMalloc+0x152>
 8010fa0:	4b47      	ldr	r3, [pc, #284]	@ (80110c0 <pvPortMalloc+0x198>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d867      	bhi.n	801107a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010faa:	4b46      	ldr	r3, [pc, #280]	@ (80110c4 <pvPortMalloc+0x19c>)
 8010fac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010fae:	4b45      	ldr	r3, [pc, #276]	@ (80110c4 <pvPortMalloc+0x19c>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fb4:	e004      	b.n	8010fc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d903      	bls.n	8010fd2 <pvPortMalloc+0xaa>
 8010fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d1f1      	bne.n	8010fb6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010fd2:	4b39      	ldr	r3, [pc, #228]	@ (80110b8 <pvPortMalloc+0x190>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d04e      	beq.n	801107a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010fdc:	6a3b      	ldr	r3, [r7, #32]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2208      	movs	r2, #8
 8010fe2:	4413      	add	r3, r2
 8010fe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	6a3b      	ldr	r3, [r7, #32]
 8010fec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff0:	685a      	ldr	r2, [r3, #4]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	1ad2      	subs	r2, r2, r3
 8010ff6:	2308      	movs	r3, #8
 8010ff8:	005b      	lsls	r3, r3, #1
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d922      	bls.n	8011044 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	4413      	add	r3, r2
 8011004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	f003 0307 	and.w	r3, r3, #7
 801100c:	2b00      	cmp	r3, #0
 801100e:	d00d      	beq.n	801102c <pvPortMalloc+0x104>
	__asm volatile
 8011010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011014:	b672      	cpsid	i
 8011016:	f383 8811 	msr	BASEPRI, r3
 801101a:	f3bf 8f6f 	isb	sy
 801101e:	f3bf 8f4f 	dsb	sy
 8011022:	b662      	cpsie	i
 8011024:	613b      	str	r3, [r7, #16]
}
 8011026:	bf00      	nop
 8011028:	bf00      	nop
 801102a:	e7fd      	b.n	8011028 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801102e:	685a      	ldr	r2, [r3, #4]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	1ad2      	subs	r2, r2, r3
 8011034:	69bb      	ldr	r3, [r7, #24]
 8011036:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801103e:	69b8      	ldr	r0, [r7, #24]
 8011040:	f000 f906 	bl	8011250 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011044:	4b1e      	ldr	r3, [pc, #120]	@ (80110c0 <pvPortMalloc+0x198>)
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	1ad3      	subs	r3, r2, r3
 801104e:	4a1c      	ldr	r2, [pc, #112]	@ (80110c0 <pvPortMalloc+0x198>)
 8011050:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011052:	4b1b      	ldr	r3, [pc, #108]	@ (80110c0 <pvPortMalloc+0x198>)
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	4b1c      	ldr	r3, [pc, #112]	@ (80110c8 <pvPortMalloc+0x1a0>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	429a      	cmp	r2, r3
 801105c:	d203      	bcs.n	8011066 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801105e:	4b18      	ldr	r3, [pc, #96]	@ (80110c0 <pvPortMalloc+0x198>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	4a19      	ldr	r2, [pc, #100]	@ (80110c8 <pvPortMalloc+0x1a0>)
 8011064:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011068:	685a      	ldr	r2, [r3, #4]
 801106a:	4b14      	ldr	r3, [pc, #80]	@ (80110bc <pvPortMalloc+0x194>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	431a      	orrs	r2, r3
 8011070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011072:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011076:	2200      	movs	r2, #0
 8011078:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801107a:	f7fe fb0b 	bl	800f694 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d101      	bne.n	8011088 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011084:	f7ef fc42 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	f003 0307 	and.w	r3, r3, #7
 801108e:	2b00      	cmp	r3, #0
 8011090:	d00d      	beq.n	80110ae <pvPortMalloc+0x186>
	__asm volatile
 8011092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011096:	b672      	cpsid	i
 8011098:	f383 8811 	msr	BASEPRI, r3
 801109c:	f3bf 8f6f 	isb	sy
 80110a0:	f3bf 8f4f 	dsb	sy
 80110a4:	b662      	cpsie	i
 80110a6:	60fb      	str	r3, [r7, #12]
}
 80110a8:	bf00      	nop
 80110aa:	bf00      	nop
 80110ac:	e7fd      	b.n	80110aa <pvPortMalloc+0x182>
	return pvReturn;
 80110ae:	69fb      	ldr	r3, [r7, #28]
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3728      	adds	r7, #40	@ 0x28
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	2001f638 	.word	0x2001f638
 80110bc:	2001f644 	.word	0x2001f644
 80110c0:	2001f63c 	.word	0x2001f63c
 80110c4:	2001f630 	.word	0x2001f630
 80110c8:	2001f640 	.word	0x2001f640

080110cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b086      	sub	sp, #24
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d04e      	beq.n	801117c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80110de:	2308      	movs	r3, #8
 80110e0:	425b      	negs	r3, r3
 80110e2:	697a      	ldr	r2, [r7, #20]
 80110e4:	4413      	add	r3, r2
 80110e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	685a      	ldr	r2, [r3, #4]
 80110f0:	4b24      	ldr	r3, [pc, #144]	@ (8011184 <vPortFree+0xb8>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4013      	ands	r3, r2
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d10d      	bne.n	8011116 <vPortFree+0x4a>
	__asm volatile
 80110fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110fe:	b672      	cpsid	i
 8011100:	f383 8811 	msr	BASEPRI, r3
 8011104:	f3bf 8f6f 	isb	sy
 8011108:	f3bf 8f4f 	dsb	sy
 801110c:	b662      	cpsie	i
 801110e:	60fb      	str	r3, [r7, #12]
}
 8011110:	bf00      	nop
 8011112:	bf00      	nop
 8011114:	e7fd      	b.n	8011112 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00d      	beq.n	801113a <vPortFree+0x6e>
	__asm volatile
 801111e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011122:	b672      	cpsid	i
 8011124:	f383 8811 	msr	BASEPRI, r3
 8011128:	f3bf 8f6f 	isb	sy
 801112c:	f3bf 8f4f 	dsb	sy
 8011130:	b662      	cpsie	i
 8011132:	60bb      	str	r3, [r7, #8]
}
 8011134:	bf00      	nop
 8011136:	bf00      	nop
 8011138:	e7fd      	b.n	8011136 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	685a      	ldr	r2, [r3, #4]
 801113e:	4b11      	ldr	r3, [pc, #68]	@ (8011184 <vPortFree+0xb8>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	4013      	ands	r3, r2
 8011144:	2b00      	cmp	r3, #0
 8011146:	d019      	beq.n	801117c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d115      	bne.n	801117c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	685a      	ldr	r2, [r3, #4]
 8011154:	4b0b      	ldr	r3, [pc, #44]	@ (8011184 <vPortFree+0xb8>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	43db      	mvns	r3, r3
 801115a:	401a      	ands	r2, r3
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011160:	f7fe fa8a 	bl	800f678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	685a      	ldr	r2, [r3, #4]
 8011168:	4b07      	ldr	r3, [pc, #28]	@ (8011188 <vPortFree+0xbc>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4413      	add	r3, r2
 801116e:	4a06      	ldr	r2, [pc, #24]	@ (8011188 <vPortFree+0xbc>)
 8011170:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011172:	6938      	ldr	r0, [r7, #16]
 8011174:	f000 f86c 	bl	8011250 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011178:	f7fe fa8c 	bl	800f694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801117c:	bf00      	nop
 801117e:	3718      	adds	r7, #24
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	2001f644 	.word	0x2001f644
 8011188:	2001f63c 	.word	0x2001f63c

0801118c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801118c:	b480      	push	{r7}
 801118e:	b085      	sub	sp, #20
 8011190:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011192:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8011196:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011198:	4b27      	ldr	r3, [pc, #156]	@ (8011238 <prvHeapInit+0xac>)
 801119a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	f003 0307 	and.w	r3, r3, #7
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00c      	beq.n	80111c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	3307      	adds	r3, #7
 80111aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f023 0307 	bic.w	r3, r3, #7
 80111b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80111b4:	68ba      	ldr	r2, [r7, #8]
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	1ad3      	subs	r3, r2, r3
 80111ba:	4a1f      	ldr	r2, [pc, #124]	@ (8011238 <prvHeapInit+0xac>)
 80111bc:	4413      	add	r3, r2
 80111be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80111c4:	4a1d      	ldr	r2, [pc, #116]	@ (801123c <prvHeapInit+0xb0>)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80111ca:	4b1c      	ldr	r3, [pc, #112]	@ (801123c <prvHeapInit+0xb0>)
 80111cc:	2200      	movs	r2, #0
 80111ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	68ba      	ldr	r2, [r7, #8]
 80111d4:	4413      	add	r3, r2
 80111d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80111d8:	2208      	movs	r2, #8
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	1a9b      	subs	r3, r3, r2
 80111de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f023 0307 	bic.w	r3, r3, #7
 80111e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	4a15      	ldr	r2, [pc, #84]	@ (8011240 <prvHeapInit+0xb4>)
 80111ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80111ee:	4b14      	ldr	r3, [pc, #80]	@ (8011240 <prvHeapInit+0xb4>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	2200      	movs	r2, #0
 80111f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80111f6:	4b12      	ldr	r3, [pc, #72]	@ (8011240 <prvHeapInit+0xb4>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	2200      	movs	r2, #0
 80111fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	1ad2      	subs	r2, r2, r3
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801120c:	4b0c      	ldr	r3, [pc, #48]	@ (8011240 <prvHeapInit+0xb4>)
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	4a0a      	ldr	r2, [pc, #40]	@ (8011244 <prvHeapInit+0xb8>)
 801121a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	4a09      	ldr	r2, [pc, #36]	@ (8011248 <prvHeapInit+0xbc>)
 8011222:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011224:	4b09      	ldr	r3, [pc, #36]	@ (801124c <prvHeapInit+0xc0>)
 8011226:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801122a:	601a      	str	r2, [r3, #0]
}
 801122c:	bf00      	nop
 801122e:	3714      	adds	r7, #20
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr
 8011238:	20007630 	.word	0x20007630
 801123c:	2001f630 	.word	0x2001f630
 8011240:	2001f638 	.word	0x2001f638
 8011244:	2001f640 	.word	0x2001f640
 8011248:	2001f63c 	.word	0x2001f63c
 801124c:	2001f644 	.word	0x2001f644

08011250 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011250:	b480      	push	{r7}
 8011252:	b085      	sub	sp, #20
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011258:	4b28      	ldr	r3, [pc, #160]	@ (80112fc <prvInsertBlockIntoFreeList+0xac>)
 801125a:	60fb      	str	r3, [r7, #12]
 801125c:	e002      	b.n	8011264 <prvInsertBlockIntoFreeList+0x14>
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	60fb      	str	r3, [r7, #12]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	687a      	ldr	r2, [r7, #4]
 801126a:	429a      	cmp	r2, r3
 801126c:	d8f7      	bhi.n	801125e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	4413      	add	r3, r2
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	429a      	cmp	r2, r3
 801127e:	d108      	bne.n	8011292 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	685a      	ldr	r2, [r3, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	441a      	add	r2, r3
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	68ba      	ldr	r2, [r7, #8]
 801129c:	441a      	add	r2, r3
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d118      	bne.n	80112d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	4b15      	ldr	r3, [pc, #84]	@ (8011300 <prvInsertBlockIntoFreeList+0xb0>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d00d      	beq.n	80112ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	685a      	ldr	r2, [r3, #4]
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	441a      	add	r2, r3
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	601a      	str	r2, [r3, #0]
 80112cc:	e008      	b.n	80112e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80112ce:	4b0c      	ldr	r3, [pc, #48]	@ (8011300 <prvInsertBlockIntoFreeList+0xb0>)
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	601a      	str	r2, [r3, #0]
 80112d6:	e003      	b.n	80112e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80112e0:	68fa      	ldr	r2, [r7, #12]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d002      	beq.n	80112ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112ee:	bf00      	nop
 80112f0:	3714      	adds	r7, #20
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr
 80112fa:	bf00      	nop
 80112fc:	2001f630 	.word	0x2001f630
 8011300:	2001f638 	.word	0x2001f638

08011304 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	22fa      	movs	r2, #250	@ 0xfa
 8011312:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	330c      	adds	r3, #12
 801131a:	461a      	mov	r2, r3
 801131c:	6839      	ldr	r1, [r7, #0]
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f002 f9a8 	bl	8013674 <tcpip_send_msg_wait_sem>
 8011324:	4603      	mov	r3, r0
 8011326:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d103      	bne.n	8011338 <netconn_apimsg+0x34>
    return apimsg->err;
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011336:	e001      	b.n	801133c <netconn_apimsg+0x38>
  }
  return err;
 8011338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801133c:	4618      	mov	r0, r3
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b08c      	sub	sp, #48	@ 0x30
 8011348:	af00      	add	r7, sp, #0
 801134a:	4603      	mov	r3, r0
 801134c:	603a      	str	r2, [r7, #0]
 801134e:	71fb      	strb	r3, [r7, #7]
 8011350:	460b      	mov	r3, r1
 8011352:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8011354:	79fb      	ldrb	r3, [r7, #7]
 8011356:	6839      	ldr	r1, [r7, #0]
 8011358:	4618      	mov	r0, r3
 801135a:	f000 ff7d 	bl	8012258 <netconn_alloc>
 801135e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8011360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011362:	2b00      	cmp	r3, #0
 8011364:	d054      	beq.n	8011410 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8011366:	79bb      	ldrb	r3, [r7, #6]
 8011368:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801136e:	f107 0308 	add.w	r3, r7, #8
 8011372:	4619      	mov	r1, r3
 8011374:	4829      	ldr	r0, [pc, #164]	@ (801141c <netconn_new_with_proto_and_callback+0xd8>)
 8011376:	f7ff ffc5 	bl	8011304 <netconn_apimsg>
 801137a:	4603      	mov	r3, r0
 801137c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8011380:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8011384:	2b00      	cmp	r3, #0
 8011386:	d043      	beq.n	8011410 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8011388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d005      	beq.n	801139c <netconn_new_with_proto_and_callback+0x58>
 8011390:	4b23      	ldr	r3, [pc, #140]	@ (8011420 <netconn_new_with_proto_and_callback+0xdc>)
 8011392:	22a3      	movs	r2, #163	@ 0xa3
 8011394:	4923      	ldr	r1, [pc, #140]	@ (8011424 <netconn_new_with_proto_and_callback+0xe0>)
 8011396:	4824      	ldr	r0, [pc, #144]	@ (8011428 <netconn_new_with_proto_and_callback+0xe4>)
 8011398:	f00f fab0 	bl	80208fc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 801139c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801139e:	3310      	adds	r3, #16
 80113a0:	4618      	mov	r0, r3
 80113a2:	f00e f83f 	bl	801f424 <sys_mbox_valid>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d105      	bne.n	80113b8 <netconn_new_with_proto_and_callback+0x74>
 80113ac:	4b1c      	ldr	r3, [pc, #112]	@ (8011420 <netconn_new_with_proto_and_callback+0xdc>)
 80113ae:	22a4      	movs	r2, #164	@ 0xa4
 80113b0:	491e      	ldr	r1, [pc, #120]	@ (801142c <netconn_new_with_proto_and_callback+0xe8>)
 80113b2:	481d      	ldr	r0, [pc, #116]	@ (8011428 <netconn_new_with_proto_and_callback+0xe4>)
 80113b4:	f00f faa2 	bl	80208fc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80113b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ba:	3314      	adds	r3, #20
 80113bc:	4618      	mov	r0, r3
 80113be:	f00e f831 	bl	801f424 <sys_mbox_valid>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d005      	beq.n	80113d4 <netconn_new_with_proto_and_callback+0x90>
 80113c8:	4b15      	ldr	r3, [pc, #84]	@ (8011420 <netconn_new_with_proto_and_callback+0xdc>)
 80113ca:	22a6      	movs	r2, #166	@ 0xa6
 80113cc:	4918      	ldr	r1, [pc, #96]	@ (8011430 <netconn_new_with_proto_and_callback+0xec>)
 80113ce:	4816      	ldr	r0, [pc, #88]	@ (8011428 <netconn_new_with_proto_and_callback+0xe4>)
 80113d0:	f00f fa94 	bl	80208fc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80113d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d6:	330c      	adds	r3, #12
 80113d8:	4618      	mov	r0, r3
 80113da:	f00e f8b1 	bl	801f540 <sys_sem_valid>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d105      	bne.n	80113f0 <netconn_new_with_proto_and_callback+0xac>
 80113e4:	4b0e      	ldr	r3, [pc, #56]	@ (8011420 <netconn_new_with_proto_and_callback+0xdc>)
 80113e6:	22a9      	movs	r2, #169	@ 0xa9
 80113e8:	4912      	ldr	r1, [pc, #72]	@ (8011434 <netconn_new_with_proto_and_callback+0xf0>)
 80113ea:	480f      	ldr	r0, [pc, #60]	@ (8011428 <netconn_new_with_proto_and_callback+0xe4>)
 80113ec:	f00f fa86 	bl	80208fc <iprintf>
      sys_sem_free(&conn->op_completed);
 80113f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f2:	330c      	adds	r3, #12
 80113f4:	4618      	mov	r0, r3
 80113f6:	f00e f896 	bl	801f526 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80113fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113fc:	3310      	adds	r3, #16
 80113fe:	4618      	mov	r0, r3
 8011400:	f00d ff9c 	bl	801f33c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011404:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011406:	2007      	movs	r0, #7
 8011408:	f002 ff08 	bl	801421c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801140c:	2300      	movs	r3, #0
 801140e:	e000      	b.n	8011412 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8011410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8011412:	4618      	mov	r0, r3
 8011414:	3730      	adds	r7, #48	@ 0x30
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	0801222d 	.word	0x0801222d
 8011420:	08021a60 	.word	0x08021a60
 8011424:	08021a94 	.word	0x08021a94
 8011428:	08021ab8 	.word	0x08021ab8
 801142c:	08021ae0 	.word	0x08021ae0
 8011430:	08021af8 	.word	0x08021af8
 8011434:	08021b1c 	.word	0x08021b1c

08011438 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b08c      	sub	sp, #48	@ 0x30
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d101      	bne.n	801144a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8011446:	2300      	movs	r3, #0
 8011448:	e014      	b.n	8011474 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801144e:	2329      	movs	r3, #41	@ 0x29
 8011450:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8011452:	f107 030c 	add.w	r3, r7, #12
 8011456:	4619      	mov	r1, r3
 8011458:	4808      	ldr	r0, [pc, #32]	@ (801147c <netconn_prepare_delete+0x44>)
 801145a:	f7ff ff53 	bl	8011304 <netconn_apimsg>
 801145e:	4603      	mov	r3, r0
 8011460:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8011464:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011468:	2b00      	cmp	r3, #0
 801146a:	d002      	beq.n	8011472 <netconn_prepare_delete+0x3a>
    return err;
 801146c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011470:	e000      	b.n	8011474 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8011472:	2300      	movs	r3, #0
}
 8011474:	4618      	mov	r0, r3
 8011476:	3730      	adds	r7, #48	@ 0x30
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	080127a1 	.word	0x080127a1

08011480 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d101      	bne.n	8011492 <netconn_delete+0x12>
    return ERR_OK;
 801148e:	2300      	movs	r3, #0
 8011490:	e00d      	b.n	80114ae <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f7ff ffd0 	bl	8011438 <netconn_prepare_delete>
 8011498:	4603      	mov	r3, r0
 801149a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 801149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d102      	bne.n	80114aa <netconn_delete+0x2a>
    netconn_free(conn);
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f000 ff49 	bl	801233c <netconn_free>
  }
  return err;
 80114aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3710      	adds	r7, #16
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
	...

080114b8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b08e      	sub	sp, #56	@ 0x38
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	4613      	mov	r3, r2
 80114c4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d109      	bne.n	80114e0 <netconn_bind+0x28>
 80114cc:	4b11      	ldr	r3, [pc, #68]	@ (8011514 <netconn_bind+0x5c>)
 80114ce:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80114d2:	4911      	ldr	r1, [pc, #68]	@ (8011518 <netconn_bind+0x60>)
 80114d4:	4811      	ldr	r0, [pc, #68]	@ (801151c <netconn_bind+0x64>)
 80114d6:	f00f fa11 	bl	80208fc <iprintf>
 80114da:	f06f 030f 	mvn.w	r3, #15
 80114de:	e015      	b.n	801150c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d101      	bne.n	80114ea <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80114e6:	4b0e      	ldr	r3, [pc, #56]	@ (8011520 <netconn_bind+0x68>)
 80114e8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80114f2:	88fb      	ldrh	r3, [r7, #6]
 80114f4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80114f6:	f107 0314 	add.w	r3, r7, #20
 80114fa:	4619      	mov	r1, r3
 80114fc:	4809      	ldr	r0, [pc, #36]	@ (8011524 <netconn_bind+0x6c>)
 80114fe:	f7ff ff01 	bl	8011304 <netconn_apimsg>
 8011502:	4603      	mov	r3, r0
 8011504:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011508:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801150c:	4618      	mov	r0, r3
 801150e:	3738      	adds	r7, #56	@ 0x38
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	08021a60 	.word	0x08021a60
 8011518:	08021b98 	.word	0x08021b98
 801151c:	08021ab8 	.word	0x08021ab8
 8011520:	08026420 	.word	0x08026420
 8011524:	0801296d 	.word	0x0801296d

08011528 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b08e      	sub	sp, #56	@ 0x38
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	4613      	mov	r3, r2
 8011534:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d109      	bne.n	8011550 <netconn_connect+0x28>
 801153c:	4b11      	ldr	r3, [pc, #68]	@ (8011584 <netconn_connect+0x5c>)
 801153e:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8011542:	4911      	ldr	r1, [pc, #68]	@ (8011588 <netconn_connect+0x60>)
 8011544:	4811      	ldr	r0, [pc, #68]	@ (801158c <netconn_connect+0x64>)
 8011546:	f00f f9d9 	bl	80208fc <iprintf>
 801154a:	f06f 030f 	mvn.w	r3, #15
 801154e:	e015      	b.n	801157c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d101      	bne.n	801155a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8011556:	4b0e      	ldr	r3, [pc, #56]	@ (8011590 <netconn_connect+0x68>)
 8011558:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011562:	88fb      	ldrh	r3, [r7, #6]
 8011564:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8011566:	f107 0314 	add.w	r3, r7, #20
 801156a:	4619      	mov	r1, r3
 801156c:	4809      	ldr	r0, [pc, #36]	@ (8011594 <netconn_connect+0x6c>)
 801156e:	f7ff fec9 	bl	8011304 <netconn_apimsg>
 8011572:	4603      	mov	r3, r0
 8011574:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011578:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801157c:	4618      	mov	r0, r3
 801157e:	3738      	adds	r7, #56	@ 0x38
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	08021a60 	.word	0x08021a60
 8011588:	08021bd4 	.word	0x08021bd4
 801158c:	08021ab8 	.word	0x08021ab8
 8011590:	08026420 	.word	0x08026420
 8011594:	08012b09 	.word	0x08012b09

08011598 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b08c      	sub	sp, #48	@ 0x30
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d109      	bne.n	80115ba <netconn_disconnect+0x22>
 80115a6:	4b0d      	ldr	r3, [pc, #52]	@ (80115dc <netconn_disconnect+0x44>)
 80115a8:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80115ac:	490c      	ldr	r1, [pc, #48]	@ (80115e0 <netconn_disconnect+0x48>)
 80115ae:	480d      	ldr	r0, [pc, #52]	@ (80115e4 <netconn_disconnect+0x4c>)
 80115b0:	f00f f9a4 	bl	80208fc <iprintf>
 80115b4:	f06f 030f 	mvn.w	r3, #15
 80115b8:	e00c      	b.n	80115d4 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 80115be:	f107 030c 	add.w	r3, r7, #12
 80115c2:	4619      	mov	r1, r3
 80115c4:	4808      	ldr	r0, [pc, #32]	@ (80115e8 <netconn_disconnect+0x50>)
 80115c6:	f7ff fe9d 	bl	8011304 <netconn_apimsg>
 80115ca:	4603      	mov	r3, r0
 80115cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80115d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3730      	adds	r7, #48	@ 0x30
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	08021a60 	.word	0x08021a60
 80115e0:	08021bf4 	.word	0x08021bf4
 80115e4:	08021ab8 	.word	0x08021ab8
 80115e8:	08012c91 	.word	0x08012c91

080115ec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b088      	sub	sp, #32
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	4613      	mov	r3, r2
 80115f8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80115fa:	2300      	movs	r3, #0
 80115fc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d109      	bne.n	8011618 <netconn_recv_data+0x2c>
 8011604:	4b5e      	ldr	r3, [pc, #376]	@ (8011780 <netconn_recv_data+0x194>)
 8011606:	f44f 7212 	mov.w	r2, #584	@ 0x248
 801160a:	495e      	ldr	r1, [pc, #376]	@ (8011784 <netconn_recv_data+0x198>)
 801160c:	485e      	ldr	r0, [pc, #376]	@ (8011788 <netconn_recv_data+0x19c>)
 801160e:	f00f f975 	bl	80208fc <iprintf>
 8011612:	f06f 030f 	mvn.w	r3, #15
 8011616:	e0ae      	b.n	8011776 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	2200      	movs	r2, #0
 801161c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d109      	bne.n	8011638 <netconn_recv_data+0x4c>
 8011624:	4b56      	ldr	r3, [pc, #344]	@ (8011780 <netconn_recv_data+0x194>)
 8011626:	f240 224a 	movw	r2, #586	@ 0x24a
 801162a:	4958      	ldr	r1, [pc, #352]	@ (801178c <netconn_recv_data+0x1a0>)
 801162c:	4856      	ldr	r0, [pc, #344]	@ (8011788 <netconn_recv_data+0x19c>)
 801162e:	f00f f965 	bl	80208fc <iprintf>
 8011632:	f06f 030f 	mvn.w	r3, #15
 8011636:	e09e      	b.n	8011776 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	3310      	adds	r3, #16
 801163c:	4618      	mov	r0, r3
 801163e:	f00d fef1 	bl	801f424 <sys_mbox_valid>
 8011642:	4603      	mov	r3, r0
 8011644:	2b00      	cmp	r3, #0
 8011646:	d10e      	bne.n	8011666 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011648:	68f8      	ldr	r0, [r7, #12]
 801164a:	f000 fa35 	bl	8011ab8 <netconn_err>
 801164e:	4603      	mov	r3, r0
 8011650:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8011652:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d002      	beq.n	8011660 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801165a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801165e:	e08a      	b.n	8011776 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8011660:	f06f 030a 	mvn.w	r3, #10
 8011664:	e087      	b.n	8011776 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f893 3020 	ldrb.w	r3, [r3, #32]
 801166c:	f003 0302 	and.w	r3, r3, #2
 8011670:	2b00      	cmp	r3, #0
 8011672:	d110      	bne.n	8011696 <netconn_recv_data+0xaa>
 8011674:	79fb      	ldrb	r3, [r7, #7]
 8011676:	f003 0304 	and.w	r3, r3, #4
 801167a:	2b00      	cmp	r3, #0
 801167c:	d10b      	bne.n	8011696 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011684:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011688:	2b00      	cmp	r3, #0
 801168a:	d104      	bne.n	8011696 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d024      	beq.n	80116e0 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	3310      	adds	r3, #16
 801169a:	f107 0218 	add.w	r2, r7, #24
 801169e:	4611      	mov	r1, r2
 80116a0:	4618      	mov	r0, r3
 80116a2:	f00d fea8 	bl	801f3f6 <sys_arch_mbox_tryfetch>
 80116a6:	4603      	mov	r3, r0
 80116a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80116ac:	d129      	bne.n	8011702 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80116ae:	68f8      	ldr	r0, [r7, #12]
 80116b0:	f000 fa02 	bl	8011ab8 <netconn_err>
 80116b4:	4603      	mov	r3, r0
 80116b6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80116b8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d002      	beq.n	80116c6 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 80116c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80116c4:	e057      	b.n	8011776 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116cc:	f003 0301 	and.w	r3, r3, #1
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d002      	beq.n	80116da <netconn_recv_data+0xee>
        return ERR_CONN;
 80116d4:	f06f 030a 	mvn.w	r3, #10
 80116d8:	e04d      	b.n	8011776 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 80116da:	f06f 0306 	mvn.w	r3, #6
 80116de:	e04a      	b.n	8011776 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f103 0010 	add.w	r0, r3, #16
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	69da      	ldr	r2, [r3, #28]
 80116ea:	f107 0318 	add.w	r3, r7, #24
 80116ee:	4619      	mov	r1, r3
 80116f0:	f00d fe50 	bl	801f394 <sys_arch_mbox_fetch>
 80116f4:	4603      	mov	r3, r0
 80116f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80116fa:	d102      	bne.n	8011702 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 80116fc:	f06f 0302 	mvn.w	r3, #2
 8011700:	e039      	b.n	8011776 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801170a:	2b10      	cmp	r3, #16
 801170c:	d117      	bne.n	801173e <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	f107 0217 	add.w	r2, r7, #23
 8011714:	4611      	mov	r1, r2
 8011716:	4618      	mov	r0, r3
 8011718:	f000 fa20 	bl	8011b5c <lwip_netconn_is_err_msg>
 801171c:	4603      	mov	r3, r0
 801171e:	2b00      	cmp	r3, #0
 8011720:	d009      	beq.n	8011736 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8011722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011726:	f113 0f0f 	cmn.w	r3, #15
 801172a:	d101      	bne.n	8011730 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 801172c:	2300      	movs	r3, #0
 801172e:	e022      	b.n	8011776 <netconn_recv_data+0x18a>
      }
      return err;
 8011730:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011734:	e01f      	b.n	8011776 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011736:	69bb      	ldr	r3, [r7, #24]
 8011738:	891b      	ldrh	r3, [r3, #8]
 801173a:	83fb      	strh	r3, [r7, #30]
 801173c:	e00d      	b.n	801175a <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d106      	bne.n	8011752 <netconn_recv_data+0x166>
 8011744:	4b0e      	ldr	r3, [pc, #56]	@ (8011780 <netconn_recv_data+0x194>)
 8011746:	f240 2291 	movw	r2, #657	@ 0x291
 801174a:	4911      	ldr	r1, [pc, #68]	@ (8011790 <netconn_recv_data+0x1a4>)
 801174c:	480e      	ldr	r0, [pc, #56]	@ (8011788 <netconn_recv_data+0x19c>)
 801174e:	f00f f8d5 	bl	80208fc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8011752:	69bb      	ldr	r3, [r7, #24]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	891b      	ldrh	r3, [r3, #8]
 8011758:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801175e:	2b00      	cmp	r3, #0
 8011760:	d005      	beq.n	801176e <netconn_recv_data+0x182>
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011766:	8bfa      	ldrh	r2, [r7, #30]
 8011768:	2101      	movs	r1, #1
 801176a:	68f8      	ldr	r0, [r7, #12]
 801176c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801176e:	69ba      	ldr	r2, [r7, #24]
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011774:	2300      	movs	r3, #0
}
 8011776:	4618      	mov	r0, r3
 8011778:	3720      	adds	r7, #32
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	08021a60 	.word	0x08021a60
 8011784:	08021c78 	.word	0x08021c78
 8011788:	08021ab8 	.word	0x08021ab8
 801178c:	08021c98 	.word	0x08021c98
 8011790:	08021cb4 	.word	0x08021cb4

08011794 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	af00      	add	r7, sp, #0
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	60b9      	str	r1, [r7, #8]
 801179e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d005      	beq.n	80117b2 <netconn_tcp_recvd_msg+0x1e>
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80117ae:	2b10      	cmp	r3, #16
 80117b0:	d009      	beq.n	80117c6 <netconn_tcp_recvd_msg+0x32>
 80117b2:	4b0c      	ldr	r3, [pc, #48]	@ (80117e4 <netconn_tcp_recvd_msg+0x50>)
 80117b4:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80117b8:	490b      	ldr	r1, [pc, #44]	@ (80117e8 <netconn_tcp_recvd_msg+0x54>)
 80117ba:	480c      	ldr	r0, [pc, #48]	@ (80117ec <netconn_tcp_recvd_msg+0x58>)
 80117bc:	f00f f89e 	bl	80208fc <iprintf>
 80117c0:	f06f 030f 	mvn.w	r3, #15
 80117c4:	e00a      	b.n	80117dc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	68fa      	ldr	r2, [r7, #12]
 80117ca:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	68ba      	ldr	r2, [r7, #8]
 80117d0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80117d2:	6879      	ldr	r1, [r7, #4]
 80117d4:	4806      	ldr	r0, [pc, #24]	@ (80117f0 <netconn_tcp_recvd_msg+0x5c>)
 80117d6:	f7ff fd95 	bl	8011304 <netconn_apimsg>
 80117da:	4603      	mov	r3, r0
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3710      	adds	r7, #16
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	08021a60 	.word	0x08021a60
 80117e8:	08021cc0 	.word	0x08021cc0
 80117ec:	08021ab8 	.word	0x08021ab8
 80117f0:	08012d67 	.word	0x08012d67

080117f4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b090      	sub	sp, #64	@ 0x40
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	4613      	mov	r3, r2
 8011800:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	3310      	adds	r3, #16
 8011806:	4618      	mov	r0, r3
 8011808:	f00d fe0c 	bl	801f424 <sys_mbox_valid>
 801180c:	4603      	mov	r3, r0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d102      	bne.n	8011818 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011812:	f06f 030a 	mvn.w	r3, #10
 8011816:	e072      	b.n	80118fe <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801181e:	b25b      	sxtb	r3, r3
 8011820:	2b00      	cmp	r3, #0
 8011822:	da09      	bge.n	8011838 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	f893 3020 	ldrb.w	r3, [r3, #32]
 801182a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801182e:	b2da      	uxtb	r2, r3
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8011836:	e03b      	b.n	80118b0 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011838:	79fb      	ldrb	r3, [r7, #7]
 801183a:	461a      	mov	r2, r3
 801183c:	68b9      	ldr	r1, [r7, #8]
 801183e:	68f8      	ldr	r0, [r7, #12]
 8011840:	f7ff fed4 	bl	80115ec <netconn_recv_data>
 8011844:	4603      	mov	r3, r0
 8011846:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 801184a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801184e:	2b00      	cmp	r3, #0
 8011850:	d002      	beq.n	8011858 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8011852:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011856:	e052      	b.n	80118fe <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 801185e:	79fb      	ldrb	r3, [r7, #7]
 8011860:	f003 0308 	and.w	r3, r3, #8
 8011864:	2b00      	cmp	r3, #0
 8011866:	d10e      	bne.n	8011886 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801186a:	2b00      	cmp	r3, #0
 801186c:	d002      	beq.n	8011874 <netconn_recv_data_tcp+0x80>
 801186e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011870:	891b      	ldrh	r3, [r3, #8]
 8011872:	e000      	b.n	8011876 <netconn_recv_data_tcp+0x82>
 8011874:	2301      	movs	r3, #1
 8011876:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011878:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801187a:	f107 0214 	add.w	r2, r7, #20
 801187e:	4619      	mov	r1, r3
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f7ff ff87 	bl	8011794 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011888:	2b00      	cmp	r3, #0
 801188a:	d136      	bne.n	80118fa <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 801188c:	79fb      	ldrb	r3, [r7, #7]
 801188e:	f003 0310 	and.w	r3, r3, #16
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00b      	beq.n	80118ae <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	f893 3020 	ldrb.w	r3, [r3, #32]
 801189c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80118a0:	b2da      	uxtb	r2, r3
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 80118a8:	f06f 0306 	mvn.w	r3, #6
 80118ac:	e027      	b.n	80118fe <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 80118ae:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d005      	beq.n	80118c4 <netconn_recv_data_tcp+0xd0>
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118bc:	2200      	movs	r2, #0
 80118be:	2101      	movs	r1, #1
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d10f      	bne.n	80118ec <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f000 f8f3 	bl	8011ab8 <netconn_err>
 80118d2:	4603      	mov	r3, r0
 80118d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80118d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d002      	beq.n	80118e6 <netconn_recv_data_tcp+0xf2>
          return err;
 80118e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80118e4:	e00b      	b.n	80118fe <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 80118e6:	f06f 030d 	mvn.w	r3, #13
 80118ea:	e008      	b.n	80118fe <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80118ec:	2101      	movs	r1, #1
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f000 f8b2 	bl	8011a58 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80118f4:	f06f 030e 	mvn.w	r3, #14
 80118f8:	e001      	b.n	80118fe <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 80118fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3740      	adds	r7, #64	@ 0x40
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
	...

08011908 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8011912:	2300      	movs	r3, #0
 8011914:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d109      	bne.n	8011930 <netconn_recv+0x28>
 801191c:	4b32      	ldr	r3, [pc, #200]	@ (80119e8 <netconn_recv+0xe0>)
 801191e:	f240 3263 	movw	r2, #867	@ 0x363
 8011922:	4932      	ldr	r1, [pc, #200]	@ (80119ec <netconn_recv+0xe4>)
 8011924:	4832      	ldr	r0, [pc, #200]	@ (80119f0 <netconn_recv+0xe8>)
 8011926:	f00e ffe9 	bl	80208fc <iprintf>
 801192a:	f06f 030f 	mvn.w	r3, #15
 801192e:	e056      	b.n	80119de <netconn_recv+0xd6>
  *new_buf = NULL;
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	2200      	movs	r2, #0
 8011934:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d109      	bne.n	8011950 <netconn_recv+0x48>
 801193c:	4b2a      	ldr	r3, [pc, #168]	@ (80119e8 <netconn_recv+0xe0>)
 801193e:	f240 3265 	movw	r2, #869	@ 0x365
 8011942:	492c      	ldr	r1, [pc, #176]	@ (80119f4 <netconn_recv+0xec>)
 8011944:	482a      	ldr	r0, [pc, #168]	@ (80119f0 <netconn_recv+0xe8>)
 8011946:	f00e ffd9 	bl	80208fc <iprintf>
 801194a:	f06f 030f 	mvn.w	r3, #15
 801194e:	e046      	b.n	80119de <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011958:	2b10      	cmp	r3, #16
 801195a:	d13a      	bne.n	80119d2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 801195c:	2300      	movs	r3, #0
 801195e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011960:	2006      	movs	r0, #6
 8011962:	f002 fbe5 	bl	8014130 <memp_malloc>
 8011966:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8011968:	697b      	ldr	r3, [r7, #20]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d102      	bne.n	8011974 <netconn_recv+0x6c>
      return ERR_MEM;
 801196e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011972:	e034      	b.n	80119de <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011974:	f107 030c 	add.w	r3, r7, #12
 8011978:	2200      	movs	r2, #0
 801197a:	4619      	mov	r1, r3
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f7ff ff39 	bl	80117f4 <netconn_recv_data_tcp>
 8011982:	4603      	mov	r3, r0
 8011984:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011986:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d006      	beq.n	801199c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 801198e:	6979      	ldr	r1, [r7, #20]
 8011990:	2006      	movs	r0, #6
 8011992:	f002 fc43 	bl	801421c <memp_free>
      return err;
 8011996:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801199a:	e020      	b.n	80119de <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d106      	bne.n	80119b0 <netconn_recv+0xa8>
 80119a2:	4b11      	ldr	r3, [pc, #68]	@ (80119e8 <netconn_recv+0xe0>)
 80119a4:	f240 3279 	movw	r2, #889	@ 0x379
 80119a8:	4913      	ldr	r1, [pc, #76]	@ (80119f8 <netconn_recv+0xf0>)
 80119aa:	4811      	ldr	r0, [pc, #68]	@ (80119f0 <netconn_recv+0xe8>)
 80119ac:	f00e ffa6 	bl	80208fc <iprintf>

    buf->p = p;
 80119b0:	68fa      	ldr	r2, [r7, #12]
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80119b6:	68fa      	ldr	r2, [r7, #12]
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	2200      	movs	r2, #0
 80119c0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	2200      	movs	r2, #0
 80119c6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	697a      	ldr	r2, [r7, #20]
 80119cc:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80119ce:	2300      	movs	r3, #0
 80119d0:	e005      	b.n	80119de <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80119d2:	2200      	movs	r2, #0
 80119d4:	6839      	ldr	r1, [r7, #0]
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f7ff fe08 	bl	80115ec <netconn_recv_data>
 80119dc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3718      	adds	r7, #24
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	08021a60 	.word	0x08021a60
 80119ec:	08021c78 	.word	0x08021c78
 80119f0:	08021ab8 	.word	0x08021ab8
 80119f4:	08021c98 	.word	0x08021c98
 80119f8:	08021d10 	.word	0x08021d10

080119fc <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b08c      	sub	sp, #48	@ 0x30
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d109      	bne.n	8011a20 <netconn_send+0x24>
 8011a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8011a48 <netconn_send+0x4c>)
 8011a0e:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8011a12:	490e      	ldr	r1, [pc, #56]	@ (8011a4c <netconn_send+0x50>)
 8011a14:	480e      	ldr	r0, [pc, #56]	@ (8011a50 <netconn_send+0x54>)
 8011a16:	f00e ff71 	bl	80208fc <iprintf>
 8011a1a:	f06f 030f 	mvn.w	r3, #15
 8011a1e:	e00e      	b.n	8011a3e <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8011a28:	f107 030c 	add.w	r3, r7, #12
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	4809      	ldr	r0, [pc, #36]	@ (8011a54 <netconn_send+0x58>)
 8011a30:	f7ff fc68 	bl	8011304 <netconn_apimsg>
 8011a34:	4603      	mov	r3, r0
 8011a36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011a3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3730      	adds	r7, #48	@ 0x30
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
 8011a46:	bf00      	nop
 8011a48:	08021a60 	.word	0x08021a60
 8011a4c:	08021d1c 	.word	0x08021d1c
 8011a50:	08021ab8 	.word	0x08021ab8
 8011a54:	08012ccd 	.word	0x08012ccd

08011a58 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b08c      	sub	sp, #48	@ 0x30
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	460b      	mov	r3, r1
 8011a62:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d109      	bne.n	8011a7e <netconn_close_shutdown+0x26>
 8011a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8011aa8 <netconn_close_shutdown+0x50>)
 8011a6c:	f240 4247 	movw	r2, #1095	@ 0x447
 8011a70:	490e      	ldr	r1, [pc, #56]	@ (8011aac <netconn_close_shutdown+0x54>)
 8011a72:	480f      	ldr	r0, [pc, #60]	@ (8011ab0 <netconn_close_shutdown+0x58>)
 8011a74:	f00e ff42 	bl	80208fc <iprintf>
 8011a78:	f06f 030f 	mvn.w	r3, #15
 8011a7c:	e010      	b.n	8011aa0 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8011a82:	78fb      	ldrb	r3, [r7, #3]
 8011a84:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8011a86:	2329      	movs	r3, #41	@ 0x29
 8011a88:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8011a8a:	f107 030c 	add.w	r3, r7, #12
 8011a8e:	4619      	mov	r1, r3
 8011a90:	4808      	ldr	r0, [pc, #32]	@ (8011ab4 <netconn_close_shutdown+0x5c>)
 8011a92:	f7ff fc37 	bl	8011304 <netconn_apimsg>
 8011a96:	4603      	mov	r3, r0
 8011a98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011a9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3730      	adds	r7, #48	@ 0x30
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}
 8011aa8:	08021a60 	.word	0x08021a60
 8011aac:	08021d9c 	.word	0x08021d9c
 8011ab0:	08021ab8 	.word	0x08021ab8
 8011ab4:	08013171 	.word	0x08013171

08011ab8 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d101      	bne.n	8011aca <netconn_err+0x12>
    return ERR_OK;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	e00d      	b.n	8011ae6 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011aca:	f00d fdb5 	bl	801f638 <sys_arch_protect>
 8011ace:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	7a1b      	ldrb	r3, [r3, #8]
 8011ad4:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011adc:	68f8      	ldr	r0, [r7, #12]
 8011ade:	f00d fdb9 	bl	801f654 <sys_arch_unprotect>
  return err;
 8011ae2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
	...

08011af0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	4603      	mov	r3, r0
 8011af8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011afe:	f113 0f0d 	cmn.w	r3, #13
 8011b02:	d009      	beq.n	8011b18 <lwip_netconn_err_to_msg+0x28>
 8011b04:	f113 0f0d 	cmn.w	r3, #13
 8011b08:	dc0c      	bgt.n	8011b24 <lwip_netconn_err_to_msg+0x34>
 8011b0a:	f113 0f0f 	cmn.w	r3, #15
 8011b0e:	d007      	beq.n	8011b20 <lwip_netconn_err_to_msg+0x30>
 8011b10:	f113 0f0e 	cmn.w	r3, #14
 8011b14:	d002      	beq.n	8011b1c <lwip_netconn_err_to_msg+0x2c>
 8011b16:	e005      	b.n	8011b24 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011b18:	4b0a      	ldr	r3, [pc, #40]	@ (8011b44 <lwip_netconn_err_to_msg+0x54>)
 8011b1a:	e00e      	b.n	8011b3a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8011b48 <lwip_netconn_err_to_msg+0x58>)
 8011b1e:	e00c      	b.n	8011b3a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8011b20:	4b0a      	ldr	r3, [pc, #40]	@ (8011b4c <lwip_netconn_err_to_msg+0x5c>)
 8011b22:	e00a      	b.n	8011b3a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8011b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d005      	beq.n	8011b38 <lwip_netconn_err_to_msg+0x48>
 8011b2c:	4b08      	ldr	r3, [pc, #32]	@ (8011b50 <lwip_netconn_err_to_msg+0x60>)
 8011b2e:	227d      	movs	r2, #125	@ 0x7d
 8011b30:	4908      	ldr	r1, [pc, #32]	@ (8011b54 <lwip_netconn_err_to_msg+0x64>)
 8011b32:	4809      	ldr	r0, [pc, #36]	@ (8011b58 <lwip_netconn_err_to_msg+0x68>)
 8011b34:	f00e fee2 	bl	80208fc <iprintf>
      return NULL;
 8011b38:	2300      	movs	r3, #0
  }
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3708      	adds	r7, #8
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	080262d8 	.word	0x080262d8
 8011b48:	080262d9 	.word	0x080262d9
 8011b4c:	080262da 	.word	0x080262da
 8011b50:	08021db8 	.word	0x08021db8
 8011b54:	08021dec 	.word	0x08021dec
 8011b58:	08021dfc 	.word	0x08021dfc

08011b5c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d105      	bne.n	8011b78 <lwip_netconn_is_err_msg+0x1c>
 8011b6c:	4b12      	ldr	r3, [pc, #72]	@ (8011bb8 <lwip_netconn_is_err_msg+0x5c>)
 8011b6e:	2285      	movs	r2, #133	@ 0x85
 8011b70:	4912      	ldr	r1, [pc, #72]	@ (8011bbc <lwip_netconn_is_err_msg+0x60>)
 8011b72:	4813      	ldr	r0, [pc, #76]	@ (8011bc0 <lwip_netconn_is_err_msg+0x64>)
 8011b74:	f00e fec2 	bl	80208fc <iprintf>

  if (msg == &netconn_aborted) {
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	4a12      	ldr	r2, [pc, #72]	@ (8011bc4 <lwip_netconn_is_err_msg+0x68>)
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	d104      	bne.n	8011b8a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	22f3      	movs	r2, #243	@ 0xf3
 8011b84:	701a      	strb	r2, [r3, #0]
    return 1;
 8011b86:	2301      	movs	r3, #1
 8011b88:	e012      	b.n	8011bb0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8011bc8 <lwip_netconn_is_err_msg+0x6c>)
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	d104      	bne.n	8011b9c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	22f2      	movs	r2, #242	@ 0xf2
 8011b96:	701a      	strb	r2, [r3, #0]
    return 1;
 8011b98:	2301      	movs	r3, #1
 8011b9a:	e009      	b.n	8011bb0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8011bcc <lwip_netconn_is_err_msg+0x70>)
 8011ba0:	4293      	cmp	r3, r2
 8011ba2:	d104      	bne.n	8011bae <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	22f1      	movs	r2, #241	@ 0xf1
 8011ba8:	701a      	strb	r2, [r3, #0]
    return 1;
 8011baa:	2301      	movs	r3, #1
 8011bac:	e000      	b.n	8011bb0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8011bae:	2300      	movs	r3, #0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3708      	adds	r7, #8
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	08021db8 	.word	0x08021db8
 8011bbc:	08021e24 	.word	0x08021e24
 8011bc0:	08021dfc 	.word	0x08021dfc
 8011bc4:	080262d8 	.word	0x080262d8
 8011bc8:	080262d9 	.word	0x080262d9
 8011bcc:	080262da 	.word	0x080262da

08011bd0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b088      	sub	sp, #32
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	607a      	str	r2, [r7, #4]
 8011bdc:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d105      	bne.n	8011bf0 <recv_udp+0x20>
 8011be4:	4b34      	ldr	r3, [pc, #208]	@ (8011cb8 <recv_udp+0xe8>)
 8011be6:	22e5      	movs	r2, #229	@ 0xe5
 8011be8:	4934      	ldr	r1, [pc, #208]	@ (8011cbc <recv_udp+0xec>)
 8011bea:	4835      	ldr	r0, [pc, #212]	@ (8011cc0 <recv_udp+0xf0>)
 8011bec:	f00e fe86 	bl	80208fc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d105      	bne.n	8011c02 <recv_udp+0x32>
 8011bf6:	4b30      	ldr	r3, [pc, #192]	@ (8011cb8 <recv_udp+0xe8>)
 8011bf8:	22e6      	movs	r2, #230	@ 0xe6
 8011bfa:	4932      	ldr	r1, [pc, #200]	@ (8011cc4 <recv_udp+0xf4>)
 8011bfc:	4830      	ldr	r0, [pc, #192]	@ (8011cc0 <recv_udp+0xf0>)
 8011bfe:	f00e fe7d 	bl	80208fc <iprintf>
  conn = (struct netconn *)arg;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d103      	bne.n	8011c14 <recv_udp+0x44>
    pbuf_free(p);
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f003 faeb 	bl	80151e8 <pbuf_free>
    return;
 8011c12:	e04d      	b.n	8011cb0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	68ba      	ldr	r2, [r7, #8]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d005      	beq.n	8011c2a <recv_udp+0x5a>
 8011c1e:	4b26      	ldr	r3, [pc, #152]	@ (8011cb8 <recv_udp+0xe8>)
 8011c20:	22ee      	movs	r2, #238	@ 0xee
 8011c22:	4929      	ldr	r1, [pc, #164]	@ (8011cc8 <recv_udp+0xf8>)
 8011c24:	4826      	ldr	r0, [pc, #152]	@ (8011cc0 <recv_udp+0xf0>)
 8011c26:	f00e fe69 	bl	80208fc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	3310      	adds	r3, #16
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f00d fbf8 	bl	801f424 <sys_mbox_valid>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d103      	bne.n	8011c42 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f003 fad4 	bl	80151e8 <pbuf_free>
    return;
 8011c40:	e036      	b.n	8011cb0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011c42:	2006      	movs	r0, #6
 8011c44:	f002 fa74 	bl	8014130 <memp_malloc>
 8011c48:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011c4a:	69bb      	ldr	r3, [r7, #24]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d103      	bne.n	8011c58 <recv_udp+0x88>
    pbuf_free(p);
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f003 fac9 	bl	80151e8 <pbuf_free>
    return;
 8011c56:	e02b      	b.n	8011cb0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011c58:	69bb      	ldr	r3, [r7, #24]
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011c5e:	69bb      	ldr	r3, [r7, #24]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d002      	beq.n	8011c70 <recv_udp+0xa0>
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	e000      	b.n	8011c72 <recv_udp+0xa2>
 8011c70:	2300      	movs	r3, #0
 8011c72:	69ba      	ldr	r2, [r7, #24]
 8011c74:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011c76:	69bb      	ldr	r3, [r7, #24]
 8011c78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011c7a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	891b      	ldrh	r3, [r3, #8]
 8011c80:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	3310      	adds	r3, #16
 8011c86:	69b9      	ldr	r1, [r7, #24]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f00d fb69 	bl	801f360 <sys_mbox_trypost>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d003      	beq.n	8011c9c <recv_udp+0xcc>
    netbuf_delete(buf);
 8011c94:	69b8      	ldr	r0, [r7, #24]
 8011c96:	f001 fb2b 	bl	80132f0 <netbuf_delete>
    return;
 8011c9a:	e009      	b.n	8011cb0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d005      	beq.n	8011cb0 <recv_udp+0xe0>
 8011ca4:	69fb      	ldr	r3, [r7, #28]
 8011ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ca8:	8afa      	ldrh	r2, [r7, #22]
 8011caa:	2100      	movs	r1, #0
 8011cac:	69f8      	ldr	r0, [r7, #28]
 8011cae:	4798      	blx	r3
  }
}
 8011cb0:	3720      	adds	r7, #32
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	08021db8 	.word	0x08021db8
 8011cbc:	08021e30 	.word	0x08021e30
 8011cc0:	08021dfc 	.word	0x08021dfc
 8011cc4:	08021e54 	.word	0x08021e54
 8011cc8:	08021e74 	.word	0x08021e74

08011ccc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b088      	sub	sp, #32
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	607a      	str	r2, [r7, #4]
 8011cd8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d106      	bne.n	8011cee <recv_tcp+0x22>
 8011ce0:	4b36      	ldr	r3, [pc, #216]	@ (8011dbc <recv_tcp+0xf0>)
 8011ce2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011ce6:	4936      	ldr	r1, [pc, #216]	@ (8011dc0 <recv_tcp+0xf4>)
 8011ce8:	4836      	ldr	r0, [pc, #216]	@ (8011dc4 <recv_tcp+0xf8>)
 8011cea:	f00e fe07 	bl	80208fc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d106      	bne.n	8011d02 <recv_tcp+0x36>
 8011cf4:	4b31      	ldr	r3, [pc, #196]	@ (8011dbc <recv_tcp+0xf0>)
 8011cf6:	f240 122d 	movw	r2, #301	@ 0x12d
 8011cfa:	4933      	ldr	r1, [pc, #204]	@ (8011dc8 <recv_tcp+0xfc>)
 8011cfc:	4831      	ldr	r0, [pc, #196]	@ (8011dc4 <recv_tcp+0xf8>)
 8011cfe:	f00e fdfd 	bl	80208fc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8011d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d006      	beq.n	8011d18 <recv_tcp+0x4c>
 8011d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8011dbc <recv_tcp+0xf0>)
 8011d0c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8011d10:	492e      	ldr	r1, [pc, #184]	@ (8011dcc <recv_tcp+0x100>)
 8011d12:	482c      	ldr	r0, [pc, #176]	@ (8011dc4 <recv_tcp+0xf8>)
 8011d14:	f00e fdf2 	bl	80208fc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d102      	bne.n	8011d28 <recv_tcp+0x5c>
    return ERR_VAL;
 8011d22:	f06f 0305 	mvn.w	r3, #5
 8011d26:	e045      	b.n	8011db4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	68ba      	ldr	r2, [r7, #8]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d006      	beq.n	8011d40 <recv_tcp+0x74>
 8011d32:	4b22      	ldr	r3, [pc, #136]	@ (8011dbc <recv_tcp+0xf0>)
 8011d34:	f240 1235 	movw	r2, #309	@ 0x135
 8011d38:	4925      	ldr	r1, [pc, #148]	@ (8011dd0 <recv_tcp+0x104>)
 8011d3a:	4822      	ldr	r0, [pc, #136]	@ (8011dc4 <recv_tcp+0xf8>)
 8011d3c:	f00e fdde 	bl	80208fc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	3310      	adds	r3, #16
 8011d44:	4618      	mov	r0, r3
 8011d46:	f00d fb6d 	bl	801f424 <sys_mbox_valid>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d10d      	bne.n	8011d6c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d008      	beq.n	8011d68 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	891b      	ldrh	r3, [r3, #8]
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	68b8      	ldr	r0, [r7, #8]
 8011d5e:	f004 f96d 	bl	801603c <tcp_recved>
      pbuf_free(p);
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f003 fa40 	bl	80151e8 <pbuf_free>
    }
    return ERR_OK;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	e023      	b.n	8011db4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d005      	beq.n	8011d7e <recv_tcp+0xb2>
    msg = p;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	891b      	ldrh	r3, [r3, #8]
 8011d7a:	83fb      	strh	r3, [r7, #30]
 8011d7c:	e003      	b.n	8011d86 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8011d7e:	4b15      	ldr	r3, [pc, #84]	@ (8011dd4 <recv_tcp+0x108>)
 8011d80:	61bb      	str	r3, [r7, #24]
    len = 0;
 8011d82:	2300      	movs	r3, #0
 8011d84:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	3310      	adds	r3, #16
 8011d8a:	69b9      	ldr	r1, [r7, #24]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f00d fae7 	bl	801f360 <sys_mbox_trypost>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d002      	beq.n	8011d9e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011d98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d9c:	e00a      	b.n	8011db4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d005      	beq.n	8011db2 <recv_tcp+0xe6>
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011daa:	8bfa      	ldrh	r2, [r7, #30]
 8011dac:	2100      	movs	r1, #0
 8011dae:	6978      	ldr	r0, [r7, #20]
 8011db0:	4798      	blx	r3
  }

  return ERR_OK;
 8011db2:	2300      	movs	r3, #0
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3720      	adds	r7, #32
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	08021db8 	.word	0x08021db8
 8011dc0:	08021e94 	.word	0x08021e94
 8011dc4:	08021dfc 	.word	0x08021dfc
 8011dc8:	08021eb8 	.word	0x08021eb8
 8011dcc:	08021ed8 	.word	0x08021ed8
 8011dd0:	08021ef0 	.word	0x08021ef0
 8011dd4:	080262da 	.word	0x080262da

08011dd8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b084      	sub	sp, #16
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d106      	bne.n	8011dfa <poll_tcp+0x22>
 8011dec:	4b2b      	ldr	r3, [pc, #172]	@ (8011e9c <poll_tcp+0xc4>)
 8011dee:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8011df2:	492b      	ldr	r1, [pc, #172]	@ (8011ea0 <poll_tcp+0xc8>)
 8011df4:	482b      	ldr	r0, [pc, #172]	@ (8011ea4 <poll_tcp+0xcc>)
 8011df6:	f00e fd81 	bl	80208fc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	785b      	ldrb	r3, [r3, #1]
 8011dfe:	2b01      	cmp	r3, #1
 8011e00:	d104      	bne.n	8011e0c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011e02:	2101      	movs	r1, #1
 8011e04:	68f8      	ldr	r0, [r7, #12]
 8011e06:	f000 ffe3 	bl	8012dd0 <lwip_netconn_do_writemore>
 8011e0a:	e016      	b.n	8011e3a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	785b      	ldrb	r3, [r3, #1]
 8011e10:	2b04      	cmp	r3, #4
 8011e12:	d112      	bne.n	8011e3a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00a      	beq.n	8011e32 <poll_tcp+0x5a>
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e20:	7a5b      	ldrb	r3, [r3, #9]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d005      	beq.n	8011e32 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e2a:	7a5a      	ldrb	r2, [r3, #9]
 8011e2c:	3a01      	subs	r2, #1
 8011e2e:	b2d2      	uxtb	r2, r2
 8011e30:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011e32:	2101      	movs	r1, #1
 8011e34:	68f8      	ldr	r0, [r7, #12]
 8011e36:	f000 fb49 	bl	80124cc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e40:	f003 0310 	and.w	r3, r3, #16
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d023      	beq.n	8011e90 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d01f      	beq.n	8011e90 <poll_tcp+0xb8>
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011e58:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011e5c:	d318      	bcc.n	8011e90 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011e66:	2b04      	cmp	r3, #4
 8011e68:	d812      	bhi.n	8011e90 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e70:	f023 0310 	bic.w	r3, r3, #16
 8011e74:	b2da      	uxtb	r2, r3
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d005      	beq.n	8011e90 <poll_tcp+0xb8>
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e88:	2200      	movs	r2, #0
 8011e8a:	2102      	movs	r1, #2
 8011e8c:	68f8      	ldr	r0, [r7, #12]
 8011e8e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011e90:	2300      	movs	r3, #0
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3710      	adds	r7, #16
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	bf00      	nop
 8011e9c:	08021db8 	.word	0x08021db8
 8011ea0:	08021f10 	.word	0x08021f10
 8011ea4:	08021dfc 	.word	0x08021dfc

08011ea8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b086      	sub	sp, #24
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d106      	bne.n	8011ece <sent_tcp+0x26>
 8011ec0:	4b21      	ldr	r3, [pc, #132]	@ (8011f48 <sent_tcp+0xa0>)
 8011ec2:	f240 1293 	movw	r2, #403	@ 0x193
 8011ec6:	4921      	ldr	r1, [pc, #132]	@ (8011f4c <sent_tcp+0xa4>)
 8011ec8:	4821      	ldr	r0, [pc, #132]	@ (8011f50 <sent_tcp+0xa8>)
 8011eca:	f00e fd17 	bl	80208fc <iprintf>

  if (conn) {
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d034      	beq.n	8011f3e <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	785b      	ldrb	r3, [r3, #1]
 8011ed8:	2b01      	cmp	r3, #1
 8011eda:	d104      	bne.n	8011ee6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011edc:	2101      	movs	r1, #1
 8011ede:	6978      	ldr	r0, [r7, #20]
 8011ee0:	f000 ff76 	bl	8012dd0 <lwip_netconn_do_writemore>
 8011ee4:	e007      	b.n	8011ef6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	785b      	ldrb	r3, [r3, #1]
 8011eea:	2b04      	cmp	r3, #4
 8011eec:	d103      	bne.n	8011ef6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011eee:	2101      	movs	r1, #1
 8011ef0:	6978      	ldr	r0, [r7, #20]
 8011ef2:	f000 faeb 	bl	80124cc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011ef6:	697b      	ldr	r3, [r7, #20]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d01f      	beq.n	8011f3e <sent_tcp+0x96>
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011f06:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011f0a:	d318      	bcc.n	8011f3e <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011f0c:	697b      	ldr	r3, [r7, #20]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011f14:	2b04      	cmp	r3, #4
 8011f16:	d812      	bhi.n	8011f3e <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011f1e:	f023 0310 	bic.w	r3, r3, #16
 8011f22:	b2da      	uxtb	r2, r3
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d005      	beq.n	8011f3e <sent_tcp+0x96>
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f36:	88fa      	ldrh	r2, [r7, #6]
 8011f38:	2102      	movs	r1, #2
 8011f3a:	6978      	ldr	r0, [r7, #20]
 8011f3c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011f3e:	2300      	movs	r3, #0
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3718      	adds	r7, #24
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	08021db8 	.word	0x08021db8
 8011f4c:	08021f10 	.word	0x08021f10
 8011f50:	08021dfc 	.word	0x08021dfc

08011f54 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b088      	sub	sp, #32
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011f64:	69fb      	ldr	r3, [r7, #28]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d106      	bne.n	8011f78 <err_tcp+0x24>
 8011f6a:	4b61      	ldr	r3, [pc, #388]	@ (80120f0 <err_tcp+0x19c>)
 8011f6c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011f70:	4960      	ldr	r1, [pc, #384]	@ (80120f4 <err_tcp+0x1a0>)
 8011f72:	4861      	ldr	r0, [pc, #388]	@ (80120f8 <err_tcp+0x1a4>)
 8011f74:	f00e fcc2 	bl	80208fc <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011f78:	f00d fb5e 	bl	801f638 <sys_arch_protect>
 8011f7c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	2200      	movs	r2, #0
 8011f82:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	78fa      	ldrb	r2, [r7, #3]
 8011f88:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011f8a:	69fb      	ldr	r3, [r7, #28]
 8011f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011f90:	f043 0301 	orr.w	r3, r3, #1
 8011f94:	b2da      	uxtb	r2, r3
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	785b      	ldrb	r3, [r3, #1]
 8011fa0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011fa2:	69fb      	ldr	r3, [r7, #28]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011fa8:	69b8      	ldr	r0, [r7, #24]
 8011faa:	f00d fb53 	bl	801f654 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d005      	beq.n	8011fc2 <err_tcp+0x6e>
 8011fb6:	69fb      	ldr	r3, [r7, #28]
 8011fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fba:	2200      	movs	r2, #0
 8011fbc:	2104      	movs	r1, #4
 8011fbe:	69f8      	ldr	r0, [r7, #28]
 8011fc0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d005      	beq.n	8011fd6 <err_tcp+0x82>
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fce:	2200      	movs	r2, #0
 8011fd0:	2100      	movs	r1, #0
 8011fd2:	69f8      	ldr	r0, [r7, #28]
 8011fd4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011fd6:	69fb      	ldr	r3, [r7, #28]
 8011fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d005      	beq.n	8011fea <err_tcp+0x96>
 8011fde:	69fb      	ldr	r3, [r7, #28]
 8011fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	2102      	movs	r1, #2
 8011fe6:	69f8      	ldr	r0, [r7, #28]
 8011fe8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7ff fd7e 	bl	8011af0 <lwip_netconn_err_to_msg>
 8011ff4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	3310      	adds	r3, #16
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f00d fa12 	bl	801f424 <sys_mbox_valid>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d005      	beq.n	8012012 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	3310      	adds	r3, #16
 801200a:	6939      	ldr	r1, [r7, #16]
 801200c:	4618      	mov	r0, r3
 801200e:	f00d f9a7 	bl	801f360 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	3314      	adds	r3, #20
 8012016:	4618      	mov	r0, r3
 8012018:	f00d fa04 	bl	801f424 <sys_mbox_valid>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d005      	beq.n	801202e <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	3314      	adds	r3, #20
 8012026:	6939      	ldr	r1, [r7, #16]
 8012028:	4618      	mov	r0, r3
 801202a:	f00d f999 	bl	801f360 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801202e:	7dfb      	ldrb	r3, [r7, #23]
 8012030:	2b01      	cmp	r3, #1
 8012032:	d005      	beq.n	8012040 <err_tcp+0xec>
 8012034:	7dfb      	ldrb	r3, [r7, #23]
 8012036:	2b04      	cmp	r3, #4
 8012038:	d002      	beq.n	8012040 <err_tcp+0xec>
 801203a:	7dfb      	ldrb	r3, [r7, #23]
 801203c:	2b03      	cmp	r3, #3
 801203e:	d146      	bne.n	80120ce <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8012040:	69fb      	ldr	r3, [r7, #28]
 8012042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012046:	f003 0304 	and.w	r3, r3, #4
 801204a:	2b00      	cmp	r3, #0
 801204c:	bf14      	ite	ne
 801204e:	2301      	movne	r3, #1
 8012050:	2300      	moveq	r3, #0
 8012052:	b2db      	uxtb	r3, r3
 8012054:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8012056:	69fb      	ldr	r3, [r7, #28]
 8012058:	f893 3020 	ldrb.w	r3, [r3, #32]
 801205c:	f023 0304 	bic.w	r3, r3, #4
 8012060:	b2da      	uxtb	r2, r3
 8012062:	69fb      	ldr	r3, [r7, #28]
 8012064:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d13b      	bne.n	80120e6 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801206e:	69fb      	ldr	r3, [r7, #28]
 8012070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012072:	2b00      	cmp	r3, #0
 8012074:	d106      	bne.n	8012084 <err_tcp+0x130>
 8012076:	4b1e      	ldr	r3, [pc, #120]	@ (80120f0 <err_tcp+0x19c>)
 8012078:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801207c:	491f      	ldr	r1, [pc, #124]	@ (80120fc <err_tcp+0x1a8>)
 801207e:	481e      	ldr	r0, [pc, #120]	@ (80120f8 <err_tcp+0x1a4>)
 8012080:	f00e fc3c 	bl	80208fc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8012084:	7dfb      	ldrb	r3, [r7, #23]
 8012086:	2b04      	cmp	r3, #4
 8012088:	d104      	bne.n	8012094 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801208e:	2200      	movs	r2, #0
 8012090:	711a      	strb	r2, [r3, #4]
 8012092:	e003      	b.n	801209c <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012098:	78fa      	ldrb	r2, [r7, #3]
 801209a:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801209c:	69fb      	ldr	r3, [r7, #28]
 801209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	330c      	adds	r3, #12
 80120a4:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80120a6:	68b8      	ldr	r0, [r7, #8]
 80120a8:	f00d fa4a 	bl	801f540 <sys_sem_valid>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d106      	bne.n	80120c0 <err_tcp+0x16c>
 80120b2:	4b0f      	ldr	r3, [pc, #60]	@ (80120f0 <err_tcp+0x19c>)
 80120b4:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80120b8:	4911      	ldr	r1, [pc, #68]	@ (8012100 <err_tcp+0x1ac>)
 80120ba:	480f      	ldr	r0, [pc, #60]	@ (80120f8 <err_tcp+0x1a4>)
 80120bc:	f00e fc1e 	bl	80208fc <iprintf>
      conn->current_msg = NULL;
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	2200      	movs	r2, #0
 80120c4:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80120c6:	68b8      	ldr	r0, [r7, #8]
 80120c8:	f00d fa20 	bl	801f50c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80120cc:	e00b      	b.n	80120e6 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80120ce:	69fb      	ldr	r3, [r7, #28]
 80120d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d008      	beq.n	80120e8 <err_tcp+0x194>
 80120d6:	4b06      	ldr	r3, [pc, #24]	@ (80120f0 <err_tcp+0x19c>)
 80120d8:	f240 12f7 	movw	r2, #503	@ 0x1f7
 80120dc:	4909      	ldr	r1, [pc, #36]	@ (8012104 <err_tcp+0x1b0>)
 80120de:	4806      	ldr	r0, [pc, #24]	@ (80120f8 <err_tcp+0x1a4>)
 80120e0:	f00e fc0c 	bl	80208fc <iprintf>
  }
}
 80120e4:	e000      	b.n	80120e8 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 80120e6:	bf00      	nop
}
 80120e8:	bf00      	nop
 80120ea:	3720      	adds	r7, #32
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	08021db8 	.word	0x08021db8
 80120f4:	08021f10 	.word	0x08021f10
 80120f8:	08021dfc 	.word	0x08021dfc
 80120fc:	08021f20 	.word	0x08021f20
 8012100:	08021f3c 	.word	0x08021f3c
 8012104:	08021f58 	.word	0x08021f58

08012108 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8012116:	6879      	ldr	r1, [r7, #4]
 8012118:	68f8      	ldr	r0, [r7, #12]
 801211a:	f004 ff6f 	bl	8016ffc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 801211e:	490a      	ldr	r1, [pc, #40]	@ (8012148 <setup_tcp+0x40>)
 8012120:	68f8      	ldr	r0, [r7, #12]
 8012122:	f004 ff7d 	bl	8017020 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8012126:	4909      	ldr	r1, [pc, #36]	@ (801214c <setup_tcp+0x44>)
 8012128:	68f8      	ldr	r0, [r7, #12]
 801212a:	f004 ff9b 	bl	8017064 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 801212e:	2202      	movs	r2, #2
 8012130:	4907      	ldr	r1, [pc, #28]	@ (8012150 <setup_tcp+0x48>)
 8012132:	68f8      	ldr	r0, [r7, #12]
 8012134:	f004 fff2 	bl	801711c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8012138:	4906      	ldr	r1, [pc, #24]	@ (8012154 <setup_tcp+0x4c>)
 801213a:	68f8      	ldr	r0, [r7, #12]
 801213c:	f004 ffb4 	bl	80170a8 <tcp_err>
}
 8012140:	bf00      	nop
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	08011ccd 	.word	0x08011ccd
 801214c:	08011ea9 	.word	0x08011ea9
 8012150:	08011dd9 	.word	0x08011dd9
 8012154:	08011f55 	.word	0x08011f55

08012158 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8012158:	b590      	push	{r4, r7, lr}
 801215a:	b085      	sub	sp, #20
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8012160:	2300      	movs	r3, #0
 8012162:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d006      	beq.n	801217c <pcb_new+0x24>
 801216e:	4b2b      	ldr	r3, [pc, #172]	@ (801221c <pcb_new+0xc4>)
 8012170:	f240 2265 	movw	r2, #613	@ 0x265
 8012174:	492a      	ldr	r1, [pc, #168]	@ (8012220 <pcb_new+0xc8>)
 8012176:	482b      	ldr	r0, [pc, #172]	@ (8012224 <pcb_new+0xcc>)
 8012178:	f00e fbc0 	bl	80208fc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012186:	2b10      	cmp	r3, #16
 8012188:	d022      	beq.n	80121d0 <pcb_new+0x78>
 801218a:	2b20      	cmp	r3, #32
 801218c:	d133      	bne.n	80121f6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681c      	ldr	r4, [r3, #0]
 8012192:	7bfb      	ldrb	r3, [r7, #15]
 8012194:	4618      	mov	r0, r3
 8012196:	f00a fcb0 	bl	801cafa <udp_new_ip_type>
 801219a:	4603      	mov	r3, r0
 801219c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d02a      	beq.n	80121fe <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	2b22      	cmp	r3, #34	@ 0x22
 80121b0:	d104      	bne.n	80121bc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	2201      	movs	r2, #1
 80121ba:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	6858      	ldr	r0, [r3, #4]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	461a      	mov	r2, r3
 80121c8:	4917      	ldr	r1, [pc, #92]	@ (8012228 <pcb_new+0xd0>)
 80121ca:	f00a fc1d 	bl	801ca08 <udp_recv>
      }
      break;
 80121ce:	e016      	b.n	80121fe <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681c      	ldr	r4, [r3, #0]
 80121d4:	7bfb      	ldrb	r3, [r7, #15]
 80121d6:	4618      	mov	r0, r3
 80121d8:	f004 ff02 	bl	8016fe0 <tcp_new_ip_type>
 80121dc:	4603      	mov	r3, r0
 80121de:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d00b      	beq.n	8012202 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7ff ff8a 	bl	8012108 <setup_tcp>
      }
      break;
 80121f4:	e005      	b.n	8012202 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	22fa      	movs	r2, #250	@ 0xfa
 80121fa:	711a      	strb	r2, [r3, #4]
      return;
 80121fc:	e00a      	b.n	8012214 <pcb_new+0xbc>
      break;
 80121fe:	bf00      	nop
 8012200:	e000      	b.n	8012204 <pcb_new+0xac>
      break;
 8012202:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	685b      	ldr	r3, [r3, #4]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d102      	bne.n	8012214 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	22ff      	movs	r2, #255	@ 0xff
 8012212:	711a      	strb	r2, [r3, #4]
  }
}
 8012214:	3714      	adds	r7, #20
 8012216:	46bd      	mov	sp, r7
 8012218:	bd90      	pop	{r4, r7, pc}
 801221a:	bf00      	nop
 801221c:	08021db8 	.word	0x08021db8
 8012220:	08021f9c 	.word	0x08021f9c
 8012224:	08021dfc 	.word	0x08021dfc
 8012228:	08011bd1 	.word	0x08011bd1

0801222c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2200      	movs	r2, #0
 801223c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d102      	bne.n	801224e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8012248:	68f8      	ldr	r0, [r7, #12]
 801224a:	f7ff ff85 	bl	8012158 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 801224e:	bf00      	nop
 8012250:	3710      	adds	r7, #16
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
	...

08012258 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b086      	sub	sp, #24
 801225c:	af00      	add	r7, sp, #0
 801225e:	4603      	mov	r3, r0
 8012260:	6039      	str	r1, [r7, #0]
 8012262:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8012264:	2300      	movs	r3, #0
 8012266:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8012268:	2007      	movs	r0, #7
 801226a:	f001 ff61 	bl	8014130 <memp_malloc>
 801226e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d101      	bne.n	801227a <netconn_alloc+0x22>
    return NULL;
 8012276:	2300      	movs	r3, #0
 8012278:	e056      	b.n	8012328 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2200      	movs	r2, #0
 801227e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	79fa      	ldrb	r2, [r7, #7]
 8012284:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	2200      	movs	r2, #0
 801228a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 801228c:	79fb      	ldrb	r3, [r7, #7]
 801228e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012292:	2b10      	cmp	r3, #16
 8012294:	d004      	beq.n	80122a0 <netconn_alloc+0x48>
 8012296:	2b20      	cmp	r3, #32
 8012298:	d105      	bne.n	80122a6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801229a:	2306      	movs	r3, #6
 801229c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801229e:	e00a      	b.n	80122b6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80122a0:	2306      	movs	r3, #6
 80122a2:	617b      	str	r3, [r7, #20]
      break;
 80122a4:	e007      	b.n	80122b6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80122a6:	4b22      	ldr	r3, [pc, #136]	@ (8012330 <netconn_alloc+0xd8>)
 80122a8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80122ac:	4921      	ldr	r1, [pc, #132]	@ (8012334 <netconn_alloc+0xdc>)
 80122ae:	4822      	ldr	r0, [pc, #136]	@ (8012338 <netconn_alloc+0xe0>)
 80122b0:	f00e fb24 	bl	80208fc <iprintf>
      goto free_and_return;
 80122b4:	e033      	b.n	801231e <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	3310      	adds	r3, #16
 80122ba:	6979      	ldr	r1, [r7, #20]
 80122bc:	4618      	mov	r0, r3
 80122be:	f00d f823 	bl	801f308 <sys_mbox_new>
 80122c2:	4603      	mov	r3, r0
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d129      	bne.n	801231c <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	330c      	adds	r3, #12
 80122cc:	2100      	movs	r1, #0
 80122ce:	4618      	mov	r0, r3
 80122d0:	f00d f8c6 	bl	801f460 <sys_sem_new>
 80122d4:	4603      	mov	r3, r0
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d005      	beq.n	80122e6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	3310      	adds	r3, #16
 80122de:	4618      	mov	r0, r3
 80122e0:	f00d f82c 	bl	801f33c <sys_mbox_free>
    goto free_and_return;
 80122e4:	e01b      	b.n	801231e <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	3314      	adds	r3, #20
 80122ea:	4618      	mov	r0, r3
 80122ec:	f00d f8ab 	bl	801f446 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2200      	movs	r2, #0
 80122f4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80122fc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	683a      	ldr	r2, [r7, #0]
 8012302:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	2200      	movs	r2, #0
 8012308:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2200      	movs	r2, #0
 801230e:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	7cfa      	ldrb	r2, [r7, #19]
 8012314:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	e005      	b.n	8012328 <netconn_alloc+0xd0>
    goto free_and_return;
 801231c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801231e:	68f9      	ldr	r1, [r7, #12]
 8012320:	2007      	movs	r0, #7
 8012322:	f001 ff7b 	bl	801421c <memp_free>
  return NULL;
 8012326:	2300      	movs	r3, #0
}
 8012328:	4618      	mov	r0, r3
 801232a:	3718      	adds	r7, #24
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	08021db8 	.word	0x08021db8
 8012334:	08021fbc 	.word	0x08021fbc
 8012338:	08021dfc 	.word	0x08021dfc

0801233c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d006      	beq.n	801235a <netconn_free+0x1e>
 801234c:	4b1b      	ldr	r3, [pc, #108]	@ (80123bc <netconn_free+0x80>)
 801234e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012352:	491b      	ldr	r1, [pc, #108]	@ (80123c0 <netconn_free+0x84>)
 8012354:	481b      	ldr	r0, [pc, #108]	@ (80123c4 <netconn_free+0x88>)
 8012356:	f00e fad1 	bl	80208fc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	3310      	adds	r3, #16
 801235e:	4618      	mov	r0, r3
 8012360:	f00d f860 	bl	801f424 <sys_mbox_valid>
 8012364:	4603      	mov	r3, r0
 8012366:	2b00      	cmp	r3, #0
 8012368:	d006      	beq.n	8012378 <netconn_free+0x3c>
 801236a:	4b14      	ldr	r3, [pc, #80]	@ (80123bc <netconn_free+0x80>)
 801236c:	f240 3223 	movw	r2, #803	@ 0x323
 8012370:	4915      	ldr	r1, [pc, #84]	@ (80123c8 <netconn_free+0x8c>)
 8012372:	4814      	ldr	r0, [pc, #80]	@ (80123c4 <netconn_free+0x88>)
 8012374:	f00e fac2 	bl	80208fc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	3314      	adds	r3, #20
 801237c:	4618      	mov	r0, r3
 801237e:	f00d f851 	bl	801f424 <sys_mbox_valid>
 8012382:	4603      	mov	r3, r0
 8012384:	2b00      	cmp	r3, #0
 8012386:	d006      	beq.n	8012396 <netconn_free+0x5a>
 8012388:	4b0c      	ldr	r3, [pc, #48]	@ (80123bc <netconn_free+0x80>)
 801238a:	f240 3226 	movw	r2, #806	@ 0x326
 801238e:	490f      	ldr	r1, [pc, #60]	@ (80123cc <netconn_free+0x90>)
 8012390:	480c      	ldr	r0, [pc, #48]	@ (80123c4 <netconn_free+0x88>)
 8012392:	f00e fab3 	bl	80208fc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	330c      	adds	r3, #12
 801239a:	4618      	mov	r0, r3
 801239c:	f00d f8c3 	bl	801f526 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	330c      	adds	r3, #12
 80123a4:	4618      	mov	r0, r3
 80123a6:	f00d f8dc 	bl	801f562 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80123aa:	6879      	ldr	r1, [r7, #4]
 80123ac:	2007      	movs	r0, #7
 80123ae:	f001 ff35 	bl	801421c <memp_free>
}
 80123b2:	bf00      	nop
 80123b4:	3708      	adds	r7, #8
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	08021db8 	.word	0x08021db8
 80123c0:	08021fe4 	.word	0x08021fe4
 80123c4:	08021dfc 	.word	0x08021dfc
 80123c8:	08022014 	.word	0x08022014
 80123cc:	08022050 	.word	0x08022050

080123d0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b086      	sub	sp, #24
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	3310      	adds	r3, #16
 80123dc:	4618      	mov	r0, r3
 80123de:	f00d f821 	bl	801f424 <sys_mbox_valid>
 80123e2:	4603      	mov	r3, r0
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d02f      	beq.n	8012448 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80123e8:	e018      	b.n	801241c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80123f2:	2b10      	cmp	r3, #16
 80123f4:	d10e      	bne.n	8012414 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	f107 020f 	add.w	r2, r7, #15
 80123fc:	4611      	mov	r1, r2
 80123fe:	4618      	mov	r0, r3
 8012400:	f7ff fbac 	bl	8011b5c <lwip_netconn_is_err_msg>
 8012404:	4603      	mov	r3, r0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d108      	bne.n	801241c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	4618      	mov	r0, r3
 801240e:	f002 feeb 	bl	80151e8 <pbuf_free>
 8012412:	e003      	b.n	801241c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	4618      	mov	r0, r3
 8012418:	f000 ff6a 	bl	80132f0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	3310      	adds	r3, #16
 8012420:	f107 0210 	add.w	r2, r7, #16
 8012424:	4611      	mov	r1, r2
 8012426:	4618      	mov	r0, r3
 8012428:	f00c ffe5 	bl	801f3f6 <sys_arch_mbox_tryfetch>
 801242c:	4603      	mov	r3, r0
 801242e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012432:	d1da      	bne.n	80123ea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	3310      	adds	r3, #16
 8012438:	4618      	mov	r0, r3
 801243a:	f00c ff7f 	bl	801f33c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	3310      	adds	r3, #16
 8012442:	4618      	mov	r0, r3
 8012444:	f00c ffff 	bl	801f446 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	3314      	adds	r3, #20
 801244c:	4618      	mov	r0, r3
 801244e:	f00c ffe9 	bl	801f424 <sys_mbox_valid>
 8012452:	4603      	mov	r3, r0
 8012454:	2b00      	cmp	r3, #0
 8012456:	d034      	beq.n	80124c2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012458:	e01d      	b.n	8012496 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	f107 020e 	add.w	r2, r7, #14
 8012460:	4611      	mov	r1, r2
 8012462:	4618      	mov	r0, r3
 8012464:	f7ff fb7a 	bl	8011b5c <lwip_netconn_is_err_msg>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d113      	bne.n	8012496 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8012472:	6978      	ldr	r0, [r7, #20]
 8012474:	f7ff ffac 	bl	80123d0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	685b      	ldr	r3, [r3, #4]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d007      	beq.n	8012490 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	4618      	mov	r0, r3
 8012486:	f003 fcdb 	bl	8015e40 <tcp_abort>
            newconn->pcb.tcp = NULL;
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	2200      	movs	r2, #0
 801248e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8012490:	6978      	ldr	r0, [r7, #20]
 8012492:	f7ff ff53 	bl	801233c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	3314      	adds	r3, #20
 801249a:	f107 0210 	add.w	r2, r7, #16
 801249e:	4611      	mov	r1, r2
 80124a0:	4618      	mov	r0, r3
 80124a2:	f00c ffa8 	bl	801f3f6 <sys_arch_mbox_tryfetch>
 80124a6:	4603      	mov	r3, r0
 80124a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80124ac:	d1d5      	bne.n	801245a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	3314      	adds	r3, #20
 80124b2:	4618      	mov	r0, r3
 80124b4:	f00c ff42 	bl	801f33c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	3314      	adds	r3, #20
 80124bc:	4618      	mov	r0, r3
 80124be:	f00c ffc2 	bl	801f446 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80124c2:	bf00      	nop
 80124c4:	3718      	adds	r7, #24
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
	...

080124cc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b086      	sub	sp, #24
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	460b      	mov	r3, r1
 80124d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80124d8:	2300      	movs	r3, #0
 80124da:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d106      	bne.n	80124f0 <lwip_netconn_do_close_internal+0x24>
 80124e2:	4b87      	ldr	r3, [pc, #540]	@ (8012700 <lwip_netconn_do_close_internal+0x234>)
 80124e4:	f240 32a2 	movw	r2, #930	@ 0x3a2
 80124e8:	4986      	ldr	r1, [pc, #536]	@ (8012704 <lwip_netconn_do_close_internal+0x238>)
 80124ea:	4887      	ldr	r0, [pc, #540]	@ (8012708 <lwip_netconn_do_close_internal+0x23c>)
 80124ec:	f00e fa06 	bl	80208fc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80124f8:	2b10      	cmp	r3, #16
 80124fa:	d006      	beq.n	801250a <lwip_netconn_do_close_internal+0x3e>
 80124fc:	4b80      	ldr	r3, [pc, #512]	@ (8012700 <lwip_netconn_do_close_internal+0x234>)
 80124fe:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8012502:	4982      	ldr	r1, [pc, #520]	@ (801270c <lwip_netconn_do_close_internal+0x240>)
 8012504:	4880      	ldr	r0, [pc, #512]	@ (8012708 <lwip_netconn_do_close_internal+0x23c>)
 8012506:	f00e f9f9 	bl	80208fc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	785b      	ldrb	r3, [r3, #1]
 801250e:	2b04      	cmp	r3, #4
 8012510:	d006      	beq.n	8012520 <lwip_netconn_do_close_internal+0x54>
 8012512:	4b7b      	ldr	r3, [pc, #492]	@ (8012700 <lwip_netconn_do_close_internal+0x234>)
 8012514:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8012518:	497d      	ldr	r1, [pc, #500]	@ (8012710 <lwip_netconn_do_close_internal+0x244>)
 801251a:	487b      	ldr	r0, [pc, #492]	@ (8012708 <lwip_netconn_do_close_internal+0x23c>)
 801251c:	f00e f9ee 	bl	80208fc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d106      	bne.n	8012536 <lwip_netconn_do_close_internal+0x6a>
 8012528:	4b75      	ldr	r3, [pc, #468]	@ (8012700 <lwip_netconn_do_close_internal+0x234>)
 801252a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 801252e:	4979      	ldr	r1, [pc, #484]	@ (8012714 <lwip_netconn_do_close_internal+0x248>)
 8012530:	4875      	ldr	r0, [pc, #468]	@ (8012708 <lwip_netconn_do_close_internal+0x23c>)
 8012532:	f00e f9e3 	bl	80208fc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801253a:	2b00      	cmp	r3, #0
 801253c:	d106      	bne.n	801254c <lwip_netconn_do_close_internal+0x80>
 801253e:	4b70      	ldr	r3, [pc, #448]	@ (8012700 <lwip_netconn_do_close_internal+0x234>)
 8012540:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012544:	4974      	ldr	r1, [pc, #464]	@ (8012718 <lwip_netconn_do_close_internal+0x24c>)
 8012546:	4870      	ldr	r0, [pc, #448]	@ (8012708 <lwip_netconn_do_close_internal+0x23c>)
 8012548:	f00e f9d8 	bl	80208fc <iprintf>

  tpcb = conn->pcb.tcp;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	685b      	ldr	r3, [r3, #4]
 8012550:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012556:	7a1b      	ldrb	r3, [r3, #8]
 8012558:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801255a:	7bfb      	ldrb	r3, [r7, #15]
 801255c:	f003 0301 	and.w	r3, r3, #1
 8012560:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8012562:	7bfb      	ldrb	r3, [r7, #15]
 8012564:	f003 0302 	and.w	r3, r3, #2
 8012568:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801256a:	7bfb      	ldrb	r3, [r7, #15]
 801256c:	2b03      	cmp	r3, #3
 801256e:	d102      	bne.n	8012576 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8012570:	2301      	movs	r3, #1
 8012572:	75bb      	strb	r3, [r7, #22]
 8012574:	e01f      	b.n	80125b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8012576:	7bbb      	ldrb	r3, [r7, #14]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d00e      	beq.n	801259a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8012580:	2b05      	cmp	r3, #5
 8012582:	d007      	beq.n	8012594 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8012588:	2b06      	cmp	r3, #6
 801258a:	d003      	beq.n	8012594 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8012590:	2b08      	cmp	r3, #8
 8012592:	d102      	bne.n	801259a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8012594:	2301      	movs	r3, #1
 8012596:	75bb      	strb	r3, [r7, #22]
 8012598:	e00d      	b.n	80125b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801259a:	7b7b      	ldrb	r3, [r7, #13]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d008      	beq.n	80125b2 <lwip_netconn_do_close_internal+0xe6>
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	8b5b      	ldrh	r3, [r3, #26]
 80125a4:	f003 0310 	and.w	r3, r3, #16
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d002      	beq.n	80125b2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80125ac:	2301      	movs	r3, #1
 80125ae:	75bb      	strb	r3, [r7, #22]
 80125b0:	e001      	b.n	80125b6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80125b2:	2300      	movs	r3, #0
 80125b4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80125b6:	7dbb      	ldrb	r3, [r7, #22]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d003      	beq.n	80125c4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80125bc:	2100      	movs	r1, #0
 80125be:	6938      	ldr	r0, [r7, #16]
 80125c0:	f004 fd1c 	bl	8016ffc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	7d1b      	ldrb	r3, [r3, #20]
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d104      	bne.n	80125d6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80125cc:	2100      	movs	r1, #0
 80125ce:	6938      	ldr	r0, [r7, #16]
 80125d0:	f004 fd8c 	bl	80170ec <tcp_accept>
 80125d4:	e01d      	b.n	8012612 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80125d6:	7bbb      	ldrb	r3, [r7, #14]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d007      	beq.n	80125ec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80125dc:	2100      	movs	r1, #0
 80125de:	6938      	ldr	r0, [r7, #16]
 80125e0:	f004 fd1e 	bl	8017020 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80125e4:	2100      	movs	r1, #0
 80125e6:	6938      	ldr	r0, [r7, #16]
 80125e8:	f004 fd80 	bl	80170ec <tcp_accept>
    }
    if (shut_tx) {
 80125ec:	7b7b      	ldrb	r3, [r7, #13]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d003      	beq.n	80125fa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80125f2:	2100      	movs	r1, #0
 80125f4:	6938      	ldr	r0, [r7, #16]
 80125f6:	f004 fd35 	bl	8017064 <tcp_sent>
    }
    if (shut_close) {
 80125fa:	7dbb      	ldrb	r3, [r7, #22]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d008      	beq.n	8012612 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8012600:	2200      	movs	r2, #0
 8012602:	2100      	movs	r1, #0
 8012604:	6938      	ldr	r0, [r7, #16]
 8012606:	f004 fd89 	bl	801711c <tcp_poll>
      tcp_err(tpcb, NULL);
 801260a:	2100      	movs	r1, #0
 801260c:	6938      	ldr	r0, [r7, #16]
 801260e:	f004 fd4b 	bl	80170a8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8012612:	7dbb      	ldrb	r3, [r7, #22]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d005      	beq.n	8012624 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012618:	6938      	ldr	r0, [r7, #16]
 801261a:	f003 facb 	bl	8015bb4 <tcp_close>
 801261e:	4603      	mov	r3, r0
 8012620:	75fb      	strb	r3, [r7, #23]
 8012622:	e007      	b.n	8012634 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012624:	7bbb      	ldrb	r3, [r7, #14]
 8012626:	7b7a      	ldrb	r2, [r7, #13]
 8012628:	4619      	mov	r1, r3
 801262a:	6938      	ldr	r0, [r7, #16]
 801262c:	f003 faee 	bl	8015c0c <tcp_shutdown>
 8012630:	4603      	mov	r3, r0
 8012632:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d102      	bne.n	8012642 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 801263c:	2301      	movs	r3, #1
 801263e:	757b      	strb	r3, [r7, #21]
 8012640:	e016      	b.n	8012670 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8012642:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012646:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801264a:	d10f      	bne.n	801266c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012650:	7a5b      	ldrb	r3, [r3, #9]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d10c      	bne.n	8012670 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8012656:	2301      	movs	r3, #1
 8012658:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801265a:	7dbb      	ldrb	r3, [r7, #22]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d007      	beq.n	8012670 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8012660:	6938      	ldr	r0, [r7, #16]
 8012662:	f003 fbed 	bl	8015e40 <tcp_abort>
          err = ERR_OK;
 8012666:	2300      	movs	r3, #0
 8012668:	75fb      	strb	r3, [r7, #23]
 801266a:	e001      	b.n	8012670 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 801266c:	2301      	movs	r3, #1
 801266e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8012670:	7d7b      	ldrb	r3, [r7, #21]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d052      	beq.n	801271c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	330c      	adds	r3, #12
 801267e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012684:	7dfa      	ldrb	r2, [r7, #23]
 8012686:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2200      	movs	r2, #0
 8012692:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8012694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d129      	bne.n	80126f0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 801269c:	7dbb      	ldrb	r3, [r7, #22]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d00c      	beq.n	80126bc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2200      	movs	r2, #0
 80126a6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d005      	beq.n	80126bc <lwip_netconn_do_close_internal+0x1f0>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126b4:	2200      	movs	r2, #0
 80126b6:	2104      	movs	r1, #4
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	4798      	blx	r3
      }
      if (shut_rx) {
 80126bc:	7bbb      	ldrb	r3, [r7, #14]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d009      	beq.n	80126d6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d005      	beq.n	80126d6 <lwip_netconn_do_close_internal+0x20a>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126ce:	2200      	movs	r2, #0
 80126d0:	2100      	movs	r1, #0
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	4798      	blx	r3
      }
      if (shut_tx) {
 80126d6:	7b7b      	ldrb	r3, [r7, #13]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d009      	beq.n	80126f0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d005      	beq.n	80126f0 <lwip_netconn_do_close_internal+0x224>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126e8:	2200      	movs	r2, #0
 80126ea:	2102      	movs	r1, #2
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80126f0:	78fb      	ldrb	r3, [r7, #3]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d002      	beq.n	80126fc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80126f6:	68b8      	ldr	r0, [r7, #8]
 80126f8:	f00c ff08 	bl	801f50c <sys_sem_signal>
    }
    return ERR_OK;
 80126fc:	2300      	movs	r3, #0
 80126fe:	e03c      	b.n	801277a <lwip_netconn_do_close_internal+0x2ae>
 8012700:	08021db8 	.word	0x08021db8
 8012704:	0802208c 	.word	0x0802208c
 8012708:	08021dfc 	.word	0x08021dfc
 801270c:	0802209c 	.word	0x0802209c
 8012710:	080220bc 	.word	0x080220bc
 8012714:	080220e0 	.word	0x080220e0
 8012718:	08021f20 	.word	0x08021f20
  }
  if (!close_finished) {
 801271c:	7d7b      	ldrb	r3, [r7, #21]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d11e      	bne.n	8012760 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	7d1b      	ldrb	r3, [r3, #20]
 8012726:	2b01      	cmp	r3, #1
 8012728:	d106      	bne.n	8012738 <lwip_netconn_do_close_internal+0x26c>
 801272a:	4b16      	ldr	r3, [pc, #88]	@ (8012784 <lwip_netconn_do_close_internal+0x2b8>)
 801272c:	f240 4241 	movw	r2, #1089	@ 0x441
 8012730:	4915      	ldr	r1, [pc, #84]	@ (8012788 <lwip_netconn_do_close_internal+0x2bc>)
 8012732:	4816      	ldr	r0, [pc, #88]	@ (801278c <lwip_netconn_do_close_internal+0x2c0>)
 8012734:	f00e f8e2 	bl	80208fc <iprintf>
    if (shut_tx) {
 8012738:	7b7b      	ldrb	r3, [r7, #13]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d003      	beq.n	8012746 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801273e:	4914      	ldr	r1, [pc, #80]	@ (8012790 <lwip_netconn_do_close_internal+0x2c4>)
 8012740:	6938      	ldr	r0, [r7, #16]
 8012742:	f004 fc8f 	bl	8017064 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012746:	2201      	movs	r2, #1
 8012748:	4912      	ldr	r1, [pc, #72]	@ (8012794 <lwip_netconn_do_close_internal+0x2c8>)
 801274a:	6938      	ldr	r0, [r7, #16]
 801274c:	f004 fce6 	bl	801711c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8012750:	4911      	ldr	r1, [pc, #68]	@ (8012798 <lwip_netconn_do_close_internal+0x2cc>)
 8012752:	6938      	ldr	r0, [r7, #16]
 8012754:	f004 fca8 	bl	80170a8 <tcp_err>
    tcp_arg(tpcb, conn);
 8012758:	6879      	ldr	r1, [r7, #4]
 801275a:	6938      	ldr	r0, [r7, #16]
 801275c:	f004 fc4e 	bl	8016ffc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8012760:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d106      	bne.n	8012776 <lwip_netconn_do_close_internal+0x2aa>
 8012768:	4b06      	ldr	r3, [pc, #24]	@ (8012784 <lwip_netconn_do_close_internal+0x2b8>)
 801276a:	f240 424d 	movw	r2, #1101	@ 0x44d
 801276e:	490b      	ldr	r1, [pc, #44]	@ (801279c <lwip_netconn_do_close_internal+0x2d0>)
 8012770:	4806      	ldr	r0, [pc, #24]	@ (801278c <lwip_netconn_do_close_internal+0x2c0>)
 8012772:	f00e f8c3 	bl	80208fc <iprintf>
  return err;
 8012776:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801277a:	4618      	mov	r0, r3
 801277c:	3718      	adds	r7, #24
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	08021db8 	.word	0x08021db8
 8012788:	080220f4 	.word	0x080220f4
 801278c:	08021dfc 	.word	0x08021dfc
 8012790:	08011ea9 	.word	0x08011ea9
 8012794:	08011dd9 	.word	0x08011dd9
 8012798:	08011f55 	.word	0x08011f55
 801279c:	08022118 	.word	0x08022118

080127a0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	785b      	ldrb	r3, [r3, #1]
 80127b2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80127b4:	7afb      	ldrb	r3, [r7, #11]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d00d      	beq.n	80127d6 <lwip_netconn_do_delconn+0x36>
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	781b      	ldrb	r3, [r3, #0]
 80127c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80127c4:	2b10      	cmp	r3, #16
 80127c6:	d006      	beq.n	80127d6 <lwip_netconn_do_delconn+0x36>
 80127c8:	4b61      	ldr	r3, [pc, #388]	@ (8012950 <lwip_netconn_do_delconn+0x1b0>)
 80127ca:	f240 425e 	movw	r2, #1118	@ 0x45e
 80127ce:	4961      	ldr	r1, [pc, #388]	@ (8012954 <lwip_netconn_do_delconn+0x1b4>)
 80127d0:	4861      	ldr	r0, [pc, #388]	@ (8012958 <lwip_netconn_do_delconn+0x1b8>)
 80127d2:	f00e f893 	bl	80208fc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80127d6:	7afb      	ldrb	r3, [r7, #11]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d005      	beq.n	80127e8 <lwip_netconn_do_delconn+0x48>
 80127dc:	7afb      	ldrb	r3, [r7, #11]
 80127de:	2b02      	cmp	r3, #2
 80127e0:	d002      	beq.n	80127e8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80127e2:	7afb      	ldrb	r3, [r7, #11]
 80127e4:	2b03      	cmp	r3, #3
 80127e6:	d10a      	bne.n	80127fe <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 80127e8:	7afb      	ldrb	r3, [r7, #11]
 80127ea:	2b03      	cmp	r3, #3
 80127ec:	d10b      	bne.n	8012806 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127f6:	f003 0304 	and.w	r3, r3, #4
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d103      	bne.n	8012806 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	22fb      	movs	r2, #251	@ 0xfb
 8012802:	711a      	strb	r2, [r3, #4]
 8012804:	e098      	b.n	8012938 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012806:	7afb      	ldrb	r3, [r7, #11]
 8012808:	2b03      	cmp	r3, #3
 801280a:	d10e      	bne.n	801282a <lwip_netconn_do_delconn+0x8a>
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012814:	f003 0304 	and.w	r3, r3, #4
 8012818:	2b00      	cmp	r3, #0
 801281a:	d106      	bne.n	801282a <lwip_netconn_do_delconn+0x8a>
 801281c:	4b4c      	ldr	r3, [pc, #304]	@ (8012950 <lwip_netconn_do_delconn+0x1b0>)
 801281e:	f240 427a 	movw	r2, #1146	@ 0x47a
 8012822:	494e      	ldr	r1, [pc, #312]	@ (801295c <lwip_netconn_do_delconn+0x1bc>)
 8012824:	484c      	ldr	r0, [pc, #304]	@ (8012958 <lwip_netconn_do_delconn+0x1b8>)
 8012826:	f00e f869 	bl	80208fc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	2200      	movs	r2, #0
 801282e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	4618      	mov	r0, r3
 8012836:	f7ff fdcb 	bl	80123d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	685b      	ldr	r3, [r3, #4]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d05f      	beq.n	8012904 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801284e:	2b10      	cmp	r3, #16
 8012850:	d00d      	beq.n	801286e <lwip_netconn_do_delconn+0xce>
 8012852:	2b20      	cmp	r3, #32
 8012854:	d151      	bne.n	80128fa <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	2200      	movs	r2, #0
 801285e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	685b      	ldr	r3, [r3, #4]
 8012866:	4618      	mov	r0, r3
 8012868:	f00a f8ee 	bl	801ca48 <udp_remove>
          break;
 801286c:	e046      	b.n	80128fc <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012874:	2b00      	cmp	r3, #0
 8012876:	d006      	beq.n	8012886 <lwip_netconn_do_delconn+0xe6>
 8012878:	4b35      	ldr	r3, [pc, #212]	@ (8012950 <lwip_netconn_do_delconn+0x1b0>)
 801287a:	f240 4294 	movw	r2, #1172	@ 0x494
 801287e:	4938      	ldr	r1, [pc, #224]	@ (8012960 <lwip_netconn_do_delconn+0x1c0>)
 8012880:	4835      	ldr	r0, [pc, #212]	@ (8012958 <lwip_netconn_do_delconn+0x1b8>)
 8012882:	f00e f83b 	bl	80208fc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	2204      	movs	r2, #4
 801288c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	2203      	movs	r2, #3
 8012892:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	68fa      	ldr	r2, [r7, #12]
 801289a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	2100      	movs	r1, #0
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7ff fe12 	bl	80124cc <lwip_netconn_do_close_internal>
 80128a8:	4603      	mov	r3, r0
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d04b      	beq.n	8012946 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	785b      	ldrb	r3, [r3, #1]
 80128b4:	2b04      	cmp	r3, #4
 80128b6:	d006      	beq.n	80128c6 <lwip_netconn_do_delconn+0x126>
 80128b8:	4b25      	ldr	r3, [pc, #148]	@ (8012950 <lwip_netconn_do_delconn+0x1b0>)
 80128ba:	f240 429a 	movw	r2, #1178	@ 0x49a
 80128be:	4929      	ldr	r1, [pc, #164]	@ (8012964 <lwip_netconn_do_delconn+0x1c4>)
 80128c0:	4825      	ldr	r0, [pc, #148]	@ (8012958 <lwip_netconn_do_delconn+0x1b8>)
 80128c2:	f00e f81b 	bl	80208fc <iprintf>
            UNLOCK_TCPIP_CORE();
 80128c6:	4828      	ldr	r0, [pc, #160]	@ (8012968 <lwip_netconn_do_delconn+0x1c8>)
 80128c8:	f00c fe89 	bl	801f5de <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	330c      	adds	r3, #12
 80128d2:	2100      	movs	r1, #0
 80128d4:	4618      	mov	r0, r3
 80128d6:	f00c fde8 	bl	801f4aa <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80128da:	4823      	ldr	r0, [pc, #140]	@ (8012968 <lwip_netconn_do_delconn+0x1c8>)
 80128dc:	f00c fe70 	bl	801f5c0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	785b      	ldrb	r3, [r3, #1]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d02d      	beq.n	8012946 <lwip_netconn_do_delconn+0x1a6>
 80128ea:	4b19      	ldr	r3, [pc, #100]	@ (8012950 <lwip_netconn_do_delconn+0x1b0>)
 80128ec:	f240 429e 	movw	r2, #1182	@ 0x49e
 80128f0:	491c      	ldr	r1, [pc, #112]	@ (8012964 <lwip_netconn_do_delconn+0x1c4>)
 80128f2:	4819      	ldr	r0, [pc, #100]	@ (8012958 <lwip_netconn_do_delconn+0x1b8>)
 80128f4:	f00e f802 	bl	80208fc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80128f8:	e025      	b.n	8012946 <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 80128fa:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2200      	movs	r2, #0
 8012902:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801290a:	2b00      	cmp	r3, #0
 801290c:	d007      	beq.n	801291e <lwip_netconn_do_delconn+0x17e>
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012914:	68fa      	ldr	r2, [r7, #12]
 8012916:	6810      	ldr	r0, [r2, #0]
 8012918:	2200      	movs	r2, #0
 801291a:	2100      	movs	r1, #0
 801291c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012924:	2b00      	cmp	r3, #0
 8012926:	d007      	beq.n	8012938 <lwip_netconn_do_delconn+0x198>
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801292e:	68fa      	ldr	r2, [r7, #12]
 8012930:	6810      	ldr	r0, [r2, #0]
 8012932:	2200      	movs	r2, #0
 8012934:	2102      	movs	r1, #2
 8012936:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	330c      	adds	r3, #12
 801293e:	4618      	mov	r0, r3
 8012940:	f00c fdfe 	bl	801f540 <sys_sem_valid>
 8012944:	e000      	b.n	8012948 <lwip_netconn_do_delconn+0x1a8>
          return;
 8012946:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8012948:	3710      	adds	r7, #16
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}
 801294e:	bf00      	nop
 8012950:	08021db8 	.word	0x08021db8
 8012954:	08022128 	.word	0x08022128
 8012958:	08021dfc 	.word	0x08021dfc
 801295c:	0802213c 	.word	0x0802213c
 8012960:	0802215c 	.word	0x0802215c
 8012964:	08022178 	.word	0x08022178
 8012968:	2001f654 	.word	0x2001f654

0801296c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d025      	beq.n	80129ce <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801298c:	2b10      	cmp	r3, #16
 801298e:	d00e      	beq.n	80129ae <lwip_netconn_do_bind+0x42>
 8012990:	2b20      	cmp	r3, #32
 8012992:	d119      	bne.n	80129c8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	6858      	ldr	r0, [r3, #4]
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	6899      	ldr	r1, [r3, #8]
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	899b      	ldrh	r3, [r3, #12]
 80129a2:	461a      	mov	r2, r3
 80129a4:	f009 fe86 	bl	801c6b4 <udp_bind>
 80129a8:	4603      	mov	r3, r0
 80129aa:	73fb      	strb	r3, [r7, #15]
        break;
 80129ac:	e011      	b.n	80129d2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	6858      	ldr	r0, [r3, #4]
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	6899      	ldr	r1, [r3, #8]
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	899b      	ldrh	r3, [r3, #12]
 80129bc:	461a      	mov	r2, r3
 80129be:	f003 fa4b 	bl	8015e58 <tcp_bind>
 80129c2:	4603      	mov	r3, r0
 80129c4:	73fb      	strb	r3, [r7, #15]
        break;
 80129c6:	e004      	b.n	80129d2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80129c8:	23fa      	movs	r3, #250	@ 0xfa
 80129ca:	73fb      	strb	r3, [r7, #15]
        break;
 80129cc:	e001      	b.n	80129d2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80129ce:	23fa      	movs	r3, #250	@ 0xfa
 80129d0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	7bfa      	ldrb	r2, [r7, #15]
 80129d6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80129d8:	bf00      	nop
 80129da:	3710      	adds	r7, #16
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b088      	sub	sp, #32
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	60f8      	str	r0, [r7, #12]
 80129e8:	60b9      	str	r1, [r7, #8]
 80129ea:	4613      	mov	r3, r2
 80129ec:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80129ee:	2300      	movs	r3, #0
 80129f0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d102      	bne.n	8012a02 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80129fc:	f06f 0305 	mvn.w	r3, #5
 8012a00:	e074      	b.n	8012aec <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	785b      	ldrb	r3, [r3, #1]
 8012a06:	2b03      	cmp	r3, #3
 8012a08:	d006      	beq.n	8012a18 <lwip_netconn_do_connected+0x38>
 8012a0a:	4b3a      	ldr	r3, [pc, #232]	@ (8012af4 <lwip_netconn_do_connected+0x114>)
 8012a0c:	f240 5223 	movw	r2, #1315	@ 0x523
 8012a10:	4939      	ldr	r1, [pc, #228]	@ (8012af8 <lwip_netconn_do_connected+0x118>)
 8012a12:	483a      	ldr	r0, [pc, #232]	@ (8012afc <lwip_netconn_do_connected+0x11c>)
 8012a14:	f00d ff72 	bl	80208fc <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8012a18:	69bb      	ldr	r3, [r7, #24]
 8012a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d10d      	bne.n	8012a3c <lwip_netconn_do_connected+0x5c>
 8012a20:	69bb      	ldr	r3, [r7, #24]
 8012a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a26:	f003 0304 	and.w	r3, r3, #4
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d106      	bne.n	8012a3c <lwip_netconn_do_connected+0x5c>
 8012a2e:	4b31      	ldr	r3, [pc, #196]	@ (8012af4 <lwip_netconn_do_connected+0x114>)
 8012a30:	f240 5224 	movw	r2, #1316	@ 0x524
 8012a34:	4932      	ldr	r1, [pc, #200]	@ (8012b00 <lwip_netconn_do_connected+0x120>)
 8012a36:	4831      	ldr	r0, [pc, #196]	@ (8012afc <lwip_netconn_do_connected+0x11c>)
 8012a38:	f00d ff60 	bl	80208fc <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8012a3c:	69bb      	ldr	r3, [r7, #24]
 8012a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d008      	beq.n	8012a56 <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 8012a44:	69bb      	ldr	r3, [r7, #24]
 8012a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a48:	79fa      	ldrb	r2, [r7, #7]
 8012a4a:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012a4c:	69bb      	ldr	r3, [r7, #24]
 8012a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	330c      	adds	r3, #12
 8012a54:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8012a56:	69bb      	ldr	r3, [r7, #24]
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012a5e:	2b10      	cmp	r3, #16
 8012a60:	d106      	bne.n	8012a70 <lwip_netconn_do_connected+0x90>
 8012a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d102      	bne.n	8012a70 <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 8012a6a:	69b8      	ldr	r0, [r7, #24]
 8012a6c:	f7ff fb4c 	bl	8012108 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8012a70:	69bb      	ldr	r3, [r7, #24]
 8012a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a76:	f003 0304 	and.w	r3, r3, #4
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	bf0c      	ite	eq
 8012a7e:	2301      	moveq	r3, #1
 8012a80:	2300      	movne	r3, #0
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a8c:	f023 0304 	bic.w	r3, r3, #4
 8012a90:	b2da      	uxtb	r2, r3
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	f883 2020 	strb.w	r2, [r3, #32]
  LWIP_ASSERT("blocking connect state error",
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d002      	beq.n	8012aa4 <lwip_netconn_do_connected+0xc4>
 8012a9e:	69fb      	ldr	r3, [r7, #28]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d10c      	bne.n	8012abe <lwip_netconn_do_connected+0xde>
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d102      	bne.n	8012ab0 <lwip_netconn_do_connected+0xd0>
 8012aaa:	69fb      	ldr	r3, [r7, #28]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d006      	beq.n	8012abe <lwip_netconn_do_connected+0xde>
 8012ab0:	4b10      	ldr	r3, [pc, #64]	@ (8012af4 <lwip_netconn_do_connected+0x114>)
 8012ab2:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 8012ab6:	4913      	ldr	r1, [pc, #76]	@ (8012b04 <lwip_netconn_do_connected+0x124>)
 8012ab8:	4810      	ldr	r0, [pc, #64]	@ (8012afc <lwip_netconn_do_connected+0x11c>)
 8012aba:	f00d ff1f 	bl	80208fc <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8012abe:	69bb      	ldr	r3, [r7, #24]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  conn->state = NETCONN_NONE;
 8012ac4:	69bb      	ldr	r3, [r7, #24]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012aca:	69bb      	ldr	r3, [r7, #24]
 8012acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d005      	beq.n	8012ade <lwip_netconn_do_connected+0xfe>
 8012ad2:	69bb      	ldr	r3, [r7, #24]
 8012ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	2102      	movs	r1, #2
 8012ada:	69b8      	ldr	r0, [r7, #24]
 8012adc:	4798      	blx	r3

  if (was_blocking) {
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d002      	beq.n	8012aea <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 8012ae4:	69f8      	ldr	r0, [r7, #28]
 8012ae6:	f00c fd11 	bl	801f50c <sys_sem_signal>
  }
  return ERR_OK;
 8012aea:	2300      	movs	r3, #0
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3720      	adds	r7, #32
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}
 8012af4:	08021db8 	.word	0x08021db8
 8012af8:	08022180 	.word	0x08022180
 8012afc:	08021dfc 	.word	0x08021dfc
 8012b00:	080221a0 	.word	0x080221a0
 8012b04:	080221e0 	.word	0x080221e0

08012b08 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b086      	sub	sp, #24
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d102      	bne.n	8012b24 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8012b1e:	23f1      	movs	r3, #241	@ 0xf1
 8012b20:	75fb      	strb	r3, [r7, #23]
 8012b22:	e0a0      	b.n	8012c66 <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012b24:	693b      	ldr	r3, [r7, #16]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012b2e:	2b10      	cmp	r3, #16
 8012b30:	d00f      	beq.n	8012b52 <lwip_netconn_do_connect+0x4a>
 8012b32:	2b20      	cmp	r3, #32
 8012b34:	f040 808c 	bne.w	8012c50 <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012b38:	693b      	ldr	r3, [r7, #16]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	6858      	ldr	r0, [r3, #4]
 8012b3e:	693b      	ldr	r3, [r7, #16]
 8012b40:	6899      	ldr	r1, [r3, #8]
 8012b42:	693b      	ldr	r3, [r7, #16]
 8012b44:	899b      	ldrh	r3, [r3, #12]
 8012b46:	461a      	mov	r2, r3
 8012b48:	f009 fea2 	bl	801c890 <udp_connect>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	75fb      	strb	r3, [r7, #23]
        break;
 8012b50:	e089      	b.n	8012c66 <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	785b      	ldrb	r3, [r3, #1]
 8012b58:	2b03      	cmp	r3, #3
 8012b5a:	d102      	bne.n	8012b62 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8012b5c:	23f7      	movs	r3, #247	@ 0xf7
 8012b5e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8012b60:	e080      	b.n	8012c64 <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	785b      	ldrb	r3, [r3, #1]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d002      	beq.n	8012b72 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8012b6c:	23f6      	movs	r3, #246	@ 0xf6
 8012b6e:	75fb      	strb	r3, [r7, #23]
        break;
 8012b70:	e078      	b.n	8012c64 <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7ff fac6 	bl	8012108 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	6858      	ldr	r0, [r3, #4]
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	6899      	ldr	r1, [r3, #8]
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	899a      	ldrh	r2, [r3, #12]
 8012b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8012c78 <lwip_netconn_do_connect+0x170>)
 8012b8c:	f003 faec 	bl	8016168 <tcp_connect>
 8012b90:	4603      	mov	r3, r0
 8012b92:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8012b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d163      	bne.n	8012c64 <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ba4:	f003 0302 	and.w	r3, r3, #2
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	bf14      	ite	ne
 8012bac:	2301      	movne	r3, #1
 8012bae:	2300      	moveq	r3, #0
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2203      	movs	r2, #3
 8012bba:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8012bbc:	7bfb      	ldrb	r3, [r7, #15]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d00b      	beq.n	8012bda <lwip_netconn_do_connect+0xd2>
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	f042 0204 	orr.w	r2, r2, #4
 8012bd2:	b2d2      	uxtb	r2, r2
 8012bd4:	f883 2020 	strb.w	r2, [r3, #32]
 8012bd8:	e00a      	b.n	8012bf0 <lwip_netconn_do_connect+0xe8>
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012be2:	693b      	ldr	r3, [r7, #16]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	f022 0204 	bic.w	r2, r2, #4
 8012bea:	b2d2      	uxtb	r2, r2
 8012bec:	f883 2020 	strb.w	r2, [r3, #32]
            if (non_blocking) {
 8012bf0:	7bfb      	ldrb	r3, [r7, #15]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d002      	beq.n	8012bfc <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 8012bf6:	23fb      	movs	r3, #251	@ 0xfb
 8012bf8:	75fb      	strb	r3, [r7, #23]
        break;
 8012bfa:	e033      	b.n	8012c64 <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	693a      	ldr	r2, [r7, #16]
 8012c02:	625a      	str	r2, [r3, #36]	@ 0x24
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	785b      	ldrb	r3, [r3, #1]
 8012c0a:	2b03      	cmp	r3, #3
 8012c0c:	d006      	beq.n	8012c1c <lwip_netconn_do_connect+0x114>
 8012c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8012c7c <lwip_netconn_do_connect+0x174>)
 8012c10:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 8012c14:	491a      	ldr	r1, [pc, #104]	@ (8012c80 <lwip_netconn_do_connect+0x178>)
 8012c16:	481b      	ldr	r0, [pc, #108]	@ (8012c84 <lwip_netconn_do_connect+0x17c>)
 8012c18:	f00d fe70 	bl	80208fc <iprintf>
              UNLOCK_TCPIP_CORE();
 8012c1c:	481a      	ldr	r0, [pc, #104]	@ (8012c88 <lwip_netconn_do_connect+0x180>)
 8012c1e:	f00c fcde 	bl	801f5de <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	330c      	adds	r3, #12
 8012c28:	2100      	movs	r1, #0
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f00c fc3d 	bl	801f4aa <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8012c30:	4815      	ldr	r0, [pc, #84]	@ (8012c88 <lwip_netconn_do_connect+0x180>)
 8012c32:	f00c fcc5 	bl	801f5c0 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8012c36:	693b      	ldr	r3, [r7, #16]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	785b      	ldrb	r3, [r3, #1]
 8012c3c:	2b03      	cmp	r3, #3
 8012c3e:	d116      	bne.n	8012c6e <lwip_netconn_do_connect+0x166>
 8012c40:	4b0e      	ldr	r3, [pc, #56]	@ (8012c7c <lwip_netconn_do_connect+0x174>)
 8012c42:	f240 5274 	movw	r2, #1396	@ 0x574
 8012c46:	490e      	ldr	r1, [pc, #56]	@ (8012c80 <lwip_netconn_do_connect+0x178>)
 8012c48:	480e      	ldr	r0, [pc, #56]	@ (8012c84 <lwip_netconn_do_connect+0x17c>)
 8012c4a:	f00d fe57 	bl	80208fc <iprintf>
              return;
 8012c4e:	e00e      	b.n	8012c6e <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8012c50:	4b0a      	ldr	r3, [pc, #40]	@ (8012c7c <lwip_netconn_do_connect+0x174>)
 8012c52:	f240 527d 	movw	r2, #1405	@ 0x57d
 8012c56:	490d      	ldr	r1, [pc, #52]	@ (8012c8c <lwip_netconn_do_connect+0x184>)
 8012c58:	480a      	ldr	r0, [pc, #40]	@ (8012c84 <lwip_netconn_do_connect+0x17c>)
 8012c5a:	f00d fe4f 	bl	80208fc <iprintf>
 8012c5e:	23fa      	movs	r3, #250	@ 0xfa
 8012c60:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8012c62:	e000      	b.n	8012c66 <lwip_netconn_do_connect+0x15e>
        break;
 8012c64:	bf00      	nop
    }
  }
  msg->err = err;
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	7dfa      	ldrb	r2, [r7, #23]
 8012c6a:	711a      	strb	r2, [r3, #4]
 8012c6c:	e000      	b.n	8012c70 <lwip_netconn_do_connect+0x168>
              return;
 8012c6e:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8012c70:	3718      	adds	r7, #24
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
 8012c76:	bf00      	nop
 8012c78:	080129e1 	.word	0x080129e1
 8012c7c:	08021db8 	.word	0x08021db8
 8012c80:	08022178 	.word	0x08022178
 8012c84:	08021dfc 	.word	0x08021dfc
 8012c88:	2001f654 	.word	0x2001f654
 8012c8c:	08022200 	.word	0x08022200

08012c90 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b084      	sub	sp, #16
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012ca6:	2b20      	cmp	r3, #32
 8012ca8:	d109      	bne.n	8012cbe <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f009 fe81 	bl	801c9b8 <udp_disconnect>
    msg->err = ERR_OK;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012cbc:	e002      	b.n	8012cc4 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	22fa      	movs	r2, #250	@ 0xfa
 8012cc2:	711a      	strb	r2, [r3, #4]
}
 8012cc4:	bf00      	nop
 8012cc6:	3710      	adds	r7, #16
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b084      	sub	sp, #16
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7fe feeb 	bl	8011ab8 <netconn_err>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d134      	bne.n	8012d58 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d02d      	beq.n	8012d54 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012d02:	2b20      	cmp	r3, #32
 8012d04:	d123      	bne.n	8012d4e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	689b      	ldr	r3, [r3, #8]
 8012d0a:	689b      	ldr	r3, [r3, #8]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d10c      	bne.n	8012d2a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	685a      	ldr	r2, [r3, #4]
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4619      	mov	r1, r3
 8012d1e:	4610      	mov	r0, r2
 8012d20:	f009 fa6c 	bl	801c1fc <udp_send>
 8012d24:	4603      	mov	r3, r0
 8012d26:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8012d28:	e016      	b.n	8012d58 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	6858      	ldr	r0, [r3, #4]
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	689b      	ldr	r3, [r3, #8]
 8012d34:	6819      	ldr	r1, [r3, #0]
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	689b      	ldr	r3, [r3, #8]
 8012d3a:	f103 0208 	add.w	r2, r3, #8
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	689b      	ldr	r3, [r3, #8]
 8012d42:	899b      	ldrh	r3, [r3, #12]
 8012d44:	f009 fa8e 	bl	801c264 <udp_sendto>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	73fb      	strb	r3, [r7, #15]
          break;
 8012d4c:	e004      	b.n	8012d58 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8012d4e:	23f5      	movs	r3, #245	@ 0xf5
 8012d50:	73fb      	strb	r3, [r7, #15]
          break;
 8012d52:	e001      	b.n	8012d58 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8012d54:	23f5      	movs	r3, #245	@ 0xf5
 8012d56:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	7bfa      	ldrb	r2, [r7, #15]
 8012d5c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012d5e:	bf00      	nop
 8012d60:	3710      	adds	r7, #16
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}

08012d66 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8012d66:	b580      	push	{r7, lr}
 8012d68:	b086      	sub	sp, #24
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	2200      	movs	r2, #0
 8012d76:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d022      	beq.n	8012dc8 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012d8c:	2b10      	cmp	r3, #16
 8012d8e:	d11b      	bne.n	8012dc8 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	689b      	ldr	r3, [r3, #8]
 8012d94:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012d9c:	d202      	bcs.n	8012da4 <lwip_netconn_do_recv+0x3e>
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	e001      	b.n	8012da8 <lwip_netconn_do_recv+0x42>
 8012da4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012da8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	685b      	ldr	r3, [r3, #4]
 8012db0:	89fa      	ldrh	r2, [r7, #14]
 8012db2:	4611      	mov	r1, r2
 8012db4:	4618      	mov	r0, r3
 8012db6:	f003 f941 	bl	801603c <tcp_recved>
        remaining -= recved;
 8012dba:	89fb      	ldrh	r3, [r7, #14]
 8012dbc:	697a      	ldr	r2, [r7, #20]
 8012dbe:	1ad3      	subs	r3, r2, r3
 8012dc0:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d1e6      	bne.n	8012d96 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012dc8:	bf00      	nop
 8012dca:	3718      	adds	r7, #24
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b088      	sub	sp, #32
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	460b      	mov	r3, r1
 8012dda:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d106      	bne.n	8012df4 <lwip_netconn_do_writemore+0x24>
 8012de6:	4b61      	ldr	r3, [pc, #388]	@ (8012f6c <lwip_netconn_do_writemore+0x19c>)
 8012de8:	f240 6273 	movw	r2, #1651	@ 0x673
 8012dec:	4960      	ldr	r1, [pc, #384]	@ (8012f70 <lwip_netconn_do_writemore+0x1a0>)
 8012dee:	4861      	ldr	r0, [pc, #388]	@ (8012f74 <lwip_netconn_do_writemore+0x1a4>)
 8012df0:	f00d fd84 	bl	80208fc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	785b      	ldrb	r3, [r3, #1]
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d006      	beq.n	8012e0a <lwip_netconn_do_writemore+0x3a>
 8012dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8012f6c <lwip_netconn_do_writemore+0x19c>)
 8012dfe:	f240 6274 	movw	r2, #1652	@ 0x674
 8012e02:	495d      	ldr	r1, [pc, #372]	@ (8012f78 <lwip_netconn_do_writemore+0x1a8>)
 8012e04:	485b      	ldr	r0, [pc, #364]	@ (8012f74 <lwip_netconn_do_writemore+0x1a4>)
 8012e06:	f00d fd79 	bl	80208fc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d106      	bne.n	8012e20 <lwip_netconn_do_writemore+0x50>
 8012e12:	4b56      	ldr	r3, [pc, #344]	@ (8012f6c <lwip_netconn_do_writemore+0x19c>)
 8012e14:	f240 6275 	movw	r2, #1653	@ 0x675
 8012e18:	4958      	ldr	r1, [pc, #352]	@ (8012f7c <lwip_netconn_do_writemore+0x1ac>)
 8012e1a:	4856      	ldr	r0, [pc, #344]	@ (8012f74 <lwip_netconn_do_writemore+0x1a4>)
 8012e1c:	f00d fd6e 	bl	80208fc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	685b      	ldr	r3, [r3, #4]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d106      	bne.n	8012e36 <lwip_netconn_do_writemore+0x66>
 8012e28:	4b50      	ldr	r3, [pc, #320]	@ (8012f6c <lwip_netconn_do_writemore+0x19c>)
 8012e2a:	f240 6276 	movw	r2, #1654	@ 0x676
 8012e2e:	4954      	ldr	r1, [pc, #336]	@ (8012f80 <lwip_netconn_do_writemore+0x1b0>)
 8012e30:	4850      	ldr	r0, [pc, #320]	@ (8012f74 <lwip_netconn_do_writemore+0x1a4>)
 8012e32:	f00d fd63 	bl	80208fc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e3a:	699a      	ldr	r2, [r3, #24]
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e40:	695b      	ldr	r3, [r3, #20]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d306      	bcc.n	8012e54 <lwip_netconn_do_writemore+0x84>
 8012e46:	4b49      	ldr	r3, [pc, #292]	@ (8012f6c <lwip_netconn_do_writemore+0x19c>)
 8012e48:	f240 6277 	movw	r2, #1655	@ 0x677
 8012e4c:	494d      	ldr	r1, [pc, #308]	@ (8012f84 <lwip_netconn_do_writemore+0x1b4>)
 8012e4e:	4849      	ldr	r0, [pc, #292]	@ (8012f74 <lwip_netconn_do_writemore+0x1a4>)
 8012e50:	f00d fd54 	bl	80208fc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e58:	899b      	ldrh	r3, [r3, #12]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d106      	bne.n	8012e6c <lwip_netconn_do_writemore+0x9c>
 8012e5e:	4b43      	ldr	r3, [pc, #268]	@ (8012f6c <lwip_netconn_do_writemore+0x19c>)
 8012e60:	f240 6279 	movw	r2, #1657	@ 0x679
 8012e64:	4948      	ldr	r1, [pc, #288]	@ (8012f88 <lwip_netconn_do_writemore+0x1b8>)
 8012e66:	4843      	ldr	r0, [pc, #268]	@ (8012f74 <lwip_netconn_do_writemore+0x1a4>)
 8012e68:	f00d fd48 	bl	80208fc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e70:	7f1b      	ldrb	r3, [r3, #28]
 8012e72:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e7a:	f003 0302 	and.w	r3, r3, #2
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d104      	bne.n	8012e8c <lwip_netconn_do_writemore+0xbc>
 8012e82:	7ebb      	ldrb	r3, [r7, #26]
 8012e84:	f003 0304 	and.w	r3, r3, #4
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d001      	beq.n	8012e90 <lwip_netconn_do_writemore+0xc0>
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	e000      	b.n	8012e92 <lwip_netconn_do_writemore+0xc2>
 8012e90:	2300      	movs	r3, #0
 8012e92:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e98:	689b      	ldr	r3, [r3, #8]
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ea0:	691b      	ldr	r3, [r3, #16]
 8012ea2:	4413      	add	r3, r2
 8012ea4:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012eaa:	689b      	ldr	r3, [r3, #8]
 8012eac:	685a      	ldr	r2, [r3, #4]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012eb2:	691b      	ldr	r3, [r3, #16]
 8012eb4:	1ad3      	subs	r3, r2, r3
 8012eb6:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ebe:	d307      	bcc.n	8012ed0 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 8012ec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012ec4:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012ec6:	7ebb      	ldrb	r3, [r7, #26]
 8012ec8:	f043 0302 	orr.w	r3, r3, #2
 8012ecc:	76bb      	strb	r3, [r7, #26]
 8012ece:	e001      	b.n	8012ed4 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012edc:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012ede:	89fa      	ldrh	r2, [r7, #14]
 8012ee0:	8bbb      	ldrh	r3, [r7, #28]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d216      	bcs.n	8012f14 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 8012ee6:	89fb      	ldrh	r3, [r7, #14]
 8012ee8:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012eea:	7e3b      	ldrb	r3, [r7, #24]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d00d      	beq.n	8012f0c <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8012ef0:	8bbb      	ldrh	r3, [r7, #28]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d10e      	bne.n	8012f14 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012efa:	699b      	ldr	r3, [r3, #24]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d102      	bne.n	8012f06 <lwip_netconn_do_writemore+0x136>
 8012f00:	f06f 0306 	mvn.w	r3, #6
 8012f04:	e000      	b.n	8012f08 <lwip_netconn_do_writemore+0x138>
 8012f06:	2300      	movs	r3, #0
 8012f08:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012f0a:	e08f      	b.n	801302c <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012f0c:	7ebb      	ldrb	r3, [r7, #26]
 8012f0e:	f043 0302 	orr.w	r3, r3, #2
 8012f12:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f18:	691a      	ldr	r2, [r3, #16]
 8012f1a:	8bbb      	ldrh	r3, [r7, #28]
 8012f1c:	441a      	add	r2, r3
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f22:	689b      	ldr	r3, [r3, #8]
 8012f24:	685b      	ldr	r3, [r3, #4]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d906      	bls.n	8012f38 <lwip_netconn_do_writemore+0x168>
 8012f2a:	4b10      	ldr	r3, [pc, #64]	@ (8012f6c <lwip_netconn_do_writemore+0x19c>)
 8012f2c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8012f30:	4916      	ldr	r1, [pc, #88]	@ (8012f8c <lwip_netconn_do_writemore+0x1bc>)
 8012f32:	4810      	ldr	r0, [pc, #64]	@ (8012f74 <lwip_netconn_do_writemore+0x1a4>)
 8012f34:	f00d fce2 	bl	80208fc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012f38:	8bbb      	ldrh	r3, [r7, #28]
 8012f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d103      	bne.n	8012f4a <lwip_netconn_do_writemore+0x17a>
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f48:	d209      	bcs.n	8012f5e <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012f4e:	8bba      	ldrh	r2, [r7, #28]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d11d      	bne.n	8012f90 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f58:	899b      	ldrh	r3, [r3, #12]
 8012f5a:	2b01      	cmp	r3, #1
 8012f5c:	d918      	bls.n	8012f90 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 8012f5e:	2301      	movs	r3, #1
 8012f60:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012f62:	7ebb      	ldrb	r3, [r7, #26]
 8012f64:	f043 0302 	orr.w	r3, r3, #2
 8012f68:	76bb      	strb	r3, [r7, #26]
 8012f6a:	e013      	b.n	8012f94 <lwip_netconn_do_writemore+0x1c4>
 8012f6c:	08021db8 	.word	0x08021db8
 8012f70:	08021f10 	.word	0x08021f10
 8012f74:	08021dfc 	.word	0x08021dfc
 8012f78:	08022218 	.word	0x08022218
 8012f7c:	08021f20 	.word	0x08021f20
 8012f80:	08022238 	.word	0x08022238
 8012f84:	08022250 	.word	0x08022250
 8012f88:	08022290 	.word	0x08022290
 8012f8c:	080222b8 	.word	0x080222b8
      } else {
        write_more = 0;
 8012f90:	2300      	movs	r3, #0
 8012f92:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6858      	ldr	r0, [r3, #4]
 8012f98:	7ebb      	ldrb	r3, [r7, #26]
 8012f9a:	8bba      	ldrh	r2, [r7, #28]
 8012f9c:	6979      	ldr	r1, [r7, #20]
 8012f9e:	f006 ff73 	bl	8019e88 <tcp_write>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012fa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d12c      	bne.n	8013008 <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fb2:	6999      	ldr	r1, [r3, #24]
 8012fb4:	8bba      	ldrh	r2, [r7, #28]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fba:	440a      	add	r2, r1
 8012fbc:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fc2:	6919      	ldr	r1, [r3, #16]
 8012fc4:	8bba      	ldrh	r2, [r7, #28]
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fca:	440a      	add	r2, r1
 8012fcc:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fd2:	691a      	ldr	r2, [r3, #16]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d113      	bne.n	8013008 <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fe4:	899a      	ldrh	r2, [r3, #12]
 8012fe6:	3a01      	subs	r2, #1
 8012fe8:	b292      	uxth	r2, r2
 8012fea:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ff0:	899b      	ldrh	r3, [r3, #12]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d008      	beq.n	8013008 <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ffa:	689a      	ldr	r2, [r3, #8]
 8012ffc:	3208      	adds	r2, #8
 8012ffe:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013004:	2200      	movs	r2, #0
 8013006:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8013008:	7e7b      	ldrb	r3, [r7, #25]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d004      	beq.n	8013018 <lwip_netconn_do_writemore+0x248>
 801300e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013012:	2b00      	cmp	r3, #0
 8013014:	f43f af3e 	beq.w	8012e94 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8013018:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d004      	beq.n	801302a <lwip_netconn_do_writemore+0x25a>
 8013020:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013024:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013028:	d136      	bne.n	8013098 <lwip_netconn_do_writemore+0x2c8>
err_mem:
 801302a:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801302c:	7e3b      	ldrb	r3, [r7, #24]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d01b      	beq.n	801306a <lwip_netconn_do_writemore+0x29a>
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013036:	699a      	ldr	r2, [r3, #24]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801303c:	695b      	ldr	r3, [r3, #20]
 801303e:	429a      	cmp	r2, r3
 8013040:	d213      	bcs.n	801306a <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013046:	2b00      	cmp	r3, #0
 8013048:	d005      	beq.n	8013056 <lwip_netconn_do_writemore+0x286>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801304e:	2200      	movs	r2, #0
 8013050:	2103      	movs	r1, #3
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f893 3020 	ldrb.w	r3, [r3, #32]
 801305c:	f043 0310 	orr.w	r3, r3, #16
 8013060:	b2da      	uxtb	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f883 2020 	strb.w	r2, [r3, #32]
 8013068:	e016      	b.n	8013098 <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	685b      	ldr	r3, [r3, #4]
 801306e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013072:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8013076:	d305      	bcc.n	8013084 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8013080:	2b04      	cmp	r3, #4
 8013082:	d909      	bls.n	8013098 <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013088:	2b00      	cmp	r3, #0
 801308a:	d005      	beq.n	8013098 <lwip_netconn_do_writemore+0x2c8>
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013090:	2200      	movs	r2, #0
 8013092:	2103      	movs	r1, #3
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8013098:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d11d      	bne.n	80130dc <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130a4:	699a      	ldr	r2, [r3, #24]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130aa:	695b      	ldr	r3, [r3, #20]
 80130ac:	429a      	cmp	r2, r3
 80130ae:	d002      	beq.n	80130b6 <lwip_netconn_do_writemore+0x2e6>
 80130b0:	7e3b      	ldrb	r3, [r7, #24]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d001      	beq.n	80130ba <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80130b6:	2301      	movs	r3, #1
 80130b8:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	685b      	ldr	r3, [r3, #4]
 80130be:	4618      	mov	r0, r3
 80130c0:	f007 fd2a 	bl	801ab18 <tcp_output>
 80130c4:	4603      	mov	r3, r0
 80130c6:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80130c8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80130cc:	f113 0f04 	cmn.w	r3, #4
 80130d0:	d12c      	bne.n	801312c <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80130d2:	7b3b      	ldrb	r3, [r7, #12]
 80130d4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80130d6:	2301      	movs	r3, #1
 80130d8:	76fb      	strb	r3, [r7, #27]
 80130da:	e027      	b.n	801312c <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 80130dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80130e4:	d120      	bne.n	8013128 <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	4618      	mov	r0, r3
 80130ec:	f007 fd14 	bl	801ab18 <tcp_output>
 80130f0:	4603      	mov	r3, r0
 80130f2:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80130f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80130f8:	f113 0f04 	cmn.w	r3, #4
 80130fc:	d104      	bne.n	8013108 <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80130fe:	7b7b      	ldrb	r3, [r7, #13]
 8013100:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013102:	2301      	movs	r3, #1
 8013104:	76fb      	strb	r3, [r7, #27]
 8013106:	e011      	b.n	801312c <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 8013108:	7e3b      	ldrb	r3, [r7, #24]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d00e      	beq.n	801312c <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013112:	699b      	ldr	r3, [r3, #24]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d102      	bne.n	801311e <lwip_netconn_do_writemore+0x34e>
 8013118:	f06f 0306 	mvn.w	r3, #6
 801311c:	e000      	b.n	8013120 <lwip_netconn_do_writemore+0x350>
 801311e:	2300      	movs	r3, #0
 8013120:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013122:	2301      	movs	r3, #1
 8013124:	76fb      	strb	r3, [r7, #27]
 8013126:	e001      	b.n	801312c <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8013128:	2301      	movs	r3, #1
 801312a:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801312c:	7efb      	ldrb	r3, [r7, #27]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d015      	beq.n	801315e <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	330c      	adds	r3, #12
 801313a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013140:	7ffa      	ldrb	r2, [r7, #31]
 8013142:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2200      	movs	r2, #0
 8013148:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2200      	movs	r2, #0
 801314e:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8013150:	78fb      	ldrb	r3, [r7, #3]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d006      	beq.n	8013164 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8013156:	68b8      	ldr	r0, [r7, #8]
 8013158:	f00c f9d8 	bl	801f50c <sys_sem_signal>
 801315c:	e002      	b.n	8013164 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801315e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013162:	e000      	b.n	8013166 <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 8013164:	2300      	movs	r3, #0
}
 8013166:	4618      	mov	r0, r3
 8013168:	3720      	adds	r7, #32
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop

08013170 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	785b      	ldrb	r3, [r3, #1]
 8013182:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d069      	beq.n	8013262 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8013198:	2b10      	cmp	r3, #16
 801319a:	d162      	bne.n	8013262 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80131a0:	2b03      	cmp	r3, #3
 80131a2:	d002      	beq.n	80131aa <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80131a4:	7afb      	ldrb	r3, [r7, #11]
 80131a6:	2b02      	cmp	r3, #2
 80131a8:	d05b      	beq.n	8013262 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80131aa:	7afb      	ldrb	r3, [r7, #11]
 80131ac:	2b03      	cmp	r3, #3
 80131ae:	d103      	bne.n	80131b8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	22f5      	movs	r2, #245	@ 0xf5
 80131b4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80131b6:	e059      	b.n	801326c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80131b8:	7afb      	ldrb	r3, [r7, #11]
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	d103      	bne.n	80131c6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	22fb      	movs	r2, #251	@ 0xfb
 80131c2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80131c4:	e052      	b.n	801326c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	7a1b      	ldrb	r3, [r3, #8]
 80131ca:	f003 0301 	and.w	r3, r3, #1
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d004      	beq.n	80131dc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7ff f8fa 	bl	80123d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d006      	beq.n	80131f4 <lwip_netconn_do_close+0x84>
 80131e6:	4b23      	ldr	r3, [pc, #140]	@ (8013274 <lwip_netconn_do_close+0x104>)
 80131e8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 80131ec:	4922      	ldr	r1, [pc, #136]	@ (8013278 <lwip_netconn_do_close+0x108>)
 80131ee:	4823      	ldr	r0, [pc, #140]	@ (801327c <lwip_netconn_do_close+0x10c>)
 80131f0:	f00d fb84 	bl	80208fc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	2204      	movs	r2, #4
 80131fa:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	68fa      	ldr	r2, [r7, #12]
 8013202:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	2100      	movs	r1, #0
 801320a:	4618      	mov	r0, r3
 801320c:	f7ff f95e 	bl	80124cc <lwip_netconn_do_close_internal>
 8013210:	4603      	mov	r3, r0
 8013212:	2b00      	cmp	r3, #0
 8013214:	d029      	beq.n	801326a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	785b      	ldrb	r3, [r3, #1]
 801321c:	2b04      	cmp	r3, #4
 801321e:	d006      	beq.n	801322e <lwip_netconn_do_close+0xbe>
 8013220:	4b14      	ldr	r3, [pc, #80]	@ (8013274 <lwip_netconn_do_close+0x104>)
 8013222:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8013226:	4916      	ldr	r1, [pc, #88]	@ (8013280 <lwip_netconn_do_close+0x110>)
 8013228:	4814      	ldr	r0, [pc, #80]	@ (801327c <lwip_netconn_do_close+0x10c>)
 801322a:	f00d fb67 	bl	80208fc <iprintf>
        UNLOCK_TCPIP_CORE();
 801322e:	4815      	ldr	r0, [pc, #84]	@ (8013284 <lwip_netconn_do_close+0x114>)
 8013230:	f00c f9d5 	bl	801f5de <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	330c      	adds	r3, #12
 801323a:	2100      	movs	r1, #0
 801323c:	4618      	mov	r0, r3
 801323e:	f00c f934 	bl	801f4aa <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8013242:	4810      	ldr	r0, [pc, #64]	@ (8013284 <lwip_netconn_do_close+0x114>)
 8013244:	f00c f9bc 	bl	801f5c0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	785b      	ldrb	r3, [r3, #1]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d00b      	beq.n	801326a <lwip_netconn_do_close+0xfa>
 8013252:	4b08      	ldr	r3, [pc, #32]	@ (8013274 <lwip_netconn_do_close+0x104>)
 8013254:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8013258:	4909      	ldr	r1, [pc, #36]	@ (8013280 <lwip_netconn_do_close+0x110>)
 801325a:	4808      	ldr	r0, [pc, #32]	@ (801327c <lwip_netconn_do_close+0x10c>)
 801325c:	f00d fb4e 	bl	80208fc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8013260:	e003      	b.n	801326a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	22f5      	movs	r2, #245	@ 0xf5
 8013266:	711a      	strb	r2, [r3, #4]
 8013268:	e000      	b.n	801326c <lwip_netconn_do_close+0xfc>
      return;
 801326a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 801326c:	3710      	adds	r7, #16
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	08021db8 	.word	0x08021db8
 8013278:	0802215c 	.word	0x0802215c
 801327c:	08021dfc 	.word	0x08021dfc
 8013280:	08022178 	.word	0x08022178
 8013284:	2001f654 	.word	0x2001f654

08013288 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8013288:	b480      	push	{r7}
 801328a:	b083      	sub	sp, #12
 801328c:	af00      	add	r7, sp, #0
 801328e:	4603      	mov	r3, r0
 8013290:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8013292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013296:	2b00      	cmp	r3, #0
 8013298:	dc04      	bgt.n	80132a4 <lwip_strerr+0x1c>
 801329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801329e:	f113 0f10 	cmn.w	r3, #16
 80132a2:	da01      	bge.n	80132a8 <lwip_strerr+0x20>
    return "Unknown error.";
 80132a4:	4b06      	ldr	r3, [pc, #24]	@ (80132c0 <lwip_strerr+0x38>)
 80132a6:	e005      	b.n	80132b4 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 80132a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80132ac:	425b      	negs	r3, r3
 80132ae:	4a05      	ldr	r2, [pc, #20]	@ (80132c4 <lwip_strerr+0x3c>)
 80132b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	370c      	adds	r7, #12
 80132b8:	46bd      	mov	sp, r7
 80132ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132be:	4770      	bx	lr
 80132c0:	0802244c 	.word	0x0802244c
 80132c4:	20000024 	.word	0x20000024

080132c8 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80132ce:	2006      	movs	r0, #6
 80132d0:	f000 ff2e 	bl	8014130 <memp_malloc>
 80132d4:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d004      	beq.n	80132e6 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 80132dc:	2210      	movs	r2, #16
 80132de:	2100      	movs	r1, #0
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f00d fc6b 	bl	8020bbc <memset>
  }
  return buf;
 80132e6:	687b      	ldr	r3, [r7, #4]
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3708      	adds	r7, #8
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d013      	beq.n	8013326 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d00b      	beq.n	801331e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	4618      	mov	r0, r3
 801330c:	f001 ff6c 	bl	80151e8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2200      	movs	r2, #0
 8013314:	605a      	str	r2, [r3, #4]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	685a      	ldr	r2, [r3, #4]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801331e:	6879      	ldr	r1, [r7, #4]
 8013320:	2006      	movs	r0, #6
 8013322:	f000 ff7b 	bl	801421c <memp_free>
  }
}
 8013326:	bf00      	nop
 8013328:	3708      	adds	r7, #8
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
	...

08013330 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	460b      	mov	r3, r1
 801333a:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d107      	bne.n	8013352 <netbuf_alloc+0x22>
 8013342:	4b1c      	ldr	r3, [pc, #112]	@ (80133b4 <netbuf_alloc+0x84>)
 8013344:	2268      	movs	r2, #104	@ 0x68
 8013346:	491c      	ldr	r1, [pc, #112]	@ (80133b8 <netbuf_alloc+0x88>)
 8013348:	481c      	ldr	r0, [pc, #112]	@ (80133bc <netbuf_alloc+0x8c>)
 801334a:	f00d fad7 	bl	80208fc <iprintf>
 801334e:	2300      	movs	r3, #0
 8013350:	e02b      	b.n	80133aa <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d004      	beq.n	8013364 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	4618      	mov	r0, r3
 8013360:	f001 ff42 	bl	80151e8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 8013364:	887b      	ldrh	r3, [r7, #2]
 8013366:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801336a:	4619      	mov	r1, r3
 801336c:	2036      	movs	r0, #54	@ 0x36
 801336e:	f001 fc0f 	bl	8014b90 <pbuf_alloc>
 8013372:	4602      	mov	r2, r0
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d101      	bne.n	8013384 <netbuf_alloc+0x54>
    return NULL;
 8013380:	2300      	movs	r3, #0
 8013382:	e012      	b.n	80133aa <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	895b      	ldrh	r3, [r3, #10]
 801338a:	887a      	ldrh	r2, [r7, #2]
 801338c:	429a      	cmp	r2, r3
 801338e:	d905      	bls.n	801339c <netbuf_alloc+0x6c>
 8013390:	4b08      	ldr	r3, [pc, #32]	@ (80133b4 <netbuf_alloc+0x84>)
 8013392:	2272      	movs	r2, #114	@ 0x72
 8013394:	490a      	ldr	r1, [pc, #40]	@ (80133c0 <netbuf_alloc+0x90>)
 8013396:	4809      	ldr	r0, [pc, #36]	@ (80133bc <netbuf_alloc+0x8c>)
 8013398:	f00d fab0 	bl	80208fc <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681a      	ldr	r2, [r3, #0]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	685b      	ldr	r3, [r3, #4]
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3708      	adds	r7, #8
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
 80133b2:	bf00      	nop
 80133b4:	0802245c 	.word	0x0802245c
 80133b8:	08022490 	.word	0x08022490
 80133bc:	080224ac 	.word	0x080224ac
 80133c0:	080224d4 	.word	0x080224d4

080133c4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b084      	sub	sp, #16
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80133ce:	f008 fc67 	bl	801bca0 <sys_timeouts_sleeptime>
 80133d2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80133da:	d10b      	bne.n	80133f4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80133dc:	4813      	ldr	r0, [pc, #76]	@ (801342c <tcpip_timeouts_mbox_fetch+0x68>)
 80133de:	f00c f8fe 	bl	801f5de <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80133e2:	2200      	movs	r2, #0
 80133e4:	6839      	ldr	r1, [r7, #0]
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f00b ffd4 	bl	801f394 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80133ec:	480f      	ldr	r0, [pc, #60]	@ (801342c <tcpip_timeouts_mbox_fetch+0x68>)
 80133ee:	f00c f8e7 	bl	801f5c0 <sys_mutex_lock>
    return;
 80133f2:	e018      	b.n	8013426 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d102      	bne.n	8013400 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80133fa:	f008 fc17 	bl	801bc2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80133fe:	e7e6      	b.n	80133ce <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8013400:	480a      	ldr	r0, [pc, #40]	@ (801342c <tcpip_timeouts_mbox_fetch+0x68>)
 8013402:	f00c f8ec 	bl	801f5de <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8013406:	68fa      	ldr	r2, [r7, #12]
 8013408:	6839      	ldr	r1, [r7, #0]
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f00b ffc2 	bl	801f394 <sys_arch_mbox_fetch>
 8013410:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8013412:	4806      	ldr	r0, [pc, #24]	@ (801342c <tcpip_timeouts_mbox_fetch+0x68>)
 8013414:	f00c f8d4 	bl	801f5c0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801341e:	d102      	bne.n	8013426 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013420:	f008 fc04 	bl	801bc2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013424:	e7d3      	b.n	80133ce <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8013426:	3710      	adds	r7, #16
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	2001f654 	.word	0x2001f654

08013430 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b084      	sub	sp, #16
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8013438:	4810      	ldr	r0, [pc, #64]	@ (801347c <tcpip_thread+0x4c>)
 801343a:	f00c f8c1 	bl	801f5c0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801343e:	4b10      	ldr	r3, [pc, #64]	@ (8013480 <tcpip_thread+0x50>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d005      	beq.n	8013452 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8013446:	4b0e      	ldr	r3, [pc, #56]	@ (8013480 <tcpip_thread+0x50>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	4a0e      	ldr	r2, [pc, #56]	@ (8013484 <tcpip_thread+0x54>)
 801344c:	6812      	ldr	r2, [r2, #0]
 801344e:	4610      	mov	r0, r2
 8013450:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013452:	f107 030c 	add.w	r3, r7, #12
 8013456:	4619      	mov	r1, r3
 8013458:	480b      	ldr	r0, [pc, #44]	@ (8013488 <tcpip_thread+0x58>)
 801345a:	f7ff ffb3 	bl	80133c4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d106      	bne.n	8013472 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013464:	4b09      	ldr	r3, [pc, #36]	@ (801348c <tcpip_thread+0x5c>)
 8013466:	2291      	movs	r2, #145	@ 0x91
 8013468:	4909      	ldr	r1, [pc, #36]	@ (8013490 <tcpip_thread+0x60>)
 801346a:	480a      	ldr	r0, [pc, #40]	@ (8013494 <tcpip_thread+0x64>)
 801346c:	f00d fa46 	bl	80208fc <iprintf>
      continue;
 8013470:	e003      	b.n	801347a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	4618      	mov	r0, r3
 8013476:	f000 f80f 	bl	8013498 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801347a:	e7ea      	b.n	8013452 <tcpip_thread+0x22>
 801347c:	2001f654 	.word	0x2001f654
 8013480:	2001f648 	.word	0x2001f648
 8013484:	2001f64c 	.word	0x2001f64c
 8013488:	2001f650 	.word	0x2001f650
 801348c:	080225f4 	.word	0x080225f4
 8013490:	08022624 	.word	0x08022624
 8013494:	08022644 	.word	0x08022644

08013498 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	2b02      	cmp	r3, #2
 80134a6:	d026      	beq.n	80134f6 <tcpip_thread_handle_msg+0x5e>
 80134a8:	2b02      	cmp	r3, #2
 80134aa:	dc2b      	bgt.n	8013504 <tcpip_thread_handle_msg+0x6c>
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d002      	beq.n	80134b6 <tcpip_thread_handle_msg+0x1e>
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d015      	beq.n	80134e0 <tcpip_thread_handle_msg+0x48>
 80134b4:	e026      	b.n	8013504 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	68db      	ldr	r3, [r3, #12]
 80134ba:	687a      	ldr	r2, [r7, #4]
 80134bc:	6850      	ldr	r0, [r2, #4]
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	6892      	ldr	r2, [r2, #8]
 80134c2:	4611      	mov	r1, r2
 80134c4:	4798      	blx	r3
 80134c6:	4603      	mov	r3, r0
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d004      	beq.n	80134d6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	4618      	mov	r0, r3
 80134d2:	f001 fe89 	bl	80151e8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80134d6:	6879      	ldr	r1, [r7, #4]
 80134d8:	2009      	movs	r0, #9
 80134da:	f000 fe9f 	bl	801421c <memp_free>
      break;
 80134de:	e018      	b.n	8013512 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	687a      	ldr	r2, [r7, #4]
 80134e6:	6892      	ldr	r2, [r2, #8]
 80134e8:	4610      	mov	r0, r2
 80134ea:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80134ec:	6879      	ldr	r1, [r7, #4]
 80134ee:	2008      	movs	r0, #8
 80134f0:	f000 fe94 	bl	801421c <memp_free>
      break;
 80134f4:	e00d      	b.n	8013512 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	6892      	ldr	r2, [r2, #8]
 80134fe:	4610      	mov	r0, r2
 8013500:	4798      	blx	r3
      break;
 8013502:	e006      	b.n	8013512 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013504:	4b05      	ldr	r3, [pc, #20]	@ (801351c <tcpip_thread_handle_msg+0x84>)
 8013506:	22cf      	movs	r2, #207	@ 0xcf
 8013508:	4905      	ldr	r1, [pc, #20]	@ (8013520 <tcpip_thread_handle_msg+0x88>)
 801350a:	4806      	ldr	r0, [pc, #24]	@ (8013524 <tcpip_thread_handle_msg+0x8c>)
 801350c:	f00d f9f6 	bl	80208fc <iprintf>
      break;
 8013510:	bf00      	nop
  }
}
 8013512:	bf00      	nop
 8013514:	3708      	adds	r7, #8
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	080225f4 	.word	0x080225f4
 8013520:	08022624 	.word	0x08022624
 8013524:	08022644 	.word	0x08022644

08013528 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b086      	sub	sp, #24
 801352c:	af00      	add	r7, sp, #0
 801352e:	60f8      	str	r0, [r7, #12]
 8013530:	60b9      	str	r1, [r7, #8]
 8013532:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013534:	481a      	ldr	r0, [pc, #104]	@ (80135a0 <tcpip_inpkt+0x78>)
 8013536:	f00b ff75 	bl	801f424 <sys_mbox_valid>
 801353a:	4603      	mov	r3, r0
 801353c:	2b00      	cmp	r3, #0
 801353e:	d105      	bne.n	801354c <tcpip_inpkt+0x24>
 8013540:	4b18      	ldr	r3, [pc, #96]	@ (80135a4 <tcpip_inpkt+0x7c>)
 8013542:	22fc      	movs	r2, #252	@ 0xfc
 8013544:	4918      	ldr	r1, [pc, #96]	@ (80135a8 <tcpip_inpkt+0x80>)
 8013546:	4819      	ldr	r0, [pc, #100]	@ (80135ac <tcpip_inpkt+0x84>)
 8013548:	f00d f9d8 	bl	80208fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801354c:	2009      	movs	r0, #9
 801354e:	f000 fdef 	bl	8014130 <memp_malloc>
 8013552:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d102      	bne.n	8013560 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801355a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801355e:	e01a      	b.n	8013596 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	2200      	movs	r2, #0
 8013564:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	68fa      	ldr	r2, [r7, #12]
 801356a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	68ba      	ldr	r2, [r7, #8]
 8013570:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	687a      	ldr	r2, [r7, #4]
 8013576:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013578:	6979      	ldr	r1, [r7, #20]
 801357a:	4809      	ldr	r0, [pc, #36]	@ (80135a0 <tcpip_inpkt+0x78>)
 801357c:	f00b fef0 	bl	801f360 <sys_mbox_trypost>
 8013580:	4603      	mov	r3, r0
 8013582:	2b00      	cmp	r3, #0
 8013584:	d006      	beq.n	8013594 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013586:	6979      	ldr	r1, [r7, #20]
 8013588:	2009      	movs	r0, #9
 801358a:	f000 fe47 	bl	801421c <memp_free>
    return ERR_MEM;
 801358e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013592:	e000      	b.n	8013596 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8013594:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8013596:	4618      	mov	r0, r3
 8013598:	3718      	adds	r7, #24
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	2001f650 	.word	0x2001f650
 80135a4:	080225f4 	.word	0x080225f4
 80135a8:	0802266c 	.word	0x0802266c
 80135ac:	08022644 	.word	0x08022644

080135b0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80135c0:	f003 0318 	and.w	r3, r3, #24
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d006      	beq.n	80135d6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80135c8:	4a08      	ldr	r2, [pc, #32]	@ (80135ec <tcpip_input+0x3c>)
 80135ca:	6839      	ldr	r1, [r7, #0]
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f7ff ffab 	bl	8013528 <tcpip_inpkt>
 80135d2:	4603      	mov	r3, r0
 80135d4:	e005      	b.n	80135e2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80135d6:	4a06      	ldr	r2, [pc, #24]	@ (80135f0 <tcpip_input+0x40>)
 80135d8:	6839      	ldr	r1, [r7, #0]
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f7ff ffa4 	bl	8013528 <tcpip_inpkt>
 80135e0:	4603      	mov	r3, r0
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3708      	adds	r7, #8
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	0801f15d 	.word	0x0801f15d
 80135f0:	0801e065 	.word	0x0801e065

080135f4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b084      	sub	sp, #16
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80135fe:	4819      	ldr	r0, [pc, #100]	@ (8013664 <tcpip_try_callback+0x70>)
 8013600:	f00b ff10 	bl	801f424 <sys_mbox_valid>
 8013604:	4603      	mov	r3, r0
 8013606:	2b00      	cmp	r3, #0
 8013608:	d106      	bne.n	8013618 <tcpip_try_callback+0x24>
 801360a:	4b17      	ldr	r3, [pc, #92]	@ (8013668 <tcpip_try_callback+0x74>)
 801360c:	f240 125d 	movw	r2, #349	@ 0x15d
 8013610:	4916      	ldr	r1, [pc, #88]	@ (801366c <tcpip_try_callback+0x78>)
 8013612:	4817      	ldr	r0, [pc, #92]	@ (8013670 <tcpip_try_callback+0x7c>)
 8013614:	f00d f972 	bl	80208fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8013618:	2008      	movs	r0, #8
 801361a:	f000 fd89 	bl	8014130 <memp_malloc>
 801361e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d102      	bne.n	801362c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8013626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801362a:	e017      	b.n	801365c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2201      	movs	r2, #1
 8013630:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	683a      	ldr	r2, [r7, #0]
 801363c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801363e:	68f9      	ldr	r1, [r7, #12]
 8013640:	4808      	ldr	r0, [pc, #32]	@ (8013664 <tcpip_try_callback+0x70>)
 8013642:	f00b fe8d 	bl	801f360 <sys_mbox_trypost>
 8013646:	4603      	mov	r3, r0
 8013648:	2b00      	cmp	r3, #0
 801364a:	d006      	beq.n	801365a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801364c:	68f9      	ldr	r1, [r7, #12]
 801364e:	2008      	movs	r0, #8
 8013650:	f000 fde4 	bl	801421c <memp_free>
    return ERR_MEM;
 8013654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013658:	e000      	b.n	801365c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801365a:	2300      	movs	r3, #0
}
 801365c:	4618      	mov	r0, r3
 801365e:	3710      	adds	r7, #16
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}
 8013664:	2001f650 	.word	0x2001f650
 8013668:	080225f4 	.word	0x080225f4
 801366c:	0802266c 	.word	0x0802266c
 8013670:	08022644 	.word	0x08022644

08013674 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	60f8      	str	r0, [r7, #12]
 801367c:	60b9      	str	r1, [r7, #8]
 801367e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8013680:	4806      	ldr	r0, [pc, #24]	@ (801369c <tcpip_send_msg_wait_sem+0x28>)
 8013682:	f00b ff9d 	bl	801f5c0 <sys_mutex_lock>
  fn(apimsg);
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	68b8      	ldr	r0, [r7, #8]
 801368a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801368c:	4803      	ldr	r0, [pc, #12]	@ (801369c <tcpip_send_msg_wait_sem+0x28>)
 801368e:	f00b ffa6 	bl	801f5de <sys_mutex_unlock>
  return ERR_OK;
 8013692:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8013694:	4618      	mov	r0, r3
 8013696:	3710      	adds	r7, #16
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}
 801369c:	2001f654 	.word	0x2001f654

080136a0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b084      	sub	sp, #16
 80136a4:	af02      	add	r7, sp, #8
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80136aa:	f000 f872 	bl	8013792 <lwip_init>

  tcpip_init_done = initfunc;
 80136ae:	4a17      	ldr	r2, [pc, #92]	@ (801370c <tcpip_init+0x6c>)
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80136b4:	4a16      	ldr	r2, [pc, #88]	@ (8013710 <tcpip_init+0x70>)
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80136ba:	2106      	movs	r1, #6
 80136bc:	4815      	ldr	r0, [pc, #84]	@ (8013714 <tcpip_init+0x74>)
 80136be:	f00b fe23 	bl	801f308 <sys_mbox_new>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d006      	beq.n	80136d6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80136c8:	4b13      	ldr	r3, [pc, #76]	@ (8013718 <tcpip_init+0x78>)
 80136ca:	f240 2261 	movw	r2, #609	@ 0x261
 80136ce:	4913      	ldr	r1, [pc, #76]	@ (801371c <tcpip_init+0x7c>)
 80136d0:	4813      	ldr	r0, [pc, #76]	@ (8013720 <tcpip_init+0x80>)
 80136d2:	f00d f913 	bl	80208fc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80136d6:	4813      	ldr	r0, [pc, #76]	@ (8013724 <tcpip_init+0x84>)
 80136d8:	f00b ff5c 	bl	801f594 <sys_mutex_new>
 80136dc:	4603      	mov	r3, r0
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d006      	beq.n	80136f0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80136e2:	4b0d      	ldr	r3, [pc, #52]	@ (8013718 <tcpip_init+0x78>)
 80136e4:	f240 2265 	movw	r2, #613	@ 0x265
 80136e8:	490f      	ldr	r1, [pc, #60]	@ (8013728 <tcpip_init+0x88>)
 80136ea:	480d      	ldr	r0, [pc, #52]	@ (8013720 <tcpip_init+0x80>)
 80136ec:	f00d f906 	bl	80208fc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80136f0:	2318      	movs	r3, #24
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80136f8:	2200      	movs	r2, #0
 80136fa:	490c      	ldr	r1, [pc, #48]	@ (801372c <tcpip_init+0x8c>)
 80136fc:	480c      	ldr	r0, [pc, #48]	@ (8013730 <tcpip_init+0x90>)
 80136fe:	f00b ff7b 	bl	801f5f8 <sys_thread_new>
}
 8013702:	bf00      	nop
 8013704:	3708      	adds	r7, #8
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}
 801370a:	bf00      	nop
 801370c:	2001f648 	.word	0x2001f648
 8013710:	2001f64c 	.word	0x2001f64c
 8013714:	2001f650 	.word	0x2001f650
 8013718:	080225f4 	.word	0x080225f4
 801371c:	0802267c 	.word	0x0802267c
 8013720:	08022644 	.word	0x08022644
 8013724:	2001f654 	.word	0x2001f654
 8013728:	080226a0 	.word	0x080226a0
 801372c:	08013431 	.word	0x08013431
 8013730:	080226c4 	.word	0x080226c4

08013734 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013734:	b480      	push	{r7}
 8013736:	b083      	sub	sp, #12
 8013738:	af00      	add	r7, sp, #0
 801373a:	4603      	mov	r3, r0
 801373c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801373e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013742:	021b      	lsls	r3, r3, #8
 8013744:	b21a      	sxth	r2, r3
 8013746:	88fb      	ldrh	r3, [r7, #6]
 8013748:	0a1b      	lsrs	r3, r3, #8
 801374a:	b29b      	uxth	r3, r3
 801374c:	b21b      	sxth	r3, r3
 801374e:	4313      	orrs	r3, r2
 8013750:	b21b      	sxth	r3, r3
 8013752:	b29b      	uxth	r3, r3
}
 8013754:	4618      	mov	r0, r3
 8013756:	370c      	adds	r7, #12
 8013758:	46bd      	mov	sp, r7
 801375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375e:	4770      	bx	lr

08013760 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	061a      	lsls	r2, r3, #24
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	021b      	lsls	r3, r3, #8
 8013770:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013774:	431a      	orrs	r2, r3
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	0a1b      	lsrs	r3, r3, #8
 801377a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801377e:	431a      	orrs	r2, r3
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	0e1b      	lsrs	r3, r3, #24
 8013784:	4313      	orrs	r3, r2
}
 8013786:	4618      	mov	r0, r3
 8013788:	370c      	adds	r7, #12
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr

08013792 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b082      	sub	sp, #8
 8013796:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013798:	2300      	movs	r3, #0
 801379a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801379c:	f00b feee 	bl	801f57c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80137a0:	f000 f8d4 	bl	801394c <mem_init>
  memp_init();
 80137a4:	f000 fc4e 	bl	8014044 <memp_init>
  pbuf_init();
  netif_init();
 80137a8:	f000 fd62 	bl	8014270 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80137ac:	f008 fab0 	bl	801bd10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80137b0:	f001 fff0 	bl	8015794 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80137b4:	f008 f9f2 	bl	801bb9c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80137b8:	bf00      	nop
 80137ba:	3708      	adds	r7, #8
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}

080137c0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80137c0:	b480      	push	{r7}
 80137c2:	b083      	sub	sp, #12
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	4603      	mov	r3, r0
 80137c8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80137ca:	4b05      	ldr	r3, [pc, #20]	@ (80137e0 <ptr_to_mem+0x20>)
 80137cc:	681a      	ldr	r2, [r3, #0]
 80137ce:	88fb      	ldrh	r3, [r7, #6]
 80137d0:	4413      	add	r3, r2
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	370c      	adds	r7, #12
 80137d6:	46bd      	mov	sp, r7
 80137d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137dc:	4770      	bx	lr
 80137de:	bf00      	nop
 80137e0:	2001f670 	.word	0x2001f670

080137e4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b083      	sub	sp, #12
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80137ec:	4b05      	ldr	r3, [pc, #20]	@ (8013804 <mem_to_ptr+0x20>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	687a      	ldr	r2, [r7, #4]
 80137f2:	1ad3      	subs	r3, r2, r3
 80137f4:	b29b      	uxth	r3, r3
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	370c      	adds	r7, #12
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr
 8013802:	bf00      	nop
 8013804:	2001f670 	.word	0x2001f670

08013808 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8013808:	b590      	push	{r4, r7, lr}
 801380a:	b085      	sub	sp, #20
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013810:	4b45      	ldr	r3, [pc, #276]	@ (8013928 <plug_holes+0x120>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	687a      	ldr	r2, [r7, #4]
 8013816:	429a      	cmp	r2, r3
 8013818:	d206      	bcs.n	8013828 <plug_holes+0x20>
 801381a:	4b44      	ldr	r3, [pc, #272]	@ (801392c <plug_holes+0x124>)
 801381c:	f240 12df 	movw	r2, #479	@ 0x1df
 8013820:	4943      	ldr	r1, [pc, #268]	@ (8013930 <plug_holes+0x128>)
 8013822:	4844      	ldr	r0, [pc, #272]	@ (8013934 <plug_holes+0x12c>)
 8013824:	f00d f86a 	bl	80208fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013828:	4b43      	ldr	r3, [pc, #268]	@ (8013938 <plug_holes+0x130>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	687a      	ldr	r2, [r7, #4]
 801382e:	429a      	cmp	r2, r3
 8013830:	d306      	bcc.n	8013840 <plug_holes+0x38>
 8013832:	4b3e      	ldr	r3, [pc, #248]	@ (801392c <plug_holes+0x124>)
 8013834:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013838:	4940      	ldr	r1, [pc, #256]	@ (801393c <plug_holes+0x134>)
 801383a:	483e      	ldr	r0, [pc, #248]	@ (8013934 <plug_holes+0x12c>)
 801383c:	f00d f85e 	bl	80208fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	791b      	ldrb	r3, [r3, #4]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d006      	beq.n	8013856 <plug_holes+0x4e>
 8013848:	4b38      	ldr	r3, [pc, #224]	@ (801392c <plug_holes+0x124>)
 801384a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801384e:	493c      	ldr	r1, [pc, #240]	@ (8013940 <plug_holes+0x138>)
 8013850:	4838      	ldr	r0, [pc, #224]	@ (8013934 <plug_holes+0x12c>)
 8013852:	f00d f853 	bl	80208fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	881b      	ldrh	r3, [r3, #0]
 801385a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801385e:	d906      	bls.n	801386e <plug_holes+0x66>
 8013860:	4b32      	ldr	r3, [pc, #200]	@ (801392c <plug_holes+0x124>)
 8013862:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8013866:	4937      	ldr	r1, [pc, #220]	@ (8013944 <plug_holes+0x13c>)
 8013868:	4832      	ldr	r0, [pc, #200]	@ (8013934 <plug_holes+0x12c>)
 801386a:	f00d f847 	bl	80208fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	881b      	ldrh	r3, [r3, #0]
 8013872:	4618      	mov	r0, r3
 8013874:	f7ff ffa4 	bl	80137c0 <ptr_to_mem>
 8013878:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	429a      	cmp	r2, r3
 8013880:	d024      	beq.n	80138cc <plug_holes+0xc4>
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	791b      	ldrb	r3, [r3, #4]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d120      	bne.n	80138cc <plug_holes+0xc4>
 801388a:	4b2b      	ldr	r3, [pc, #172]	@ (8013938 <plug_holes+0x130>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	68fa      	ldr	r2, [r7, #12]
 8013890:	429a      	cmp	r2, r3
 8013892:	d01b      	beq.n	80138cc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013894:	4b2c      	ldr	r3, [pc, #176]	@ (8013948 <plug_holes+0x140>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	68fa      	ldr	r2, [r7, #12]
 801389a:	429a      	cmp	r2, r3
 801389c:	d102      	bne.n	80138a4 <plug_holes+0x9c>
      lfree = mem;
 801389e:	4a2a      	ldr	r2, [pc, #168]	@ (8013948 <plug_holes+0x140>)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	881a      	ldrh	r2, [r3, #0]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	881b      	ldrh	r3, [r3, #0]
 80138b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80138b4:	d00a      	beq.n	80138cc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	881b      	ldrh	r3, [r3, #0]
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7ff ff80 	bl	80137c0 <ptr_to_mem>
 80138c0:	4604      	mov	r4, r0
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f7ff ff8e 	bl	80137e4 <mem_to_ptr>
 80138c8:	4603      	mov	r3, r0
 80138ca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	885b      	ldrh	r3, [r3, #2]
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7ff ff75 	bl	80137c0 <ptr_to_mem>
 80138d6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80138d8:	68ba      	ldr	r2, [r7, #8]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	429a      	cmp	r2, r3
 80138de:	d01f      	beq.n	8013920 <plug_holes+0x118>
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	791b      	ldrb	r3, [r3, #4]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d11b      	bne.n	8013920 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80138e8:	4b17      	ldr	r3, [pc, #92]	@ (8013948 <plug_holes+0x140>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	687a      	ldr	r2, [r7, #4]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d102      	bne.n	80138f8 <plug_holes+0xf0>
      lfree = pmem;
 80138f2:	4a15      	ldr	r2, [pc, #84]	@ (8013948 <plug_holes+0x140>)
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	881a      	ldrh	r2, [r3, #0]
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	881b      	ldrh	r3, [r3, #0]
 8013904:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013908:	d00a      	beq.n	8013920 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	881b      	ldrh	r3, [r3, #0]
 801390e:	4618      	mov	r0, r3
 8013910:	f7ff ff56 	bl	80137c0 <ptr_to_mem>
 8013914:	4604      	mov	r4, r0
 8013916:	68b8      	ldr	r0, [r7, #8]
 8013918:	f7ff ff64 	bl	80137e4 <mem_to_ptr>
 801391c:	4603      	mov	r3, r0
 801391e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013920:	bf00      	nop
 8013922:	3714      	adds	r7, #20
 8013924:	46bd      	mov	sp, r7
 8013926:	bd90      	pop	{r4, r7, pc}
 8013928:	2001f670 	.word	0x2001f670
 801392c:	080226d4 	.word	0x080226d4
 8013930:	08022704 	.word	0x08022704
 8013934:	0802271c 	.word	0x0802271c
 8013938:	2001f674 	.word	0x2001f674
 801393c:	08022744 	.word	0x08022744
 8013940:	08022760 	.word	0x08022760
 8013944:	0802277c 	.word	0x0802277c
 8013948:	2001f67c 	.word	0x2001f67c

0801394c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013952:	4b1d      	ldr	r3, [pc, #116]	@ (80139c8 <mem_init+0x7c>)
 8013954:	4a1d      	ldr	r2, [pc, #116]	@ (80139cc <mem_init+0x80>)
 8013956:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013958:	4b1b      	ldr	r3, [pc, #108]	@ (80139c8 <mem_init+0x7c>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8013964:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2200      	movs	r2, #0
 801396a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2200      	movs	r2, #0
 8013970:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8013972:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8013976:	f7ff ff23 	bl	80137c0 <ptr_to_mem>
 801397a:	4603      	mov	r3, r0
 801397c:	4a14      	ldr	r2, [pc, #80]	@ (80139d0 <mem_init+0x84>)
 801397e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013980:	4b13      	ldr	r3, [pc, #76]	@ (80139d0 <mem_init+0x84>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	2201      	movs	r2, #1
 8013986:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013988:	4b11      	ldr	r3, [pc, #68]	@ (80139d0 <mem_init+0x84>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8013990:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013992:	4b0f      	ldr	r3, [pc, #60]	@ (80139d0 <mem_init+0x84>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 801399a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801399c:	4b0a      	ldr	r3, [pc, #40]	@ (80139c8 <mem_init+0x7c>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	4a0c      	ldr	r2, [pc, #48]	@ (80139d4 <mem_init+0x88>)
 80139a2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80139a4:	480c      	ldr	r0, [pc, #48]	@ (80139d8 <mem_init+0x8c>)
 80139a6:	f00b fdf5 	bl	801f594 <sys_mutex_new>
 80139aa:	4603      	mov	r3, r0
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d006      	beq.n	80139be <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80139b0:	4b0a      	ldr	r3, [pc, #40]	@ (80139dc <mem_init+0x90>)
 80139b2:	f240 221f 	movw	r2, #543	@ 0x21f
 80139b6:	490a      	ldr	r1, [pc, #40]	@ (80139e0 <mem_init+0x94>)
 80139b8:	480a      	ldr	r0, [pc, #40]	@ (80139e4 <mem_init+0x98>)
 80139ba:	f00c ff9f 	bl	80208fc <iprintf>
  }
}
 80139be:	bf00      	nop
 80139c0:	3708      	adds	r7, #8
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}
 80139c6:	bf00      	nop
 80139c8:	2001f670 	.word	0x2001f670
 80139cc:	20048000 	.word	0x20048000
 80139d0:	2001f674 	.word	0x2001f674
 80139d4:	2001f67c 	.word	0x2001f67c
 80139d8:	2001f678 	.word	0x2001f678
 80139dc:	080226d4 	.word	0x080226d4
 80139e0:	080227a8 	.word	0x080227a8
 80139e4:	0802271c 	.word	0x0802271c

080139e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b086      	sub	sp, #24
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f7ff fef7 	bl	80137e4 <mem_to_ptr>
 80139f6:	4603      	mov	r3, r0
 80139f8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	881b      	ldrh	r3, [r3, #0]
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7ff fede 	bl	80137c0 <ptr_to_mem>
 8013a04:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	885b      	ldrh	r3, [r3, #2]
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7ff fed8 	bl	80137c0 <ptr_to_mem>
 8013a10:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	881b      	ldrh	r3, [r3, #0]
 8013a16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013a1a:	d818      	bhi.n	8013a4e <mem_link_valid+0x66>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	885b      	ldrh	r3, [r3, #2]
 8013a20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013a24:	d813      	bhi.n	8013a4e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013a2a:	8afa      	ldrh	r2, [r7, #22]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d004      	beq.n	8013a3a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	881b      	ldrh	r3, [r3, #0]
 8013a34:	8afa      	ldrh	r2, [r7, #22]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d109      	bne.n	8013a4e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013a3a:	4b08      	ldr	r3, [pc, #32]	@ (8013a5c <mem_link_valid+0x74>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013a3e:	693a      	ldr	r2, [r7, #16]
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d006      	beq.n	8013a52 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	885b      	ldrh	r3, [r3, #2]
 8013a48:	8afa      	ldrh	r2, [r7, #22]
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d001      	beq.n	8013a52 <mem_link_valid+0x6a>
    return 0;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	e000      	b.n	8013a54 <mem_link_valid+0x6c>
  }
  return 1;
 8013a52:	2301      	movs	r3, #1
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3718      	adds	r7, #24
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}
 8013a5c:	2001f674 	.word	0x2001f674

08013a60 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b088      	sub	sp, #32
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d103      	bne.n	8013a76 <mem_free+0x16>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
 8013a6e:	4841      	ldr	r0, [pc, #260]	@ (8013b74 <mem_free+0x114>)
 8013a70:	f00c ffb4 	bl	80209dc <puts>
    return;
 8013a74:	e07b      	b.n	8013b6e <mem_free+0x10e>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f003 0303 	and.w	r3, r3, #3
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d010      	beq.n	8013aa2 <mem_free+0x42>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013a80:	4b3d      	ldr	r3, [pc, #244]	@ (8013b78 <mem_free+0x118>)
 8013a82:	f240 2273 	movw	r2, #627	@ 0x273
 8013a86:	493d      	ldr	r1, [pc, #244]	@ (8013b7c <mem_free+0x11c>)
 8013a88:	483d      	ldr	r0, [pc, #244]	@ (8013b80 <mem_free+0x120>)
 8013a8a:	f00c ff37 	bl	80208fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
 8013a8e:	483b      	ldr	r0, [pc, #236]	@ (8013b7c <mem_free+0x11c>)
 8013a90:	f00c ffa4 	bl	80209dc <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013a94:	f00b fdd0 	bl	801f638 <sys_arch_protect>
 8013a98:	60f8      	str	r0, [r7, #12]
 8013a9a:	68f8      	ldr	r0, [r7, #12]
 8013a9c:	f00b fdda 	bl	801f654 <sys_arch_unprotect>
    return;
 8013aa0:	e065      	b.n	8013b6e <mem_free+0x10e>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	3b08      	subs	r3, #8
 8013aa6:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013aa8:	4b36      	ldr	r3, [pc, #216]	@ (8013b84 <mem_free+0x124>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	69fa      	ldr	r2, [r7, #28]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d306      	bcc.n	8013ac0 <mem_free+0x60>
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	f103 020c 	add.w	r2, r3, #12
 8013ab8:	4b33      	ldr	r3, [pc, #204]	@ (8013b88 <mem_free+0x128>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d910      	bls.n	8013ae2 <mem_free+0x82>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8013b78 <mem_free+0x118>)
 8013ac2:	f240 227f 	movw	r2, #639	@ 0x27f
 8013ac6:	4931      	ldr	r1, [pc, #196]	@ (8013b8c <mem_free+0x12c>)
 8013ac8:	482d      	ldr	r0, [pc, #180]	@ (8013b80 <mem_free+0x120>)
 8013aca:	f00c ff17 	bl	80208fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
 8013ace:	482f      	ldr	r0, [pc, #188]	@ (8013b8c <mem_free+0x12c>)
 8013ad0:	f00c ff84 	bl	80209dc <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013ad4:	f00b fdb0 	bl	801f638 <sys_arch_protect>
 8013ad8:	6138      	str	r0, [r7, #16]
 8013ada:	6938      	ldr	r0, [r7, #16]
 8013adc:	f00b fdba 	bl	801f654 <sys_arch_unprotect>
    return;
 8013ae0:	e045      	b.n	8013b6e <mem_free+0x10e>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013ae2:	482b      	ldr	r0, [pc, #172]	@ (8013b90 <mem_free+0x130>)
 8013ae4:	f00b fd6c 	bl	801f5c0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	791b      	ldrb	r3, [r3, #4]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d113      	bne.n	8013b18 <mem_free+0xb8>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013af0:	4b21      	ldr	r3, [pc, #132]	@ (8013b78 <mem_free+0x118>)
 8013af2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8013af6:	4927      	ldr	r1, [pc, #156]	@ (8013b94 <mem_free+0x134>)
 8013af8:	4821      	ldr	r0, [pc, #132]	@ (8013b80 <mem_free+0x120>)
 8013afa:	f00c feff 	bl	80208fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013afe:	4824      	ldr	r0, [pc, #144]	@ (8013b90 <mem_free+0x130>)
 8013b00:	f00b fd6d 	bl	801f5de <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
 8013b04:	4824      	ldr	r0, [pc, #144]	@ (8013b98 <mem_free+0x138>)
 8013b06:	f00c ff69 	bl	80209dc <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013b0a:	f00b fd95 	bl	801f638 <sys_arch_protect>
 8013b0e:	6178      	str	r0, [r7, #20]
 8013b10:	6978      	ldr	r0, [r7, #20]
 8013b12:	f00b fd9f 	bl	801f654 <sys_arch_unprotect>
    return;
 8013b16:	e02a      	b.n	8013b6e <mem_free+0x10e>
  }

  if (!mem_link_valid(mem)) {
 8013b18:	69f8      	ldr	r0, [r7, #28]
 8013b1a:	f7ff ff65 	bl	80139e8 <mem_link_valid>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d113      	bne.n	8013b4c <mem_free+0xec>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013b24:	4b14      	ldr	r3, [pc, #80]	@ (8013b78 <mem_free+0x118>)
 8013b26:	f240 2295 	movw	r2, #661	@ 0x295
 8013b2a:	491c      	ldr	r1, [pc, #112]	@ (8013b9c <mem_free+0x13c>)
 8013b2c:	4814      	ldr	r0, [pc, #80]	@ (8013b80 <mem_free+0x120>)
 8013b2e:	f00c fee5 	bl	80208fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013b32:	4817      	ldr	r0, [pc, #92]	@ (8013b90 <mem_free+0x130>)
 8013b34:	f00b fd53 	bl	801f5de <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
 8013b38:	4819      	ldr	r0, [pc, #100]	@ (8013ba0 <mem_free+0x140>)
 8013b3a:	f00c ff4f 	bl	80209dc <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013b3e:	f00b fd7b 	bl	801f638 <sys_arch_protect>
 8013b42:	61b8      	str	r0, [r7, #24]
 8013b44:	69b8      	ldr	r0, [r7, #24]
 8013b46:	f00b fd85 	bl	801f654 <sys_arch_unprotect>
    return;
 8013b4a:	e010      	b.n	8013b6e <mem_free+0x10e>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8013b52:	4b14      	ldr	r3, [pc, #80]	@ (8013ba4 <mem_free+0x144>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	69fa      	ldr	r2, [r7, #28]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d202      	bcs.n	8013b62 <mem_free+0x102>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013b5c:	4a11      	ldr	r2, [pc, #68]	@ (8013ba4 <mem_free+0x144>)
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013b62:	69f8      	ldr	r0, [r7, #28]
 8013b64:	f7ff fe50 	bl	8013808 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013b68:	4809      	ldr	r0, [pc, #36]	@ (8013b90 <mem_free+0x130>)
 8013b6a:	f00b fd38 	bl	801f5de <sys_mutex_unlock>
}
 8013b6e:	3720      	adds	r7, #32
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	080227c4 	.word	0x080227c4
 8013b78:	080226d4 	.word	0x080226d4
 8013b7c:	080227e4 	.word	0x080227e4
 8013b80:	0802271c 	.word	0x0802271c
 8013b84:	2001f670 	.word	0x2001f670
 8013b88:	2001f674 	.word	0x2001f674
 8013b8c:	08022808 	.word	0x08022808
 8013b90:	2001f678 	.word	0x2001f678
 8013b94:	08022824 	.word	0x08022824
 8013b98:	0802284c 	.word	0x0802284c
 8013b9c:	08022874 	.word	0x08022874
 8013ba0:	080228a8 	.word	0x080228a8
 8013ba4:	2001f67c 	.word	0x2001f67c

08013ba8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b088      	sub	sp, #32
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	460b      	mov	r3, r1
 8013bb2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013bb4:	887b      	ldrh	r3, [r7, #2]
 8013bb6:	3303      	adds	r3, #3
 8013bb8:	b29b      	uxth	r3, r3
 8013bba:	f023 0303 	bic.w	r3, r3, #3
 8013bbe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013bc0:	8bfb      	ldrh	r3, [r7, #30]
 8013bc2:	2b0b      	cmp	r3, #11
 8013bc4:	d801      	bhi.n	8013bca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013bc6:	230c      	movs	r3, #12
 8013bc8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013bca:	8bfb      	ldrh	r3, [r7, #30]
 8013bcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013bd0:	d803      	bhi.n	8013bda <mem_trim+0x32>
 8013bd2:	8bfa      	ldrh	r2, [r7, #30]
 8013bd4:	887b      	ldrh	r3, [r7, #2]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d201      	bcs.n	8013bde <mem_trim+0x36>
    return NULL;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	e0db      	b.n	8013d96 <mem_trim+0x1ee>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013bde:	4b70      	ldr	r3, [pc, #448]	@ (8013da0 <mem_trim+0x1f8>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	687a      	ldr	r2, [r7, #4]
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d304      	bcc.n	8013bf2 <mem_trim+0x4a>
 8013be8:	4b6e      	ldr	r3, [pc, #440]	@ (8013da4 <mem_trim+0x1fc>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d306      	bcc.n	8013c00 <mem_trim+0x58>
 8013bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8013da8 <mem_trim+0x200>)
 8013bf4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013bf8:	496c      	ldr	r1, [pc, #432]	@ (8013dac <mem_trim+0x204>)
 8013bfa:	486d      	ldr	r0, [pc, #436]	@ (8013db0 <mem_trim+0x208>)
 8013bfc:	f00c fe7e 	bl	80208fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013c00:	4b67      	ldr	r3, [pc, #412]	@ (8013da0 <mem_trim+0x1f8>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d304      	bcc.n	8013c14 <mem_trim+0x6c>
 8013c0a:	4b66      	ldr	r3, [pc, #408]	@ (8013da4 <mem_trim+0x1fc>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d30a      	bcc.n	8013c2a <mem_trim+0x82>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
 8013c14:	4867      	ldr	r0, [pc, #412]	@ (8013db4 <mem_trim+0x20c>)
 8013c16:	f00c fee1 	bl	80209dc <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013c1a:	f00b fd0d 	bl	801f638 <sys_arch_protect>
 8013c1e:	60b8      	str	r0, [r7, #8]
 8013c20:	68b8      	ldr	r0, [r7, #8]
 8013c22:	f00b fd17 	bl	801f654 <sys_arch_unprotect>
    return rmem;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	e0b5      	b.n	8013d96 <mem_trim+0x1ee>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	3b08      	subs	r3, #8
 8013c2e:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013c30:	69b8      	ldr	r0, [r7, #24]
 8013c32:	f7ff fdd7 	bl	80137e4 <mem_to_ptr>
 8013c36:	4603      	mov	r3, r0
 8013c38:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	881a      	ldrh	r2, [r3, #0]
 8013c3e:	8afb      	ldrh	r3, [r7, #22]
 8013c40:	1ad3      	subs	r3, r2, r3
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	3b08      	subs	r3, #8
 8013c46:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013c48:	8bfa      	ldrh	r2, [r7, #30]
 8013c4a:	8abb      	ldrh	r3, [r7, #20]
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d906      	bls.n	8013c5e <mem_trim+0xb6>
 8013c50:	4b55      	ldr	r3, [pc, #340]	@ (8013da8 <mem_trim+0x200>)
 8013c52:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8013c56:	4958      	ldr	r1, [pc, #352]	@ (8013db8 <mem_trim+0x210>)
 8013c58:	4855      	ldr	r0, [pc, #340]	@ (8013db0 <mem_trim+0x208>)
 8013c5a:	f00c fe4f 	bl	80208fc <iprintf>
  if (newsize > size) {
 8013c5e:	8bfa      	ldrh	r2, [r7, #30]
 8013c60:	8abb      	ldrh	r3, [r7, #20]
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d901      	bls.n	8013c6a <mem_trim+0xc2>
    /* not supported */
    return NULL;
 8013c66:	2300      	movs	r3, #0
 8013c68:	e095      	b.n	8013d96 <mem_trim+0x1ee>
  }
  if (newsize == size) {
 8013c6a:	8bfa      	ldrh	r2, [r7, #30]
 8013c6c:	8abb      	ldrh	r3, [r7, #20]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d101      	bne.n	8013c76 <mem_trim+0xce>
    /* No change in size, simply return */
    return rmem;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	e08f      	b.n	8013d96 <mem_trim+0x1ee>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013c76:	4851      	ldr	r0, [pc, #324]	@ (8013dbc <mem_trim+0x214>)
 8013c78:	f00b fca2 	bl	801f5c0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013c7c:	69bb      	ldr	r3, [r7, #24]
 8013c7e:	881b      	ldrh	r3, [r3, #0]
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7ff fd9d 	bl	80137c0 <ptr_to_mem>
 8013c86:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	791b      	ldrb	r3, [r3, #4]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d13f      	bne.n	8013d10 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013c90:	69bb      	ldr	r3, [r7, #24]
 8013c92:	881b      	ldrh	r3, [r3, #0]
 8013c94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013c98:	d106      	bne.n	8013ca8 <mem_trim+0x100>
 8013c9a:	4b43      	ldr	r3, [pc, #268]	@ (8013da8 <mem_trim+0x200>)
 8013c9c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8013ca0:	4947      	ldr	r1, [pc, #284]	@ (8013dc0 <mem_trim+0x218>)
 8013ca2:	4843      	ldr	r0, [pc, #268]	@ (8013db0 <mem_trim+0x208>)
 8013ca4:	f00c fe2a 	bl	80208fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	881b      	ldrh	r3, [r3, #0]
 8013cac:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013cae:	8afa      	ldrh	r2, [r7, #22]
 8013cb0:	8bfb      	ldrh	r3, [r7, #30]
 8013cb2:	4413      	add	r3, r2
 8013cb4:	b29b      	uxth	r3, r3
 8013cb6:	3308      	adds	r3, #8
 8013cb8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013cba:	4b42      	ldr	r3, [pc, #264]	@ (8013dc4 <mem_trim+0x21c>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	693a      	ldr	r2, [r7, #16]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d106      	bne.n	8013cd2 <mem_trim+0x12a>
      lfree = ptr_to_mem(ptr2);
 8013cc4:	89fb      	ldrh	r3, [r7, #14]
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7ff fd7a 	bl	80137c0 <ptr_to_mem>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	4a3d      	ldr	r2, [pc, #244]	@ (8013dc4 <mem_trim+0x21c>)
 8013cd0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013cd2:	89fb      	ldrh	r3, [r7, #14]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7ff fd73 	bl	80137c0 <ptr_to_mem>
 8013cda:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013cdc:	693b      	ldr	r3, [r7, #16]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	89ba      	ldrh	r2, [r7, #12]
 8013ce6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	8afa      	ldrh	r2, [r7, #22]
 8013cec:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013cee:	69bb      	ldr	r3, [r7, #24]
 8013cf0:	89fa      	ldrh	r2, [r7, #14]
 8013cf2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	881b      	ldrh	r3, [r3, #0]
 8013cf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013cfc:	d047      	beq.n	8013d8e <mem_trim+0x1e6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	881b      	ldrh	r3, [r3, #0]
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7ff fd5c 	bl	80137c0 <ptr_to_mem>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	89fb      	ldrh	r3, [r7, #14]
 8013d0c:	8053      	strh	r3, [r2, #2]
 8013d0e:	e03e      	b.n	8013d8e <mem_trim+0x1e6>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013d10:	8bfb      	ldrh	r3, [r7, #30]
 8013d12:	f103 0214 	add.w	r2, r3, #20
 8013d16:	8abb      	ldrh	r3, [r7, #20]
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d838      	bhi.n	8013d8e <mem_trim+0x1e6>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013d1c:	8afa      	ldrh	r2, [r7, #22]
 8013d1e:	8bfb      	ldrh	r3, [r7, #30]
 8013d20:	4413      	add	r3, r2
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	3308      	adds	r3, #8
 8013d26:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013d28:	69bb      	ldr	r3, [r7, #24]
 8013d2a:	881b      	ldrh	r3, [r3, #0]
 8013d2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013d30:	d106      	bne.n	8013d40 <mem_trim+0x198>
 8013d32:	4b1d      	ldr	r3, [pc, #116]	@ (8013da8 <mem_trim+0x200>)
 8013d34:	f240 3216 	movw	r2, #790	@ 0x316
 8013d38:	4921      	ldr	r1, [pc, #132]	@ (8013dc0 <mem_trim+0x218>)
 8013d3a:	481d      	ldr	r0, [pc, #116]	@ (8013db0 <mem_trim+0x208>)
 8013d3c:	f00c fdde 	bl	80208fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013d40:	89fb      	ldrh	r3, [r7, #14]
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7ff fd3c 	bl	80137c0 <ptr_to_mem>
 8013d48:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8013dc4 <mem_trim+0x21c>)
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	693a      	ldr	r2, [r7, #16]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d202      	bcs.n	8013d5a <mem_trim+0x1b2>
      lfree = mem2;
 8013d54:	4a1b      	ldr	r2, [pc, #108]	@ (8013dc4 <mem_trim+0x21c>)
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013d60:	69bb      	ldr	r3, [r7, #24]
 8013d62:	881a      	ldrh	r2, [r3, #0]
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	8afa      	ldrh	r2, [r7, #22]
 8013d6c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013d6e:	69bb      	ldr	r3, [r7, #24]
 8013d70:	89fa      	ldrh	r2, [r7, #14]
 8013d72:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	881b      	ldrh	r3, [r3, #0]
 8013d78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013d7c:	d007      	beq.n	8013d8e <mem_trim+0x1e6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	881b      	ldrh	r3, [r3, #0]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7ff fd1c 	bl	80137c0 <ptr_to_mem>
 8013d88:	4602      	mov	r2, r0
 8013d8a:	89fb      	ldrh	r3, [r7, #14]
 8013d8c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013d8e:	480b      	ldr	r0, [pc, #44]	@ (8013dbc <mem_trim+0x214>)
 8013d90:	f00b fc25 	bl	801f5de <sys_mutex_unlock>
  return rmem;
 8013d94:	687b      	ldr	r3, [r7, #4]
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3720      	adds	r7, #32
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	2001f670 	.word	0x2001f670
 8013da4:	2001f674 	.word	0x2001f674
 8013da8:	080226d4 	.word	0x080226d4
 8013dac:	080228dc 	.word	0x080228dc
 8013db0:	0802271c 	.word	0x0802271c
 8013db4:	080228f4 	.word	0x080228f4
 8013db8:	08022910 	.word	0x08022910
 8013dbc:	2001f678 	.word	0x2001f678
 8013dc0:	08022930 	.word	0x08022930
 8013dc4:	2001f67c 	.word	0x2001f67c

08013dc8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b088      	sub	sp, #32
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	4603      	mov	r3, r0
 8013dd0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013dd2:	88fb      	ldrh	r3, [r7, #6]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d101      	bne.n	8013ddc <mem_malloc+0x14>
    return NULL;
 8013dd8:	2300      	movs	r3, #0
 8013dda:	e0e8      	b.n	8013fae <mem_malloc+0x1e6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013ddc:	88fb      	ldrh	r3, [r7, #6]
 8013dde:	3303      	adds	r3, #3
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	f023 0303 	bic.w	r3, r3, #3
 8013de6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013de8:	8bbb      	ldrh	r3, [r7, #28]
 8013dea:	2b0b      	cmp	r3, #11
 8013dec:	d801      	bhi.n	8013df2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013dee:	230c      	movs	r3, #12
 8013df0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013df2:	8bbb      	ldrh	r3, [r7, #28]
 8013df4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013df8:	d803      	bhi.n	8013e02 <mem_malloc+0x3a>
 8013dfa:	8bba      	ldrh	r2, [r7, #28]
 8013dfc:	88fb      	ldrh	r3, [r7, #6]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d201      	bcs.n	8013e06 <mem_malloc+0x3e>
    return NULL;
 8013e02:	2300      	movs	r3, #0
 8013e04:	e0d3      	b.n	8013fae <mem_malloc+0x1e6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013e06:	486c      	ldr	r0, [pc, #432]	@ (8013fb8 <mem_malloc+0x1f0>)
 8013e08:	f00b fbda 	bl	801f5c0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013e0c:	4b6b      	ldr	r3, [pc, #428]	@ (8013fbc <mem_malloc+0x1f4>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4618      	mov	r0, r3
 8013e12:	f7ff fce7 	bl	80137e4 <mem_to_ptr>
 8013e16:	4603      	mov	r3, r0
 8013e18:	83fb      	strh	r3, [r7, #30]
 8013e1a:	e0b7      	b.n	8013f8c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013e1c:	8bfb      	ldrh	r3, [r7, #30]
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7ff fcce 	bl	80137c0 <ptr_to_mem>
 8013e24:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	791b      	ldrb	r3, [r3, #4]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	f040 80a7 	bne.w	8013f7e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	881b      	ldrh	r3, [r3, #0]
 8013e34:	461a      	mov	r2, r3
 8013e36:	8bfb      	ldrh	r3, [r7, #30]
 8013e38:	1ad3      	subs	r3, r2, r3
 8013e3a:	f1a3 0208 	sub.w	r2, r3, #8
 8013e3e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013e40:	429a      	cmp	r2, r3
 8013e42:	f0c0 809c 	bcc.w	8013f7e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	881b      	ldrh	r3, [r3, #0]
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	8bfb      	ldrh	r3, [r7, #30]
 8013e4e:	1ad3      	subs	r3, r2, r3
 8013e50:	f1a3 0208 	sub.w	r2, r3, #8
 8013e54:	8bbb      	ldrh	r3, [r7, #28]
 8013e56:	3314      	adds	r3, #20
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d333      	bcc.n	8013ec4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013e5c:	8bfa      	ldrh	r2, [r7, #30]
 8013e5e:	8bbb      	ldrh	r3, [r7, #28]
 8013e60:	4413      	add	r3, r2
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	3308      	adds	r3, #8
 8013e66:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013e68:	8a7b      	ldrh	r3, [r7, #18]
 8013e6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013e6e:	d106      	bne.n	8013e7e <mem_malloc+0xb6>
 8013e70:	4b53      	ldr	r3, [pc, #332]	@ (8013fc0 <mem_malloc+0x1f8>)
 8013e72:	f240 3287 	movw	r2, #903	@ 0x387
 8013e76:	4953      	ldr	r1, [pc, #332]	@ (8013fc4 <mem_malloc+0x1fc>)
 8013e78:	4853      	ldr	r0, [pc, #332]	@ (8013fc8 <mem_malloc+0x200>)
 8013e7a:	f00c fd3f 	bl	80208fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013e7e:	8a7b      	ldrh	r3, [r7, #18]
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7ff fc9d 	bl	80137c0 <ptr_to_mem>
 8013e86:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	881a      	ldrh	r2, [r3, #0]
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	8bfa      	ldrh	r2, [r7, #30]
 8013e9a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	8a7a      	ldrh	r2, [r7, #18]
 8013ea0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	2201      	movs	r2, #1
 8013ea6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	881b      	ldrh	r3, [r3, #0]
 8013eac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013eb0:	d00b      	beq.n	8013eca <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	881b      	ldrh	r3, [r3, #0]
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7ff fc82 	bl	80137c0 <ptr_to_mem>
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	8a7b      	ldrh	r3, [r7, #18]
 8013ec0:	8053      	strh	r3, [r2, #2]
 8013ec2:	e002      	b.n	8013eca <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013eca:	4b3c      	ldr	r3, [pc, #240]	@ (8013fbc <mem_malloc+0x1f4>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	697a      	ldr	r2, [r7, #20]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d127      	bne.n	8013f24 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013ed4:	4b39      	ldr	r3, [pc, #228]	@ (8013fbc <mem_malloc+0x1f4>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013eda:	e005      	b.n	8013ee8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013edc:	69bb      	ldr	r3, [r7, #24]
 8013ede:	881b      	ldrh	r3, [r3, #0]
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7ff fc6d 	bl	80137c0 <ptr_to_mem>
 8013ee6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013ee8:	69bb      	ldr	r3, [r7, #24]
 8013eea:	791b      	ldrb	r3, [r3, #4]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d004      	beq.n	8013efa <mem_malloc+0x132>
 8013ef0:	4b36      	ldr	r3, [pc, #216]	@ (8013fcc <mem_malloc+0x204>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	69ba      	ldr	r2, [r7, #24]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d1f0      	bne.n	8013edc <mem_malloc+0x114>
          }
          lfree = cur;
 8013efa:	4a30      	ldr	r2, [pc, #192]	@ (8013fbc <mem_malloc+0x1f4>)
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013f00:	4b2e      	ldr	r3, [pc, #184]	@ (8013fbc <mem_malloc+0x1f4>)
 8013f02:	681a      	ldr	r2, [r3, #0]
 8013f04:	4b31      	ldr	r3, [pc, #196]	@ (8013fcc <mem_malloc+0x204>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	d00b      	beq.n	8013f24 <mem_malloc+0x15c>
 8013f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8013fbc <mem_malloc+0x1f4>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	791b      	ldrb	r3, [r3, #4]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d006      	beq.n	8013f24 <mem_malloc+0x15c>
 8013f16:	4b2a      	ldr	r3, [pc, #168]	@ (8013fc0 <mem_malloc+0x1f8>)
 8013f18:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013f1c:	492c      	ldr	r1, [pc, #176]	@ (8013fd0 <mem_malloc+0x208>)
 8013f1e:	482a      	ldr	r0, [pc, #168]	@ (8013fc8 <mem_malloc+0x200>)
 8013f20:	f00c fcec 	bl	80208fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013f24:	4824      	ldr	r0, [pc, #144]	@ (8013fb8 <mem_malloc+0x1f0>)
 8013f26:	f00b fb5a 	bl	801f5de <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013f2a:	8bba      	ldrh	r2, [r7, #28]
 8013f2c:	697b      	ldr	r3, [r7, #20]
 8013f2e:	4413      	add	r3, r2
 8013f30:	3308      	adds	r3, #8
 8013f32:	4a26      	ldr	r2, [pc, #152]	@ (8013fcc <mem_malloc+0x204>)
 8013f34:	6812      	ldr	r2, [r2, #0]
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d906      	bls.n	8013f48 <mem_malloc+0x180>
 8013f3a:	4b21      	ldr	r3, [pc, #132]	@ (8013fc0 <mem_malloc+0x1f8>)
 8013f3c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8013f40:	4924      	ldr	r1, [pc, #144]	@ (8013fd4 <mem_malloc+0x20c>)
 8013f42:	4821      	ldr	r0, [pc, #132]	@ (8013fc8 <mem_malloc+0x200>)
 8013f44:	f00c fcda 	bl	80208fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	f003 0303 	and.w	r3, r3, #3
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d006      	beq.n	8013f60 <mem_malloc+0x198>
 8013f52:	4b1b      	ldr	r3, [pc, #108]	@ (8013fc0 <mem_malloc+0x1f8>)
 8013f54:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013f58:	491f      	ldr	r1, [pc, #124]	@ (8013fd8 <mem_malloc+0x210>)
 8013f5a:	481b      	ldr	r0, [pc, #108]	@ (8013fc8 <mem_malloc+0x200>)
 8013f5c:	f00c fcce 	bl	80208fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	f003 0303 	and.w	r3, r3, #3
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d006      	beq.n	8013f78 <mem_malloc+0x1b0>
 8013f6a:	4b15      	ldr	r3, [pc, #84]	@ (8013fc0 <mem_malloc+0x1f8>)
 8013f6c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013f70:	491a      	ldr	r1, [pc, #104]	@ (8013fdc <mem_malloc+0x214>)
 8013f72:	4815      	ldr	r0, [pc, #84]	@ (8013fc8 <mem_malloc+0x200>)
 8013f74:	f00c fcc2 	bl	80208fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013f78:	697b      	ldr	r3, [r7, #20]
 8013f7a:	3308      	adds	r3, #8
 8013f7c:	e017      	b.n	8013fae <mem_malloc+0x1e6>
         ptr = ptr_to_mem(ptr)->next) {
 8013f7e:	8bfb      	ldrh	r3, [r7, #30]
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7ff fc1d 	bl	80137c0 <ptr_to_mem>
 8013f86:	4603      	mov	r3, r0
 8013f88:	881b      	ldrh	r3, [r3, #0]
 8013f8a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013f8c:	8bfa      	ldrh	r2, [r7, #30]
 8013f8e:	8bbb      	ldrh	r3, [r7, #28]
 8013f90:	f5c3 5340 	rsb	r3, r3, #12288	@ 0x3000
 8013f94:	429a      	cmp	r2, r3
 8013f96:	f4ff af41 	bcc.w	8013e1c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013f9a:	4807      	ldr	r0, [pc, #28]	@ (8013fb8 <mem_malloc+0x1f0>)
 8013f9c:	f00b fb1f 	bl	801f5de <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
 8013fa0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8013fa4:	4619      	mov	r1, r3
 8013fa6:	480e      	ldr	r0, [pc, #56]	@ (8013fe0 <mem_malloc+0x218>)
 8013fa8:	f00c fca8 	bl	80208fc <iprintf>
  return NULL;
 8013fac:	2300      	movs	r3, #0
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3720      	adds	r7, #32
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	2001f678 	.word	0x2001f678
 8013fbc:	2001f67c 	.word	0x2001f67c
 8013fc0:	080226d4 	.word	0x080226d4
 8013fc4:	08022930 	.word	0x08022930
 8013fc8:	0802271c 	.word	0x0802271c
 8013fcc:	2001f674 	.word	0x2001f674
 8013fd0:	08022944 	.word	0x08022944
 8013fd4:	08022960 	.word	0x08022960
 8013fd8:	08022990 	.word	0x08022990
 8013fdc:	080229c0 	.word	0x080229c0
 8013fe0:	080229e4 	.word	0x080229e4

08013fe4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013fe4:	b480      	push	{r7}
 8013fe6:	b085      	sub	sp, #20
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	68db      	ldr	r3, [r3, #12]
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	689b      	ldr	r3, [r3, #8]
 8013ff8:	3303      	adds	r3, #3
 8013ffa:	f023 0303 	bic.w	r3, r3, #3
 8013ffe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014000:	2300      	movs	r3, #0
 8014002:	60fb      	str	r3, [r7, #12]
 8014004:	e011      	b.n	801402a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	68ba      	ldr	r2, [r7, #8]
 8014016:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	889b      	ldrh	r3, [r3, #4]
 801401c:	461a      	mov	r2, r3
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	4413      	add	r3, r2
 8014022:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	3301      	adds	r3, #1
 8014028:	60fb      	str	r3, [r7, #12]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	88db      	ldrh	r3, [r3, #6]
 801402e:	461a      	mov	r2, r3
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	4293      	cmp	r3, r2
 8014034:	dbe7      	blt.n	8014006 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014036:	bf00      	nop
 8014038:	bf00      	nop
 801403a:	3714      	adds	r7, #20
 801403c:	46bd      	mov	sp, r7
 801403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014042:	4770      	bx	lr

08014044 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801404a:	2300      	movs	r3, #0
 801404c:	80fb      	strh	r3, [r7, #6]
 801404e:	e009      	b.n	8014064 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8014050:	88fb      	ldrh	r3, [r7, #6]
 8014052:	4a08      	ldr	r2, [pc, #32]	@ (8014074 <memp_init+0x30>)
 8014054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014058:	4618      	mov	r0, r3
 801405a:	f7ff ffc3 	bl	8013fe4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801405e:	88fb      	ldrh	r3, [r7, #6]
 8014060:	3301      	adds	r3, #1
 8014062:	80fb      	strh	r3, [r7, #6]
 8014064:	88fb      	ldrh	r3, [r7, #6]
 8014066:	2b0c      	cmp	r3, #12
 8014068:	d9f2      	bls.n	8014050 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801406a:	bf00      	nop
 801406c:	bf00      	nop
 801406e:	3708      	adds	r7, #8
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}
 8014074:	080263ac 	.word	0x080263ac

08014078 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8014080:	f00b fada 	bl	801f638 <sys_arch_protect>
 8014084:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	68db      	ldr	r3, [r3, #12]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801408e:	68bb      	ldr	r3, [r7, #8]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d015      	beq.n	80140c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	68db      	ldr	r3, [r3, #12]
 8014098:	68ba      	ldr	r2, [r7, #8]
 801409a:	6812      	ldr	r2, [r2, #0]
 801409c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	f003 0303 	and.w	r3, r3, #3
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d006      	beq.n	80140b6 <do_memp_malloc_pool+0x3e>
 80140a8:	4b0c      	ldr	r3, [pc, #48]	@ (80140dc <do_memp_malloc_pool+0x64>)
 80140aa:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80140ae:	490c      	ldr	r1, [pc, #48]	@ (80140e0 <do_memp_malloc_pool+0x68>)
 80140b0:	480c      	ldr	r0, [pc, #48]	@ (80140e4 <do_memp_malloc_pool+0x6c>)
 80140b2:	f00c fc23 	bl	80208fc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80140b6:	68f8      	ldr	r0, [r7, #12]
 80140b8:	f00b facc 	bl	801f654 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	e009      	b.n	80140d4 <do_memp_malloc_pool+0x5c>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80140c0:	68f8      	ldr	r0, [r7, #12]
 80140c2:	f00b fac7 	bl	801f654 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	4619      	mov	r1, r3
 80140cc:	4806      	ldr	r0, [pc, #24]	@ (80140e8 <do_memp_malloc_pool+0x70>)
 80140ce:	f00c fc15 	bl	80208fc <iprintf>
  }

  return NULL;
 80140d2:	2300      	movs	r3, #0
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3710      	adds	r7, #16
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	08022ad4 	.word	0x08022ad4
 80140e0:	08022b04 	.word	0x08022b04
 80140e4:	08022b28 	.word	0x08022b28
 80140e8:	08022b50 	.word	0x08022b50

080140ec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d106      	bne.n	8014108 <memp_malloc_pool+0x1c>
 80140fa:	4b0a      	ldr	r3, [pc, #40]	@ (8014124 <memp_malloc_pool+0x38>)
 80140fc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8014100:	4909      	ldr	r1, [pc, #36]	@ (8014128 <memp_malloc_pool+0x3c>)
 8014102:	480a      	ldr	r0, [pc, #40]	@ (801412c <memp_malloc_pool+0x40>)
 8014104:	f00c fbfa 	bl	80208fc <iprintf>
  if (desc == NULL) {
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d101      	bne.n	8014112 <memp_malloc_pool+0x26>
    return NULL;
 801410e:	2300      	movs	r3, #0
 8014110:	e003      	b.n	801411a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f7ff ffb0 	bl	8014078 <do_memp_malloc_pool>
 8014118:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801411a:	4618      	mov	r0, r3
 801411c:	3708      	adds	r7, #8
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}
 8014122:	bf00      	nop
 8014124:	08022ad4 	.word	0x08022ad4
 8014128:	08022b78 	.word	0x08022b78
 801412c:	08022b28 	.word	0x08022b28

08014130 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b084      	sub	sp, #16
 8014134:	af00      	add	r7, sp, #0
 8014136:	4603      	mov	r3, r0
 8014138:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801413a:	79fb      	ldrb	r3, [r7, #7]
 801413c:	2b0c      	cmp	r3, #12
 801413e:	d908      	bls.n	8014152 <memp_malloc+0x22>
 8014140:	4b0a      	ldr	r3, [pc, #40]	@ (801416c <memp_malloc+0x3c>)
 8014142:	f240 1257 	movw	r2, #343	@ 0x157
 8014146:	490a      	ldr	r1, [pc, #40]	@ (8014170 <memp_malloc+0x40>)
 8014148:	480a      	ldr	r0, [pc, #40]	@ (8014174 <memp_malloc+0x44>)
 801414a:	f00c fbd7 	bl	80208fc <iprintf>
 801414e:	2300      	movs	r3, #0
 8014150:	e008      	b.n	8014164 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014152:	79fb      	ldrb	r3, [r7, #7]
 8014154:	4a08      	ldr	r2, [pc, #32]	@ (8014178 <memp_malloc+0x48>)
 8014156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801415a:	4618      	mov	r0, r3
 801415c:	f7ff ff8c 	bl	8014078 <do_memp_malloc_pool>
 8014160:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014162:	68fb      	ldr	r3, [r7, #12]
}
 8014164:	4618      	mov	r0, r3
 8014166:	3710      	adds	r7, #16
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}
 801416c:	08022ad4 	.word	0x08022ad4
 8014170:	08022b8c 	.word	0x08022b8c
 8014174:	08022b28 	.word	0x08022b28
 8014178:	080263ac 	.word	0x080263ac

0801417c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	f003 0303 	and.w	r3, r3, #3
 801418c:	2b00      	cmp	r3, #0
 801418e:	d006      	beq.n	801419e <do_memp_free_pool+0x22>
 8014190:	4b0d      	ldr	r3, [pc, #52]	@ (80141c8 <do_memp_free_pool+0x4c>)
 8014192:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8014196:	490d      	ldr	r1, [pc, #52]	@ (80141cc <do_memp_free_pool+0x50>)
 8014198:	480d      	ldr	r0, [pc, #52]	@ (80141d0 <do_memp_free_pool+0x54>)
 801419a:	f00c fbaf 	bl	80208fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80141a2:	f00b fa49 	bl	801f638 <sys_arch_protect>
 80141a6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	68db      	ldr	r3, [r3, #12]
 80141ac:	681a      	ldr	r2, [r3, #0]
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	68db      	ldr	r3, [r3, #12]
 80141b6:	68fa      	ldr	r2, [r7, #12]
 80141b8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80141ba:	68b8      	ldr	r0, [r7, #8]
 80141bc:	f00b fa4a 	bl	801f654 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80141c0:	bf00      	nop
 80141c2:	3710      	adds	r7, #16
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}
 80141c8:	08022ad4 	.word	0x08022ad4
 80141cc:	08022bac 	.word	0x08022bac
 80141d0:	08022b28 	.word	0x08022b28

080141d4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b082      	sub	sp, #8
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
 80141dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d106      	bne.n	80141f2 <memp_free_pool+0x1e>
 80141e4:	4b0a      	ldr	r3, [pc, #40]	@ (8014210 <memp_free_pool+0x3c>)
 80141e6:	f240 1295 	movw	r2, #405	@ 0x195
 80141ea:	490a      	ldr	r1, [pc, #40]	@ (8014214 <memp_free_pool+0x40>)
 80141ec:	480a      	ldr	r0, [pc, #40]	@ (8014218 <memp_free_pool+0x44>)
 80141ee:	f00c fb85 	bl	80208fc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d007      	beq.n	8014208 <memp_free_pool+0x34>
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d004      	beq.n	8014208 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80141fe:	6839      	ldr	r1, [r7, #0]
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f7ff ffbb 	bl	801417c <do_memp_free_pool>
 8014206:	e000      	b.n	801420a <memp_free_pool+0x36>
    return;
 8014208:	bf00      	nop
}
 801420a:	3708      	adds	r7, #8
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}
 8014210:	08022ad4 	.word	0x08022ad4
 8014214:	08022b78 	.word	0x08022b78
 8014218:	08022b28 	.word	0x08022b28

0801421c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	4603      	mov	r3, r0
 8014224:	6039      	str	r1, [r7, #0]
 8014226:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014228:	79fb      	ldrb	r3, [r7, #7]
 801422a:	2b0c      	cmp	r3, #12
 801422c:	d907      	bls.n	801423e <memp_free+0x22>
 801422e:	4b0c      	ldr	r3, [pc, #48]	@ (8014260 <memp_free+0x44>)
 8014230:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8014234:	490b      	ldr	r1, [pc, #44]	@ (8014264 <memp_free+0x48>)
 8014236:	480c      	ldr	r0, [pc, #48]	@ (8014268 <memp_free+0x4c>)
 8014238:	f00c fb60 	bl	80208fc <iprintf>
 801423c:	e00c      	b.n	8014258 <memp_free+0x3c>

  if (mem == NULL) {
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d008      	beq.n	8014256 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014244:	79fb      	ldrb	r3, [r7, #7]
 8014246:	4a09      	ldr	r2, [pc, #36]	@ (801426c <memp_free+0x50>)
 8014248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801424c:	6839      	ldr	r1, [r7, #0]
 801424e:	4618      	mov	r0, r3
 8014250:	f7ff ff94 	bl	801417c <do_memp_free_pool>
 8014254:	e000      	b.n	8014258 <memp_free+0x3c>
    return;
 8014256:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014258:	3708      	adds	r7, #8
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	08022ad4 	.word	0x08022ad4
 8014264:	08022bcc 	.word	0x08022bcc
 8014268:	08022b28 	.word	0x08022b28
 801426c:	080263ac 	.word	0x080263ac

08014270 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014270:	b480      	push	{r7}
 8014272:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014274:	bf00      	nop
 8014276:	46bd      	mov	sp, r7
 8014278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427c:	4770      	bx	lr
	...

08014280 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b088      	sub	sp, #32
 8014284:	af02      	add	r7, sp, #8
 8014286:	60f8      	str	r0, [r7, #12]
 8014288:	60b9      	str	r1, [r7, #8]
 801428a:	607a      	str	r2, [r7, #4]
 801428c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d108      	bne.n	80142a6 <netif_add+0x26>
 8014294:	4b96      	ldr	r3, [pc, #600]	@ (80144f0 <netif_add+0x270>)
 8014296:	f240 1227 	movw	r2, #295	@ 0x127
 801429a:	4996      	ldr	r1, [pc, #600]	@ (80144f4 <netif_add+0x274>)
 801429c:	4896      	ldr	r0, [pc, #600]	@ (80144f8 <netif_add+0x278>)
 801429e:	f00c fb2d 	bl	80208fc <iprintf>
 80142a2:	2300      	movs	r3, #0
 80142a4:	e14c      	b.n	8014540 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80142a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d108      	bne.n	80142be <netif_add+0x3e>
 80142ac:	4b90      	ldr	r3, [pc, #576]	@ (80144f0 <netif_add+0x270>)
 80142ae:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80142b2:	4992      	ldr	r1, [pc, #584]	@ (80144fc <netif_add+0x27c>)
 80142b4:	4890      	ldr	r0, [pc, #576]	@ (80144f8 <netif_add+0x278>)
 80142b6:	f00c fb21 	bl	80208fc <iprintf>
 80142ba:	2300      	movs	r3, #0
 80142bc:	e140      	b.n	8014540 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d101      	bne.n	80142c8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80142c4:	4b8e      	ldr	r3, [pc, #568]	@ (8014500 <netif_add+0x280>)
 80142c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d101      	bne.n	80142d2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80142ce:	4b8c      	ldr	r3, [pc, #560]	@ (8014500 <netif_add+0x280>)
 80142d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d101      	bne.n	80142dc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80142d8:	4b89      	ldr	r3, [pc, #548]	@ (8014500 <netif_add+0x280>)
 80142da:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	2200      	movs	r2, #0
 80142e0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	2200      	movs	r2, #0
 80142e6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	2200      	movs	r2, #0
 80142ec:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	4a84      	ldr	r2, [pc, #528]	@ (8014504 <netif_add+0x284>)
 80142f2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	2200      	movs	r2, #0
 80142f8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	2200      	movs	r2, #0
 80142fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	2200      	movs	r2, #0
 8014306:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	6a3a      	ldr	r2, [r7, #32]
 801430c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801430e:	4b7e      	ldr	r3, [pc, #504]	@ (8014508 <netif_add+0x288>)
 8014310:	781a      	ldrb	r2, [r3, #0]
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801431c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	68b9      	ldr	r1, [r7, #8]
 8014324:	68f8      	ldr	r0, [r7, #12]
 8014326:	f000 f9f5 	bl	8014714 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801432c:	68f8      	ldr	r0, [r7, #12]
 801432e:	4798      	blx	r3
 8014330:	4603      	mov	r3, r0
 8014332:	2b00      	cmp	r3, #0
 8014334:	d001      	beq.n	801433a <netif_add+0xba>
    return NULL;
 8014336:	2300      	movs	r3, #0
 8014338:	e102      	b.n	8014540 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014340:	2bff      	cmp	r3, #255	@ 0xff
 8014342:	d103      	bne.n	801434c <netif_add+0xcc>
        netif->num = 0;
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	2200      	movs	r2, #0
 8014348:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 801434c:	2300      	movs	r3, #0
 801434e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014350:	4b6e      	ldr	r3, [pc, #440]	@ (801450c <netif_add+0x28c>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	617b      	str	r3, [r7, #20]
 8014356:	e02b      	b.n	80143b0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014358:	697a      	ldr	r2, [r7, #20]
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	429a      	cmp	r2, r3
 801435e:	d106      	bne.n	801436e <netif_add+0xee>
 8014360:	4b63      	ldr	r3, [pc, #396]	@ (80144f0 <netif_add+0x270>)
 8014362:	f240 128b 	movw	r2, #395	@ 0x18b
 8014366:	496a      	ldr	r1, [pc, #424]	@ (8014510 <netif_add+0x290>)
 8014368:	4863      	ldr	r0, [pc, #396]	@ (80144f8 <netif_add+0x278>)
 801436a:	f00c fac7 	bl	80208fc <iprintf>
        num_netifs++;
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	3301      	adds	r3, #1
 8014372:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	2bff      	cmp	r3, #255	@ 0xff
 8014378:	dd06      	ble.n	8014388 <netif_add+0x108>
 801437a:	4b5d      	ldr	r3, [pc, #372]	@ (80144f0 <netif_add+0x270>)
 801437c:	f240 128d 	movw	r2, #397	@ 0x18d
 8014380:	4964      	ldr	r1, [pc, #400]	@ (8014514 <netif_add+0x294>)
 8014382:	485d      	ldr	r0, [pc, #372]	@ (80144f8 <netif_add+0x278>)
 8014384:	f00c faba 	bl	80208fc <iprintf>
        if (netif2->num == netif->num) {
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014394:	429a      	cmp	r2, r3
 8014396:	d108      	bne.n	80143aa <netif_add+0x12a>
          netif->num++;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801439e:	3301      	adds	r3, #1
 80143a0:	b2da      	uxtb	r2, r3
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80143a8:	e005      	b.n	80143b6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	617b      	str	r3, [r7, #20]
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d1d0      	bne.n	8014358 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d1be      	bne.n	801433a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80143c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80143c4:	d103      	bne.n	80143ce <netif_add+0x14e>
    netif_num = 0;
 80143c6:	4b50      	ldr	r3, [pc, #320]	@ (8014508 <netif_add+0x288>)
 80143c8:	2200      	movs	r2, #0
 80143ca:	701a      	strb	r2, [r3, #0]
 80143cc:	e006      	b.n	80143dc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80143d4:	3301      	adds	r3, #1
 80143d6:	b2da      	uxtb	r2, r3
 80143d8:	4b4b      	ldr	r3, [pc, #300]	@ (8014508 <netif_add+0x288>)
 80143da:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80143dc:	4b4b      	ldr	r3, [pc, #300]	@ (801450c <netif_add+0x28c>)
 80143de:	681a      	ldr	r2, [r3, #0]
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80143e4:	4a49      	ldr	r2, [pc, #292]	@ (801450c <netif_add+0x28c>)
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80143f0:	4619      	mov	r1, r3
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80143f8:	461a      	mov	r2, r3
 80143fa:	4847      	ldr	r0, [pc, #284]	@ (8014518 <netif_add+0x298>)
 80143fc:	f00c fa7e 	bl	80208fc <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 8014400:	4846      	ldr	r0, [pc, #280]	@ (801451c <netif_add+0x29c>)
 8014402:	f00c fa7b 	bl	80208fc <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d003      	beq.n	8014414 <netif_add+0x194>
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	4619      	mov	r1, r3
 8014412:	e000      	b.n	8014416 <netif_add+0x196>
 8014414:	2100      	movs	r1, #0
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d004      	beq.n	8014426 <netif_add+0x1a6>
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	3301      	adds	r3, #1
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	461a      	mov	r2, r3
 8014424:	e000      	b.n	8014428 <netif_add+0x1a8>
 8014426:	2200      	movs	r2, #0
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d004      	beq.n	8014438 <netif_add+0x1b8>
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	3302      	adds	r3, #2
 8014432:	781b      	ldrb	r3, [r3, #0]
 8014434:	4618      	mov	r0, r3
 8014436:	e000      	b.n	801443a <netif_add+0x1ba>
 8014438:	2000      	movs	r0, #0
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d003      	beq.n	8014448 <netif_add+0x1c8>
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	3303      	adds	r3, #3
 8014444:	781b      	ldrb	r3, [r3, #0]
 8014446:	e000      	b.n	801444a <netif_add+0x1ca>
 8014448:	2300      	movs	r3, #0
 801444a:	9300      	str	r3, [sp, #0]
 801444c:	4603      	mov	r3, r0
 801444e:	4834      	ldr	r0, [pc, #208]	@ (8014520 <netif_add+0x2a0>)
 8014450:	f00c fa54 	bl	80208fc <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8014454:	4833      	ldr	r0, [pc, #204]	@ (8014524 <netif_add+0x2a4>)
 8014456:	f00c fa51 	bl	80208fc <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d003      	beq.n	8014468 <netif_add+0x1e8>
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	781b      	ldrb	r3, [r3, #0]
 8014464:	4619      	mov	r1, r3
 8014466:	e000      	b.n	801446a <netif_add+0x1ea>
 8014468:	2100      	movs	r1, #0
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d004      	beq.n	801447a <netif_add+0x1fa>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	3301      	adds	r3, #1
 8014474:	781b      	ldrb	r3, [r3, #0]
 8014476:	461a      	mov	r2, r3
 8014478:	e000      	b.n	801447c <netif_add+0x1fc>
 801447a:	2200      	movs	r2, #0
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d004      	beq.n	801448c <netif_add+0x20c>
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	3302      	adds	r3, #2
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	4618      	mov	r0, r3
 801448a:	e000      	b.n	801448e <netif_add+0x20e>
 801448c:	2000      	movs	r0, #0
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d003      	beq.n	801449c <netif_add+0x21c>
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	3303      	adds	r3, #3
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	e000      	b.n	801449e <netif_add+0x21e>
 801449c:	2300      	movs	r3, #0
 801449e:	9300      	str	r3, [sp, #0]
 80144a0:	4603      	mov	r3, r0
 80144a2:	481f      	ldr	r0, [pc, #124]	@ (8014520 <netif_add+0x2a0>)
 80144a4:	f00c fa2a 	bl	80208fc <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 80144a8:	481f      	ldr	r0, [pc, #124]	@ (8014528 <netif_add+0x2a8>)
 80144aa:	f00c fa27 	bl	80208fc <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d003      	beq.n	80144bc <netif_add+0x23c>
 80144b4:	683b      	ldr	r3, [r7, #0]
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	4619      	mov	r1, r3
 80144ba:	e000      	b.n	80144be <netif_add+0x23e>
 80144bc:	2100      	movs	r1, #0
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d004      	beq.n	80144ce <netif_add+0x24e>
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	3301      	adds	r3, #1
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	461a      	mov	r2, r3
 80144cc:	e000      	b.n	80144d0 <netif_add+0x250>
 80144ce:	2200      	movs	r2, #0
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d004      	beq.n	80144e0 <netif_add+0x260>
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	3302      	adds	r3, #2
 80144da:	781b      	ldrb	r3, [r3, #0]
 80144dc:	4618      	mov	r0, r3
 80144de:	e000      	b.n	80144e2 <netif_add+0x262>
 80144e0:	2000      	movs	r0, #0
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d021      	beq.n	801452c <netif_add+0x2ac>
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	3303      	adds	r3, #3
 80144ec:	781b      	ldrb	r3, [r3, #0]
 80144ee:	e01e      	b.n	801452e <netif_add+0x2ae>
 80144f0:	08022be8 	.word	0x08022be8
 80144f4:	08022c7c 	.word	0x08022c7c
 80144f8:	08022c38 	.word	0x08022c38
 80144fc:	08022c98 	.word	0x08022c98
 8014500:	08026420 	.word	0x08026420
 8014504:	08014a17 	.word	0x08014a17
 8014508:	20022aa4 	.word	0x20022aa4
 801450c:	20022a9c 	.word	0x20022a9c
 8014510:	08022cbc 	.word	0x08022cbc
 8014514:	08022cd0 	.word	0x08022cd0
 8014518:	08022d00 	.word	0x08022d00
 801451c:	08022d20 	.word	0x08022d20
 8014520:	08022d28 	.word	0x08022d28
 8014524:	08022d38 	.word	0x08022d38
 8014528:	08022d44 	.word	0x08022d44
 801452c:	2300      	movs	r3, #0
 801452e:	9300      	str	r3, [sp, #0]
 8014530:	4603      	mov	r3, r0
 8014532:	4805      	ldr	r0, [pc, #20]	@ (8014548 <netif_add+0x2c8>)
 8014534:	f00c f9e2 	bl	80208fc <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8014538:	200a      	movs	r0, #10
 801453a:	f00c f9f1 	bl	8020920 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801453e:	68fb      	ldr	r3, [r7, #12]
}
 8014540:	4618      	mov	r0, r3
 8014542:	3718      	adds	r7, #24
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}
 8014548:	08022d28 	.word	0x08022d28

0801454c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8014556:	6839      	ldr	r1, [r7, #0]
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	f002 ff8b 	bl	8017474 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801455e:	6839      	ldr	r1, [r7, #0]
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f008 fad7 	bl	801cb14 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8014566:	bf00      	nop
 8014568:	3708      	adds	r7, #8
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
	...

08014570 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b086      	sub	sp, #24
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d106      	bne.n	8014590 <netif_do_set_ipaddr+0x20>
 8014582:	4b1e      	ldr	r3, [pc, #120]	@ (80145fc <netif_do_set_ipaddr+0x8c>)
 8014584:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8014588:	491d      	ldr	r1, [pc, #116]	@ (8014600 <netif_do_set_ipaddr+0x90>)
 801458a:	481e      	ldr	r0, [pc, #120]	@ (8014604 <netif_do_set_ipaddr+0x94>)
 801458c:	f00c f9b6 	bl	80208fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d106      	bne.n	80145a4 <netif_do_set_ipaddr+0x34>
 8014596:	4b19      	ldr	r3, [pc, #100]	@ (80145fc <netif_do_set_ipaddr+0x8c>)
 8014598:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 801459c:	4918      	ldr	r1, [pc, #96]	@ (8014600 <netif_do_set_ipaddr+0x90>)
 801459e:	4819      	ldr	r0, [pc, #100]	@ (8014604 <netif_do_set_ipaddr+0x94>)
 80145a0:	f00c f9ac 	bl	80208fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	681a      	ldr	r2, [r3, #0]
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	3304      	adds	r3, #4
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	429a      	cmp	r2, r3
 80145b0:	d01f      	beq.n	80145f2 <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80145b2:	68bb      	ldr	r3, [r7, #8]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	3304      	adds	r3, #4
 80145bc:	681a      	ldr	r2, [r3, #0]
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 80145c2:	4811      	ldr	r0, [pc, #68]	@ (8014608 <netif_do_set_ipaddr+0x98>)
 80145c4:	f00c fa0a 	bl	80209dc <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80145c8:	f107 0314 	add.w	r3, r7, #20
 80145cc:	4619      	mov	r1, r3
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f7ff ffbc 	bl	801454c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80145d4:	68bb      	ldr	r3, [r7, #8]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d002      	beq.n	80145e0 <netif_do_set_ipaddr+0x70>
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	e000      	b.n	80145e2 <netif_do_set_ipaddr+0x72>
 80145e0:	2300      	movs	r3, #0
 80145e2:	68fa      	ldr	r2, [r7, #12]
 80145e4:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80145e6:	2101      	movs	r1, #1
 80145e8:	68f8      	ldr	r0, [r7, #12]
 80145ea:	f000 f92d 	bl	8014848 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80145ee:	2301      	movs	r3, #1
 80145f0:	e000      	b.n	80145f4 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 80145f2:	2300      	movs	r3, #0
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3718      	adds	r7, #24
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	08022be8 	.word	0x08022be8
 8014600:	08022d4c 	.word	0x08022d4c
 8014604:	08022c38 	.word	0x08022c38
 8014608:	08022d5c 	.word	0x08022d5c

0801460c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801460c:	b5b0      	push	{r4, r5, r7, lr}
 801460e:	b088      	sub	sp, #32
 8014610:	af04      	add	r7, sp, #16
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	60b9      	str	r1, [r7, #8]
 8014616:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	681a      	ldr	r2, [r3, #0]
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	3308      	adds	r3, #8
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	429a      	cmp	r2, r3
 8014624:	d02d      	beq.n	8014682 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d002      	beq.n	8014632 <netif_do_set_netmask+0x26>
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	e000      	b.n	8014634 <netif_do_set_netmask+0x28>
 8014632:	2300      	movs	r3, #0
 8014634:	68fa      	ldr	r2, [r7, #12]
 8014636:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801463e:	4618      	mov	r0, r3
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014646:	461c      	mov	r4, r3
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	3308      	adds	r3, #8
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	461d      	mov	r5, r3
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	3308      	adds	r3, #8
 8014654:	3301      	adds	r3, #1
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	461a      	mov	r2, r3
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	3308      	adds	r3, #8
 801465e:	3302      	adds	r3, #2
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	4619      	mov	r1, r3
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	3308      	adds	r3, #8
 8014668:	3303      	adds	r3, #3
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	9302      	str	r3, [sp, #8]
 801466e:	9101      	str	r1, [sp, #4]
 8014670:	9200      	str	r2, [sp, #0]
 8014672:	462b      	mov	r3, r5
 8014674:	4622      	mov	r2, r4
 8014676:	4601      	mov	r1, r0
 8014678:	4804      	ldr	r0, [pc, #16]	@ (801468c <netif_do_set_netmask+0x80>)
 801467a:	f00c f93f 	bl	80208fc <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801467e:	2301      	movs	r3, #1
 8014680:	e000      	b.n	8014684 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 8014682:	2300      	movs	r3, #0
}
 8014684:	4618      	mov	r0, r3
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bdb0      	pop	{r4, r5, r7, pc}
 801468c:	08022dac 	.word	0x08022dac

08014690 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8014690:	b5b0      	push	{r4, r5, r7, lr}
 8014692:	b088      	sub	sp, #32
 8014694:	af04      	add	r7, sp, #16
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	60b9      	str	r1, [r7, #8]
 801469a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	330c      	adds	r3, #12
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d02d      	beq.n	8014706 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80146aa:	68bb      	ldr	r3, [r7, #8]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d002      	beq.n	80146b6 <netif_do_set_gw+0x26>
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	e000      	b.n	80146b8 <netif_do_set_gw+0x28>
 80146b6:	2300      	movs	r3, #0
 80146b8:	68fa      	ldr	r2, [r7, #12]
 80146ba:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80146c2:	4618      	mov	r0, r3
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80146ca:	461c      	mov	r4, r3
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	330c      	adds	r3, #12
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	461d      	mov	r5, r3
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	330c      	adds	r3, #12
 80146d8:	3301      	adds	r3, #1
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	461a      	mov	r2, r3
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	330c      	adds	r3, #12
 80146e2:	3302      	adds	r3, #2
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	4619      	mov	r1, r3
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	330c      	adds	r3, #12
 80146ec:	3303      	adds	r3, #3
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	9302      	str	r3, [sp, #8]
 80146f2:	9101      	str	r1, [sp, #4]
 80146f4:	9200      	str	r2, [sp, #0]
 80146f6:	462b      	mov	r3, r5
 80146f8:	4622      	mov	r2, r4
 80146fa:	4601      	mov	r1, r0
 80146fc:	4804      	ldr	r0, [pc, #16]	@ (8014710 <netif_do_set_gw+0x80>)
 80146fe:	f00c f8fd 	bl	80208fc <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8014702:	2301      	movs	r3, #1
 8014704:	e000      	b.n	8014708 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8014706:	2300      	movs	r3, #0
}
 8014708:	4618      	mov	r0, r3
 801470a:	3710      	adds	r7, #16
 801470c:	46bd      	mov	sp, r7
 801470e:	bdb0      	pop	{r4, r5, r7, pc}
 8014710:	08022e0c 	.word	0x08022e0c

08014714 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b088      	sub	sp, #32
 8014718:	af00      	add	r7, sp, #0
 801471a:	60f8      	str	r0, [r7, #12]
 801471c:	60b9      	str	r1, [r7, #8]
 801471e:	607a      	str	r2, [r7, #4]
 8014720:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8014722:	2300      	movs	r3, #0
 8014724:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8014726:	2300      	movs	r3, #0
 8014728:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d101      	bne.n	8014734 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8014730:	4b1c      	ldr	r3, [pc, #112]	@ (80147a4 <netif_set_addr+0x90>)
 8014732:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d101      	bne.n	801473e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801473a:	4b1a      	ldr	r3, [pc, #104]	@ (80147a4 <netif_set_addr+0x90>)
 801473c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d101      	bne.n	8014748 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8014744:	4b17      	ldr	r3, [pc, #92]	@ (80147a4 <netif_set_addr+0x90>)
 8014746:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d003      	beq.n	8014756 <netif_set_addr+0x42>
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d101      	bne.n	801475a <netif_set_addr+0x46>
 8014756:	2301      	movs	r3, #1
 8014758:	e000      	b.n	801475c <netif_set_addr+0x48>
 801475a:	2300      	movs	r3, #0
 801475c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d006      	beq.n	8014772 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014764:	f107 0310 	add.w	r3, r7, #16
 8014768:	461a      	mov	r2, r3
 801476a:	68b9      	ldr	r1, [r7, #8]
 801476c:	68f8      	ldr	r0, [r7, #12]
 801476e:	f7ff feff 	bl	8014570 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8014772:	69fa      	ldr	r2, [r7, #28]
 8014774:	6879      	ldr	r1, [r7, #4]
 8014776:	68f8      	ldr	r0, [r7, #12]
 8014778:	f7ff ff48 	bl	801460c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801477c:	69ba      	ldr	r2, [r7, #24]
 801477e:	6839      	ldr	r1, [r7, #0]
 8014780:	68f8      	ldr	r0, [r7, #12]
 8014782:	f7ff ff85 	bl	8014690 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d106      	bne.n	801479a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801478c:	f107 0310 	add.w	r3, r7, #16
 8014790:	461a      	mov	r2, r3
 8014792:	68b9      	ldr	r1, [r7, #8]
 8014794:	68f8      	ldr	r0, [r7, #12]
 8014796:	f7ff feeb 	bl	8014570 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801479a:	bf00      	nop
 801479c:	3720      	adds	r7, #32
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	08026420 	.word	0x08026420

080147a8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80147b0:	4a0d      	ldr	r2, [pc, #52]	@ (80147e8 <netif_set_default+0x40>)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d004      	beq.n	80147c6 <netif_set_default+0x1e>
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80147c2:	4619      	mov	r1, r3
 80147c4:	e000      	b.n	80147c8 <netif_set_default+0x20>
 80147c6:	2127      	movs	r1, #39	@ 0x27
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d003      	beq.n	80147d6 <netif_set_default+0x2e>
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80147d4:	e000      	b.n	80147d8 <netif_set_default+0x30>
 80147d6:	2327      	movs	r3, #39	@ 0x27
 80147d8:	461a      	mov	r2, r3
 80147da:	4804      	ldr	r0, [pc, #16]	@ (80147ec <netif_set_default+0x44>)
 80147dc:	f00c f88e 	bl	80208fc <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80147e0:	bf00      	nop
 80147e2:	3708      	adds	r7, #8
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	20022aa0 	.word	0x20022aa0
 80147ec:	08022e80 	.word	0x08022e80

080147f0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d107      	bne.n	801480e <netif_set_up+0x1e>
 80147fe:	4b0f      	ldr	r3, [pc, #60]	@ (801483c <netif_set_up+0x4c>)
 8014800:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8014804:	490e      	ldr	r1, [pc, #56]	@ (8014840 <netif_set_up+0x50>)
 8014806:	480f      	ldr	r0, [pc, #60]	@ (8014844 <netif_set_up+0x54>)
 8014808:	f00c f878 	bl	80208fc <iprintf>
 801480c:	e013      	b.n	8014836 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014814:	f003 0301 	and.w	r3, r3, #1
 8014818:	2b00      	cmp	r3, #0
 801481a:	d10c      	bne.n	8014836 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014822:	f043 0301 	orr.w	r3, r3, #1
 8014826:	b2da      	uxtb	r2, r3
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801482e:	2103      	movs	r1, #3
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f000 f809 	bl	8014848 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8014836:	3708      	adds	r7, #8
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}
 801483c:	08022be8 	.word	0x08022be8
 8014840:	08022ea8 	.word	0x08022ea8
 8014844:	08022c38 	.word	0x08022c38

08014848 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	460b      	mov	r3, r1
 8014852:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d106      	bne.n	8014868 <netif_issue_reports+0x20>
 801485a:	4b18      	ldr	r3, [pc, #96]	@ (80148bc <netif_issue_reports+0x74>)
 801485c:	f240 326d 	movw	r2, #877	@ 0x36d
 8014860:	4917      	ldr	r1, [pc, #92]	@ (80148c0 <netif_issue_reports+0x78>)
 8014862:	4818      	ldr	r0, [pc, #96]	@ (80148c4 <netif_issue_reports+0x7c>)
 8014864:	f00c f84a 	bl	80208fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801486e:	f003 0304 	and.w	r3, r3, #4
 8014872:	2b00      	cmp	r3, #0
 8014874:	d01e      	beq.n	80148b4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801487c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014880:	2b00      	cmp	r3, #0
 8014882:	d017      	beq.n	80148b4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014884:	78fb      	ldrb	r3, [r7, #3]
 8014886:	f003 0301 	and.w	r3, r3, #1
 801488a:	2b00      	cmp	r3, #0
 801488c:	d013      	beq.n	80148b6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	3304      	adds	r3, #4
 8014892:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014894:	2b00      	cmp	r3, #0
 8014896:	d00e      	beq.n	80148b6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801489e:	f003 0308 	and.w	r3, r3, #8
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d007      	beq.n	80148b6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	3304      	adds	r3, #4
 80148aa:	4619      	mov	r1, r3
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f009 f90d 	bl	801dacc <etharp_request>
 80148b2:	e000      	b.n	80148b6 <netif_issue_reports+0x6e>
    return;
 80148b4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}
 80148bc:	08022be8 	.word	0x08022be8
 80148c0:	08022ec4 	.word	0x08022ec4
 80148c4:	08022c38 	.word	0x08022c38

080148c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b082      	sub	sp, #8
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d107      	bne.n	80148e6 <netif_set_down+0x1e>
 80148d6:	4b12      	ldr	r3, [pc, #72]	@ (8014920 <netif_set_down+0x58>)
 80148d8:	f240 329b 	movw	r2, #923	@ 0x39b
 80148dc:	4911      	ldr	r1, [pc, #68]	@ (8014924 <netif_set_down+0x5c>)
 80148de:	4812      	ldr	r0, [pc, #72]	@ (8014928 <netif_set_down+0x60>)
 80148e0:	f00c f80c 	bl	80208fc <iprintf>
 80148e4:	e019      	b.n	801491a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80148ec:	f003 0301 	and.w	r3, r3, #1
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d012      	beq.n	801491a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80148fa:	f023 0301 	bic.w	r3, r3, #1
 80148fe:	b2da      	uxtb	r2, r3
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801490c:	f003 0308 	and.w	r3, r3, #8
 8014910:	2b00      	cmp	r3, #0
 8014912:	d002      	beq.n	801491a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f008 fc97 	bl	801d248 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801491a:	3708      	adds	r7, #8
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	08022be8 	.word	0x08022be8
 8014924:	08022ee8 	.word	0x08022ee8
 8014928:	08022c38 	.word	0x08022c38

0801492c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b082      	sub	sp, #8
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d107      	bne.n	801494a <netif_set_link_up+0x1e>
 801493a:	4b13      	ldr	r3, [pc, #76]	@ (8014988 <netif_set_link_up+0x5c>)
 801493c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8014940:	4912      	ldr	r1, [pc, #72]	@ (801498c <netif_set_link_up+0x60>)
 8014942:	4813      	ldr	r0, [pc, #76]	@ (8014990 <netif_set_link_up+0x64>)
 8014944:	f00b ffda 	bl	80208fc <iprintf>
 8014948:	e01b      	b.n	8014982 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014950:	f003 0304 	and.w	r3, r3, #4
 8014954:	2b00      	cmp	r3, #0
 8014956:	d114      	bne.n	8014982 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801495e:	f043 0304 	orr.w	r3, r3, #4
 8014962:	b2da      	uxtb	r2, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801496a:	2103      	movs	r1, #3
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f7ff ff6b 	bl	8014848 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	69db      	ldr	r3, [r3, #28]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d003      	beq.n	8014982 <netif_set_link_up+0x56>
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	69db      	ldr	r3, [r3, #28]
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014982:	3708      	adds	r7, #8
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}
 8014988:	08022be8 	.word	0x08022be8
 801498c:	08022f08 	.word	0x08022f08
 8014990:	08022c38 	.word	0x08022c38

08014994 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b082      	sub	sp, #8
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d107      	bne.n	80149b2 <netif_set_link_down+0x1e>
 80149a2:	4b11      	ldr	r3, [pc, #68]	@ (80149e8 <netif_set_link_down+0x54>)
 80149a4:	f240 4206 	movw	r2, #1030	@ 0x406
 80149a8:	4910      	ldr	r1, [pc, #64]	@ (80149ec <netif_set_link_down+0x58>)
 80149aa:	4811      	ldr	r0, [pc, #68]	@ (80149f0 <netif_set_link_down+0x5c>)
 80149ac:	f00b ffa6 	bl	80208fc <iprintf>
 80149b0:	e017      	b.n	80149e2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80149b8:	f003 0304 	and.w	r3, r3, #4
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d010      	beq.n	80149e2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80149c6:	f023 0304 	bic.w	r3, r3, #4
 80149ca:	b2da      	uxtb	r2, r3
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	69db      	ldr	r3, [r3, #28]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d003      	beq.n	80149e2 <netif_set_link_down+0x4e>
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	69db      	ldr	r3, [r3, #28]
 80149de:	6878      	ldr	r0, [r7, #4]
 80149e0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80149e2:	3708      	adds	r7, #8
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}
 80149e8:	08022be8 	.word	0x08022be8
 80149ec:	08022f2c 	.word	0x08022f2c
 80149f0:	08022c38 	.word	0x08022c38

080149f4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80149f4:	b480      	push	{r7}
 80149f6:	b083      	sub	sp, #12
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d002      	beq.n	8014a0a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	683a      	ldr	r2, [r7, #0]
 8014a08:	61da      	str	r2, [r3, #28]
  }
}
 8014a0a:	bf00      	nop
 8014a0c:	370c      	adds	r7, #12
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a14:	4770      	bx	lr

08014a16 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8014a16:	b480      	push	{r7}
 8014a18:	b085      	sub	sp, #20
 8014a1a:	af00      	add	r7, sp, #0
 8014a1c:	60f8      	str	r0, [r7, #12]
 8014a1e:	60b9      	str	r1, [r7, #8]
 8014a20:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8014a22:	f06f 030b 	mvn.w	r3, #11
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3714      	adds	r7, #20
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr
	...

08014a34 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8014a34:	b480      	push	{r7}
 8014a36:	b085      	sub	sp, #20
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014a3e:	79fb      	ldrb	r3, [r7, #7]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d013      	beq.n	8014a6c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8014a44:	4b0d      	ldr	r3, [pc, #52]	@ (8014a7c <netif_get_by_index+0x48>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	60fb      	str	r3, [r7, #12]
 8014a4a:	e00c      	b.n	8014a66 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014a52:	3301      	adds	r3, #1
 8014a54:	b2db      	uxtb	r3, r3
 8014a56:	79fa      	ldrb	r2, [r7, #7]
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	d101      	bne.n	8014a60 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	e006      	b.n	8014a6e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	60fb      	str	r3, [r7, #12]
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d1ef      	bne.n	8014a4c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014a6c:	2300      	movs	r3, #0
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3714      	adds	r7, #20
 8014a72:	46bd      	mov	sp, r7
 8014a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a78:	4770      	bx	lr
 8014a7a:	bf00      	nop
 8014a7c:	20022a9c 	.word	0x20022a9c

08014a80 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8014a86:	f00a fdd7 	bl	801f638 <sys_arch_protect>
 8014a8a:	6038      	str	r0, [r7, #0]
 8014a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8014ac8 <pbuf_free_ooseq+0x48>)
 8014a8e:	2200      	movs	r2, #0
 8014a90:	701a      	strb	r2, [r3, #0]
 8014a92:	6838      	ldr	r0, [r7, #0]
 8014a94:	f00a fdde 	bl	801f654 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014a98:	4b0c      	ldr	r3, [pc, #48]	@ (8014acc <pbuf_free_ooseq+0x4c>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	607b      	str	r3, [r7, #4]
 8014a9e:	e00d      	b.n	8014abc <pbuf_free_ooseq+0x3c>
    if (pcb->ooseq != NULL) {
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d006      	beq.n	8014ab6 <pbuf_free_ooseq+0x36>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
 8014aa8:	4809      	ldr	r0, [pc, #36]	@ (8014ad0 <pbuf_free_ooseq+0x50>)
 8014aaa:	f00b ff97 	bl	80209dc <puts>
      tcp_free_ooseq(pcb);
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f002 fd1e 	bl	80174f0 <tcp_free_ooseq>
      return;
 8014ab4:	e005      	b.n	8014ac2 <pbuf_free_ooseq+0x42>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	68db      	ldr	r3, [r3, #12]
 8014aba:	607b      	str	r3, [r7, #4]
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d1ee      	bne.n	8014aa0 <pbuf_free_ooseq+0x20>
    }
  }
}
 8014ac2:	3708      	adds	r7, #8
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}
 8014ac8:	20022aa5 	.word	0x20022aa5
 8014acc:	20022ab4 	.word	0x20022ab4
 8014ad0:	08022f88 	.word	0x08022f88

08014ad4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8014adc:	f7ff ffd0 	bl	8014a80 <pbuf_free_ooseq>
}
 8014ae0:	bf00      	nop
 8014ae2:	3708      	adds	r7, #8
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b082      	sub	sp, #8
 8014aec:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8014aee:	f00a fda3 	bl	801f638 <sys_arch_protect>
 8014af2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014af4:	4b0f      	ldr	r3, [pc, #60]	@ (8014b34 <pbuf_pool_is_empty+0x4c>)
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8014afa:	4b0e      	ldr	r3, [pc, #56]	@ (8014b34 <pbuf_pool_is_empty+0x4c>)
 8014afc:	2201      	movs	r2, #1
 8014afe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f00a fda7 	bl	801f654 <sys_arch_unprotect>

  if (!queued) {
 8014b06:	78fb      	ldrb	r3, [r7, #3]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d10f      	bne.n	8014b2c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	480a      	ldr	r0, [pc, #40]	@ (8014b38 <pbuf_pool_is_empty+0x50>)
 8014b10:	f7fe fd70 	bl	80135f4 <tcpip_try_callback>
 8014b14:	4603      	mov	r3, r0
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d008      	beq.n	8014b2c <pbuf_pool_is_empty+0x44>
 8014b1a:	f00a fd8d 	bl	801f638 <sys_arch_protect>
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	4b04      	ldr	r3, [pc, #16]	@ (8014b34 <pbuf_pool_is_empty+0x4c>)
 8014b22:	2200      	movs	r2, #0
 8014b24:	701a      	strb	r2, [r3, #0]
 8014b26:	6878      	ldr	r0, [r7, #4]
 8014b28:	f00a fd94 	bl	801f654 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014b2c:	bf00      	nop
 8014b2e:	3708      	adds	r7, #8
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	20022aa5 	.word	0x20022aa5
 8014b38:	08014ad5 	.word	0x08014ad5

08014b3c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b085      	sub	sp, #20
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	60f8      	str	r0, [r7, #12]
 8014b44:	60b9      	str	r1, [r7, #8]
 8014b46:	4611      	mov	r1, r2
 8014b48:	461a      	mov	r2, r3
 8014b4a:	460b      	mov	r3, r1
 8014b4c:	80fb      	strh	r3, [r7, #6]
 8014b4e:	4613      	mov	r3, r2
 8014b50:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	2200      	movs	r2, #0
 8014b56:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	68ba      	ldr	r2, [r7, #8]
 8014b5c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	88fa      	ldrh	r2, [r7, #6]
 8014b62:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	88ba      	ldrh	r2, [r7, #4]
 8014b68:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8014b6a:	8b3b      	ldrh	r3, [r7, #24]
 8014b6c:	b2da      	uxtb	r2, r3
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	7f3a      	ldrb	r2, [r7, #28]
 8014b76:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2200      	movs	r2, #0
 8014b82:	73da      	strb	r2, [r3, #15]
}
 8014b84:	bf00      	nop
 8014b86:	3714      	adds	r7, #20
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8e:	4770      	bx	lr

08014b90 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b08c      	sub	sp, #48	@ 0x30
 8014b94:	af02      	add	r7, sp, #8
 8014b96:	4603      	mov	r3, r0
 8014b98:	71fb      	strb	r3, [r7, #7]
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	80bb      	strh	r3, [r7, #4]
 8014b9e:	4613      	mov	r3, r2
 8014ba0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014ba2:	79fb      	ldrb	r3, [r7, #7]
 8014ba4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 8014ba6:	88bb      	ldrh	r3, [r7, #4]
 8014ba8:	4619      	mov	r1, r3
 8014baa:	4874      	ldr	r0, [pc, #464]	@ (8014d7c <pbuf_alloc+0x1ec>)
 8014bac:	f00b fea6 	bl	80208fc <iprintf>

  switch (type) {
 8014bb0:	887b      	ldrh	r3, [r7, #2]
 8014bb2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014bb6:	d07f      	beq.n	8014cb8 <pbuf_alloc+0x128>
 8014bb8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014bbc:	f300 80c8 	bgt.w	8014d50 <pbuf_alloc+0x1c0>
 8014bc0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014bc4:	d010      	beq.n	8014be8 <pbuf_alloc+0x58>
 8014bc6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014bca:	f300 80c1 	bgt.w	8014d50 <pbuf_alloc+0x1c0>
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d002      	beq.n	8014bd8 <pbuf_alloc+0x48>
 8014bd2:	2b41      	cmp	r3, #65	@ 0x41
 8014bd4:	f040 80bc 	bne.w	8014d50 <pbuf_alloc+0x1c0>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014bd8:	887a      	ldrh	r2, [r7, #2]
 8014bda:	88bb      	ldrh	r3, [r7, #4]
 8014bdc:	4619      	mov	r1, r3
 8014bde:	2000      	movs	r0, #0
 8014be0:	f000 f8dc 	bl	8014d9c <pbuf_alloc_reference>
 8014be4:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8014be6:	e0bd      	b.n	8014d64 <pbuf_alloc+0x1d4>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014be8:	2300      	movs	r3, #0
 8014bea:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8014bec:	2300      	movs	r3, #0
 8014bee:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014bf0:	88bb      	ldrh	r3, [r7, #4]
 8014bf2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014bf4:	200c      	movs	r0, #12
 8014bf6:	f7ff fa9b 	bl	8014130 <memp_malloc>
 8014bfa:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d109      	bne.n	8014c16 <pbuf_alloc+0x86>
          PBUF_POOL_IS_EMPTY();
 8014c02:	f7ff ff71 	bl	8014ae8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d002      	beq.n	8014c12 <pbuf_alloc+0x82>
            pbuf_free(p);
 8014c0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014c0e:	f000 faeb 	bl	80151e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014c12:	2300      	movs	r3, #0
 8014c14:	e0ad      	b.n	8014d72 <pbuf_alloc+0x1e2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8014c16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c18:	3303      	adds	r3, #3
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	f023 0303 	bic.w	r3, r3, #3
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8014c26:	b29b      	uxth	r3, r3
 8014c28:	8b7a      	ldrh	r2, [r7, #26]
 8014c2a:	4293      	cmp	r3, r2
 8014c2c:	bf28      	it	cs
 8014c2e:	4613      	movcs	r3, r2
 8014c30:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014c32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c34:	3310      	adds	r3, #16
 8014c36:	693a      	ldr	r2, [r7, #16]
 8014c38:	4413      	add	r3, r2
 8014c3a:	3303      	adds	r3, #3
 8014c3c:	f023 0303 	bic.w	r3, r3, #3
 8014c40:	4618      	mov	r0, r3
 8014c42:	89f9      	ldrh	r1, [r7, #14]
 8014c44:	8b7a      	ldrh	r2, [r7, #26]
 8014c46:	2300      	movs	r3, #0
 8014c48:	9301      	str	r3, [sp, #4]
 8014c4a:	887b      	ldrh	r3, [r7, #2]
 8014c4c:	9300      	str	r3, [sp, #0]
 8014c4e:	460b      	mov	r3, r1
 8014c50:	4601      	mov	r1, r0
 8014c52:	6938      	ldr	r0, [r7, #16]
 8014c54:	f7ff ff72 	bl	8014b3c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	685b      	ldr	r3, [r3, #4]
 8014c5c:	f003 0303 	and.w	r3, r3, #3
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d006      	beq.n	8014c72 <pbuf_alloc+0xe2>
 8014c64:	4b46      	ldr	r3, [pc, #280]	@ (8014d80 <pbuf_alloc+0x1f0>)
 8014c66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014c6a:	4946      	ldr	r1, [pc, #280]	@ (8014d84 <pbuf_alloc+0x1f4>)
 8014c6c:	4846      	ldr	r0, [pc, #280]	@ (8014d88 <pbuf_alloc+0x1f8>)
 8014c6e:	f00b fe45 	bl	80208fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014c72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c74:	3303      	adds	r3, #3
 8014c76:	f023 0303 	bic.w	r3, r3, #3
 8014c7a:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8014c7e:	d106      	bne.n	8014c8e <pbuf_alloc+0xfe>
 8014c80:	4b3f      	ldr	r3, [pc, #252]	@ (8014d80 <pbuf_alloc+0x1f0>)
 8014c82:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8014c86:	4941      	ldr	r1, [pc, #260]	@ (8014d8c <pbuf_alloc+0x1fc>)
 8014c88:	483f      	ldr	r0, [pc, #252]	@ (8014d88 <pbuf_alloc+0x1f8>)
 8014c8a:	f00b fe37 	bl	80208fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d102      	bne.n	8014c9a <pbuf_alloc+0x10a>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014c94:	693b      	ldr	r3, [r7, #16]
 8014c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c98:	e002      	b.n	8014ca0 <pbuf_alloc+0x110>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014c9a:	69fb      	ldr	r3, [r7, #28]
 8014c9c:	693a      	ldr	r2, [r7, #16]
 8014c9e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014ca4:	8b7a      	ldrh	r2, [r7, #26]
 8014ca6:	89fb      	ldrh	r3, [r7, #14]
 8014ca8:	1ad3      	subs	r3, r2, r3
 8014caa:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014cac:	2300      	movs	r3, #0
 8014cae:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8014cb0:	8b7b      	ldrh	r3, [r7, #26]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d19e      	bne.n	8014bf4 <pbuf_alloc+0x64>
      break;
 8014cb6:	e055      	b.n	8014d64 <pbuf_alloc+0x1d4>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014cb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014cba:	3303      	adds	r3, #3
 8014cbc:	b29b      	uxth	r3, r3
 8014cbe:	f023 0303 	bic.w	r3, r3, #3
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	88bb      	ldrh	r3, [r7, #4]
 8014cc6:	3303      	adds	r3, #3
 8014cc8:	b29b      	uxth	r3, r3
 8014cca:	f023 0303 	bic.w	r3, r3, #3
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	4413      	add	r3, r2
 8014cd2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014cd4:	8b3b      	ldrh	r3, [r7, #24]
 8014cd6:	3310      	adds	r3, #16
 8014cd8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014cda:	8b3a      	ldrh	r2, [r7, #24]
 8014cdc:	88bb      	ldrh	r3, [r7, #4]
 8014cde:	3303      	adds	r3, #3
 8014ce0:	f023 0303 	bic.w	r3, r3, #3
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d306      	bcc.n	8014cf6 <pbuf_alloc+0x166>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014ce8:	8afa      	ldrh	r2, [r7, #22]
 8014cea:	88bb      	ldrh	r3, [r7, #4]
 8014cec:	3303      	adds	r3, #3
 8014cee:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d201      	bcs.n	8014cfa <pbuf_alloc+0x16a>
        return NULL;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	e03b      	b.n	8014d72 <pbuf_alloc+0x1e2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014cfa:	8afb      	ldrh	r3, [r7, #22]
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7ff f863 	bl	8013dc8 <mem_malloc>
 8014d02:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8014d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d101      	bne.n	8014d0e <pbuf_alloc+0x17e>
        return NULL;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	e031      	b.n	8014d72 <pbuf_alloc+0x1e2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014d0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d10:	3310      	adds	r3, #16
 8014d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d14:	4413      	add	r3, r2
 8014d16:	3303      	adds	r3, #3
 8014d18:	f023 0303 	bic.w	r3, r3, #3
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	88b9      	ldrh	r1, [r7, #4]
 8014d20:	88ba      	ldrh	r2, [r7, #4]
 8014d22:	2300      	movs	r3, #0
 8014d24:	9301      	str	r3, [sp, #4]
 8014d26:	887b      	ldrh	r3, [r7, #2]
 8014d28:	9300      	str	r3, [sp, #0]
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	4601      	mov	r1, r0
 8014d2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014d30:	f7ff ff04 	bl	8014b3c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8014d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d36:	685b      	ldr	r3, [r3, #4]
 8014d38:	f003 0303 	and.w	r3, r3, #3
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d010      	beq.n	8014d62 <pbuf_alloc+0x1d2>
 8014d40:	4b0f      	ldr	r3, [pc, #60]	@ (8014d80 <pbuf_alloc+0x1f0>)
 8014d42:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8014d46:	4912      	ldr	r1, [pc, #72]	@ (8014d90 <pbuf_alloc+0x200>)
 8014d48:	480f      	ldr	r0, [pc, #60]	@ (8014d88 <pbuf_alloc+0x1f8>)
 8014d4a:	f00b fdd7 	bl	80208fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014d4e:	e008      	b.n	8014d62 <pbuf_alloc+0x1d2>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014d50:	4b0b      	ldr	r3, [pc, #44]	@ (8014d80 <pbuf_alloc+0x1f0>)
 8014d52:	f240 1227 	movw	r2, #295	@ 0x127
 8014d56:	490f      	ldr	r1, [pc, #60]	@ (8014d94 <pbuf_alloc+0x204>)
 8014d58:	480b      	ldr	r0, [pc, #44]	@ (8014d88 <pbuf_alloc+0x1f8>)
 8014d5a:	f00b fdcf 	bl	80208fc <iprintf>
      return NULL;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	e007      	b.n	8014d72 <pbuf_alloc+0x1e2>
      break;
 8014d62:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
 8014d64:	88bb      	ldrh	r3, [r7, #4]
 8014d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d68:	4619      	mov	r1, r3
 8014d6a:	480b      	ldr	r0, [pc, #44]	@ (8014d98 <pbuf_alloc+0x208>)
 8014d6c:	f00b fdc6 	bl	80208fc <iprintf>
  return p;
 8014d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3728      	adds	r7, #40	@ 0x28
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	08022fb8 	.word	0x08022fb8
 8014d80:	08022fd0 	.word	0x08022fd0
 8014d84:	08023000 	.word	0x08023000
 8014d88:	08023030 	.word	0x08023030
 8014d8c:	08023058 	.word	0x08023058
 8014d90:	0802308c 	.word	0x0802308c
 8014d94:	080230b8 	.word	0x080230b8
 8014d98:	080230d4 	.word	0x080230d4

08014d9c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b086      	sub	sp, #24
 8014da0:	af02      	add	r7, sp, #8
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	460b      	mov	r3, r1
 8014da6:	807b      	strh	r3, [r7, #2]
 8014da8:	4613      	mov	r3, r2
 8014daa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014dac:	883b      	ldrh	r3, [r7, #0]
 8014dae:	2b41      	cmp	r3, #65	@ 0x41
 8014db0:	d009      	beq.n	8014dc6 <pbuf_alloc_reference+0x2a>
 8014db2:	883b      	ldrh	r3, [r7, #0]
 8014db4:	2b01      	cmp	r3, #1
 8014db6:	d006      	beq.n	8014dc6 <pbuf_alloc_reference+0x2a>
 8014db8:	4b14      	ldr	r3, [pc, #80]	@ (8014e0c <pbuf_alloc_reference+0x70>)
 8014dba:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8014dbe:	4914      	ldr	r1, [pc, #80]	@ (8014e10 <pbuf_alloc_reference+0x74>)
 8014dc0:	4814      	ldr	r0, [pc, #80]	@ (8014e14 <pbuf_alloc_reference+0x78>)
 8014dc2:	f00b fd9b 	bl	80208fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014dc6:	200b      	movs	r0, #11
 8014dc8:	f7ff f9b2 	bl	8014130 <memp_malloc>
 8014dcc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d10b      	bne.n	8014dec <pbuf_alloc_reference+0x50>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8014dd4:	883b      	ldrh	r3, [r7, #0]
 8014dd6:	2b01      	cmp	r3, #1
 8014dd8:	d101      	bne.n	8014dde <pbuf_alloc_reference+0x42>
 8014dda:	4b0f      	ldr	r3, [pc, #60]	@ (8014e18 <pbuf_alloc_reference+0x7c>)
 8014ddc:	e000      	b.n	8014de0 <pbuf_alloc_reference+0x44>
 8014dde:	4b0f      	ldr	r3, [pc, #60]	@ (8014e1c <pbuf_alloc_reference+0x80>)
 8014de0:	4619      	mov	r1, r3
 8014de2:	480f      	ldr	r0, [pc, #60]	@ (8014e20 <pbuf_alloc_reference+0x84>)
 8014de4:	f00b fd8a 	bl	80208fc <iprintf>
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014de8:	2300      	movs	r3, #0
 8014dea:	e00b      	b.n	8014e04 <pbuf_alloc_reference+0x68>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014dec:	8879      	ldrh	r1, [r7, #2]
 8014dee:	887a      	ldrh	r2, [r7, #2]
 8014df0:	2300      	movs	r3, #0
 8014df2:	9301      	str	r3, [sp, #4]
 8014df4:	883b      	ldrh	r3, [r7, #0]
 8014df6:	9300      	str	r3, [sp, #0]
 8014df8:	460b      	mov	r3, r1
 8014dfa:	6879      	ldr	r1, [r7, #4]
 8014dfc:	68f8      	ldr	r0, [r7, #12]
 8014dfe:	f7ff fe9d 	bl	8014b3c <pbuf_init_alloced_pbuf>
  return p;
 8014e02:	68fb      	ldr	r3, [r7, #12]
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	3710      	adds	r7, #16
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}
 8014e0c:	08022fd0 	.word	0x08022fd0
 8014e10:	080230f4 	.word	0x080230f4
 8014e14:	08023030 	.word	0x08023030
 8014e18:	08023108 	.word	0x08023108
 8014e1c:	0802310c 	.word	0x0802310c
 8014e20:	08023110 	.word	0x08023110

08014e24 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b088      	sub	sp, #32
 8014e28:	af02      	add	r7, sp, #8
 8014e2a:	607b      	str	r3, [r7, #4]
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	73fb      	strb	r3, [r7, #15]
 8014e30:	460b      	mov	r3, r1
 8014e32:	81bb      	strh	r3, [r7, #12]
 8014e34:	4613      	mov	r3, r2
 8014e36:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014e38:	7bfb      	ldrb	r3, [r7, #15]
 8014e3a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 8014e3c:	89bb      	ldrh	r3, [r7, #12]
 8014e3e:	4619      	mov	r1, r3
 8014e40:	4817      	ldr	r0, [pc, #92]	@ (8014ea0 <pbuf_alloced_custom+0x7c>)
 8014e42:	f00b fd5b 	bl	80208fc <iprintf>

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014e46:	8a7b      	ldrh	r3, [r7, #18]
 8014e48:	3303      	adds	r3, #3
 8014e4a:	f023 0203 	bic.w	r2, r3, #3
 8014e4e:	89bb      	ldrh	r3, [r7, #12]
 8014e50:	441a      	add	r2, r3
 8014e52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d906      	bls.n	8014e66 <pbuf_alloced_custom+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
 8014e58:	89bb      	ldrh	r3, [r7, #12]
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	4811      	ldr	r0, [pc, #68]	@ (8014ea4 <pbuf_alloced_custom+0x80>)
 8014e5e:	f00b fd4d 	bl	80208fc <iprintf>
    return NULL;
 8014e62:	2300      	movs	r3, #0
 8014e64:	e018      	b.n	8014e98 <pbuf_alloced_custom+0x74>
  }

  if (payload_mem != NULL) {
 8014e66:	6a3b      	ldr	r3, [r7, #32]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d007      	beq.n	8014e7c <pbuf_alloced_custom+0x58>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014e6c:	8a7b      	ldrh	r3, [r7, #18]
 8014e6e:	3303      	adds	r3, #3
 8014e70:	f023 0303 	bic.w	r3, r3, #3
 8014e74:	6a3a      	ldr	r2, [r7, #32]
 8014e76:	4413      	add	r3, r2
 8014e78:	617b      	str	r3, [r7, #20]
 8014e7a:	e001      	b.n	8014e80 <pbuf_alloced_custom+0x5c>
  } else {
    payload = NULL;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	89b9      	ldrh	r1, [r7, #12]
 8014e84:	89ba      	ldrh	r2, [r7, #12]
 8014e86:	2302      	movs	r3, #2
 8014e88:	9301      	str	r3, [sp, #4]
 8014e8a:	897b      	ldrh	r3, [r7, #10]
 8014e8c:	9300      	str	r3, [sp, #0]
 8014e8e:	460b      	mov	r3, r1
 8014e90:	6979      	ldr	r1, [r7, #20]
 8014e92:	f7ff fe53 	bl	8014b3c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014e96:	687b      	ldr	r3, [r7, #4]
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	3718      	adds	r7, #24
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}
 8014ea0:	08023154 	.word	0x08023154
 8014ea4:	08023178 	.word	0x08023178

08014ea8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b084      	sub	sp, #16
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	460b      	mov	r3, r1
 8014eb2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d106      	bne.n	8014ec8 <pbuf_realloc+0x20>
 8014eba:	4b3a      	ldr	r3, [pc, #232]	@ (8014fa4 <pbuf_realloc+0xfc>)
 8014ebc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8014ec0:	4939      	ldr	r1, [pc, #228]	@ (8014fa8 <pbuf_realloc+0x100>)
 8014ec2:	483a      	ldr	r0, [pc, #232]	@ (8014fac <pbuf_realloc+0x104>)
 8014ec4:	f00b fd1a 	bl	80208fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	891b      	ldrh	r3, [r3, #8]
 8014ecc:	887a      	ldrh	r2, [r7, #2]
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d263      	bcs.n	8014f9a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	891a      	ldrh	r2, [r3, #8]
 8014ed6:	887b      	ldrh	r3, [r7, #2]
 8014ed8:	1ad3      	subs	r3, r2, r3
 8014eda:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014edc:	887b      	ldrh	r3, [r7, #2]
 8014ede:	817b      	strh	r3, [r7, #10]
  q = p;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014ee4:	e018      	b.n	8014f18 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	895b      	ldrh	r3, [r3, #10]
 8014eea:	897a      	ldrh	r2, [r7, #10]
 8014eec:	1ad3      	subs	r3, r2, r3
 8014eee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	891a      	ldrh	r2, [r3, #8]
 8014ef4:	893b      	ldrh	r3, [r7, #8]
 8014ef6:	1ad3      	subs	r3, r2, r3
 8014ef8:	b29a      	uxth	r2, r3
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d106      	bne.n	8014f18 <pbuf_realloc+0x70>
 8014f0a:	4b26      	ldr	r3, [pc, #152]	@ (8014fa4 <pbuf_realloc+0xfc>)
 8014f0c:	f240 12af 	movw	r2, #431	@ 0x1af
 8014f10:	4927      	ldr	r1, [pc, #156]	@ (8014fb0 <pbuf_realloc+0x108>)
 8014f12:	4826      	ldr	r0, [pc, #152]	@ (8014fac <pbuf_realloc+0x104>)
 8014f14:	f00b fcf2 	bl	80208fc <iprintf>
  while (rem_len > q->len) {
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	895b      	ldrh	r3, [r3, #10]
 8014f1c:	897a      	ldrh	r2, [r7, #10]
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	d8e1      	bhi.n	8014ee6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	7b1b      	ldrb	r3, [r3, #12]
 8014f26:	f003 030f 	and.w	r3, r3, #15
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d121      	bne.n	8014f72 <pbuf_realloc+0xca>
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	895b      	ldrh	r3, [r3, #10]
 8014f32:	897a      	ldrh	r2, [r7, #10]
 8014f34:	429a      	cmp	r2, r3
 8014f36:	d01c      	beq.n	8014f72 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	7b5b      	ldrb	r3, [r3, #13]
 8014f3c:	f003 0302 	and.w	r3, r3, #2
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d116      	bne.n	8014f72 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	685a      	ldr	r2, [r3, #4]
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	1ad3      	subs	r3, r2, r3
 8014f4c:	b29a      	uxth	r2, r3
 8014f4e:	897b      	ldrh	r3, [r7, #10]
 8014f50:	4413      	add	r3, r2
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	4619      	mov	r1, r3
 8014f56:	68f8      	ldr	r0, [r7, #12]
 8014f58:	f7fe fe26 	bl	8013ba8 <mem_trim>
 8014f5c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d106      	bne.n	8014f72 <pbuf_realloc+0xca>
 8014f64:	4b0f      	ldr	r3, [pc, #60]	@ (8014fa4 <pbuf_realloc+0xfc>)
 8014f66:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8014f6a:	4912      	ldr	r1, [pc, #72]	@ (8014fb4 <pbuf_realloc+0x10c>)
 8014f6c:	480f      	ldr	r0, [pc, #60]	@ (8014fac <pbuf_realloc+0x104>)
 8014f6e:	f00b fcc5 	bl	80208fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	897a      	ldrh	r2, [r7, #10]
 8014f76:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	895a      	ldrh	r2, [r3, #10]
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d004      	beq.n	8014f92 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f000 f92b 	bl	80151e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	2200      	movs	r2, #0
 8014f96:	601a      	str	r2, [r3, #0]
 8014f98:	e000      	b.n	8014f9c <pbuf_realloc+0xf4>
    return;
 8014f9a:	bf00      	nop

}
 8014f9c:	3710      	adds	r7, #16
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	08022fd0 	.word	0x08022fd0
 8014fa8:	080231ac 	.word	0x080231ac
 8014fac:	08023030 	.word	0x08023030
 8014fb0:	080231c4 	.word	0x080231c4
 8014fb4:	080231dc 	.word	0x080231dc

08014fb8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b086      	sub	sp, #24
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	60f8      	str	r0, [r7, #12]
 8014fc0:	60b9      	str	r1, [r7, #8]
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d106      	bne.n	8014fda <pbuf_add_header_impl+0x22>
 8014fcc:	4b32      	ldr	r3, [pc, #200]	@ (8015098 <pbuf_add_header_impl+0xe0>)
 8014fce:	f240 12df 	movw	r2, #479	@ 0x1df
 8014fd2:	4932      	ldr	r1, [pc, #200]	@ (801509c <pbuf_add_header_impl+0xe4>)
 8014fd4:	4832      	ldr	r0, [pc, #200]	@ (80150a0 <pbuf_add_header_impl+0xe8>)
 8014fd6:	f00b fc91 	bl	80208fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d003      	beq.n	8014fe8 <pbuf_add_header_impl+0x30>
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014fe6:	d301      	bcc.n	8014fec <pbuf_add_header_impl+0x34>
    return 1;
 8014fe8:	2301      	movs	r3, #1
 8014fea:	e051      	b.n	8015090 <pbuf_add_header_impl+0xd8>
  }
  if (header_size_increment == 0) {
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d101      	bne.n	8014ff6 <pbuf_add_header_impl+0x3e>
    return 0;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	e04c      	b.n	8015090 <pbuf_add_header_impl+0xd8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	891a      	ldrh	r2, [r3, #8]
 8014ffe:	8a7b      	ldrh	r3, [r7, #18]
 8015000:	4413      	add	r3, r2
 8015002:	b29b      	uxth	r3, r3
 8015004:	8a7a      	ldrh	r2, [r7, #18]
 8015006:	429a      	cmp	r2, r3
 8015008:	d901      	bls.n	801500e <pbuf_add_header_impl+0x56>
    return 1;
 801500a:	2301      	movs	r3, #1
 801500c:	e040      	b.n	8015090 <pbuf_add_header_impl+0xd8>
  }

  type_internal = p->type_internal;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	7b1b      	ldrb	r3, [r3, #12]
 8015012:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015014:	8a3b      	ldrh	r3, [r7, #16]
 8015016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801501a:	2b00      	cmp	r3, #0
 801501c:	d013      	beq.n	8015046 <pbuf_add_header_impl+0x8e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	685a      	ldr	r2, [r3, #4]
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	425b      	negs	r3, r3
 8015026:	4413      	add	r3, r2
 8015028:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	3310      	adds	r3, #16
 801502e:	697a      	ldr	r2, [r7, #20]
 8015030:	429a      	cmp	r2, r3
 8015032:	d214      	bcs.n	801505e <pbuf_add_header_impl+0xa6>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	3310      	adds	r3, #16
 8015038:	461a      	mov	r2, r3
 801503a:	6979      	ldr	r1, [r7, #20]
 801503c:	4819      	ldr	r0, [pc, #100]	@ (80150a4 <pbuf_add_header_impl+0xec>)
 801503e:	f00b fc5d 	bl	80208fc <iprintf>
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015042:	2301      	movs	r3, #1
 8015044:	e024      	b.n	8015090 <pbuf_add_header_impl+0xd8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015046:	79fb      	ldrb	r3, [r7, #7]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d006      	beq.n	801505a <pbuf_add_header_impl+0xa2>
      payload = (u8_t *)p->payload - header_size_increment;
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	685a      	ldr	r2, [r3, #4]
 8015050:	68bb      	ldr	r3, [r7, #8]
 8015052:	425b      	negs	r3, r3
 8015054:	4413      	add	r3, r2
 8015056:	617b      	str	r3, [r7, #20]
 8015058:	e001      	b.n	801505e <pbuf_add_header_impl+0xa6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801505a:	2301      	movs	r3, #1
 801505c:	e018      	b.n	8015090 <pbuf_add_header_impl+0xd8>
    }
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	6859      	ldr	r1, [r3, #4]
 8015062:	8a7b      	ldrh	r3, [r7, #18]
 8015064:	697a      	ldr	r2, [r7, #20]
 8015066:	4810      	ldr	r0, [pc, #64]	@ (80150a8 <pbuf_add_header_impl+0xf0>)
 8015068:	f00b fc48 	bl	80208fc <iprintf>
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	697a      	ldr	r2, [r7, #20]
 8015070:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	895a      	ldrh	r2, [r3, #10]
 8015076:	8a7b      	ldrh	r3, [r7, #18]
 8015078:	4413      	add	r3, r2
 801507a:	b29a      	uxth	r2, r3
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	891a      	ldrh	r2, [r3, #8]
 8015084:	8a7b      	ldrh	r3, [r7, #18]
 8015086:	4413      	add	r3, r2
 8015088:	b29a      	uxth	r2, r3
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	811a      	strh	r2, [r3, #8]


  return 0;
 801508e:	2300      	movs	r3, #0
}
 8015090:	4618      	mov	r0, r3
 8015092:	3718      	adds	r7, #24
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}
 8015098:	08022fd0 	.word	0x08022fd0
 801509c:	080231f8 	.word	0x080231f8
 80150a0:	08023030 	.word	0x08023030
 80150a4:	08023204 	.word	0x08023204
 80150a8:	08023250 	.word	0x08023250

080150ac <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b082      	sub	sp, #8
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80150b6:	2200      	movs	r2, #0
 80150b8:	6839      	ldr	r1, [r7, #0]
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f7ff ff7c 	bl	8014fb8 <pbuf_add_header_impl>
 80150c0:	4603      	mov	r3, r0
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	3708      	adds	r7, #8
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}
	...

080150cc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b084      	sub	sp, #16
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
 80150d4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d106      	bne.n	80150ea <pbuf_remove_header+0x1e>
 80150dc:	4b23      	ldr	r3, [pc, #140]	@ (801516c <pbuf_remove_header+0xa0>)
 80150de:	f240 224b 	movw	r2, #587	@ 0x24b
 80150e2:	4923      	ldr	r1, [pc, #140]	@ (8015170 <pbuf_remove_header+0xa4>)
 80150e4:	4823      	ldr	r0, [pc, #140]	@ (8015174 <pbuf_remove_header+0xa8>)
 80150e6:	f00b fc09 	bl	80208fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d003      	beq.n	80150f8 <pbuf_remove_header+0x2c>
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80150f6:	d301      	bcc.n	80150fc <pbuf_remove_header+0x30>
    return 1;
 80150f8:	2301      	movs	r3, #1
 80150fa:	e033      	b.n	8015164 <pbuf_remove_header+0x98>
  }
  if (header_size_decrement == 0) {
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d101      	bne.n	8015106 <pbuf_remove_header+0x3a>
    return 0;
 8015102:	2300      	movs	r3, #0
 8015104:	e02e      	b.n	8015164 <pbuf_remove_header+0x98>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	895b      	ldrh	r3, [r3, #10]
 801510e:	89fa      	ldrh	r2, [r7, #14]
 8015110:	429a      	cmp	r2, r3
 8015112:	d908      	bls.n	8015126 <pbuf_remove_header+0x5a>
 8015114:	4b15      	ldr	r3, [pc, #84]	@ (801516c <pbuf_remove_header+0xa0>)
 8015116:	f240 2255 	movw	r2, #597	@ 0x255
 801511a:	4917      	ldr	r1, [pc, #92]	@ (8015178 <pbuf_remove_header+0xac>)
 801511c:	4815      	ldr	r0, [pc, #84]	@ (8015174 <pbuf_remove_header+0xa8>)
 801511e:	f00b fbed 	bl	80208fc <iprintf>
 8015122:	2301      	movs	r3, #1
 8015124:	e01e      	b.n	8015164 <pbuf_remove_header+0x98>

  /* remember current payload pointer */
  payload = p->payload;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	685b      	ldr	r3, [r3, #4]
 801512a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	685a      	ldr	r2, [r3, #4]
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	441a      	add	r2, r3
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	895a      	ldrh	r2, [r3, #10]
 801513c:	89fb      	ldrh	r3, [r7, #14]
 801513e:	1ad3      	subs	r3, r2, r3
 8015140:	b29a      	uxth	r2, r3
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	891a      	ldrh	r2, [r3, #8]
 801514a:	89fb      	ldrh	r3, [r7, #14]
 801514c:	1ad3      	subs	r3, r2, r3
 801514e:	b29a      	uxth	r2, r3
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	685a      	ldr	r2, [r3, #4]
 8015158:	89fb      	ldrh	r3, [r7, #14]
 801515a:	68b9      	ldr	r1, [r7, #8]
 801515c:	4807      	ldr	r0, [pc, #28]	@ (801517c <pbuf_remove_header+0xb0>)
 801515e:	f00b fbcd 	bl	80208fc <iprintf>
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015162:	2300      	movs	r3, #0
}
 8015164:	4618      	mov	r0, r3
 8015166:	3710      	adds	r7, #16
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	08022fd0 	.word	0x08022fd0
 8015170:	080231f8 	.word	0x080231f8
 8015174:	08023030 	.word	0x08023030
 8015178:	08023278 	.word	0x08023278
 801517c:	08023298 	.word	0x08023298

08015180 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	460b      	mov	r3, r1
 801518a:	807b      	strh	r3, [r7, #2]
 801518c:	4613      	mov	r3, r2
 801518e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015190:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015194:	2b00      	cmp	r3, #0
 8015196:	da08      	bge.n	80151aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015198:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801519c:	425b      	negs	r3, r3
 801519e:	4619      	mov	r1, r3
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	f7ff ff93 	bl	80150cc <pbuf_remove_header>
 80151a6:	4603      	mov	r3, r0
 80151a8:	e007      	b.n	80151ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80151aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80151ae:	787a      	ldrb	r2, [r7, #1]
 80151b0:	4619      	mov	r1, r3
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f7ff ff00 	bl	8014fb8 <pbuf_add_header_impl>
 80151b8:	4603      	mov	r3, r0
  }
}
 80151ba:	4618      	mov	r0, r3
 80151bc:	3708      	adds	r7, #8
 80151be:	46bd      	mov	sp, r7
 80151c0:	bd80      	pop	{r7, pc}

080151c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80151c2:	b580      	push	{r7, lr}
 80151c4:	b082      	sub	sp, #8
 80151c6:	af00      	add	r7, sp, #0
 80151c8:	6078      	str	r0, [r7, #4]
 80151ca:	460b      	mov	r3, r1
 80151cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80151ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80151d2:	2201      	movs	r2, #1
 80151d4:	4619      	mov	r1, r3
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f7ff ffd2 	bl	8015180 <pbuf_header_impl>
 80151dc:	4603      	mov	r3, r0
}
 80151de:	4618      	mov	r0, r3
 80151e0:	3708      	adds	r7, #8
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}
	...

080151e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b088      	sub	sp, #32
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d10e      	bne.n	8015214 <pbuf_free+0x2c>
    LWIP_ASSERT("p != NULL", p != NULL);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d106      	bne.n	801520a <pbuf_free+0x22>
 80151fc:	4b43      	ldr	r3, [pc, #268]	@ (801530c <pbuf_free+0x124>)
 80151fe:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8015202:	4943      	ldr	r1, [pc, #268]	@ (8015310 <pbuf_free+0x128>)
 8015204:	4843      	ldr	r0, [pc, #268]	@ (8015314 <pbuf_free+0x12c>)
 8015206:	f00b fb79 	bl	80208fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 801520a:	4843      	ldr	r0, [pc, #268]	@ (8015318 <pbuf_free+0x130>)
 801520c:	f00b fbe6 	bl	80209dc <puts>
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015210:	2300      	movs	r3, #0
 8015212:	e077      	b.n	8015304 <pbuf_free+0x11c>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 8015214:	6879      	ldr	r1, [r7, #4]
 8015216:	4841      	ldr	r0, [pc, #260]	@ (801531c <pbuf_free+0x134>)
 8015218:	f00b fb70 	bl	80208fc <iprintf>

  PERF_START;

  count = 0;
 801521c:	2300      	movs	r3, #0
 801521e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015220:	e06c      	b.n	80152fc <pbuf_free+0x114>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015222:	f00a fa09 	bl	801f638 <sys_arch_protect>
 8015226:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	7b9b      	ldrb	r3, [r3, #14]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d106      	bne.n	801523e <pbuf_free+0x56>
 8015230:	4b36      	ldr	r3, [pc, #216]	@ (801530c <pbuf_free+0x124>)
 8015232:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8015236:	493a      	ldr	r1, [pc, #232]	@ (8015320 <pbuf_free+0x138>)
 8015238:	4836      	ldr	r0, [pc, #216]	@ (8015314 <pbuf_free+0x12c>)
 801523a:	f00b fb5f 	bl	80208fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	7b9b      	ldrb	r3, [r3, #14]
 8015242:	3b01      	subs	r3, #1
 8015244:	b2da      	uxtb	r2, r3
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	739a      	strb	r2, [r3, #14]
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	7b9b      	ldrb	r3, [r3, #14]
 801524e:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8015250:	69b8      	ldr	r0, [r7, #24]
 8015252:	f00a f9ff 	bl	801f654 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015256:	7dfb      	ldrb	r3, [r7, #23]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d147      	bne.n	80152ec <pbuf_free+0x104>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 8015262:	6879      	ldr	r1, [r7, #4]
 8015264:	482f      	ldr	r0, [pc, #188]	@ (8015324 <pbuf_free+0x13c>)
 8015266:	f00b fb49 	bl	80208fc <iprintf>
      alloc_src = pbuf_get_allocsrc(p);
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	7b1b      	ldrb	r3, [r3, #12]
 801526e:	f003 030f 	and.w	r3, r3, #15
 8015272:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	7b5b      	ldrb	r3, [r3, #13]
 8015278:	f003 0302 	and.w	r3, r3, #2
 801527c:	2b00      	cmp	r3, #0
 801527e:	d011      	beq.n	80152a4 <pbuf_free+0xbc>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	691b      	ldr	r3, [r3, #16]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d106      	bne.n	801529a <pbuf_free+0xb2>
 801528c:	4b1f      	ldr	r3, [pc, #124]	@ (801530c <pbuf_free+0x124>)
 801528e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8015292:	4925      	ldr	r1, [pc, #148]	@ (8015328 <pbuf_free+0x140>)
 8015294:	481f      	ldr	r0, [pc, #124]	@ (8015314 <pbuf_free+0x12c>)
 8015296:	f00b fb31 	bl	80208fc <iprintf>
        pc->custom_free_function(p);
 801529a:	68bb      	ldr	r3, [r7, #8]
 801529c:	691b      	ldr	r3, [r3, #16]
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	4798      	blx	r3
 80152a2:	e01d      	b.n	80152e0 <pbuf_free+0xf8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80152a4:	7bfb      	ldrb	r3, [r7, #15]
 80152a6:	2b02      	cmp	r3, #2
 80152a8:	d104      	bne.n	80152b4 <pbuf_free+0xcc>
          memp_free(MEMP_PBUF_POOL, p);
 80152aa:	6879      	ldr	r1, [r7, #4]
 80152ac:	200c      	movs	r0, #12
 80152ae:	f7fe ffb5 	bl	801421c <memp_free>
 80152b2:	e015      	b.n	80152e0 <pbuf_free+0xf8>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80152b4:	7bfb      	ldrb	r3, [r7, #15]
 80152b6:	2b01      	cmp	r3, #1
 80152b8:	d104      	bne.n	80152c4 <pbuf_free+0xdc>
          memp_free(MEMP_PBUF, p);
 80152ba:	6879      	ldr	r1, [r7, #4]
 80152bc:	200b      	movs	r0, #11
 80152be:	f7fe ffad 	bl	801421c <memp_free>
 80152c2:	e00d      	b.n	80152e0 <pbuf_free+0xf8>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80152c4:	7bfb      	ldrb	r3, [r7, #15]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d103      	bne.n	80152d2 <pbuf_free+0xea>
          mem_free(p);
 80152ca:	6878      	ldr	r0, [r7, #4]
 80152cc:	f7fe fbc8 	bl	8013a60 <mem_free>
 80152d0:	e006      	b.n	80152e0 <pbuf_free+0xf8>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80152d2:	4b0e      	ldr	r3, [pc, #56]	@ (801530c <pbuf_free+0x124>)
 80152d4:	f240 320f 	movw	r2, #783	@ 0x30f
 80152d8:	4914      	ldr	r1, [pc, #80]	@ (801532c <pbuf_free+0x144>)
 80152da:	480e      	ldr	r0, [pc, #56]	@ (8015314 <pbuf_free+0x12c>)
 80152dc:	f00b fb0e 	bl	80208fc <iprintf>
        }
      }
      count++;
 80152e0:	7ffb      	ldrb	r3, [r7, #31]
 80152e2:	3301      	adds	r3, #1
 80152e4:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	607b      	str	r3, [r7, #4]
 80152ea:	e007      	b.n	80152fc <pbuf_free+0x114>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
 80152ec:	7dfb      	ldrb	r3, [r7, #23]
 80152ee:	461a      	mov	r2, r3
 80152f0:	6879      	ldr	r1, [r7, #4]
 80152f2:	480f      	ldr	r0, [pc, #60]	@ (8015330 <pbuf_free+0x148>)
 80152f4:	f00b fb02 	bl	80208fc <iprintf>
      /* stop walking through the chain */
      p = NULL;
 80152f8:	2300      	movs	r3, #0
 80152fa:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d18f      	bne.n	8015222 <pbuf_free+0x3a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015302:	7ffb      	ldrb	r3, [r7, #31]
}
 8015304:	4618      	mov	r0, r3
 8015306:	3720      	adds	r7, #32
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	08022fd0 	.word	0x08022fd0
 8015310:	080231f8 	.word	0x080231f8
 8015314:	08023030 	.word	0x08023030
 8015318:	080232c4 	.word	0x080232c4
 801531c:	080232e8 	.word	0x080232e8
 8015320:	080232f8 	.word	0x080232f8
 8015324:	08023310 	.word	0x08023310
 8015328:	0802332c 	.word	0x0802332c
 801532c:	08023350 	.word	0x08023350
 8015330:	08023364 	.word	0x08023364

08015334 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015334:	b480      	push	{r7}
 8015336:	b085      	sub	sp, #20
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801533c:	2300      	movs	r3, #0
 801533e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015340:	e005      	b.n	801534e <pbuf_clen+0x1a>
    ++len;
 8015342:	89fb      	ldrh	r3, [r7, #14]
 8015344:	3301      	adds	r3, #1
 8015346:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d1f6      	bne.n	8015342 <pbuf_clen+0xe>
  }
  return len;
 8015354:	89fb      	ldrh	r3, [r7, #14]
}
 8015356:	4618      	mov	r0, r3
 8015358:	3714      	adds	r7, #20
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr
	...

08015364 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b084      	sub	sp, #16
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d016      	beq.n	80153a0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8015372:	f00a f961 	bl	801f638 <sys_arch_protect>
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	7b9b      	ldrb	r3, [r3, #14]
 801537c:	3301      	adds	r3, #1
 801537e:	b2da      	uxtb	r2, r3
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	739a      	strb	r2, [r3, #14]
 8015384:	68f8      	ldr	r0, [r7, #12]
 8015386:	f00a f965 	bl	801f654 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	7b9b      	ldrb	r3, [r3, #14]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d106      	bne.n	80153a0 <pbuf_ref+0x3c>
 8015392:	4b05      	ldr	r3, [pc, #20]	@ (80153a8 <pbuf_ref+0x44>)
 8015394:	f240 3242 	movw	r2, #834	@ 0x342
 8015398:	4904      	ldr	r1, [pc, #16]	@ (80153ac <pbuf_ref+0x48>)
 801539a:	4805      	ldr	r0, [pc, #20]	@ (80153b0 <pbuf_ref+0x4c>)
 801539c:	f00b faae 	bl	80208fc <iprintf>
  }
}
 80153a0:	bf00      	nop
 80153a2:	3710      	adds	r7, #16
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}
 80153a8:	08022fd0 	.word	0x08022fd0
 80153ac:	08023390 	.word	0x08023390
 80153b0:	08023030 	.word	0x08023030

080153b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b084      	sub	sp, #16
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d002      	beq.n	80153ca <pbuf_cat+0x16>
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d107      	bne.n	80153da <pbuf_cat+0x26>
 80153ca:	4b20      	ldr	r3, [pc, #128]	@ (801544c <pbuf_cat+0x98>)
 80153cc:	f240 3259 	movw	r2, #857	@ 0x359
 80153d0:	491f      	ldr	r1, [pc, #124]	@ (8015450 <pbuf_cat+0x9c>)
 80153d2:	4820      	ldr	r0, [pc, #128]	@ (8015454 <pbuf_cat+0xa0>)
 80153d4:	f00b fa92 	bl	80208fc <iprintf>
 80153d8:	e034      	b.n	8015444 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	60fb      	str	r3, [r7, #12]
 80153de:	e00a      	b.n	80153f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	891a      	ldrh	r2, [r3, #8]
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	891b      	ldrh	r3, [r3, #8]
 80153e8:	4413      	add	r3, r2
 80153ea:	b29a      	uxth	r2, r3
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	60fb      	str	r3, [r7, #12]
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d1f0      	bne.n	80153e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	891a      	ldrh	r2, [r3, #8]
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	895b      	ldrh	r3, [r3, #10]
 8015406:	429a      	cmp	r2, r3
 8015408:	d006      	beq.n	8015418 <pbuf_cat+0x64>
 801540a:	4b10      	ldr	r3, [pc, #64]	@ (801544c <pbuf_cat+0x98>)
 801540c:	f240 3262 	movw	r2, #866	@ 0x362
 8015410:	4911      	ldr	r1, [pc, #68]	@ (8015458 <pbuf_cat+0xa4>)
 8015412:	4810      	ldr	r0, [pc, #64]	@ (8015454 <pbuf_cat+0xa0>)
 8015414:	f00b fa72 	bl	80208fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d006      	beq.n	801542e <pbuf_cat+0x7a>
 8015420:	4b0a      	ldr	r3, [pc, #40]	@ (801544c <pbuf_cat+0x98>)
 8015422:	f240 3263 	movw	r2, #867	@ 0x363
 8015426:	490d      	ldr	r1, [pc, #52]	@ (801545c <pbuf_cat+0xa8>)
 8015428:	480a      	ldr	r0, [pc, #40]	@ (8015454 <pbuf_cat+0xa0>)
 801542a:	f00b fa67 	bl	80208fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	891a      	ldrh	r2, [r3, #8]
 8015432:	683b      	ldr	r3, [r7, #0]
 8015434:	891b      	ldrh	r3, [r3, #8]
 8015436:	4413      	add	r3, r2
 8015438:	b29a      	uxth	r2, r3
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	683a      	ldr	r2, [r7, #0]
 8015442:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015444:	3710      	adds	r7, #16
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	08022fd0 	.word	0x08022fd0
 8015450:	080233a4 	.word	0x080233a4
 8015454:	08023030 	.word	0x08023030
 8015458:	080233dc 	.word	0x080233dc
 801545c:	0802340c 	.word	0x0802340c

08015460 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b082      	sub	sp, #8
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
 8015468:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801546a:	6839      	ldr	r1, [r7, #0]
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f7ff ffa1 	bl	80153b4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8015472:	6838      	ldr	r0, [r7, #0]
 8015474:	f7ff ff76 	bl	8015364 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
 8015478:	683a      	ldr	r2, [r7, #0]
 801547a:	6879      	ldr	r1, [r7, #4]
 801547c:	4803      	ldr	r0, [pc, #12]	@ (801548c <pbuf_chain+0x2c>)
 801547e:	f00b fa3d 	bl	80208fc <iprintf>
}
 8015482:	bf00      	nop
 8015484:	3708      	adds	r7, #8
 8015486:	46bd      	mov	sp, r7
 8015488:	bd80      	pop	{r7, pc}
 801548a:	bf00      	nop
 801548c:	0802341c 	.word	0x0802341c

08015490 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b086      	sub	sp, #24
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
 8015498:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801549a:	2300      	movs	r3, #0
 801549c:	617b      	str	r3, [r7, #20]
 801549e:	2300      	movs	r3, #0
 80154a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 80154a2:	683a      	ldr	r2, [r7, #0]
 80154a4:	6879      	ldr	r1, [r7, #4]
 80154a6:	4860      	ldr	r0, [pc, #384]	@ (8015628 <pbuf_copy+0x198>)
 80154a8:	f00b fa28 	bl	80208fc <iprintf>
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d008      	beq.n	80154c4 <pbuf_copy+0x34>
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d005      	beq.n	80154c4 <pbuf_copy+0x34>
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	891a      	ldrh	r2, [r3, #8]
 80154bc:	683b      	ldr	r3, [r7, #0]
 80154be:	891b      	ldrh	r3, [r3, #8]
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d209      	bcs.n	80154d8 <pbuf_copy+0x48>
 80154c4:	4b59      	ldr	r3, [pc, #356]	@ (801562c <pbuf_copy+0x19c>)
 80154c6:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80154ca:	4959      	ldr	r1, [pc, #356]	@ (8015630 <pbuf_copy+0x1a0>)
 80154cc:	4859      	ldr	r0, [pc, #356]	@ (8015634 <pbuf_copy+0x1a4>)
 80154ce:	f00b fa15 	bl	80208fc <iprintf>
 80154d2:	f06f 030f 	mvn.w	r3, #15
 80154d6:	e0a2      	b.n	801561e <pbuf_copy+0x18e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	895b      	ldrh	r3, [r3, #10]
 80154dc:	461a      	mov	r2, r3
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	1ad2      	subs	r2, r2, r3
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	895b      	ldrh	r3, [r3, #10]
 80154e6:	4619      	mov	r1, r3
 80154e8:	693b      	ldr	r3, [r7, #16]
 80154ea:	1acb      	subs	r3, r1, r3
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d306      	bcc.n	80154fe <pbuf_copy+0x6e>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	895b      	ldrh	r3, [r3, #10]
 80154f4:	461a      	mov	r2, r3
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	1ad3      	subs	r3, r2, r3
 80154fa:	60fb      	str	r3, [r7, #12]
 80154fc:	e005      	b.n	801550a <pbuf_copy+0x7a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	895b      	ldrh	r3, [r3, #10]
 8015502:	461a      	mov	r2, r3
 8015504:	697b      	ldr	r3, [r7, #20]
 8015506:	1ad3      	subs	r3, r2, r3
 8015508:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	685a      	ldr	r2, [r3, #4]
 801550e:	697b      	ldr	r3, [r7, #20]
 8015510:	18d0      	adds	r0, r2, r3
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	685a      	ldr	r2, [r3, #4]
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	4413      	add	r3, r2
 801551a:	68fa      	ldr	r2, [r7, #12]
 801551c:	4619      	mov	r1, r3
 801551e:	f00b fbc2 	bl	8020ca6 <memcpy>
    offset_to += len;
 8015522:	697a      	ldr	r2, [r7, #20]
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	4413      	add	r3, r2
 8015528:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801552a:	693a      	ldr	r2, [r7, #16]
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	4413      	add	r3, r2
 8015530:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	895b      	ldrh	r3, [r3, #10]
 8015536:	461a      	mov	r2, r3
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	4293      	cmp	r3, r2
 801553c:	d906      	bls.n	801554c <pbuf_copy+0xbc>
 801553e:	4b3b      	ldr	r3, [pc, #236]	@ (801562c <pbuf_copy+0x19c>)
 8015540:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8015544:	493c      	ldr	r1, [pc, #240]	@ (8015638 <pbuf_copy+0x1a8>)
 8015546:	483b      	ldr	r0, [pc, #236]	@ (8015634 <pbuf_copy+0x1a4>)
 8015548:	f00b f9d8 	bl	80208fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	895b      	ldrh	r3, [r3, #10]
 8015550:	461a      	mov	r2, r3
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	4293      	cmp	r3, r2
 8015556:	d906      	bls.n	8015566 <pbuf_copy+0xd6>
 8015558:	4b34      	ldr	r3, [pc, #208]	@ (801562c <pbuf_copy+0x19c>)
 801555a:	f240 32da 	movw	r2, #986	@ 0x3da
 801555e:	4937      	ldr	r1, [pc, #220]	@ (801563c <pbuf_copy+0x1ac>)
 8015560:	4834      	ldr	r0, [pc, #208]	@ (8015634 <pbuf_copy+0x1a4>)
 8015562:	f00b f9cb 	bl	80208fc <iprintf>
    if (offset_from >= p_from->len) {
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	895b      	ldrh	r3, [r3, #10]
 801556a:	461a      	mov	r2, r3
 801556c:	693b      	ldr	r3, [r7, #16]
 801556e:	4293      	cmp	r3, r2
 8015570:	d304      	bcc.n	801557c <pbuf_copy+0xec>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015572:	2300      	movs	r3, #0
 8015574:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	895b      	ldrh	r3, [r3, #10]
 8015580:	461a      	mov	r2, r3
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	4293      	cmp	r3, r2
 8015586:	d114      	bne.n	80155b2 <pbuf_copy+0x122>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015588:	2300      	movs	r3, #0
 801558a:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d10c      	bne.n	80155b2 <pbuf_copy+0x122>
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d009      	beq.n	80155b2 <pbuf_copy+0x122>
 801559e:	4b23      	ldr	r3, [pc, #140]	@ (801562c <pbuf_copy+0x19c>)
 80155a0:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80155a4:	4926      	ldr	r1, [pc, #152]	@ (8015640 <pbuf_copy+0x1b0>)
 80155a6:	4823      	ldr	r0, [pc, #140]	@ (8015634 <pbuf_copy+0x1a4>)
 80155a8:	f00b f9a8 	bl	80208fc <iprintf>
 80155ac:	f06f 030f 	mvn.w	r3, #15
 80155b0:	e035      	b.n	801561e <pbuf_copy+0x18e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d013      	beq.n	80155e0 <pbuf_copy+0x150>
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	895a      	ldrh	r2, [r3, #10]
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	891b      	ldrh	r3, [r3, #8]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d10d      	bne.n	80155e0 <pbuf_copy+0x150>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d009      	beq.n	80155e0 <pbuf_copy+0x150>
 80155cc:	4b17      	ldr	r3, [pc, #92]	@ (801562c <pbuf_copy+0x19c>)
 80155ce:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80155d2:	491c      	ldr	r1, [pc, #112]	@ (8015644 <pbuf_copy+0x1b4>)
 80155d4:	4817      	ldr	r0, [pc, #92]	@ (8015634 <pbuf_copy+0x1a4>)
 80155d6:	f00b f991 	bl	80208fc <iprintf>
 80155da:	f06f 0305 	mvn.w	r3, #5
 80155de:	e01e      	b.n	801561e <pbuf_copy+0x18e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d013      	beq.n	801560e <pbuf_copy+0x17e>
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	895a      	ldrh	r2, [r3, #10]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	891b      	ldrh	r3, [r3, #8]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d10d      	bne.n	801560e <pbuf_copy+0x17e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d009      	beq.n	801560e <pbuf_copy+0x17e>
 80155fa:	4b0c      	ldr	r3, [pc, #48]	@ (801562c <pbuf_copy+0x19c>)
 80155fc:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8015600:	4910      	ldr	r1, [pc, #64]	@ (8015644 <pbuf_copy+0x1b4>)
 8015602:	480c      	ldr	r0, [pc, #48]	@ (8015634 <pbuf_copy+0x1a4>)
 8015604:	f00b f97a 	bl	80208fc <iprintf>
 8015608:	f06f 0305 	mvn.w	r3, #5
 801560c:	e007      	b.n	801561e <pbuf_copy+0x18e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	2b00      	cmp	r3, #0
 8015612:	f47f af61 	bne.w	80154d8 <pbuf_copy+0x48>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 8015616:	480c      	ldr	r0, [pc, #48]	@ (8015648 <pbuf_copy+0x1b8>)
 8015618:	f00b f9e0 	bl	80209dc <puts>
  return ERR_OK;
 801561c:	2300      	movs	r3, #0
}
 801561e:	4618      	mov	r0, r3
 8015620:	3718      	adds	r7, #24
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}
 8015626:	bf00      	nop
 8015628:	080234d8 	.word	0x080234d8
 801562c:	08022fd0 	.word	0x08022fd0
 8015630:	080234ec 	.word	0x080234ec
 8015634:	08023030 	.word	0x08023030
 8015638:	0802351c 	.word	0x0802351c
 801563c:	08023534 	.word	0x08023534
 8015640:	08023550 	.word	0x08023550
 8015644:	08023560 	.word	0x08023560
 8015648:	0802358c 	.word	0x0802358c

0801564c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b088      	sub	sp, #32
 8015650:	af00      	add	r7, sp, #0
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	4611      	mov	r1, r2
 8015658:	461a      	mov	r2, r3
 801565a:	460b      	mov	r3, r1
 801565c:	80fb      	strh	r3, [r7, #6]
 801565e:	4613      	mov	r3, r2
 8015660:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8015662:	2300      	movs	r3, #0
 8015664:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015666:	2300      	movs	r3, #0
 8015668:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d108      	bne.n	8015682 <pbuf_copy_partial+0x36>
 8015670:	4b2b      	ldr	r3, [pc, #172]	@ (8015720 <pbuf_copy_partial+0xd4>)
 8015672:	f240 420a 	movw	r2, #1034	@ 0x40a
 8015676:	492b      	ldr	r1, [pc, #172]	@ (8015724 <pbuf_copy_partial+0xd8>)
 8015678:	482b      	ldr	r0, [pc, #172]	@ (8015728 <pbuf_copy_partial+0xdc>)
 801567a:	f00b f93f 	bl	80208fc <iprintf>
 801567e:	2300      	movs	r3, #0
 8015680:	e04a      	b.n	8015718 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d108      	bne.n	801569a <pbuf_copy_partial+0x4e>
 8015688:	4b25      	ldr	r3, [pc, #148]	@ (8015720 <pbuf_copy_partial+0xd4>)
 801568a:	f240 420b 	movw	r2, #1035	@ 0x40b
 801568e:	4927      	ldr	r1, [pc, #156]	@ (801572c <pbuf_copy_partial+0xe0>)
 8015690:	4825      	ldr	r0, [pc, #148]	@ (8015728 <pbuf_copy_partial+0xdc>)
 8015692:	f00b f933 	bl	80208fc <iprintf>
 8015696:	2300      	movs	r3, #0
 8015698:	e03e      	b.n	8015718 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	61fb      	str	r3, [r7, #28]
 801569e:	e034      	b.n	801570a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80156a0:	88bb      	ldrh	r3, [r7, #4]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d00a      	beq.n	80156bc <pbuf_copy_partial+0x70>
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	895b      	ldrh	r3, [r3, #10]
 80156aa:	88ba      	ldrh	r2, [r7, #4]
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d305      	bcc.n	80156bc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80156b0:	69fb      	ldr	r3, [r7, #28]
 80156b2:	895b      	ldrh	r3, [r3, #10]
 80156b4:	88ba      	ldrh	r2, [r7, #4]
 80156b6:	1ad3      	subs	r3, r2, r3
 80156b8:	80bb      	strh	r3, [r7, #4]
 80156ba:	e023      	b.n	8015704 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80156bc:	69fb      	ldr	r3, [r7, #28]
 80156be:	895a      	ldrh	r2, [r3, #10]
 80156c0:	88bb      	ldrh	r3, [r7, #4]
 80156c2:	1ad3      	subs	r3, r2, r3
 80156c4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80156c6:	8b3a      	ldrh	r2, [r7, #24]
 80156c8:	88fb      	ldrh	r3, [r7, #6]
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d901      	bls.n	80156d2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80156ce:	88fb      	ldrh	r3, [r7, #6]
 80156d0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80156d2:	8b7b      	ldrh	r3, [r7, #26]
 80156d4:	68ba      	ldr	r2, [r7, #8]
 80156d6:	18d0      	adds	r0, r2, r3
 80156d8:	69fb      	ldr	r3, [r7, #28]
 80156da:	685a      	ldr	r2, [r3, #4]
 80156dc:	88bb      	ldrh	r3, [r7, #4]
 80156de:	4413      	add	r3, r2
 80156e0:	8b3a      	ldrh	r2, [r7, #24]
 80156e2:	4619      	mov	r1, r3
 80156e4:	f00b fadf 	bl	8020ca6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80156e8:	8afa      	ldrh	r2, [r7, #22]
 80156ea:	8b3b      	ldrh	r3, [r7, #24]
 80156ec:	4413      	add	r3, r2
 80156ee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80156f0:	8b7a      	ldrh	r2, [r7, #26]
 80156f2:	8b3b      	ldrh	r3, [r7, #24]
 80156f4:	4413      	add	r3, r2
 80156f6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80156f8:	88fa      	ldrh	r2, [r7, #6]
 80156fa:	8b3b      	ldrh	r3, [r7, #24]
 80156fc:	1ad3      	subs	r3, r2, r3
 80156fe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015700:	2300      	movs	r3, #0
 8015702:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015704:	69fb      	ldr	r3, [r7, #28]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	61fb      	str	r3, [r7, #28]
 801570a:	88fb      	ldrh	r3, [r7, #6]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d002      	beq.n	8015716 <pbuf_copy_partial+0xca>
 8015710:	69fb      	ldr	r3, [r7, #28]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d1c4      	bne.n	80156a0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015716:	8afb      	ldrh	r3, [r7, #22]
}
 8015718:	4618      	mov	r0, r3
 801571a:	3720      	adds	r7, #32
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}
 8015720:	08022fd0 	.word	0x08022fd0
 8015724:	080235b0 	.word	0x080235b0
 8015728:	08023030 	.word	0x08023030
 801572c:	080235d0 	.word	0x080235d0

08015730 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b084      	sub	sp, #16
 8015734:	af00      	add	r7, sp, #0
 8015736:	4603      	mov	r3, r0
 8015738:	603a      	str	r2, [r7, #0]
 801573a:	71fb      	strb	r3, [r7, #7]
 801573c:	460b      	mov	r3, r1
 801573e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	8919      	ldrh	r1, [r3, #8]
 8015744:	88ba      	ldrh	r2, [r7, #4]
 8015746:	79fb      	ldrb	r3, [r7, #7]
 8015748:	4618      	mov	r0, r3
 801574a:	f7ff fa21 	bl	8014b90 <pbuf_alloc>
 801574e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d101      	bne.n	801575a <pbuf_clone+0x2a>
    return NULL;
 8015756:	2300      	movs	r3, #0
 8015758:	e011      	b.n	801577e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801575a:	6839      	ldr	r1, [r7, #0]
 801575c:	68f8      	ldr	r0, [r7, #12]
 801575e:	f7ff fe97 	bl	8015490 <pbuf_copy>
 8015762:	4603      	mov	r3, r0
 8015764:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8015766:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d006      	beq.n	801577c <pbuf_clone+0x4c>
 801576e:	4b06      	ldr	r3, [pc, #24]	@ (8015788 <pbuf_clone+0x58>)
 8015770:	f240 5224 	movw	r2, #1316	@ 0x524
 8015774:	4905      	ldr	r1, [pc, #20]	@ (801578c <pbuf_clone+0x5c>)
 8015776:	4806      	ldr	r0, [pc, #24]	@ (8015790 <pbuf_clone+0x60>)
 8015778:	f00b f8c0 	bl	80208fc <iprintf>
  return q;
 801577c:	68fb      	ldr	r3, [r7, #12]
}
 801577e:	4618      	mov	r0, r3
 8015780:	3710      	adds	r7, #16
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	08022fd0 	.word	0x08022fd0
 801578c:	080236dc 	.word	0x080236dc
 8015790:	08023030 	.word	0x08023030

08015794 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015798:	f00a ffb0 	bl	80206fc <rand>
 801579c:	4603      	mov	r3, r0
 801579e:	b29b      	uxth	r3, r3
 80157a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80157a4:	b29b      	uxth	r3, r3
 80157a6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80157aa:	b29a      	uxth	r2, r3
 80157ac:	4b01      	ldr	r3, [pc, #4]	@ (80157b4 <tcp_init+0x20>)
 80157ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80157b0:	bf00      	nop
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	20000068 	.word	0x20000068

080157b8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	7d1b      	ldrb	r3, [r3, #20]
 80157c4:	2b01      	cmp	r3, #1
 80157c6:	d105      	bne.n	80157d4 <tcp_free+0x1c>
 80157c8:	4b06      	ldr	r3, [pc, #24]	@ (80157e4 <tcp_free+0x2c>)
 80157ca:	22d4      	movs	r2, #212	@ 0xd4
 80157cc:	4906      	ldr	r1, [pc, #24]	@ (80157e8 <tcp_free+0x30>)
 80157ce:	4807      	ldr	r0, [pc, #28]	@ (80157ec <tcp_free+0x34>)
 80157d0:	f00b f894 	bl	80208fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80157d4:	6879      	ldr	r1, [r7, #4]
 80157d6:	2001      	movs	r0, #1
 80157d8:	f7fe fd20 	bl	801421c <memp_free>
}
 80157dc:	bf00      	nop
 80157de:	3708      	adds	r7, #8
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}
 80157e4:	08023768 	.word	0x08023768
 80157e8:	08023798 	.word	0x08023798
 80157ec:	080237ac 	.word	0x080237ac

080157f0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	7d1b      	ldrb	r3, [r3, #20]
 80157fc:	2b01      	cmp	r3, #1
 80157fe:	d105      	bne.n	801580c <tcp_free_listen+0x1c>
 8015800:	4b06      	ldr	r3, [pc, #24]	@ (801581c <tcp_free_listen+0x2c>)
 8015802:	22df      	movs	r2, #223	@ 0xdf
 8015804:	4906      	ldr	r1, [pc, #24]	@ (8015820 <tcp_free_listen+0x30>)
 8015806:	4807      	ldr	r0, [pc, #28]	@ (8015824 <tcp_free_listen+0x34>)
 8015808:	f00b f878 	bl	80208fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801580c:	6879      	ldr	r1, [r7, #4]
 801580e:	2002      	movs	r0, #2
 8015810:	f7fe fd04 	bl	801421c <memp_free>
}
 8015814:	bf00      	nop
 8015816:	3708      	adds	r7, #8
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}
 801581c:	08023768 	.word	0x08023768
 8015820:	080237d4 	.word	0x080237d4
 8015824:	080237ac 	.word	0x080237ac

08015828 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801582c:	f001 f8f6 	bl	8016a1c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015830:	4b07      	ldr	r3, [pc, #28]	@ (8015850 <tcp_tmr+0x28>)
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	3301      	adds	r3, #1
 8015836:	b2da      	uxtb	r2, r3
 8015838:	4b05      	ldr	r3, [pc, #20]	@ (8015850 <tcp_tmr+0x28>)
 801583a:	701a      	strb	r2, [r3, #0]
 801583c:	4b04      	ldr	r3, [pc, #16]	@ (8015850 <tcp_tmr+0x28>)
 801583e:	781b      	ldrb	r3, [r3, #0]
 8015840:	f003 0301 	and.w	r3, r3, #1
 8015844:	2b00      	cmp	r3, #0
 8015846:	d001      	beq.n	801584c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015848:	f000 fda6 	bl	8016398 <tcp_slowtmr>
  }
}
 801584c:	bf00      	nop
 801584e:	bd80      	pop	{r7, pc}
 8015850:	20022abd 	.word	0x20022abd

08015854 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b084      	sub	sp, #16
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801585e:	683b      	ldr	r3, [r7, #0]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d105      	bne.n	8015870 <tcp_remove_listener+0x1c>
 8015864:	4b0d      	ldr	r3, [pc, #52]	@ (801589c <tcp_remove_listener+0x48>)
 8015866:	22ff      	movs	r2, #255	@ 0xff
 8015868:	490d      	ldr	r1, [pc, #52]	@ (80158a0 <tcp_remove_listener+0x4c>)
 801586a:	480e      	ldr	r0, [pc, #56]	@ (80158a4 <tcp_remove_listener+0x50>)
 801586c:	f00b f846 	bl	80208fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	60fb      	str	r3, [r7, #12]
 8015874:	e00a      	b.n	801588c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801587a:	683a      	ldr	r2, [r7, #0]
 801587c:	429a      	cmp	r2, r3
 801587e:	d102      	bne.n	8015886 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	2200      	movs	r2, #0
 8015884:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	68db      	ldr	r3, [r3, #12]
 801588a:	60fb      	str	r3, [r7, #12]
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d1f1      	bne.n	8015876 <tcp_remove_listener+0x22>
    }
  }
}
 8015892:	bf00      	nop
 8015894:	bf00      	nop
 8015896:	3710      	adds	r7, #16
 8015898:	46bd      	mov	sp, r7
 801589a:	bd80      	pop	{r7, pc}
 801589c:	08023768 	.word	0x08023768
 80158a0:	080237f0 	.word	0x080237f0
 80158a4:	080237ac 	.word	0x080237ac

080158a8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b084      	sub	sp, #16
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d106      	bne.n	80158c4 <tcp_listen_closed+0x1c>
 80158b6:	4b14      	ldr	r3, [pc, #80]	@ (8015908 <tcp_listen_closed+0x60>)
 80158b8:	f240 1211 	movw	r2, #273	@ 0x111
 80158bc:	4913      	ldr	r1, [pc, #76]	@ (801590c <tcp_listen_closed+0x64>)
 80158be:	4814      	ldr	r0, [pc, #80]	@ (8015910 <tcp_listen_closed+0x68>)
 80158c0:	f00b f81c 	bl	80208fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	7d1b      	ldrb	r3, [r3, #20]
 80158c8:	2b01      	cmp	r3, #1
 80158ca:	d006      	beq.n	80158da <tcp_listen_closed+0x32>
 80158cc:	4b0e      	ldr	r3, [pc, #56]	@ (8015908 <tcp_listen_closed+0x60>)
 80158ce:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80158d2:	4910      	ldr	r1, [pc, #64]	@ (8015914 <tcp_listen_closed+0x6c>)
 80158d4:	480e      	ldr	r0, [pc, #56]	@ (8015910 <tcp_listen_closed+0x68>)
 80158d6:	f00b f811 	bl	80208fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80158da:	2301      	movs	r3, #1
 80158dc:	60fb      	str	r3, [r7, #12]
 80158de:	e00b      	b.n	80158f8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80158e0:	4a0d      	ldr	r2, [pc, #52]	@ (8015918 <tcp_listen_closed+0x70>)
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	6879      	ldr	r1, [r7, #4]
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7ff ffb1 	bl	8015854 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	3301      	adds	r3, #1
 80158f6:	60fb      	str	r3, [r7, #12]
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	2b03      	cmp	r3, #3
 80158fc:	d9f0      	bls.n	80158e0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80158fe:	bf00      	nop
 8015900:	bf00      	nop
 8015902:	3710      	adds	r7, #16
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}
 8015908:	08023768 	.word	0x08023768
 801590c:	08023818 	.word	0x08023818
 8015910:	080237ac 	.word	0x080237ac
 8015914:	08023824 	.word	0x08023824
 8015918:	080263f8 	.word	0x080263f8

0801591c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801591c:	b5b0      	push	{r4, r5, r7, lr}
 801591e:	b088      	sub	sp, #32
 8015920:	af04      	add	r7, sp, #16
 8015922:	6078      	str	r0, [r7, #4]
 8015924:	460b      	mov	r3, r1
 8015926:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d106      	bne.n	801593c <tcp_close_shutdown+0x20>
 801592e:	4b63      	ldr	r3, [pc, #396]	@ (8015abc <tcp_close_shutdown+0x1a0>)
 8015930:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8015934:	4962      	ldr	r1, [pc, #392]	@ (8015ac0 <tcp_close_shutdown+0x1a4>)
 8015936:	4863      	ldr	r0, [pc, #396]	@ (8015ac4 <tcp_close_shutdown+0x1a8>)
 8015938:	f00a ffe0 	bl	80208fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801593c:	78fb      	ldrb	r3, [r7, #3]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d066      	beq.n	8015a10 <tcp_close_shutdown+0xf4>
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	7d1b      	ldrb	r3, [r3, #20]
 8015946:	2b04      	cmp	r3, #4
 8015948:	d003      	beq.n	8015952 <tcp_close_shutdown+0x36>
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	7d1b      	ldrb	r3, [r3, #20]
 801594e:	2b07      	cmp	r3, #7
 8015950:	d15e      	bne.n	8015a10 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015956:	2b00      	cmp	r3, #0
 8015958:	d104      	bne.n	8015964 <tcp_close_shutdown+0x48>
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801595e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015962:	d055      	beq.n	8015a10 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	8b5b      	ldrh	r3, [r3, #26]
 8015968:	f003 0310 	and.w	r3, r3, #16
 801596c:	2b00      	cmp	r3, #0
 801596e:	d106      	bne.n	801597e <tcp_close_shutdown+0x62>
 8015970:	4b52      	ldr	r3, [pc, #328]	@ (8015abc <tcp_close_shutdown+0x1a0>)
 8015972:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8015976:	4954      	ldr	r1, [pc, #336]	@ (8015ac8 <tcp_close_shutdown+0x1ac>)
 8015978:	4852      	ldr	r0, [pc, #328]	@ (8015ac4 <tcp_close_shutdown+0x1a8>)
 801597a:	f00a ffbf 	bl	80208fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015986:	687d      	ldr	r5, [r7, #4]
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	3304      	adds	r3, #4
 801598c:	687a      	ldr	r2, [r7, #4]
 801598e:	8ad2      	ldrh	r2, [r2, #22]
 8015990:	6879      	ldr	r1, [r7, #4]
 8015992:	8b09      	ldrh	r1, [r1, #24]
 8015994:	9102      	str	r1, [sp, #8]
 8015996:	9201      	str	r2, [sp, #4]
 8015998:	9300      	str	r3, [sp, #0]
 801599a:	462b      	mov	r3, r5
 801599c:	4622      	mov	r2, r4
 801599e:	4601      	mov	r1, r0
 80159a0:	6878      	ldr	r0, [r7, #4]
 80159a2:	f005 fe79 	bl	801b698 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	f001 fbe8 	bl	801717c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80159ac:	4b47      	ldr	r3, [pc, #284]	@ (8015acc <tcp_close_shutdown+0x1b0>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d105      	bne.n	80159c2 <tcp_close_shutdown+0xa6>
 80159b6:	4b45      	ldr	r3, [pc, #276]	@ (8015acc <tcp_close_shutdown+0x1b0>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	4a43      	ldr	r2, [pc, #268]	@ (8015acc <tcp_close_shutdown+0x1b0>)
 80159be:	6013      	str	r3, [r2, #0]
 80159c0:	e013      	b.n	80159ea <tcp_close_shutdown+0xce>
 80159c2:	4b42      	ldr	r3, [pc, #264]	@ (8015acc <tcp_close_shutdown+0x1b0>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	60fb      	str	r3, [r7, #12]
 80159c8:	e00c      	b.n	80159e4 <tcp_close_shutdown+0xc8>
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	68db      	ldr	r3, [r3, #12]
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	429a      	cmp	r2, r3
 80159d2:	d104      	bne.n	80159de <tcp_close_shutdown+0xc2>
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	68da      	ldr	r2, [r3, #12]
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	60da      	str	r2, [r3, #12]
 80159dc:	e005      	b.n	80159ea <tcp_close_shutdown+0xce>
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	68db      	ldr	r3, [r3, #12]
 80159e2:	60fb      	str	r3, [r7, #12]
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d1ef      	bne.n	80159ca <tcp_close_shutdown+0xae>
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	2200      	movs	r2, #0
 80159ee:	60da      	str	r2, [r3, #12]
 80159f0:	4b37      	ldr	r3, [pc, #220]	@ (8015ad0 <tcp_close_shutdown+0x1b4>)
 80159f2:	2201      	movs	r2, #1
 80159f4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80159f6:	4b37      	ldr	r3, [pc, #220]	@ (8015ad4 <tcp_close_shutdown+0x1b8>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	687a      	ldr	r2, [r7, #4]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d102      	bne.n	8015a06 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015a00:	f004 f882 	bl	8019b08 <tcp_trigger_input_pcb_close>
 8015a04:	e002      	b.n	8015a0c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	f7ff fed6 	bl	80157b8 <tcp_free>
      }
      return ERR_OK;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	e050      	b.n	8015ab2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	7d1b      	ldrb	r3, [r3, #20]
 8015a14:	2b02      	cmp	r3, #2
 8015a16:	d03b      	beq.n	8015a90 <tcp_close_shutdown+0x174>
 8015a18:	2b02      	cmp	r3, #2
 8015a1a:	dc44      	bgt.n	8015aa6 <tcp_close_shutdown+0x18a>
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d002      	beq.n	8015a26 <tcp_close_shutdown+0x10a>
 8015a20:	2b01      	cmp	r3, #1
 8015a22:	d02a      	beq.n	8015a7a <tcp_close_shutdown+0x15e>
 8015a24:	e03f      	b.n	8015aa6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	8adb      	ldrh	r3, [r3, #22]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d021      	beq.n	8015a72 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8015ad8 <tcp_close_shutdown+0x1bc>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	687a      	ldr	r2, [r7, #4]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d105      	bne.n	8015a44 <tcp_close_shutdown+0x128>
 8015a38:	4b27      	ldr	r3, [pc, #156]	@ (8015ad8 <tcp_close_shutdown+0x1bc>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	68db      	ldr	r3, [r3, #12]
 8015a3e:	4a26      	ldr	r2, [pc, #152]	@ (8015ad8 <tcp_close_shutdown+0x1bc>)
 8015a40:	6013      	str	r3, [r2, #0]
 8015a42:	e013      	b.n	8015a6c <tcp_close_shutdown+0x150>
 8015a44:	4b24      	ldr	r3, [pc, #144]	@ (8015ad8 <tcp_close_shutdown+0x1bc>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	60bb      	str	r3, [r7, #8]
 8015a4a:	e00c      	b.n	8015a66 <tcp_close_shutdown+0x14a>
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	687a      	ldr	r2, [r7, #4]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d104      	bne.n	8015a60 <tcp_close_shutdown+0x144>
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	68da      	ldr	r2, [r3, #12]
 8015a5a:	68bb      	ldr	r3, [r7, #8]
 8015a5c:	60da      	str	r2, [r3, #12]
 8015a5e:	e005      	b.n	8015a6c <tcp_close_shutdown+0x150>
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	68db      	ldr	r3, [r3, #12]
 8015a64:	60bb      	str	r3, [r7, #8]
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d1ef      	bne.n	8015a4c <tcp_close_shutdown+0x130>
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f7ff fea0 	bl	80157b8 <tcp_free>
      break;
 8015a78:	e01a      	b.n	8015ab0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f7ff ff14 	bl	80158a8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015a80:	6879      	ldr	r1, [r7, #4]
 8015a82:	4816      	ldr	r0, [pc, #88]	@ (8015adc <tcp_close_shutdown+0x1c0>)
 8015a84:	f001 fbca 	bl	801721c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f7ff feb1 	bl	80157f0 <tcp_free_listen>
      break;
 8015a8e:	e00f      	b.n	8015ab0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015a90:	6879      	ldr	r1, [r7, #4]
 8015a92:	480e      	ldr	r0, [pc, #56]	@ (8015acc <tcp_close_shutdown+0x1b0>)
 8015a94:	f001 fbc2 	bl	801721c <tcp_pcb_remove>
 8015a98:	4b0d      	ldr	r3, [pc, #52]	@ (8015ad0 <tcp_close_shutdown+0x1b4>)
 8015a9a:	2201      	movs	r2, #1
 8015a9c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015a9e:	6878      	ldr	r0, [r7, #4]
 8015aa0:	f7ff fe8a 	bl	80157b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015aa4:	e004      	b.n	8015ab0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015aa6:	6878      	ldr	r0, [r7, #4]
 8015aa8:	f000 f81a 	bl	8015ae0 <tcp_close_shutdown_fin>
 8015aac:	4603      	mov	r3, r0
 8015aae:	e000      	b.n	8015ab2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8015ab0:	2300      	movs	r3, #0
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3710      	adds	r7, #16
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8015aba:	bf00      	nop
 8015abc:	08023768 	.word	0x08023768
 8015ac0:	0802383c 	.word	0x0802383c
 8015ac4:	080237ac 	.word	0x080237ac
 8015ac8:	0802385c 	.word	0x0802385c
 8015acc:	20022ab4 	.word	0x20022ab4
 8015ad0:	20022abc 	.word	0x20022abc
 8015ad4:	20022af8 	.word	0x20022af8
 8015ad8:	20022aac 	.word	0x20022aac
 8015adc:	20022ab0 	.word	0x20022ab0

08015ae0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b084      	sub	sp, #16
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d106      	bne.n	8015afc <tcp_close_shutdown_fin+0x1c>
 8015aee:	4b2e      	ldr	r3, [pc, #184]	@ (8015ba8 <tcp_close_shutdown_fin+0xc8>)
 8015af0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8015af4:	492d      	ldr	r1, [pc, #180]	@ (8015bac <tcp_close_shutdown_fin+0xcc>)
 8015af6:	482e      	ldr	r0, [pc, #184]	@ (8015bb0 <tcp_close_shutdown_fin+0xd0>)
 8015af8:	f00a ff00 	bl	80208fc <iprintf>

  switch (pcb->state) {
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	7d1b      	ldrb	r3, [r3, #20]
 8015b00:	2b07      	cmp	r3, #7
 8015b02:	d020      	beq.n	8015b46 <tcp_close_shutdown_fin+0x66>
 8015b04:	2b07      	cmp	r3, #7
 8015b06:	dc2b      	bgt.n	8015b60 <tcp_close_shutdown_fin+0x80>
 8015b08:	2b03      	cmp	r3, #3
 8015b0a:	d002      	beq.n	8015b12 <tcp_close_shutdown_fin+0x32>
 8015b0c:	2b04      	cmp	r3, #4
 8015b0e:	d00d      	beq.n	8015b2c <tcp_close_shutdown_fin+0x4c>
 8015b10:	e026      	b.n	8015b60 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f004 fec2 	bl	801a89c <tcp_send_fin>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d11f      	bne.n	8015b64 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2205      	movs	r2, #5
 8015b28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015b2a:	e01b      	b.n	8015b64 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f004 feb5 	bl	801a89c <tcp_send_fin>
 8015b32:	4603      	mov	r3, r0
 8015b34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d114      	bne.n	8015b68 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2205      	movs	r2, #5
 8015b42:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015b44:	e010      	b.n	8015b68 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f004 fea8 	bl	801a89c <tcp_send_fin>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d109      	bne.n	8015b6c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2209      	movs	r2, #9
 8015b5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015b5e:	e005      	b.n	8015b6c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015b60:	2300      	movs	r3, #0
 8015b62:	e01c      	b.n	8015b9e <tcp_close_shutdown_fin+0xbe>
      break;
 8015b64:	bf00      	nop
 8015b66:	e002      	b.n	8015b6e <tcp_close_shutdown_fin+0x8e>
      break;
 8015b68:	bf00      	nop
 8015b6a:	e000      	b.n	8015b6e <tcp_close_shutdown_fin+0x8e>
      break;
 8015b6c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d103      	bne.n	8015b7e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8015b76:	6878      	ldr	r0, [r7, #4]
 8015b78:	f004 ffce 	bl	801ab18 <tcp_output>
 8015b7c:	e00d      	b.n	8015b9a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015b86:	d108      	bne.n	8015b9a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	8b5b      	ldrh	r3, [r3, #26]
 8015b8c:	f043 0308 	orr.w	r3, r3, #8
 8015b90:	b29a      	uxth	r2, r3
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015b96:	2300      	movs	r3, #0
 8015b98:	e001      	b.n	8015b9e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8015b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3710      	adds	r7, #16
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	08023768 	.word	0x08023768
 8015bac:	08023818 	.word	0x08023818
 8015bb0:	080237ac 	.word	0x080237ac

08015bb4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d109      	bne.n	8015bd6 <tcp_close+0x22>
 8015bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8015c00 <tcp_close+0x4c>)
 8015bc4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8015bc8:	490e      	ldr	r1, [pc, #56]	@ (8015c04 <tcp_close+0x50>)
 8015bca:	480f      	ldr	r0, [pc, #60]	@ (8015c08 <tcp_close+0x54>)
 8015bcc:	f00a fe96 	bl	80208fc <iprintf>
 8015bd0:	f06f 030f 	mvn.w	r3, #15
 8015bd4:	e00f      	b.n	8015bf6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	7d1b      	ldrb	r3, [r3, #20]
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d006      	beq.n	8015bec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	8b5b      	ldrh	r3, [r3, #26]
 8015be2:	f043 0310 	orr.w	r3, r3, #16
 8015be6:	b29a      	uxth	r2, r3
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015bec:	2101      	movs	r1, #1
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f7ff fe94 	bl	801591c <tcp_close_shutdown>
 8015bf4:	4603      	mov	r3, r0
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3708      	adds	r7, #8
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}
 8015bfe:	bf00      	nop
 8015c00:	08023768 	.word	0x08023768
 8015c04:	08023878 	.word	0x08023878
 8015c08:	080237ac 	.word	0x080237ac

08015c0c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b084      	sub	sp, #16
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	60f8      	str	r0, [r7, #12]
 8015c14:	60b9      	str	r1, [r7, #8]
 8015c16:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d109      	bne.n	8015c32 <tcp_shutdown+0x26>
 8015c1e:	4b26      	ldr	r3, [pc, #152]	@ (8015cb8 <tcp_shutdown+0xac>)
 8015c20:	f240 2207 	movw	r2, #519	@ 0x207
 8015c24:	4925      	ldr	r1, [pc, #148]	@ (8015cbc <tcp_shutdown+0xb0>)
 8015c26:	4826      	ldr	r0, [pc, #152]	@ (8015cc0 <tcp_shutdown+0xb4>)
 8015c28:	f00a fe68 	bl	80208fc <iprintf>
 8015c2c:	f06f 030f 	mvn.w	r3, #15
 8015c30:	e03d      	b.n	8015cae <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	7d1b      	ldrb	r3, [r3, #20]
 8015c36:	2b01      	cmp	r3, #1
 8015c38:	d102      	bne.n	8015c40 <tcp_shutdown+0x34>
    return ERR_CONN;
 8015c3a:	f06f 030a 	mvn.w	r3, #10
 8015c3e:	e036      	b.n	8015cae <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015c40:	68bb      	ldr	r3, [r7, #8]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d01b      	beq.n	8015c7e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	8b5b      	ldrh	r3, [r3, #26]
 8015c4a:	f043 0310 	orr.w	r3, r3, #16
 8015c4e:	b29a      	uxth	r2, r3
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d005      	beq.n	8015c66 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8015c5a:	2101      	movs	r1, #1
 8015c5c:	68f8      	ldr	r0, [r7, #12]
 8015c5e:	f7ff fe5d 	bl	801591c <tcp_close_shutdown>
 8015c62:	4603      	mov	r3, r0
 8015c64:	e023      	b.n	8015cae <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d007      	beq.n	8015c7e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7ff fab8 	bl	80151e8 <pbuf_free>
      pcb->refused_data = NULL;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d013      	beq.n	8015cac <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	7d1b      	ldrb	r3, [r3, #20]
 8015c88:	2b04      	cmp	r3, #4
 8015c8a:	dc02      	bgt.n	8015c92 <tcp_shutdown+0x86>
 8015c8c:	2b03      	cmp	r3, #3
 8015c8e:	da02      	bge.n	8015c96 <tcp_shutdown+0x8a>
 8015c90:	e009      	b.n	8015ca6 <tcp_shutdown+0x9a>
 8015c92:	2b07      	cmp	r3, #7
 8015c94:	d107      	bne.n	8015ca6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	b2db      	uxtb	r3, r3
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	68f8      	ldr	r0, [r7, #12]
 8015c9e:	f7ff fe3d 	bl	801591c <tcp_close_shutdown>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	e003      	b.n	8015cae <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8015ca6:	f06f 030a 	mvn.w	r3, #10
 8015caa:	e000      	b.n	8015cae <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8015cac:	2300      	movs	r3, #0
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	08023768 	.word	0x08023768
 8015cbc:	08023890 	.word	0x08023890
 8015cc0:	080237ac 	.word	0x080237ac

08015cc4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b08e      	sub	sp, #56	@ 0x38
 8015cc8:	af04      	add	r7, sp, #16
 8015cca:	6078      	str	r0, [r7, #4]
 8015ccc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d107      	bne.n	8015ce4 <tcp_abandon+0x20>
 8015cd4:	4b52      	ldr	r3, [pc, #328]	@ (8015e20 <tcp_abandon+0x15c>)
 8015cd6:	f240 223d 	movw	r2, #573	@ 0x23d
 8015cda:	4952      	ldr	r1, [pc, #328]	@ (8015e24 <tcp_abandon+0x160>)
 8015cdc:	4852      	ldr	r0, [pc, #328]	@ (8015e28 <tcp_abandon+0x164>)
 8015cde:	f00a fe0d 	bl	80208fc <iprintf>
 8015ce2:	e099      	b.n	8015e18 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	7d1b      	ldrb	r3, [r3, #20]
 8015ce8:	2b01      	cmp	r3, #1
 8015cea:	d106      	bne.n	8015cfa <tcp_abandon+0x36>
 8015cec:	4b4c      	ldr	r3, [pc, #304]	@ (8015e20 <tcp_abandon+0x15c>)
 8015cee:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8015cf2:	494e      	ldr	r1, [pc, #312]	@ (8015e2c <tcp_abandon+0x168>)
 8015cf4:	484c      	ldr	r0, [pc, #304]	@ (8015e28 <tcp_abandon+0x164>)
 8015cf6:	f00a fe01 	bl	80208fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	7d1b      	ldrb	r3, [r3, #20]
 8015cfe:	2b0a      	cmp	r3, #10
 8015d00:	d107      	bne.n	8015d12 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015d02:	6879      	ldr	r1, [r7, #4]
 8015d04:	484a      	ldr	r0, [pc, #296]	@ (8015e30 <tcp_abandon+0x16c>)
 8015d06:	f001 fa89 	bl	801721c <tcp_pcb_remove>
    tcp_free(pcb);
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f7ff fd54 	bl	80157b8 <tcp_free>
 8015d10:	e082      	b.n	8015e18 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015d12:	2300      	movs	r3, #0
 8015d14:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8015d16:	2300      	movs	r3, #0
 8015d18:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015d1e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d24:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015d2c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	691b      	ldr	r3, [r3, #16]
 8015d32:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	7d1b      	ldrb	r3, [r3, #20]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d126      	bne.n	8015d8a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	8adb      	ldrh	r3, [r3, #22]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d02e      	beq.n	8015da2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015d44:	4b3b      	ldr	r3, [pc, #236]	@ (8015e34 <tcp_abandon+0x170>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	687a      	ldr	r2, [r7, #4]
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d105      	bne.n	8015d5a <tcp_abandon+0x96>
 8015d4e:	4b39      	ldr	r3, [pc, #228]	@ (8015e34 <tcp_abandon+0x170>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	68db      	ldr	r3, [r3, #12]
 8015d54:	4a37      	ldr	r2, [pc, #220]	@ (8015e34 <tcp_abandon+0x170>)
 8015d56:	6013      	str	r3, [r2, #0]
 8015d58:	e013      	b.n	8015d82 <tcp_abandon+0xbe>
 8015d5a:	4b36      	ldr	r3, [pc, #216]	@ (8015e34 <tcp_abandon+0x170>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	61fb      	str	r3, [r7, #28]
 8015d60:	e00c      	b.n	8015d7c <tcp_abandon+0xb8>
 8015d62:	69fb      	ldr	r3, [r7, #28]
 8015d64:	68db      	ldr	r3, [r3, #12]
 8015d66:	687a      	ldr	r2, [r7, #4]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d104      	bne.n	8015d76 <tcp_abandon+0xb2>
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	68da      	ldr	r2, [r3, #12]
 8015d70:	69fb      	ldr	r3, [r7, #28]
 8015d72:	60da      	str	r2, [r3, #12]
 8015d74:	e005      	b.n	8015d82 <tcp_abandon+0xbe>
 8015d76:	69fb      	ldr	r3, [r7, #28]
 8015d78:	68db      	ldr	r3, [r3, #12]
 8015d7a:	61fb      	str	r3, [r7, #28]
 8015d7c:	69fb      	ldr	r3, [r7, #28]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d1ef      	bne.n	8015d62 <tcp_abandon+0x9e>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	2200      	movs	r2, #0
 8015d86:	60da      	str	r2, [r3, #12]
 8015d88:	e00b      	b.n	8015da2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	8adb      	ldrh	r3, [r3, #22]
 8015d92:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015d94:	6879      	ldr	r1, [r7, #4]
 8015d96:	4828      	ldr	r0, [pc, #160]	@ (8015e38 <tcp_abandon+0x174>)
 8015d98:	f001 fa40 	bl	801721c <tcp_pcb_remove>
 8015d9c:	4b27      	ldr	r3, [pc, #156]	@ (8015e3c <tcp_abandon+0x178>)
 8015d9e:	2201      	movs	r2, #1
 8015da0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d004      	beq.n	8015db4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015dae:	4618      	mov	r0, r3
 8015db0:	f000 ff14 	bl	8016bdc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d004      	beq.n	8015dc6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f000 ff0b 	bl	8016bdc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d004      	beq.n	8015dd8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f000 ff02 	bl	8016bdc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d00e      	beq.n	8015dfc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015dde:	6879      	ldr	r1, [r7, #4]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	3304      	adds	r3, #4
 8015de4:	687a      	ldr	r2, [r7, #4]
 8015de6:	8b12      	ldrh	r2, [r2, #24]
 8015de8:	9202      	str	r2, [sp, #8]
 8015dea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015dec:	9201      	str	r2, [sp, #4]
 8015dee:	9300      	str	r3, [sp, #0]
 8015df0:	460b      	mov	r3, r1
 8015df2:	697a      	ldr	r2, [r7, #20]
 8015df4:	69b9      	ldr	r1, [r7, #24]
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f005 fc4e 	bl	801b698 <tcp_rst>
    }
    last_state = pcb->state;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	7d1b      	ldrb	r3, [r3, #20]
 8015e00:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f7ff fcd8 	bl	80157b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d004      	beq.n	8015e18 <tcp_abandon+0x154>
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	f06f 010c 	mvn.w	r1, #12
 8015e14:	68f8      	ldr	r0, [r7, #12]
 8015e16:	4798      	blx	r3
  }
}
 8015e18:	3728      	adds	r7, #40	@ 0x28
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
 8015e1e:	bf00      	nop
 8015e20:	08023768 	.word	0x08023768
 8015e24:	080238ac 	.word	0x080238ac
 8015e28:	080237ac 	.word	0x080237ac
 8015e2c:	080238c8 	.word	0x080238c8
 8015e30:	20022ab8 	.word	0x20022ab8
 8015e34:	20022aac 	.word	0x20022aac
 8015e38:	20022ab4 	.word	0x20022ab4
 8015e3c:	20022abc 	.word	0x20022abc

08015e40 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015e48:	2101      	movs	r1, #1
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f7ff ff3a 	bl	8015cc4 <tcp_abandon>
}
 8015e50:	bf00      	nop
 8015e52:	3708      	adds	r7, #8
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}

08015e58 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b088      	sub	sp, #32
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	60f8      	str	r0, [r7, #12]
 8015e60:	60b9      	str	r1, [r7, #8]
 8015e62:	4613      	mov	r3, r2
 8015e64:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015e66:	2304      	movs	r3, #4
 8015e68:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015e6a:	68bb      	ldr	r3, [r7, #8]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d101      	bne.n	8015e74 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015e70:	4b3e      	ldr	r3, [pc, #248]	@ (8015f6c <tcp_bind+0x114>)
 8015e72:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d109      	bne.n	8015e8e <tcp_bind+0x36>
 8015e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8015f70 <tcp_bind+0x118>)
 8015e7c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8015e80:	493c      	ldr	r1, [pc, #240]	@ (8015f74 <tcp_bind+0x11c>)
 8015e82:	483d      	ldr	r0, [pc, #244]	@ (8015f78 <tcp_bind+0x120>)
 8015e84:	f00a fd3a 	bl	80208fc <iprintf>
 8015e88:	f06f 030f 	mvn.w	r3, #15
 8015e8c:	e06a      	b.n	8015f64 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	7d1b      	ldrb	r3, [r3, #20]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d009      	beq.n	8015eaa <tcp_bind+0x52>
 8015e96:	4b36      	ldr	r3, [pc, #216]	@ (8015f70 <tcp_bind+0x118>)
 8015e98:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015e9c:	4937      	ldr	r1, [pc, #220]	@ (8015f7c <tcp_bind+0x124>)
 8015e9e:	4836      	ldr	r0, [pc, #216]	@ (8015f78 <tcp_bind+0x120>)
 8015ea0:	f00a fd2c 	bl	80208fc <iprintf>
 8015ea4:	f06f 0305 	mvn.w	r3, #5
 8015ea8:	e05c      	b.n	8015f64 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8015eaa:	88fb      	ldrh	r3, [r7, #6]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d109      	bne.n	8015ec4 <tcp_bind+0x6c>
    port = tcp_new_port();
 8015eb0:	f000 f914 	bl	80160dc <tcp_new_port>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015eb8:	88fb      	ldrh	r3, [r7, #6]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d135      	bne.n	8015f2a <tcp_bind+0xd2>
      return ERR_BUF;
 8015ebe:	f06f 0301 	mvn.w	r3, #1
 8015ec2:	e04f      	b.n	8015f64 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	61fb      	str	r3, [r7, #28]
 8015ec8:	e02b      	b.n	8015f22 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015eca:	4a2d      	ldr	r2, [pc, #180]	@ (8015f80 <tcp_bind+0x128>)
 8015ecc:	69fb      	ldr	r3, [r7, #28]
 8015ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	61bb      	str	r3, [r7, #24]
 8015ed6:	e01e      	b.n	8015f16 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8015ed8:	69bb      	ldr	r3, [r7, #24]
 8015eda:	8adb      	ldrh	r3, [r3, #22]
 8015edc:	88fa      	ldrh	r2, [r7, #6]
 8015ede:	429a      	cmp	r2, r3
 8015ee0:	d116      	bne.n	8015f10 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8015ee2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d010      	beq.n	8015f0a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015ee8:	69bb      	ldr	r3, [r7, #24]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d00c      	beq.n	8015f0a <tcp_bind+0xb2>
 8015ef0:	68bb      	ldr	r3, [r7, #8]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d009      	beq.n	8015f0a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d005      	beq.n	8015f0a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015efe:	69bb      	ldr	r3, [r7, #24]
 8015f00:	681a      	ldr	r2, [r3, #0]
 8015f02:	68bb      	ldr	r3, [r7, #8]
 8015f04:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015f06:	429a      	cmp	r2, r3
 8015f08:	d102      	bne.n	8015f10 <tcp_bind+0xb8>
              return ERR_USE;
 8015f0a:	f06f 0307 	mvn.w	r3, #7
 8015f0e:	e029      	b.n	8015f64 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015f10:	69bb      	ldr	r3, [r7, #24]
 8015f12:	68db      	ldr	r3, [r3, #12]
 8015f14:	61bb      	str	r3, [r7, #24]
 8015f16:	69bb      	ldr	r3, [r7, #24]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d1dd      	bne.n	8015ed8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	3301      	adds	r3, #1
 8015f20:	61fb      	str	r3, [r7, #28]
 8015f22:	69fa      	ldr	r2, [r7, #28]
 8015f24:	697b      	ldr	r3, [r7, #20]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	dbcf      	blt.n	8015eca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d00c      	beq.n	8015f4a <tcp_bind+0xf2>
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d008      	beq.n	8015f4a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015f38:	68bb      	ldr	r3, [r7, #8]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d002      	beq.n	8015f44 <tcp_bind+0xec>
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	e000      	b.n	8015f46 <tcp_bind+0xee>
 8015f44:	2300      	movs	r3, #0
 8015f46:	68fa      	ldr	r2, [r7, #12]
 8015f48:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	88fa      	ldrh	r2, [r7, #6]
 8015f4e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015f50:	4b0c      	ldr	r3, [pc, #48]	@ (8015f84 <tcp_bind+0x12c>)
 8015f52:	681a      	ldr	r2, [r3, #0]
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	60da      	str	r2, [r3, #12]
 8015f58:	4a0a      	ldr	r2, [pc, #40]	@ (8015f84 <tcp_bind+0x12c>)
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	6013      	str	r3, [r2, #0]
 8015f5e:	f005 fd5d 	bl	801ba1c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015f62:	2300      	movs	r3, #0
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	3720      	adds	r7, #32
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}
 8015f6c:	08026420 	.word	0x08026420
 8015f70:	08023768 	.word	0x08023768
 8015f74:	080238fc 	.word	0x080238fc
 8015f78:	080237ac 	.word	0x080237ac
 8015f7c:	08023914 	.word	0x08023914
 8015f80:	080263f8 	.word	0x080263f8
 8015f84:	20022aac 	.word	0x20022aac

08015f88 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b084      	sub	sp, #16
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d106      	bne.n	8015fa4 <tcp_update_rcv_ann_wnd+0x1c>
 8015f96:	4b25      	ldr	r3, [pc, #148]	@ (801602c <tcp_update_rcv_ann_wnd+0xa4>)
 8015f98:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015f9c:	4924      	ldr	r1, [pc, #144]	@ (8016030 <tcp_update_rcv_ann_wnd+0xa8>)
 8015f9e:	4825      	ldr	r0, [pc, #148]	@ (8016034 <tcp_update_rcv_ann_wnd+0xac>)
 8015fa0:	f00a fcac 	bl	80208fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015fac:	4413      	add	r3, r2
 8015fae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fb4:	687a      	ldr	r2, [r7, #4]
 8015fb6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8015fb8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015fbc:	bf28      	it	cs
 8015fbe:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8015fc2:	b292      	uxth	r2, r2
 8015fc4:	4413      	add	r3, r2
 8015fc6:	68fa      	ldr	r2, [r7, #12]
 8015fc8:	1ad3      	subs	r3, r2, r3
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	db08      	blt.n	8015fe0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fda:	68fa      	ldr	r2, [r7, #12]
 8015fdc:	1ad3      	subs	r3, r2, r3
 8015fde:	e020      	b.n	8016022 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fe8:	1ad3      	subs	r3, r2, r3
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	dd03      	ble.n	8015ff6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015ff4:	e014      	b.n	8016020 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ffe:	1ad3      	subs	r3, r2, r3
 8016000:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016008:	d306      	bcc.n	8016018 <tcp_update_rcv_ann_wnd+0x90>
 801600a:	4b08      	ldr	r3, [pc, #32]	@ (801602c <tcp_update_rcv_ann_wnd+0xa4>)
 801600c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8016010:	4909      	ldr	r1, [pc, #36]	@ (8016038 <tcp_update_rcv_ann_wnd+0xb0>)
 8016012:	4808      	ldr	r0, [pc, #32]	@ (8016034 <tcp_update_rcv_ann_wnd+0xac>)
 8016014:	f00a fc72 	bl	80208fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	b29a      	uxth	r2, r3
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8016020:	2300      	movs	r3, #0
  }
}
 8016022:	4618      	mov	r0, r3
 8016024:	3710      	adds	r7, #16
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}
 801602a:	bf00      	nop
 801602c:	08023768 	.word	0x08023768
 8016030:	080239c4 	.word	0x080239c4
 8016034:	080237ac 	.word	0x080237ac
 8016038:	080239e8 	.word	0x080239e8

0801603c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b084      	sub	sp, #16
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
 8016044:	460b      	mov	r3, r1
 8016046:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d107      	bne.n	801605e <tcp_recved+0x22>
 801604e:	4b1f      	ldr	r3, [pc, #124]	@ (80160cc <tcp_recved+0x90>)
 8016050:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8016054:	491e      	ldr	r1, [pc, #120]	@ (80160d0 <tcp_recved+0x94>)
 8016056:	481f      	ldr	r0, [pc, #124]	@ (80160d4 <tcp_recved+0x98>)
 8016058:	f00a fc50 	bl	80208fc <iprintf>
 801605c:	e032      	b.n	80160c4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	7d1b      	ldrb	r3, [r3, #20]
 8016062:	2b01      	cmp	r3, #1
 8016064:	d106      	bne.n	8016074 <tcp_recved+0x38>
 8016066:	4b19      	ldr	r3, [pc, #100]	@ (80160cc <tcp_recved+0x90>)
 8016068:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801606c:	491a      	ldr	r1, [pc, #104]	@ (80160d8 <tcp_recved+0x9c>)
 801606e:	4819      	ldr	r0, [pc, #100]	@ (80160d4 <tcp_recved+0x98>)
 8016070:	f00a fc44 	bl	80208fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016078:	887b      	ldrh	r3, [r7, #2]
 801607a:	4413      	add	r3, r2
 801607c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801607e:	89fb      	ldrh	r3, [r7, #14]
 8016080:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016084:	d804      	bhi.n	8016090 <tcp_recved+0x54>
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801608a:	89fa      	ldrh	r2, [r7, #14]
 801608c:	429a      	cmp	r2, r3
 801608e:	d204      	bcs.n	801609a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016096:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016098:	e002      	b.n	80160a0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	89fa      	ldrh	r2, [r7, #14]
 801609e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f7ff ff71 	bl	8015f88 <tcp_update_rcv_ann_wnd>
 80160a6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80160a8:	68bb      	ldr	r3, [r7, #8]
 80160aa:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80160ae:	d309      	bcc.n	80160c4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	8b5b      	ldrh	r3, [r3, #26]
 80160b4:	f043 0302 	orr.w	r3, r3, #2
 80160b8:	b29a      	uxth	r2, r3
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f004 fd2a 	bl	801ab18 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80160c4:	3710      	adds	r7, #16
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}
 80160ca:	bf00      	nop
 80160cc:	08023768 	.word	0x08023768
 80160d0:	08023a04 	.word	0x08023a04
 80160d4:	080237ac 	.word	0x080237ac
 80160d8:	08023a1c 	.word	0x08023a1c

080160dc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80160dc:	b480      	push	{r7}
 80160de:	b083      	sub	sp, #12
 80160e0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80160e2:	2300      	movs	r3, #0
 80160e4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80160e6:	4b1e      	ldr	r3, [pc, #120]	@ (8016160 <tcp_new_port+0x84>)
 80160e8:	881b      	ldrh	r3, [r3, #0]
 80160ea:	3301      	adds	r3, #1
 80160ec:	b29a      	uxth	r2, r3
 80160ee:	4b1c      	ldr	r3, [pc, #112]	@ (8016160 <tcp_new_port+0x84>)
 80160f0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80160f2:	4b1b      	ldr	r3, [pc, #108]	@ (8016160 <tcp_new_port+0x84>)
 80160f4:	881b      	ldrh	r3, [r3, #0]
 80160f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80160fa:	4293      	cmp	r3, r2
 80160fc:	d103      	bne.n	8016106 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80160fe:	4b18      	ldr	r3, [pc, #96]	@ (8016160 <tcp_new_port+0x84>)
 8016100:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8016104:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016106:	2300      	movs	r3, #0
 8016108:	71fb      	strb	r3, [r7, #7]
 801610a:	e01e      	b.n	801614a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801610c:	79fb      	ldrb	r3, [r7, #7]
 801610e:	4a15      	ldr	r2, [pc, #84]	@ (8016164 <tcp_new_port+0x88>)
 8016110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	603b      	str	r3, [r7, #0]
 8016118:	e011      	b.n	801613e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	8ada      	ldrh	r2, [r3, #22]
 801611e:	4b10      	ldr	r3, [pc, #64]	@ (8016160 <tcp_new_port+0x84>)
 8016120:	881b      	ldrh	r3, [r3, #0]
 8016122:	429a      	cmp	r2, r3
 8016124:	d108      	bne.n	8016138 <tcp_new_port+0x5c>
        n++;
 8016126:	88bb      	ldrh	r3, [r7, #4]
 8016128:	3301      	adds	r3, #1
 801612a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801612c:	88bb      	ldrh	r3, [r7, #4]
 801612e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016132:	d3d8      	bcc.n	80160e6 <tcp_new_port+0xa>
          return 0;
 8016134:	2300      	movs	r3, #0
 8016136:	e00d      	b.n	8016154 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016138:	683b      	ldr	r3, [r7, #0]
 801613a:	68db      	ldr	r3, [r3, #12]
 801613c:	603b      	str	r3, [r7, #0]
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d1ea      	bne.n	801611a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016144:	79fb      	ldrb	r3, [r7, #7]
 8016146:	3301      	adds	r3, #1
 8016148:	71fb      	strb	r3, [r7, #7]
 801614a:	79fb      	ldrb	r3, [r7, #7]
 801614c:	2b03      	cmp	r3, #3
 801614e:	d9dd      	bls.n	801610c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016150:	4b03      	ldr	r3, [pc, #12]	@ (8016160 <tcp_new_port+0x84>)
 8016152:	881b      	ldrh	r3, [r3, #0]
}
 8016154:	4618      	mov	r0, r3
 8016156:	370c      	adds	r7, #12
 8016158:	46bd      	mov	sp, r7
 801615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615e:	4770      	bx	lr
 8016160:	20000068 	.word	0x20000068
 8016164:	080263f8 	.word	0x080263f8

08016168 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b08a      	sub	sp, #40	@ 0x28
 801616c:	af00      	add	r7, sp, #0
 801616e:	60f8      	str	r0, [r7, #12]
 8016170:	60b9      	str	r1, [r7, #8]
 8016172:	603b      	str	r3, [r7, #0]
 8016174:	4613      	mov	r3, r2
 8016176:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8016178:	2300      	movs	r3, #0
 801617a:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d109      	bne.n	8016196 <tcp_connect+0x2e>
 8016182:	4b7d      	ldr	r3, [pc, #500]	@ (8016378 <tcp_connect+0x210>)
 8016184:	f240 4235 	movw	r2, #1077	@ 0x435
 8016188:	497c      	ldr	r1, [pc, #496]	@ (801637c <tcp_connect+0x214>)
 801618a:	487d      	ldr	r0, [pc, #500]	@ (8016380 <tcp_connect+0x218>)
 801618c:	f00a fbb6 	bl	80208fc <iprintf>
 8016190:	f06f 030f 	mvn.w	r3, #15
 8016194:	e0ec      	b.n	8016370 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d109      	bne.n	80161b0 <tcp_connect+0x48>
 801619c:	4b76      	ldr	r3, [pc, #472]	@ (8016378 <tcp_connect+0x210>)
 801619e:	f240 4236 	movw	r2, #1078	@ 0x436
 80161a2:	4978      	ldr	r1, [pc, #480]	@ (8016384 <tcp_connect+0x21c>)
 80161a4:	4876      	ldr	r0, [pc, #472]	@ (8016380 <tcp_connect+0x218>)
 80161a6:	f00a fba9 	bl	80208fc <iprintf>
 80161aa:	f06f 030f 	mvn.w	r3, #15
 80161ae:	e0df      	b.n	8016370 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	7d1b      	ldrb	r3, [r3, #20]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d009      	beq.n	80161cc <tcp_connect+0x64>
 80161b8:	4b6f      	ldr	r3, [pc, #444]	@ (8016378 <tcp_connect+0x210>)
 80161ba:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 80161be:	4972      	ldr	r1, [pc, #456]	@ (8016388 <tcp_connect+0x220>)
 80161c0:	486f      	ldr	r0, [pc, #444]	@ (8016380 <tcp_connect+0x218>)
 80161c2:	f00a fb9b 	bl	80208fc <iprintf>
 80161c6:	f06f 0309 	mvn.w	r3, #9
 80161ca:	e0d1      	b.n	8016370 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d002      	beq.n	80161d8 <tcp_connect+0x70>
 80161d2:	68bb      	ldr	r3, [r7, #8]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	e000      	b.n	80161da <tcp_connect+0x72>
 80161d8:	2300      	movs	r3, #0
 80161da:	68fa      	ldr	r2, [r7, #12]
 80161dc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	88fa      	ldrh	r2, [r7, #6]
 80161e2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	7a1b      	ldrb	r3, [r3, #8]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d006      	beq.n	80161fa <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	7a1b      	ldrb	r3, [r3, #8]
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7fe fc1f 	bl	8014a34 <netif_get_by_index>
 80161f6:	6278      	str	r0, [r7, #36]	@ 0x24
 80161f8:	e005      	b.n	8016206 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	3304      	adds	r3, #4
 80161fe:	4618      	mov	r0, r3
 8016200:	f007 fe96 	bl	801df30 <ip4_route>
 8016204:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8016206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016208:	2b00      	cmp	r3, #0
 801620a:	d102      	bne.n	8016212 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801620c:	f06f 0303 	mvn.w	r3, #3
 8016210:	e0ae      	b.n	8016370 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d003      	beq.n	8016220 <tcp_connect+0xb8>
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d111      	bne.n	8016244 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016222:	2b00      	cmp	r3, #0
 8016224:	d002      	beq.n	801622c <tcp_connect+0xc4>
 8016226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016228:	3304      	adds	r3, #4
 801622a:	e000      	b.n	801622e <tcp_connect+0xc6>
 801622c:	2300      	movs	r3, #0
 801622e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016230:	69fb      	ldr	r3, [r7, #28]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d102      	bne.n	801623c <tcp_connect+0xd4>
      return ERR_RTE;
 8016236:	f06f 0303 	mvn.w	r3, #3
 801623a:	e099      	b.n	8016370 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801623c:	69fb      	ldr	r3, [r7, #28]
 801623e:	681a      	ldr	r2, [r3, #0]
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	8adb      	ldrh	r3, [r3, #22]
 8016248:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	8adb      	ldrh	r3, [r3, #22]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d10c      	bne.n	801626c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8016252:	f7ff ff43 	bl	80160dc <tcp_new_port>
 8016256:	4603      	mov	r3, r0
 8016258:	461a      	mov	r2, r3
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	8adb      	ldrh	r3, [r3, #22]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d102      	bne.n	801626c <tcp_connect+0x104>
      return ERR_BUF;
 8016266:	f06f 0301 	mvn.w	r3, #1
 801626a:	e081      	b.n	8016370 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801626c:	68f8      	ldr	r0, [r7, #12]
 801626e:	f001 f869 	bl	8017344 <tcp_next_iss>
 8016272:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	2200      	movs	r2, #0
 8016278:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	697a      	ldr	r2, [r7, #20]
 801627e:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8016280:	697b      	ldr	r3, [r7, #20]
 8016282:	1e5a      	subs	r2, r3, #1
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8016288:	697b      	ldr	r3, [r7, #20]
 801628a:	1e5a      	subs	r2, r3, #1
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8016290:	697b      	ldr	r3, [r7, #20]
 8016292:	1e5a      	subs	r2, r3, #1
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801629e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80162b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80162c0:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	3304      	adds	r3, #4
 80162ca:	461a      	mov	r2, r3
 80162cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80162ce:	f001 f85f 	bl	8017390 <tcp_eff_send_mss_netif>
 80162d2:	4603      	mov	r3, r0
 80162d4:	461a      	mov	r2, r3
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2201      	movs	r2, #1
 80162de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	683a      	ldr	r2, [r7, #0]
 80162e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80162ea:	2102      	movs	r1, #2
 80162ec:	68f8      	ldr	r0, [r7, #12]
 80162ee:	f004 fb25 	bl	801a93c <tcp_enqueue_flags>
 80162f2:	4603      	mov	r3, r0
 80162f4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80162f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d136      	bne.n	801636c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	2202      	movs	r2, #2
 8016302:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8016304:	8b7b      	ldrh	r3, [r7, #26]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d021      	beq.n	801634e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801630a:	4b20      	ldr	r3, [pc, #128]	@ (801638c <tcp_connect+0x224>)
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	68fa      	ldr	r2, [r7, #12]
 8016310:	429a      	cmp	r2, r3
 8016312:	d105      	bne.n	8016320 <tcp_connect+0x1b8>
 8016314:	4b1d      	ldr	r3, [pc, #116]	@ (801638c <tcp_connect+0x224>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	68db      	ldr	r3, [r3, #12]
 801631a:	4a1c      	ldr	r2, [pc, #112]	@ (801638c <tcp_connect+0x224>)
 801631c:	6013      	str	r3, [r2, #0]
 801631e:	e013      	b.n	8016348 <tcp_connect+0x1e0>
 8016320:	4b1a      	ldr	r3, [pc, #104]	@ (801638c <tcp_connect+0x224>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	623b      	str	r3, [r7, #32]
 8016326:	e00c      	b.n	8016342 <tcp_connect+0x1da>
 8016328:	6a3b      	ldr	r3, [r7, #32]
 801632a:	68db      	ldr	r3, [r3, #12]
 801632c:	68fa      	ldr	r2, [r7, #12]
 801632e:	429a      	cmp	r2, r3
 8016330:	d104      	bne.n	801633c <tcp_connect+0x1d4>
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	68da      	ldr	r2, [r3, #12]
 8016336:	6a3b      	ldr	r3, [r7, #32]
 8016338:	60da      	str	r2, [r3, #12]
 801633a:	e005      	b.n	8016348 <tcp_connect+0x1e0>
 801633c:	6a3b      	ldr	r3, [r7, #32]
 801633e:	68db      	ldr	r3, [r3, #12]
 8016340:	623b      	str	r3, [r7, #32]
 8016342:	6a3b      	ldr	r3, [r7, #32]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d1ef      	bne.n	8016328 <tcp_connect+0x1c0>
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	2200      	movs	r2, #0
 801634c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801634e:	4b10      	ldr	r3, [pc, #64]	@ (8016390 <tcp_connect+0x228>)
 8016350:	681a      	ldr	r2, [r3, #0]
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	60da      	str	r2, [r3, #12]
 8016356:	4a0e      	ldr	r2, [pc, #56]	@ (8016390 <tcp_connect+0x228>)
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	6013      	str	r3, [r2, #0]
 801635c:	f005 fb5e 	bl	801ba1c <tcp_timer_needed>
 8016360:	4b0c      	ldr	r3, [pc, #48]	@ (8016394 <tcp_connect+0x22c>)
 8016362:	2201      	movs	r2, #1
 8016364:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8016366:	68f8      	ldr	r0, [r7, #12]
 8016368:	f004 fbd6 	bl	801ab18 <tcp_output>
  }
  return ret;
 801636c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8016370:	4618      	mov	r0, r3
 8016372:	3728      	adds	r7, #40	@ 0x28
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	08023768 	.word	0x08023768
 801637c:	08023a44 	.word	0x08023a44
 8016380:	080237ac 	.word	0x080237ac
 8016384:	08023a60 	.word	0x08023a60
 8016388:	08023a7c 	.word	0x08023a7c
 801638c:	20022aac 	.word	0x20022aac
 8016390:	20022ab4 	.word	0x20022ab4
 8016394:	20022abc 	.word	0x20022abc

08016398 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016398:	b5b0      	push	{r4, r5, r7, lr}
 801639a:	b090      	sub	sp, #64	@ 0x40
 801639c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801639e:	2300      	movs	r3, #0
 80163a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80163a4:	4b95      	ldr	r3, [pc, #596]	@ (80165fc <tcp_slowtmr+0x264>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	3301      	adds	r3, #1
 80163aa:	4a94      	ldr	r2, [pc, #592]	@ (80165fc <tcp_slowtmr+0x264>)
 80163ac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80163ae:	4b94      	ldr	r3, [pc, #592]	@ (8016600 <tcp_slowtmr+0x268>)
 80163b0:	781b      	ldrb	r3, [r3, #0]
 80163b2:	3301      	adds	r3, #1
 80163b4:	b2da      	uxtb	r2, r3
 80163b6:	4b92      	ldr	r3, [pc, #584]	@ (8016600 <tcp_slowtmr+0x268>)
 80163b8:	701a      	strb	r2, [r3, #0]
 80163ba:	e000      	b.n	80163be <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80163bc:	bf00      	nop
  prev = NULL;
 80163be:	2300      	movs	r3, #0
 80163c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80163c2:	4b90      	ldr	r3, [pc, #576]	@ (8016604 <tcp_slowtmr+0x26c>)
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80163c8:	e29d      	b.n	8016906 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80163ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163cc:	7d1b      	ldrb	r3, [r3, #20]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d106      	bne.n	80163e0 <tcp_slowtmr+0x48>
 80163d2:	4b8d      	ldr	r3, [pc, #564]	@ (8016608 <tcp_slowtmr+0x270>)
 80163d4:	f240 42be 	movw	r2, #1214	@ 0x4be
 80163d8:	498c      	ldr	r1, [pc, #560]	@ (801660c <tcp_slowtmr+0x274>)
 80163da:	488d      	ldr	r0, [pc, #564]	@ (8016610 <tcp_slowtmr+0x278>)
 80163dc:	f00a fa8e 	bl	80208fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80163e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163e2:	7d1b      	ldrb	r3, [r3, #20]
 80163e4:	2b01      	cmp	r3, #1
 80163e6:	d106      	bne.n	80163f6 <tcp_slowtmr+0x5e>
 80163e8:	4b87      	ldr	r3, [pc, #540]	@ (8016608 <tcp_slowtmr+0x270>)
 80163ea:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80163ee:	4989      	ldr	r1, [pc, #548]	@ (8016614 <tcp_slowtmr+0x27c>)
 80163f0:	4887      	ldr	r0, [pc, #540]	@ (8016610 <tcp_slowtmr+0x278>)
 80163f2:	f00a fa83 	bl	80208fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80163f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163f8:	7d1b      	ldrb	r3, [r3, #20]
 80163fa:	2b0a      	cmp	r3, #10
 80163fc:	d106      	bne.n	801640c <tcp_slowtmr+0x74>
 80163fe:	4b82      	ldr	r3, [pc, #520]	@ (8016608 <tcp_slowtmr+0x270>)
 8016400:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8016404:	4984      	ldr	r1, [pc, #528]	@ (8016618 <tcp_slowtmr+0x280>)
 8016406:	4882      	ldr	r0, [pc, #520]	@ (8016610 <tcp_slowtmr+0x278>)
 8016408:	f00a fa78 	bl	80208fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801640c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801640e:	7f9a      	ldrb	r2, [r3, #30]
 8016410:	4b7b      	ldr	r3, [pc, #492]	@ (8016600 <tcp_slowtmr+0x268>)
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	429a      	cmp	r2, r3
 8016416:	d105      	bne.n	8016424 <tcp_slowtmr+0x8c>
      prev = pcb;
 8016418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801641a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801641c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801641e:	68db      	ldr	r3, [r3, #12]
 8016420:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8016422:	e270      	b.n	8016906 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8016424:	4b76      	ldr	r3, [pc, #472]	@ (8016600 <tcp_slowtmr+0x268>)
 8016426:	781a      	ldrb	r2, [r3, #0]
 8016428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801642a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801642c:	2300      	movs	r3, #0
 801642e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8016432:	2300      	movs	r3, #0
 8016434:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801643a:	7d1b      	ldrb	r3, [r3, #20]
 801643c:	2b02      	cmp	r3, #2
 801643e:	d10a      	bne.n	8016456 <tcp_slowtmr+0xbe>
 8016440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016442:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016446:	2b05      	cmp	r3, #5
 8016448:	d905      	bls.n	8016456 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801644a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801644e:	3301      	adds	r3, #1
 8016450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8016454:	e11e      	b.n	8016694 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016458:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801645c:	2b0b      	cmp	r3, #11
 801645e:	d905      	bls.n	801646c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8016460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016464:	3301      	adds	r3, #1
 8016466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801646a:	e113      	b.n	8016694 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801646e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016472:	2b00      	cmp	r3, #0
 8016474:	d075      	beq.n	8016562 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801647a:	2b00      	cmp	r3, #0
 801647c:	d006      	beq.n	801648c <tcp_slowtmr+0xf4>
 801647e:	4b62      	ldr	r3, [pc, #392]	@ (8016608 <tcp_slowtmr+0x270>)
 8016480:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8016484:	4965      	ldr	r1, [pc, #404]	@ (801661c <tcp_slowtmr+0x284>)
 8016486:	4862      	ldr	r0, [pc, #392]	@ (8016610 <tcp_slowtmr+0x278>)
 8016488:	f00a fa38 	bl	80208fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801648e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016490:	2b00      	cmp	r3, #0
 8016492:	d106      	bne.n	80164a2 <tcp_slowtmr+0x10a>
 8016494:	4b5c      	ldr	r3, [pc, #368]	@ (8016608 <tcp_slowtmr+0x270>)
 8016496:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801649a:	4961      	ldr	r1, [pc, #388]	@ (8016620 <tcp_slowtmr+0x288>)
 801649c:	485c      	ldr	r0, [pc, #368]	@ (8016610 <tcp_slowtmr+0x278>)
 801649e:	f00a fa2d 	bl	80208fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80164a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164a4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80164a8:	2b0b      	cmp	r3, #11
 80164aa:	d905      	bls.n	80164b8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80164ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80164b0:	3301      	adds	r3, #1
 80164b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80164b6:	e0ed      	b.n	8016694 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80164b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80164be:	3b01      	subs	r3, #1
 80164c0:	4a58      	ldr	r2, [pc, #352]	@ (8016624 <tcp_slowtmr+0x28c>)
 80164c2:	5cd3      	ldrb	r3, [r2, r3]
 80164c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80164c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80164cc:	7c7a      	ldrb	r2, [r7, #17]
 80164ce:	429a      	cmp	r2, r3
 80164d0:	d907      	bls.n	80164e2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80164d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80164d8:	3301      	adds	r3, #1
 80164da:	b2da      	uxtb	r2, r3
 80164dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164de:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80164e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80164e8:	7c7a      	ldrb	r2, [r7, #17]
 80164ea:	429a      	cmp	r2, r3
 80164ec:	f200 80d2 	bhi.w	8016694 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80164f0:	2301      	movs	r3, #1
 80164f2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80164f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d108      	bne.n	8016510 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80164fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016500:	f005 f9be 	bl	801b880 <tcp_zero_window_probe>
 8016504:	4603      	mov	r3, r0
 8016506:	2b00      	cmp	r3, #0
 8016508:	d014      	beq.n	8016534 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801650a:	2300      	movs	r3, #0
 801650c:	623b      	str	r3, [r7, #32]
 801650e:	e011      	b.n	8016534 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016516:	4619      	mov	r1, r3
 8016518:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801651a:	f004 f873 	bl	801a604 <tcp_split_unsent_seg>
 801651e:	4603      	mov	r3, r0
 8016520:	2b00      	cmp	r3, #0
 8016522:	d107      	bne.n	8016534 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8016524:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016526:	f004 faf7 	bl	801ab18 <tcp_output>
 801652a:	4603      	mov	r3, r0
 801652c:	2b00      	cmp	r3, #0
 801652e:	d101      	bne.n	8016534 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8016530:	2300      	movs	r3, #0
 8016532:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8016534:	6a3b      	ldr	r3, [r7, #32]
 8016536:	2b00      	cmp	r3, #0
 8016538:	f000 80ac 	beq.w	8016694 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801653c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801653e:	2200      	movs	r2, #0
 8016540:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016546:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801654a:	2b06      	cmp	r3, #6
 801654c:	f200 80a2 	bhi.w	8016694 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8016550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016552:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016556:	3301      	adds	r3, #1
 8016558:	b2da      	uxtb	r2, r3
 801655a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801655c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8016560:	e098      	b.n	8016694 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8016562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016564:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016568:	2b00      	cmp	r3, #0
 801656a:	db0f      	blt.n	801658c <tcp_slowtmr+0x1f4>
 801656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801656e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016572:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016576:	4293      	cmp	r3, r2
 8016578:	d008      	beq.n	801658c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801657a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801657c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016580:	b29b      	uxth	r3, r3
 8016582:	3301      	adds	r3, #1
 8016584:	b29b      	uxth	r3, r3
 8016586:	b21a      	sxth	r2, r3
 8016588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801658a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801658c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801658e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8016592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016594:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8016598:	429a      	cmp	r2, r3
 801659a:	db7b      	blt.n	8016694 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801659c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801659e:	f004 fdb1 	bl	801b104 <tcp_rexmit_rto_prepare>
 80165a2:	4603      	mov	r3, r0
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d007      	beq.n	80165b8 <tcp_slowtmr+0x220>
 80165a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d171      	bne.n	8016694 <tcp_slowtmr+0x2fc>
 80165b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d06d      	beq.n	8016694 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80165b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165ba:	7d1b      	ldrb	r3, [r3, #20]
 80165bc:	2b02      	cmp	r3, #2
 80165be:	d03a      	beq.n	8016636 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80165c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80165c6:	2b0c      	cmp	r3, #12
 80165c8:	bf28      	it	cs
 80165ca:	230c      	movcs	r3, #12
 80165cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80165ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80165d4:	10db      	asrs	r3, r3, #3
 80165d6:	b21b      	sxth	r3, r3
 80165d8:	461a      	mov	r2, r3
 80165da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80165e0:	4413      	add	r3, r2
 80165e2:	7efa      	ldrb	r2, [r7, #27]
 80165e4:	4910      	ldr	r1, [pc, #64]	@ (8016628 <tcp_slowtmr+0x290>)
 80165e6:	5c8a      	ldrb	r2, [r1, r2]
 80165e8:	4093      	lsls	r3, r2
 80165ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80165f2:	4293      	cmp	r3, r2
 80165f4:	dc1a      	bgt.n	801662c <tcp_slowtmr+0x294>
 80165f6:	697b      	ldr	r3, [r7, #20]
 80165f8:	b21a      	sxth	r2, r3
 80165fa:	e019      	b.n	8016630 <tcp_slowtmr+0x298>
 80165fc:	20022aa8 	.word	0x20022aa8
 8016600:	20022abe 	.word	0x20022abe
 8016604:	20022ab4 	.word	0x20022ab4
 8016608:	08023768 	.word	0x08023768
 801660c:	08023aac 	.word	0x08023aac
 8016610:	080237ac 	.word	0x080237ac
 8016614:	08023ad8 	.word	0x08023ad8
 8016618:	08023b04 	.word	0x08023b04
 801661c:	08023b34 	.word	0x08023b34
 8016620:	08023b68 	.word	0x08023b68
 8016624:	080263f0 	.word	0x080263f0
 8016628:	080263e0 	.word	0x080263e0
 801662c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016632:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8016636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016638:	2200      	movs	r2, #0
 801663a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801663c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801663e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016644:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016648:	4293      	cmp	r3, r2
 801664a:	bf28      	it	cs
 801664c:	4613      	movcs	r3, r2
 801664e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8016650:	8a7b      	ldrh	r3, [r7, #18]
 8016652:	085b      	lsrs	r3, r3, #1
 8016654:	b29a      	uxth	r2, r3
 8016656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016658:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801665c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801665e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016664:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016666:	005b      	lsls	r3, r3, #1
 8016668:	b29b      	uxth	r3, r3
 801666a:	429a      	cmp	r2, r3
 801666c:	d206      	bcs.n	801667c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801666e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016670:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016672:	005b      	lsls	r3, r3, #1
 8016674:	b29a      	uxth	r2, r3
 8016676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016678:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801667e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8016680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016682:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8016686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016688:	2200      	movs	r2, #0
 801668a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801668e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016690:	f004 fdb2 	bl	801b1f8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8016694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016696:	7d1b      	ldrb	r3, [r3, #20]
 8016698:	2b06      	cmp	r3, #6
 801669a:	d111      	bne.n	80166c0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801669c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801669e:	8b5b      	ldrh	r3, [r3, #26]
 80166a0:	f003 0310 	and.w	r3, r3, #16
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d00b      	beq.n	80166c0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80166a8:	4b9c      	ldr	r3, [pc, #624]	@ (801691c <tcp_slowtmr+0x584>)
 80166aa:	681a      	ldr	r2, [r3, #0]
 80166ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ae:	6a1b      	ldr	r3, [r3, #32]
 80166b0:	1ad3      	subs	r3, r2, r3
 80166b2:	2b28      	cmp	r3, #40	@ 0x28
 80166b4:	d904      	bls.n	80166c0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80166b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166ba:	3301      	adds	r3, #1
 80166bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80166c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166c2:	7a5b      	ldrb	r3, [r3, #9]
 80166c4:	f003 0308 	and.w	r3, r3, #8
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d04a      	beq.n	8016762 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80166cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80166d0:	2b04      	cmp	r3, #4
 80166d2:	d003      	beq.n	80166dc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80166d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80166d8:	2b07      	cmp	r3, #7
 80166da:	d142      	bne.n	8016762 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80166dc:	4b8f      	ldr	r3, [pc, #572]	@ (801691c <tcp_slowtmr+0x584>)
 80166de:	681a      	ldr	r2, [r3, #0]
 80166e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166e2:	6a1b      	ldr	r3, [r3, #32]
 80166e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80166e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166e8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80166ec:	4b8c      	ldr	r3, [pc, #560]	@ (8016920 <tcp_slowtmr+0x588>)
 80166ee:	440b      	add	r3, r1
 80166f0:	498c      	ldr	r1, [pc, #560]	@ (8016924 <tcp_slowtmr+0x58c>)
 80166f2:	fba1 1303 	umull	r1, r3, r1, r3
 80166f6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80166f8:	429a      	cmp	r2, r3
 80166fa:	d90a      	bls.n	8016712 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80166fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016700:	3301      	adds	r3, #1
 8016702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8016706:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801670a:	3301      	adds	r3, #1
 801670c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016710:	e027      	b.n	8016762 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016712:	4b82      	ldr	r3, [pc, #520]	@ (801691c <tcp_slowtmr+0x584>)
 8016714:	681a      	ldr	r2, [r3, #0]
 8016716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016718:	6a1b      	ldr	r3, [r3, #32]
 801671a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801671e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8016722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016724:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016728:	4618      	mov	r0, r3
 801672a:	4b7f      	ldr	r3, [pc, #508]	@ (8016928 <tcp_slowtmr+0x590>)
 801672c:	fb00 f303 	mul.w	r3, r0, r3
 8016730:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016732:	497c      	ldr	r1, [pc, #496]	@ (8016924 <tcp_slowtmr+0x58c>)
 8016734:	fba1 1303 	umull	r1, r3, r1, r3
 8016738:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801673a:	429a      	cmp	r2, r3
 801673c:	d911      	bls.n	8016762 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801673e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016740:	f005 f85e 	bl	801b800 <tcp_keepalive>
 8016744:	4603      	mov	r3, r0
 8016746:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801674a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801674e:	2b00      	cmp	r3, #0
 8016750:	d107      	bne.n	8016762 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8016752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016754:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016758:	3301      	adds	r3, #1
 801675a:	b2da      	uxtb	r2, r3
 801675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801675e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8016762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016766:	2b00      	cmp	r3, #0
 8016768:	d011      	beq.n	801678e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801676a:	4b6c      	ldr	r3, [pc, #432]	@ (801691c <tcp_slowtmr+0x584>)
 801676c:	681a      	ldr	r2, [r3, #0]
 801676e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016770:	6a1b      	ldr	r3, [r3, #32]
 8016772:	1ad2      	subs	r2, r2, r3
 8016774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016776:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801677a:	4619      	mov	r1, r3
 801677c:	460b      	mov	r3, r1
 801677e:	005b      	lsls	r3, r3, #1
 8016780:	440b      	add	r3, r1
 8016782:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016784:	429a      	cmp	r2, r3
 8016786:	d302      	bcc.n	801678e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8016788:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801678a:	f000 feb1 	bl	80174f0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801678e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016790:	7d1b      	ldrb	r3, [r3, #20]
 8016792:	2b03      	cmp	r3, #3
 8016794:	d10b      	bne.n	80167ae <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016796:	4b61      	ldr	r3, [pc, #388]	@ (801691c <tcp_slowtmr+0x584>)
 8016798:	681a      	ldr	r2, [r3, #0]
 801679a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801679c:	6a1b      	ldr	r3, [r3, #32]
 801679e:	1ad3      	subs	r3, r2, r3
 80167a0:	2b28      	cmp	r3, #40	@ 0x28
 80167a2:	d904      	bls.n	80167ae <tcp_slowtmr+0x416>
        ++pcb_remove;
 80167a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80167a8:	3301      	adds	r3, #1
 80167aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80167ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167b0:	7d1b      	ldrb	r3, [r3, #20]
 80167b2:	2b09      	cmp	r3, #9
 80167b4:	d10b      	bne.n	80167ce <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80167b6:	4b59      	ldr	r3, [pc, #356]	@ (801691c <tcp_slowtmr+0x584>)
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167bc:	6a1b      	ldr	r3, [r3, #32]
 80167be:	1ad3      	subs	r3, r2, r3
 80167c0:	2bf0      	cmp	r3, #240	@ 0xf0
 80167c2:	d904      	bls.n	80167ce <tcp_slowtmr+0x436>
        ++pcb_remove;
 80167c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80167c8:	3301      	adds	r3, #1
 80167ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80167ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d060      	beq.n	8016898 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80167d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80167dc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80167de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80167e0:	f000 fccc 	bl	801717c <tcp_pcb_purge>
      if (prev != NULL) {
 80167e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d010      	beq.n	801680c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80167ea:	4b50      	ldr	r3, [pc, #320]	@ (801692c <tcp_slowtmr+0x594>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d106      	bne.n	8016802 <tcp_slowtmr+0x46a>
 80167f4:	4b4e      	ldr	r3, [pc, #312]	@ (8016930 <tcp_slowtmr+0x598>)
 80167f6:	f240 526d 	movw	r2, #1389	@ 0x56d
 80167fa:	494e      	ldr	r1, [pc, #312]	@ (8016934 <tcp_slowtmr+0x59c>)
 80167fc:	484e      	ldr	r0, [pc, #312]	@ (8016938 <tcp_slowtmr+0x5a0>)
 80167fe:	f00a f87d 	bl	80208fc <iprintf>
        prev->next = pcb->next;
 8016802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016804:	68da      	ldr	r2, [r3, #12]
 8016806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016808:	60da      	str	r2, [r3, #12]
 801680a:	e00f      	b.n	801682c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801680c:	4b47      	ldr	r3, [pc, #284]	@ (801692c <tcp_slowtmr+0x594>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016812:	429a      	cmp	r2, r3
 8016814:	d006      	beq.n	8016824 <tcp_slowtmr+0x48c>
 8016816:	4b46      	ldr	r3, [pc, #280]	@ (8016930 <tcp_slowtmr+0x598>)
 8016818:	f240 5271 	movw	r2, #1393	@ 0x571
 801681c:	4947      	ldr	r1, [pc, #284]	@ (801693c <tcp_slowtmr+0x5a4>)
 801681e:	4846      	ldr	r0, [pc, #280]	@ (8016938 <tcp_slowtmr+0x5a0>)
 8016820:	f00a f86c 	bl	80208fc <iprintf>
        tcp_active_pcbs = pcb->next;
 8016824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016826:	68db      	ldr	r3, [r3, #12]
 8016828:	4a40      	ldr	r2, [pc, #256]	@ (801692c <tcp_slowtmr+0x594>)
 801682a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801682c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016830:	2b00      	cmp	r3, #0
 8016832:	d013      	beq.n	801685c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016836:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8016838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801683a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801683c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801683e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016840:	3304      	adds	r3, #4
 8016842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016844:	8ad2      	ldrh	r2, [r2, #22]
 8016846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016848:	8b09      	ldrh	r1, [r1, #24]
 801684a:	9102      	str	r1, [sp, #8]
 801684c:	9201      	str	r2, [sp, #4]
 801684e:	9300      	str	r3, [sp, #0]
 8016850:	462b      	mov	r3, r5
 8016852:	4622      	mov	r2, r4
 8016854:	4601      	mov	r1, r0
 8016856:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016858:	f004 ff1e 	bl	801b698 <tcp_rst>
      err_arg = pcb->callback_arg;
 801685c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801685e:	691b      	ldr	r3, [r3, #16]
 8016860:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016864:	7d1b      	ldrb	r3, [r3, #20]
 8016866:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801686a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801686c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801686e:	68db      	ldr	r3, [r3, #12]
 8016870:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8016872:	6838      	ldr	r0, [r7, #0]
 8016874:	f7fe ffa0 	bl	80157b8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8016878:	4b31      	ldr	r3, [pc, #196]	@ (8016940 <tcp_slowtmr+0x5a8>)
 801687a:	2200      	movs	r2, #0
 801687c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d004      	beq.n	801688e <tcp_slowtmr+0x4f6>
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f06f 010c 	mvn.w	r1, #12
 801688a:	68b8      	ldr	r0, [r7, #8]
 801688c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801688e:	4b2c      	ldr	r3, [pc, #176]	@ (8016940 <tcp_slowtmr+0x5a8>)
 8016890:	781b      	ldrb	r3, [r3, #0]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d037      	beq.n	8016906 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8016896:	e592      	b.n	80163be <tcp_slowtmr+0x26>
      prev = pcb;
 8016898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801689a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801689c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801689e:	68db      	ldr	r3, [r3, #12]
 80168a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80168a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168a4:	7f1b      	ldrb	r3, [r3, #28]
 80168a6:	3301      	adds	r3, #1
 80168a8:	b2da      	uxtb	r2, r3
 80168aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80168ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168b0:	7f1a      	ldrb	r2, [r3, #28]
 80168b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168b4:	7f5b      	ldrb	r3, [r3, #29]
 80168b6:	429a      	cmp	r2, r3
 80168b8:	d325      	bcc.n	8016906 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80168ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168bc:	2200      	movs	r2, #0
 80168be:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80168c0:	4b1f      	ldr	r3, [pc, #124]	@ (8016940 <tcp_slowtmr+0x5a8>)
 80168c2:	2200      	movs	r2, #0
 80168c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80168c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d00b      	beq.n	80168e8 <tcp_slowtmr+0x550>
 80168d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80168d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80168d8:	6912      	ldr	r2, [r2, #16]
 80168da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80168dc:	4610      	mov	r0, r2
 80168de:	4798      	blx	r3
 80168e0:	4603      	mov	r3, r0
 80168e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80168e6:	e002      	b.n	80168ee <tcp_slowtmr+0x556>
 80168e8:	2300      	movs	r3, #0
 80168ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80168ee:	4b14      	ldr	r3, [pc, #80]	@ (8016940 <tcp_slowtmr+0x5a8>)
 80168f0:	781b      	ldrb	r3, [r3, #0]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	f47f ad62 	bne.w	80163bc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80168f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d102      	bne.n	8016906 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8016900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016902:	f004 f909 	bl	801ab18 <tcp_output>
  while (pcb != NULL) {
 8016906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016908:	2b00      	cmp	r3, #0
 801690a:	f47f ad5e 	bne.w	80163ca <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801690e:	2300      	movs	r3, #0
 8016910:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8016912:	4b0c      	ldr	r3, [pc, #48]	@ (8016944 <tcp_slowtmr+0x5ac>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016918:	e069      	b.n	80169ee <tcp_slowtmr+0x656>
 801691a:	bf00      	nop
 801691c:	20022aa8 	.word	0x20022aa8
 8016920:	000a4cb8 	.word	0x000a4cb8
 8016924:	10624dd3 	.word	0x10624dd3
 8016928:	000124f8 	.word	0x000124f8
 801692c:	20022ab4 	.word	0x20022ab4
 8016930:	08023768 	.word	0x08023768
 8016934:	08023ba0 	.word	0x08023ba0
 8016938:	080237ac 	.word	0x080237ac
 801693c:	08023bcc 	.word	0x08023bcc
 8016940:	20022abc 	.word	0x20022abc
 8016944:	20022ab8 	.word	0x20022ab8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801694a:	7d1b      	ldrb	r3, [r3, #20]
 801694c:	2b0a      	cmp	r3, #10
 801694e:	d006      	beq.n	801695e <tcp_slowtmr+0x5c6>
 8016950:	4b2b      	ldr	r3, [pc, #172]	@ (8016a00 <tcp_slowtmr+0x668>)
 8016952:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8016956:	492b      	ldr	r1, [pc, #172]	@ (8016a04 <tcp_slowtmr+0x66c>)
 8016958:	482b      	ldr	r0, [pc, #172]	@ (8016a08 <tcp_slowtmr+0x670>)
 801695a:	f009 ffcf 	bl	80208fc <iprintf>
    pcb_remove = 0;
 801695e:	2300      	movs	r3, #0
 8016960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016964:	4b29      	ldr	r3, [pc, #164]	@ (8016a0c <tcp_slowtmr+0x674>)
 8016966:	681a      	ldr	r2, [r3, #0]
 8016968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801696a:	6a1b      	ldr	r3, [r3, #32]
 801696c:	1ad3      	subs	r3, r2, r3
 801696e:	2bf0      	cmp	r3, #240	@ 0xf0
 8016970:	d904      	bls.n	801697c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8016972:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016976:	3301      	adds	r3, #1
 8016978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801697c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016980:	2b00      	cmp	r3, #0
 8016982:	d02f      	beq.n	80169e4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016986:	f000 fbf9 	bl	801717c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801698a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801698c:	2b00      	cmp	r3, #0
 801698e:	d010      	beq.n	80169b2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016990:	4b1f      	ldr	r3, [pc, #124]	@ (8016a10 <tcp_slowtmr+0x678>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016996:	429a      	cmp	r2, r3
 8016998:	d106      	bne.n	80169a8 <tcp_slowtmr+0x610>
 801699a:	4b19      	ldr	r3, [pc, #100]	@ (8016a00 <tcp_slowtmr+0x668>)
 801699c:	f240 52af 	movw	r2, #1455	@ 0x5af
 80169a0:	491c      	ldr	r1, [pc, #112]	@ (8016a14 <tcp_slowtmr+0x67c>)
 80169a2:	4819      	ldr	r0, [pc, #100]	@ (8016a08 <tcp_slowtmr+0x670>)
 80169a4:	f009 ffaa 	bl	80208fc <iprintf>
        prev->next = pcb->next;
 80169a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169aa:	68da      	ldr	r2, [r3, #12]
 80169ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169ae:	60da      	str	r2, [r3, #12]
 80169b0:	e00f      	b.n	80169d2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80169b2:	4b17      	ldr	r3, [pc, #92]	@ (8016a10 <tcp_slowtmr+0x678>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d006      	beq.n	80169ca <tcp_slowtmr+0x632>
 80169bc:	4b10      	ldr	r3, [pc, #64]	@ (8016a00 <tcp_slowtmr+0x668>)
 80169be:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80169c2:	4915      	ldr	r1, [pc, #84]	@ (8016a18 <tcp_slowtmr+0x680>)
 80169c4:	4810      	ldr	r0, [pc, #64]	@ (8016a08 <tcp_slowtmr+0x670>)
 80169c6:	f009 ff99 	bl	80208fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80169ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169cc:	68db      	ldr	r3, [r3, #12]
 80169ce:	4a10      	ldr	r2, [pc, #64]	@ (8016a10 <tcp_slowtmr+0x678>)
 80169d0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80169d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169d4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80169d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169d8:	68db      	ldr	r3, [r3, #12]
 80169da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80169dc:	69f8      	ldr	r0, [r7, #28]
 80169de:	f7fe feeb 	bl	80157b8 <tcp_free>
 80169e2:	e004      	b.n	80169ee <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80169e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80169e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169ea:	68db      	ldr	r3, [r3, #12]
 80169ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80169ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d1a9      	bne.n	8016948 <tcp_slowtmr+0x5b0>
    }
  }
}
 80169f4:	bf00      	nop
 80169f6:	bf00      	nop
 80169f8:	3730      	adds	r7, #48	@ 0x30
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bdb0      	pop	{r4, r5, r7, pc}
 80169fe:	bf00      	nop
 8016a00:	08023768 	.word	0x08023768
 8016a04:	08023bf8 	.word	0x08023bf8
 8016a08:	080237ac 	.word	0x080237ac
 8016a0c:	20022aa8 	.word	0x20022aa8
 8016a10:	20022ab8 	.word	0x20022ab8
 8016a14:	08023c28 	.word	0x08023c28
 8016a18:	08023c50 	.word	0x08023c50

08016a1c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8016a22:	4b2d      	ldr	r3, [pc, #180]	@ (8016ad8 <tcp_fasttmr+0xbc>)
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	3301      	adds	r3, #1
 8016a28:	b2da      	uxtb	r2, r3
 8016a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8016ad8 <tcp_fasttmr+0xbc>)
 8016a2c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8016adc <tcp_fasttmr+0xc0>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016a34:	e048      	b.n	8016ac8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	7f9a      	ldrb	r2, [r3, #30]
 8016a3a:	4b27      	ldr	r3, [pc, #156]	@ (8016ad8 <tcp_fasttmr+0xbc>)
 8016a3c:	781b      	ldrb	r3, [r3, #0]
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d03f      	beq.n	8016ac2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016a42:	4b25      	ldr	r3, [pc, #148]	@ (8016ad8 <tcp_fasttmr+0xbc>)
 8016a44:	781a      	ldrb	r2, [r3, #0]
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	8b5b      	ldrh	r3, [r3, #26]
 8016a4e:	f003 0301 	and.w	r3, r3, #1
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d010      	beq.n	8016a78 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	8b5b      	ldrh	r3, [r3, #26]
 8016a5a:	f043 0302 	orr.w	r3, r3, #2
 8016a5e:	b29a      	uxth	r2, r3
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f004 f857 	bl	801ab18 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	8b5b      	ldrh	r3, [r3, #26]
 8016a6e:	f023 0303 	bic.w	r3, r3, #3
 8016a72:	b29a      	uxth	r2, r3
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	8b5b      	ldrh	r3, [r3, #26]
 8016a7c:	f003 0308 	and.w	r3, r3, #8
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d009      	beq.n	8016a98 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	8b5b      	ldrh	r3, [r3, #26]
 8016a88:	f023 0308 	bic.w	r3, r3, #8
 8016a8c:	b29a      	uxth	r2, r3
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f7ff f824 	bl	8015ae0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	68db      	ldr	r3, [r3, #12]
 8016a9c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d00a      	beq.n	8016abc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8016ae0 <tcp_fasttmr+0xc4>)
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f000 f819 	bl	8016ae4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8016ae0 <tcp_fasttmr+0xc4>)
 8016ab4:	781b      	ldrb	r3, [r3, #0]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d000      	beq.n	8016abc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8016aba:	e7b8      	b.n	8016a2e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	607b      	str	r3, [r7, #4]
 8016ac0:	e002      	b.n	8016ac8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	68db      	ldr	r3, [r3, #12]
 8016ac6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d1b3      	bne.n	8016a36 <tcp_fasttmr+0x1a>
    }
  }
}
 8016ace:	bf00      	nop
 8016ad0:	bf00      	nop
 8016ad2:	3708      	adds	r7, #8
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}
 8016ad8:	20022abe 	.word	0x20022abe
 8016adc:	20022ab4 	.word	0x20022ab4
 8016ae0:	20022abc 	.word	0x20022abc

08016ae4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016ae4:	b590      	push	{r4, r7, lr}
 8016ae6:	b085      	sub	sp, #20
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d109      	bne.n	8016b06 <tcp_process_refused_data+0x22>
 8016af2:	4b37      	ldr	r3, [pc, #220]	@ (8016bd0 <tcp_process_refused_data+0xec>)
 8016af4:	f240 6209 	movw	r2, #1545	@ 0x609
 8016af8:	4936      	ldr	r1, [pc, #216]	@ (8016bd4 <tcp_process_refused_data+0xf0>)
 8016afa:	4837      	ldr	r0, [pc, #220]	@ (8016bd8 <tcp_process_refused_data+0xf4>)
 8016afc:	f009 fefe 	bl	80208fc <iprintf>
 8016b00:	f06f 030f 	mvn.w	r3, #15
 8016b04:	e060      	b.n	8016bc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016b0a:	7b5b      	ldrb	r3, [r3, #13]
 8016b0c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016b12:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	2200      	movs	r2, #0
 8016b18:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d00b      	beq.n	8016b3c <tcp_process_refused_data+0x58>
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6918      	ldr	r0, [r3, #16]
 8016b2e:	2300      	movs	r3, #0
 8016b30:	68ba      	ldr	r2, [r7, #8]
 8016b32:	6879      	ldr	r1, [r7, #4]
 8016b34:	47a0      	blx	r4
 8016b36:	4603      	mov	r3, r0
 8016b38:	73fb      	strb	r3, [r7, #15]
 8016b3a:	e007      	b.n	8016b4c <tcp_process_refused_data+0x68>
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	68ba      	ldr	r2, [r7, #8]
 8016b40:	6879      	ldr	r1, [r7, #4]
 8016b42:	2000      	movs	r0, #0
 8016b44:	f000 f8a4 	bl	8016c90 <tcp_recv_null>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d12a      	bne.n	8016baa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016b54:	7bbb      	ldrb	r3, [r7, #14]
 8016b56:	f003 0320 	and.w	r3, r3, #32
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d033      	beq.n	8016bc6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b62:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016b66:	d005      	beq.n	8016b74 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b6c:	3301      	adds	r3, #1
 8016b6e:	b29a      	uxth	r2, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d00b      	beq.n	8016b96 <tcp_process_refused_data+0xb2>
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	6918      	ldr	r0, [r3, #16]
 8016b88:	2300      	movs	r3, #0
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	6879      	ldr	r1, [r7, #4]
 8016b8e:	47a0      	blx	r4
 8016b90:	4603      	mov	r3, r0
 8016b92:	73fb      	strb	r3, [r7, #15]
 8016b94:	e001      	b.n	8016b9a <tcp_process_refused_data+0xb6>
 8016b96:	2300      	movs	r3, #0
 8016b98:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b9e:	f113 0f0d 	cmn.w	r3, #13
 8016ba2:	d110      	bne.n	8016bc6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016ba4:	f06f 030c 	mvn.w	r3, #12
 8016ba8:	e00e      	b.n	8016bc8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8016baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bae:	f113 0f0d 	cmn.w	r3, #13
 8016bb2:	d102      	bne.n	8016bba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016bb4:	f06f 030c 	mvn.w	r3, #12
 8016bb8:	e006      	b.n	8016bc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	68ba      	ldr	r2, [r7, #8]
 8016bbe:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8016bc0:	f06f 0304 	mvn.w	r3, #4
 8016bc4:	e000      	b.n	8016bc8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8016bc6:	2300      	movs	r3, #0
}
 8016bc8:	4618      	mov	r0, r3
 8016bca:	3714      	adds	r7, #20
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd90      	pop	{r4, r7, pc}
 8016bd0:	08023768 	.word	0x08023768
 8016bd4:	08023c78 	.word	0x08023c78
 8016bd8:	080237ac 	.word	0x080237ac

08016bdc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b084      	sub	sp, #16
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016be4:	e007      	b.n	8016bf6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f000 f80a 	bl	8016c06 <tcp_seg_free>
    seg = next;
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d1f4      	bne.n	8016be6 <tcp_segs_free+0xa>
  }
}
 8016bfc:	bf00      	nop
 8016bfe:	bf00      	nop
 8016c00:	3710      	adds	r7, #16
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}

08016c06 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016c06:	b580      	push	{r7, lr}
 8016c08:	b082      	sub	sp, #8
 8016c0a:	af00      	add	r7, sp, #0
 8016c0c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d00c      	beq.n	8016c2e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	685b      	ldr	r3, [r3, #4]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d004      	beq.n	8016c26 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7fe fae1 	bl	80151e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016c26:	6879      	ldr	r1, [r7, #4]
 8016c28:	2003      	movs	r0, #3
 8016c2a:	f7fd faf7 	bl	801421c <memp_free>
  }
}
 8016c2e:	bf00      	nop
 8016c30:	3708      	adds	r7, #8
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}
	...

08016c38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b084      	sub	sp, #16
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d106      	bne.n	8016c54 <tcp_seg_copy+0x1c>
 8016c46:	4b0f      	ldr	r3, [pc, #60]	@ (8016c84 <tcp_seg_copy+0x4c>)
 8016c48:	f240 6282 	movw	r2, #1666	@ 0x682
 8016c4c:	490e      	ldr	r1, [pc, #56]	@ (8016c88 <tcp_seg_copy+0x50>)
 8016c4e:	480f      	ldr	r0, [pc, #60]	@ (8016c8c <tcp_seg_copy+0x54>)
 8016c50:	f009 fe54 	bl	80208fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016c54:	2003      	movs	r0, #3
 8016c56:	f7fd fa6b 	bl	8014130 <memp_malloc>
 8016c5a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d101      	bne.n	8016c66 <tcp_seg_copy+0x2e>
    return NULL;
 8016c62:	2300      	movs	r3, #0
 8016c64:	e00a      	b.n	8016c7c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016c66:	2214      	movs	r2, #20
 8016c68:	6879      	ldr	r1, [r7, #4]
 8016c6a:	68f8      	ldr	r0, [r7, #12]
 8016c6c:	f00a f81b 	bl	8020ca6 <memcpy>
  pbuf_ref(cseg->p);
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	685b      	ldr	r3, [r3, #4]
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7fe fb75 	bl	8015364 <pbuf_ref>
  return cseg;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3710      	adds	r7, #16
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}
 8016c84:	08023768 	.word	0x08023768
 8016c88:	08023cbc 	.word	0x08023cbc
 8016c8c:	080237ac 	.word	0x080237ac

08016c90 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b084      	sub	sp, #16
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	60f8      	str	r0, [r7, #12]
 8016c98:	60b9      	str	r1, [r7, #8]
 8016c9a:	607a      	str	r2, [r7, #4]
 8016c9c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016c9e:	68bb      	ldr	r3, [r7, #8]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d109      	bne.n	8016cb8 <tcp_recv_null+0x28>
 8016ca4:	4b12      	ldr	r3, [pc, #72]	@ (8016cf0 <tcp_recv_null+0x60>)
 8016ca6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016caa:	4912      	ldr	r1, [pc, #72]	@ (8016cf4 <tcp_recv_null+0x64>)
 8016cac:	4812      	ldr	r0, [pc, #72]	@ (8016cf8 <tcp_recv_null+0x68>)
 8016cae:	f009 fe25 	bl	80208fc <iprintf>
 8016cb2:	f06f 030f 	mvn.w	r3, #15
 8016cb6:	e016      	b.n	8016ce6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d009      	beq.n	8016cd2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	891b      	ldrh	r3, [r3, #8]
 8016cc2:	4619      	mov	r1, r3
 8016cc4:	68b8      	ldr	r0, [r7, #8]
 8016cc6:	f7ff f9b9 	bl	801603c <tcp_recved>
    pbuf_free(p);
 8016cca:	6878      	ldr	r0, [r7, #4]
 8016ccc:	f7fe fa8c 	bl	80151e8 <pbuf_free>
 8016cd0:	e008      	b.n	8016ce4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d104      	bne.n	8016ce4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8016cda:	68b8      	ldr	r0, [r7, #8]
 8016cdc:	f7fe ff6a 	bl	8015bb4 <tcp_close>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	e000      	b.n	8016ce6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016ce4:	2300      	movs	r3, #0
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	3710      	adds	r7, #16
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bd80      	pop	{r7, pc}
 8016cee:	bf00      	nop
 8016cf0:	08023768 	.word	0x08023768
 8016cf4:	08023cd8 	.word	0x08023cd8
 8016cf8:	080237ac 	.word	0x080237ac

08016cfc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b086      	sub	sp, #24
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	4603      	mov	r3, r0
 8016d04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	db01      	blt.n	8016d12 <tcp_kill_prio+0x16>
 8016d0e:	79fb      	ldrb	r3, [r7, #7]
 8016d10:	e000      	b.n	8016d14 <tcp_kill_prio+0x18>
 8016d12:	237f      	movs	r3, #127	@ 0x7f
 8016d14:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016d16:	7afb      	ldrb	r3, [r7, #11]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d034      	beq.n	8016d86 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016d1c:	7afb      	ldrb	r3, [r7, #11]
 8016d1e:	3b01      	subs	r3, #1
 8016d20:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016d22:	2300      	movs	r3, #0
 8016d24:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016d26:	2300      	movs	r3, #0
 8016d28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d2a:	4b19      	ldr	r3, [pc, #100]	@ (8016d90 <tcp_kill_prio+0x94>)
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	617b      	str	r3, [r7, #20]
 8016d30:	e01f      	b.n	8016d72 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016d32:	697b      	ldr	r3, [r7, #20]
 8016d34:	7d5b      	ldrb	r3, [r3, #21]
 8016d36:	7afa      	ldrb	r2, [r7, #11]
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	d80c      	bhi.n	8016d56 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016d3c:	697b      	ldr	r3, [r7, #20]
 8016d3e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016d40:	7afa      	ldrb	r2, [r7, #11]
 8016d42:	429a      	cmp	r2, r3
 8016d44:	d112      	bne.n	8016d6c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016d46:	4b13      	ldr	r3, [pc, #76]	@ (8016d94 <tcp_kill_prio+0x98>)
 8016d48:	681a      	ldr	r2, [r3, #0]
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	6a1b      	ldr	r3, [r3, #32]
 8016d4e:	1ad3      	subs	r3, r2, r3
 8016d50:	68fa      	ldr	r2, [r7, #12]
 8016d52:	429a      	cmp	r2, r3
 8016d54:	d80a      	bhi.n	8016d6c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8016d56:	4b0f      	ldr	r3, [pc, #60]	@ (8016d94 <tcp_kill_prio+0x98>)
 8016d58:	681a      	ldr	r2, [r3, #0]
 8016d5a:	697b      	ldr	r3, [r7, #20]
 8016d5c:	6a1b      	ldr	r3, [r3, #32]
 8016d5e:	1ad3      	subs	r3, r2, r3
 8016d60:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016d62:	697b      	ldr	r3, [r7, #20]
 8016d64:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8016d66:	697b      	ldr	r3, [r7, #20]
 8016d68:	7d5b      	ldrb	r3, [r3, #21]
 8016d6a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d6c:	697b      	ldr	r3, [r7, #20]
 8016d6e:	68db      	ldr	r3, [r3, #12]
 8016d70:	617b      	str	r3, [r7, #20]
 8016d72:	697b      	ldr	r3, [r7, #20]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d1dc      	bne.n	8016d32 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d004      	beq.n	8016d88 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016d7e:	6938      	ldr	r0, [r7, #16]
 8016d80:	f7ff f85e 	bl	8015e40 <tcp_abort>
 8016d84:	e000      	b.n	8016d88 <tcp_kill_prio+0x8c>
    return;
 8016d86:	bf00      	nop
  }
}
 8016d88:	3718      	adds	r7, #24
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}
 8016d8e:	bf00      	nop
 8016d90:	20022ab4 	.word	0x20022ab4
 8016d94:	20022aa8 	.word	0x20022aa8

08016d98 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b086      	sub	sp, #24
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	4603      	mov	r3, r0
 8016da0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016da2:	79fb      	ldrb	r3, [r7, #7]
 8016da4:	2b08      	cmp	r3, #8
 8016da6:	d009      	beq.n	8016dbc <tcp_kill_state+0x24>
 8016da8:	79fb      	ldrb	r3, [r7, #7]
 8016daa:	2b09      	cmp	r3, #9
 8016dac:	d006      	beq.n	8016dbc <tcp_kill_state+0x24>
 8016dae:	4b1a      	ldr	r3, [pc, #104]	@ (8016e18 <tcp_kill_state+0x80>)
 8016db0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8016db4:	4919      	ldr	r1, [pc, #100]	@ (8016e1c <tcp_kill_state+0x84>)
 8016db6:	481a      	ldr	r0, [pc, #104]	@ (8016e20 <tcp_kill_state+0x88>)
 8016db8:	f009 fda0 	bl	80208fc <iprintf>

  inactivity = 0;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016dc4:	4b17      	ldr	r3, [pc, #92]	@ (8016e24 <tcp_kill_state+0x8c>)
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	617b      	str	r3, [r7, #20]
 8016dca:	e017      	b.n	8016dfc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016dcc:	697b      	ldr	r3, [r7, #20]
 8016dce:	7d1b      	ldrb	r3, [r3, #20]
 8016dd0:	79fa      	ldrb	r2, [r7, #7]
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d10f      	bne.n	8016df6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016dd6:	4b14      	ldr	r3, [pc, #80]	@ (8016e28 <tcp_kill_state+0x90>)
 8016dd8:	681a      	ldr	r2, [r3, #0]
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	6a1b      	ldr	r3, [r3, #32]
 8016dde:	1ad3      	subs	r3, r2, r3
 8016de0:	68fa      	ldr	r2, [r7, #12]
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d807      	bhi.n	8016df6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016de6:	4b10      	ldr	r3, [pc, #64]	@ (8016e28 <tcp_kill_state+0x90>)
 8016de8:	681a      	ldr	r2, [r3, #0]
 8016dea:	697b      	ldr	r3, [r7, #20]
 8016dec:	6a1b      	ldr	r3, [r3, #32]
 8016dee:	1ad3      	subs	r3, r2, r3
 8016df0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016df2:	697b      	ldr	r3, [r7, #20]
 8016df4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016df6:	697b      	ldr	r3, [r7, #20]
 8016df8:	68db      	ldr	r3, [r3, #12]
 8016dfa:	617b      	str	r3, [r7, #20]
 8016dfc:	697b      	ldr	r3, [r7, #20]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d1e4      	bne.n	8016dcc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016e02:	693b      	ldr	r3, [r7, #16]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d003      	beq.n	8016e10 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016e08:	2100      	movs	r1, #0
 8016e0a:	6938      	ldr	r0, [r7, #16]
 8016e0c:	f7fe ff5a 	bl	8015cc4 <tcp_abandon>
  }
}
 8016e10:	bf00      	nop
 8016e12:	3718      	adds	r7, #24
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}
 8016e18:	08023768 	.word	0x08023768
 8016e1c:	08023cf4 	.word	0x08023cf4
 8016e20:	080237ac 	.word	0x080237ac
 8016e24:	20022ab4 	.word	0x20022ab4
 8016e28:	20022aa8 	.word	0x20022aa8

08016e2c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b084      	sub	sp, #16
 8016e30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016e32:	2300      	movs	r3, #0
 8016e34:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016e36:	2300      	movs	r3, #0
 8016e38:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e3a:	4b12      	ldr	r3, [pc, #72]	@ (8016e84 <tcp_kill_timewait+0x58>)
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	60fb      	str	r3, [r7, #12]
 8016e40:	e012      	b.n	8016e68 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016e42:	4b11      	ldr	r3, [pc, #68]	@ (8016e88 <tcp_kill_timewait+0x5c>)
 8016e44:	681a      	ldr	r2, [r3, #0]
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	6a1b      	ldr	r3, [r3, #32]
 8016e4a:	1ad3      	subs	r3, r2, r3
 8016e4c:	687a      	ldr	r2, [r7, #4]
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	d807      	bhi.n	8016e62 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016e52:	4b0d      	ldr	r3, [pc, #52]	@ (8016e88 <tcp_kill_timewait+0x5c>)
 8016e54:	681a      	ldr	r2, [r3, #0]
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	6a1b      	ldr	r3, [r3, #32]
 8016e5a:	1ad3      	subs	r3, r2, r3
 8016e5c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	68db      	ldr	r3, [r3, #12]
 8016e66:	60fb      	str	r3, [r7, #12]
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d1e9      	bne.n	8016e42 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016e6e:	68bb      	ldr	r3, [r7, #8]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d002      	beq.n	8016e7a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016e74:	68b8      	ldr	r0, [r7, #8]
 8016e76:	f7fe ffe3 	bl	8015e40 <tcp_abort>
  }
}
 8016e7a:	bf00      	nop
 8016e7c:	3710      	adds	r7, #16
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bd80      	pop	{r7, pc}
 8016e82:	bf00      	nop
 8016e84:	20022ab8 	.word	0x20022ab8
 8016e88:	20022aa8 	.word	0x20022aa8

08016e8c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b082      	sub	sp, #8
 8016e90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016e92:	4b10      	ldr	r3, [pc, #64]	@ (8016ed4 <tcp_handle_closepend+0x48>)
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016e98:	e014      	b.n	8016ec4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	68db      	ldr	r3, [r3, #12]
 8016e9e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	8b5b      	ldrh	r3, [r3, #26]
 8016ea4:	f003 0308 	and.w	r3, r3, #8
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d009      	beq.n	8016ec0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	8b5b      	ldrh	r3, [r3, #26]
 8016eb0:	f023 0308 	bic.w	r3, r3, #8
 8016eb4:	b29a      	uxth	r2, r3
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8016eba:	6878      	ldr	r0, [r7, #4]
 8016ebc:	f7fe fe10 	bl	8015ae0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d1e7      	bne.n	8016e9a <tcp_handle_closepend+0xe>
  }
}
 8016eca:	bf00      	nop
 8016ecc:	bf00      	nop
 8016ece:	3708      	adds	r7, #8
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}
 8016ed4:	20022ab4 	.word	0x20022ab4

08016ed8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016ed8:	b580      	push	{r7, lr}
 8016eda:	b084      	sub	sp, #16
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	4603      	mov	r3, r0
 8016ee0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016ee2:	2001      	movs	r0, #1
 8016ee4:	f7fd f924 	bl	8014130 <memp_malloc>
 8016ee8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d126      	bne.n	8016f3e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016ef0:	f7ff ffcc 	bl	8016e8c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016ef4:	f7ff ff9a 	bl	8016e2c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016ef8:	2001      	movs	r0, #1
 8016efa:	f7fd f919 	bl	8014130 <memp_malloc>
 8016efe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d11b      	bne.n	8016f3e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016f06:	2009      	movs	r0, #9
 8016f08:	f7ff ff46 	bl	8016d98 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016f0c:	2001      	movs	r0, #1
 8016f0e:	f7fd f90f 	bl	8014130 <memp_malloc>
 8016f12:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d111      	bne.n	8016f3e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016f1a:	2008      	movs	r0, #8
 8016f1c:	f7ff ff3c 	bl	8016d98 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016f20:	2001      	movs	r0, #1
 8016f22:	f7fd f905 	bl	8014130 <memp_malloc>
 8016f26:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d107      	bne.n	8016f3e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016f2e:	79fb      	ldrb	r3, [r7, #7]
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7ff fee3 	bl	8016cfc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016f36:	2001      	movs	r0, #1
 8016f38:	f7fd f8fa 	bl	8014130 <memp_malloc>
 8016f3c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d03f      	beq.n	8016fc4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016f44:	229c      	movs	r2, #156	@ 0x9c
 8016f46:	2100      	movs	r1, #0
 8016f48:	68f8      	ldr	r0, [r7, #12]
 8016f4a:	f009 fe37 	bl	8020bbc <memset>
    pcb->prio = prio;
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	79fa      	ldrb	r2, [r7, #7]
 8016f52:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016f5a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	22ff      	movs	r2, #255	@ 0xff
 8016f72:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016f7a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	2206      	movs	r2, #6
 8016f80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	2206      	movs	r2, #6
 8016f88:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016f90:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	2201      	movs	r2, #1
 8016f96:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8016f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8016fd0 <tcp_alloc+0xf8>)
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8016fd4 <tcp_alloc+0xfc>)
 8016fa4:	781a      	ldrb	r2, [r3, #0]
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016fb0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	4a08      	ldr	r2, [pc, #32]	@ (8016fd8 <tcp_alloc+0x100>)
 8016fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	4a07      	ldr	r2, [pc, #28]	@ (8016fdc <tcp_alloc+0x104>)
 8016fc0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016fc4:	68fb      	ldr	r3, [r7, #12]
}
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	3710      	adds	r7, #16
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	bd80      	pop	{r7, pc}
 8016fce:	bf00      	nop
 8016fd0:	20022aa8 	.word	0x20022aa8
 8016fd4:	20022abe 	.word	0x20022abe
 8016fd8:	08016c91 	.word	0x08016c91
 8016fdc:	006ddd00 	.word	0x006ddd00

08016fe0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b084      	sub	sp, #16
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016fea:	2040      	movs	r0, #64	@ 0x40
 8016fec:	f7ff ff74 	bl	8016ed8 <tcp_alloc>
 8016ff0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016ff2:	68fb      	ldr	r3, [r7, #12]
}
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	3710      	adds	r7, #16
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b083      	sub	sp, #12
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d002      	beq.n	8017012 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	683a      	ldr	r2, [r7, #0]
 8017010:	611a      	str	r2, [r3, #16]
  }
}
 8017012:	bf00      	nop
 8017014:	370c      	adds	r7, #12
 8017016:	46bd      	mov	sp, r7
 8017018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701c:	4770      	bx	lr
	...

08017020 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b082      	sub	sp, #8
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
 8017028:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d00e      	beq.n	801704e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	7d1b      	ldrb	r3, [r3, #20]
 8017034:	2b01      	cmp	r3, #1
 8017036:	d106      	bne.n	8017046 <tcp_recv+0x26>
 8017038:	4b07      	ldr	r3, [pc, #28]	@ (8017058 <tcp_recv+0x38>)
 801703a:	f240 72df 	movw	r2, #2015	@ 0x7df
 801703e:	4907      	ldr	r1, [pc, #28]	@ (801705c <tcp_recv+0x3c>)
 8017040:	4807      	ldr	r0, [pc, #28]	@ (8017060 <tcp_recv+0x40>)
 8017042:	f009 fc5b 	bl	80208fc <iprintf>
    pcb->recv = recv;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	683a      	ldr	r2, [r7, #0]
 801704a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801704e:	bf00      	nop
 8017050:	3708      	adds	r7, #8
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}
 8017056:	bf00      	nop
 8017058:	08023768 	.word	0x08023768
 801705c:	08023d04 	.word	0x08023d04
 8017060:	080237ac 	.word	0x080237ac

08017064 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b082      	sub	sp, #8
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	2b00      	cmp	r3, #0
 8017072:	d00e      	beq.n	8017092 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	7d1b      	ldrb	r3, [r3, #20]
 8017078:	2b01      	cmp	r3, #1
 801707a:	d106      	bne.n	801708a <tcp_sent+0x26>
 801707c:	4b07      	ldr	r3, [pc, #28]	@ (801709c <tcp_sent+0x38>)
 801707e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8017082:	4907      	ldr	r1, [pc, #28]	@ (80170a0 <tcp_sent+0x3c>)
 8017084:	4807      	ldr	r0, [pc, #28]	@ (80170a4 <tcp_sent+0x40>)
 8017086:	f009 fc39 	bl	80208fc <iprintf>
    pcb->sent = sent;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	683a      	ldr	r2, [r7, #0]
 801708e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8017092:	bf00      	nop
 8017094:	3708      	adds	r7, #8
 8017096:	46bd      	mov	sp, r7
 8017098:	bd80      	pop	{r7, pc}
 801709a:	bf00      	nop
 801709c:	08023768 	.word	0x08023768
 80170a0:	08023d2c 	.word	0x08023d2c
 80170a4:	080237ac 	.word	0x080237ac

080170a8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
 80170b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d00e      	beq.n	80170d6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	7d1b      	ldrb	r3, [r3, #20]
 80170bc:	2b01      	cmp	r3, #1
 80170be:	d106      	bne.n	80170ce <tcp_err+0x26>
 80170c0:	4b07      	ldr	r3, [pc, #28]	@ (80170e0 <tcp_err+0x38>)
 80170c2:	f640 020d 	movw	r2, #2061	@ 0x80d
 80170c6:	4907      	ldr	r1, [pc, #28]	@ (80170e4 <tcp_err+0x3c>)
 80170c8:	4807      	ldr	r0, [pc, #28]	@ (80170e8 <tcp_err+0x40>)
 80170ca:	f009 fc17 	bl	80208fc <iprintf>
    pcb->errf = err;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	683a      	ldr	r2, [r7, #0]
 80170d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80170d6:	bf00      	nop
 80170d8:	3708      	adds	r7, #8
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}
 80170de:	bf00      	nop
 80170e0:	08023768 	.word	0x08023768
 80170e4:	08023d54 	.word	0x08023d54
 80170e8:	080237ac 	.word	0x080237ac

080170ec <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80170ec:	b480      	push	{r7}
 80170ee:	b085      	sub	sp, #20
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
 80170f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d008      	beq.n	801710e <tcp_accept+0x22>
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	7d1b      	ldrb	r3, [r3, #20]
 8017100:	2b01      	cmp	r3, #1
 8017102:	d104      	bne.n	801710e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	683a      	ldr	r2, [r7, #0]
 801710c:	619a      	str	r2, [r3, #24]
  }
}
 801710e:	bf00      	nop
 8017110:	3714      	adds	r7, #20
 8017112:	46bd      	mov	sp, r7
 8017114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017118:	4770      	bx	lr
	...

0801711c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b084      	sub	sp, #16
 8017120:	af00      	add	r7, sp, #0
 8017122:	60f8      	str	r0, [r7, #12]
 8017124:	60b9      	str	r1, [r7, #8]
 8017126:	4613      	mov	r3, r2
 8017128:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d107      	bne.n	8017140 <tcp_poll+0x24>
 8017130:	4b0e      	ldr	r3, [pc, #56]	@ (801716c <tcp_poll+0x50>)
 8017132:	f640 023d 	movw	r2, #2109	@ 0x83d
 8017136:	490e      	ldr	r1, [pc, #56]	@ (8017170 <tcp_poll+0x54>)
 8017138:	480e      	ldr	r0, [pc, #56]	@ (8017174 <tcp_poll+0x58>)
 801713a:	f009 fbdf 	bl	80208fc <iprintf>
 801713e:	e011      	b.n	8017164 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	7d1b      	ldrb	r3, [r3, #20]
 8017144:	2b01      	cmp	r3, #1
 8017146:	d106      	bne.n	8017156 <tcp_poll+0x3a>
 8017148:	4b08      	ldr	r3, [pc, #32]	@ (801716c <tcp_poll+0x50>)
 801714a:	f640 023e 	movw	r2, #2110	@ 0x83e
 801714e:	490a      	ldr	r1, [pc, #40]	@ (8017178 <tcp_poll+0x5c>)
 8017150:	4808      	ldr	r0, [pc, #32]	@ (8017174 <tcp_poll+0x58>)
 8017152:	f009 fbd3 	bl	80208fc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	68ba      	ldr	r2, [r7, #8]
 801715a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	79fa      	ldrb	r2, [r7, #7]
 8017162:	775a      	strb	r2, [r3, #29]
}
 8017164:	3710      	adds	r7, #16
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
 801716a:	bf00      	nop
 801716c:	08023768 	.word	0x08023768
 8017170:	08023d7c 	.word	0x08023d7c
 8017174:	080237ac 	.word	0x080237ac
 8017178:	08023d94 	.word	0x08023d94

0801717c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b082      	sub	sp, #8
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d107      	bne.n	801719a <tcp_pcb_purge+0x1e>
 801718a:	4b21      	ldr	r3, [pc, #132]	@ (8017210 <tcp_pcb_purge+0x94>)
 801718c:	f640 0251 	movw	r2, #2129	@ 0x851
 8017190:	4920      	ldr	r1, [pc, #128]	@ (8017214 <tcp_pcb_purge+0x98>)
 8017192:	4821      	ldr	r0, [pc, #132]	@ (8017218 <tcp_pcb_purge+0x9c>)
 8017194:	f009 fbb2 	bl	80208fc <iprintf>
 8017198:	e037      	b.n	801720a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	7d1b      	ldrb	r3, [r3, #20]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d033      	beq.n	801720a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80171a6:	2b0a      	cmp	r3, #10
 80171a8:	d02f      	beq.n	801720a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80171ae:	2b01      	cmp	r3, #1
 80171b0:	d02b      	beq.n	801720a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d007      	beq.n	80171ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80171be:	4618      	mov	r0, r3
 80171c0:	f7fe f812 	bl	80151e8 <pbuf_free>
      pcb->refused_data = NULL;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	2200      	movs	r2, #0
 80171c8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d002      	beq.n	80171d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80171d2:	6878      	ldr	r0, [r7, #4]
 80171d4:	f000 f98c 	bl	80174f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80171de:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80171e4:	4618      	mov	r0, r3
 80171e6:	f7ff fcf9 	bl	8016bdc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171ee:	4618      	mov	r0, r3
 80171f0:	f7ff fcf4 	bl	8016bdc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	2200      	movs	r2, #0
 80171f8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	2200      	movs	r2, #0
 8017206:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801720a:	3708      	adds	r7, #8
 801720c:	46bd      	mov	sp, r7
 801720e:	bd80      	pop	{r7, pc}
 8017210:	08023768 	.word	0x08023768
 8017214:	08023db4 	.word	0x08023db4
 8017218:	080237ac 	.word	0x080237ac

0801721c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b084      	sub	sp, #16
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d106      	bne.n	801723a <tcp_pcb_remove+0x1e>
 801722c:	4b3e      	ldr	r3, [pc, #248]	@ (8017328 <tcp_pcb_remove+0x10c>)
 801722e:	f640 0283 	movw	r2, #2179	@ 0x883
 8017232:	493e      	ldr	r1, [pc, #248]	@ (801732c <tcp_pcb_remove+0x110>)
 8017234:	483e      	ldr	r0, [pc, #248]	@ (8017330 <tcp_pcb_remove+0x114>)
 8017236:	f009 fb61 	bl	80208fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d106      	bne.n	801724e <tcp_pcb_remove+0x32>
 8017240:	4b39      	ldr	r3, [pc, #228]	@ (8017328 <tcp_pcb_remove+0x10c>)
 8017242:	f640 0284 	movw	r2, #2180	@ 0x884
 8017246:	493b      	ldr	r1, [pc, #236]	@ (8017334 <tcp_pcb_remove+0x118>)
 8017248:	4839      	ldr	r0, [pc, #228]	@ (8017330 <tcp_pcb_remove+0x114>)
 801724a:	f009 fb57 	bl	80208fc <iprintf>

  TCP_RMV(pcblist, pcb);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	683a      	ldr	r2, [r7, #0]
 8017254:	429a      	cmp	r2, r3
 8017256:	d105      	bne.n	8017264 <tcp_pcb_remove+0x48>
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	68da      	ldr	r2, [r3, #12]
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	601a      	str	r2, [r3, #0]
 8017262:	e013      	b.n	801728c <tcp_pcb_remove+0x70>
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	60fb      	str	r3, [r7, #12]
 801726a:	e00c      	b.n	8017286 <tcp_pcb_remove+0x6a>
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	68db      	ldr	r3, [r3, #12]
 8017270:	683a      	ldr	r2, [r7, #0]
 8017272:	429a      	cmp	r2, r3
 8017274:	d104      	bne.n	8017280 <tcp_pcb_remove+0x64>
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	68da      	ldr	r2, [r3, #12]
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	60da      	str	r2, [r3, #12]
 801727e:	e005      	b.n	801728c <tcp_pcb_remove+0x70>
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	68db      	ldr	r3, [r3, #12]
 8017284:	60fb      	str	r3, [r7, #12]
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d1ef      	bne.n	801726c <tcp_pcb_remove+0x50>
 801728c:	683b      	ldr	r3, [r7, #0]
 801728e:	2200      	movs	r2, #0
 8017290:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017292:	6838      	ldr	r0, [r7, #0]
 8017294:	f7ff ff72 	bl	801717c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	7d1b      	ldrb	r3, [r3, #20]
 801729c:	2b0a      	cmp	r3, #10
 801729e:	d013      	beq.n	80172c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80172a4:	2b01      	cmp	r3, #1
 80172a6:	d00f      	beq.n	80172c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	8b5b      	ldrh	r3, [r3, #26]
 80172ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d009      	beq.n	80172c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	8b5b      	ldrh	r3, [r3, #26]
 80172b8:	f043 0302 	orr.w	r3, r3, #2
 80172bc:	b29a      	uxth	r2, r3
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80172c2:	6838      	ldr	r0, [r7, #0]
 80172c4:	f003 fc28 	bl	801ab18 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	7d1b      	ldrb	r3, [r3, #20]
 80172cc:	2b01      	cmp	r3, #1
 80172ce:	d020      	beq.n	8017312 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80172d0:	683b      	ldr	r3, [r7, #0]
 80172d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d006      	beq.n	80172e6 <tcp_pcb_remove+0xca>
 80172d8:	4b13      	ldr	r3, [pc, #76]	@ (8017328 <tcp_pcb_remove+0x10c>)
 80172da:	f640 0293 	movw	r2, #2195	@ 0x893
 80172de:	4916      	ldr	r1, [pc, #88]	@ (8017338 <tcp_pcb_remove+0x11c>)
 80172e0:	4813      	ldr	r0, [pc, #76]	@ (8017330 <tcp_pcb_remove+0x114>)
 80172e2:	f009 fb0b 	bl	80208fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80172e6:	683b      	ldr	r3, [r7, #0]
 80172e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d006      	beq.n	80172fc <tcp_pcb_remove+0xe0>
 80172ee:	4b0e      	ldr	r3, [pc, #56]	@ (8017328 <tcp_pcb_remove+0x10c>)
 80172f0:	f640 0294 	movw	r2, #2196	@ 0x894
 80172f4:	4911      	ldr	r1, [pc, #68]	@ (801733c <tcp_pcb_remove+0x120>)
 80172f6:	480e      	ldr	r0, [pc, #56]	@ (8017330 <tcp_pcb_remove+0x114>)
 80172f8:	f009 fb00 	bl	80208fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80172fc:	683b      	ldr	r3, [r7, #0]
 80172fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017300:	2b00      	cmp	r3, #0
 8017302:	d006      	beq.n	8017312 <tcp_pcb_remove+0xf6>
 8017304:	4b08      	ldr	r3, [pc, #32]	@ (8017328 <tcp_pcb_remove+0x10c>)
 8017306:	f640 0296 	movw	r2, #2198	@ 0x896
 801730a:	490d      	ldr	r1, [pc, #52]	@ (8017340 <tcp_pcb_remove+0x124>)
 801730c:	4808      	ldr	r0, [pc, #32]	@ (8017330 <tcp_pcb_remove+0x114>)
 801730e:	f009 faf5 	bl	80208fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017312:	683b      	ldr	r3, [r7, #0]
 8017314:	2200      	movs	r2, #0
 8017316:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017318:	683b      	ldr	r3, [r7, #0]
 801731a:	2200      	movs	r2, #0
 801731c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801731e:	bf00      	nop
 8017320:	3710      	adds	r7, #16
 8017322:	46bd      	mov	sp, r7
 8017324:	bd80      	pop	{r7, pc}
 8017326:	bf00      	nop
 8017328:	08023768 	.word	0x08023768
 801732c:	08023dd0 	.word	0x08023dd0
 8017330:	080237ac 	.word	0x080237ac
 8017334:	08023dec 	.word	0x08023dec
 8017338:	08023e0c 	.word	0x08023e0c
 801733c:	08023e24 	.word	0x08023e24
 8017340:	08023e40 	.word	0x08023e40

08017344 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b082      	sub	sp, #8
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d106      	bne.n	8017360 <tcp_next_iss+0x1c>
 8017352:	4b0a      	ldr	r3, [pc, #40]	@ (801737c <tcp_next_iss+0x38>)
 8017354:	f640 02af 	movw	r2, #2223	@ 0x8af
 8017358:	4909      	ldr	r1, [pc, #36]	@ (8017380 <tcp_next_iss+0x3c>)
 801735a:	480a      	ldr	r0, [pc, #40]	@ (8017384 <tcp_next_iss+0x40>)
 801735c:	f009 face 	bl	80208fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017360:	4b09      	ldr	r3, [pc, #36]	@ (8017388 <tcp_next_iss+0x44>)
 8017362:	681a      	ldr	r2, [r3, #0]
 8017364:	4b09      	ldr	r3, [pc, #36]	@ (801738c <tcp_next_iss+0x48>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	4413      	add	r3, r2
 801736a:	4a07      	ldr	r2, [pc, #28]	@ (8017388 <tcp_next_iss+0x44>)
 801736c:	6013      	str	r3, [r2, #0]
  return iss;
 801736e:	4b06      	ldr	r3, [pc, #24]	@ (8017388 <tcp_next_iss+0x44>)
 8017370:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017372:	4618      	mov	r0, r3
 8017374:	3708      	adds	r7, #8
 8017376:	46bd      	mov	sp, r7
 8017378:	bd80      	pop	{r7, pc}
 801737a:	bf00      	nop
 801737c:	08023768 	.word	0x08023768
 8017380:	08023e58 	.word	0x08023e58
 8017384:	080237ac 	.word	0x080237ac
 8017388:	2000006c 	.word	0x2000006c
 801738c:	20022aa8 	.word	0x20022aa8

08017390 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b086      	sub	sp, #24
 8017394:	af00      	add	r7, sp, #0
 8017396:	4603      	mov	r3, r0
 8017398:	60b9      	str	r1, [r7, #8]
 801739a:	607a      	str	r2, [r7, #4]
 801739c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d106      	bne.n	80173b2 <tcp_eff_send_mss_netif+0x22>
 80173a4:	4b14      	ldr	r3, [pc, #80]	@ (80173f8 <tcp_eff_send_mss_netif+0x68>)
 80173a6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80173aa:	4914      	ldr	r1, [pc, #80]	@ (80173fc <tcp_eff_send_mss_netif+0x6c>)
 80173ac:	4814      	ldr	r0, [pc, #80]	@ (8017400 <tcp_eff_send_mss_netif+0x70>)
 80173ae:	f009 faa5 	bl	80208fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d101      	bne.n	80173bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80173b8:	89fb      	ldrh	r3, [r7, #14]
 80173ba:	e019      	b.n	80173f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80173bc:	68bb      	ldr	r3, [r7, #8]
 80173be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80173c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80173c2:	8afb      	ldrh	r3, [r7, #22]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d012      	beq.n	80173ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80173c8:	2328      	movs	r3, #40	@ 0x28
 80173ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80173cc:	8afa      	ldrh	r2, [r7, #22]
 80173ce:	8abb      	ldrh	r3, [r7, #20]
 80173d0:	429a      	cmp	r2, r3
 80173d2:	d904      	bls.n	80173de <tcp_eff_send_mss_netif+0x4e>
 80173d4:	8afa      	ldrh	r2, [r7, #22]
 80173d6:	8abb      	ldrh	r3, [r7, #20]
 80173d8:	1ad3      	subs	r3, r2, r3
 80173da:	b29b      	uxth	r3, r3
 80173dc:	e000      	b.n	80173e0 <tcp_eff_send_mss_netif+0x50>
 80173de:	2300      	movs	r3, #0
 80173e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80173e2:	8a7a      	ldrh	r2, [r7, #18]
 80173e4:	89fb      	ldrh	r3, [r7, #14]
 80173e6:	4293      	cmp	r3, r2
 80173e8:	bf28      	it	cs
 80173ea:	4613      	movcs	r3, r2
 80173ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80173ee:	89fb      	ldrh	r3, [r7, #14]
}
 80173f0:	4618      	mov	r0, r3
 80173f2:	3718      	adds	r7, #24
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}
 80173f8:	08023768 	.word	0x08023768
 80173fc:	08023e74 	.word	0x08023e74
 8017400:	080237ac 	.word	0x080237ac

08017404 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b084      	sub	sp, #16
 8017408:	af00      	add	r7, sp, #0
 801740a:	6078      	str	r0, [r7, #4]
 801740c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801740e:	683b      	ldr	r3, [r7, #0]
 8017410:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d11d      	bne.n	8017454 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8017418:	4b12      	ldr	r3, [pc, #72]	@ (8017464 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801741a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801741e:	4912      	ldr	r1, [pc, #72]	@ (8017468 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8017420:	4812      	ldr	r0, [pc, #72]	@ (801746c <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8017422:	f009 fa6b 	bl	80208fc <iprintf>

  while (pcb != NULL) {
 8017426:	e015      	b.n	8017454 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	681a      	ldr	r2, [r3, #0]
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	429a      	cmp	r2, r3
 8017432:	d10c      	bne.n	801744e <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	68db      	ldr	r3, [r3, #12]
 8017438:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 801743a:	68f9      	ldr	r1, [r7, #12]
 801743c:	480c      	ldr	r0, [pc, #48]	@ (8017470 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 801743e:	f009 fa5d 	bl	80208fc <iprintf>
      tcp_abort(pcb);
 8017442:	68f8      	ldr	r0, [r7, #12]
 8017444:	f7fe fcfc 	bl	8015e40 <tcp_abort>
      pcb = next;
 8017448:	68bb      	ldr	r3, [r7, #8]
 801744a:	60fb      	str	r3, [r7, #12]
 801744c:	e002      	b.n	8017454 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	68db      	ldr	r3, [r3, #12]
 8017452:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d1e6      	bne.n	8017428 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801745a:	bf00      	nop
 801745c:	bf00      	nop
 801745e:	3710      	adds	r7, #16
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}
 8017464:	08023768 	.word	0x08023768
 8017468:	08023e9c 	.word	0x08023e9c
 801746c:	080237ac 	.word	0x080237ac
 8017470:	08023ed0 	.word	0x08023ed0

08017474 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b084      	sub	sp, #16
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
 801747c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d02a      	beq.n	80174da <tcp_netif_ip_addr_changed+0x66>
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d026      	beq.n	80174da <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801748c:	4b15      	ldr	r3, [pc, #84]	@ (80174e4 <tcp_netif_ip_addr_changed+0x70>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	4619      	mov	r1, r3
 8017492:	6878      	ldr	r0, [r7, #4]
 8017494:	f7ff ffb6 	bl	8017404 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017498:	4b13      	ldr	r3, [pc, #76]	@ (80174e8 <tcp_netif_ip_addr_changed+0x74>)
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	4619      	mov	r1, r3
 801749e:	6878      	ldr	r0, [r7, #4]
 80174a0:	f7ff ffb0 	bl	8017404 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80174a4:	683b      	ldr	r3, [r7, #0]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d017      	beq.n	80174da <tcp_netif_ip_addr_changed+0x66>
 80174aa:	683b      	ldr	r3, [r7, #0]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d013      	beq.n	80174da <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80174b2:	4b0e      	ldr	r3, [pc, #56]	@ (80174ec <tcp_netif_ip_addr_changed+0x78>)
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	60fb      	str	r3, [r7, #12]
 80174b8:	e00c      	b.n	80174d4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	681a      	ldr	r2, [r3, #0]
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d103      	bne.n	80174ce <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80174c6:	683b      	ldr	r3, [r7, #0]
 80174c8:	681a      	ldr	r2, [r3, #0]
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	68db      	ldr	r3, [r3, #12]
 80174d2:	60fb      	str	r3, [r7, #12]
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d1ef      	bne.n	80174ba <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80174da:	bf00      	nop
 80174dc:	3710      	adds	r7, #16
 80174de:	46bd      	mov	sp, r7
 80174e0:	bd80      	pop	{r7, pc}
 80174e2:	bf00      	nop
 80174e4:	20022ab4 	.word	0x20022ab4
 80174e8:	20022aac 	.word	0x20022aac
 80174ec:	20022ab0 	.word	0x20022ab0

080174f0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b082      	sub	sp, #8
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d007      	beq.n	8017510 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017504:	4618      	mov	r0, r3
 8017506:	f7ff fb69 	bl	8016bdc <tcp_segs_free>
    pcb->ooseq = NULL;
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	2200      	movs	r2, #0
 801750e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017510:	bf00      	nop
 8017512:	3708      	adds	r7, #8
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}

08017518 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017518:	b590      	push	{r4, r7, lr}
 801751a:	b08d      	sub	sp, #52	@ 0x34
 801751c:	af04      	add	r7, sp, #16
 801751e:	6078      	str	r0, [r7, #4]
 8017520:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d105      	bne.n	8017534 <tcp_input+0x1c>
 8017528:	4b9b      	ldr	r3, [pc, #620]	@ (8017798 <tcp_input+0x280>)
 801752a:	2283      	movs	r2, #131	@ 0x83
 801752c:	499b      	ldr	r1, [pc, #620]	@ (801779c <tcp_input+0x284>)
 801752e:	489c      	ldr	r0, [pc, #624]	@ (80177a0 <tcp_input+0x288>)
 8017530:	f009 f9e4 	bl	80208fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	685b      	ldr	r3, [r3, #4]
 8017538:	4a9a      	ldr	r2, [pc, #616]	@ (80177a4 <tcp_input+0x28c>)
 801753a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	895b      	ldrh	r3, [r3, #10]
 8017540:	2b13      	cmp	r3, #19
 8017542:	f240 83d1 	bls.w	8017ce8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017546:	4b98      	ldr	r3, [pc, #608]	@ (80177a8 <tcp_input+0x290>)
 8017548:	695b      	ldr	r3, [r3, #20]
 801754a:	4a97      	ldr	r2, [pc, #604]	@ (80177a8 <tcp_input+0x290>)
 801754c:	6812      	ldr	r2, [r2, #0]
 801754e:	4611      	mov	r1, r2
 8017550:	4618      	mov	r0, r3
 8017552:	f006 ff83 	bl	801e45c <ip4_addr_isbroadcast_u32>
 8017556:	4603      	mov	r3, r0
 8017558:	2b00      	cmp	r3, #0
 801755a:	f040 83c7 	bne.w	8017cec <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801755e:	4b92      	ldr	r3, [pc, #584]	@ (80177a8 <tcp_input+0x290>)
 8017560:	695b      	ldr	r3, [r3, #20]
 8017562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017566:	2be0      	cmp	r3, #224	@ 0xe0
 8017568:	f000 83c0 	beq.w	8017cec <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801756c:	4b8d      	ldr	r3, [pc, #564]	@ (80177a4 <tcp_input+0x28c>)
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	899b      	ldrh	r3, [r3, #12]
 8017572:	b29b      	uxth	r3, r3
 8017574:	4618      	mov	r0, r3
 8017576:	f7fc f8dd 	bl	8013734 <lwip_htons>
 801757a:	4603      	mov	r3, r0
 801757c:	0b1b      	lsrs	r3, r3, #12
 801757e:	b29b      	uxth	r3, r3
 8017580:	b2db      	uxtb	r3, r3
 8017582:	009b      	lsls	r3, r3, #2
 8017584:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017586:	7cbb      	ldrb	r3, [r7, #18]
 8017588:	2b13      	cmp	r3, #19
 801758a:	f240 83b1 	bls.w	8017cf0 <tcp_input+0x7d8>
 801758e:	7cbb      	ldrb	r3, [r7, #18]
 8017590:	b29a      	uxth	r2, r3
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	891b      	ldrh	r3, [r3, #8]
 8017596:	429a      	cmp	r2, r3
 8017598:	f200 83aa 	bhi.w	8017cf0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801759c:	7cbb      	ldrb	r3, [r7, #18]
 801759e:	b29b      	uxth	r3, r3
 80175a0:	3b14      	subs	r3, #20
 80175a2:	b29a      	uxth	r2, r3
 80175a4:	4b81      	ldr	r3, [pc, #516]	@ (80177ac <tcp_input+0x294>)
 80175a6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80175a8:	4b81      	ldr	r3, [pc, #516]	@ (80177b0 <tcp_input+0x298>)
 80175aa:	2200      	movs	r2, #0
 80175ac:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	895a      	ldrh	r2, [r3, #10]
 80175b2:	7cbb      	ldrb	r3, [r7, #18]
 80175b4:	b29b      	uxth	r3, r3
 80175b6:	429a      	cmp	r2, r3
 80175b8:	d309      	bcc.n	80175ce <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80175ba:	4b7c      	ldr	r3, [pc, #496]	@ (80177ac <tcp_input+0x294>)
 80175bc:	881a      	ldrh	r2, [r3, #0]
 80175be:	4b7d      	ldr	r3, [pc, #500]	@ (80177b4 <tcp_input+0x29c>)
 80175c0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80175c2:	7cbb      	ldrb	r3, [r7, #18]
 80175c4:	4619      	mov	r1, r3
 80175c6:	6878      	ldr	r0, [r7, #4]
 80175c8:	f7fd fd80 	bl	80150cc <pbuf_remove_header>
 80175cc:	e04e      	b.n	801766c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d105      	bne.n	80175e2 <tcp_input+0xca>
 80175d6:	4b70      	ldr	r3, [pc, #448]	@ (8017798 <tcp_input+0x280>)
 80175d8:	22c2      	movs	r2, #194	@ 0xc2
 80175da:	4977      	ldr	r1, [pc, #476]	@ (80177b8 <tcp_input+0x2a0>)
 80175dc:	4870      	ldr	r0, [pc, #448]	@ (80177a0 <tcp_input+0x288>)
 80175de:	f009 f98d 	bl	80208fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80175e2:	2114      	movs	r1, #20
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f7fd fd71 	bl	80150cc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	895a      	ldrh	r2, [r3, #10]
 80175ee:	4b71      	ldr	r3, [pc, #452]	@ (80177b4 <tcp_input+0x29c>)
 80175f0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80175f2:	4b6e      	ldr	r3, [pc, #440]	@ (80177ac <tcp_input+0x294>)
 80175f4:	881a      	ldrh	r2, [r3, #0]
 80175f6:	4b6f      	ldr	r3, [pc, #444]	@ (80177b4 <tcp_input+0x29c>)
 80175f8:	881b      	ldrh	r3, [r3, #0]
 80175fa:	1ad3      	subs	r3, r2, r3
 80175fc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80175fe:	4b6d      	ldr	r3, [pc, #436]	@ (80177b4 <tcp_input+0x29c>)
 8017600:	881b      	ldrh	r3, [r3, #0]
 8017602:	4619      	mov	r1, r3
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f7fd fd61 	bl	80150cc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	895b      	ldrh	r3, [r3, #10]
 8017610:	8a3a      	ldrh	r2, [r7, #16]
 8017612:	429a      	cmp	r2, r3
 8017614:	f200 836e 	bhi.w	8017cf4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	685b      	ldr	r3, [r3, #4]
 801761e:	4a64      	ldr	r2, [pc, #400]	@ (80177b0 <tcp_input+0x298>)
 8017620:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	8a3a      	ldrh	r2, [r7, #16]
 8017628:	4611      	mov	r1, r2
 801762a:	4618      	mov	r0, r3
 801762c:	f7fd fd4e 	bl	80150cc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	891a      	ldrh	r2, [r3, #8]
 8017634:	8a3b      	ldrh	r3, [r7, #16]
 8017636:	1ad3      	subs	r3, r2, r3
 8017638:	b29a      	uxth	r2, r3
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	895b      	ldrh	r3, [r3, #10]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d005      	beq.n	8017652 <tcp_input+0x13a>
 8017646:	4b54      	ldr	r3, [pc, #336]	@ (8017798 <tcp_input+0x280>)
 8017648:	22df      	movs	r2, #223	@ 0xdf
 801764a:	495c      	ldr	r1, [pc, #368]	@ (80177bc <tcp_input+0x2a4>)
 801764c:	4854      	ldr	r0, [pc, #336]	@ (80177a0 <tcp_input+0x288>)
 801764e:	f009 f955 	bl	80208fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	891a      	ldrh	r2, [r3, #8]
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	891b      	ldrh	r3, [r3, #8]
 801765c:	429a      	cmp	r2, r3
 801765e:	d005      	beq.n	801766c <tcp_input+0x154>
 8017660:	4b4d      	ldr	r3, [pc, #308]	@ (8017798 <tcp_input+0x280>)
 8017662:	22e0      	movs	r2, #224	@ 0xe0
 8017664:	4956      	ldr	r1, [pc, #344]	@ (80177c0 <tcp_input+0x2a8>)
 8017666:	484e      	ldr	r0, [pc, #312]	@ (80177a0 <tcp_input+0x288>)
 8017668:	f009 f948 	bl	80208fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801766c:	4b4d      	ldr	r3, [pc, #308]	@ (80177a4 <tcp_input+0x28c>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	881b      	ldrh	r3, [r3, #0]
 8017672:	b29b      	uxth	r3, r3
 8017674:	4a4b      	ldr	r2, [pc, #300]	@ (80177a4 <tcp_input+0x28c>)
 8017676:	6814      	ldr	r4, [r2, #0]
 8017678:	4618      	mov	r0, r3
 801767a:	f7fc f85b 	bl	8013734 <lwip_htons>
 801767e:	4603      	mov	r3, r0
 8017680:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017682:	4b48      	ldr	r3, [pc, #288]	@ (80177a4 <tcp_input+0x28c>)
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	885b      	ldrh	r3, [r3, #2]
 8017688:	b29b      	uxth	r3, r3
 801768a:	4a46      	ldr	r2, [pc, #280]	@ (80177a4 <tcp_input+0x28c>)
 801768c:	6814      	ldr	r4, [r2, #0]
 801768e:	4618      	mov	r0, r3
 8017690:	f7fc f850 	bl	8013734 <lwip_htons>
 8017694:	4603      	mov	r3, r0
 8017696:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017698:	4b42      	ldr	r3, [pc, #264]	@ (80177a4 <tcp_input+0x28c>)
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	685b      	ldr	r3, [r3, #4]
 801769e:	4a41      	ldr	r2, [pc, #260]	@ (80177a4 <tcp_input+0x28c>)
 80176a0:	6814      	ldr	r4, [r2, #0]
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7fc f85c 	bl	8013760 <lwip_htonl>
 80176a8:	4603      	mov	r3, r0
 80176aa:	6063      	str	r3, [r4, #4]
 80176ac:	6863      	ldr	r3, [r4, #4]
 80176ae:	4a45      	ldr	r2, [pc, #276]	@ (80177c4 <tcp_input+0x2ac>)
 80176b0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80176b2:	4b3c      	ldr	r3, [pc, #240]	@ (80177a4 <tcp_input+0x28c>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	689b      	ldr	r3, [r3, #8]
 80176b8:	4a3a      	ldr	r2, [pc, #232]	@ (80177a4 <tcp_input+0x28c>)
 80176ba:	6814      	ldr	r4, [r2, #0]
 80176bc:	4618      	mov	r0, r3
 80176be:	f7fc f84f 	bl	8013760 <lwip_htonl>
 80176c2:	4603      	mov	r3, r0
 80176c4:	60a3      	str	r3, [r4, #8]
 80176c6:	68a3      	ldr	r3, [r4, #8]
 80176c8:	4a3f      	ldr	r2, [pc, #252]	@ (80177c8 <tcp_input+0x2b0>)
 80176ca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80176cc:	4b35      	ldr	r3, [pc, #212]	@ (80177a4 <tcp_input+0x28c>)
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	89db      	ldrh	r3, [r3, #14]
 80176d2:	b29b      	uxth	r3, r3
 80176d4:	4a33      	ldr	r2, [pc, #204]	@ (80177a4 <tcp_input+0x28c>)
 80176d6:	6814      	ldr	r4, [r2, #0]
 80176d8:	4618      	mov	r0, r3
 80176da:	f7fc f82b 	bl	8013734 <lwip_htons>
 80176de:	4603      	mov	r3, r0
 80176e0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80176e2:	4b30      	ldr	r3, [pc, #192]	@ (80177a4 <tcp_input+0x28c>)
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	899b      	ldrh	r3, [r3, #12]
 80176e8:	b29b      	uxth	r3, r3
 80176ea:	4618      	mov	r0, r3
 80176ec:	f7fc f822 	bl	8013734 <lwip_htons>
 80176f0:	4603      	mov	r3, r0
 80176f2:	b2db      	uxtb	r3, r3
 80176f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80176f8:	b2da      	uxtb	r2, r3
 80176fa:	4b34      	ldr	r3, [pc, #208]	@ (80177cc <tcp_input+0x2b4>)
 80176fc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	891a      	ldrh	r2, [r3, #8]
 8017702:	4b33      	ldr	r3, [pc, #204]	@ (80177d0 <tcp_input+0x2b8>)
 8017704:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017706:	4b31      	ldr	r3, [pc, #196]	@ (80177cc <tcp_input+0x2b4>)
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	f003 0303 	and.w	r3, r3, #3
 801770e:	2b00      	cmp	r3, #0
 8017710:	d00c      	beq.n	801772c <tcp_input+0x214>
    tcplen++;
 8017712:	4b2f      	ldr	r3, [pc, #188]	@ (80177d0 <tcp_input+0x2b8>)
 8017714:	881b      	ldrh	r3, [r3, #0]
 8017716:	3301      	adds	r3, #1
 8017718:	b29a      	uxth	r2, r3
 801771a:	4b2d      	ldr	r3, [pc, #180]	@ (80177d0 <tcp_input+0x2b8>)
 801771c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	891a      	ldrh	r2, [r3, #8]
 8017722:	4b2b      	ldr	r3, [pc, #172]	@ (80177d0 <tcp_input+0x2b8>)
 8017724:	881b      	ldrh	r3, [r3, #0]
 8017726:	429a      	cmp	r2, r3
 8017728:	f200 82e6 	bhi.w	8017cf8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801772c:	2300      	movs	r3, #0
 801772e:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017730:	4b28      	ldr	r3, [pc, #160]	@ (80177d4 <tcp_input+0x2bc>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	61bb      	str	r3, [r7, #24]
 8017736:	e09d      	b.n	8017874 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017738:	69bb      	ldr	r3, [r7, #24]
 801773a:	7d1b      	ldrb	r3, [r3, #20]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d105      	bne.n	801774c <tcp_input+0x234>
 8017740:	4b15      	ldr	r3, [pc, #84]	@ (8017798 <tcp_input+0x280>)
 8017742:	22fb      	movs	r2, #251	@ 0xfb
 8017744:	4924      	ldr	r1, [pc, #144]	@ (80177d8 <tcp_input+0x2c0>)
 8017746:	4816      	ldr	r0, [pc, #88]	@ (80177a0 <tcp_input+0x288>)
 8017748:	f009 f8d8 	bl	80208fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801774c:	69bb      	ldr	r3, [r7, #24]
 801774e:	7d1b      	ldrb	r3, [r3, #20]
 8017750:	2b0a      	cmp	r3, #10
 8017752:	d105      	bne.n	8017760 <tcp_input+0x248>
 8017754:	4b10      	ldr	r3, [pc, #64]	@ (8017798 <tcp_input+0x280>)
 8017756:	22fc      	movs	r2, #252	@ 0xfc
 8017758:	4920      	ldr	r1, [pc, #128]	@ (80177dc <tcp_input+0x2c4>)
 801775a:	4811      	ldr	r0, [pc, #68]	@ (80177a0 <tcp_input+0x288>)
 801775c:	f009 f8ce 	bl	80208fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017760:	69bb      	ldr	r3, [r7, #24]
 8017762:	7d1b      	ldrb	r3, [r3, #20]
 8017764:	2b01      	cmp	r3, #1
 8017766:	d105      	bne.n	8017774 <tcp_input+0x25c>
 8017768:	4b0b      	ldr	r3, [pc, #44]	@ (8017798 <tcp_input+0x280>)
 801776a:	22fd      	movs	r2, #253	@ 0xfd
 801776c:	491c      	ldr	r1, [pc, #112]	@ (80177e0 <tcp_input+0x2c8>)
 801776e:	480c      	ldr	r0, [pc, #48]	@ (80177a0 <tcp_input+0x288>)
 8017770:	f009 f8c4 	bl	80208fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017774:	69bb      	ldr	r3, [r7, #24]
 8017776:	7a1b      	ldrb	r3, [r3, #8]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d033      	beq.n	80177e4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801777c:	69bb      	ldr	r3, [r7, #24]
 801777e:	7a1a      	ldrb	r2, [r3, #8]
 8017780:	4b09      	ldr	r3, [pc, #36]	@ (80177a8 <tcp_input+0x290>)
 8017782:	685b      	ldr	r3, [r3, #4]
 8017784:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017788:	3301      	adds	r3, #1
 801778a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801778c:	429a      	cmp	r2, r3
 801778e:	d029      	beq.n	80177e4 <tcp_input+0x2cc>
      prev = pcb;
 8017790:	69bb      	ldr	r3, [r7, #24]
 8017792:	61fb      	str	r3, [r7, #28]
      continue;
 8017794:	e06b      	b.n	801786e <tcp_input+0x356>
 8017796:	bf00      	nop
 8017798:	08023ef8 	.word	0x08023ef8
 801779c:	08023f2c 	.word	0x08023f2c
 80177a0:	08023f44 	.word	0x08023f44
 80177a4:	20022ad4 	.word	0x20022ad4
 80177a8:	2001f658 	.word	0x2001f658
 80177ac:	20022ad8 	.word	0x20022ad8
 80177b0:	20022adc 	.word	0x20022adc
 80177b4:	20022ada 	.word	0x20022ada
 80177b8:	08023f6c 	.word	0x08023f6c
 80177bc:	08023f7c 	.word	0x08023f7c
 80177c0:	08023f88 	.word	0x08023f88
 80177c4:	20022ae4 	.word	0x20022ae4
 80177c8:	20022ae8 	.word	0x20022ae8
 80177cc:	20022af0 	.word	0x20022af0
 80177d0:	20022aee 	.word	0x20022aee
 80177d4:	20022ab4 	.word	0x20022ab4
 80177d8:	08023fa8 	.word	0x08023fa8
 80177dc:	08023fd0 	.word	0x08023fd0
 80177e0:	08023ffc 	.word	0x08023ffc
    }

    if (pcb->remote_port == tcphdr->src &&
 80177e4:	69bb      	ldr	r3, [r7, #24]
 80177e6:	8b1a      	ldrh	r2, [r3, #24]
 80177e8:	4b72      	ldr	r3, [pc, #456]	@ (80179b4 <tcp_input+0x49c>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	881b      	ldrh	r3, [r3, #0]
 80177ee:	b29b      	uxth	r3, r3
 80177f0:	429a      	cmp	r2, r3
 80177f2:	d13a      	bne.n	801786a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80177f4:	69bb      	ldr	r3, [r7, #24]
 80177f6:	8ada      	ldrh	r2, [r3, #22]
 80177f8:	4b6e      	ldr	r3, [pc, #440]	@ (80179b4 <tcp_input+0x49c>)
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	885b      	ldrh	r3, [r3, #2]
 80177fe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017800:	429a      	cmp	r2, r3
 8017802:	d132      	bne.n	801786a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017804:	69bb      	ldr	r3, [r7, #24]
 8017806:	685a      	ldr	r2, [r3, #4]
 8017808:	4b6b      	ldr	r3, [pc, #428]	@ (80179b8 <tcp_input+0x4a0>)
 801780a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801780c:	429a      	cmp	r2, r3
 801780e:	d12c      	bne.n	801786a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017810:	69bb      	ldr	r3, [r7, #24]
 8017812:	681a      	ldr	r2, [r3, #0]
 8017814:	4b68      	ldr	r3, [pc, #416]	@ (80179b8 <tcp_input+0x4a0>)
 8017816:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017818:	429a      	cmp	r2, r3
 801781a:	d126      	bne.n	801786a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801781c:	69bb      	ldr	r3, [r7, #24]
 801781e:	68db      	ldr	r3, [r3, #12]
 8017820:	69ba      	ldr	r2, [r7, #24]
 8017822:	429a      	cmp	r2, r3
 8017824:	d106      	bne.n	8017834 <tcp_input+0x31c>
 8017826:	4b65      	ldr	r3, [pc, #404]	@ (80179bc <tcp_input+0x4a4>)
 8017828:	f240 120d 	movw	r2, #269	@ 0x10d
 801782c:	4964      	ldr	r1, [pc, #400]	@ (80179c0 <tcp_input+0x4a8>)
 801782e:	4865      	ldr	r0, [pc, #404]	@ (80179c4 <tcp_input+0x4ac>)
 8017830:	f009 f864 	bl	80208fc <iprintf>
      if (prev != NULL) {
 8017834:	69fb      	ldr	r3, [r7, #28]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d00a      	beq.n	8017850 <tcp_input+0x338>
        prev->next = pcb->next;
 801783a:	69bb      	ldr	r3, [r7, #24]
 801783c:	68da      	ldr	r2, [r3, #12]
 801783e:	69fb      	ldr	r3, [r7, #28]
 8017840:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017842:	4b61      	ldr	r3, [pc, #388]	@ (80179c8 <tcp_input+0x4b0>)
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	69bb      	ldr	r3, [r7, #24]
 8017848:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801784a:	4a5f      	ldr	r2, [pc, #380]	@ (80179c8 <tcp_input+0x4b0>)
 801784c:	69bb      	ldr	r3, [r7, #24]
 801784e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017850:	69bb      	ldr	r3, [r7, #24]
 8017852:	68db      	ldr	r3, [r3, #12]
 8017854:	69ba      	ldr	r2, [r7, #24]
 8017856:	429a      	cmp	r2, r3
 8017858:	d111      	bne.n	801787e <tcp_input+0x366>
 801785a:	4b58      	ldr	r3, [pc, #352]	@ (80179bc <tcp_input+0x4a4>)
 801785c:	f240 1215 	movw	r2, #277	@ 0x115
 8017860:	495a      	ldr	r1, [pc, #360]	@ (80179cc <tcp_input+0x4b4>)
 8017862:	4858      	ldr	r0, [pc, #352]	@ (80179c4 <tcp_input+0x4ac>)
 8017864:	f009 f84a 	bl	80208fc <iprintf>
      break;
 8017868:	e009      	b.n	801787e <tcp_input+0x366>
    }
    prev = pcb;
 801786a:	69bb      	ldr	r3, [r7, #24]
 801786c:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801786e:	69bb      	ldr	r3, [r7, #24]
 8017870:	68db      	ldr	r3, [r3, #12]
 8017872:	61bb      	str	r3, [r7, #24]
 8017874:	69bb      	ldr	r3, [r7, #24]
 8017876:	2b00      	cmp	r3, #0
 8017878:	f47f af5e 	bne.w	8017738 <tcp_input+0x220>
 801787c:	e000      	b.n	8017880 <tcp_input+0x368>
      break;
 801787e:	bf00      	nop
  }

  if (pcb == NULL) {
 8017880:	69bb      	ldr	r3, [r7, #24]
 8017882:	2b00      	cmp	r3, #0
 8017884:	f040 80aa 	bne.w	80179dc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017888:	4b51      	ldr	r3, [pc, #324]	@ (80179d0 <tcp_input+0x4b8>)
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	61bb      	str	r3, [r7, #24]
 801788e:	e03f      	b.n	8017910 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017890:	69bb      	ldr	r3, [r7, #24]
 8017892:	7d1b      	ldrb	r3, [r3, #20]
 8017894:	2b0a      	cmp	r3, #10
 8017896:	d006      	beq.n	80178a6 <tcp_input+0x38e>
 8017898:	4b48      	ldr	r3, [pc, #288]	@ (80179bc <tcp_input+0x4a4>)
 801789a:	f240 121f 	movw	r2, #287	@ 0x11f
 801789e:	494d      	ldr	r1, [pc, #308]	@ (80179d4 <tcp_input+0x4bc>)
 80178a0:	4848      	ldr	r0, [pc, #288]	@ (80179c4 <tcp_input+0x4ac>)
 80178a2:	f009 f82b 	bl	80208fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80178a6:	69bb      	ldr	r3, [r7, #24]
 80178a8:	7a1b      	ldrb	r3, [r3, #8]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d009      	beq.n	80178c2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80178ae:	69bb      	ldr	r3, [r7, #24]
 80178b0:	7a1a      	ldrb	r2, [r3, #8]
 80178b2:	4b41      	ldr	r3, [pc, #260]	@ (80179b8 <tcp_input+0x4a0>)
 80178b4:	685b      	ldr	r3, [r3, #4]
 80178b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80178ba:	3301      	adds	r3, #1
 80178bc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80178be:	429a      	cmp	r2, r3
 80178c0:	d122      	bne.n	8017908 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80178c2:	69bb      	ldr	r3, [r7, #24]
 80178c4:	8b1a      	ldrh	r2, [r3, #24]
 80178c6:	4b3b      	ldr	r3, [pc, #236]	@ (80179b4 <tcp_input+0x49c>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	881b      	ldrh	r3, [r3, #0]
 80178cc:	b29b      	uxth	r3, r3
 80178ce:	429a      	cmp	r2, r3
 80178d0:	d11b      	bne.n	801790a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80178d2:	69bb      	ldr	r3, [r7, #24]
 80178d4:	8ada      	ldrh	r2, [r3, #22]
 80178d6:	4b37      	ldr	r3, [pc, #220]	@ (80179b4 <tcp_input+0x49c>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	885b      	ldrh	r3, [r3, #2]
 80178dc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80178de:	429a      	cmp	r2, r3
 80178e0:	d113      	bne.n	801790a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80178e2:	69bb      	ldr	r3, [r7, #24]
 80178e4:	685a      	ldr	r2, [r3, #4]
 80178e6:	4b34      	ldr	r3, [pc, #208]	@ (80179b8 <tcp_input+0x4a0>)
 80178e8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80178ea:	429a      	cmp	r2, r3
 80178ec:	d10d      	bne.n	801790a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80178ee:	69bb      	ldr	r3, [r7, #24]
 80178f0:	681a      	ldr	r2, [r3, #0]
 80178f2:	4b31      	ldr	r3, [pc, #196]	@ (80179b8 <tcp_input+0x4a0>)
 80178f4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80178f6:	429a      	cmp	r2, r3
 80178f8:	d107      	bne.n	801790a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80178fa:	69b8      	ldr	r0, [r7, #24]
 80178fc:	f000 fb56 	bl	8017fac <tcp_timewait_input>
        }
        pbuf_free(p);
 8017900:	6878      	ldr	r0, [r7, #4]
 8017902:	f7fd fc71 	bl	80151e8 <pbuf_free>
        return;
 8017906:	e1fd      	b.n	8017d04 <tcp_input+0x7ec>
        continue;
 8017908:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801790a:	69bb      	ldr	r3, [r7, #24]
 801790c:	68db      	ldr	r3, [r3, #12]
 801790e:	61bb      	str	r3, [r7, #24]
 8017910:	69bb      	ldr	r3, [r7, #24]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d1bc      	bne.n	8017890 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017916:	2300      	movs	r3, #0
 8017918:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801791a:	4b2f      	ldr	r3, [pc, #188]	@ (80179d8 <tcp_input+0x4c0>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	617b      	str	r3, [r7, #20]
 8017920:	e02a      	b.n	8017978 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	7a1b      	ldrb	r3, [r3, #8]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d00c      	beq.n	8017944 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801792a:	697b      	ldr	r3, [r7, #20]
 801792c:	7a1a      	ldrb	r2, [r3, #8]
 801792e:	4b22      	ldr	r3, [pc, #136]	@ (80179b8 <tcp_input+0x4a0>)
 8017930:	685b      	ldr	r3, [r3, #4]
 8017932:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017936:	3301      	adds	r3, #1
 8017938:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801793a:	429a      	cmp	r2, r3
 801793c:	d002      	beq.n	8017944 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801793e:	697b      	ldr	r3, [r7, #20]
 8017940:	61fb      	str	r3, [r7, #28]
        continue;
 8017942:	e016      	b.n	8017972 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	8ada      	ldrh	r2, [r3, #22]
 8017948:	4b1a      	ldr	r3, [pc, #104]	@ (80179b4 <tcp_input+0x49c>)
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	885b      	ldrh	r3, [r3, #2]
 801794e:	b29b      	uxth	r3, r3
 8017950:	429a      	cmp	r2, r3
 8017952:	d10c      	bne.n	801796e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017954:	697b      	ldr	r3, [r7, #20]
 8017956:	681a      	ldr	r2, [r3, #0]
 8017958:	4b17      	ldr	r3, [pc, #92]	@ (80179b8 <tcp_input+0x4a0>)
 801795a:	695b      	ldr	r3, [r3, #20]
 801795c:	429a      	cmp	r2, r3
 801795e:	d00f      	beq.n	8017980 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017960:	697b      	ldr	r3, [r7, #20]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d00d      	beq.n	8017982 <tcp_input+0x46a>
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d009      	beq.n	8017982 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801796e:	697b      	ldr	r3, [r7, #20]
 8017970:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017972:	697b      	ldr	r3, [r7, #20]
 8017974:	68db      	ldr	r3, [r3, #12]
 8017976:	617b      	str	r3, [r7, #20]
 8017978:	697b      	ldr	r3, [r7, #20]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d1d1      	bne.n	8017922 <tcp_input+0x40a>
 801797e:	e000      	b.n	8017982 <tcp_input+0x46a>
            break;
 8017980:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8017982:	697b      	ldr	r3, [r7, #20]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d029      	beq.n	80179dc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017988:	69fb      	ldr	r3, [r7, #28]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d00a      	beq.n	80179a4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801798e:	697b      	ldr	r3, [r7, #20]
 8017990:	68da      	ldr	r2, [r3, #12]
 8017992:	69fb      	ldr	r3, [r7, #28]
 8017994:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017996:	4b10      	ldr	r3, [pc, #64]	@ (80179d8 <tcp_input+0x4c0>)
 8017998:	681a      	ldr	r2, [r3, #0]
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801799e:	4a0e      	ldr	r2, [pc, #56]	@ (80179d8 <tcp_input+0x4c0>)
 80179a0:	697b      	ldr	r3, [r7, #20]
 80179a2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80179a4:	6978      	ldr	r0, [r7, #20]
 80179a6:	f000 fa03 	bl	8017db0 <tcp_listen_input>
      }
      pbuf_free(p);
 80179aa:	6878      	ldr	r0, [r7, #4]
 80179ac:	f7fd fc1c 	bl	80151e8 <pbuf_free>
      return;
 80179b0:	e1a8      	b.n	8017d04 <tcp_input+0x7ec>
 80179b2:	bf00      	nop
 80179b4:	20022ad4 	.word	0x20022ad4
 80179b8:	2001f658 	.word	0x2001f658
 80179bc:	08023ef8 	.word	0x08023ef8
 80179c0:	08024024 	.word	0x08024024
 80179c4:	08023f44 	.word	0x08023f44
 80179c8:	20022ab4 	.word	0x20022ab4
 80179cc:	08024050 	.word	0x08024050
 80179d0:	20022ab8 	.word	0x20022ab8
 80179d4:	0802407c 	.word	0x0802407c
 80179d8:	20022ab0 	.word	0x20022ab0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80179dc:	69bb      	ldr	r3, [r7, #24]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	f000 8158 	beq.w	8017c94 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80179e4:	4b95      	ldr	r3, [pc, #596]	@ (8017c3c <tcp_input+0x724>)
 80179e6:	2200      	movs	r2, #0
 80179e8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	891a      	ldrh	r2, [r3, #8]
 80179ee:	4b93      	ldr	r3, [pc, #588]	@ (8017c3c <tcp_input+0x724>)
 80179f0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80179f2:	4a92      	ldr	r2, [pc, #584]	@ (8017c3c <tcp_input+0x724>)
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80179f8:	4b91      	ldr	r3, [pc, #580]	@ (8017c40 <tcp_input+0x728>)
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	4a8f      	ldr	r2, [pc, #572]	@ (8017c3c <tcp_input+0x724>)
 80179fe:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8017a00:	4b90      	ldr	r3, [pc, #576]	@ (8017c44 <tcp_input+0x72c>)
 8017a02:	2200      	movs	r2, #0
 8017a04:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017a06:	4b90      	ldr	r3, [pc, #576]	@ (8017c48 <tcp_input+0x730>)
 8017a08:	2200      	movs	r2, #0
 8017a0a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017a0c:	4b8f      	ldr	r3, [pc, #572]	@ (8017c4c <tcp_input+0x734>)
 8017a0e:	2200      	movs	r2, #0
 8017a10:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017a12:	4b8f      	ldr	r3, [pc, #572]	@ (8017c50 <tcp_input+0x738>)
 8017a14:	781b      	ldrb	r3, [r3, #0]
 8017a16:	f003 0308 	and.w	r3, r3, #8
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d006      	beq.n	8017a2c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	7b5b      	ldrb	r3, [r3, #13]
 8017a22:	f043 0301 	orr.w	r3, r3, #1
 8017a26:	b2da      	uxtb	r2, r3
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017a2c:	69bb      	ldr	r3, [r7, #24]
 8017a2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d017      	beq.n	8017a64 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017a34:	69b8      	ldr	r0, [r7, #24]
 8017a36:	f7ff f855 	bl	8016ae4 <tcp_process_refused_data>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	f113 0f0d 	cmn.w	r3, #13
 8017a40:	d007      	beq.n	8017a52 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017a42:	69bb      	ldr	r3, [r7, #24]
 8017a44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d00c      	beq.n	8017a64 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017a4a:	4b82      	ldr	r3, [pc, #520]	@ (8017c54 <tcp_input+0x73c>)
 8017a4c:	881b      	ldrh	r3, [r3, #0]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d008      	beq.n	8017a64 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017a52:	69bb      	ldr	r3, [r7, #24]
 8017a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	f040 80e3 	bne.w	8017c22 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017a5c:	69b8      	ldr	r0, [r7, #24]
 8017a5e:	f003 fe6d 	bl	801b73c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017a62:	e0de      	b.n	8017c22 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8017a64:	4a7c      	ldr	r2, [pc, #496]	@ (8017c58 <tcp_input+0x740>)
 8017a66:	69bb      	ldr	r3, [r7, #24]
 8017a68:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017a6a:	69b8      	ldr	r0, [r7, #24]
 8017a6c:	f000 fb18 	bl	80180a0 <tcp_process>
 8017a70:	4603      	mov	r3, r0
 8017a72:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017a74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017a78:	f113 0f0d 	cmn.w	r3, #13
 8017a7c:	f000 80d3 	beq.w	8017c26 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8017a80:	4b71      	ldr	r3, [pc, #452]	@ (8017c48 <tcp_input+0x730>)
 8017a82:	781b      	ldrb	r3, [r3, #0]
 8017a84:	f003 0308 	and.w	r3, r3, #8
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d015      	beq.n	8017ab8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017a8c:	69bb      	ldr	r3, [r7, #24]
 8017a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d008      	beq.n	8017aa8 <tcp_input+0x590>
 8017a96:	69bb      	ldr	r3, [r7, #24]
 8017a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a9c:	69ba      	ldr	r2, [r7, #24]
 8017a9e:	6912      	ldr	r2, [r2, #16]
 8017aa0:	f06f 010d 	mvn.w	r1, #13
 8017aa4:	4610      	mov	r0, r2
 8017aa6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017aa8:	69b9      	ldr	r1, [r7, #24]
 8017aaa:	486c      	ldr	r0, [pc, #432]	@ (8017c5c <tcp_input+0x744>)
 8017aac:	f7ff fbb6 	bl	801721c <tcp_pcb_remove>
        tcp_free(pcb);
 8017ab0:	69b8      	ldr	r0, [r7, #24]
 8017ab2:	f7fd fe81 	bl	80157b8 <tcp_free>
 8017ab6:	e0da      	b.n	8017c6e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8017ab8:	2300      	movs	r3, #0
 8017aba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017abc:	4b63      	ldr	r3, [pc, #396]	@ (8017c4c <tcp_input+0x734>)
 8017abe:	881b      	ldrh	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d01d      	beq.n	8017b00 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017ac4:	4b61      	ldr	r3, [pc, #388]	@ (8017c4c <tcp_input+0x734>)
 8017ac6:	881b      	ldrh	r3, [r3, #0]
 8017ac8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017aca:	69bb      	ldr	r3, [r7, #24]
 8017acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d00a      	beq.n	8017aea <tcp_input+0x5d2>
 8017ad4:	69bb      	ldr	r3, [r7, #24]
 8017ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ada:	69ba      	ldr	r2, [r7, #24]
 8017adc:	6910      	ldr	r0, [r2, #16]
 8017ade:	89fa      	ldrh	r2, [r7, #14]
 8017ae0:	69b9      	ldr	r1, [r7, #24]
 8017ae2:	4798      	blx	r3
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	74fb      	strb	r3, [r7, #19]
 8017ae8:	e001      	b.n	8017aee <tcp_input+0x5d6>
 8017aea:	2300      	movs	r3, #0
 8017aec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017aee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017af2:	f113 0f0d 	cmn.w	r3, #13
 8017af6:	f000 8098 	beq.w	8017c2a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017afa:	4b54      	ldr	r3, [pc, #336]	@ (8017c4c <tcp_input+0x734>)
 8017afc:	2200      	movs	r2, #0
 8017afe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017b00:	69b8      	ldr	r0, [r7, #24]
 8017b02:	f000 f915 	bl	8017d30 <tcp_input_delayed_close>
 8017b06:	4603      	mov	r3, r0
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	f040 8090 	bne.w	8017c2e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8017c44 <tcp_input+0x72c>)
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d041      	beq.n	8017b9a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017b16:	69bb      	ldr	r3, [r7, #24]
 8017b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d006      	beq.n	8017b2c <tcp_input+0x614>
 8017b1e:	4b50      	ldr	r3, [pc, #320]	@ (8017c60 <tcp_input+0x748>)
 8017b20:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017b24:	494f      	ldr	r1, [pc, #316]	@ (8017c64 <tcp_input+0x74c>)
 8017b26:	4850      	ldr	r0, [pc, #320]	@ (8017c68 <tcp_input+0x750>)
 8017b28:	f008 fee8 	bl	80208fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017b2c:	69bb      	ldr	r3, [r7, #24]
 8017b2e:	8b5b      	ldrh	r3, [r3, #26]
 8017b30:	f003 0310 	and.w	r3, r3, #16
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d008      	beq.n	8017b4a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017b38:	4b42      	ldr	r3, [pc, #264]	@ (8017c44 <tcp_input+0x72c>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f7fd fb53 	bl	80151e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017b42:	69b8      	ldr	r0, [r7, #24]
 8017b44:	f7fe f97c 	bl	8015e40 <tcp_abort>
            goto aborted;
 8017b48:	e091      	b.n	8017c6e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017b4a:	69bb      	ldr	r3, [r7, #24]
 8017b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d00c      	beq.n	8017b6e <tcp_input+0x656>
 8017b54:	69bb      	ldr	r3, [r7, #24]
 8017b56:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017b5a:	69bb      	ldr	r3, [r7, #24]
 8017b5c:	6918      	ldr	r0, [r3, #16]
 8017b5e:	4b39      	ldr	r3, [pc, #228]	@ (8017c44 <tcp_input+0x72c>)
 8017b60:	681a      	ldr	r2, [r3, #0]
 8017b62:	2300      	movs	r3, #0
 8017b64:	69b9      	ldr	r1, [r7, #24]
 8017b66:	47a0      	blx	r4
 8017b68:	4603      	mov	r3, r0
 8017b6a:	74fb      	strb	r3, [r7, #19]
 8017b6c:	e008      	b.n	8017b80 <tcp_input+0x668>
 8017b6e:	4b35      	ldr	r3, [pc, #212]	@ (8017c44 <tcp_input+0x72c>)
 8017b70:	681a      	ldr	r2, [r3, #0]
 8017b72:	2300      	movs	r3, #0
 8017b74:	69b9      	ldr	r1, [r7, #24]
 8017b76:	2000      	movs	r0, #0
 8017b78:	f7ff f88a 	bl	8016c90 <tcp_recv_null>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017b80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017b84:	f113 0f0d 	cmn.w	r3, #13
 8017b88:	d053      	beq.n	8017c32 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017b8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d003      	beq.n	8017b9a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017b92:	4b2c      	ldr	r3, [pc, #176]	@ (8017c44 <tcp_input+0x72c>)
 8017b94:	681a      	ldr	r2, [r3, #0]
 8017b96:	69bb      	ldr	r3, [r7, #24]
 8017b98:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8017c48 <tcp_input+0x730>)
 8017b9c:	781b      	ldrb	r3, [r3, #0]
 8017b9e:	f003 0320 	and.w	r3, r3, #32
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d030      	beq.n	8017c08 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8017ba6:	69bb      	ldr	r3, [r7, #24]
 8017ba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d009      	beq.n	8017bc2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017bae:	69bb      	ldr	r3, [r7, #24]
 8017bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017bb2:	7b5a      	ldrb	r2, [r3, #13]
 8017bb4:	69bb      	ldr	r3, [r7, #24]
 8017bb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017bb8:	f042 0220 	orr.w	r2, r2, #32
 8017bbc:	b2d2      	uxtb	r2, r2
 8017bbe:	735a      	strb	r2, [r3, #13]
 8017bc0:	e022      	b.n	8017c08 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017bc2:	69bb      	ldr	r3, [r7, #24]
 8017bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017bc6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8017bca:	d005      	beq.n	8017bd8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8017bcc:	69bb      	ldr	r3, [r7, #24]
 8017bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	b29a      	uxth	r2, r3
 8017bd4:	69bb      	ldr	r3, [r7, #24]
 8017bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017bd8:	69bb      	ldr	r3, [r7, #24]
 8017bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d00b      	beq.n	8017bfa <tcp_input+0x6e2>
 8017be2:	69bb      	ldr	r3, [r7, #24]
 8017be4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017be8:	69bb      	ldr	r3, [r7, #24]
 8017bea:	6918      	ldr	r0, [r3, #16]
 8017bec:	2300      	movs	r3, #0
 8017bee:	2200      	movs	r2, #0
 8017bf0:	69b9      	ldr	r1, [r7, #24]
 8017bf2:	47a0      	blx	r4
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	74fb      	strb	r3, [r7, #19]
 8017bf8:	e001      	b.n	8017bfe <tcp_input+0x6e6>
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017bfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017c02:	f113 0f0d 	cmn.w	r3, #13
 8017c06:	d016      	beq.n	8017c36 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017c08:	4b13      	ldr	r3, [pc, #76]	@ (8017c58 <tcp_input+0x740>)
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017c0e:	69b8      	ldr	r0, [r7, #24]
 8017c10:	f000 f88e 	bl	8017d30 <tcp_input_delayed_close>
 8017c14:	4603      	mov	r3, r0
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d128      	bne.n	8017c6c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017c1a:	69b8      	ldr	r0, [r7, #24]
 8017c1c:	f002 ff7c 	bl	801ab18 <tcp_output>
 8017c20:	e025      	b.n	8017c6e <tcp_input+0x756>
        goto aborted;
 8017c22:	bf00      	nop
 8017c24:	e023      	b.n	8017c6e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017c26:	bf00      	nop
 8017c28:	e021      	b.n	8017c6e <tcp_input+0x756>
              goto aborted;
 8017c2a:	bf00      	nop
 8017c2c:	e01f      	b.n	8017c6e <tcp_input+0x756>
          goto aborted;
 8017c2e:	bf00      	nop
 8017c30:	e01d      	b.n	8017c6e <tcp_input+0x756>
            goto aborted;
 8017c32:	bf00      	nop
 8017c34:	e01b      	b.n	8017c6e <tcp_input+0x756>
              goto aborted;
 8017c36:	bf00      	nop
 8017c38:	e019      	b.n	8017c6e <tcp_input+0x756>
 8017c3a:	bf00      	nop
 8017c3c:	20022ac0 	.word	0x20022ac0
 8017c40:	20022ad4 	.word	0x20022ad4
 8017c44:	20022af4 	.word	0x20022af4
 8017c48:	20022af1 	.word	0x20022af1
 8017c4c:	20022aec 	.word	0x20022aec
 8017c50:	20022af0 	.word	0x20022af0
 8017c54:	20022aee 	.word	0x20022aee
 8017c58:	20022af8 	.word	0x20022af8
 8017c5c:	20022ab4 	.word	0x20022ab4
 8017c60:	08023ef8 	.word	0x08023ef8
 8017c64:	080240ac 	.word	0x080240ac
 8017c68:	08023f44 	.word	0x08023f44
          goto aborted;
 8017c6c:	bf00      	nop
    tcp_input_pcb = NULL;
 8017c6e:	4b27      	ldr	r3, [pc, #156]	@ (8017d0c <tcp_input+0x7f4>)
 8017c70:	2200      	movs	r2, #0
 8017c72:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017c74:	4b26      	ldr	r3, [pc, #152]	@ (8017d10 <tcp_input+0x7f8>)
 8017c76:	2200      	movs	r2, #0
 8017c78:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017c7a:	4b26      	ldr	r3, [pc, #152]	@ (8017d14 <tcp_input+0x7fc>)
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d03f      	beq.n	8017d02 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8017c82:	4b24      	ldr	r3, [pc, #144]	@ (8017d14 <tcp_input+0x7fc>)
 8017c84:	685b      	ldr	r3, [r3, #4]
 8017c86:	4618      	mov	r0, r3
 8017c88:	f7fd faae 	bl	80151e8 <pbuf_free>
      inseg.p = NULL;
 8017c8c:	4b21      	ldr	r3, [pc, #132]	@ (8017d14 <tcp_input+0x7fc>)
 8017c8e:	2200      	movs	r2, #0
 8017c90:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017c92:	e036      	b.n	8017d02 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017c94:	4b20      	ldr	r3, [pc, #128]	@ (8017d18 <tcp_input+0x800>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	899b      	ldrh	r3, [r3, #12]
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f7fb fd49 	bl	8013734 <lwip_htons>
 8017ca2:	4603      	mov	r3, r0
 8017ca4:	b2db      	uxtb	r3, r3
 8017ca6:	f003 0304 	and.w	r3, r3, #4
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d118      	bne.n	8017ce0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017cae:	4b1b      	ldr	r3, [pc, #108]	@ (8017d1c <tcp_input+0x804>)
 8017cb0:	6819      	ldr	r1, [r3, #0]
 8017cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8017d20 <tcp_input+0x808>)
 8017cb4:	881b      	ldrh	r3, [r3, #0]
 8017cb6:	461a      	mov	r2, r3
 8017cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8017d24 <tcp_input+0x80c>)
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017cbe:	4b16      	ldr	r3, [pc, #88]	@ (8017d18 <tcp_input+0x800>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017cc2:	885b      	ldrh	r3, [r3, #2]
 8017cc4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017cc6:	4a14      	ldr	r2, [pc, #80]	@ (8017d18 <tcp_input+0x800>)
 8017cc8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017cca:	8812      	ldrh	r2, [r2, #0]
 8017ccc:	b292      	uxth	r2, r2
 8017cce:	9202      	str	r2, [sp, #8]
 8017cd0:	9301      	str	r3, [sp, #4]
 8017cd2:	4b15      	ldr	r3, [pc, #84]	@ (8017d28 <tcp_input+0x810>)
 8017cd4:	9300      	str	r3, [sp, #0]
 8017cd6:	4b15      	ldr	r3, [pc, #84]	@ (8017d2c <tcp_input+0x814>)
 8017cd8:	4602      	mov	r2, r0
 8017cda:	2000      	movs	r0, #0
 8017cdc:	f003 fcdc 	bl	801b698 <tcp_rst>
    pbuf_free(p);
 8017ce0:	6878      	ldr	r0, [r7, #4]
 8017ce2:	f7fd fa81 	bl	80151e8 <pbuf_free>
  return;
 8017ce6:	e00c      	b.n	8017d02 <tcp_input+0x7ea>
    goto dropped;
 8017ce8:	bf00      	nop
 8017cea:	e006      	b.n	8017cfa <tcp_input+0x7e2>
    goto dropped;
 8017cec:	bf00      	nop
 8017cee:	e004      	b.n	8017cfa <tcp_input+0x7e2>
    goto dropped;
 8017cf0:	bf00      	nop
 8017cf2:	e002      	b.n	8017cfa <tcp_input+0x7e2>
      goto dropped;
 8017cf4:	bf00      	nop
 8017cf6:	e000      	b.n	8017cfa <tcp_input+0x7e2>
      goto dropped;
 8017cf8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017cfa:	6878      	ldr	r0, [r7, #4]
 8017cfc:	f7fd fa74 	bl	80151e8 <pbuf_free>
 8017d00:	e000      	b.n	8017d04 <tcp_input+0x7ec>
  return;
 8017d02:	bf00      	nop
}
 8017d04:	3724      	adds	r7, #36	@ 0x24
 8017d06:	46bd      	mov	sp, r7
 8017d08:	bd90      	pop	{r4, r7, pc}
 8017d0a:	bf00      	nop
 8017d0c:	20022af8 	.word	0x20022af8
 8017d10:	20022af4 	.word	0x20022af4
 8017d14:	20022ac0 	.word	0x20022ac0
 8017d18:	20022ad4 	.word	0x20022ad4
 8017d1c:	20022ae8 	.word	0x20022ae8
 8017d20:	20022aee 	.word	0x20022aee
 8017d24:	20022ae4 	.word	0x20022ae4
 8017d28:	2001f668 	.word	0x2001f668
 8017d2c:	2001f66c 	.word	0x2001f66c

08017d30 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b082      	sub	sp, #8
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d106      	bne.n	8017d4c <tcp_input_delayed_close+0x1c>
 8017d3e:	4b17      	ldr	r3, [pc, #92]	@ (8017d9c <tcp_input_delayed_close+0x6c>)
 8017d40:	f240 225a 	movw	r2, #602	@ 0x25a
 8017d44:	4916      	ldr	r1, [pc, #88]	@ (8017da0 <tcp_input_delayed_close+0x70>)
 8017d46:	4817      	ldr	r0, [pc, #92]	@ (8017da4 <tcp_input_delayed_close+0x74>)
 8017d48:	f008 fdd8 	bl	80208fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017d4c:	4b16      	ldr	r3, [pc, #88]	@ (8017da8 <tcp_input_delayed_close+0x78>)
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	f003 0310 	and.w	r3, r3, #16
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d01c      	beq.n	8017d92 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	8b5b      	ldrh	r3, [r3, #26]
 8017d5c:	f003 0310 	and.w	r3, r3, #16
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d10d      	bne.n	8017d80 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d008      	beq.n	8017d80 <tcp_input_delayed_close+0x50>
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017d74:	687a      	ldr	r2, [r7, #4]
 8017d76:	6912      	ldr	r2, [r2, #16]
 8017d78:	f06f 010e 	mvn.w	r1, #14
 8017d7c:	4610      	mov	r0, r2
 8017d7e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017d80:	6879      	ldr	r1, [r7, #4]
 8017d82:	480a      	ldr	r0, [pc, #40]	@ (8017dac <tcp_input_delayed_close+0x7c>)
 8017d84:	f7ff fa4a 	bl	801721c <tcp_pcb_remove>
    tcp_free(pcb);
 8017d88:	6878      	ldr	r0, [r7, #4]
 8017d8a:	f7fd fd15 	bl	80157b8 <tcp_free>
    return 1;
 8017d8e:	2301      	movs	r3, #1
 8017d90:	e000      	b.n	8017d94 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8017d92:	2300      	movs	r3, #0
}
 8017d94:	4618      	mov	r0, r3
 8017d96:	3708      	adds	r7, #8
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd80      	pop	{r7, pc}
 8017d9c:	08023ef8 	.word	0x08023ef8
 8017da0:	080240c8 	.word	0x080240c8
 8017da4:	08023f44 	.word	0x08023f44
 8017da8:	20022af1 	.word	0x20022af1
 8017dac:	20022ab4 	.word	0x20022ab4

08017db0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017db0:	b590      	push	{r4, r7, lr}
 8017db2:	b08b      	sub	sp, #44	@ 0x2c
 8017db4:	af04      	add	r7, sp, #16
 8017db6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017db8:	4b6f      	ldr	r3, [pc, #444]	@ (8017f78 <tcp_listen_input+0x1c8>)
 8017dba:	781b      	ldrb	r3, [r3, #0]
 8017dbc:	f003 0304 	and.w	r3, r3, #4
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	f040 80d2 	bne.w	8017f6a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d106      	bne.n	8017dda <tcp_listen_input+0x2a>
 8017dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8017f7c <tcp_listen_input+0x1cc>)
 8017dce:	f240 2281 	movw	r2, #641	@ 0x281
 8017dd2:	496b      	ldr	r1, [pc, #428]	@ (8017f80 <tcp_listen_input+0x1d0>)
 8017dd4:	486b      	ldr	r0, [pc, #428]	@ (8017f84 <tcp_listen_input+0x1d4>)
 8017dd6:	f008 fd91 	bl	80208fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017dda:	4b67      	ldr	r3, [pc, #412]	@ (8017f78 <tcp_listen_input+0x1c8>)
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	f003 0310 	and.w	r3, r3, #16
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d019      	beq.n	8017e1a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017de6:	4b68      	ldr	r3, [pc, #416]	@ (8017f88 <tcp_listen_input+0x1d8>)
 8017de8:	6819      	ldr	r1, [r3, #0]
 8017dea:	4b68      	ldr	r3, [pc, #416]	@ (8017f8c <tcp_listen_input+0x1dc>)
 8017dec:	881b      	ldrh	r3, [r3, #0]
 8017dee:	461a      	mov	r2, r3
 8017df0:	4b67      	ldr	r3, [pc, #412]	@ (8017f90 <tcp_listen_input+0x1e0>)
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017df6:	4b67      	ldr	r3, [pc, #412]	@ (8017f94 <tcp_listen_input+0x1e4>)
 8017df8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017dfa:	885b      	ldrh	r3, [r3, #2]
 8017dfc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017dfe:	4a65      	ldr	r2, [pc, #404]	@ (8017f94 <tcp_listen_input+0x1e4>)
 8017e00:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e02:	8812      	ldrh	r2, [r2, #0]
 8017e04:	b292      	uxth	r2, r2
 8017e06:	9202      	str	r2, [sp, #8]
 8017e08:	9301      	str	r3, [sp, #4]
 8017e0a:	4b63      	ldr	r3, [pc, #396]	@ (8017f98 <tcp_listen_input+0x1e8>)
 8017e0c:	9300      	str	r3, [sp, #0]
 8017e0e:	4b63      	ldr	r3, [pc, #396]	@ (8017f9c <tcp_listen_input+0x1ec>)
 8017e10:	4602      	mov	r2, r0
 8017e12:	6878      	ldr	r0, [r7, #4]
 8017e14:	f003 fc40 	bl	801b698 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017e18:	e0a9      	b.n	8017f6e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8017e1a:	4b57      	ldr	r3, [pc, #348]	@ (8017f78 <tcp_listen_input+0x1c8>)
 8017e1c:	781b      	ldrb	r3, [r3, #0]
 8017e1e:	f003 0302 	and.w	r3, r3, #2
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	f000 80a3 	beq.w	8017f6e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	7d5b      	ldrb	r3, [r3, #21]
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f7ff f853 	bl	8016ed8 <tcp_alloc>
 8017e32:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017e34:	697b      	ldr	r3, [r7, #20]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d111      	bne.n	8017e5e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	699b      	ldr	r3, [r3, #24]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d00a      	beq.n	8017e58 <tcp_listen_input+0xa8>
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	699b      	ldr	r3, [r3, #24]
 8017e46:	687a      	ldr	r2, [r7, #4]
 8017e48:	6910      	ldr	r0, [r2, #16]
 8017e4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017e4e:	2100      	movs	r1, #0
 8017e50:	4798      	blx	r3
 8017e52:	4603      	mov	r3, r0
 8017e54:	73bb      	strb	r3, [r7, #14]
      return;
 8017e56:	e08b      	b.n	8017f70 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017e58:	23f0      	movs	r3, #240	@ 0xf0
 8017e5a:	73bb      	strb	r3, [r7, #14]
      return;
 8017e5c:	e088      	b.n	8017f70 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017e5e:	4b50      	ldr	r3, [pc, #320]	@ (8017fa0 <tcp_listen_input+0x1f0>)
 8017e60:	695a      	ldr	r2, [r3, #20]
 8017e62:	697b      	ldr	r3, [r7, #20]
 8017e64:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017e66:	4b4e      	ldr	r3, [pc, #312]	@ (8017fa0 <tcp_listen_input+0x1f0>)
 8017e68:	691a      	ldr	r2, [r3, #16]
 8017e6a:	697b      	ldr	r3, [r7, #20]
 8017e6c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	8ada      	ldrh	r2, [r3, #22]
 8017e72:	697b      	ldr	r3, [r7, #20]
 8017e74:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017e76:	4b47      	ldr	r3, [pc, #284]	@ (8017f94 <tcp_listen_input+0x1e4>)
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	881b      	ldrh	r3, [r3, #0]
 8017e7c:	b29a      	uxth	r2, r3
 8017e7e:	697b      	ldr	r3, [r7, #20]
 8017e80:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017e82:	697b      	ldr	r3, [r7, #20]
 8017e84:	2203      	movs	r2, #3
 8017e86:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017e88:	4b41      	ldr	r3, [pc, #260]	@ (8017f90 <tcp_listen_input+0x1e0>)
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	1c5a      	adds	r2, r3, #1
 8017e8e:	697b      	ldr	r3, [r7, #20]
 8017e90:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017e92:	697b      	ldr	r3, [r7, #20]
 8017e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017e96:	697b      	ldr	r3, [r7, #20]
 8017e98:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8017e9a:	6978      	ldr	r0, [r7, #20]
 8017e9c:	f7ff fa52 	bl	8017344 <tcp_next_iss>
 8017ea0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017ea2:	697b      	ldr	r3, [r7, #20]
 8017ea4:	693a      	ldr	r2, [r7, #16]
 8017ea6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8017ea8:	697b      	ldr	r3, [r7, #20]
 8017eaa:	693a      	ldr	r2, [r7, #16]
 8017eac:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8017eae:	697b      	ldr	r3, [r7, #20]
 8017eb0:	693a      	ldr	r2, [r7, #16]
 8017eb2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8017eb4:	697b      	ldr	r3, [r7, #20]
 8017eb6:	693a      	ldr	r2, [r7, #16]
 8017eb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017eba:	4b35      	ldr	r3, [pc, #212]	@ (8017f90 <tcp_listen_input+0x1e0>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	1e5a      	subs	r2, r3, #1
 8017ec0:	697b      	ldr	r3, [r7, #20]
 8017ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	691a      	ldr	r2, [r3, #16]
 8017ec8:	697b      	ldr	r3, [r7, #20]
 8017eca:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017ecc:	697b      	ldr	r3, [r7, #20]
 8017ece:	687a      	ldr	r2, [r7, #4]
 8017ed0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	7a5b      	ldrb	r3, [r3, #9]
 8017ed6:	f003 030c 	and.w	r3, r3, #12
 8017eda:	b2da      	uxtb	r2, r3
 8017edc:	697b      	ldr	r3, [r7, #20]
 8017ede:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	7a1a      	ldrb	r2, [r3, #8]
 8017ee4:	697b      	ldr	r3, [r7, #20]
 8017ee6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8017fa4 <tcp_listen_input+0x1f4>)
 8017eea:	681a      	ldr	r2, [r3, #0]
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	60da      	str	r2, [r3, #12]
 8017ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8017fa4 <tcp_listen_input+0x1f4>)
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	6013      	str	r3, [r2, #0]
 8017ef6:	f003 fd91 	bl	801ba1c <tcp_timer_needed>
 8017efa:	4b2b      	ldr	r3, [pc, #172]	@ (8017fa8 <tcp_listen_input+0x1f8>)
 8017efc:	2201      	movs	r2, #1
 8017efe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017f00:	6978      	ldr	r0, [r7, #20]
 8017f02:	f001 fd8b 	bl	8019a1c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017f06:	4b23      	ldr	r3, [pc, #140]	@ (8017f94 <tcp_listen_input+0x1e4>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	89db      	ldrh	r3, [r3, #14]
 8017f0c:	b29a      	uxth	r2, r3
 8017f0e:	697b      	ldr	r3, [r7, #20]
 8017f10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017f14:	697b      	ldr	r3, [r7, #20]
 8017f16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017f1a:	697b      	ldr	r3, [r7, #20]
 8017f1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017f20:	697b      	ldr	r3, [r7, #20]
 8017f22:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017f24:	697b      	ldr	r3, [r7, #20]
 8017f26:	3304      	adds	r3, #4
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f006 f801 	bl	801df30 <ip4_route>
 8017f2e:	4601      	mov	r1, r0
 8017f30:	697b      	ldr	r3, [r7, #20]
 8017f32:	3304      	adds	r3, #4
 8017f34:	461a      	mov	r2, r3
 8017f36:	4620      	mov	r0, r4
 8017f38:	f7ff fa2a 	bl	8017390 <tcp_eff_send_mss_netif>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	461a      	mov	r2, r3
 8017f40:	697b      	ldr	r3, [r7, #20]
 8017f42:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017f44:	2112      	movs	r1, #18
 8017f46:	6978      	ldr	r0, [r7, #20]
 8017f48:	f002 fcf8 	bl	801a93c <tcp_enqueue_flags>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d004      	beq.n	8017f62 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017f58:	2100      	movs	r1, #0
 8017f5a:	6978      	ldr	r0, [r7, #20]
 8017f5c:	f7fd feb2 	bl	8015cc4 <tcp_abandon>
      return;
 8017f60:	e006      	b.n	8017f70 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8017f62:	6978      	ldr	r0, [r7, #20]
 8017f64:	f002 fdd8 	bl	801ab18 <tcp_output>
  return;
 8017f68:	e001      	b.n	8017f6e <tcp_listen_input+0x1be>
    return;
 8017f6a:	bf00      	nop
 8017f6c:	e000      	b.n	8017f70 <tcp_listen_input+0x1c0>
  return;
 8017f6e:	bf00      	nop
}
 8017f70:	371c      	adds	r7, #28
 8017f72:	46bd      	mov	sp, r7
 8017f74:	bd90      	pop	{r4, r7, pc}
 8017f76:	bf00      	nop
 8017f78:	20022af0 	.word	0x20022af0
 8017f7c:	08023ef8 	.word	0x08023ef8
 8017f80:	080240f0 	.word	0x080240f0
 8017f84:	08023f44 	.word	0x08023f44
 8017f88:	20022ae8 	.word	0x20022ae8
 8017f8c:	20022aee 	.word	0x20022aee
 8017f90:	20022ae4 	.word	0x20022ae4
 8017f94:	20022ad4 	.word	0x20022ad4
 8017f98:	2001f668 	.word	0x2001f668
 8017f9c:	2001f66c 	.word	0x2001f66c
 8017fa0:	2001f658 	.word	0x2001f658
 8017fa4:	20022ab4 	.word	0x20022ab4
 8017fa8:	20022abc 	.word	0x20022abc

08017fac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b086      	sub	sp, #24
 8017fb0:	af04      	add	r7, sp, #16
 8017fb2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8018074 <tcp_timewait_input+0xc8>)
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	f003 0304 	and.w	r3, r3, #4
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d153      	bne.n	8018068 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d106      	bne.n	8017fd4 <tcp_timewait_input+0x28>
 8017fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8018078 <tcp_timewait_input+0xcc>)
 8017fc8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8017fcc:	492b      	ldr	r1, [pc, #172]	@ (801807c <tcp_timewait_input+0xd0>)
 8017fce:	482c      	ldr	r0, [pc, #176]	@ (8018080 <tcp_timewait_input+0xd4>)
 8017fd0:	f008 fc94 	bl	80208fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017fd4:	4b27      	ldr	r3, [pc, #156]	@ (8018074 <tcp_timewait_input+0xc8>)
 8017fd6:	781b      	ldrb	r3, [r3, #0]
 8017fd8:	f003 0302 	and.w	r3, r3, #2
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d02a      	beq.n	8018036 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017fe0:	4b28      	ldr	r3, [pc, #160]	@ (8018084 <tcp_timewait_input+0xd8>)
 8017fe2:	681a      	ldr	r2, [r3, #0]
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fe8:	1ad3      	subs	r3, r2, r3
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	db2d      	blt.n	801804a <tcp_timewait_input+0x9e>
 8017fee:	4b25      	ldr	r3, [pc, #148]	@ (8018084 <tcp_timewait_input+0xd8>)
 8017ff0:	681a      	ldr	r2, [r3, #0]
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ff6:	6879      	ldr	r1, [r7, #4]
 8017ff8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017ffa:	440b      	add	r3, r1
 8017ffc:	1ad3      	subs	r3, r2, r3
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	dc23      	bgt.n	801804a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018002:	4b21      	ldr	r3, [pc, #132]	@ (8018088 <tcp_timewait_input+0xdc>)
 8018004:	6819      	ldr	r1, [r3, #0]
 8018006:	4b21      	ldr	r3, [pc, #132]	@ (801808c <tcp_timewait_input+0xe0>)
 8018008:	881b      	ldrh	r3, [r3, #0]
 801800a:	461a      	mov	r2, r3
 801800c:	4b1d      	ldr	r3, [pc, #116]	@ (8018084 <tcp_timewait_input+0xd8>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018012:	4b1f      	ldr	r3, [pc, #124]	@ (8018090 <tcp_timewait_input+0xe4>)
 8018014:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018016:	885b      	ldrh	r3, [r3, #2]
 8018018:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801801a:	4a1d      	ldr	r2, [pc, #116]	@ (8018090 <tcp_timewait_input+0xe4>)
 801801c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801801e:	8812      	ldrh	r2, [r2, #0]
 8018020:	b292      	uxth	r2, r2
 8018022:	9202      	str	r2, [sp, #8]
 8018024:	9301      	str	r3, [sp, #4]
 8018026:	4b1b      	ldr	r3, [pc, #108]	@ (8018094 <tcp_timewait_input+0xe8>)
 8018028:	9300      	str	r3, [sp, #0]
 801802a:	4b1b      	ldr	r3, [pc, #108]	@ (8018098 <tcp_timewait_input+0xec>)
 801802c:	4602      	mov	r2, r0
 801802e:	6878      	ldr	r0, [r7, #4]
 8018030:	f003 fb32 	bl	801b698 <tcp_rst>
      return;
 8018034:	e01b      	b.n	801806e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018036:	4b0f      	ldr	r3, [pc, #60]	@ (8018074 <tcp_timewait_input+0xc8>)
 8018038:	781b      	ldrb	r3, [r3, #0]
 801803a:	f003 0301 	and.w	r3, r3, #1
 801803e:	2b00      	cmp	r3, #0
 8018040:	d003      	beq.n	801804a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018042:	4b16      	ldr	r3, [pc, #88]	@ (801809c <tcp_timewait_input+0xf0>)
 8018044:	681a      	ldr	r2, [r3, #0]
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801804a:	4b10      	ldr	r3, [pc, #64]	@ (801808c <tcp_timewait_input+0xe0>)
 801804c:	881b      	ldrh	r3, [r3, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d00c      	beq.n	801806c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	8b5b      	ldrh	r3, [r3, #26]
 8018056:	f043 0302 	orr.w	r3, r3, #2
 801805a:	b29a      	uxth	r2, r3
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018060:	6878      	ldr	r0, [r7, #4]
 8018062:	f002 fd59 	bl	801ab18 <tcp_output>
  }
  return;
 8018066:	e001      	b.n	801806c <tcp_timewait_input+0xc0>
    return;
 8018068:	bf00      	nop
 801806a:	e000      	b.n	801806e <tcp_timewait_input+0xc2>
  return;
 801806c:	bf00      	nop
}
 801806e:	3708      	adds	r7, #8
 8018070:	46bd      	mov	sp, r7
 8018072:	bd80      	pop	{r7, pc}
 8018074:	20022af0 	.word	0x20022af0
 8018078:	08023ef8 	.word	0x08023ef8
 801807c:	08024110 	.word	0x08024110
 8018080:	08023f44 	.word	0x08023f44
 8018084:	20022ae4 	.word	0x20022ae4
 8018088:	20022ae8 	.word	0x20022ae8
 801808c:	20022aee 	.word	0x20022aee
 8018090:	20022ad4 	.word	0x20022ad4
 8018094:	2001f668 	.word	0x2001f668
 8018098:	2001f66c 	.word	0x2001f66c
 801809c:	20022aa8 	.word	0x20022aa8

080180a0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80180a0:	b590      	push	{r4, r7, lr}
 80180a2:	b08d      	sub	sp, #52	@ 0x34
 80180a4:	af04      	add	r7, sp, #16
 80180a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80180a8:	2300      	movs	r3, #0
 80180aa:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 80180ac:	2300      	movs	r3, #0
 80180ae:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d106      	bne.n	80180c4 <tcp_process+0x24>
 80180b6:	4b9d      	ldr	r3, [pc, #628]	@ (801832c <tcp_process+0x28c>)
 80180b8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80180bc:	499c      	ldr	r1, [pc, #624]	@ (8018330 <tcp_process+0x290>)
 80180be:	489d      	ldr	r0, [pc, #628]	@ (8018334 <tcp_process+0x294>)
 80180c0:	f008 fc1c 	bl	80208fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80180c4:	4b9c      	ldr	r3, [pc, #624]	@ (8018338 <tcp_process+0x298>)
 80180c6:	781b      	ldrb	r3, [r3, #0]
 80180c8:	f003 0304 	and.w	r3, r3, #4
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d04e      	beq.n	801816e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	7d1b      	ldrb	r3, [r3, #20]
 80180d4:	2b02      	cmp	r3, #2
 80180d6:	d108      	bne.n	80180ea <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80180dc:	4b97      	ldr	r3, [pc, #604]	@ (801833c <tcp_process+0x29c>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d123      	bne.n	801812c <tcp_process+0x8c>
        acceptable = 1;
 80180e4:	2301      	movs	r3, #1
 80180e6:	77fb      	strb	r3, [r7, #31]
 80180e8:	e020      	b.n	801812c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80180ee:	4b94      	ldr	r3, [pc, #592]	@ (8018340 <tcp_process+0x2a0>)
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d102      	bne.n	80180fc <tcp_process+0x5c>
        acceptable = 1;
 80180f6:	2301      	movs	r3, #1
 80180f8:	77fb      	strb	r3, [r7, #31]
 80180fa:	e017      	b.n	801812c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80180fc:	4b90      	ldr	r3, [pc, #576]	@ (8018340 <tcp_process+0x2a0>)
 80180fe:	681a      	ldr	r2, [r3, #0]
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018104:	1ad3      	subs	r3, r2, r3
 8018106:	2b00      	cmp	r3, #0
 8018108:	db10      	blt.n	801812c <tcp_process+0x8c>
 801810a:	4b8d      	ldr	r3, [pc, #564]	@ (8018340 <tcp_process+0x2a0>)
 801810c:	681a      	ldr	r2, [r3, #0]
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018112:	6879      	ldr	r1, [r7, #4]
 8018114:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018116:	440b      	add	r3, r1
 8018118:	1ad3      	subs	r3, r2, r3
 801811a:	2b00      	cmp	r3, #0
 801811c:	dc06      	bgt.n	801812c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	8b5b      	ldrh	r3, [r3, #26]
 8018122:	f043 0302 	orr.w	r3, r3, #2
 8018126:	b29a      	uxth	r2, r3
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801812c:	7ffb      	ldrb	r3, [r7, #31]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d01b      	beq.n	801816a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	7d1b      	ldrb	r3, [r3, #20]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d106      	bne.n	8018148 <tcp_process+0xa8>
 801813a:	4b7c      	ldr	r3, [pc, #496]	@ (801832c <tcp_process+0x28c>)
 801813c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8018140:	4980      	ldr	r1, [pc, #512]	@ (8018344 <tcp_process+0x2a4>)
 8018142:	487c      	ldr	r0, [pc, #496]	@ (8018334 <tcp_process+0x294>)
 8018144:	f008 fbda 	bl	80208fc <iprintf>
      recv_flags |= TF_RESET;
 8018148:	4b7f      	ldr	r3, [pc, #508]	@ (8018348 <tcp_process+0x2a8>)
 801814a:	781b      	ldrb	r3, [r3, #0]
 801814c:	f043 0308 	orr.w	r3, r3, #8
 8018150:	b2da      	uxtb	r2, r3
 8018152:	4b7d      	ldr	r3, [pc, #500]	@ (8018348 <tcp_process+0x2a8>)
 8018154:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	8b5b      	ldrh	r3, [r3, #26]
 801815a:	f023 0301 	bic.w	r3, r3, #1
 801815e:	b29a      	uxth	r2, r3
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018164:	f06f 030d 	mvn.w	r3, #13
 8018168:	e37a      	b.n	8018860 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801816a:	2300      	movs	r3, #0
 801816c:	e378      	b.n	8018860 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801816e:	4b72      	ldr	r3, [pc, #456]	@ (8018338 <tcp_process+0x298>)
 8018170:	781b      	ldrb	r3, [r3, #0]
 8018172:	f003 0302 	and.w	r3, r3, #2
 8018176:	2b00      	cmp	r3, #0
 8018178:	d010      	beq.n	801819c <tcp_process+0xfc>
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	7d1b      	ldrb	r3, [r3, #20]
 801817e:	2b02      	cmp	r3, #2
 8018180:	d00c      	beq.n	801819c <tcp_process+0xfc>
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	7d1b      	ldrb	r3, [r3, #20]
 8018186:	2b03      	cmp	r3, #3
 8018188:	d008      	beq.n	801819c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	8b5b      	ldrh	r3, [r3, #26]
 801818e:	f043 0302 	orr.w	r3, r3, #2
 8018192:	b29a      	uxth	r2, r3
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018198:	2300      	movs	r3, #0
 801819a:	e361      	b.n	8018860 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	8b5b      	ldrh	r3, [r3, #26]
 80181a0:	f003 0310 	and.w	r3, r3, #16
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d103      	bne.n	80181b0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80181a8:	4b68      	ldr	r3, [pc, #416]	@ (801834c <tcp_process+0x2ac>)
 80181aa:	681a      	ldr	r2, [r3, #0]
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	2200      	movs	r2, #0
 80181b4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	2200      	movs	r2, #0
 80181bc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80181c0:	6878      	ldr	r0, [r7, #4]
 80181c2:	f001 fc2b 	bl	8019a1c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	7d1b      	ldrb	r3, [r3, #20]
 80181ca:	3b02      	subs	r3, #2
 80181cc:	2b07      	cmp	r3, #7
 80181ce:	f200 8337 	bhi.w	8018840 <tcp_process+0x7a0>
 80181d2:	a201      	add	r2, pc, #4	@ (adr r2, 80181d8 <tcp_process+0x138>)
 80181d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181d8:	080181f9 	.word	0x080181f9
 80181dc:	08018429 	.word	0x08018429
 80181e0:	080185a1 	.word	0x080185a1
 80181e4:	080185cb 	.word	0x080185cb
 80181e8:	080186ef 	.word	0x080186ef
 80181ec:	080185a1 	.word	0x080185a1
 80181f0:	0801877b 	.word	0x0801877b
 80181f4:	0801880b 	.word	0x0801880b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80181f8:	4b4f      	ldr	r3, [pc, #316]	@ (8018338 <tcp_process+0x298>)
 80181fa:	781b      	ldrb	r3, [r3, #0]
 80181fc:	f003 0310 	and.w	r3, r3, #16
 8018200:	2b00      	cmp	r3, #0
 8018202:	f000 80e4 	beq.w	80183ce <tcp_process+0x32e>
 8018206:	4b4c      	ldr	r3, [pc, #304]	@ (8018338 <tcp_process+0x298>)
 8018208:	781b      	ldrb	r3, [r3, #0]
 801820a:	f003 0302 	and.w	r3, r3, #2
 801820e:	2b00      	cmp	r3, #0
 8018210:	f000 80dd 	beq.w	80183ce <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018218:	1c5a      	adds	r2, r3, #1
 801821a:	4b48      	ldr	r3, [pc, #288]	@ (801833c <tcp_process+0x29c>)
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	429a      	cmp	r2, r3
 8018220:	f040 80d5 	bne.w	80183ce <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018224:	4b46      	ldr	r3, [pc, #280]	@ (8018340 <tcp_process+0x2a0>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	1c5a      	adds	r2, r3, #1
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8018236:	4b41      	ldr	r3, [pc, #260]	@ (801833c <tcp_process+0x29c>)
 8018238:	681a      	ldr	r2, [r3, #0]
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801823e:	4b44      	ldr	r3, [pc, #272]	@ (8018350 <tcp_process+0x2b0>)
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	89db      	ldrh	r3, [r3, #14]
 8018244:	b29a      	uxth	r2, r3
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018258:	4b39      	ldr	r3, [pc, #228]	@ (8018340 <tcp_process+0x2a0>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	1e5a      	subs	r2, r3, #1
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2204      	movs	r2, #4
 8018266:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	3304      	adds	r3, #4
 8018270:	4618      	mov	r0, r3
 8018272:	f005 fe5d 	bl	801df30 <ip4_route>
 8018276:	4601      	mov	r1, r0
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	3304      	adds	r3, #4
 801827c:	461a      	mov	r2, r3
 801827e:	4620      	mov	r0, r4
 8018280:	f7ff f886 	bl	8017390 <tcp_eff_send_mss_netif>
 8018284:	4603      	mov	r3, r0
 8018286:	461a      	mov	r2, r3
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018290:	009a      	lsls	r2, r3, #2
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018296:	005b      	lsls	r3, r3, #1
 8018298:	f241 111c 	movw	r1, #4380	@ 0x111c
 801829c:	428b      	cmp	r3, r1
 801829e:	bf38      	it	cc
 80182a0:	460b      	movcc	r3, r1
 80182a2:	429a      	cmp	r2, r3
 80182a4:	d204      	bcs.n	80182b0 <tcp_process+0x210>
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80182aa:	009b      	lsls	r3, r3, #2
 80182ac:	b29b      	uxth	r3, r3
 80182ae:	e00d      	b.n	80182cc <tcp_process+0x22c>
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80182b4:	005b      	lsls	r3, r3, #1
 80182b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80182ba:	4293      	cmp	r3, r2
 80182bc:	d904      	bls.n	80182c8 <tcp_process+0x228>
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80182c2:	005b      	lsls	r3, r3, #1
 80182c4:	b29b      	uxth	r3, r3
 80182c6:	e001      	b.n	80182cc <tcp_process+0x22c>
 80182c8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80182cc:	687a      	ldr	r2, [r7, #4]
 80182ce:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d106      	bne.n	80182ea <tcp_process+0x24a>
 80182dc:	4b13      	ldr	r3, [pc, #76]	@ (801832c <tcp_process+0x28c>)
 80182de:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80182e2:	491c      	ldr	r1, [pc, #112]	@ (8018354 <tcp_process+0x2b4>)
 80182e4:	4813      	ldr	r0, [pc, #76]	@ (8018334 <tcp_process+0x294>)
 80182e6:	f008 fb09 	bl	80208fc <iprintf>
        --pcb->snd_queuelen;
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80182f0:	3b01      	subs	r3, #1
 80182f2:	b29a      	uxth	r2, r3
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80182fe:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8018300:	697b      	ldr	r3, [r7, #20]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d12a      	bne.n	801835c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801830a:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801830c:	697b      	ldr	r3, [r7, #20]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d106      	bne.n	8018320 <tcp_process+0x280>
 8018312:	4b06      	ldr	r3, [pc, #24]	@ (801832c <tcp_process+0x28c>)
 8018314:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8018318:	490f      	ldr	r1, [pc, #60]	@ (8018358 <tcp_process+0x2b8>)
 801831a:	4806      	ldr	r0, [pc, #24]	@ (8018334 <tcp_process+0x294>)
 801831c:	f008 faee 	bl	80208fc <iprintf>
          pcb->unsent = rseg->next;
 8018320:	697b      	ldr	r3, [r7, #20]
 8018322:	681a      	ldr	r2, [r3, #0]
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018328:	e01c      	b.n	8018364 <tcp_process+0x2c4>
 801832a:	bf00      	nop
 801832c:	08023ef8 	.word	0x08023ef8
 8018330:	08024130 	.word	0x08024130
 8018334:	08023f44 	.word	0x08023f44
 8018338:	20022af0 	.word	0x20022af0
 801833c:	20022ae8 	.word	0x20022ae8
 8018340:	20022ae4 	.word	0x20022ae4
 8018344:	0802414c 	.word	0x0802414c
 8018348:	20022af1 	.word	0x20022af1
 801834c:	20022aa8 	.word	0x20022aa8
 8018350:	20022ad4 	.word	0x20022ad4
 8018354:	0802416c 	.word	0x0802416c
 8018358:	08024184 	.word	0x08024184
        } else {
          pcb->unacked = rseg->next;
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	681a      	ldr	r2, [r3, #0]
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8018364:	6978      	ldr	r0, [r7, #20]
 8018366:	f7fe fc4e 	bl	8016c06 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801836e:	2b00      	cmp	r3, #0
 8018370:	d104      	bne.n	801837c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018378:	861a      	strh	r2, [r3, #48]	@ 0x30
 801837a:	e006      	b.n	801838a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	2200      	movs	r2, #0
 8018380:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	2200      	movs	r2, #0
 8018386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018390:	2b00      	cmp	r3, #0
 8018392:	d00a      	beq.n	80183aa <tcp_process+0x30a>
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801839a:	687a      	ldr	r2, [r7, #4]
 801839c:	6910      	ldr	r0, [r2, #16]
 801839e:	2200      	movs	r2, #0
 80183a0:	6879      	ldr	r1, [r7, #4]
 80183a2:	4798      	blx	r3
 80183a4:	4603      	mov	r3, r0
 80183a6:	77bb      	strb	r3, [r7, #30]
 80183a8:	e001      	b.n	80183ae <tcp_process+0x30e>
 80183aa:	2300      	movs	r3, #0
 80183ac:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 80183ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80183b2:	f113 0f0d 	cmn.w	r3, #13
 80183b6:	d102      	bne.n	80183be <tcp_process+0x31e>
          return ERR_ABRT;
 80183b8:	f06f 030c 	mvn.w	r3, #12
 80183bc:	e250      	b.n	8018860 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	8b5b      	ldrh	r3, [r3, #26]
 80183c2:	f043 0302 	orr.w	r3, r3, #2
 80183c6:	b29a      	uxth	r2, r3
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80183cc:	e23a      	b.n	8018844 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80183ce:	4b98      	ldr	r3, [pc, #608]	@ (8018630 <tcp_process+0x590>)
 80183d0:	781b      	ldrb	r3, [r3, #0]
 80183d2:	f003 0310 	and.w	r3, r3, #16
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	f000 8234 	beq.w	8018844 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183dc:	4b95      	ldr	r3, [pc, #596]	@ (8018634 <tcp_process+0x594>)
 80183de:	6819      	ldr	r1, [r3, #0]
 80183e0:	4b95      	ldr	r3, [pc, #596]	@ (8018638 <tcp_process+0x598>)
 80183e2:	881b      	ldrh	r3, [r3, #0]
 80183e4:	461a      	mov	r2, r3
 80183e6:	4b95      	ldr	r3, [pc, #596]	@ (801863c <tcp_process+0x59c>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183ec:	4b94      	ldr	r3, [pc, #592]	@ (8018640 <tcp_process+0x5a0>)
 80183ee:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183f0:	885b      	ldrh	r3, [r3, #2]
 80183f2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183f4:	4a92      	ldr	r2, [pc, #584]	@ (8018640 <tcp_process+0x5a0>)
 80183f6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183f8:	8812      	ldrh	r2, [r2, #0]
 80183fa:	b292      	uxth	r2, r2
 80183fc:	9202      	str	r2, [sp, #8]
 80183fe:	9301      	str	r3, [sp, #4]
 8018400:	4b90      	ldr	r3, [pc, #576]	@ (8018644 <tcp_process+0x5a4>)
 8018402:	9300      	str	r3, [sp, #0]
 8018404:	4b90      	ldr	r3, [pc, #576]	@ (8018648 <tcp_process+0x5a8>)
 8018406:	4602      	mov	r2, r0
 8018408:	6878      	ldr	r0, [r7, #4]
 801840a:	f003 f945 	bl	801b698 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018414:	2b05      	cmp	r3, #5
 8018416:	f200 8215 	bhi.w	8018844 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	2200      	movs	r2, #0
 801841e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8018420:	6878      	ldr	r0, [r7, #4]
 8018422:	f002 ff11 	bl	801b248 <tcp_rexmit_rto>
      break;
 8018426:	e20d      	b.n	8018844 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018428:	4b81      	ldr	r3, [pc, #516]	@ (8018630 <tcp_process+0x590>)
 801842a:	781b      	ldrb	r3, [r3, #0]
 801842c:	f003 0310 	and.w	r3, r3, #16
 8018430:	2b00      	cmp	r3, #0
 8018432:	f000 80a1 	beq.w	8018578 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018436:	4b7f      	ldr	r3, [pc, #508]	@ (8018634 <tcp_process+0x594>)
 8018438:	681a      	ldr	r2, [r3, #0]
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801843e:	1ad3      	subs	r3, r2, r3
 8018440:	3b01      	subs	r3, #1
 8018442:	2b00      	cmp	r3, #0
 8018444:	db7e      	blt.n	8018544 <tcp_process+0x4a4>
 8018446:	4b7b      	ldr	r3, [pc, #492]	@ (8018634 <tcp_process+0x594>)
 8018448:	681a      	ldr	r2, [r3, #0]
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801844e:	1ad3      	subs	r3, r2, r3
 8018450:	2b00      	cmp	r3, #0
 8018452:	dc77      	bgt.n	8018544 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	2204      	movs	r2, #4
 8018458:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801845e:	2b00      	cmp	r3, #0
 8018460:	d102      	bne.n	8018468 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018462:	23fa      	movs	r3, #250	@ 0xfa
 8018464:	77bb      	strb	r3, [r7, #30]
 8018466:	e01d      	b.n	80184a4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801846c:	699b      	ldr	r3, [r3, #24]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d106      	bne.n	8018480 <tcp_process+0x3e0>
 8018472:	4b76      	ldr	r3, [pc, #472]	@ (801864c <tcp_process+0x5ac>)
 8018474:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8018478:	4975      	ldr	r1, [pc, #468]	@ (8018650 <tcp_process+0x5b0>)
 801847a:	4876      	ldr	r0, [pc, #472]	@ (8018654 <tcp_process+0x5b4>)
 801847c:	f008 fa3e 	bl	80208fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018484:	699b      	ldr	r3, [r3, #24]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d00a      	beq.n	80184a0 <tcp_process+0x400>
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801848e:	699b      	ldr	r3, [r3, #24]
 8018490:	687a      	ldr	r2, [r7, #4]
 8018492:	6910      	ldr	r0, [r2, #16]
 8018494:	2200      	movs	r2, #0
 8018496:	6879      	ldr	r1, [r7, #4]
 8018498:	4798      	blx	r3
 801849a:	4603      	mov	r3, r0
 801849c:	77bb      	strb	r3, [r7, #30]
 801849e:	e001      	b.n	80184a4 <tcp_process+0x404>
 80184a0:	23f0      	movs	r3, #240	@ 0xf0
 80184a2:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 80184a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d00a      	beq.n	80184c2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80184ac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80184b0:	f113 0f0d 	cmn.w	r3, #13
 80184b4:	d002      	beq.n	80184bc <tcp_process+0x41c>
              tcp_abort(pcb);
 80184b6:	6878      	ldr	r0, [r7, #4]
 80184b8:	f7fd fcc2 	bl	8015e40 <tcp_abort>
            }
            return ERR_ABRT;
 80184bc:	f06f 030c 	mvn.w	r3, #12
 80184c0:	e1ce      	b.n	8018860 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80184c2:	6878      	ldr	r0, [r7, #4]
 80184c4:	f000 fae0 	bl	8018a88 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80184c8:	4b63      	ldr	r3, [pc, #396]	@ (8018658 <tcp_process+0x5b8>)
 80184ca:	881b      	ldrh	r3, [r3, #0]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d005      	beq.n	80184dc <tcp_process+0x43c>
            recv_acked--;
 80184d0:	4b61      	ldr	r3, [pc, #388]	@ (8018658 <tcp_process+0x5b8>)
 80184d2:	881b      	ldrh	r3, [r3, #0]
 80184d4:	3b01      	subs	r3, #1
 80184d6:	b29a      	uxth	r2, r3
 80184d8:	4b5f      	ldr	r3, [pc, #380]	@ (8018658 <tcp_process+0x5b8>)
 80184da:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80184e0:	009a      	lsls	r2, r3, #2
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80184e6:	005b      	lsls	r3, r3, #1
 80184e8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80184ec:	428b      	cmp	r3, r1
 80184ee:	bf38      	it	cc
 80184f0:	460b      	movcc	r3, r1
 80184f2:	429a      	cmp	r2, r3
 80184f4:	d204      	bcs.n	8018500 <tcp_process+0x460>
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80184fa:	009b      	lsls	r3, r3, #2
 80184fc:	b29b      	uxth	r3, r3
 80184fe:	e00d      	b.n	801851c <tcp_process+0x47c>
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018504:	005b      	lsls	r3, r3, #1
 8018506:	f241 121c 	movw	r2, #4380	@ 0x111c
 801850a:	4293      	cmp	r3, r2
 801850c:	d904      	bls.n	8018518 <tcp_process+0x478>
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018512:	005b      	lsls	r3, r3, #1
 8018514:	b29b      	uxth	r3, r3
 8018516:	e001      	b.n	801851c <tcp_process+0x47c>
 8018518:	f241 131c 	movw	r3, #4380	@ 0x111c
 801851c:	687a      	ldr	r2, [r7, #4]
 801851e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018522:	4b4e      	ldr	r3, [pc, #312]	@ (801865c <tcp_process+0x5bc>)
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	f003 0320 	and.w	r3, r3, #32
 801852a:	2b00      	cmp	r3, #0
 801852c:	d037      	beq.n	801859e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	8b5b      	ldrh	r3, [r3, #26]
 8018532:	f043 0302 	orr.w	r3, r3, #2
 8018536:	b29a      	uxth	r2, r3
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	2207      	movs	r2, #7
 8018540:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018542:	e02c      	b.n	801859e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018544:	4b3b      	ldr	r3, [pc, #236]	@ (8018634 <tcp_process+0x594>)
 8018546:	6819      	ldr	r1, [r3, #0]
 8018548:	4b3b      	ldr	r3, [pc, #236]	@ (8018638 <tcp_process+0x598>)
 801854a:	881b      	ldrh	r3, [r3, #0]
 801854c:	461a      	mov	r2, r3
 801854e:	4b3b      	ldr	r3, [pc, #236]	@ (801863c <tcp_process+0x59c>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018554:	4b3a      	ldr	r3, [pc, #232]	@ (8018640 <tcp_process+0x5a0>)
 8018556:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018558:	885b      	ldrh	r3, [r3, #2]
 801855a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801855c:	4a38      	ldr	r2, [pc, #224]	@ (8018640 <tcp_process+0x5a0>)
 801855e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018560:	8812      	ldrh	r2, [r2, #0]
 8018562:	b292      	uxth	r2, r2
 8018564:	9202      	str	r2, [sp, #8]
 8018566:	9301      	str	r3, [sp, #4]
 8018568:	4b36      	ldr	r3, [pc, #216]	@ (8018644 <tcp_process+0x5a4>)
 801856a:	9300      	str	r3, [sp, #0]
 801856c:	4b36      	ldr	r3, [pc, #216]	@ (8018648 <tcp_process+0x5a8>)
 801856e:	4602      	mov	r2, r0
 8018570:	6878      	ldr	r0, [r7, #4]
 8018572:	f003 f891 	bl	801b698 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018576:	e167      	b.n	8018848 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018578:	4b2d      	ldr	r3, [pc, #180]	@ (8018630 <tcp_process+0x590>)
 801857a:	781b      	ldrb	r3, [r3, #0]
 801857c:	f003 0302 	and.w	r3, r3, #2
 8018580:	2b00      	cmp	r3, #0
 8018582:	f000 8161 	beq.w	8018848 <tcp_process+0x7a8>
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801858a:	1e5a      	subs	r2, r3, #1
 801858c:	4b2b      	ldr	r3, [pc, #172]	@ (801863c <tcp_process+0x59c>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	429a      	cmp	r2, r3
 8018592:	f040 8159 	bne.w	8018848 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	f002 fe78 	bl	801b28c <tcp_rexmit>
      break;
 801859c:	e154      	b.n	8018848 <tcp_process+0x7a8>
 801859e:	e153      	b.n	8018848 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80185a0:	6878      	ldr	r0, [r7, #4]
 80185a2:	f000 fa71 	bl	8018a88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80185a6:	4b2d      	ldr	r3, [pc, #180]	@ (801865c <tcp_process+0x5bc>)
 80185a8:	781b      	ldrb	r3, [r3, #0]
 80185aa:	f003 0320 	and.w	r3, r3, #32
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f000 814c 	beq.w	801884c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	8b5b      	ldrh	r3, [r3, #26]
 80185b8:	f043 0302 	orr.w	r3, r3, #2
 80185bc:	b29a      	uxth	r2, r3
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	2207      	movs	r2, #7
 80185c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80185c8:	e140      	b.n	801884c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	f000 fa5c 	bl	8018a88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80185d0:	4b22      	ldr	r3, [pc, #136]	@ (801865c <tcp_process+0x5bc>)
 80185d2:	781b      	ldrb	r3, [r3, #0]
 80185d4:	f003 0320 	and.w	r3, r3, #32
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d071      	beq.n	80186c0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80185dc:	4b14      	ldr	r3, [pc, #80]	@ (8018630 <tcp_process+0x590>)
 80185de:	781b      	ldrb	r3, [r3, #0]
 80185e0:	f003 0310 	and.w	r3, r3, #16
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d060      	beq.n	80186aa <tcp_process+0x60a>
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80185ec:	4b11      	ldr	r3, [pc, #68]	@ (8018634 <tcp_process+0x594>)
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	429a      	cmp	r2, r3
 80185f2:	d15a      	bne.n	80186aa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d156      	bne.n	80186aa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	8b5b      	ldrh	r3, [r3, #26]
 8018600:	f043 0302 	orr.w	r3, r3, #2
 8018604:	b29a      	uxth	r2, r3
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801860a:	6878      	ldr	r0, [r7, #4]
 801860c:	f7fe fdb6 	bl	801717c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018610:	4b13      	ldr	r3, [pc, #76]	@ (8018660 <tcp_process+0x5c0>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	687a      	ldr	r2, [r7, #4]
 8018616:	429a      	cmp	r2, r3
 8018618:	d105      	bne.n	8018626 <tcp_process+0x586>
 801861a:	4b11      	ldr	r3, [pc, #68]	@ (8018660 <tcp_process+0x5c0>)
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	68db      	ldr	r3, [r3, #12]
 8018620:	4a0f      	ldr	r2, [pc, #60]	@ (8018660 <tcp_process+0x5c0>)
 8018622:	6013      	str	r3, [r2, #0]
 8018624:	e02e      	b.n	8018684 <tcp_process+0x5e4>
 8018626:	4b0e      	ldr	r3, [pc, #56]	@ (8018660 <tcp_process+0x5c0>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	613b      	str	r3, [r7, #16]
 801862c:	e027      	b.n	801867e <tcp_process+0x5de>
 801862e:	bf00      	nop
 8018630:	20022af0 	.word	0x20022af0
 8018634:	20022ae8 	.word	0x20022ae8
 8018638:	20022aee 	.word	0x20022aee
 801863c:	20022ae4 	.word	0x20022ae4
 8018640:	20022ad4 	.word	0x20022ad4
 8018644:	2001f668 	.word	0x2001f668
 8018648:	2001f66c 	.word	0x2001f66c
 801864c:	08023ef8 	.word	0x08023ef8
 8018650:	08024198 	.word	0x08024198
 8018654:	08023f44 	.word	0x08023f44
 8018658:	20022aec 	.word	0x20022aec
 801865c:	20022af1 	.word	0x20022af1
 8018660:	20022ab4 	.word	0x20022ab4
 8018664:	693b      	ldr	r3, [r7, #16]
 8018666:	68db      	ldr	r3, [r3, #12]
 8018668:	687a      	ldr	r2, [r7, #4]
 801866a:	429a      	cmp	r2, r3
 801866c:	d104      	bne.n	8018678 <tcp_process+0x5d8>
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	68da      	ldr	r2, [r3, #12]
 8018672:	693b      	ldr	r3, [r7, #16]
 8018674:	60da      	str	r2, [r3, #12]
 8018676:	e005      	b.n	8018684 <tcp_process+0x5e4>
 8018678:	693b      	ldr	r3, [r7, #16]
 801867a:	68db      	ldr	r3, [r3, #12]
 801867c:	613b      	str	r3, [r7, #16]
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d1ef      	bne.n	8018664 <tcp_process+0x5c4>
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	2200      	movs	r2, #0
 8018688:	60da      	str	r2, [r3, #12]
 801868a:	4b77      	ldr	r3, [pc, #476]	@ (8018868 <tcp_process+0x7c8>)
 801868c:	2201      	movs	r2, #1
 801868e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	220a      	movs	r2, #10
 8018694:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018696:	4b75      	ldr	r3, [pc, #468]	@ (801886c <tcp_process+0x7cc>)
 8018698:	681a      	ldr	r2, [r3, #0]
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	60da      	str	r2, [r3, #12]
 801869e:	4a73      	ldr	r2, [pc, #460]	@ (801886c <tcp_process+0x7cc>)
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	6013      	str	r3, [r2, #0]
 80186a4:	f003 f9ba 	bl	801ba1c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80186a8:	e0d2      	b.n	8018850 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	8b5b      	ldrh	r3, [r3, #26]
 80186ae:	f043 0302 	orr.w	r3, r3, #2
 80186b2:	b29a      	uxth	r2, r3
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	2208      	movs	r2, #8
 80186bc:	751a      	strb	r2, [r3, #20]
      break;
 80186be:	e0c7      	b.n	8018850 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80186c0:	4b6b      	ldr	r3, [pc, #428]	@ (8018870 <tcp_process+0x7d0>)
 80186c2:	781b      	ldrb	r3, [r3, #0]
 80186c4:	f003 0310 	and.w	r3, r3, #16
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	f000 80c1 	beq.w	8018850 <tcp_process+0x7b0>
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80186d2:	4b68      	ldr	r3, [pc, #416]	@ (8018874 <tcp_process+0x7d4>)
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	429a      	cmp	r2, r3
 80186d8:	f040 80ba 	bne.w	8018850 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	f040 80b5 	bne.w	8018850 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	2206      	movs	r2, #6
 80186ea:	751a      	strb	r2, [r3, #20]
      break;
 80186ec:	e0b0      	b.n	8018850 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80186ee:	6878      	ldr	r0, [r7, #4]
 80186f0:	f000 f9ca 	bl	8018a88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80186f4:	4b60      	ldr	r3, [pc, #384]	@ (8018878 <tcp_process+0x7d8>)
 80186f6:	781b      	ldrb	r3, [r3, #0]
 80186f8:	f003 0320 	and.w	r3, r3, #32
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	f000 80a9 	beq.w	8018854 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	8b5b      	ldrh	r3, [r3, #26]
 8018706:	f043 0302 	orr.w	r3, r3, #2
 801870a:	b29a      	uxth	r2, r3
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018710:	6878      	ldr	r0, [r7, #4]
 8018712:	f7fe fd33 	bl	801717c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018716:	4b59      	ldr	r3, [pc, #356]	@ (801887c <tcp_process+0x7dc>)
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	687a      	ldr	r2, [r7, #4]
 801871c:	429a      	cmp	r2, r3
 801871e:	d105      	bne.n	801872c <tcp_process+0x68c>
 8018720:	4b56      	ldr	r3, [pc, #344]	@ (801887c <tcp_process+0x7dc>)
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	68db      	ldr	r3, [r3, #12]
 8018726:	4a55      	ldr	r2, [pc, #340]	@ (801887c <tcp_process+0x7dc>)
 8018728:	6013      	str	r3, [r2, #0]
 801872a:	e013      	b.n	8018754 <tcp_process+0x6b4>
 801872c:	4b53      	ldr	r3, [pc, #332]	@ (801887c <tcp_process+0x7dc>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	60fb      	str	r3, [r7, #12]
 8018732:	e00c      	b.n	801874e <tcp_process+0x6ae>
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	68db      	ldr	r3, [r3, #12]
 8018738:	687a      	ldr	r2, [r7, #4]
 801873a:	429a      	cmp	r2, r3
 801873c:	d104      	bne.n	8018748 <tcp_process+0x6a8>
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	68da      	ldr	r2, [r3, #12]
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	60da      	str	r2, [r3, #12]
 8018746:	e005      	b.n	8018754 <tcp_process+0x6b4>
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	68db      	ldr	r3, [r3, #12]
 801874c:	60fb      	str	r3, [r7, #12]
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d1ef      	bne.n	8018734 <tcp_process+0x694>
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	2200      	movs	r2, #0
 8018758:	60da      	str	r2, [r3, #12]
 801875a:	4b43      	ldr	r3, [pc, #268]	@ (8018868 <tcp_process+0x7c8>)
 801875c:	2201      	movs	r2, #1
 801875e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	220a      	movs	r2, #10
 8018764:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018766:	4b41      	ldr	r3, [pc, #260]	@ (801886c <tcp_process+0x7cc>)
 8018768:	681a      	ldr	r2, [r3, #0]
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	60da      	str	r2, [r3, #12]
 801876e:	4a3f      	ldr	r2, [pc, #252]	@ (801886c <tcp_process+0x7cc>)
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	6013      	str	r3, [r2, #0]
 8018774:	f003 f952 	bl	801ba1c <tcp_timer_needed>
      }
      break;
 8018778:	e06c      	b.n	8018854 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801877a:	6878      	ldr	r0, [r7, #4]
 801877c:	f000 f984 	bl	8018a88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018780:	4b3b      	ldr	r3, [pc, #236]	@ (8018870 <tcp_process+0x7d0>)
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	f003 0310 	and.w	r3, r3, #16
 8018788:	2b00      	cmp	r3, #0
 801878a:	d065      	beq.n	8018858 <tcp_process+0x7b8>
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018790:	4b38      	ldr	r3, [pc, #224]	@ (8018874 <tcp_process+0x7d4>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	429a      	cmp	r2, r3
 8018796:	d15f      	bne.n	8018858 <tcp_process+0x7b8>
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801879c:	2b00      	cmp	r3, #0
 801879e:	d15b      	bne.n	8018858 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80187a0:	6878      	ldr	r0, [r7, #4]
 80187a2:	f7fe fceb 	bl	801717c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80187a6:	4b35      	ldr	r3, [pc, #212]	@ (801887c <tcp_process+0x7dc>)
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	687a      	ldr	r2, [r7, #4]
 80187ac:	429a      	cmp	r2, r3
 80187ae:	d105      	bne.n	80187bc <tcp_process+0x71c>
 80187b0:	4b32      	ldr	r3, [pc, #200]	@ (801887c <tcp_process+0x7dc>)
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	68db      	ldr	r3, [r3, #12]
 80187b6:	4a31      	ldr	r2, [pc, #196]	@ (801887c <tcp_process+0x7dc>)
 80187b8:	6013      	str	r3, [r2, #0]
 80187ba:	e013      	b.n	80187e4 <tcp_process+0x744>
 80187bc:	4b2f      	ldr	r3, [pc, #188]	@ (801887c <tcp_process+0x7dc>)
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	61bb      	str	r3, [r7, #24]
 80187c2:	e00c      	b.n	80187de <tcp_process+0x73e>
 80187c4:	69bb      	ldr	r3, [r7, #24]
 80187c6:	68db      	ldr	r3, [r3, #12]
 80187c8:	687a      	ldr	r2, [r7, #4]
 80187ca:	429a      	cmp	r2, r3
 80187cc:	d104      	bne.n	80187d8 <tcp_process+0x738>
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	68da      	ldr	r2, [r3, #12]
 80187d2:	69bb      	ldr	r3, [r7, #24]
 80187d4:	60da      	str	r2, [r3, #12]
 80187d6:	e005      	b.n	80187e4 <tcp_process+0x744>
 80187d8:	69bb      	ldr	r3, [r7, #24]
 80187da:	68db      	ldr	r3, [r3, #12]
 80187dc:	61bb      	str	r3, [r7, #24]
 80187de:	69bb      	ldr	r3, [r7, #24]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d1ef      	bne.n	80187c4 <tcp_process+0x724>
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	2200      	movs	r2, #0
 80187e8:	60da      	str	r2, [r3, #12]
 80187ea:	4b1f      	ldr	r3, [pc, #124]	@ (8018868 <tcp_process+0x7c8>)
 80187ec:	2201      	movs	r2, #1
 80187ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	220a      	movs	r2, #10
 80187f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80187f6:	4b1d      	ldr	r3, [pc, #116]	@ (801886c <tcp_process+0x7cc>)
 80187f8:	681a      	ldr	r2, [r3, #0]
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	60da      	str	r2, [r3, #12]
 80187fe:	4a1b      	ldr	r2, [pc, #108]	@ (801886c <tcp_process+0x7cc>)
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	6013      	str	r3, [r2, #0]
 8018804:	f003 f90a 	bl	801ba1c <tcp_timer_needed>
      }
      break;
 8018808:	e026      	b.n	8018858 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801880a:	6878      	ldr	r0, [r7, #4]
 801880c:	f000 f93c 	bl	8018a88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018810:	4b17      	ldr	r3, [pc, #92]	@ (8018870 <tcp_process+0x7d0>)
 8018812:	781b      	ldrb	r3, [r3, #0]
 8018814:	f003 0310 	and.w	r3, r3, #16
 8018818:	2b00      	cmp	r3, #0
 801881a:	d01f      	beq.n	801885c <tcp_process+0x7bc>
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018820:	4b14      	ldr	r3, [pc, #80]	@ (8018874 <tcp_process+0x7d4>)
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	429a      	cmp	r2, r3
 8018826:	d119      	bne.n	801885c <tcp_process+0x7bc>
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801882c:	2b00      	cmp	r3, #0
 801882e:	d115      	bne.n	801885c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018830:	4b11      	ldr	r3, [pc, #68]	@ (8018878 <tcp_process+0x7d8>)
 8018832:	781b      	ldrb	r3, [r3, #0]
 8018834:	f043 0310 	orr.w	r3, r3, #16
 8018838:	b2da      	uxtb	r2, r3
 801883a:	4b0f      	ldr	r3, [pc, #60]	@ (8018878 <tcp_process+0x7d8>)
 801883c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801883e:	e00d      	b.n	801885c <tcp_process+0x7bc>
    default:
      break;
 8018840:	bf00      	nop
 8018842:	e00c      	b.n	801885e <tcp_process+0x7be>
      break;
 8018844:	bf00      	nop
 8018846:	e00a      	b.n	801885e <tcp_process+0x7be>
      break;
 8018848:	bf00      	nop
 801884a:	e008      	b.n	801885e <tcp_process+0x7be>
      break;
 801884c:	bf00      	nop
 801884e:	e006      	b.n	801885e <tcp_process+0x7be>
      break;
 8018850:	bf00      	nop
 8018852:	e004      	b.n	801885e <tcp_process+0x7be>
      break;
 8018854:	bf00      	nop
 8018856:	e002      	b.n	801885e <tcp_process+0x7be>
      break;
 8018858:	bf00      	nop
 801885a:	e000      	b.n	801885e <tcp_process+0x7be>
      break;
 801885c:	bf00      	nop
  }
  return ERR_OK;
 801885e:	2300      	movs	r3, #0
}
 8018860:	4618      	mov	r0, r3
 8018862:	3724      	adds	r7, #36	@ 0x24
 8018864:	46bd      	mov	sp, r7
 8018866:	bd90      	pop	{r4, r7, pc}
 8018868:	20022abc 	.word	0x20022abc
 801886c:	20022ab8 	.word	0x20022ab8
 8018870:	20022af0 	.word	0x20022af0
 8018874:	20022ae8 	.word	0x20022ae8
 8018878:	20022af1 	.word	0x20022af1
 801887c:	20022ab4 	.word	0x20022ab4

08018880 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018880:	b590      	push	{r4, r7, lr}
 8018882:	b085      	sub	sp, #20
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
 8018888:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d106      	bne.n	801889e <tcp_oos_insert_segment+0x1e>
 8018890:	4b3b      	ldr	r3, [pc, #236]	@ (8018980 <tcp_oos_insert_segment+0x100>)
 8018892:	f240 421f 	movw	r2, #1055	@ 0x41f
 8018896:	493b      	ldr	r1, [pc, #236]	@ (8018984 <tcp_oos_insert_segment+0x104>)
 8018898:	483b      	ldr	r0, [pc, #236]	@ (8018988 <tcp_oos_insert_segment+0x108>)
 801889a:	f008 f82f 	bl	80208fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	691b      	ldr	r3, [r3, #16]
 80188a2:	899b      	ldrh	r3, [r3, #12]
 80188a4:	b29b      	uxth	r3, r3
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7fa ff44 	bl	8013734 <lwip_htons>
 80188ac:	4603      	mov	r3, r0
 80188ae:	b2db      	uxtb	r3, r3
 80188b0:	f003 0301 	and.w	r3, r3, #1
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d028      	beq.n	801890a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80188b8:	6838      	ldr	r0, [r7, #0]
 80188ba:	f7fe f98f 	bl	8016bdc <tcp_segs_free>
    next = NULL;
 80188be:	2300      	movs	r3, #0
 80188c0:	603b      	str	r3, [r7, #0]
 80188c2:	e056      	b.n	8018972 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80188c4:	683b      	ldr	r3, [r7, #0]
 80188c6:	691b      	ldr	r3, [r3, #16]
 80188c8:	899b      	ldrh	r3, [r3, #12]
 80188ca:	b29b      	uxth	r3, r3
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7fa ff31 	bl	8013734 <lwip_htons>
 80188d2:	4603      	mov	r3, r0
 80188d4:	b2db      	uxtb	r3, r3
 80188d6:	f003 0301 	and.w	r3, r3, #1
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d00d      	beq.n	80188fa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	691b      	ldr	r3, [r3, #16]
 80188e2:	899b      	ldrh	r3, [r3, #12]
 80188e4:	b29c      	uxth	r4, r3
 80188e6:	2001      	movs	r0, #1
 80188e8:	f7fa ff24 	bl	8013734 <lwip_htons>
 80188ec:	4603      	mov	r3, r0
 80188ee:	461a      	mov	r2, r3
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	691b      	ldr	r3, [r3, #16]
 80188f4:	4322      	orrs	r2, r4
 80188f6:	b292      	uxth	r2, r2
 80188f8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018904:	68f8      	ldr	r0, [r7, #12]
 8018906:	f7fe f97e 	bl	8016c06 <tcp_seg_free>
    while (next &&
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d00e      	beq.n	801892e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	891b      	ldrh	r3, [r3, #8]
 8018914:	461a      	mov	r2, r3
 8018916:	4b1d      	ldr	r3, [pc, #116]	@ (801898c <tcp_oos_insert_segment+0x10c>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	441a      	add	r2, r3
 801891c:	683b      	ldr	r3, [r7, #0]
 801891e:	691b      	ldr	r3, [r3, #16]
 8018920:	685b      	ldr	r3, [r3, #4]
 8018922:	6839      	ldr	r1, [r7, #0]
 8018924:	8909      	ldrh	r1, [r1, #8]
 8018926:	440b      	add	r3, r1
 8018928:	1ad3      	subs	r3, r2, r3
    while (next &&
 801892a:	2b00      	cmp	r3, #0
 801892c:	daca      	bge.n	80188c4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801892e:	683b      	ldr	r3, [r7, #0]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d01e      	beq.n	8018972 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	891b      	ldrh	r3, [r3, #8]
 8018938:	461a      	mov	r2, r3
 801893a:	4b14      	ldr	r3, [pc, #80]	@ (801898c <tcp_oos_insert_segment+0x10c>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	441a      	add	r2, r3
 8018940:	683b      	ldr	r3, [r7, #0]
 8018942:	691b      	ldr	r3, [r3, #16]
 8018944:	685b      	ldr	r3, [r3, #4]
 8018946:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018948:	2b00      	cmp	r3, #0
 801894a:	dd12      	ble.n	8018972 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	691b      	ldr	r3, [r3, #16]
 8018950:	685b      	ldr	r3, [r3, #4]
 8018952:	b29a      	uxth	r2, r3
 8018954:	4b0d      	ldr	r3, [pc, #52]	@ (801898c <tcp_oos_insert_segment+0x10c>)
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	b29b      	uxth	r3, r3
 801895a:	1ad3      	subs	r3, r2, r3
 801895c:	b29a      	uxth	r2, r3
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	685a      	ldr	r2, [r3, #4]
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	891b      	ldrh	r3, [r3, #8]
 801896a:	4619      	mov	r1, r3
 801896c:	4610      	mov	r0, r2
 801896e:	f7fc fa9b 	bl	8014ea8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	683a      	ldr	r2, [r7, #0]
 8018976:	601a      	str	r2, [r3, #0]
}
 8018978:	bf00      	nop
 801897a:	3714      	adds	r7, #20
 801897c:	46bd      	mov	sp, r7
 801897e:	bd90      	pop	{r4, r7, pc}
 8018980:	08023ef8 	.word	0x08023ef8
 8018984:	080241b8 	.word	0x080241b8
 8018988:	08023f44 	.word	0x08023f44
 801898c:	20022ae4 	.word	0x20022ae4

08018990 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018990:	b5b0      	push	{r4, r5, r7, lr}
 8018992:	b086      	sub	sp, #24
 8018994:	af00      	add	r7, sp, #0
 8018996:	60f8      	str	r0, [r7, #12]
 8018998:	60b9      	str	r1, [r7, #8]
 801899a:	607a      	str	r2, [r7, #4]
 801899c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801899e:	e03e      	b.n	8018a1e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80189aa:	697b      	ldr	r3, [r7, #20]
 80189ac:	685b      	ldr	r3, [r3, #4]
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7fc fcc0 	bl	8015334 <pbuf_clen>
 80189b4:	4603      	mov	r3, r0
 80189b6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80189be:	8a7a      	ldrh	r2, [r7, #18]
 80189c0:	429a      	cmp	r2, r3
 80189c2:	d906      	bls.n	80189d2 <tcp_free_acked_segments+0x42>
 80189c4:	4b2a      	ldr	r3, [pc, #168]	@ (8018a70 <tcp_free_acked_segments+0xe0>)
 80189c6:	f240 4257 	movw	r2, #1111	@ 0x457
 80189ca:	492a      	ldr	r1, [pc, #168]	@ (8018a74 <tcp_free_acked_segments+0xe4>)
 80189cc:	482a      	ldr	r0, [pc, #168]	@ (8018a78 <tcp_free_acked_segments+0xe8>)
 80189ce:	f007 ff95 	bl	80208fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80189d8:	8a7b      	ldrh	r3, [r7, #18]
 80189da:	1ad3      	subs	r3, r2, r3
 80189dc:	b29a      	uxth	r2, r3
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80189e4:	697b      	ldr	r3, [r7, #20]
 80189e6:	891a      	ldrh	r2, [r3, #8]
 80189e8:	4b24      	ldr	r3, [pc, #144]	@ (8018a7c <tcp_free_acked_segments+0xec>)
 80189ea:	881b      	ldrh	r3, [r3, #0]
 80189ec:	4413      	add	r3, r2
 80189ee:	b29a      	uxth	r2, r3
 80189f0:	4b22      	ldr	r3, [pc, #136]	@ (8018a7c <tcp_free_acked_segments+0xec>)
 80189f2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80189f4:	6978      	ldr	r0, [r7, #20]
 80189f6:	f7fe f906 	bl	8016c06 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d00c      	beq.n	8018a1e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018a04:	68bb      	ldr	r3, [r7, #8]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d109      	bne.n	8018a1e <tcp_free_acked_segments+0x8e>
 8018a0a:	683b      	ldr	r3, [r7, #0]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d106      	bne.n	8018a1e <tcp_free_acked_segments+0x8e>
 8018a10:	4b17      	ldr	r3, [pc, #92]	@ (8018a70 <tcp_free_acked_segments+0xe0>)
 8018a12:	f240 4261 	movw	r2, #1121	@ 0x461
 8018a16:	491a      	ldr	r1, [pc, #104]	@ (8018a80 <tcp_free_acked_segments+0xf0>)
 8018a18:	4817      	ldr	r0, [pc, #92]	@ (8018a78 <tcp_free_acked_segments+0xe8>)
 8018a1a:	f007 ff6f 	bl	80208fc <iprintf>
  while (seg_list != NULL &&
 8018a1e:	68bb      	ldr	r3, [r7, #8]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d020      	beq.n	8018a66 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018a24:	68bb      	ldr	r3, [r7, #8]
 8018a26:	691b      	ldr	r3, [r3, #16]
 8018a28:	685b      	ldr	r3, [r3, #4]
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	f7fa fe98 	bl	8013760 <lwip_htonl>
 8018a30:	4604      	mov	r4, r0
 8018a32:	68bb      	ldr	r3, [r7, #8]
 8018a34:	891b      	ldrh	r3, [r3, #8]
 8018a36:	461d      	mov	r5, r3
 8018a38:	68bb      	ldr	r3, [r7, #8]
 8018a3a:	691b      	ldr	r3, [r3, #16]
 8018a3c:	899b      	ldrh	r3, [r3, #12]
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	4618      	mov	r0, r3
 8018a42:	f7fa fe77 	bl	8013734 <lwip_htons>
 8018a46:	4603      	mov	r3, r0
 8018a48:	b2db      	uxtb	r3, r3
 8018a4a:	f003 0303 	and.w	r3, r3, #3
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d001      	beq.n	8018a56 <tcp_free_acked_segments+0xc6>
 8018a52:	2301      	movs	r3, #1
 8018a54:	e000      	b.n	8018a58 <tcp_free_acked_segments+0xc8>
 8018a56:	2300      	movs	r3, #0
 8018a58:	442b      	add	r3, r5
 8018a5a:	18e2      	adds	r2, r4, r3
 8018a5c:	4b09      	ldr	r3, [pc, #36]	@ (8018a84 <tcp_free_acked_segments+0xf4>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	dd9c      	ble.n	80189a0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018a66:	68bb      	ldr	r3, [r7, #8]
}
 8018a68:	4618      	mov	r0, r3
 8018a6a:	3718      	adds	r7, #24
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8018a70:	08023ef8 	.word	0x08023ef8
 8018a74:	080241e0 	.word	0x080241e0
 8018a78:	08023f44 	.word	0x08023f44
 8018a7c:	20022aec 	.word	0x20022aec
 8018a80:	08024208 	.word	0x08024208
 8018a84:	20022ae8 	.word	0x20022ae8

08018a88 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018a88:	b5b0      	push	{r4, r5, r7, lr}
 8018a8a:	b094      	sub	sp, #80	@ 0x50
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018a90:	2300      	movs	r3, #0
 8018a92:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d106      	bne.n	8018aa8 <tcp_receive+0x20>
 8018a9a:	4b91      	ldr	r3, [pc, #580]	@ (8018ce0 <tcp_receive+0x258>)
 8018a9c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8018aa0:	4990      	ldr	r1, [pc, #576]	@ (8018ce4 <tcp_receive+0x25c>)
 8018aa2:	4891      	ldr	r0, [pc, #580]	@ (8018ce8 <tcp_receive+0x260>)
 8018aa4:	f007 ff2a 	bl	80208fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	7d1b      	ldrb	r3, [r3, #20]
 8018aac:	2b03      	cmp	r3, #3
 8018aae:	d806      	bhi.n	8018abe <tcp_receive+0x36>
 8018ab0:	4b8b      	ldr	r3, [pc, #556]	@ (8018ce0 <tcp_receive+0x258>)
 8018ab2:	f240 427c 	movw	r2, #1148	@ 0x47c
 8018ab6:	498d      	ldr	r1, [pc, #564]	@ (8018cec <tcp_receive+0x264>)
 8018ab8:	488b      	ldr	r0, [pc, #556]	@ (8018ce8 <tcp_receive+0x260>)
 8018aba:	f007 ff1f 	bl	80208fc <iprintf>

  if (flags & TCP_ACK) {
 8018abe:	4b8c      	ldr	r3, [pc, #560]	@ (8018cf0 <tcp_receive+0x268>)
 8018ac0:	781b      	ldrb	r3, [r3, #0]
 8018ac2:	f003 0310 	and.w	r3, r3, #16
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	f000 8264 	beq.w	8018f94 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018ad2:	461a      	mov	r2, r3
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018ad8:	4413      	add	r3, r2
 8018ada:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018ae0:	4b84      	ldr	r3, [pc, #528]	@ (8018cf4 <tcp_receive+0x26c>)
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	1ad3      	subs	r3, r2, r3
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	db1b      	blt.n	8018b22 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018aee:	4b81      	ldr	r3, [pc, #516]	@ (8018cf4 <tcp_receive+0x26c>)
 8018af0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018af2:	429a      	cmp	r2, r3
 8018af4:	d106      	bne.n	8018b04 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018afa:	4b7f      	ldr	r3, [pc, #508]	@ (8018cf8 <tcp_receive+0x270>)
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	1ad3      	subs	r3, r2, r3
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	db0e      	blt.n	8018b22 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018b08:	4b7b      	ldr	r3, [pc, #492]	@ (8018cf8 <tcp_receive+0x270>)
 8018b0a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018b0c:	429a      	cmp	r2, r3
 8018b0e:	d125      	bne.n	8018b5c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018b10:	4b7a      	ldr	r3, [pc, #488]	@ (8018cfc <tcp_receive+0x274>)
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	89db      	ldrh	r3, [r3, #14]
 8018b16:	b29a      	uxth	r2, r3
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018b1e:	429a      	cmp	r2, r3
 8018b20:	d91c      	bls.n	8018b5c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018b22:	4b76      	ldr	r3, [pc, #472]	@ (8018cfc <tcp_receive+0x274>)
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	89db      	ldrh	r3, [r3, #14]
 8018b28:	b29a      	uxth	r2, r3
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018b3c:	429a      	cmp	r2, r3
 8018b3e:	d205      	bcs.n	8018b4c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8018b4c:	4b69      	ldr	r3, [pc, #420]	@ (8018cf4 <tcp_receive+0x26c>)
 8018b4e:	681a      	ldr	r2, [r3, #0]
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8018b54:	4b68      	ldr	r3, [pc, #416]	@ (8018cf8 <tcp_receive+0x270>)
 8018b56:	681a      	ldr	r2, [r3, #0]
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018b5c:	4b66      	ldr	r3, [pc, #408]	@ (8018cf8 <tcp_receive+0x270>)
 8018b5e:	681a      	ldr	r2, [r3, #0]
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b64:	1ad3      	subs	r3, r2, r3
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	dc58      	bgt.n	8018c1c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018b6a:	4b65      	ldr	r3, [pc, #404]	@ (8018d00 <tcp_receive+0x278>)
 8018b6c:	881b      	ldrh	r3, [r3, #0]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d14b      	bne.n	8018c0a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018b76:	687a      	ldr	r2, [r7, #4]
 8018b78:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8018b7c:	4413      	add	r3, r2
 8018b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018b80:	429a      	cmp	r2, r3
 8018b82:	d142      	bne.n	8018c0a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	db3d      	blt.n	8018c0a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018b92:	4b59      	ldr	r3, [pc, #356]	@ (8018cf8 <tcp_receive+0x270>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	429a      	cmp	r2, r3
 8018b98:	d137      	bne.n	8018c0a <tcp_receive+0x182>
              found_dupack = 1;
 8018b9a:	2301      	movs	r3, #1
 8018b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018ba4:	2bff      	cmp	r3, #255	@ 0xff
 8018ba6:	d007      	beq.n	8018bb8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018bae:	3301      	adds	r3, #1
 8018bb0:	b2da      	uxtb	r2, r3
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018bbe:	2b03      	cmp	r3, #3
 8018bc0:	d91b      	bls.n	8018bfa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018bcc:	4413      	add	r3, r2
 8018bce:	b29a      	uxth	r2, r3
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018bd6:	429a      	cmp	r2, r3
 8018bd8:	d30a      	bcc.n	8018bf0 <tcp_receive+0x168>
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018be4:	4413      	add	r3, r2
 8018be6:	b29a      	uxth	r2, r3
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018bee:	e004      	b.n	8018bfa <tcp_receive+0x172>
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018bf6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018c00:	2b02      	cmp	r3, #2
 8018c02:	d902      	bls.n	8018c0a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018c04:	6878      	ldr	r0, [r7, #4]
 8018c06:	f002 fbad 	bl	801b364 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	f040 8161 	bne.w	8018ed4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	2200      	movs	r2, #0
 8018c16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8018c1a:	e15b      	b.n	8018ed4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018c1c:	4b36      	ldr	r3, [pc, #216]	@ (8018cf8 <tcp_receive+0x270>)
 8018c1e:	681a      	ldr	r2, [r3, #0]
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c24:	1ad3      	subs	r3, r2, r3
 8018c26:	3b01      	subs	r3, #1
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	f2c0 814e 	blt.w	8018eca <tcp_receive+0x442>
 8018c2e:	4b32      	ldr	r3, [pc, #200]	@ (8018cf8 <tcp_receive+0x270>)
 8018c30:	681a      	ldr	r2, [r3, #0]
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018c36:	1ad3      	subs	r3, r2, r3
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	f300 8146 	bgt.w	8018eca <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	8b5b      	ldrh	r3, [r3, #26]
 8018c42:	f003 0304 	and.w	r3, r3, #4
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d010      	beq.n	8018c6c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	8b5b      	ldrh	r3, [r3, #26]
 8018c4e:	f023 0304 	bic.w	r3, r3, #4
 8018c52:	b29a      	uxth	r2, r3
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	2200      	movs	r2, #0
 8018c68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	2200      	movs	r2, #0
 8018c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018c7a:	10db      	asrs	r3, r3, #3
 8018c7c:	b21b      	sxth	r3, r3
 8018c7e:	b29a      	uxth	r2, r3
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018c86:	b29b      	uxth	r3, r3
 8018c88:	4413      	add	r3, r2
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	b21a      	sxth	r2, r3
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018c94:	4b18      	ldr	r3, [pc, #96]	@ (8018cf8 <tcp_receive+0x270>)
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	b29a      	uxth	r2, r3
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c9e:	b29b      	uxth	r3, r3
 8018ca0:	1ad3      	subs	r3, r2, r3
 8018ca2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8018cac:	4b12      	ldr	r3, [pc, #72]	@ (8018cf8 <tcp_receive+0x270>)
 8018cae:	681a      	ldr	r2, [r3, #0]
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	7d1b      	ldrb	r3, [r3, #20]
 8018cb8:	2b03      	cmp	r3, #3
 8018cba:	f240 8097 	bls.w	8018dec <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018cca:	429a      	cmp	r2, r3
 8018ccc:	d245      	bcs.n	8018d5a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	8b5b      	ldrh	r3, [r3, #26]
 8018cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d014      	beq.n	8018d04 <tcp_receive+0x27c>
 8018cda:	2301      	movs	r3, #1
 8018cdc:	e013      	b.n	8018d06 <tcp_receive+0x27e>
 8018cde:	bf00      	nop
 8018ce0:	08023ef8 	.word	0x08023ef8
 8018ce4:	08024228 	.word	0x08024228
 8018ce8:	08023f44 	.word	0x08023f44
 8018cec:	08024244 	.word	0x08024244
 8018cf0:	20022af0 	.word	0x20022af0
 8018cf4:	20022ae4 	.word	0x20022ae4
 8018cf8:	20022ae8 	.word	0x20022ae8
 8018cfc:	20022ad4 	.word	0x20022ad4
 8018d00:	20022aee 	.word	0x20022aee
 8018d04:	2302      	movs	r3, #2
 8018d06:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018d0a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018d0e:	b29a      	uxth	r2, r3
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018d14:	fb12 f303 	smulbb	r3, r2, r3
 8018d18:	b29b      	uxth	r3, r3
 8018d1a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018d1c:	4293      	cmp	r3, r2
 8018d1e:	bf28      	it	cs
 8018d20:	4613      	movcs	r3, r2
 8018d22:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018d2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018d2c:	4413      	add	r3, r2
 8018d2e:	b29a      	uxth	r2, r3
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018d36:	429a      	cmp	r2, r3
 8018d38:	d309      	bcc.n	8018d4e <tcp_receive+0x2c6>
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018d40:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018d42:	4413      	add	r3, r2
 8018d44:	b29a      	uxth	r2, r3
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018d4c:	e04e      	b.n	8018dec <tcp_receive+0x364>
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018d54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018d58:	e048      	b.n	8018dec <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018d60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018d62:	4413      	add	r3, r2
 8018d64:	b29a      	uxth	r2, r3
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018d6c:	429a      	cmp	r2, r3
 8018d6e:	d309      	bcc.n	8018d84 <tcp_receive+0x2fc>
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018d76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018d78:	4413      	add	r3, r2
 8018d7a:	b29a      	uxth	r2, r3
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8018d82:	e004      	b.n	8018d8e <tcp_receive+0x306>
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018d8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018d9a:	429a      	cmp	r2, r3
 8018d9c:	d326      	bcc.n	8018dec <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018daa:	1ad3      	subs	r3, r2, r3
 8018dac:	b29a      	uxth	r2, r3
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018dbe:	4413      	add	r3, r2
 8018dc0:	b29a      	uxth	r2, r3
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018dc8:	429a      	cmp	r2, r3
 8018dca:	d30a      	bcc.n	8018de2 <tcp_receive+0x35a>
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018dd6:	4413      	add	r3, r2
 8018dd8:	b29a      	uxth	r2, r3
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018de0:	e004      	b.n	8018dec <tcp_receive+0x364>
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018de8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018df4:	4a98      	ldr	r2, [pc, #608]	@ (8019058 <tcp_receive+0x5d0>)
 8018df6:	6878      	ldr	r0, [r7, #4]
 8018df8:	f7ff fdca 	bl	8018990 <tcp_free_acked_segments>
 8018dfc:	4602      	mov	r2, r0
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e0a:	4a94      	ldr	r2, [pc, #592]	@ (801905c <tcp_receive+0x5d4>)
 8018e0c:	6878      	ldr	r0, [r7, #4]
 8018e0e:	f7ff fdbf 	bl	8018990 <tcp_free_acked_segments>
 8018e12:	4602      	mov	r2, r0
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d104      	bne.n	8018e2a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018e26:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018e28:	e002      	b.n	8018e30 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	2200      	movs	r2, #0
 8018e2e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	2200      	movs	r2, #0
 8018e34:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d103      	bne.n	8018e46 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	2200      	movs	r2, #0
 8018e42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018e4c:	4b84      	ldr	r3, [pc, #528]	@ (8019060 <tcp_receive+0x5d8>)
 8018e4e:	881b      	ldrh	r3, [r3, #0]
 8018e50:	4413      	add	r3, r2
 8018e52:	b29a      	uxth	r2, r3
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	8b5b      	ldrh	r3, [r3, #26]
 8018e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d035      	beq.n	8018ed2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d118      	bne.n	8018ea0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d00c      	beq.n	8018e90 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e7e:	691b      	ldr	r3, [r3, #16]
 8018e80:	685b      	ldr	r3, [r3, #4]
 8018e82:	4618      	mov	r0, r3
 8018e84:	f7fa fc6c 	bl	8013760 <lwip_htonl>
 8018e88:	4603      	mov	r3, r0
 8018e8a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	dc20      	bgt.n	8018ed2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	8b5b      	ldrh	r3, [r3, #26]
 8018e94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018e98:	b29a      	uxth	r2, r3
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018e9e:	e018      	b.n	8018ed2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ea8:	691b      	ldr	r3, [r3, #16]
 8018eaa:	685b      	ldr	r3, [r3, #4]
 8018eac:	4618      	mov	r0, r3
 8018eae:	f7fa fc57 	bl	8013760 <lwip_htonl>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	1ae3      	subs	r3, r4, r3
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	dc0b      	bgt.n	8018ed2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	8b5b      	ldrh	r3, [r3, #26]
 8018ebe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018ec2:	b29a      	uxth	r2, r3
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018ec8:	e003      	b.n	8018ed2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018eca:	6878      	ldr	r0, [r7, #4]
 8018ecc:	f002 fc36 	bl	801b73c <tcp_send_empty_ack>
 8018ed0:	e000      	b.n	8018ed4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018ed2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d05b      	beq.n	8018f94 <tcp_receive+0x50c>
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018ee0:	4b60      	ldr	r3, [pc, #384]	@ (8019064 <tcp_receive+0x5dc>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	1ad3      	subs	r3, r2, r3
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	da54      	bge.n	8018f94 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018eea:	4b5f      	ldr	r3, [pc, #380]	@ (8019068 <tcp_receive+0x5e0>)
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	b29a      	uxth	r2, r3
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018ef4:	b29b      	uxth	r3, r3
 8018ef6:	1ad3      	subs	r3, r2, r3
 8018ef8:	b29b      	uxth	r3, r3
 8018efa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018efe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018f08:	10db      	asrs	r3, r3, #3
 8018f0a:	b21b      	sxth	r3, r3
 8018f0c:	b29b      	uxth	r3, r3
 8018f0e:	1ad3      	subs	r3, r2, r3
 8018f10:	b29b      	uxth	r3, r3
 8018f12:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018f1c:	b29a      	uxth	r2, r3
 8018f1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018f22:	4413      	add	r3, r2
 8018f24:	b29b      	uxth	r3, r3
 8018f26:	b21a      	sxth	r2, r3
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8018f2c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	da05      	bge.n	8018f40 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018f34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018f38:	425b      	negs	r3, r3
 8018f3a:	b29b      	uxth	r3, r3
 8018f3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018f40:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018f4a:	109b      	asrs	r3, r3, #2
 8018f4c:	b21b      	sxth	r3, r3
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	1ad3      	subs	r3, r2, r3
 8018f52:	b29b      	uxth	r3, r3
 8018f54:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018f5e:	b29a      	uxth	r2, r3
 8018f60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018f64:	4413      	add	r3, r2
 8018f66:	b29b      	uxth	r3, r3
 8018f68:	b21a      	sxth	r2, r3
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018f74:	10db      	asrs	r3, r3, #3
 8018f76:	b21b      	sxth	r3, r3
 8018f78:	b29a      	uxth	r2, r3
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018f80:	b29b      	uxth	r3, r3
 8018f82:	4413      	add	r3, r2
 8018f84:	b29b      	uxth	r3, r3
 8018f86:	b21a      	sxth	r2, r3
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	2200      	movs	r2, #0
 8018f92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018f94:	4b35      	ldr	r3, [pc, #212]	@ (801906c <tcp_receive+0x5e4>)
 8018f96:	881b      	ldrh	r3, [r3, #0]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f000 84df 	beq.w	801995c <tcp_receive+0xed4>
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	7d1b      	ldrb	r3, [r3, #20]
 8018fa2:	2b06      	cmp	r3, #6
 8018fa4:	f200 84da 	bhi.w	801995c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018fac:	4b30      	ldr	r3, [pc, #192]	@ (8019070 <tcp_receive+0x5e8>)
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	1ad3      	subs	r3, r2, r3
 8018fb2:	3b01      	subs	r3, #1
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	f2c0 808f 	blt.w	80190d8 <tcp_receive+0x650>
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018fbe:	4b2b      	ldr	r3, [pc, #172]	@ (801906c <tcp_receive+0x5e4>)
 8018fc0:	881b      	ldrh	r3, [r3, #0]
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8019070 <tcp_receive+0x5e8>)
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	440b      	add	r3, r1
 8018fca:	1ad3      	subs	r3, r2, r3
 8018fcc:	3301      	adds	r3, #1
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	f300 8082 	bgt.w	80190d8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018fd4:	4b27      	ldr	r3, [pc, #156]	@ (8019074 <tcp_receive+0x5ec>)
 8018fd6:	685b      	ldr	r3, [r3, #4]
 8018fd8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018fde:	4b24      	ldr	r3, [pc, #144]	@ (8019070 <tcp_receive+0x5e8>)
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	1ad3      	subs	r3, r2, r3
 8018fe4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018fe6:	4b23      	ldr	r3, [pc, #140]	@ (8019074 <tcp_receive+0x5ec>)
 8018fe8:	685b      	ldr	r3, [r3, #4]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d106      	bne.n	8018ffc <tcp_receive+0x574>
 8018fee:	4b22      	ldr	r3, [pc, #136]	@ (8019078 <tcp_receive+0x5f0>)
 8018ff0:	f240 5294 	movw	r2, #1428	@ 0x594
 8018ff4:	4921      	ldr	r1, [pc, #132]	@ (801907c <tcp_receive+0x5f4>)
 8018ff6:	4822      	ldr	r0, [pc, #136]	@ (8019080 <tcp_receive+0x5f8>)
 8018ff8:	f007 fc80 	bl	80208fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ffe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019002:	4293      	cmp	r3, r2
 8019004:	d906      	bls.n	8019014 <tcp_receive+0x58c>
 8019006:	4b1c      	ldr	r3, [pc, #112]	@ (8019078 <tcp_receive+0x5f0>)
 8019008:	f240 5295 	movw	r2, #1429	@ 0x595
 801900c:	491d      	ldr	r1, [pc, #116]	@ (8019084 <tcp_receive+0x5fc>)
 801900e:	481c      	ldr	r0, [pc, #112]	@ (8019080 <tcp_receive+0x5f8>)
 8019010:	f007 fc74 	bl	80208fc <iprintf>
      off = (u16_t)off32;
 8019014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019016:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801901a:	4b16      	ldr	r3, [pc, #88]	@ (8019074 <tcp_receive+0x5ec>)
 801901c:	685b      	ldr	r3, [r3, #4]
 801901e:	891b      	ldrh	r3, [r3, #8]
 8019020:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019024:	429a      	cmp	r2, r3
 8019026:	d906      	bls.n	8019036 <tcp_receive+0x5ae>
 8019028:	4b13      	ldr	r3, [pc, #76]	@ (8019078 <tcp_receive+0x5f0>)
 801902a:	f240 5297 	movw	r2, #1431	@ 0x597
 801902e:	4916      	ldr	r1, [pc, #88]	@ (8019088 <tcp_receive+0x600>)
 8019030:	4813      	ldr	r0, [pc, #76]	@ (8019080 <tcp_receive+0x5f8>)
 8019032:	f007 fc63 	bl	80208fc <iprintf>
      inseg.len -= off;
 8019036:	4b0f      	ldr	r3, [pc, #60]	@ (8019074 <tcp_receive+0x5ec>)
 8019038:	891a      	ldrh	r2, [r3, #8]
 801903a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801903e:	1ad3      	subs	r3, r2, r3
 8019040:	b29a      	uxth	r2, r3
 8019042:	4b0c      	ldr	r3, [pc, #48]	@ (8019074 <tcp_receive+0x5ec>)
 8019044:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019046:	4b0b      	ldr	r3, [pc, #44]	@ (8019074 <tcp_receive+0x5ec>)
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	891a      	ldrh	r2, [r3, #8]
 801904c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019050:	1ad3      	subs	r3, r2, r3
 8019052:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8019054:	e02a      	b.n	80190ac <tcp_receive+0x624>
 8019056:	bf00      	nop
 8019058:	08024260 	.word	0x08024260
 801905c:	08024268 	.word	0x08024268
 8019060:	20022aec 	.word	0x20022aec
 8019064:	20022ae8 	.word	0x20022ae8
 8019068:	20022aa8 	.word	0x20022aa8
 801906c:	20022aee 	.word	0x20022aee
 8019070:	20022ae4 	.word	0x20022ae4
 8019074:	20022ac0 	.word	0x20022ac0
 8019078:	08023ef8 	.word	0x08023ef8
 801907c:	08024270 	.word	0x08024270
 8019080:	08023f44 	.word	0x08023f44
 8019084:	08024280 	.word	0x08024280
 8019088:	08024290 	.word	0x08024290
        off -= p->len;
 801908c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801908e:	895b      	ldrh	r3, [r3, #10]
 8019090:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019094:	1ad3      	subs	r3, r2, r3
 8019096:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801909a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801909c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801909e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80190a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80190a2:	2200      	movs	r2, #0
 80190a4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80190a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80190ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80190ae:	895b      	ldrh	r3, [r3, #10]
 80190b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80190b4:	429a      	cmp	r2, r3
 80190b6:	d8e9      	bhi.n	801908c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80190b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80190bc:	4619      	mov	r1, r3
 80190be:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80190c0:	f7fc f804 	bl	80150cc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190c8:	4a90      	ldr	r2, [pc, #576]	@ (801930c <tcp_receive+0x884>)
 80190ca:	6013      	str	r3, [r2, #0]
 80190cc:	4b90      	ldr	r3, [pc, #576]	@ (8019310 <tcp_receive+0x888>)
 80190ce:	691b      	ldr	r3, [r3, #16]
 80190d0:	4a8e      	ldr	r2, [pc, #568]	@ (801930c <tcp_receive+0x884>)
 80190d2:	6812      	ldr	r2, [r2, #0]
 80190d4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80190d6:	e00d      	b.n	80190f4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80190d8:	4b8c      	ldr	r3, [pc, #560]	@ (801930c <tcp_receive+0x884>)
 80190da:	681a      	ldr	r2, [r3, #0]
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190e0:	1ad3      	subs	r3, r2, r3
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	da06      	bge.n	80190f4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	8b5b      	ldrh	r3, [r3, #26]
 80190ea:	f043 0302 	orr.w	r3, r3, #2
 80190ee:	b29a      	uxth	r2, r3
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80190f4:	4b85      	ldr	r3, [pc, #532]	@ (801930c <tcp_receive+0x884>)
 80190f6:	681a      	ldr	r2, [r3, #0]
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190fc:	1ad3      	subs	r3, r2, r3
 80190fe:	2b00      	cmp	r3, #0
 8019100:	f2c0 8427 	blt.w	8019952 <tcp_receive+0xeca>
 8019104:	4b81      	ldr	r3, [pc, #516]	@ (801930c <tcp_receive+0x884>)
 8019106:	681a      	ldr	r2, [r3, #0]
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801910c:	6879      	ldr	r1, [r7, #4]
 801910e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019110:	440b      	add	r3, r1
 8019112:	1ad3      	subs	r3, r2, r3
 8019114:	3301      	adds	r3, #1
 8019116:	2b00      	cmp	r3, #0
 8019118:	f300 841b 	bgt.w	8019952 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019120:	4b7a      	ldr	r3, [pc, #488]	@ (801930c <tcp_receive+0x884>)
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	429a      	cmp	r2, r3
 8019126:	f040 8298 	bne.w	801965a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801912a:	4b79      	ldr	r3, [pc, #484]	@ (8019310 <tcp_receive+0x888>)
 801912c:	891c      	ldrh	r4, [r3, #8]
 801912e:	4b78      	ldr	r3, [pc, #480]	@ (8019310 <tcp_receive+0x888>)
 8019130:	691b      	ldr	r3, [r3, #16]
 8019132:	899b      	ldrh	r3, [r3, #12]
 8019134:	b29b      	uxth	r3, r3
 8019136:	4618      	mov	r0, r3
 8019138:	f7fa fafc 	bl	8013734 <lwip_htons>
 801913c:	4603      	mov	r3, r0
 801913e:	b2db      	uxtb	r3, r3
 8019140:	f003 0303 	and.w	r3, r3, #3
 8019144:	2b00      	cmp	r3, #0
 8019146:	d001      	beq.n	801914c <tcp_receive+0x6c4>
 8019148:	2301      	movs	r3, #1
 801914a:	e000      	b.n	801914e <tcp_receive+0x6c6>
 801914c:	2300      	movs	r3, #0
 801914e:	4423      	add	r3, r4
 8019150:	b29a      	uxth	r2, r3
 8019152:	4b70      	ldr	r3, [pc, #448]	@ (8019314 <tcp_receive+0x88c>)
 8019154:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801915a:	4b6e      	ldr	r3, [pc, #440]	@ (8019314 <tcp_receive+0x88c>)
 801915c:	881b      	ldrh	r3, [r3, #0]
 801915e:	429a      	cmp	r2, r3
 8019160:	d274      	bcs.n	801924c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019162:	4b6b      	ldr	r3, [pc, #428]	@ (8019310 <tcp_receive+0x888>)
 8019164:	691b      	ldr	r3, [r3, #16]
 8019166:	899b      	ldrh	r3, [r3, #12]
 8019168:	b29b      	uxth	r3, r3
 801916a:	4618      	mov	r0, r3
 801916c:	f7fa fae2 	bl	8013734 <lwip_htons>
 8019170:	4603      	mov	r3, r0
 8019172:	b2db      	uxtb	r3, r3
 8019174:	f003 0301 	and.w	r3, r3, #1
 8019178:	2b00      	cmp	r3, #0
 801917a:	d01e      	beq.n	80191ba <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801917c:	4b64      	ldr	r3, [pc, #400]	@ (8019310 <tcp_receive+0x888>)
 801917e:	691b      	ldr	r3, [r3, #16]
 8019180:	899b      	ldrh	r3, [r3, #12]
 8019182:	b29b      	uxth	r3, r3
 8019184:	b21b      	sxth	r3, r3
 8019186:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801918a:	b21c      	sxth	r4, r3
 801918c:	4b60      	ldr	r3, [pc, #384]	@ (8019310 <tcp_receive+0x888>)
 801918e:	691b      	ldr	r3, [r3, #16]
 8019190:	899b      	ldrh	r3, [r3, #12]
 8019192:	b29b      	uxth	r3, r3
 8019194:	4618      	mov	r0, r3
 8019196:	f7fa facd 	bl	8013734 <lwip_htons>
 801919a:	4603      	mov	r3, r0
 801919c:	b2db      	uxtb	r3, r3
 801919e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80191a2:	b29b      	uxth	r3, r3
 80191a4:	4618      	mov	r0, r3
 80191a6:	f7fa fac5 	bl	8013734 <lwip_htons>
 80191aa:	4603      	mov	r3, r0
 80191ac:	b21b      	sxth	r3, r3
 80191ae:	4323      	orrs	r3, r4
 80191b0:	b21a      	sxth	r2, r3
 80191b2:	4b57      	ldr	r3, [pc, #348]	@ (8019310 <tcp_receive+0x888>)
 80191b4:	691b      	ldr	r3, [r3, #16]
 80191b6:	b292      	uxth	r2, r2
 80191b8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80191be:	4b54      	ldr	r3, [pc, #336]	@ (8019310 <tcp_receive+0x888>)
 80191c0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80191c2:	4b53      	ldr	r3, [pc, #332]	@ (8019310 <tcp_receive+0x888>)
 80191c4:	691b      	ldr	r3, [r3, #16]
 80191c6:	899b      	ldrh	r3, [r3, #12]
 80191c8:	b29b      	uxth	r3, r3
 80191ca:	4618      	mov	r0, r3
 80191cc:	f7fa fab2 	bl	8013734 <lwip_htons>
 80191d0:	4603      	mov	r3, r0
 80191d2:	b2db      	uxtb	r3, r3
 80191d4:	f003 0302 	and.w	r3, r3, #2
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d005      	beq.n	80191e8 <tcp_receive+0x760>
            inseg.len -= 1;
 80191dc:	4b4c      	ldr	r3, [pc, #304]	@ (8019310 <tcp_receive+0x888>)
 80191de:	891b      	ldrh	r3, [r3, #8]
 80191e0:	3b01      	subs	r3, #1
 80191e2:	b29a      	uxth	r2, r3
 80191e4:	4b4a      	ldr	r3, [pc, #296]	@ (8019310 <tcp_receive+0x888>)
 80191e6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80191e8:	4b49      	ldr	r3, [pc, #292]	@ (8019310 <tcp_receive+0x888>)
 80191ea:	685b      	ldr	r3, [r3, #4]
 80191ec:	4a48      	ldr	r2, [pc, #288]	@ (8019310 <tcp_receive+0x888>)
 80191ee:	8912      	ldrh	r2, [r2, #8]
 80191f0:	4611      	mov	r1, r2
 80191f2:	4618      	mov	r0, r3
 80191f4:	f7fb fe58 	bl	8014ea8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80191f8:	4b45      	ldr	r3, [pc, #276]	@ (8019310 <tcp_receive+0x888>)
 80191fa:	891c      	ldrh	r4, [r3, #8]
 80191fc:	4b44      	ldr	r3, [pc, #272]	@ (8019310 <tcp_receive+0x888>)
 80191fe:	691b      	ldr	r3, [r3, #16]
 8019200:	899b      	ldrh	r3, [r3, #12]
 8019202:	b29b      	uxth	r3, r3
 8019204:	4618      	mov	r0, r3
 8019206:	f7fa fa95 	bl	8013734 <lwip_htons>
 801920a:	4603      	mov	r3, r0
 801920c:	b2db      	uxtb	r3, r3
 801920e:	f003 0303 	and.w	r3, r3, #3
 8019212:	2b00      	cmp	r3, #0
 8019214:	d001      	beq.n	801921a <tcp_receive+0x792>
 8019216:	2301      	movs	r3, #1
 8019218:	e000      	b.n	801921c <tcp_receive+0x794>
 801921a:	2300      	movs	r3, #0
 801921c:	4423      	add	r3, r4
 801921e:	b29a      	uxth	r2, r3
 8019220:	4b3c      	ldr	r3, [pc, #240]	@ (8019314 <tcp_receive+0x88c>)
 8019222:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019224:	4b3b      	ldr	r3, [pc, #236]	@ (8019314 <tcp_receive+0x88c>)
 8019226:	881b      	ldrh	r3, [r3, #0]
 8019228:	461a      	mov	r2, r3
 801922a:	4b38      	ldr	r3, [pc, #224]	@ (801930c <tcp_receive+0x884>)
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	441a      	add	r2, r3
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019234:	6879      	ldr	r1, [r7, #4]
 8019236:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019238:	440b      	add	r3, r1
 801923a:	429a      	cmp	r2, r3
 801923c:	d006      	beq.n	801924c <tcp_receive+0x7c4>
 801923e:	4b36      	ldr	r3, [pc, #216]	@ (8019318 <tcp_receive+0x890>)
 8019240:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8019244:	4935      	ldr	r1, [pc, #212]	@ (801931c <tcp_receive+0x894>)
 8019246:	4836      	ldr	r0, [pc, #216]	@ (8019320 <tcp_receive+0x898>)
 8019248:	f007 fb58 	bl	80208fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019250:	2b00      	cmp	r3, #0
 8019252:	f000 80e6 	beq.w	8019422 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019256:	4b2e      	ldr	r3, [pc, #184]	@ (8019310 <tcp_receive+0x888>)
 8019258:	691b      	ldr	r3, [r3, #16]
 801925a:	899b      	ldrh	r3, [r3, #12]
 801925c:	b29b      	uxth	r3, r3
 801925e:	4618      	mov	r0, r3
 8019260:	f7fa fa68 	bl	8013734 <lwip_htons>
 8019264:	4603      	mov	r3, r0
 8019266:	b2db      	uxtb	r3, r3
 8019268:	f003 0301 	and.w	r3, r3, #1
 801926c:	2b00      	cmp	r3, #0
 801926e:	d010      	beq.n	8019292 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019270:	e00a      	b.n	8019288 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019276:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801927c:	681a      	ldr	r2, [r3, #0]
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8019282:	68f8      	ldr	r0, [r7, #12]
 8019284:	f7fd fcbf 	bl	8016c06 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801928c:	2b00      	cmp	r3, #0
 801928e:	d1f0      	bne.n	8019272 <tcp_receive+0x7ea>
 8019290:	e0c7      	b.n	8019422 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019296:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019298:	e051      	b.n	801933e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801929a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801929c:	691b      	ldr	r3, [r3, #16]
 801929e:	899b      	ldrh	r3, [r3, #12]
 80192a0:	b29b      	uxth	r3, r3
 80192a2:	4618      	mov	r0, r3
 80192a4:	f7fa fa46 	bl	8013734 <lwip_htons>
 80192a8:	4603      	mov	r3, r0
 80192aa:	b2db      	uxtb	r3, r3
 80192ac:	f003 0301 	and.w	r3, r3, #1
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d03c      	beq.n	801932e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80192b4:	4b16      	ldr	r3, [pc, #88]	@ (8019310 <tcp_receive+0x888>)
 80192b6:	691b      	ldr	r3, [r3, #16]
 80192b8:	899b      	ldrh	r3, [r3, #12]
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	4618      	mov	r0, r3
 80192be:	f7fa fa39 	bl	8013734 <lwip_htons>
 80192c2:	4603      	mov	r3, r0
 80192c4:	b2db      	uxtb	r3, r3
 80192c6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d12f      	bne.n	801932e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80192ce:	4b10      	ldr	r3, [pc, #64]	@ (8019310 <tcp_receive+0x888>)
 80192d0:	691b      	ldr	r3, [r3, #16]
 80192d2:	899b      	ldrh	r3, [r3, #12]
 80192d4:	b29c      	uxth	r4, r3
 80192d6:	2001      	movs	r0, #1
 80192d8:	f7fa fa2c 	bl	8013734 <lwip_htons>
 80192dc:	4603      	mov	r3, r0
 80192de:	461a      	mov	r2, r3
 80192e0:	4b0b      	ldr	r3, [pc, #44]	@ (8019310 <tcp_receive+0x888>)
 80192e2:	691b      	ldr	r3, [r3, #16]
 80192e4:	4322      	orrs	r2, r4
 80192e6:	b292      	uxth	r2, r2
 80192e8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80192ea:	4b09      	ldr	r3, [pc, #36]	@ (8019310 <tcp_receive+0x888>)
 80192ec:	891c      	ldrh	r4, [r3, #8]
 80192ee:	4b08      	ldr	r3, [pc, #32]	@ (8019310 <tcp_receive+0x888>)
 80192f0:	691b      	ldr	r3, [r3, #16]
 80192f2:	899b      	ldrh	r3, [r3, #12]
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	4618      	mov	r0, r3
 80192f8:	f7fa fa1c 	bl	8013734 <lwip_htons>
 80192fc:	4603      	mov	r3, r0
 80192fe:	b2db      	uxtb	r3, r3
 8019300:	f003 0303 	and.w	r3, r3, #3
 8019304:	2b00      	cmp	r3, #0
 8019306:	d00d      	beq.n	8019324 <tcp_receive+0x89c>
 8019308:	2301      	movs	r3, #1
 801930a:	e00c      	b.n	8019326 <tcp_receive+0x89e>
 801930c:	20022ae4 	.word	0x20022ae4
 8019310:	20022ac0 	.word	0x20022ac0
 8019314:	20022aee 	.word	0x20022aee
 8019318:	08023ef8 	.word	0x08023ef8
 801931c:	080242a0 	.word	0x080242a0
 8019320:	08023f44 	.word	0x08023f44
 8019324:	2300      	movs	r3, #0
 8019326:	4423      	add	r3, r4
 8019328:	b29a      	uxth	r2, r3
 801932a:	4b98      	ldr	r3, [pc, #608]	@ (801958c <tcp_receive+0xb04>)
 801932c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801932e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019330:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8019338:	6938      	ldr	r0, [r7, #16]
 801933a:	f7fd fc64 	bl	8016c06 <tcp_seg_free>
            while (next &&
 801933e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019340:	2b00      	cmp	r3, #0
 8019342:	d00e      	beq.n	8019362 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019344:	4b91      	ldr	r3, [pc, #580]	@ (801958c <tcp_receive+0xb04>)
 8019346:	881b      	ldrh	r3, [r3, #0]
 8019348:	461a      	mov	r2, r3
 801934a:	4b91      	ldr	r3, [pc, #580]	@ (8019590 <tcp_receive+0xb08>)
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	441a      	add	r2, r3
 8019350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019352:	691b      	ldr	r3, [r3, #16]
 8019354:	685b      	ldr	r3, [r3, #4]
 8019356:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019358:	8909      	ldrh	r1, [r1, #8]
 801935a:	440b      	add	r3, r1
 801935c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801935e:	2b00      	cmp	r3, #0
 8019360:	da9b      	bge.n	801929a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019364:	2b00      	cmp	r3, #0
 8019366:	d059      	beq.n	801941c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019368:	4b88      	ldr	r3, [pc, #544]	@ (801958c <tcp_receive+0xb04>)
 801936a:	881b      	ldrh	r3, [r3, #0]
 801936c:	461a      	mov	r2, r3
 801936e:	4b88      	ldr	r3, [pc, #544]	@ (8019590 <tcp_receive+0xb08>)
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	441a      	add	r2, r3
 8019374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019376:	691b      	ldr	r3, [r3, #16]
 8019378:	685b      	ldr	r3, [r3, #4]
 801937a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801937c:	2b00      	cmp	r3, #0
 801937e:	dd4d      	ble.n	801941c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019382:	691b      	ldr	r3, [r3, #16]
 8019384:	685b      	ldr	r3, [r3, #4]
 8019386:	b29a      	uxth	r2, r3
 8019388:	4b81      	ldr	r3, [pc, #516]	@ (8019590 <tcp_receive+0xb08>)
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	b29b      	uxth	r3, r3
 801938e:	1ad3      	subs	r3, r2, r3
 8019390:	b29a      	uxth	r2, r3
 8019392:	4b80      	ldr	r3, [pc, #512]	@ (8019594 <tcp_receive+0xb0c>)
 8019394:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019396:	4b7f      	ldr	r3, [pc, #508]	@ (8019594 <tcp_receive+0xb0c>)
 8019398:	691b      	ldr	r3, [r3, #16]
 801939a:	899b      	ldrh	r3, [r3, #12]
 801939c:	b29b      	uxth	r3, r3
 801939e:	4618      	mov	r0, r3
 80193a0:	f7fa f9c8 	bl	8013734 <lwip_htons>
 80193a4:	4603      	mov	r3, r0
 80193a6:	b2db      	uxtb	r3, r3
 80193a8:	f003 0302 	and.w	r3, r3, #2
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d005      	beq.n	80193bc <tcp_receive+0x934>
                inseg.len -= 1;
 80193b0:	4b78      	ldr	r3, [pc, #480]	@ (8019594 <tcp_receive+0xb0c>)
 80193b2:	891b      	ldrh	r3, [r3, #8]
 80193b4:	3b01      	subs	r3, #1
 80193b6:	b29a      	uxth	r2, r3
 80193b8:	4b76      	ldr	r3, [pc, #472]	@ (8019594 <tcp_receive+0xb0c>)
 80193ba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80193bc:	4b75      	ldr	r3, [pc, #468]	@ (8019594 <tcp_receive+0xb0c>)
 80193be:	685b      	ldr	r3, [r3, #4]
 80193c0:	4a74      	ldr	r2, [pc, #464]	@ (8019594 <tcp_receive+0xb0c>)
 80193c2:	8912      	ldrh	r2, [r2, #8]
 80193c4:	4611      	mov	r1, r2
 80193c6:	4618      	mov	r0, r3
 80193c8:	f7fb fd6e 	bl	8014ea8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80193cc:	4b71      	ldr	r3, [pc, #452]	@ (8019594 <tcp_receive+0xb0c>)
 80193ce:	891c      	ldrh	r4, [r3, #8]
 80193d0:	4b70      	ldr	r3, [pc, #448]	@ (8019594 <tcp_receive+0xb0c>)
 80193d2:	691b      	ldr	r3, [r3, #16]
 80193d4:	899b      	ldrh	r3, [r3, #12]
 80193d6:	b29b      	uxth	r3, r3
 80193d8:	4618      	mov	r0, r3
 80193da:	f7fa f9ab 	bl	8013734 <lwip_htons>
 80193de:	4603      	mov	r3, r0
 80193e0:	b2db      	uxtb	r3, r3
 80193e2:	f003 0303 	and.w	r3, r3, #3
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d001      	beq.n	80193ee <tcp_receive+0x966>
 80193ea:	2301      	movs	r3, #1
 80193ec:	e000      	b.n	80193f0 <tcp_receive+0x968>
 80193ee:	2300      	movs	r3, #0
 80193f0:	4423      	add	r3, r4
 80193f2:	b29a      	uxth	r2, r3
 80193f4:	4b65      	ldr	r3, [pc, #404]	@ (801958c <tcp_receive+0xb04>)
 80193f6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80193f8:	4b64      	ldr	r3, [pc, #400]	@ (801958c <tcp_receive+0xb04>)
 80193fa:	881b      	ldrh	r3, [r3, #0]
 80193fc:	461a      	mov	r2, r3
 80193fe:	4b64      	ldr	r3, [pc, #400]	@ (8019590 <tcp_receive+0xb08>)
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	441a      	add	r2, r3
 8019404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019406:	691b      	ldr	r3, [r3, #16]
 8019408:	685b      	ldr	r3, [r3, #4]
 801940a:	429a      	cmp	r2, r3
 801940c:	d006      	beq.n	801941c <tcp_receive+0x994>
 801940e:	4b62      	ldr	r3, [pc, #392]	@ (8019598 <tcp_receive+0xb10>)
 8019410:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8019414:	4961      	ldr	r1, [pc, #388]	@ (801959c <tcp_receive+0xb14>)
 8019416:	4862      	ldr	r0, [pc, #392]	@ (80195a0 <tcp_receive+0xb18>)
 8019418:	f007 fa70 	bl	80208fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019420:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019422:	4b5a      	ldr	r3, [pc, #360]	@ (801958c <tcp_receive+0xb04>)
 8019424:	881b      	ldrh	r3, [r3, #0]
 8019426:	461a      	mov	r2, r3
 8019428:	4b59      	ldr	r3, [pc, #356]	@ (8019590 <tcp_receive+0xb08>)
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	441a      	add	r2, r3
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019436:	4b55      	ldr	r3, [pc, #340]	@ (801958c <tcp_receive+0xb04>)
 8019438:	881b      	ldrh	r3, [r3, #0]
 801943a:	429a      	cmp	r2, r3
 801943c:	d206      	bcs.n	801944c <tcp_receive+0x9c4>
 801943e:	4b56      	ldr	r3, [pc, #344]	@ (8019598 <tcp_receive+0xb10>)
 8019440:	f240 6207 	movw	r2, #1543	@ 0x607
 8019444:	4957      	ldr	r1, [pc, #348]	@ (80195a4 <tcp_receive+0xb1c>)
 8019446:	4856      	ldr	r0, [pc, #344]	@ (80195a0 <tcp_receive+0xb18>)
 8019448:	f007 fa58 	bl	80208fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019450:	4b4e      	ldr	r3, [pc, #312]	@ (801958c <tcp_receive+0xb04>)
 8019452:	881b      	ldrh	r3, [r3, #0]
 8019454:	1ad3      	subs	r3, r2, r3
 8019456:	b29a      	uxth	r2, r3
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801945c:	6878      	ldr	r0, [r7, #4]
 801945e:	f7fc fd93 	bl	8015f88 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019462:	4b4c      	ldr	r3, [pc, #304]	@ (8019594 <tcp_receive+0xb0c>)
 8019464:	685b      	ldr	r3, [r3, #4]
 8019466:	891b      	ldrh	r3, [r3, #8]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d006      	beq.n	801947a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801946c:	4b49      	ldr	r3, [pc, #292]	@ (8019594 <tcp_receive+0xb0c>)
 801946e:	685b      	ldr	r3, [r3, #4]
 8019470:	4a4d      	ldr	r2, [pc, #308]	@ (80195a8 <tcp_receive+0xb20>)
 8019472:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019474:	4b47      	ldr	r3, [pc, #284]	@ (8019594 <tcp_receive+0xb0c>)
 8019476:	2200      	movs	r2, #0
 8019478:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801947a:	4b46      	ldr	r3, [pc, #280]	@ (8019594 <tcp_receive+0xb0c>)
 801947c:	691b      	ldr	r3, [r3, #16]
 801947e:	899b      	ldrh	r3, [r3, #12]
 8019480:	b29b      	uxth	r3, r3
 8019482:	4618      	mov	r0, r3
 8019484:	f7fa f956 	bl	8013734 <lwip_htons>
 8019488:	4603      	mov	r3, r0
 801948a:	b2db      	uxtb	r3, r3
 801948c:	f003 0301 	and.w	r3, r3, #1
 8019490:	2b00      	cmp	r3, #0
 8019492:	f000 80b8 	beq.w	8019606 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019496:	4b45      	ldr	r3, [pc, #276]	@ (80195ac <tcp_receive+0xb24>)
 8019498:	781b      	ldrb	r3, [r3, #0]
 801949a:	f043 0320 	orr.w	r3, r3, #32
 801949e:	b2da      	uxtb	r2, r3
 80194a0:	4b42      	ldr	r3, [pc, #264]	@ (80195ac <tcp_receive+0xb24>)
 80194a2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80194a4:	e0af      	b.n	8019606 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80194aa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80194b0:	691b      	ldr	r3, [r3, #16]
 80194b2:	685b      	ldr	r3, [r3, #4]
 80194b4:	4a36      	ldr	r2, [pc, #216]	@ (8019590 <tcp_receive+0xb08>)
 80194b6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80194b8:	68bb      	ldr	r3, [r7, #8]
 80194ba:	891b      	ldrh	r3, [r3, #8]
 80194bc:	461c      	mov	r4, r3
 80194be:	68bb      	ldr	r3, [r7, #8]
 80194c0:	691b      	ldr	r3, [r3, #16]
 80194c2:	899b      	ldrh	r3, [r3, #12]
 80194c4:	b29b      	uxth	r3, r3
 80194c6:	4618      	mov	r0, r3
 80194c8:	f7fa f934 	bl	8013734 <lwip_htons>
 80194cc:	4603      	mov	r3, r0
 80194ce:	b2db      	uxtb	r3, r3
 80194d0:	f003 0303 	and.w	r3, r3, #3
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d001      	beq.n	80194dc <tcp_receive+0xa54>
 80194d8:	2301      	movs	r3, #1
 80194da:	e000      	b.n	80194de <tcp_receive+0xa56>
 80194dc:	2300      	movs	r3, #0
 80194de:	191a      	adds	r2, r3, r4
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194e4:	441a      	add	r2, r3
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80194ee:	461c      	mov	r4, r3
 80194f0:	68bb      	ldr	r3, [r7, #8]
 80194f2:	891b      	ldrh	r3, [r3, #8]
 80194f4:	461d      	mov	r5, r3
 80194f6:	68bb      	ldr	r3, [r7, #8]
 80194f8:	691b      	ldr	r3, [r3, #16]
 80194fa:	899b      	ldrh	r3, [r3, #12]
 80194fc:	b29b      	uxth	r3, r3
 80194fe:	4618      	mov	r0, r3
 8019500:	f7fa f918 	bl	8013734 <lwip_htons>
 8019504:	4603      	mov	r3, r0
 8019506:	b2db      	uxtb	r3, r3
 8019508:	f003 0303 	and.w	r3, r3, #3
 801950c:	2b00      	cmp	r3, #0
 801950e:	d001      	beq.n	8019514 <tcp_receive+0xa8c>
 8019510:	2301      	movs	r3, #1
 8019512:	e000      	b.n	8019516 <tcp_receive+0xa8e>
 8019514:	2300      	movs	r3, #0
 8019516:	442b      	add	r3, r5
 8019518:	429c      	cmp	r4, r3
 801951a:	d206      	bcs.n	801952a <tcp_receive+0xaa2>
 801951c:	4b1e      	ldr	r3, [pc, #120]	@ (8019598 <tcp_receive+0xb10>)
 801951e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8019522:	4923      	ldr	r1, [pc, #140]	@ (80195b0 <tcp_receive+0xb28>)
 8019524:	481e      	ldr	r0, [pc, #120]	@ (80195a0 <tcp_receive+0xb18>)
 8019526:	f007 f9e9 	bl	80208fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801952a:	68bb      	ldr	r3, [r7, #8]
 801952c:	891b      	ldrh	r3, [r3, #8]
 801952e:	461c      	mov	r4, r3
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	691b      	ldr	r3, [r3, #16]
 8019534:	899b      	ldrh	r3, [r3, #12]
 8019536:	b29b      	uxth	r3, r3
 8019538:	4618      	mov	r0, r3
 801953a:	f7fa f8fb 	bl	8013734 <lwip_htons>
 801953e:	4603      	mov	r3, r0
 8019540:	b2db      	uxtb	r3, r3
 8019542:	f003 0303 	and.w	r3, r3, #3
 8019546:	2b00      	cmp	r3, #0
 8019548:	d001      	beq.n	801954e <tcp_receive+0xac6>
 801954a:	2301      	movs	r3, #1
 801954c:	e000      	b.n	8019550 <tcp_receive+0xac8>
 801954e:	2300      	movs	r3, #0
 8019550:	1919      	adds	r1, r3, r4
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019556:	b28b      	uxth	r3, r1
 8019558:	1ad3      	subs	r3, r2, r3
 801955a:	b29a      	uxth	r2, r3
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019560:	6878      	ldr	r0, [r7, #4]
 8019562:	f7fc fd11 	bl	8015f88 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019566:	68bb      	ldr	r3, [r7, #8]
 8019568:	685b      	ldr	r3, [r3, #4]
 801956a:	891b      	ldrh	r3, [r3, #8]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d028      	beq.n	80195c2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019570:	4b0d      	ldr	r3, [pc, #52]	@ (80195a8 <tcp_receive+0xb20>)
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d01d      	beq.n	80195b4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019578:	4b0b      	ldr	r3, [pc, #44]	@ (80195a8 <tcp_receive+0xb20>)
 801957a:	681a      	ldr	r2, [r3, #0]
 801957c:	68bb      	ldr	r3, [r7, #8]
 801957e:	685b      	ldr	r3, [r3, #4]
 8019580:	4619      	mov	r1, r3
 8019582:	4610      	mov	r0, r2
 8019584:	f7fb ff16 	bl	80153b4 <pbuf_cat>
 8019588:	e018      	b.n	80195bc <tcp_receive+0xb34>
 801958a:	bf00      	nop
 801958c:	20022aee 	.word	0x20022aee
 8019590:	20022ae4 	.word	0x20022ae4
 8019594:	20022ac0 	.word	0x20022ac0
 8019598:	08023ef8 	.word	0x08023ef8
 801959c:	080242d8 	.word	0x080242d8
 80195a0:	08023f44 	.word	0x08023f44
 80195a4:	08024314 	.word	0x08024314
 80195a8:	20022af4 	.word	0x20022af4
 80195ac:	20022af1 	.word	0x20022af1
 80195b0:	08024334 	.word	0x08024334
            } else {
              recv_data = cseg->p;
 80195b4:	68bb      	ldr	r3, [r7, #8]
 80195b6:	685b      	ldr	r3, [r3, #4]
 80195b8:	4a70      	ldr	r2, [pc, #448]	@ (801977c <tcp_receive+0xcf4>)
 80195ba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80195bc:	68bb      	ldr	r3, [r7, #8]
 80195be:	2200      	movs	r2, #0
 80195c0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80195c2:	68bb      	ldr	r3, [r7, #8]
 80195c4:	691b      	ldr	r3, [r3, #16]
 80195c6:	899b      	ldrh	r3, [r3, #12]
 80195c8:	b29b      	uxth	r3, r3
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7fa f8b2 	bl	8013734 <lwip_htons>
 80195d0:	4603      	mov	r3, r0
 80195d2:	b2db      	uxtb	r3, r3
 80195d4:	f003 0301 	and.w	r3, r3, #1
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d00d      	beq.n	80195f8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80195dc:	4b68      	ldr	r3, [pc, #416]	@ (8019780 <tcp_receive+0xcf8>)
 80195de:	781b      	ldrb	r3, [r3, #0]
 80195e0:	f043 0320 	orr.w	r3, r3, #32
 80195e4:	b2da      	uxtb	r2, r3
 80195e6:	4b66      	ldr	r3, [pc, #408]	@ (8019780 <tcp_receive+0xcf8>)
 80195e8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	7d1b      	ldrb	r3, [r3, #20]
 80195ee:	2b04      	cmp	r3, #4
 80195f0:	d102      	bne.n	80195f8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	2207      	movs	r2, #7
 80195f6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80195f8:	68bb      	ldr	r3, [r7, #8]
 80195fa:	681a      	ldr	r2, [r3, #0]
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8019600:	68b8      	ldr	r0, [r7, #8]
 8019602:	f7fd fb00 	bl	8016c06 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801960a:	2b00      	cmp	r3, #0
 801960c:	d008      	beq.n	8019620 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019612:	691b      	ldr	r3, [r3, #16]
 8019614:	685a      	ldr	r2, [r3, #4]
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801961a:	429a      	cmp	r2, r3
 801961c:	f43f af43 	beq.w	80194a6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	8b5b      	ldrh	r3, [r3, #26]
 8019624:	f003 0301 	and.w	r3, r3, #1
 8019628:	2b00      	cmp	r3, #0
 801962a:	d00e      	beq.n	801964a <tcp_receive+0xbc2>
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	8b5b      	ldrh	r3, [r3, #26]
 8019630:	f023 0301 	bic.w	r3, r3, #1
 8019634:	b29a      	uxth	r2, r3
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	835a      	strh	r2, [r3, #26]
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	8b5b      	ldrh	r3, [r3, #26]
 801963e:	f043 0302 	orr.w	r3, r3, #2
 8019642:	b29a      	uxth	r2, r3
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019648:	e187      	b.n	801995a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	8b5b      	ldrh	r3, [r3, #26]
 801964e:	f043 0301 	orr.w	r3, r3, #1
 8019652:	b29a      	uxth	r2, r3
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019658:	e17f      	b.n	801995a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801965e:	2b00      	cmp	r3, #0
 8019660:	d106      	bne.n	8019670 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019662:	4848      	ldr	r0, [pc, #288]	@ (8019784 <tcp_receive+0xcfc>)
 8019664:	f7fd fae8 	bl	8016c38 <tcp_seg_copy>
 8019668:	4602      	mov	r2, r0
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	675a      	str	r2, [r3, #116]	@ 0x74
 801966e:	e16c      	b.n	801994a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019670:	2300      	movs	r3, #0
 8019672:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019678:	63bb      	str	r3, [r7, #56]	@ 0x38
 801967a:	e156      	b.n	801992a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801967c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801967e:	691b      	ldr	r3, [r3, #16]
 8019680:	685a      	ldr	r2, [r3, #4]
 8019682:	4b41      	ldr	r3, [pc, #260]	@ (8019788 <tcp_receive+0xd00>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	429a      	cmp	r2, r3
 8019688:	d11d      	bne.n	80196c6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801968a:	4b3e      	ldr	r3, [pc, #248]	@ (8019784 <tcp_receive+0xcfc>)
 801968c:	891a      	ldrh	r2, [r3, #8]
 801968e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019690:	891b      	ldrh	r3, [r3, #8]
 8019692:	429a      	cmp	r2, r3
 8019694:	f240 814e 	bls.w	8019934 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019698:	483a      	ldr	r0, [pc, #232]	@ (8019784 <tcp_receive+0xcfc>)
 801969a:	f7fd facd 	bl	8016c38 <tcp_seg_copy>
 801969e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80196a0:	697b      	ldr	r3, [r7, #20]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	f000 8148 	beq.w	8019938 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80196a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d003      	beq.n	80196b6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80196ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196b0:	697a      	ldr	r2, [r7, #20]
 80196b2:	601a      	str	r2, [r3, #0]
 80196b4:	e002      	b.n	80196bc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	697a      	ldr	r2, [r7, #20]
 80196ba:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80196bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80196be:	6978      	ldr	r0, [r7, #20]
 80196c0:	f7ff f8de 	bl	8018880 <tcp_oos_insert_segment>
                }
                break;
 80196c4:	e138      	b.n	8019938 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80196c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d117      	bne.n	80196fc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80196cc:	4b2e      	ldr	r3, [pc, #184]	@ (8019788 <tcp_receive+0xd00>)
 80196ce:	681a      	ldr	r2, [r3, #0]
 80196d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196d2:	691b      	ldr	r3, [r3, #16]
 80196d4:	685b      	ldr	r3, [r3, #4]
 80196d6:	1ad3      	subs	r3, r2, r3
 80196d8:	2b00      	cmp	r3, #0
 80196da:	da57      	bge.n	801978c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80196dc:	4829      	ldr	r0, [pc, #164]	@ (8019784 <tcp_receive+0xcfc>)
 80196de:	f7fd faab 	bl	8016c38 <tcp_seg_copy>
 80196e2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80196e4:	69bb      	ldr	r3, [r7, #24]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	f000 8128 	beq.w	801993c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	69ba      	ldr	r2, [r7, #24]
 80196f0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80196f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80196f4:	69b8      	ldr	r0, [r7, #24]
 80196f6:	f7ff f8c3 	bl	8018880 <tcp_oos_insert_segment>
                  }
                  break;
 80196fa:	e11f      	b.n	801993c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80196fc:	4b22      	ldr	r3, [pc, #136]	@ (8019788 <tcp_receive+0xd00>)
 80196fe:	681a      	ldr	r2, [r3, #0]
 8019700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019702:	691b      	ldr	r3, [r3, #16]
 8019704:	685b      	ldr	r3, [r3, #4]
 8019706:	1ad3      	subs	r3, r2, r3
 8019708:	3b01      	subs	r3, #1
 801970a:	2b00      	cmp	r3, #0
 801970c:	db3e      	blt.n	801978c <tcp_receive+0xd04>
 801970e:	4b1e      	ldr	r3, [pc, #120]	@ (8019788 <tcp_receive+0xd00>)
 8019710:	681a      	ldr	r2, [r3, #0]
 8019712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019714:	691b      	ldr	r3, [r3, #16]
 8019716:	685b      	ldr	r3, [r3, #4]
 8019718:	1ad3      	subs	r3, r2, r3
 801971a:	3301      	adds	r3, #1
 801971c:	2b00      	cmp	r3, #0
 801971e:	dc35      	bgt.n	801978c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019720:	4818      	ldr	r0, [pc, #96]	@ (8019784 <tcp_receive+0xcfc>)
 8019722:	f7fd fa89 	bl	8016c38 <tcp_seg_copy>
 8019726:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019728:	69fb      	ldr	r3, [r7, #28]
 801972a:	2b00      	cmp	r3, #0
 801972c:	f000 8108 	beq.w	8019940 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019732:	691b      	ldr	r3, [r3, #16]
 8019734:	685b      	ldr	r3, [r3, #4]
 8019736:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019738:	8912      	ldrh	r2, [r2, #8]
 801973a:	441a      	add	r2, r3
 801973c:	4b12      	ldr	r3, [pc, #72]	@ (8019788 <tcp_receive+0xd00>)
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	1ad3      	subs	r3, r2, r3
 8019742:	2b00      	cmp	r3, #0
 8019744:	dd12      	ble.n	801976c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019746:	4b10      	ldr	r3, [pc, #64]	@ (8019788 <tcp_receive+0xd00>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	b29a      	uxth	r2, r3
 801974c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801974e:	691b      	ldr	r3, [r3, #16]
 8019750:	685b      	ldr	r3, [r3, #4]
 8019752:	b29b      	uxth	r3, r3
 8019754:	1ad3      	subs	r3, r2, r3
 8019756:	b29a      	uxth	r2, r3
 8019758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801975a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801975c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801975e:	685a      	ldr	r2, [r3, #4]
 8019760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019762:	891b      	ldrh	r3, [r3, #8]
 8019764:	4619      	mov	r1, r3
 8019766:	4610      	mov	r0, r2
 8019768:	f7fb fb9e 	bl	8014ea8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801976c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801976e:	69fa      	ldr	r2, [r7, #28]
 8019770:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019772:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019774:	69f8      	ldr	r0, [r7, #28]
 8019776:	f7ff f883 	bl	8018880 <tcp_oos_insert_segment>
                  }
                  break;
 801977a:	e0e1      	b.n	8019940 <tcp_receive+0xeb8>
 801977c:	20022af4 	.word	0x20022af4
 8019780:	20022af1 	.word	0x20022af1
 8019784:	20022ac0 	.word	0x20022ac0
 8019788:	20022ae4 	.word	0x20022ae4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801978c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801978e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	2b00      	cmp	r3, #0
 8019796:	f040 80c5 	bne.w	8019924 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801979a:	4b7f      	ldr	r3, [pc, #508]	@ (8019998 <tcp_receive+0xf10>)
 801979c:	681a      	ldr	r2, [r3, #0]
 801979e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197a0:	691b      	ldr	r3, [r3, #16]
 80197a2:	685b      	ldr	r3, [r3, #4]
 80197a4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	f340 80bc 	ble.w	8019924 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80197ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197ae:	691b      	ldr	r3, [r3, #16]
 80197b0:	899b      	ldrh	r3, [r3, #12]
 80197b2:	b29b      	uxth	r3, r3
 80197b4:	4618      	mov	r0, r3
 80197b6:	f7f9 ffbd 	bl	8013734 <lwip_htons>
 80197ba:	4603      	mov	r3, r0
 80197bc:	b2db      	uxtb	r3, r3
 80197be:	f003 0301 	and.w	r3, r3, #1
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	f040 80be 	bne.w	8019944 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80197c8:	4874      	ldr	r0, [pc, #464]	@ (801999c <tcp_receive+0xf14>)
 80197ca:	f7fd fa35 	bl	8016c38 <tcp_seg_copy>
 80197ce:	4602      	mov	r2, r0
 80197d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197d2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80197d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	f000 80b5 	beq.w	8019948 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80197de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197e0:	691b      	ldr	r3, [r3, #16]
 80197e2:	685b      	ldr	r3, [r3, #4]
 80197e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80197e6:	8912      	ldrh	r2, [r2, #8]
 80197e8:	441a      	add	r2, r3
 80197ea:	4b6b      	ldr	r3, [pc, #428]	@ (8019998 <tcp_receive+0xf10>)
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	1ad3      	subs	r3, r2, r3
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	dd12      	ble.n	801981a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80197f4:	4b68      	ldr	r3, [pc, #416]	@ (8019998 <tcp_receive+0xf10>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	b29a      	uxth	r2, r3
 80197fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197fc:	691b      	ldr	r3, [r3, #16]
 80197fe:	685b      	ldr	r3, [r3, #4]
 8019800:	b29b      	uxth	r3, r3
 8019802:	1ad3      	subs	r3, r2, r3
 8019804:	b29a      	uxth	r2, r3
 8019806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019808:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801980a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801980c:	685a      	ldr	r2, [r3, #4]
 801980e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019810:	891b      	ldrh	r3, [r3, #8]
 8019812:	4619      	mov	r1, r3
 8019814:	4610      	mov	r0, r2
 8019816:	f7fb fb47 	bl	8014ea8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801981a:	4b61      	ldr	r3, [pc, #388]	@ (80199a0 <tcp_receive+0xf18>)
 801981c:	881b      	ldrh	r3, [r3, #0]
 801981e:	461a      	mov	r2, r3
 8019820:	4b5d      	ldr	r3, [pc, #372]	@ (8019998 <tcp_receive+0xf10>)
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	441a      	add	r2, r3
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801982a:	6879      	ldr	r1, [r7, #4]
 801982c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801982e:	440b      	add	r3, r1
 8019830:	1ad3      	subs	r3, r2, r3
 8019832:	2b00      	cmp	r3, #0
 8019834:	f340 8088 	ble.w	8019948 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	691b      	ldr	r3, [r3, #16]
 801983e:	899b      	ldrh	r3, [r3, #12]
 8019840:	b29b      	uxth	r3, r3
 8019842:	4618      	mov	r0, r3
 8019844:	f7f9 ff76 	bl	8013734 <lwip_htons>
 8019848:	4603      	mov	r3, r0
 801984a:	b2db      	uxtb	r3, r3
 801984c:	f003 0301 	and.w	r3, r3, #1
 8019850:	2b00      	cmp	r3, #0
 8019852:	d021      	beq.n	8019898 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	691b      	ldr	r3, [r3, #16]
 801985a:	899b      	ldrh	r3, [r3, #12]
 801985c:	b29b      	uxth	r3, r3
 801985e:	b21b      	sxth	r3, r3
 8019860:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019864:	b21c      	sxth	r4, r3
 8019866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	691b      	ldr	r3, [r3, #16]
 801986c:	899b      	ldrh	r3, [r3, #12]
 801986e:	b29b      	uxth	r3, r3
 8019870:	4618      	mov	r0, r3
 8019872:	f7f9 ff5f 	bl	8013734 <lwip_htons>
 8019876:	4603      	mov	r3, r0
 8019878:	b2db      	uxtb	r3, r3
 801987a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801987e:	b29b      	uxth	r3, r3
 8019880:	4618      	mov	r0, r3
 8019882:	f7f9 ff57 	bl	8013734 <lwip_htons>
 8019886:	4603      	mov	r3, r0
 8019888:	b21b      	sxth	r3, r3
 801988a:	4323      	orrs	r3, r4
 801988c:	b21a      	sxth	r2, r3
 801988e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	691b      	ldr	r3, [r3, #16]
 8019894:	b292      	uxth	r2, r2
 8019896:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801989c:	b29a      	uxth	r2, r3
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80198a2:	4413      	add	r3, r2
 80198a4:	b299      	uxth	r1, r3
 80198a6:	4b3c      	ldr	r3, [pc, #240]	@ (8019998 <tcp_receive+0xf10>)
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	b29a      	uxth	r2, r3
 80198ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	1a8a      	subs	r2, r1, r2
 80198b2:	b292      	uxth	r2, r2
 80198b4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80198b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	685a      	ldr	r2, [r3, #4]
 80198bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	891b      	ldrh	r3, [r3, #8]
 80198c2:	4619      	mov	r1, r3
 80198c4:	4610      	mov	r0, r2
 80198c6:	f7fb faef 	bl	8014ea8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80198ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	891c      	ldrh	r4, [r3, #8]
 80198d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	691b      	ldr	r3, [r3, #16]
 80198d6:	899b      	ldrh	r3, [r3, #12]
 80198d8:	b29b      	uxth	r3, r3
 80198da:	4618      	mov	r0, r3
 80198dc:	f7f9 ff2a 	bl	8013734 <lwip_htons>
 80198e0:	4603      	mov	r3, r0
 80198e2:	b2db      	uxtb	r3, r3
 80198e4:	f003 0303 	and.w	r3, r3, #3
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d001      	beq.n	80198f0 <tcp_receive+0xe68>
 80198ec:	2301      	movs	r3, #1
 80198ee:	e000      	b.n	80198f2 <tcp_receive+0xe6a>
 80198f0:	2300      	movs	r3, #0
 80198f2:	4423      	add	r3, r4
 80198f4:	b29a      	uxth	r2, r3
 80198f6:	4b2a      	ldr	r3, [pc, #168]	@ (80199a0 <tcp_receive+0xf18>)
 80198f8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80198fa:	4b29      	ldr	r3, [pc, #164]	@ (80199a0 <tcp_receive+0xf18>)
 80198fc:	881b      	ldrh	r3, [r3, #0]
 80198fe:	461a      	mov	r2, r3
 8019900:	4b25      	ldr	r3, [pc, #148]	@ (8019998 <tcp_receive+0xf10>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	441a      	add	r2, r3
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801990a:	6879      	ldr	r1, [r7, #4]
 801990c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801990e:	440b      	add	r3, r1
 8019910:	429a      	cmp	r2, r3
 8019912:	d019      	beq.n	8019948 <tcp_receive+0xec0>
 8019914:	4b23      	ldr	r3, [pc, #140]	@ (80199a4 <tcp_receive+0xf1c>)
 8019916:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801991a:	4923      	ldr	r1, [pc, #140]	@ (80199a8 <tcp_receive+0xf20>)
 801991c:	4823      	ldr	r0, [pc, #140]	@ (80199ac <tcp_receive+0xf24>)
 801991e:	f006 ffed 	bl	80208fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019922:	e011      	b.n	8019948 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	63bb      	str	r3, [r7, #56]	@ 0x38
 801992a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801992c:	2b00      	cmp	r3, #0
 801992e:	f47f aea5 	bne.w	801967c <tcp_receive+0xbf4>
 8019932:	e00a      	b.n	801994a <tcp_receive+0xec2>
                break;
 8019934:	bf00      	nop
 8019936:	e008      	b.n	801994a <tcp_receive+0xec2>
                break;
 8019938:	bf00      	nop
 801993a:	e006      	b.n	801994a <tcp_receive+0xec2>
                  break;
 801993c:	bf00      	nop
 801993e:	e004      	b.n	801994a <tcp_receive+0xec2>
                  break;
 8019940:	bf00      	nop
 8019942:	e002      	b.n	801994a <tcp_receive+0xec2>
                  break;
 8019944:	bf00      	nop
 8019946:	e000      	b.n	801994a <tcp_receive+0xec2>
                break;
 8019948:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f001 fef6 	bl	801b73c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8019950:	e003      	b.n	801995a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019952:	6878      	ldr	r0, [r7, #4]
 8019954:	f001 fef2 	bl	801b73c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019958:	e01a      	b.n	8019990 <tcp_receive+0xf08>
 801995a:	e019      	b.n	8019990 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801995c:	4b0e      	ldr	r3, [pc, #56]	@ (8019998 <tcp_receive+0xf10>)
 801995e:	681a      	ldr	r2, [r3, #0]
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019964:	1ad3      	subs	r3, r2, r3
 8019966:	2b00      	cmp	r3, #0
 8019968:	db0a      	blt.n	8019980 <tcp_receive+0xef8>
 801996a:	4b0b      	ldr	r3, [pc, #44]	@ (8019998 <tcp_receive+0xf10>)
 801996c:	681a      	ldr	r2, [r3, #0]
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019972:	6879      	ldr	r1, [r7, #4]
 8019974:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019976:	440b      	add	r3, r1
 8019978:	1ad3      	subs	r3, r2, r3
 801997a:	3301      	adds	r3, #1
 801997c:	2b00      	cmp	r3, #0
 801997e:	dd07      	ble.n	8019990 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	8b5b      	ldrh	r3, [r3, #26]
 8019984:	f043 0302 	orr.w	r3, r3, #2
 8019988:	b29a      	uxth	r2, r3
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801998e:	e7ff      	b.n	8019990 <tcp_receive+0xf08>
 8019990:	bf00      	nop
 8019992:	3750      	adds	r7, #80	@ 0x50
 8019994:	46bd      	mov	sp, r7
 8019996:	bdb0      	pop	{r4, r5, r7, pc}
 8019998:	20022ae4 	.word	0x20022ae4
 801999c:	20022ac0 	.word	0x20022ac0
 80199a0:	20022aee 	.word	0x20022aee
 80199a4:	08023ef8 	.word	0x08023ef8
 80199a8:	080242a0 	.word	0x080242a0
 80199ac:	08023f44 	.word	0x08023f44

080199b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80199b0:	b480      	push	{r7}
 80199b2:	b083      	sub	sp, #12
 80199b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80199b6:	4b15      	ldr	r3, [pc, #84]	@ (8019a0c <tcp_get_next_optbyte+0x5c>)
 80199b8:	881b      	ldrh	r3, [r3, #0]
 80199ba:	1c5a      	adds	r2, r3, #1
 80199bc:	b291      	uxth	r1, r2
 80199be:	4a13      	ldr	r2, [pc, #76]	@ (8019a0c <tcp_get_next_optbyte+0x5c>)
 80199c0:	8011      	strh	r1, [r2, #0]
 80199c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80199c4:	4b12      	ldr	r3, [pc, #72]	@ (8019a10 <tcp_get_next_optbyte+0x60>)
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d004      	beq.n	80199d6 <tcp_get_next_optbyte+0x26>
 80199cc:	4b11      	ldr	r3, [pc, #68]	@ (8019a14 <tcp_get_next_optbyte+0x64>)
 80199ce:	881b      	ldrh	r3, [r3, #0]
 80199d0:	88fa      	ldrh	r2, [r7, #6]
 80199d2:	429a      	cmp	r2, r3
 80199d4:	d208      	bcs.n	80199e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80199d6:	4b10      	ldr	r3, [pc, #64]	@ (8019a18 <tcp_get_next_optbyte+0x68>)
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	3314      	adds	r3, #20
 80199dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80199de:	88fb      	ldrh	r3, [r7, #6]
 80199e0:	683a      	ldr	r2, [r7, #0]
 80199e2:	4413      	add	r3, r2
 80199e4:	781b      	ldrb	r3, [r3, #0]
 80199e6:	e00b      	b.n	8019a00 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80199e8:	88fb      	ldrh	r3, [r7, #6]
 80199ea:	b2da      	uxtb	r2, r3
 80199ec:	4b09      	ldr	r3, [pc, #36]	@ (8019a14 <tcp_get_next_optbyte+0x64>)
 80199ee:	881b      	ldrh	r3, [r3, #0]
 80199f0:	b2db      	uxtb	r3, r3
 80199f2:	1ad3      	subs	r3, r2, r3
 80199f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80199f6:	4b06      	ldr	r3, [pc, #24]	@ (8019a10 <tcp_get_next_optbyte+0x60>)
 80199f8:	681a      	ldr	r2, [r3, #0]
 80199fa:	797b      	ldrb	r3, [r7, #5]
 80199fc:	4413      	add	r3, r2
 80199fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019a00:	4618      	mov	r0, r3
 8019a02:	370c      	adds	r7, #12
 8019a04:	46bd      	mov	sp, r7
 8019a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a0a:	4770      	bx	lr
 8019a0c:	20022ae0 	.word	0x20022ae0
 8019a10:	20022adc 	.word	0x20022adc
 8019a14:	20022ada 	.word	0x20022ada
 8019a18:	20022ad4 	.word	0x20022ad4

08019a1c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b084      	sub	sp, #16
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d106      	bne.n	8019a38 <tcp_parseopt+0x1c>
 8019a2a:	4b32      	ldr	r3, [pc, #200]	@ (8019af4 <tcp_parseopt+0xd8>)
 8019a2c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8019a30:	4931      	ldr	r1, [pc, #196]	@ (8019af8 <tcp_parseopt+0xdc>)
 8019a32:	4832      	ldr	r0, [pc, #200]	@ (8019afc <tcp_parseopt+0xe0>)
 8019a34:	f006 ff62 	bl	80208fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019a38:	4b31      	ldr	r3, [pc, #196]	@ (8019b00 <tcp_parseopt+0xe4>)
 8019a3a:	881b      	ldrh	r3, [r3, #0]
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d056      	beq.n	8019aee <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019a40:	4b30      	ldr	r3, [pc, #192]	@ (8019b04 <tcp_parseopt+0xe8>)
 8019a42:	2200      	movs	r2, #0
 8019a44:	801a      	strh	r2, [r3, #0]
 8019a46:	e046      	b.n	8019ad6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8019a48:	f7ff ffb2 	bl	80199b0 <tcp_get_next_optbyte>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019a50:	7bfb      	ldrb	r3, [r7, #15]
 8019a52:	2b02      	cmp	r3, #2
 8019a54:	d006      	beq.n	8019a64 <tcp_parseopt+0x48>
 8019a56:	2b02      	cmp	r3, #2
 8019a58:	dc2a      	bgt.n	8019ab0 <tcp_parseopt+0x94>
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d042      	beq.n	8019ae4 <tcp_parseopt+0xc8>
 8019a5e:	2b01      	cmp	r3, #1
 8019a60:	d038      	beq.n	8019ad4 <tcp_parseopt+0xb8>
 8019a62:	e025      	b.n	8019ab0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019a64:	f7ff ffa4 	bl	80199b0 <tcp_get_next_optbyte>
 8019a68:	4603      	mov	r3, r0
 8019a6a:	2b04      	cmp	r3, #4
 8019a6c:	d13c      	bne.n	8019ae8 <tcp_parseopt+0xcc>
 8019a6e:	4b25      	ldr	r3, [pc, #148]	@ (8019b04 <tcp_parseopt+0xe8>)
 8019a70:	881b      	ldrh	r3, [r3, #0]
 8019a72:	3301      	adds	r3, #1
 8019a74:	4a22      	ldr	r2, [pc, #136]	@ (8019b00 <tcp_parseopt+0xe4>)
 8019a76:	8812      	ldrh	r2, [r2, #0]
 8019a78:	4293      	cmp	r3, r2
 8019a7a:	da35      	bge.n	8019ae8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019a7c:	f7ff ff98 	bl	80199b0 <tcp_get_next_optbyte>
 8019a80:	4603      	mov	r3, r0
 8019a82:	021b      	lsls	r3, r3, #8
 8019a84:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019a86:	f7ff ff93 	bl	80199b0 <tcp_get_next_optbyte>
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	461a      	mov	r2, r3
 8019a8e:	89bb      	ldrh	r3, [r7, #12]
 8019a90:	4313      	orrs	r3, r2
 8019a92:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019a94:	89bb      	ldrh	r3, [r7, #12]
 8019a96:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8019a9a:	d804      	bhi.n	8019aa6 <tcp_parseopt+0x8a>
 8019a9c:	89bb      	ldrh	r3, [r7, #12]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d001      	beq.n	8019aa6 <tcp_parseopt+0x8a>
 8019aa2:	89ba      	ldrh	r2, [r7, #12]
 8019aa4:	e001      	b.n	8019aaa <tcp_parseopt+0x8e>
 8019aa6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8019aae:	e012      	b.n	8019ad6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8019ab0:	f7ff ff7e 	bl	80199b0 <tcp_get_next_optbyte>
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019ab8:	7afb      	ldrb	r3, [r7, #11]
 8019aba:	2b01      	cmp	r3, #1
 8019abc:	d916      	bls.n	8019aec <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019abe:	7afb      	ldrb	r3, [r7, #11]
 8019ac0:	b29a      	uxth	r2, r3
 8019ac2:	4b10      	ldr	r3, [pc, #64]	@ (8019b04 <tcp_parseopt+0xe8>)
 8019ac4:	881b      	ldrh	r3, [r3, #0]
 8019ac6:	4413      	add	r3, r2
 8019ac8:	b29b      	uxth	r3, r3
 8019aca:	3b02      	subs	r3, #2
 8019acc:	b29a      	uxth	r2, r3
 8019ace:	4b0d      	ldr	r3, [pc, #52]	@ (8019b04 <tcp_parseopt+0xe8>)
 8019ad0:	801a      	strh	r2, [r3, #0]
 8019ad2:	e000      	b.n	8019ad6 <tcp_parseopt+0xba>
          break;
 8019ad4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8019b04 <tcp_parseopt+0xe8>)
 8019ad8:	881a      	ldrh	r2, [r3, #0]
 8019ada:	4b09      	ldr	r3, [pc, #36]	@ (8019b00 <tcp_parseopt+0xe4>)
 8019adc:	881b      	ldrh	r3, [r3, #0]
 8019ade:	429a      	cmp	r2, r3
 8019ae0:	d3b2      	bcc.n	8019a48 <tcp_parseopt+0x2c>
 8019ae2:	e004      	b.n	8019aee <tcp_parseopt+0xd2>
          return;
 8019ae4:	bf00      	nop
 8019ae6:	e002      	b.n	8019aee <tcp_parseopt+0xd2>
            return;
 8019ae8:	bf00      	nop
 8019aea:	e000      	b.n	8019aee <tcp_parseopt+0xd2>
            return;
 8019aec:	bf00      	nop
      }
    }
  }
}
 8019aee:	3710      	adds	r7, #16
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}
 8019af4:	08023ef8 	.word	0x08023ef8
 8019af8:	0802435c 	.word	0x0802435c
 8019afc:	08023f44 	.word	0x08023f44
 8019b00:	20022ad8 	.word	0x20022ad8
 8019b04:	20022ae0 	.word	0x20022ae0

08019b08 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019b08:	b480      	push	{r7}
 8019b0a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019b0c:	4b05      	ldr	r3, [pc, #20]	@ (8019b24 <tcp_trigger_input_pcb_close+0x1c>)
 8019b0e:	781b      	ldrb	r3, [r3, #0]
 8019b10:	f043 0310 	orr.w	r3, r3, #16
 8019b14:	b2da      	uxtb	r2, r3
 8019b16:	4b03      	ldr	r3, [pc, #12]	@ (8019b24 <tcp_trigger_input_pcb_close+0x1c>)
 8019b18:	701a      	strb	r2, [r3, #0]
}
 8019b1a:	bf00      	nop
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b22:	4770      	bx	lr
 8019b24:	20022af1 	.word	0x20022af1

08019b28 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b084      	sub	sp, #16
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	60f8      	str	r0, [r7, #12]
 8019b30:	60b9      	str	r1, [r7, #8]
 8019b32:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d00a      	beq.n	8019b50 <tcp_route+0x28>
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	7a1b      	ldrb	r3, [r3, #8]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d006      	beq.n	8019b50 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	7a1b      	ldrb	r3, [r3, #8]
 8019b46:	4618      	mov	r0, r3
 8019b48:	f7fa ff74 	bl	8014a34 <netif_get_by_index>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	e003      	b.n	8019b58 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019b50:	6878      	ldr	r0, [r7, #4]
 8019b52:	f004 f9ed 	bl	801df30 <ip4_route>
 8019b56:	4603      	mov	r3, r0
  }
}
 8019b58:	4618      	mov	r0, r3
 8019b5a:	3710      	adds	r7, #16
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bd80      	pop	{r7, pc}

08019b60 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019b60:	b590      	push	{r4, r7, lr}
 8019b62:	b087      	sub	sp, #28
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	60f8      	str	r0, [r7, #12]
 8019b68:	60b9      	str	r1, [r7, #8]
 8019b6a:	603b      	str	r3, [r7, #0]
 8019b6c:	4613      	mov	r3, r2
 8019b6e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d105      	bne.n	8019b82 <tcp_create_segment+0x22>
 8019b76:	4b45      	ldr	r3, [pc, #276]	@ (8019c8c <tcp_create_segment+0x12c>)
 8019b78:	22a3      	movs	r2, #163	@ 0xa3
 8019b7a:	4945      	ldr	r1, [pc, #276]	@ (8019c90 <tcp_create_segment+0x130>)
 8019b7c:	4845      	ldr	r0, [pc, #276]	@ (8019c94 <tcp_create_segment+0x134>)
 8019b7e:	f006 febd 	bl	80208fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019b82:	68bb      	ldr	r3, [r7, #8]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d105      	bne.n	8019b94 <tcp_create_segment+0x34>
 8019b88:	4b40      	ldr	r3, [pc, #256]	@ (8019c8c <tcp_create_segment+0x12c>)
 8019b8a:	22a4      	movs	r2, #164	@ 0xa4
 8019b8c:	4942      	ldr	r1, [pc, #264]	@ (8019c98 <tcp_create_segment+0x138>)
 8019b8e:	4841      	ldr	r0, [pc, #260]	@ (8019c94 <tcp_create_segment+0x134>)
 8019b90:	f006 feb4 	bl	80208fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019b94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019b98:	009b      	lsls	r3, r3, #2
 8019b9a:	b2db      	uxtb	r3, r3
 8019b9c:	f003 0304 	and.w	r3, r3, #4
 8019ba0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019ba2:	2003      	movs	r0, #3
 8019ba4:	f7fa fac4 	bl	8014130 <memp_malloc>
 8019ba8:	6138      	str	r0, [r7, #16]
 8019baa:	693b      	ldr	r3, [r7, #16]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d104      	bne.n	8019bba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019bb0:	68b8      	ldr	r0, [r7, #8]
 8019bb2:	f7fb fb19 	bl	80151e8 <pbuf_free>
    return NULL;
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	e063      	b.n	8019c82 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 8019bba:	693b      	ldr	r3, [r7, #16]
 8019bbc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019bc0:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8019bc2:	693b      	ldr	r3, [r7, #16]
 8019bc4:	2200      	movs	r2, #0
 8019bc6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019bc8:	693b      	ldr	r3, [r7, #16]
 8019bca:	68ba      	ldr	r2, [r7, #8]
 8019bcc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019bce:	68bb      	ldr	r3, [r7, #8]
 8019bd0:	891a      	ldrh	r2, [r3, #8]
 8019bd2:	7dfb      	ldrb	r3, [r7, #23]
 8019bd4:	b29b      	uxth	r3, r3
 8019bd6:	429a      	cmp	r2, r3
 8019bd8:	d205      	bcs.n	8019be6 <tcp_create_segment+0x86>
 8019bda:	4b2c      	ldr	r3, [pc, #176]	@ (8019c8c <tcp_create_segment+0x12c>)
 8019bdc:	22b0      	movs	r2, #176	@ 0xb0
 8019bde:	492f      	ldr	r1, [pc, #188]	@ (8019c9c <tcp_create_segment+0x13c>)
 8019be0:	482c      	ldr	r0, [pc, #176]	@ (8019c94 <tcp_create_segment+0x134>)
 8019be2:	f006 fe8b 	bl	80208fc <iprintf>
  seg->len = p->tot_len - optlen;
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	891a      	ldrh	r2, [r3, #8]
 8019bea:	7dfb      	ldrb	r3, [r7, #23]
 8019bec:	b29b      	uxth	r3, r3
 8019bee:	1ad3      	subs	r3, r2, r3
 8019bf0:	b29a      	uxth	r2, r3
 8019bf2:	693b      	ldr	r3, [r7, #16]
 8019bf4:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8019bf6:	693b      	ldr	r3, [r7, #16]
 8019bf8:	2200      	movs	r2, #0
 8019bfa:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019bfc:	2114      	movs	r1, #20
 8019bfe:	68b8      	ldr	r0, [r7, #8]
 8019c00:	f7fb fa54 	bl	80150ac <pbuf_add_header>
 8019c04:	4603      	mov	r3, r0
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d004      	beq.n	8019c14 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8019c0a:	6938      	ldr	r0, [r7, #16]
 8019c0c:	f7fc fffb 	bl	8016c06 <tcp_seg_free>
    return NULL;
 8019c10:	2300      	movs	r3, #0
 8019c12:	e036      	b.n	8019c82 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019c14:	693b      	ldr	r3, [r7, #16]
 8019c16:	685b      	ldr	r3, [r3, #4]
 8019c18:	685a      	ldr	r2, [r3, #4]
 8019c1a:	693b      	ldr	r3, [r7, #16]
 8019c1c:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	8ada      	ldrh	r2, [r3, #22]
 8019c22:	693b      	ldr	r3, [r7, #16]
 8019c24:	691c      	ldr	r4, [r3, #16]
 8019c26:	4610      	mov	r0, r2
 8019c28:	f7f9 fd84 	bl	8013734 <lwip_htons>
 8019c2c:	4603      	mov	r3, r0
 8019c2e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	8b1a      	ldrh	r2, [r3, #24]
 8019c34:	693b      	ldr	r3, [r7, #16]
 8019c36:	691c      	ldr	r4, [r3, #16]
 8019c38:	4610      	mov	r0, r2
 8019c3a:	f7f9 fd7b 	bl	8013734 <lwip_htons>
 8019c3e:	4603      	mov	r3, r0
 8019c40:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019c42:	693b      	ldr	r3, [r7, #16]
 8019c44:	691c      	ldr	r4, [r3, #16]
 8019c46:	6838      	ldr	r0, [r7, #0]
 8019c48:	f7f9 fd8a 	bl	8013760 <lwip_htonl>
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019c50:	7dfb      	ldrb	r3, [r7, #23]
 8019c52:	089b      	lsrs	r3, r3, #2
 8019c54:	b2db      	uxtb	r3, r3
 8019c56:	3305      	adds	r3, #5
 8019c58:	b29b      	uxth	r3, r3
 8019c5a:	031b      	lsls	r3, r3, #12
 8019c5c:	b29a      	uxth	r2, r3
 8019c5e:	79fb      	ldrb	r3, [r7, #7]
 8019c60:	b29b      	uxth	r3, r3
 8019c62:	4313      	orrs	r3, r2
 8019c64:	b29a      	uxth	r2, r3
 8019c66:	693b      	ldr	r3, [r7, #16]
 8019c68:	691c      	ldr	r4, [r3, #16]
 8019c6a:	4610      	mov	r0, r2
 8019c6c:	f7f9 fd62 	bl	8013734 <lwip_htons>
 8019c70:	4603      	mov	r3, r0
 8019c72:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019c74:	693b      	ldr	r3, [r7, #16]
 8019c76:	691b      	ldr	r3, [r3, #16]
 8019c78:	2200      	movs	r2, #0
 8019c7a:	749a      	strb	r2, [r3, #18]
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	74da      	strb	r2, [r3, #19]
  return seg;
 8019c80:	693b      	ldr	r3, [r7, #16]
}
 8019c82:	4618      	mov	r0, r3
 8019c84:	371c      	adds	r7, #28
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bd90      	pop	{r4, r7, pc}
 8019c8a:	bf00      	nop
 8019c8c:	08024378 	.word	0x08024378
 8019c90:	080243ac 	.word	0x080243ac
 8019c94:	080243cc 	.word	0x080243cc
 8019c98:	080243f4 	.word	0x080243f4
 8019c9c:	08024418 	.word	0x08024418

08019ca0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b086      	sub	sp, #24
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	607b      	str	r3, [r7, #4]
 8019ca8:	4603      	mov	r3, r0
 8019caa:	73fb      	strb	r3, [r7, #15]
 8019cac:	460b      	mov	r3, r1
 8019cae:	81bb      	strh	r3, [r7, #12]
 8019cb0:	4613      	mov	r3, r2
 8019cb2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019cb4:	89bb      	ldrh	r3, [r7, #12]
 8019cb6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d105      	bne.n	8019cca <tcp_pbuf_prealloc+0x2a>
 8019cbe:	4b30      	ldr	r3, [pc, #192]	@ (8019d80 <tcp_pbuf_prealloc+0xe0>)
 8019cc0:	22e8      	movs	r2, #232	@ 0xe8
 8019cc2:	4930      	ldr	r1, [pc, #192]	@ (8019d84 <tcp_pbuf_prealloc+0xe4>)
 8019cc4:	4830      	ldr	r0, [pc, #192]	@ (8019d88 <tcp_pbuf_prealloc+0xe8>)
 8019cc6:	f006 fe19 	bl	80208fc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019cca:	6a3b      	ldr	r3, [r7, #32]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d105      	bne.n	8019cdc <tcp_pbuf_prealloc+0x3c>
 8019cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8019d80 <tcp_pbuf_prealloc+0xe0>)
 8019cd2:	22e9      	movs	r2, #233	@ 0xe9
 8019cd4:	492d      	ldr	r1, [pc, #180]	@ (8019d8c <tcp_pbuf_prealloc+0xec>)
 8019cd6:	482c      	ldr	r0, [pc, #176]	@ (8019d88 <tcp_pbuf_prealloc+0xe8>)
 8019cd8:	f006 fe10 	bl	80208fc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019cdc:	89ba      	ldrh	r2, [r7, #12]
 8019cde:	897b      	ldrh	r3, [r7, #10]
 8019ce0:	429a      	cmp	r2, r3
 8019ce2:	d221      	bcs.n	8019d28 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019ce4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019ce8:	f003 0302 	and.w	r3, r3, #2
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d111      	bne.n	8019d14 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019cf0:	6a3b      	ldr	r3, [r7, #32]
 8019cf2:	8b5b      	ldrh	r3, [r3, #26]
 8019cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d115      	bne.n	8019d28 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019cfc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d007      	beq.n	8019d14 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8019d04:	6a3b      	ldr	r3, [r7, #32]
 8019d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d103      	bne.n	8019d14 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019d0c:	6a3b      	ldr	r3, [r7, #32]
 8019d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d009      	beq.n	8019d28 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019d14:	89bb      	ldrh	r3, [r7, #12]
 8019d16:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8019d1a:	f023 0203 	bic.w	r2, r3, #3
 8019d1e:	897b      	ldrh	r3, [r7, #10]
 8019d20:	4293      	cmp	r3, r2
 8019d22:	bf28      	it	cs
 8019d24:	4613      	movcs	r3, r2
 8019d26:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019d28:	8af9      	ldrh	r1, [r7, #22]
 8019d2a:	7bfb      	ldrb	r3, [r7, #15]
 8019d2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019d30:	4618      	mov	r0, r3
 8019d32:	f7fa ff2d 	bl	8014b90 <pbuf_alloc>
 8019d36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019d38:	693b      	ldr	r3, [r7, #16]
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d101      	bne.n	8019d42 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019d3e:	2300      	movs	r3, #0
 8019d40:	e019      	b.n	8019d76 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019d42:	693b      	ldr	r3, [r7, #16]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d006      	beq.n	8019d58 <tcp_pbuf_prealloc+0xb8>
 8019d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8019d80 <tcp_pbuf_prealloc+0xe0>)
 8019d4c:	f240 120b 	movw	r2, #267	@ 0x10b
 8019d50:	490f      	ldr	r1, [pc, #60]	@ (8019d90 <tcp_pbuf_prealloc+0xf0>)
 8019d52:	480d      	ldr	r0, [pc, #52]	@ (8019d88 <tcp_pbuf_prealloc+0xe8>)
 8019d54:	f006 fdd2 	bl	80208fc <iprintf>
  *oversize = p->len - length;
 8019d58:	693b      	ldr	r3, [r7, #16]
 8019d5a:	895a      	ldrh	r2, [r3, #10]
 8019d5c:	89bb      	ldrh	r3, [r7, #12]
 8019d5e:	1ad3      	subs	r3, r2, r3
 8019d60:	b29a      	uxth	r2, r3
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019d66:	693b      	ldr	r3, [r7, #16]
 8019d68:	89ba      	ldrh	r2, [r7, #12]
 8019d6a:	811a      	strh	r2, [r3, #8]
 8019d6c:	693b      	ldr	r3, [r7, #16]
 8019d6e:	891a      	ldrh	r2, [r3, #8]
 8019d70:	693b      	ldr	r3, [r7, #16]
 8019d72:	815a      	strh	r2, [r3, #10]
  return p;
 8019d74:	693b      	ldr	r3, [r7, #16]
}
 8019d76:	4618      	mov	r0, r3
 8019d78:	3718      	adds	r7, #24
 8019d7a:	46bd      	mov	sp, r7
 8019d7c:	bd80      	pop	{r7, pc}
 8019d7e:	bf00      	nop
 8019d80:	08024378 	.word	0x08024378
 8019d84:	08024430 	.word	0x08024430
 8019d88:	080243cc 	.word	0x080243cc
 8019d8c:	08024454 	.word	0x08024454
 8019d90:	08024474 	.word	0x08024474

08019d94 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b082      	sub	sp, #8
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
 8019d9c:	460b      	mov	r3, r1
 8019d9e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d106      	bne.n	8019db4 <tcp_write_checks+0x20>
 8019da6:	4b33      	ldr	r3, [pc, #204]	@ (8019e74 <tcp_write_checks+0xe0>)
 8019da8:	f240 1233 	movw	r2, #307	@ 0x133
 8019dac:	4932      	ldr	r1, [pc, #200]	@ (8019e78 <tcp_write_checks+0xe4>)
 8019dae:	4833      	ldr	r0, [pc, #204]	@ (8019e7c <tcp_write_checks+0xe8>)
 8019db0:	f006 fda4 	bl	80208fc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	7d1b      	ldrb	r3, [r3, #20]
 8019db8:	2b04      	cmp	r3, #4
 8019dba:	d00e      	beq.n	8019dda <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019dc0:	2b07      	cmp	r3, #7
 8019dc2:	d00a      	beq.n	8019dda <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019dc8:	2b02      	cmp	r3, #2
 8019dca:	d006      	beq.n	8019dda <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019dd0:	2b03      	cmp	r3, #3
 8019dd2:	d002      	beq.n	8019dda <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019dd4:	f06f 030a 	mvn.w	r3, #10
 8019dd8:	e048      	b.n	8019e6c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8019dda:	887b      	ldrh	r3, [r7, #2]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d101      	bne.n	8019de4 <tcp_write_checks+0x50>
    return ERR_OK;
 8019de0:	2300      	movs	r3, #0
 8019de2:	e043      	b.n	8019e6c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019dea:	887a      	ldrh	r2, [r7, #2]
 8019dec:	429a      	cmp	r2, r3
 8019dee:	d909      	bls.n	8019e04 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	8b5b      	ldrh	r3, [r3, #26]
 8019df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019df8:	b29a      	uxth	r2, r3
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019dfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019e02:	e033      	b.n	8019e6c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019e0a:	2b08      	cmp	r3, #8
 8019e0c:	d909      	bls.n	8019e22 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	8b5b      	ldrh	r3, [r3, #26]
 8019e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019e16:	b29a      	uxth	r2, r3
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019e1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019e20:	e024      	b.n	8019e6c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d00f      	beq.n	8019e4c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d11a      	bne.n	8019e6a <tcp_write_checks+0xd6>
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d116      	bne.n	8019e6a <tcp_write_checks+0xd6>
 8019e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8019e74 <tcp_write_checks+0xe0>)
 8019e3e:	f240 1255 	movw	r2, #341	@ 0x155
 8019e42:	490f      	ldr	r1, [pc, #60]	@ (8019e80 <tcp_write_checks+0xec>)
 8019e44:	480d      	ldr	r0, [pc, #52]	@ (8019e7c <tcp_write_checks+0xe8>)
 8019e46:	f006 fd59 	bl	80208fc <iprintf>
 8019e4a:	e00e      	b.n	8019e6a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d103      	bne.n	8019e5c <tcp_write_checks+0xc8>
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d006      	beq.n	8019e6a <tcp_write_checks+0xd6>
 8019e5c:	4b05      	ldr	r3, [pc, #20]	@ (8019e74 <tcp_write_checks+0xe0>)
 8019e5e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8019e62:	4908      	ldr	r1, [pc, #32]	@ (8019e84 <tcp_write_checks+0xf0>)
 8019e64:	4805      	ldr	r0, [pc, #20]	@ (8019e7c <tcp_write_checks+0xe8>)
 8019e66:	f006 fd49 	bl	80208fc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019e6a:	2300      	movs	r3, #0
}
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	3708      	adds	r7, #8
 8019e70:	46bd      	mov	sp, r7
 8019e72:	bd80      	pop	{r7, pc}
 8019e74:	08024378 	.word	0x08024378
 8019e78:	08024488 	.word	0x08024488
 8019e7c:	080243cc 	.word	0x080243cc
 8019e80:	080244a8 	.word	0x080244a8
 8019e84:	080244e4 	.word	0x080244e4

08019e88 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019e88:	b590      	push	{r4, r7, lr}
 8019e8a:	b09d      	sub	sp, #116	@ 0x74
 8019e8c:	af04      	add	r7, sp, #16
 8019e8e:	60f8      	str	r0, [r7, #12]
 8019e90:	60b9      	str	r1, [r7, #8]
 8019e92:	4611      	mov	r1, r2
 8019e94:	461a      	mov	r2, r3
 8019e96:	460b      	mov	r3, r1
 8019e98:	80fb      	strh	r3, [r7, #6]
 8019e9a:	4613      	mov	r3, r2
 8019e9c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	643b      	str	r3, [r7, #64]	@ 0x40
 8019ea6:	2300      	movs	r3, #0
 8019ea8:	657b      	str	r3, [r7, #84]	@ 0x54
 8019eaa:	2300      	movs	r3, #0
 8019eac:	653b      	str	r3, [r7, #80]	@ 0x50
 8019eae:	2300      	movs	r3, #0
 8019eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8019eb2:	2300      	movs	r3, #0
 8019eb4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019eb8:	2300      	movs	r3, #0
 8019eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8019ec8:	2300      	movs	r3, #0
 8019eca:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019ece:	2300      	movs	r3, #0
 8019ed0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d109      	bne.n	8019eee <tcp_write+0x66>
 8019eda:	4b9c      	ldr	r3, [pc, #624]	@ (801a14c <tcp_write+0x2c4>)
 8019edc:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8019ee0:	499b      	ldr	r1, [pc, #620]	@ (801a150 <tcp_write+0x2c8>)
 8019ee2:	489c      	ldr	r0, [pc, #624]	@ (801a154 <tcp_write+0x2cc>)
 8019ee4:	f006 fd0a 	bl	80208fc <iprintf>
 8019ee8:	f06f 030f 	mvn.w	r3, #15
 8019eec:	e379      	b.n	801a5e2 <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019ef4:	085b      	lsrs	r3, r3, #1
 8019ef6:	b29a      	uxth	r2, r3
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019efc:	4293      	cmp	r3, r2
 8019efe:	bf28      	it	cs
 8019f00:	4613      	movcs	r3, r2
 8019f02:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8019f04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d102      	bne.n	8019f10 <tcp_write+0x88>
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019f0e:	e000      	b.n	8019f12 <tcp_write+0x8a>
 8019f10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019f12:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019f14:	68bb      	ldr	r3, [r7, #8]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d109      	bne.n	8019f2e <tcp_write+0xa6>
 8019f1a:	4b8c      	ldr	r3, [pc, #560]	@ (801a14c <tcp_write+0x2c4>)
 8019f1c:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8019f20:	498d      	ldr	r1, [pc, #564]	@ (801a158 <tcp_write+0x2d0>)
 8019f22:	488c      	ldr	r0, [pc, #560]	@ (801a154 <tcp_write+0x2cc>)
 8019f24:	f006 fcea 	bl	80208fc <iprintf>
 8019f28:	f06f 030f 	mvn.w	r3, #15
 8019f2c:	e359      	b.n	801a5e2 <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019f2e:	88fb      	ldrh	r3, [r7, #6]
 8019f30:	4619      	mov	r1, r3
 8019f32:	68f8      	ldr	r0, [r7, #12]
 8019f34:	f7ff ff2e 	bl	8019d94 <tcp_write_checks>
 8019f38:	4603      	mov	r3, r0
 8019f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8019f3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d002      	beq.n	8019f4c <tcp_write+0xc4>
    return err;
 8019f46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8019f4a:	e34a      	b.n	801a5e2 <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019f52:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019f56:	2300      	movs	r3, #0
 8019f58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	f000 8127 	beq.w	801a1b4 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8019f6c:	e002      	b.n	8019f74 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 8019f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d1f8      	bne.n	8019f6e <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019f7e:	7b1b      	ldrb	r3, [r3, #12]
 8019f80:	009b      	lsls	r3, r3, #2
 8019f82:	b29b      	uxth	r3, r3
 8019f84:	f003 0304 	and.w	r3, r3, #4
 8019f88:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019f8a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8019f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019f8e:	891b      	ldrh	r3, [r3, #8]
 8019f90:	4619      	mov	r1, r3
 8019f92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019f94:	440b      	add	r3, r1
 8019f96:	429a      	cmp	r2, r3
 8019f98:	da06      	bge.n	8019fa8 <tcp_write+0x120>
 8019f9a:	4b6c      	ldr	r3, [pc, #432]	@ (801a14c <tcp_write+0x2c4>)
 8019f9c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8019fa0:	496e      	ldr	r1, [pc, #440]	@ (801a15c <tcp_write+0x2d4>)
 8019fa2:	486c      	ldr	r0, [pc, #432]	@ (801a154 <tcp_write+0x2cc>)
 8019fa4:	f006 fcaa 	bl	80208fc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019faa:	891a      	ldrh	r2, [r3, #8]
 8019fac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019fae:	4413      	add	r3, r2
 8019fb0:	b29b      	uxth	r3, r3
 8019fb2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8019fb4:	1ad3      	subs	r3, r2, r3
 8019fb6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 8019fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019fc2:	895b      	ldrh	r3, [r3, #10]
 8019fc4:	429a      	cmp	r2, r3
 8019fc6:	d006      	beq.n	8019fd6 <tcp_write+0x14e>
 8019fc8:	4b60      	ldr	r3, [pc, #384]	@ (801a14c <tcp_write+0x2c4>)
 8019fca:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8019fce:	4964      	ldr	r1, [pc, #400]	@ (801a160 <tcp_write+0x2d8>)
 8019fd0:	4860      	ldr	r0, [pc, #384]	@ (801a154 <tcp_write+0x2cc>)
 8019fd2:	f006 fc93 	bl	80208fc <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8019fd6:	68fb      	ldr	r3, [r7, #12]
 8019fd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019fdc:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8019fde:	8afb      	ldrh	r3, [r7, #22]
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d02e      	beq.n	801a042 <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019fe4:	8afb      	ldrh	r3, [r7, #22]
 8019fe6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8019fea:	429a      	cmp	r2, r3
 8019fec:	d206      	bcs.n	8019ffc <tcp_write+0x174>
 8019fee:	4b57      	ldr	r3, [pc, #348]	@ (801a14c <tcp_write+0x2c4>)
 8019ff0:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8019ff4:	495b      	ldr	r1, [pc, #364]	@ (801a164 <tcp_write+0x2dc>)
 8019ff6:	4857      	ldr	r0, [pc, #348]	@ (801a154 <tcp_write+0x2cc>)
 8019ff8:	f006 fc80 	bl	80208fc <iprintf>
      seg = last_unsent;
 8019ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019ffe:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a000:	8afb      	ldrh	r3, [r7, #22]
 801a002:	88fa      	ldrh	r2, [r7, #6]
 801a004:	4293      	cmp	r3, r2
 801a006:	bf28      	it	cs
 801a008:	4613      	movcs	r3, r2
 801a00a:	b29b      	uxth	r3, r3
 801a00c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a010:	4293      	cmp	r3, r2
 801a012:	bf28      	it	cs
 801a014:	4613      	movcs	r3, r2
 801a016:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 801a01a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a01e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a022:	4413      	add	r3, r2
 801a024:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 801a028:	8afa      	ldrh	r2, [r7, #22]
 801a02a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a02e:	1ad3      	subs	r3, r2, r3
 801a030:	b29b      	uxth	r3, r3
 801a032:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 801a034:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a038:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a03c:	1ad3      	subs	r3, r2, r3
 801a03e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a042:	8afb      	ldrh	r3, [r7, #22]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d00b      	beq.n	801a060 <tcp_write+0x1d8>
 801a048:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a04c:	88fb      	ldrh	r3, [r7, #6]
 801a04e:	429a      	cmp	r2, r3
 801a050:	d006      	beq.n	801a060 <tcp_write+0x1d8>
 801a052:	4b3e      	ldr	r3, [pc, #248]	@ (801a14c <tcp_write+0x2c4>)
 801a054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a058:	4943      	ldr	r1, [pc, #268]	@ (801a168 <tcp_write+0x2e0>)
 801a05a:	483e      	ldr	r0, [pc, #248]	@ (801a154 <tcp_write+0x2cc>)
 801a05c:	f006 fc4e 	bl	80208fc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a060:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a064:	88fb      	ldrh	r3, [r7, #6]
 801a066:	429a      	cmp	r2, r3
 801a068:	f080 8172 	bcs.w	801a350 <tcp_write+0x4c8>
 801a06c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801a070:	2b00      	cmp	r3, #0
 801a072:	f000 816d 	beq.w	801a350 <tcp_write+0x4c8>
 801a076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a078:	891b      	ldrh	r3, [r3, #8]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	f000 8168 	beq.w	801a350 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a080:	88fa      	ldrh	r2, [r7, #6]
 801a082:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a086:	1ad2      	subs	r2, r2, r3
 801a088:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801a08c:	4293      	cmp	r3, r2
 801a08e:	bfa8      	it	ge
 801a090:	4613      	movge	r3, r2
 801a092:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 801a094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a096:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a098:	797b      	ldrb	r3, [r7, #5]
 801a09a:	f003 0301 	and.w	r3, r3, #1
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d02b      	beq.n	801a0fa <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a0a2:	f107 0016 	add.w	r0, r7, #22
 801a0a6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a0aa:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 801a0ac:	2301      	movs	r3, #1
 801a0ae:	9302      	str	r3, [sp, #8]
 801a0b0:	797b      	ldrb	r3, [r7, #5]
 801a0b2:	9301      	str	r3, [sp, #4]
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	9300      	str	r3, [sp, #0]
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	2000      	movs	r0, #0
 801a0bc:	f7ff fdf0 	bl	8019ca0 <tcp_pbuf_prealloc>
 801a0c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801a0c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	f000 825a 	beq.w	801a57e <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 801a0ca:	8afb      	ldrh	r3, [r7, #22]
 801a0cc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a0d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a0d2:	6858      	ldr	r0, [r3, #4]
 801a0d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a0d8:	68ba      	ldr	r2, [r7, #8]
 801a0da:	4413      	add	r3, r2
 801a0dc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801a0de:	4619      	mov	r1, r3
 801a0e0:	f006 fde1 	bl	8020ca6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a0e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a0e6:	f7fb f925 	bl	8015334 <pbuf_clen>
 801a0ea:	4603      	mov	r3, r0
 801a0ec:	461a      	mov	r2, r3
 801a0ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a0f2:	4413      	add	r3, r2
 801a0f4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801a0f8:	e055      	b.n	801a1a6 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a0fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a0fc:	685b      	ldr	r3, [r3, #4]
 801a0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a100:	e002      	b.n	801a108 <tcp_write+0x280>
 801a102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d1f8      	bne.n	801a102 <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a112:	7b1b      	ldrb	r3, [r3, #12]
 801a114:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d129      	bne.n	801a170 <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a11e:	685b      	ldr	r3, [r3, #4]
 801a120:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a122:	8952      	ldrh	r2, [r2, #10]
 801a124:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a126:	68ba      	ldr	r2, [r7, #8]
 801a128:	429a      	cmp	r2, r3
 801a12a:	d121      	bne.n	801a170 <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a12c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a130:	2b00      	cmp	r3, #0
 801a132:	d006      	beq.n	801a142 <tcp_write+0x2ba>
 801a134:	4b05      	ldr	r3, [pc, #20]	@ (801a14c <tcp_write+0x2c4>)
 801a136:	f240 2231 	movw	r2, #561	@ 0x231
 801a13a:	490c      	ldr	r1, [pc, #48]	@ (801a16c <tcp_write+0x2e4>)
 801a13c:	4805      	ldr	r0, [pc, #20]	@ (801a154 <tcp_write+0x2cc>)
 801a13e:	f006 fbdd 	bl	80208fc <iprintf>
          extendlen = seglen;
 801a142:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a144:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 801a148:	e02d      	b.n	801a1a6 <tcp_write+0x31e>
 801a14a:	bf00      	nop
 801a14c:	08024378 	.word	0x08024378
 801a150:	08024518 	.word	0x08024518
 801a154:	080243cc 	.word	0x080243cc
 801a158:	08024530 	.word	0x08024530
 801a15c:	08024564 	.word	0x08024564
 801a160:	0802457c 	.word	0x0802457c
 801a164:	080245ac 	.word	0x080245ac
 801a168:	080245cc 	.word	0x080245cc
 801a16c:	080245ec 	.word	0x080245ec
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a170:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a172:	2201      	movs	r2, #1
 801a174:	4619      	mov	r1, r3
 801a176:	2000      	movs	r0, #0
 801a178:	f7fa fd0a 	bl	8014b90 <pbuf_alloc>
 801a17c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801a17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a180:	2b00      	cmp	r3, #0
 801a182:	f000 81fe 	beq.w	801a582 <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a186:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a18a:	68ba      	ldr	r2, [r7, #8]
 801a18c:	441a      	add	r2, r3
 801a18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a190:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a192:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a194:	f7fb f8ce 	bl	8015334 <pbuf_clen>
 801a198:	4603      	mov	r3, r0
 801a19a:	461a      	mov	r2, r3
 801a19c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a1a0:	4413      	add	r3, r2
 801a1a2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a1a6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a1aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a1ac:	4413      	add	r3, r2
 801a1ae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 801a1b2:	e0cd      	b.n	801a350 <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	f000 80c8 	beq.w	801a350 <tcp_write+0x4c8>
 801a1c0:	4b72      	ldr	r3, [pc, #456]	@ (801a38c <tcp_write+0x504>)
 801a1c2:	f240 224a 	movw	r2, #586	@ 0x24a
 801a1c6:	4972      	ldr	r1, [pc, #456]	@ (801a390 <tcp_write+0x508>)
 801a1c8:	4872      	ldr	r0, [pc, #456]	@ (801a394 <tcp_write+0x50c>)
 801a1ca:	f006 fb97 	bl	80208fc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a1ce:	e0bf      	b.n	801a350 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 801a1d0:	88fa      	ldrh	r2, [r7, #6]
 801a1d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a1d6:	1ad3      	subs	r3, r2, r3
 801a1d8:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 801a1da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a1de:	b29b      	uxth	r3, r3
 801a1e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a1e2:	1ad3      	subs	r3, r2, r3
 801a1e4:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a1e6:	8bfa      	ldrh	r2, [r7, #30]
 801a1e8:	8c3b      	ldrh	r3, [r7, #32]
 801a1ea:	4293      	cmp	r3, r2
 801a1ec:	bf28      	it	cs
 801a1ee:	4613      	movcs	r3, r2
 801a1f0:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a1f2:	797b      	ldrb	r3, [r7, #5]
 801a1f4:	f003 0301 	and.w	r3, r3, #1
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d036      	beq.n	801a26a <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a1fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a200:	b29a      	uxth	r2, r3
 801a202:	8bbb      	ldrh	r3, [r7, #28]
 801a204:	4413      	add	r3, r2
 801a206:	b299      	uxth	r1, r3
 801a208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	bf0c      	ite	eq
 801a20e:	2301      	moveq	r3, #1
 801a210:	2300      	movne	r3, #0
 801a212:	b2db      	uxtb	r3, r3
 801a214:	f107 0016 	add.w	r0, r7, #22
 801a218:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a21a:	9302      	str	r3, [sp, #8]
 801a21c:	797b      	ldrb	r3, [r7, #5]
 801a21e:	9301      	str	r3, [sp, #4]
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	9300      	str	r3, [sp, #0]
 801a224:	4603      	mov	r3, r0
 801a226:	2036      	movs	r0, #54	@ 0x36
 801a228:	f7ff fd3a 	bl	8019ca0 <tcp_pbuf_prealloc>
 801a22c:	6378      	str	r0, [r7, #52]	@ 0x34
 801a22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a230:	2b00      	cmp	r3, #0
 801a232:	f000 81a8 	beq.w	801a586 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a238:	895b      	ldrh	r3, [r3, #10]
 801a23a:	8bba      	ldrh	r2, [r7, #28]
 801a23c:	429a      	cmp	r2, r3
 801a23e:	d906      	bls.n	801a24e <tcp_write+0x3c6>
 801a240:	4b52      	ldr	r3, [pc, #328]	@ (801a38c <tcp_write+0x504>)
 801a242:	f240 2266 	movw	r2, #614	@ 0x266
 801a246:	4954      	ldr	r1, [pc, #336]	@ (801a398 <tcp_write+0x510>)
 801a248:	4852      	ldr	r0, [pc, #328]	@ (801a394 <tcp_write+0x50c>)
 801a24a:	f006 fb57 	bl	80208fc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a24e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a250:	685a      	ldr	r2, [r3, #4]
 801a252:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a256:	18d0      	adds	r0, r2, r3
 801a258:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a25c:	68ba      	ldr	r2, [r7, #8]
 801a25e:	4413      	add	r3, r2
 801a260:	8bba      	ldrh	r2, [r7, #28]
 801a262:	4619      	mov	r1, r3
 801a264:	f006 fd1f 	bl	8020ca6 <memcpy>
 801a268:	e02f      	b.n	801a2ca <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a26a:	8afb      	ldrh	r3, [r7, #22]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d006      	beq.n	801a27e <tcp_write+0x3f6>
 801a270:	4b46      	ldr	r3, [pc, #280]	@ (801a38c <tcp_write+0x504>)
 801a272:	f240 2271 	movw	r2, #625	@ 0x271
 801a276:	4949      	ldr	r1, [pc, #292]	@ (801a39c <tcp_write+0x514>)
 801a278:	4846      	ldr	r0, [pc, #280]	@ (801a394 <tcp_write+0x50c>)
 801a27a:	f006 fb3f 	bl	80208fc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a27e:	8bbb      	ldrh	r3, [r7, #28]
 801a280:	2201      	movs	r2, #1
 801a282:	4619      	mov	r1, r3
 801a284:	2036      	movs	r0, #54	@ 0x36
 801a286:	f7fa fc83 	bl	8014b90 <pbuf_alloc>
 801a28a:	61b8      	str	r0, [r7, #24]
 801a28c:	69bb      	ldr	r3, [r7, #24]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	f000 817b 	beq.w	801a58a <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a294:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a298:	68ba      	ldr	r2, [r7, #8]
 801a29a:	441a      	add	r2, r3
 801a29c:	69bb      	ldr	r3, [r7, #24]
 801a29e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a2a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a2a4:	b29b      	uxth	r3, r3
 801a2a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a2aa:	4619      	mov	r1, r3
 801a2ac:	2036      	movs	r0, #54	@ 0x36
 801a2ae:	f7fa fc6f 	bl	8014b90 <pbuf_alloc>
 801a2b2:	6378      	str	r0, [r7, #52]	@ 0x34
 801a2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d103      	bne.n	801a2c2 <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a2ba:	69b8      	ldr	r0, [r7, #24]
 801a2bc:	f7fa ff94 	bl	80151e8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a2c0:	e166      	b.n	801a590 <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a2c2:	69b9      	ldr	r1, [r7, #24]
 801a2c4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a2c6:	f7fb f875 	bl	80153b4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a2ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a2cc:	f7fb f832 	bl	8015334 <pbuf_clen>
 801a2d0:	4603      	mov	r3, r0
 801a2d2:	461a      	mov	r2, r3
 801a2d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a2d8:	4413      	add	r3, r2
 801a2da:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a2de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a2e2:	2b09      	cmp	r3, #9
 801a2e4:	d903      	bls.n	801a2ee <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a2e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a2e8:	f7fa ff7e 	bl	80151e8 <pbuf_free>
      goto memerr;
 801a2ec:	e150      	b.n	801a590 <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801a2f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a2f6:	441a      	add	r2, r3
 801a2f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801a2fc:	9300      	str	r3, [sp, #0]
 801a2fe:	4613      	mov	r3, r2
 801a300:	2200      	movs	r2, #0
 801a302:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a304:	68f8      	ldr	r0, [r7, #12]
 801a306:	f7ff fc2b 	bl	8019b60 <tcp_create_segment>
 801a30a:	6578      	str	r0, [r7, #84]	@ 0x54
 801a30c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a30e:	2b00      	cmp	r3, #0
 801a310:	f000 813d 	beq.w	801a58e <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 801a314:	8afa      	ldrh	r2, [r7, #22]
 801a316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a318:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a31a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d102      	bne.n	801a326 <tcp_write+0x49e>
      queue = seg;
 801a320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a324:	e00c      	b.n	801a340 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d106      	bne.n	801a33a <tcp_write+0x4b2>
 801a32c:	4b17      	ldr	r3, [pc, #92]	@ (801a38c <tcp_write+0x504>)
 801a32e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a332:	491b      	ldr	r1, [pc, #108]	@ (801a3a0 <tcp_write+0x518>)
 801a334:	4817      	ldr	r0, [pc, #92]	@ (801a394 <tcp_write+0x50c>)
 801a336:	f006 fae1 	bl	80208fc <iprintf>
      prev_seg->next = seg;
 801a33a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a33c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a33e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801a340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a342:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801a344:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a348:	8bbb      	ldrh	r3, [r7, #28]
 801a34a:	4413      	add	r3, r2
 801a34c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 801a350:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a354:	88fb      	ldrh	r3, [r7, #6]
 801a356:	429a      	cmp	r2, r3
 801a358:	f4ff af3a 	bcc.w	801a1d0 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 801a35c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d00b      	beq.n	801a37a <tcp_write+0x4f2>
 801a362:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801a366:	2b00      	cmp	r3, #0
 801a368:	d007      	beq.n	801a37a <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 801a36a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a36c:	895a      	ldrh	r2, [r3, #10]
 801a36e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801a372:	4413      	add	r3, r2
 801a374:	b29a      	uxth	r2, r3
 801a376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a378:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801a37a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d052      	beq.n	801a428 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801a382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a384:	685b      	ldr	r3, [r3, #4]
 801a386:	633b      	str	r3, [r7, #48]	@ 0x30
 801a388:	e02e      	b.n	801a3e8 <tcp_write+0x560>
 801a38a:	bf00      	nop
 801a38c:	08024378 	.word	0x08024378
 801a390:	08024618 	.word	0x08024618
 801a394:	080243cc 	.word	0x080243cc
 801a398:	08024648 	.word	0x08024648
 801a39c:	08024688 	.word	0x08024688
 801a3a0:	08024698 	.word	0x08024698
      p->tot_len += oversize_used;
 801a3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3a6:	891a      	ldrh	r2, [r3, #8]
 801a3a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a3ac:	4413      	add	r3, r2
 801a3ae:	b29a      	uxth	r2, r3
 801a3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3b2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d112      	bne.n	801a3e2 <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3be:	685b      	ldr	r3, [r3, #4]
 801a3c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a3c2:	8952      	ldrh	r2, [r2, #10]
 801a3c4:	4413      	add	r3, r2
 801a3c6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801a3ca:	68b9      	ldr	r1, [r7, #8]
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	f006 fc6a 	bl	8020ca6 <memcpy>
        p->len += oversize_used;
 801a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3d4:	895a      	ldrh	r2, [r3, #10]
 801a3d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a3da:	4413      	add	r3, r2
 801a3dc:	b29a      	uxth	r2, r3
 801a3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3e0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	633b      	str	r3, [r7, #48]	@ 0x30
 801a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d1da      	bne.n	801a3a4 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 801a3ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a3f0:	891a      	ldrh	r2, [r3, #8]
 801a3f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a3f6:	4413      	add	r3, r2
 801a3f8:	b29a      	uxth	r2, r3
 801a3fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a3fc:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801a3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a400:	895b      	ldrh	r3, [r3, #10]
 801a402:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801a406:	429a      	cmp	r2, r3
 801a408:	d906      	bls.n	801a418 <tcp_write+0x590>
 801a40a:	4b78      	ldr	r3, [pc, #480]	@ (801a5ec <tcp_write+0x764>)
 801a40c:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801a410:	4977      	ldr	r1, [pc, #476]	@ (801a5f0 <tcp_write+0x768>)
 801a412:	4878      	ldr	r0, [pc, #480]	@ (801a5f4 <tcp_write+0x76c>)
 801a414:	f006 fa72 	bl	80208fc <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 801a418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a41a:	895a      	ldrh	r2, [r3, #10]
 801a41c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a420:	1ad3      	subs	r3, r2, r3
 801a422:	b29a      	uxth	r2, r3
 801a424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a426:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a428:	8afa      	ldrh	r2, [r7, #22]
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a432:	2b00      	cmp	r3, #0
 801a434:	d018      	beq.n	801a468 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d106      	bne.n	801a44a <tcp_write+0x5c2>
 801a43c:	4b6b      	ldr	r3, [pc, #428]	@ (801a5ec <tcp_write+0x764>)
 801a43e:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801a442:	496d      	ldr	r1, [pc, #436]	@ (801a5f8 <tcp_write+0x770>)
 801a444:	486b      	ldr	r0, [pc, #428]	@ (801a5f4 <tcp_write+0x76c>)
 801a446:	f006 fa59 	bl	80208fc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a44a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a44c:	685b      	ldr	r3, [r3, #4]
 801a44e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a450:	4618      	mov	r0, r3
 801a452:	f7fa ffaf 	bl	80153b4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a458:	891a      	ldrh	r2, [r3, #8]
 801a45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a45c:	891b      	ldrh	r3, [r3, #8]
 801a45e:	4413      	add	r3, r2
 801a460:	b29a      	uxth	r2, r3
 801a462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a464:	811a      	strh	r2, [r3, #8]
 801a466:	e03c      	b.n	801a4e2 <tcp_write+0x65a>
  } else if (extendlen > 0) {
 801a468:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d038      	beq.n	801a4e2 <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a472:	2b00      	cmp	r3, #0
 801a474:	d003      	beq.n	801a47e <tcp_write+0x5f6>
 801a476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a478:	685b      	ldr	r3, [r3, #4]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d106      	bne.n	801a48c <tcp_write+0x604>
 801a47e:	4b5b      	ldr	r3, [pc, #364]	@ (801a5ec <tcp_write+0x764>)
 801a480:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801a484:	495d      	ldr	r1, [pc, #372]	@ (801a5fc <tcp_write+0x774>)
 801a486:	485b      	ldr	r0, [pc, #364]	@ (801a5f4 <tcp_write+0x76c>)
 801a488:	f006 fa38 	bl	80208fc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a48c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a48e:	685b      	ldr	r3, [r3, #4]
 801a490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a492:	e00a      	b.n	801a4aa <tcp_write+0x622>
      p->tot_len += extendlen;
 801a494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a496:	891a      	ldrh	r2, [r3, #8]
 801a498:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a49c:	4413      	add	r3, r2
 801a49e:	b29a      	uxth	r2, r3
 801a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d1f0      	bne.n	801a494 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 801a4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4b4:	891a      	ldrh	r2, [r3, #8]
 801a4b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a4ba:	4413      	add	r3, r2
 801a4bc:	b29a      	uxth	r2, r3
 801a4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4c0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4c4:	895a      	ldrh	r2, [r3, #10]
 801a4c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a4ca:	4413      	add	r3, r2
 801a4cc:	b29a      	uxth	r2, r3
 801a4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4d0:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a4d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4d4:	891a      	ldrh	r2, [r3, #8]
 801a4d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a4da:	4413      	add	r3, r2
 801a4dc:	b29a      	uxth	r2, r3
 801a4de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4e0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a4e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d103      	bne.n	801a4f0 <tcp_write+0x668>
    pcb->unsent = queue;
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a4ec:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a4ee:	e002      	b.n	801a4f6 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 801a4f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a4f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801a4fa:	88fb      	ldrh	r3, [r7, #6]
 801a4fc:	441a      	add	r2, r3
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801a508:	88fb      	ldrh	r3, [r7, #6]
 801a50a:	1ad3      	subs	r3, r2, r3
 801a50c:	b29a      	uxth	r2, r3
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 801a51a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a524:	2b00      	cmp	r3, #0
 801a526:	d00e      	beq.n	801a546 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d10a      	bne.n	801a546 <tcp_write+0x6be>
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a534:	2b00      	cmp	r3, #0
 801a536:	d106      	bne.n	801a546 <tcp_write+0x6be>
 801a538:	4b2c      	ldr	r3, [pc, #176]	@ (801a5ec <tcp_write+0x764>)
 801a53a:	f240 3212 	movw	r2, #786	@ 0x312
 801a53e:	4930      	ldr	r1, [pc, #192]	@ (801a600 <tcp_write+0x778>)
 801a540:	482c      	ldr	r0, [pc, #176]	@ (801a5f4 <tcp_write+0x76c>)
 801a542:	f006 f9db 	bl	80208fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d016      	beq.n	801a57a <tcp_write+0x6f2>
 801a54c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a54e:	691b      	ldr	r3, [r3, #16]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d012      	beq.n	801a57a <tcp_write+0x6f2>
 801a554:	797b      	ldrb	r3, [r7, #5]
 801a556:	f003 0302 	and.w	r3, r3, #2
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d10d      	bne.n	801a57a <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a55e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a560:	691b      	ldr	r3, [r3, #16]
 801a562:	899b      	ldrh	r3, [r3, #12]
 801a564:	b29c      	uxth	r4, r3
 801a566:	2008      	movs	r0, #8
 801a568:	f7f9 f8e4 	bl	8013734 <lwip_htons>
 801a56c:	4603      	mov	r3, r0
 801a56e:	461a      	mov	r2, r3
 801a570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a572:	691b      	ldr	r3, [r3, #16]
 801a574:	4322      	orrs	r2, r4
 801a576:	b292      	uxth	r2, r2
 801a578:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a57a:	2300      	movs	r3, #0
 801a57c:	e031      	b.n	801a5e2 <tcp_write+0x75a>
          goto memerr;
 801a57e:	bf00      	nop
 801a580:	e006      	b.n	801a590 <tcp_write+0x708>
            goto memerr;
 801a582:	bf00      	nop
 801a584:	e004      	b.n	801a590 <tcp_write+0x708>
        goto memerr;
 801a586:	bf00      	nop
 801a588:	e002      	b.n	801a590 <tcp_write+0x708>
        goto memerr;
 801a58a:	bf00      	nop
 801a58c:	e000      	b.n	801a590 <tcp_write+0x708>
      goto memerr;
 801a58e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	8b5b      	ldrh	r3, [r3, #26]
 801a594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a598:	b29a      	uxth	r2, r3
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801a59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d002      	beq.n	801a5aa <tcp_write+0x722>
    pbuf_free(concat_p);
 801a5a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a5a6:	f7fa fe1f 	bl	80151e8 <pbuf_free>
  }
  if (queue != NULL) {
 801a5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d002      	beq.n	801a5b6 <tcp_write+0x72e>
    tcp_segs_free(queue);
 801a5b0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a5b2:	f7fc fb13 	bl	8016bdc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d00e      	beq.n	801a5de <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d10a      	bne.n	801a5de <tcp_write+0x756>
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d106      	bne.n	801a5de <tcp_write+0x756>
 801a5d0:	4b06      	ldr	r3, [pc, #24]	@ (801a5ec <tcp_write+0x764>)
 801a5d2:	f240 3227 	movw	r2, #807	@ 0x327
 801a5d6:	490a      	ldr	r1, [pc, #40]	@ (801a600 <tcp_write+0x778>)
 801a5d8:	4806      	ldr	r0, [pc, #24]	@ (801a5f4 <tcp_write+0x76c>)
 801a5da:	f006 f98f 	bl	80208fc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a5de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a5e2:	4618      	mov	r0, r3
 801a5e4:	3764      	adds	r7, #100	@ 0x64
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	bd90      	pop	{r4, r7, pc}
 801a5ea:	bf00      	nop
 801a5ec:	08024378 	.word	0x08024378
 801a5f0:	080246ac 	.word	0x080246ac
 801a5f4:	080243cc 	.word	0x080243cc
 801a5f8:	080246d8 	.word	0x080246d8
 801a5fc:	08024710 	.word	0x08024710
 801a600:	08024748 	.word	0x08024748

0801a604 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a604:	b590      	push	{r4, r7, lr}
 801a606:	b08b      	sub	sp, #44	@ 0x2c
 801a608:	af02      	add	r7, sp, #8
 801a60a:	6078      	str	r0, [r7, #4]
 801a60c:	460b      	mov	r3, r1
 801a60e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a610:	2300      	movs	r3, #0
 801a612:	61bb      	str	r3, [r7, #24]
 801a614:	2300      	movs	r3, #0
 801a616:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a618:	2300      	movs	r3, #0
 801a61a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d106      	bne.n	801a630 <tcp_split_unsent_seg+0x2c>
 801a622:	4b97      	ldr	r3, [pc, #604]	@ (801a880 <tcp_split_unsent_seg+0x27c>)
 801a624:	f240 324b 	movw	r2, #843	@ 0x34b
 801a628:	4996      	ldr	r1, [pc, #600]	@ (801a884 <tcp_split_unsent_seg+0x280>)
 801a62a:	4897      	ldr	r0, [pc, #604]	@ (801a888 <tcp_split_unsent_seg+0x284>)
 801a62c:	f006 f966 	bl	80208fc <iprintf>

  useg = pcb->unsent;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a634:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a636:	697b      	ldr	r3, [r7, #20]
 801a638:	2b00      	cmp	r3, #0
 801a63a:	d102      	bne.n	801a642 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a63c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a640:	e119      	b.n	801a876 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 801a642:	887b      	ldrh	r3, [r7, #2]
 801a644:	2b00      	cmp	r3, #0
 801a646:	d109      	bne.n	801a65c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a648:	4b8d      	ldr	r3, [pc, #564]	@ (801a880 <tcp_split_unsent_seg+0x27c>)
 801a64a:	f240 3253 	movw	r2, #851	@ 0x353
 801a64e:	498f      	ldr	r1, [pc, #572]	@ (801a88c <tcp_split_unsent_seg+0x288>)
 801a650:	488d      	ldr	r0, [pc, #564]	@ (801a888 <tcp_split_unsent_seg+0x284>)
 801a652:	f006 f953 	bl	80208fc <iprintf>
    return ERR_VAL;
 801a656:	f06f 0305 	mvn.w	r3, #5
 801a65a:	e10c      	b.n	801a876 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 801a65c:	697b      	ldr	r3, [r7, #20]
 801a65e:	891b      	ldrh	r3, [r3, #8]
 801a660:	887a      	ldrh	r2, [r7, #2]
 801a662:	429a      	cmp	r2, r3
 801a664:	d301      	bcc.n	801a66a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a666:	2300      	movs	r3, #0
 801a668:	e105      	b.n	801a876 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a66e:	887a      	ldrh	r2, [r7, #2]
 801a670:	429a      	cmp	r2, r3
 801a672:	d906      	bls.n	801a682 <tcp_split_unsent_seg+0x7e>
 801a674:	4b82      	ldr	r3, [pc, #520]	@ (801a880 <tcp_split_unsent_seg+0x27c>)
 801a676:	f240 325b 	movw	r2, #859	@ 0x35b
 801a67a:	4985      	ldr	r1, [pc, #532]	@ (801a890 <tcp_split_unsent_seg+0x28c>)
 801a67c:	4882      	ldr	r0, [pc, #520]	@ (801a888 <tcp_split_unsent_seg+0x284>)
 801a67e:	f006 f93d 	bl	80208fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a682:	697b      	ldr	r3, [r7, #20]
 801a684:	891b      	ldrh	r3, [r3, #8]
 801a686:	2b00      	cmp	r3, #0
 801a688:	d106      	bne.n	801a698 <tcp_split_unsent_seg+0x94>
 801a68a:	4b7d      	ldr	r3, [pc, #500]	@ (801a880 <tcp_split_unsent_seg+0x27c>)
 801a68c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801a690:	4980      	ldr	r1, [pc, #512]	@ (801a894 <tcp_split_unsent_seg+0x290>)
 801a692:	487d      	ldr	r0, [pc, #500]	@ (801a888 <tcp_split_unsent_seg+0x284>)
 801a694:	f006 f932 	bl	80208fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a698:	697b      	ldr	r3, [r7, #20]
 801a69a:	7b1b      	ldrb	r3, [r3, #12]
 801a69c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a69e:	7bfb      	ldrb	r3, [r7, #15]
 801a6a0:	009b      	lsls	r3, r3, #2
 801a6a2:	b2db      	uxtb	r3, r3
 801a6a4:	f003 0304 	and.w	r3, r3, #4
 801a6a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a6aa:	697b      	ldr	r3, [r7, #20]
 801a6ac:	891a      	ldrh	r2, [r3, #8]
 801a6ae:	887b      	ldrh	r3, [r7, #2]
 801a6b0:	1ad3      	subs	r3, r2, r3
 801a6b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a6b4:	7bbb      	ldrb	r3, [r7, #14]
 801a6b6:	b29a      	uxth	r2, r3
 801a6b8:	89bb      	ldrh	r3, [r7, #12]
 801a6ba:	4413      	add	r3, r2
 801a6bc:	b29b      	uxth	r3, r3
 801a6be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a6c2:	4619      	mov	r1, r3
 801a6c4:	2036      	movs	r0, #54	@ 0x36
 801a6c6:	f7fa fa63 	bl	8014b90 <pbuf_alloc>
 801a6ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a6cc:	693b      	ldr	r3, [r7, #16]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	f000 80ba 	beq.w	801a848 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a6d4:	697b      	ldr	r3, [r7, #20]
 801a6d6:	685b      	ldr	r3, [r3, #4]
 801a6d8:	891a      	ldrh	r2, [r3, #8]
 801a6da:	697b      	ldr	r3, [r7, #20]
 801a6dc:	891b      	ldrh	r3, [r3, #8]
 801a6de:	1ad3      	subs	r3, r2, r3
 801a6e0:	b29a      	uxth	r2, r3
 801a6e2:	887b      	ldrh	r3, [r7, #2]
 801a6e4:	4413      	add	r3, r2
 801a6e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a6e8:	697b      	ldr	r3, [r7, #20]
 801a6ea:	6858      	ldr	r0, [r3, #4]
 801a6ec:	693b      	ldr	r3, [r7, #16]
 801a6ee:	685a      	ldr	r2, [r3, #4]
 801a6f0:	7bbb      	ldrb	r3, [r7, #14]
 801a6f2:	18d1      	adds	r1, r2, r3
 801a6f4:	897b      	ldrh	r3, [r7, #10]
 801a6f6:	89ba      	ldrh	r2, [r7, #12]
 801a6f8:	f7fa ffa8 	bl	801564c <pbuf_copy_partial>
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	461a      	mov	r2, r3
 801a700:	89bb      	ldrh	r3, [r7, #12]
 801a702:	4293      	cmp	r3, r2
 801a704:	f040 80a2 	bne.w	801a84c <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a708:	697b      	ldr	r3, [r7, #20]
 801a70a:	691b      	ldr	r3, [r3, #16]
 801a70c:	899b      	ldrh	r3, [r3, #12]
 801a70e:	b29b      	uxth	r3, r3
 801a710:	4618      	mov	r0, r3
 801a712:	f7f9 f80f 	bl	8013734 <lwip_htons>
 801a716:	4603      	mov	r3, r0
 801a718:	b2db      	uxtb	r3, r3
 801a71a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a71e:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a720:	2300      	movs	r3, #0
 801a722:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801a724:	7ffb      	ldrb	r3, [r7, #31]
 801a726:	f003 0308 	and.w	r3, r3, #8
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d007      	beq.n	801a73e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a72e:	7ffb      	ldrb	r3, [r7, #31]
 801a730:	f023 0308 	bic.w	r3, r3, #8
 801a734:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801a736:	7fbb      	ldrb	r3, [r7, #30]
 801a738:	f043 0308 	orr.w	r3, r3, #8
 801a73c:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801a73e:	7ffb      	ldrb	r3, [r7, #31]
 801a740:	f003 0301 	and.w	r3, r3, #1
 801a744:	2b00      	cmp	r3, #0
 801a746:	d007      	beq.n	801a758 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a748:	7ffb      	ldrb	r3, [r7, #31]
 801a74a:	f023 0301 	bic.w	r3, r3, #1
 801a74e:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 801a750:	7fbb      	ldrb	r3, [r7, #30]
 801a752:	f043 0301 	orr.w	r3, r3, #1
 801a756:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a758:	697b      	ldr	r3, [r7, #20]
 801a75a:	691b      	ldr	r3, [r3, #16]
 801a75c:	685b      	ldr	r3, [r3, #4]
 801a75e:	4618      	mov	r0, r3
 801a760:	f7f8 fffe 	bl	8013760 <lwip_htonl>
 801a764:	4602      	mov	r2, r0
 801a766:	887b      	ldrh	r3, [r7, #2]
 801a768:	18d1      	adds	r1, r2, r3
 801a76a:	7fba      	ldrb	r2, [r7, #30]
 801a76c:	7bfb      	ldrb	r3, [r7, #15]
 801a76e:	9300      	str	r3, [sp, #0]
 801a770:	460b      	mov	r3, r1
 801a772:	6939      	ldr	r1, [r7, #16]
 801a774:	6878      	ldr	r0, [r7, #4]
 801a776:	f7ff f9f3 	bl	8019b60 <tcp_create_segment>
 801a77a:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801a77c:	69bb      	ldr	r3, [r7, #24]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d066      	beq.n	801a850 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a782:	697b      	ldr	r3, [r7, #20]
 801a784:	685b      	ldr	r3, [r3, #4]
 801a786:	4618      	mov	r0, r3
 801a788:	f7fa fdd4 	bl	8015334 <pbuf_clen>
 801a78c:	4603      	mov	r3, r0
 801a78e:	461a      	mov	r2, r3
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a796:	1a9b      	subs	r3, r3, r2
 801a798:	b29a      	uxth	r2, r3
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a7a0:	697b      	ldr	r3, [r7, #20]
 801a7a2:	6858      	ldr	r0, [r3, #4]
 801a7a4:	697b      	ldr	r3, [r7, #20]
 801a7a6:	685b      	ldr	r3, [r3, #4]
 801a7a8:	891a      	ldrh	r2, [r3, #8]
 801a7aa:	89bb      	ldrh	r3, [r7, #12]
 801a7ac:	1ad3      	subs	r3, r2, r3
 801a7ae:	b29b      	uxth	r3, r3
 801a7b0:	4619      	mov	r1, r3
 801a7b2:	f7fa fb79 	bl	8014ea8 <pbuf_realloc>
  useg->len -= remainder;
 801a7b6:	697b      	ldr	r3, [r7, #20]
 801a7b8:	891a      	ldrh	r2, [r3, #8]
 801a7ba:	89bb      	ldrh	r3, [r7, #12]
 801a7bc:	1ad3      	subs	r3, r2, r3
 801a7be:	b29a      	uxth	r2, r3
 801a7c0:	697b      	ldr	r3, [r7, #20]
 801a7c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a7c4:	697b      	ldr	r3, [r7, #20]
 801a7c6:	691b      	ldr	r3, [r3, #16]
 801a7c8:	899b      	ldrh	r3, [r3, #12]
 801a7ca:	b29c      	uxth	r4, r3
 801a7cc:	7ffb      	ldrb	r3, [r7, #31]
 801a7ce:	b29b      	uxth	r3, r3
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	f7f8 ffaf 	bl	8013734 <lwip_htons>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	461a      	mov	r2, r3
 801a7da:	697b      	ldr	r3, [r7, #20]
 801a7dc:	691b      	ldr	r3, [r3, #16]
 801a7de:	4322      	orrs	r2, r4
 801a7e0:	b292      	uxth	r2, r2
 801a7e2:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801a7e4:	697b      	ldr	r3, [r7, #20]
 801a7e6:	2200      	movs	r2, #0
 801a7e8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a7ea:	697b      	ldr	r3, [r7, #20]
 801a7ec:	685b      	ldr	r3, [r3, #4]
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	f7fa fda0 	bl	8015334 <pbuf_clen>
 801a7f4:	4603      	mov	r3, r0
 801a7f6:	461a      	mov	r2, r3
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a7fe:	4413      	add	r3, r2
 801a800:	b29a      	uxth	r2, r3
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a808:	69bb      	ldr	r3, [r7, #24]
 801a80a:	685b      	ldr	r3, [r3, #4]
 801a80c:	4618      	mov	r0, r3
 801a80e:	f7fa fd91 	bl	8015334 <pbuf_clen>
 801a812:	4603      	mov	r3, r0
 801a814:	461a      	mov	r2, r3
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a81c:	4413      	add	r3, r2
 801a81e:	b29a      	uxth	r2, r3
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a826:	697b      	ldr	r3, [r7, #20]
 801a828:	681a      	ldr	r2, [r3, #0]
 801a82a:	69bb      	ldr	r3, [r7, #24]
 801a82c:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a82e:	697b      	ldr	r3, [r7, #20]
 801a830:	69ba      	ldr	r2, [r7, #24]
 801a832:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a834:	69bb      	ldr	r3, [r7, #24]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d103      	bne.n	801a844 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	2200      	movs	r2, #0
 801a840:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a844:	2300      	movs	r3, #0
 801a846:	e016      	b.n	801a876 <tcp_split_unsent_seg+0x272>
    goto memerr;
 801a848:	bf00      	nop
 801a84a:	e002      	b.n	801a852 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a84c:	bf00      	nop
 801a84e:	e000      	b.n	801a852 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a850:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a852:	69bb      	ldr	r3, [r7, #24]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d006      	beq.n	801a866 <tcp_split_unsent_seg+0x262>
 801a858:	4b09      	ldr	r3, [pc, #36]	@ (801a880 <tcp_split_unsent_seg+0x27c>)
 801a85a:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801a85e:	490e      	ldr	r1, [pc, #56]	@ (801a898 <tcp_split_unsent_seg+0x294>)
 801a860:	4809      	ldr	r0, [pc, #36]	@ (801a888 <tcp_split_unsent_seg+0x284>)
 801a862:	f006 f84b 	bl	80208fc <iprintf>
  if (p != NULL) {
 801a866:	693b      	ldr	r3, [r7, #16]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d002      	beq.n	801a872 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 801a86c:	6938      	ldr	r0, [r7, #16]
 801a86e:	f7fa fcbb 	bl	80151e8 <pbuf_free>
  }

  return ERR_MEM;
 801a872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a876:	4618      	mov	r0, r3
 801a878:	3724      	adds	r7, #36	@ 0x24
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd90      	pop	{r4, r7, pc}
 801a87e:	bf00      	nop
 801a880:	08024378 	.word	0x08024378
 801a884:	08024768 	.word	0x08024768
 801a888:	080243cc 	.word	0x080243cc
 801a88c:	0802478c 	.word	0x0802478c
 801a890:	080247b0 	.word	0x080247b0
 801a894:	080247c0 	.word	0x080247c0
 801a898:	080247d0 	.word	0x080247d0

0801a89c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a89c:	b590      	push	{r4, r7, lr}
 801a89e:	b085      	sub	sp, #20
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d106      	bne.n	801a8b8 <tcp_send_fin+0x1c>
 801a8aa:	4b21      	ldr	r3, [pc, #132]	@ (801a930 <tcp_send_fin+0x94>)
 801a8ac:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801a8b0:	4920      	ldr	r1, [pc, #128]	@ (801a934 <tcp_send_fin+0x98>)
 801a8b2:	4821      	ldr	r0, [pc, #132]	@ (801a938 <tcp_send_fin+0x9c>)
 801a8b4:	f006 f822 	bl	80208fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d02e      	beq.n	801a91e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a8c4:	60fb      	str	r3, [r7, #12]
 801a8c6:	e002      	b.n	801a8ce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d1f8      	bne.n	801a8c8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a8d6:	68fb      	ldr	r3, [r7, #12]
 801a8d8:	691b      	ldr	r3, [r3, #16]
 801a8da:	899b      	ldrh	r3, [r3, #12]
 801a8dc:	b29b      	uxth	r3, r3
 801a8de:	4618      	mov	r0, r3
 801a8e0:	f7f8 ff28 	bl	8013734 <lwip_htons>
 801a8e4:	4603      	mov	r3, r0
 801a8e6:	b2db      	uxtb	r3, r3
 801a8e8:	f003 0307 	and.w	r3, r3, #7
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d116      	bne.n	801a91e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	691b      	ldr	r3, [r3, #16]
 801a8f4:	899b      	ldrh	r3, [r3, #12]
 801a8f6:	b29c      	uxth	r4, r3
 801a8f8:	2001      	movs	r0, #1
 801a8fa:	f7f8 ff1b 	bl	8013734 <lwip_htons>
 801a8fe:	4603      	mov	r3, r0
 801a900:	461a      	mov	r2, r3
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	691b      	ldr	r3, [r3, #16]
 801a906:	4322      	orrs	r2, r4
 801a908:	b292      	uxth	r2, r2
 801a90a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	8b5b      	ldrh	r3, [r3, #26]
 801a910:	f043 0320 	orr.w	r3, r3, #32
 801a914:	b29a      	uxth	r2, r3
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a91a:	2300      	movs	r3, #0
 801a91c:	e004      	b.n	801a928 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a91e:	2101      	movs	r1, #1
 801a920:	6878      	ldr	r0, [r7, #4]
 801a922:	f000 f80b 	bl	801a93c <tcp_enqueue_flags>
 801a926:	4603      	mov	r3, r0
}
 801a928:	4618      	mov	r0, r3
 801a92a:	3714      	adds	r7, #20
 801a92c:	46bd      	mov	sp, r7
 801a92e:	bd90      	pop	{r4, r7, pc}
 801a930:	08024378 	.word	0x08024378
 801a934:	080247dc 	.word	0x080247dc
 801a938:	080243cc 	.word	0x080243cc

0801a93c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a93c:	b580      	push	{r7, lr}
 801a93e:	b088      	sub	sp, #32
 801a940:	af02      	add	r7, sp, #8
 801a942:	6078      	str	r0, [r7, #4]
 801a944:	460b      	mov	r3, r1
 801a946:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a948:	2300      	movs	r3, #0
 801a94a:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801a94c:	2300      	movs	r3, #0
 801a94e:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a950:	78fb      	ldrb	r3, [r7, #3]
 801a952:	f003 0303 	and.w	r3, r3, #3
 801a956:	2b00      	cmp	r3, #0
 801a958:	d106      	bne.n	801a968 <tcp_enqueue_flags+0x2c>
 801a95a:	4b67      	ldr	r3, [pc, #412]	@ (801aaf8 <tcp_enqueue_flags+0x1bc>)
 801a95c:	f240 4211 	movw	r2, #1041	@ 0x411
 801a960:	4966      	ldr	r1, [pc, #408]	@ (801aafc <tcp_enqueue_flags+0x1c0>)
 801a962:	4867      	ldr	r0, [pc, #412]	@ (801ab00 <tcp_enqueue_flags+0x1c4>)
 801a964:	f005 ffca 	bl	80208fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d106      	bne.n	801a97c <tcp_enqueue_flags+0x40>
 801a96e:	4b62      	ldr	r3, [pc, #392]	@ (801aaf8 <tcp_enqueue_flags+0x1bc>)
 801a970:	f240 4213 	movw	r2, #1043	@ 0x413
 801a974:	4963      	ldr	r1, [pc, #396]	@ (801ab04 <tcp_enqueue_flags+0x1c8>)
 801a976:	4862      	ldr	r0, [pc, #392]	@ (801ab00 <tcp_enqueue_flags+0x1c4>)
 801a978:	f005 ffc0 	bl	80208fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a97c:	78fb      	ldrb	r3, [r7, #3]
 801a97e:	f003 0302 	and.w	r3, r3, #2
 801a982:	2b00      	cmp	r3, #0
 801a984:	d001      	beq.n	801a98a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a986:	2301      	movs	r3, #1
 801a988:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a98a:	7dfb      	ldrb	r3, [r7, #23]
 801a98c:	009b      	lsls	r3, r3, #2
 801a98e:	b2db      	uxtb	r3, r3
 801a990:	f003 0304 	and.w	r3, r3, #4
 801a994:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a996:	7dbb      	ldrb	r3, [r7, #22]
 801a998:	b29b      	uxth	r3, r3
 801a99a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a99e:	4619      	mov	r1, r3
 801a9a0:	2036      	movs	r0, #54	@ 0x36
 801a9a2:	f7fa f8f5 	bl	8014b90 <pbuf_alloc>
 801a9a6:	60f8      	str	r0, [r7, #12]
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d109      	bne.n	801a9c2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	8b5b      	ldrh	r3, [r3, #26]
 801a9b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a9b6:	b29a      	uxth	r2, r3
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a9bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a9c0:	e095      	b.n	801aaee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	895a      	ldrh	r2, [r3, #10]
 801a9c6:	7dbb      	ldrb	r3, [r7, #22]
 801a9c8:	b29b      	uxth	r3, r3
 801a9ca:	429a      	cmp	r2, r3
 801a9cc:	d206      	bcs.n	801a9dc <tcp_enqueue_flags+0xa0>
 801a9ce:	4b4a      	ldr	r3, [pc, #296]	@ (801aaf8 <tcp_enqueue_flags+0x1bc>)
 801a9d0:	f240 4239 	movw	r2, #1081	@ 0x439
 801a9d4:	494c      	ldr	r1, [pc, #304]	@ (801ab08 <tcp_enqueue_flags+0x1cc>)
 801a9d6:	484a      	ldr	r0, [pc, #296]	@ (801ab00 <tcp_enqueue_flags+0x1c4>)
 801a9d8:	f005 ff90 	bl	80208fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801a9e0:	78fa      	ldrb	r2, [r7, #3]
 801a9e2:	7dfb      	ldrb	r3, [r7, #23]
 801a9e4:	9300      	str	r3, [sp, #0]
 801a9e6:	460b      	mov	r3, r1
 801a9e8:	68f9      	ldr	r1, [r7, #12]
 801a9ea:	6878      	ldr	r0, [r7, #4]
 801a9ec:	f7ff f8b8 	bl	8019b60 <tcp_create_segment>
 801a9f0:	60b8      	str	r0, [r7, #8]
 801a9f2:	68bb      	ldr	r3, [r7, #8]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d109      	bne.n	801aa0c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	8b5b      	ldrh	r3, [r3, #26]
 801a9fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aa00:	b29a      	uxth	r2, r3
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801aa06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aa0a:	e070      	b.n	801aaee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801aa0c:	68bb      	ldr	r3, [r7, #8]
 801aa0e:	691b      	ldr	r3, [r3, #16]
 801aa10:	f003 0303 	and.w	r3, r3, #3
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d006      	beq.n	801aa26 <tcp_enqueue_flags+0xea>
 801aa18:	4b37      	ldr	r3, [pc, #220]	@ (801aaf8 <tcp_enqueue_flags+0x1bc>)
 801aa1a:	f240 4242 	movw	r2, #1090	@ 0x442
 801aa1e:	493b      	ldr	r1, [pc, #236]	@ (801ab0c <tcp_enqueue_flags+0x1d0>)
 801aa20:	4837      	ldr	r0, [pc, #220]	@ (801ab00 <tcp_enqueue_flags+0x1c4>)
 801aa22:	f005 ff6b 	bl	80208fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801aa26:	68bb      	ldr	r3, [r7, #8]
 801aa28:	891b      	ldrh	r3, [r3, #8]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d006      	beq.n	801aa3c <tcp_enqueue_flags+0x100>
 801aa2e:	4b32      	ldr	r3, [pc, #200]	@ (801aaf8 <tcp_enqueue_flags+0x1bc>)
 801aa30:	f240 4243 	movw	r2, #1091	@ 0x443
 801aa34:	4936      	ldr	r1, [pc, #216]	@ (801ab10 <tcp_enqueue_flags+0x1d4>)
 801aa36:	4832      	ldr	r0, [pc, #200]	@ (801ab00 <tcp_enqueue_flags+0x1c4>)
 801aa38:	f005 ff60 	bl	80208fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d103      	bne.n	801aa4c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	68ba      	ldr	r2, [r7, #8]
 801aa48:	66da      	str	r2, [r3, #108]	@ 0x6c
 801aa4a:	e00d      	b.n	801aa68 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa50:	613b      	str	r3, [r7, #16]
 801aa52:	e002      	b.n	801aa5a <tcp_enqueue_flags+0x11e>
 801aa54:	693b      	ldr	r3, [r7, #16]
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	613b      	str	r3, [r7, #16]
 801aa5a:	693b      	ldr	r3, [r7, #16]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d1f8      	bne.n	801aa54 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801aa62:	693b      	ldr	r3, [r7, #16]
 801aa64:	68ba      	ldr	r2, [r7, #8]
 801aa66:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801aa70:	78fb      	ldrb	r3, [r7, #3]
 801aa72:	f003 0302 	and.w	r3, r3, #2
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d104      	bne.n	801aa84 <tcp_enqueue_flags+0x148>
 801aa7a:	78fb      	ldrb	r3, [r7, #3]
 801aa7c:	f003 0301 	and.w	r3, r3, #1
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d004      	beq.n	801aa8e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa88:	1c5a      	adds	r2, r3, #1
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801aa8e:	78fb      	ldrb	r3, [r7, #3]
 801aa90:	f003 0301 	and.w	r3, r3, #1
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d006      	beq.n	801aaa6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	8b5b      	ldrh	r3, [r3, #26]
 801aa9c:	f043 0320 	orr.w	r3, r3, #32
 801aaa0:	b29a      	uxth	r2, r3
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aaa6:	68bb      	ldr	r3, [r7, #8]
 801aaa8:	685b      	ldr	r3, [r3, #4]
 801aaaa:	4618      	mov	r0, r3
 801aaac:	f7fa fc42 	bl	8015334 <pbuf_clen>
 801aab0:	4603      	mov	r3, r0
 801aab2:	461a      	mov	r2, r3
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801aaba:	4413      	add	r3, r2
 801aabc:	b29a      	uxth	r2, r3
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d00e      	beq.n	801aaec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d10a      	bne.n	801aaec <tcp_enqueue_flags+0x1b0>
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d106      	bne.n	801aaec <tcp_enqueue_flags+0x1b0>
 801aade:	4b06      	ldr	r3, [pc, #24]	@ (801aaf8 <tcp_enqueue_flags+0x1bc>)
 801aae0:	f240 4265 	movw	r2, #1125	@ 0x465
 801aae4:	490b      	ldr	r1, [pc, #44]	@ (801ab14 <tcp_enqueue_flags+0x1d8>)
 801aae6:	4806      	ldr	r0, [pc, #24]	@ (801ab00 <tcp_enqueue_flags+0x1c4>)
 801aae8:	f005 ff08 	bl	80208fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801aaec:	2300      	movs	r3, #0
}
 801aaee:	4618      	mov	r0, r3
 801aaf0:	3718      	adds	r7, #24
 801aaf2:	46bd      	mov	sp, r7
 801aaf4:	bd80      	pop	{r7, pc}
 801aaf6:	bf00      	nop
 801aaf8:	08024378 	.word	0x08024378
 801aafc:	080247f8 	.word	0x080247f8
 801ab00:	080243cc 	.word	0x080243cc
 801ab04:	08024850 	.word	0x08024850
 801ab08:	08024870 	.word	0x08024870
 801ab0c:	080248ac 	.word	0x080248ac
 801ab10:	080248c4 	.word	0x080248c4
 801ab14:	080248f0 	.word	0x080248f0

0801ab18 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801ab18:	b5b0      	push	{r4, r5, r7, lr}
 801ab1a:	b08a      	sub	sp, #40	@ 0x28
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d106      	bne.n	801ab34 <tcp_output+0x1c>
 801ab26:	4b8a      	ldr	r3, [pc, #552]	@ (801ad50 <tcp_output+0x238>)
 801ab28:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801ab2c:	4989      	ldr	r1, [pc, #548]	@ (801ad54 <tcp_output+0x23c>)
 801ab2e:	488a      	ldr	r0, [pc, #552]	@ (801ad58 <tcp_output+0x240>)
 801ab30:	f005 fee4 	bl	80208fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	7d1b      	ldrb	r3, [r3, #20]
 801ab38:	2b01      	cmp	r3, #1
 801ab3a:	d106      	bne.n	801ab4a <tcp_output+0x32>
 801ab3c:	4b84      	ldr	r3, [pc, #528]	@ (801ad50 <tcp_output+0x238>)
 801ab3e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801ab42:	4986      	ldr	r1, [pc, #536]	@ (801ad5c <tcp_output+0x244>)
 801ab44:	4884      	ldr	r0, [pc, #528]	@ (801ad58 <tcp_output+0x240>)
 801ab46:	f005 fed9 	bl	80208fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801ab4a:	4b85      	ldr	r3, [pc, #532]	@ (801ad60 <tcp_output+0x248>)
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	687a      	ldr	r2, [r7, #4]
 801ab50:	429a      	cmp	r2, r3
 801ab52:	d101      	bne.n	801ab58 <tcp_output+0x40>
    return ERR_OK;
 801ab54:	2300      	movs	r3, #0
 801ab56:	e1d1      	b.n	801aefc <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ab64:	4293      	cmp	r3, r2
 801ab66:	bf28      	it	cs
 801ab68:	4613      	movcs	r3, r2
 801ab6a:	b29b      	uxth	r3, r3
 801ab6c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d10b      	bne.n	801ab92 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	8b5b      	ldrh	r3, [r3, #26]
 801ab7e:	f003 0302 	and.w	r3, r3, #2
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	f000 81ad 	beq.w	801aee2 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 801ab88:	6878      	ldr	r0, [r7, #4]
 801ab8a:	f000 fdd7 	bl	801b73c <tcp_send_empty_ack>
 801ab8e:	4603      	mov	r3, r0
 801ab90:	e1b4      	b.n	801aefc <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801ab92:	6879      	ldr	r1, [r7, #4]
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	3304      	adds	r3, #4
 801ab98:	461a      	mov	r2, r3
 801ab9a:	6878      	ldr	r0, [r7, #4]
 801ab9c:	f7fe ffc4 	bl	8019b28 <tcp_route>
 801aba0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801aba2:	697b      	ldr	r3, [r7, #20]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d102      	bne.n	801abae <tcp_output+0x96>
    return ERR_RTE;
 801aba8:	f06f 0303 	mvn.w	r3, #3
 801abac:	e1a6      	b.n	801aefc <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d003      	beq.n	801abbc <tcp_output+0xa4>
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d111      	bne.n	801abe0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801abbc:	697b      	ldr	r3, [r7, #20]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d002      	beq.n	801abc8 <tcp_output+0xb0>
 801abc2:	697b      	ldr	r3, [r7, #20]
 801abc4:	3304      	adds	r3, #4
 801abc6:	e000      	b.n	801abca <tcp_output+0xb2>
 801abc8:	2300      	movs	r3, #0
 801abca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801abcc:	693b      	ldr	r3, [r7, #16]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d102      	bne.n	801abd8 <tcp_output+0xc0>
      return ERR_RTE;
 801abd2:	f06f 0303 	mvn.w	r3, #3
 801abd6:	e191      	b.n	801aefc <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801abd8:	693b      	ldr	r3, [r7, #16]
 801abda:	681a      	ldr	r2, [r3, #0]
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abe2:	691b      	ldr	r3, [r3, #16]
 801abe4:	685b      	ldr	r3, [r3, #4]
 801abe6:	4618      	mov	r0, r3
 801abe8:	f7f8 fdba 	bl	8013760 <lwip_htonl>
 801abec:	4602      	mov	r2, r0
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801abf2:	1ad3      	subs	r3, r2, r3
 801abf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801abf6:	8912      	ldrh	r2, [r2, #8]
 801abf8:	4413      	add	r3, r2
 801abfa:	69ba      	ldr	r2, [r7, #24]
 801abfc:	429a      	cmp	r2, r3
 801abfe:	d227      	bcs.n	801ac50 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ac06:	461a      	mov	r2, r3
 801ac08:	69bb      	ldr	r3, [r7, #24]
 801ac0a:	4293      	cmp	r3, r2
 801ac0c:	d114      	bne.n	801ac38 <tcp_output+0x120>
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d110      	bne.n	801ac38 <tcp_output+0x120>
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d10b      	bne.n	801ac38 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2200      	movs	r2, #0
 801ac24:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	2201      	movs	r2, #1
 801ac2c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	2200      	movs	r2, #0
 801ac34:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	8b5b      	ldrh	r3, [r3, #26]
 801ac3c:	f003 0302 	and.w	r3, r3, #2
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	f000 8150 	beq.w	801aee6 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801ac46:	6878      	ldr	r0, [r7, #4]
 801ac48:	f000 fd78 	bl	801b73c <tcp_send_empty_ack>
 801ac4c:	4603      	mov	r3, r0
 801ac4e:	e155      	b.n	801aefc <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	2200      	movs	r2, #0
 801ac54:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac5c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801ac5e:	6a3b      	ldr	r3, [r7, #32]
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	f000 811f 	beq.w	801aea4 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801ac66:	e002      	b.n	801ac6e <tcp_output+0x156>
 801ac68:	6a3b      	ldr	r3, [r7, #32]
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	623b      	str	r3, [r7, #32]
 801ac6e:	6a3b      	ldr	r3, [r7, #32]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d1f8      	bne.n	801ac68 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801ac76:	e115      	b.n	801aea4 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801ac78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac7a:	691b      	ldr	r3, [r3, #16]
 801ac7c:	899b      	ldrh	r3, [r3, #12]
 801ac7e:	b29b      	uxth	r3, r3
 801ac80:	4618      	mov	r0, r3
 801ac82:	f7f8 fd57 	bl	8013734 <lwip_htons>
 801ac86:	4603      	mov	r3, r0
 801ac88:	b2db      	uxtb	r3, r3
 801ac8a:	f003 0304 	and.w	r3, r3, #4
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d006      	beq.n	801aca0 <tcp_output+0x188>
 801ac92:	4b2f      	ldr	r3, [pc, #188]	@ (801ad50 <tcp_output+0x238>)
 801ac94:	f240 5236 	movw	r2, #1334	@ 0x536
 801ac98:	4932      	ldr	r1, [pc, #200]	@ (801ad64 <tcp_output+0x24c>)
 801ac9a:	482f      	ldr	r0, [pc, #188]	@ (801ad58 <tcp_output+0x240>)
 801ac9c:	f005 fe2e 	bl	80208fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d01f      	beq.n	801ace8 <tcp_output+0x1d0>
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	8b5b      	ldrh	r3, [r3, #26]
 801acac:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d119      	bne.n	801ace8 <tcp_output+0x1d0>
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d00b      	beq.n	801acd4 <tcp_output+0x1bc>
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d110      	bne.n	801ace8 <tcp_output+0x1d0>
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801acca:	891a      	ldrh	r2, [r3, #8]
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801acd0:	429a      	cmp	r2, r3
 801acd2:	d209      	bcs.n	801ace8 <tcp_output+0x1d0>
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d004      	beq.n	801ace8 <tcp_output+0x1d0>
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ace4:	2b08      	cmp	r3, #8
 801ace6:	d901      	bls.n	801acec <tcp_output+0x1d4>
 801ace8:	2301      	movs	r3, #1
 801acea:	e000      	b.n	801acee <tcp_output+0x1d6>
 801acec:	2300      	movs	r3, #0
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d106      	bne.n	801ad00 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	8b5b      	ldrh	r3, [r3, #26]
 801acf6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	f000 80e7 	beq.w	801aece <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	7d1b      	ldrb	r3, [r3, #20]
 801ad04:	2b02      	cmp	r3, #2
 801ad06:	d00d      	beq.n	801ad24 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ad08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad0a:	691b      	ldr	r3, [r3, #16]
 801ad0c:	899b      	ldrh	r3, [r3, #12]
 801ad0e:	b29c      	uxth	r4, r3
 801ad10:	2010      	movs	r0, #16
 801ad12:	f7f8 fd0f 	bl	8013734 <lwip_htons>
 801ad16:	4603      	mov	r3, r0
 801ad18:	461a      	mov	r2, r3
 801ad1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad1c:	691b      	ldr	r3, [r3, #16]
 801ad1e:	4322      	orrs	r2, r4
 801ad20:	b292      	uxth	r2, r2
 801ad22:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801ad24:	697a      	ldr	r2, [r7, #20]
 801ad26:	6879      	ldr	r1, [r7, #4]
 801ad28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ad2a:	f000 f90b 	bl	801af44 <tcp_output_segment>
 801ad2e:	4603      	mov	r3, r0
 801ad30:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801ad32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d016      	beq.n	801ad68 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	8b5b      	ldrh	r3, [r3, #26]
 801ad3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ad42:	b29a      	uxth	r2, r3
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	835a      	strh	r2, [r3, #26]
      return err;
 801ad48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad4c:	e0d6      	b.n	801aefc <tcp_output+0x3e4>
 801ad4e:	bf00      	nop
 801ad50:	08024378 	.word	0x08024378
 801ad54:	08024918 	.word	0x08024918
 801ad58:	080243cc 	.word	0x080243cc
 801ad5c:	08024930 	.word	0x08024930
 801ad60:	20022af8 	.word	0x20022af8
 801ad64:	08024958 	.word	0x08024958
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801ad68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad6a:	2200      	movs	r2, #0
 801ad6c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801ad6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad70:	681a      	ldr	r2, [r3, #0]
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	7d1b      	ldrb	r3, [r3, #20]
 801ad7a:	2b02      	cmp	r3, #2
 801ad7c:	d006      	beq.n	801ad8c <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	8b5b      	ldrh	r3, [r3, #26]
 801ad82:	f023 0303 	bic.w	r3, r3, #3
 801ad86:	b29a      	uxth	r2, r3
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ad8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad8e:	691b      	ldr	r3, [r3, #16]
 801ad90:	685b      	ldr	r3, [r3, #4]
 801ad92:	4618      	mov	r0, r3
 801ad94:	f7f8 fce4 	bl	8013760 <lwip_htonl>
 801ad98:	4604      	mov	r4, r0
 801ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad9c:	891b      	ldrh	r3, [r3, #8]
 801ad9e:	461d      	mov	r5, r3
 801ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ada2:	691b      	ldr	r3, [r3, #16]
 801ada4:	899b      	ldrh	r3, [r3, #12]
 801ada6:	b29b      	uxth	r3, r3
 801ada8:	4618      	mov	r0, r3
 801adaa:	f7f8 fcc3 	bl	8013734 <lwip_htons>
 801adae:	4603      	mov	r3, r0
 801adb0:	b2db      	uxtb	r3, r3
 801adb2:	f003 0303 	and.w	r3, r3, #3
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d001      	beq.n	801adbe <tcp_output+0x2a6>
 801adba:	2301      	movs	r3, #1
 801adbc:	e000      	b.n	801adc0 <tcp_output+0x2a8>
 801adbe:	2300      	movs	r3, #0
 801adc0:	442b      	add	r3, r5
 801adc2:	4423      	add	r3, r4
 801adc4:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801adca:	68bb      	ldr	r3, [r7, #8]
 801adcc:	1ad3      	subs	r3, r2, r3
 801adce:	2b00      	cmp	r3, #0
 801add0:	da02      	bge.n	801add8 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	68ba      	ldr	r2, [r7, #8]
 801add6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adda:	891b      	ldrh	r3, [r3, #8]
 801addc:	461c      	mov	r4, r3
 801adde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ade0:	691b      	ldr	r3, [r3, #16]
 801ade2:	899b      	ldrh	r3, [r3, #12]
 801ade4:	b29b      	uxth	r3, r3
 801ade6:	4618      	mov	r0, r3
 801ade8:	f7f8 fca4 	bl	8013734 <lwip_htons>
 801adec:	4603      	mov	r3, r0
 801adee:	b2db      	uxtb	r3, r3
 801adf0:	f003 0303 	and.w	r3, r3, #3
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	d001      	beq.n	801adfc <tcp_output+0x2e4>
 801adf8:	2301      	movs	r3, #1
 801adfa:	e000      	b.n	801adfe <tcp_output+0x2e6>
 801adfc:	2300      	movs	r3, #0
 801adfe:	4423      	add	r3, r4
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d049      	beq.n	801ae98 <tcp_output+0x380>
      seg->next = NULL;
 801ae04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae06:	2200      	movs	r2, #0
 801ae08:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d105      	bne.n	801ae1e <tcp_output+0x306>
        pcb->unacked = seg;
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ae16:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801ae18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae1a:	623b      	str	r3, [r7, #32]
 801ae1c:	e03f      	b.n	801ae9e <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ae1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae20:	691b      	ldr	r3, [r3, #16]
 801ae22:	685b      	ldr	r3, [r3, #4]
 801ae24:	4618      	mov	r0, r3
 801ae26:	f7f8 fc9b 	bl	8013760 <lwip_htonl>
 801ae2a:	4604      	mov	r4, r0
 801ae2c:	6a3b      	ldr	r3, [r7, #32]
 801ae2e:	691b      	ldr	r3, [r3, #16]
 801ae30:	685b      	ldr	r3, [r3, #4]
 801ae32:	4618      	mov	r0, r3
 801ae34:	f7f8 fc94 	bl	8013760 <lwip_htonl>
 801ae38:	4603      	mov	r3, r0
 801ae3a:	1ae3      	subs	r3, r4, r3
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	da24      	bge.n	801ae8a <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	3370      	adds	r3, #112	@ 0x70
 801ae44:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ae46:	e002      	b.n	801ae4e <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ae48:	69fb      	ldr	r3, [r7, #28]
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ae4e:	69fb      	ldr	r3, [r7, #28]
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d011      	beq.n	801ae7a <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ae56:	69fb      	ldr	r3, [r7, #28]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	691b      	ldr	r3, [r3, #16]
 801ae5c:	685b      	ldr	r3, [r3, #4]
 801ae5e:	4618      	mov	r0, r3
 801ae60:	f7f8 fc7e 	bl	8013760 <lwip_htonl>
 801ae64:	4604      	mov	r4, r0
 801ae66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae68:	691b      	ldr	r3, [r3, #16]
 801ae6a:	685b      	ldr	r3, [r3, #4]
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	f7f8 fc77 	bl	8013760 <lwip_htonl>
 801ae72:	4603      	mov	r3, r0
 801ae74:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	dbe6      	blt.n	801ae48 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 801ae7a:	69fb      	ldr	r3, [r7, #28]
 801ae7c:	681a      	ldr	r2, [r3, #0]
 801ae7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae80:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ae82:	69fb      	ldr	r3, [r7, #28]
 801ae84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ae86:	601a      	str	r2, [r3, #0]
 801ae88:	e009      	b.n	801ae9e <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ae8a:	6a3b      	ldr	r3, [r7, #32]
 801ae8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ae8e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ae90:	6a3b      	ldr	r3, [r7, #32]
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	623b      	str	r3, [r7, #32]
 801ae96:	e002      	b.n	801ae9e <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ae98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ae9a:	f7fb feb4 	bl	8016c06 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aea2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d012      	beq.n	801aed0 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801aeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeac:	691b      	ldr	r3, [r3, #16]
 801aeae:	685b      	ldr	r3, [r3, #4]
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	f7f8 fc55 	bl	8013760 <lwip_htonl>
 801aeb6:	4602      	mov	r2, r0
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801aebc:	1ad3      	subs	r3, r2, r3
 801aebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aec0:	8912      	ldrh	r2, [r2, #8]
 801aec2:	4413      	add	r3, r2
  while (seg != NULL &&
 801aec4:	69ba      	ldr	r2, [r7, #24]
 801aec6:	429a      	cmp	r2, r3
 801aec8:	f4bf aed6 	bcs.w	801ac78 <tcp_output+0x160>
 801aecc:	e000      	b.n	801aed0 <tcp_output+0x3b8>
      break;
 801aece:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d108      	bne.n	801aeea <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	2200      	movs	r2, #0
 801aedc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801aee0:	e004      	b.n	801aeec <tcp_output+0x3d4>
    goto output_done;
 801aee2:	bf00      	nop
 801aee4:	e002      	b.n	801aeec <tcp_output+0x3d4>
    goto output_done;
 801aee6:	bf00      	nop
 801aee8:	e000      	b.n	801aeec <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801aeea:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	8b5b      	ldrh	r3, [r3, #26]
 801aef0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801aef4:	b29a      	uxth	r2, r3
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801aefa:	2300      	movs	r3, #0
}
 801aefc:	4618      	mov	r0, r3
 801aefe:	3728      	adds	r7, #40	@ 0x28
 801af00:	46bd      	mov	sp, r7
 801af02:	bdb0      	pop	{r4, r5, r7, pc}

0801af04 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b082      	sub	sp, #8
 801af08:	af00      	add	r7, sp, #0
 801af0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d106      	bne.n	801af20 <tcp_output_segment_busy+0x1c>
 801af12:	4b09      	ldr	r3, [pc, #36]	@ (801af38 <tcp_output_segment_busy+0x34>)
 801af14:	f240 529a 	movw	r2, #1434	@ 0x59a
 801af18:	4908      	ldr	r1, [pc, #32]	@ (801af3c <tcp_output_segment_busy+0x38>)
 801af1a:	4809      	ldr	r0, [pc, #36]	@ (801af40 <tcp_output_segment_busy+0x3c>)
 801af1c:	f005 fcee 	bl	80208fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	685b      	ldr	r3, [r3, #4]
 801af24:	7b9b      	ldrb	r3, [r3, #14]
 801af26:	2b01      	cmp	r3, #1
 801af28:	d001      	beq.n	801af2e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801af2a:	2301      	movs	r3, #1
 801af2c:	e000      	b.n	801af30 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801af2e:	2300      	movs	r3, #0
}
 801af30:	4618      	mov	r0, r3
 801af32:	3708      	adds	r7, #8
 801af34:	46bd      	mov	sp, r7
 801af36:	bd80      	pop	{r7, pc}
 801af38:	08024378 	.word	0x08024378
 801af3c:	08024970 	.word	0x08024970
 801af40:	080243cc 	.word	0x080243cc

0801af44 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801af44:	b5b0      	push	{r4, r5, r7, lr}
 801af46:	b08c      	sub	sp, #48	@ 0x30
 801af48:	af04      	add	r7, sp, #16
 801af4a:	60f8      	str	r0, [r7, #12]
 801af4c:	60b9      	str	r1, [r7, #8]
 801af4e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d106      	bne.n	801af64 <tcp_output_segment+0x20>
 801af56:	4b64      	ldr	r3, [pc, #400]	@ (801b0e8 <tcp_output_segment+0x1a4>)
 801af58:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801af5c:	4963      	ldr	r1, [pc, #396]	@ (801b0ec <tcp_output_segment+0x1a8>)
 801af5e:	4864      	ldr	r0, [pc, #400]	@ (801b0f0 <tcp_output_segment+0x1ac>)
 801af60:	f005 fccc 	bl	80208fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801af64:	68bb      	ldr	r3, [r7, #8]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d106      	bne.n	801af78 <tcp_output_segment+0x34>
 801af6a:	4b5f      	ldr	r3, [pc, #380]	@ (801b0e8 <tcp_output_segment+0x1a4>)
 801af6c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801af70:	4960      	ldr	r1, [pc, #384]	@ (801b0f4 <tcp_output_segment+0x1b0>)
 801af72:	485f      	ldr	r0, [pc, #380]	@ (801b0f0 <tcp_output_segment+0x1ac>)
 801af74:	f005 fcc2 	bl	80208fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d106      	bne.n	801af8c <tcp_output_segment+0x48>
 801af7e:	4b5a      	ldr	r3, [pc, #360]	@ (801b0e8 <tcp_output_segment+0x1a4>)
 801af80:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801af84:	495c      	ldr	r1, [pc, #368]	@ (801b0f8 <tcp_output_segment+0x1b4>)
 801af86:	485a      	ldr	r0, [pc, #360]	@ (801b0f0 <tcp_output_segment+0x1ac>)
 801af88:	f005 fcb8 	bl	80208fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801af8c:	68f8      	ldr	r0, [r7, #12]
 801af8e:	f7ff ffb9 	bl	801af04 <tcp_output_segment_busy>
 801af92:	4603      	mov	r3, r0
 801af94:	2b00      	cmp	r3, #0
 801af96:	d001      	beq.n	801af9c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801af98:	2300      	movs	r3, #0
 801af9a:	e0a1      	b.n	801b0e0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801af9c:	68bb      	ldr	r3, [r7, #8]
 801af9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	691c      	ldr	r4, [r3, #16]
 801afa4:	4610      	mov	r0, r2
 801afa6:	f7f8 fbdb 	bl	8013760 <lwip_htonl>
 801afaa:	4603      	mov	r3, r0
 801afac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801afae:	68bb      	ldr	r3, [r7, #8]
 801afb0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	691c      	ldr	r4, [r3, #16]
 801afb6:	4610      	mov	r0, r2
 801afb8:	f7f8 fbbc 	bl	8013734 <lwip_htons>
 801afbc:	4603      	mov	r3, r0
 801afbe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801afc0:	68bb      	ldr	r3, [r7, #8]
 801afc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801afc4:	68ba      	ldr	r2, [r7, #8]
 801afc6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801afc8:	441a      	add	r2, r3
 801afca:	68bb      	ldr	r3, [r7, #8]
 801afcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	691b      	ldr	r3, [r3, #16]
 801afd2:	3314      	adds	r3, #20
 801afd4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	7b1b      	ldrb	r3, [r3, #12]
 801afda:	f003 0301 	and.w	r3, r3, #1
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d015      	beq.n	801b00e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801afe2:	68bb      	ldr	r3, [r7, #8]
 801afe4:	3304      	adds	r3, #4
 801afe6:	461a      	mov	r2, r3
 801afe8:	6879      	ldr	r1, [r7, #4]
 801afea:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801afee:	f7fc f9cf 	bl	8017390 <tcp_eff_send_mss_netif>
 801aff2:	4603      	mov	r3, r0
 801aff4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801aff6:	8b7b      	ldrh	r3, [r7, #26]
 801aff8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801affc:	4618      	mov	r0, r3
 801affe:	f7f8 fbaf 	bl	8013760 <lwip_htonl>
 801b002:	4602      	mov	r2, r0
 801b004:	69fb      	ldr	r3, [r7, #28]
 801b006:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b008:	69fb      	ldr	r3, [r7, #28]
 801b00a:	3304      	adds	r3, #4
 801b00c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b00e:	68bb      	ldr	r3, [r7, #8]
 801b010:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b014:	2b00      	cmp	r3, #0
 801b016:	da02      	bge.n	801b01e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b018:	68bb      	ldr	r3, [r7, #8]
 801b01a:	2200      	movs	r2, #0
 801b01c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801b01e:	68bb      	ldr	r3, [r7, #8]
 801b020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b022:	2b00      	cmp	r3, #0
 801b024:	d10c      	bne.n	801b040 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b026:	4b35      	ldr	r3, [pc, #212]	@ (801b0fc <tcp_output_segment+0x1b8>)
 801b028:	681a      	ldr	r2, [r3, #0]
 801b02a:	68bb      	ldr	r3, [r7, #8]
 801b02c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	691b      	ldr	r3, [r3, #16]
 801b032:	685b      	ldr	r3, [r3, #4]
 801b034:	4618      	mov	r0, r3
 801b036:	f7f8 fb93 	bl	8013760 <lwip_htonl>
 801b03a:	4602      	mov	r2, r0
 801b03c:	68bb      	ldr	r3, [r7, #8]
 801b03e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	691a      	ldr	r2, [r3, #16]
 801b044:	68fb      	ldr	r3, [r7, #12]
 801b046:	685b      	ldr	r3, [r3, #4]
 801b048:	685b      	ldr	r3, [r3, #4]
 801b04a:	1ad3      	subs	r3, r2, r3
 801b04c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	685b      	ldr	r3, [r3, #4]
 801b052:	8959      	ldrh	r1, [r3, #10]
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	685b      	ldr	r3, [r3, #4]
 801b058:	8b3a      	ldrh	r2, [r7, #24]
 801b05a:	1a8a      	subs	r2, r1, r2
 801b05c:	b292      	uxth	r2, r2
 801b05e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	685b      	ldr	r3, [r3, #4]
 801b064:	8919      	ldrh	r1, [r3, #8]
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	685b      	ldr	r3, [r3, #4]
 801b06a:	8b3a      	ldrh	r2, [r7, #24]
 801b06c:	1a8a      	subs	r2, r1, r2
 801b06e:	b292      	uxth	r2, r2
 801b070:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	685b      	ldr	r3, [r3, #4]
 801b076:	68fa      	ldr	r2, [r7, #12]
 801b078:	6912      	ldr	r2, [r2, #16]
 801b07a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	691b      	ldr	r3, [r3, #16]
 801b080:	2200      	movs	r2, #0
 801b082:	741a      	strb	r2, [r3, #16]
 801b084:	2200      	movs	r2, #0
 801b086:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	691a      	ldr	r2, [r3, #16]
 801b08c:	68fb      	ldr	r3, [r7, #12]
 801b08e:	7b1b      	ldrb	r3, [r3, #12]
 801b090:	f003 0301 	and.w	r3, r3, #1
 801b094:	2b00      	cmp	r3, #0
 801b096:	d001      	beq.n	801b09c <tcp_output_segment+0x158>
 801b098:	2318      	movs	r3, #24
 801b09a:	e000      	b.n	801b09e <tcp_output_segment+0x15a>
 801b09c:	2314      	movs	r3, #20
 801b09e:	4413      	add	r3, r2
 801b0a0:	69fa      	ldr	r2, [r7, #28]
 801b0a2:	429a      	cmp	r2, r3
 801b0a4:	d006      	beq.n	801b0b4 <tcp_output_segment+0x170>
 801b0a6:	4b10      	ldr	r3, [pc, #64]	@ (801b0e8 <tcp_output_segment+0x1a4>)
 801b0a8:	f240 621c 	movw	r2, #1564	@ 0x61c
 801b0ac:	4914      	ldr	r1, [pc, #80]	@ (801b100 <tcp_output_segment+0x1bc>)
 801b0ae:	4810      	ldr	r0, [pc, #64]	@ (801b0f0 <tcp_output_segment+0x1ac>)
 801b0b0:	f005 fc24 	bl	80208fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	6858      	ldr	r0, [r3, #4]
 801b0b8:	68b9      	ldr	r1, [r7, #8]
 801b0ba:	68bb      	ldr	r3, [r7, #8]
 801b0bc:	1d1c      	adds	r4, r3, #4
 801b0be:	68bb      	ldr	r3, [r7, #8]
 801b0c0:	7add      	ldrb	r5, [r3, #11]
 801b0c2:	68bb      	ldr	r3, [r7, #8]
 801b0c4:	7a9b      	ldrb	r3, [r3, #10]
 801b0c6:	687a      	ldr	r2, [r7, #4]
 801b0c8:	9202      	str	r2, [sp, #8]
 801b0ca:	2206      	movs	r2, #6
 801b0cc:	9201      	str	r2, [sp, #4]
 801b0ce:	9300      	str	r3, [sp, #0]
 801b0d0:	462b      	mov	r3, r5
 801b0d2:	4622      	mov	r2, r4
 801b0d4:	f003 f8ea 	bl	801e2ac <ip4_output_if>
 801b0d8:	4603      	mov	r3, r0
 801b0da:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b0dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b0e0:	4618      	mov	r0, r3
 801b0e2:	3720      	adds	r7, #32
 801b0e4:	46bd      	mov	sp, r7
 801b0e6:	bdb0      	pop	{r4, r5, r7, pc}
 801b0e8:	08024378 	.word	0x08024378
 801b0ec:	08024998 	.word	0x08024998
 801b0f0:	080243cc 	.word	0x080243cc
 801b0f4:	080249b8 	.word	0x080249b8
 801b0f8:	080249d8 	.word	0x080249d8
 801b0fc:	20022aa8 	.word	0x20022aa8
 801b100:	080249fc 	.word	0x080249fc

0801b104 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b104:	b5b0      	push	{r4, r5, r7, lr}
 801b106:	b084      	sub	sp, #16
 801b108:	af00      	add	r7, sp, #0
 801b10a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d106      	bne.n	801b120 <tcp_rexmit_rto_prepare+0x1c>
 801b112:	4b36      	ldr	r3, [pc, #216]	@ (801b1ec <tcp_rexmit_rto_prepare+0xe8>)
 801b114:	f240 6263 	movw	r2, #1635	@ 0x663
 801b118:	4935      	ldr	r1, [pc, #212]	@ (801b1f0 <tcp_rexmit_rto_prepare+0xec>)
 801b11a:	4836      	ldr	r0, [pc, #216]	@ (801b1f4 <tcp_rexmit_rto_prepare+0xf0>)
 801b11c:	f005 fbee 	bl	80208fc <iprintf>

  if (pcb->unacked == NULL) {
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b124:	2b00      	cmp	r3, #0
 801b126:	d102      	bne.n	801b12e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b128:	f06f 0305 	mvn.w	r3, #5
 801b12c:	e059      	b.n	801b1e2 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b132:	60fb      	str	r3, [r7, #12]
 801b134:	e00b      	b.n	801b14e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b136:	68f8      	ldr	r0, [r7, #12]
 801b138:	f7ff fee4 	bl	801af04 <tcp_output_segment_busy>
 801b13c:	4603      	mov	r3, r0
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d002      	beq.n	801b148 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b142:	f06f 0305 	mvn.w	r3, #5
 801b146:	e04c      	b.n	801b1e2 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	60fb      	str	r3, [r7, #12]
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	681b      	ldr	r3, [r3, #0]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d1ef      	bne.n	801b136 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b156:	68f8      	ldr	r0, [r7, #12]
 801b158:	f7ff fed4 	bl	801af04 <tcp_output_segment_busy>
 801b15c:	4603      	mov	r3, r0
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d002      	beq.n	801b168 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b162:	f06f 0305 	mvn.w	r3, #5
 801b166:	e03c      	b.n	801b1e2 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b174:	2b00      	cmp	r3, #0
 801b176:	d104      	bne.n	801b182 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	895a      	ldrh	r2, [r3, #10]
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	2200      	movs	r2, #0
 801b18e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	8b5b      	ldrh	r3, [r3, #26]
 801b194:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801b198:	b29a      	uxth	r2, r3
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b19e:	68fb      	ldr	r3, [r7, #12]
 801b1a0:	691b      	ldr	r3, [r3, #16]
 801b1a2:	685b      	ldr	r3, [r3, #4]
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	f7f8 fadb 	bl	8013760 <lwip_htonl>
 801b1aa:	4604      	mov	r4, r0
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	891b      	ldrh	r3, [r3, #8]
 801b1b0:	461d      	mov	r5, r3
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	691b      	ldr	r3, [r3, #16]
 801b1b6:	899b      	ldrh	r3, [r3, #12]
 801b1b8:	b29b      	uxth	r3, r3
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	f7f8 faba 	bl	8013734 <lwip_htons>
 801b1c0:	4603      	mov	r3, r0
 801b1c2:	b2db      	uxtb	r3, r3
 801b1c4:	f003 0303 	and.w	r3, r3, #3
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d001      	beq.n	801b1d0 <tcp_rexmit_rto_prepare+0xcc>
 801b1cc:	2301      	movs	r3, #1
 801b1ce:	e000      	b.n	801b1d2 <tcp_rexmit_rto_prepare+0xce>
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	442b      	add	r3, r5
 801b1d4:	18e2      	adds	r2, r4, r3
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	2200      	movs	r2, #0
 801b1de:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801b1e0:	2300      	movs	r3, #0
}
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	3710      	adds	r7, #16
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	bdb0      	pop	{r4, r5, r7, pc}
 801b1ea:	bf00      	nop
 801b1ec:	08024378 	.word	0x08024378
 801b1f0:	08024a10 	.word	0x08024a10
 801b1f4:	080243cc 	.word	0x080243cc

0801b1f8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b082      	sub	sp, #8
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	2b00      	cmp	r3, #0
 801b204:	d106      	bne.n	801b214 <tcp_rexmit_rto_commit+0x1c>
 801b206:	4b0d      	ldr	r3, [pc, #52]	@ (801b23c <tcp_rexmit_rto_commit+0x44>)
 801b208:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801b20c:	490c      	ldr	r1, [pc, #48]	@ (801b240 <tcp_rexmit_rto_commit+0x48>)
 801b20e:	480d      	ldr	r0, [pc, #52]	@ (801b244 <tcp_rexmit_rto_commit+0x4c>)
 801b210:	f005 fb74 	bl	80208fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b21a:	2bff      	cmp	r3, #255	@ 0xff
 801b21c:	d007      	beq.n	801b22e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b224:	3301      	adds	r3, #1
 801b226:	b2da      	uxtb	r2, r3
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b22e:	6878      	ldr	r0, [r7, #4]
 801b230:	f7ff fc72 	bl	801ab18 <tcp_output>
}
 801b234:	bf00      	nop
 801b236:	3708      	adds	r7, #8
 801b238:	46bd      	mov	sp, r7
 801b23a:	bd80      	pop	{r7, pc}
 801b23c:	08024378 	.word	0x08024378
 801b240:	08024a34 	.word	0x08024a34
 801b244:	080243cc 	.word	0x080243cc

0801b248 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b248:	b580      	push	{r7, lr}
 801b24a:	b082      	sub	sp, #8
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d106      	bne.n	801b264 <tcp_rexmit_rto+0x1c>
 801b256:	4b0a      	ldr	r3, [pc, #40]	@ (801b280 <tcp_rexmit_rto+0x38>)
 801b258:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801b25c:	4909      	ldr	r1, [pc, #36]	@ (801b284 <tcp_rexmit_rto+0x3c>)
 801b25e:	480a      	ldr	r0, [pc, #40]	@ (801b288 <tcp_rexmit_rto+0x40>)
 801b260:	f005 fb4c 	bl	80208fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b264:	6878      	ldr	r0, [r7, #4]
 801b266:	f7ff ff4d 	bl	801b104 <tcp_rexmit_rto_prepare>
 801b26a:	4603      	mov	r3, r0
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d102      	bne.n	801b276 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b270:	6878      	ldr	r0, [r7, #4]
 801b272:	f7ff ffc1 	bl	801b1f8 <tcp_rexmit_rto_commit>
  }
}
 801b276:	bf00      	nop
 801b278:	3708      	adds	r7, #8
 801b27a:	46bd      	mov	sp, r7
 801b27c:	bd80      	pop	{r7, pc}
 801b27e:	bf00      	nop
 801b280:	08024378 	.word	0x08024378
 801b284:	08024a58 	.word	0x08024a58
 801b288:	080243cc 	.word	0x080243cc

0801b28c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b28c:	b590      	push	{r4, r7, lr}
 801b28e:	b085      	sub	sp, #20
 801b290:	af00      	add	r7, sp, #0
 801b292:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d106      	bne.n	801b2a8 <tcp_rexmit+0x1c>
 801b29a:	4b2f      	ldr	r3, [pc, #188]	@ (801b358 <tcp_rexmit+0xcc>)
 801b29c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801b2a0:	492e      	ldr	r1, [pc, #184]	@ (801b35c <tcp_rexmit+0xd0>)
 801b2a2:	482f      	ldr	r0, [pc, #188]	@ (801b360 <tcp_rexmit+0xd4>)
 801b2a4:	f005 fb2a 	bl	80208fc <iprintf>

  if (pcb->unacked == NULL) {
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d102      	bne.n	801b2b6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b2b0:	f06f 0305 	mvn.w	r3, #5
 801b2b4:	e04c      	b.n	801b350 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b2ba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b2bc:	68b8      	ldr	r0, [r7, #8]
 801b2be:	f7ff fe21 	bl	801af04 <tcp_output_segment_busy>
 801b2c2:	4603      	mov	r3, r0
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d002      	beq.n	801b2ce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b2c8:	f06f 0305 	mvn.w	r3, #5
 801b2cc:	e040      	b.n	801b350 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b2ce:	68bb      	ldr	r3, [r7, #8]
 801b2d0:	681a      	ldr	r2, [r3, #0]
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	336c      	adds	r3, #108	@ 0x6c
 801b2da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b2dc:	e002      	b.n	801b2e4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b2de:	68fb      	ldr	r3, [r7, #12]
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d011      	beq.n	801b310 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	691b      	ldr	r3, [r3, #16]
 801b2f2:	685b      	ldr	r3, [r3, #4]
 801b2f4:	4618      	mov	r0, r3
 801b2f6:	f7f8 fa33 	bl	8013760 <lwip_htonl>
 801b2fa:	4604      	mov	r4, r0
 801b2fc:	68bb      	ldr	r3, [r7, #8]
 801b2fe:	691b      	ldr	r3, [r3, #16]
 801b300:	685b      	ldr	r3, [r3, #4]
 801b302:	4618      	mov	r0, r3
 801b304:	f7f8 fa2c 	bl	8013760 <lwip_htonl>
 801b308:	4603      	mov	r3, r0
 801b30a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	dbe6      	blt.n	801b2de <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	681a      	ldr	r2, [r3, #0]
 801b314:	68bb      	ldr	r3, [r7, #8]
 801b316:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	68ba      	ldr	r2, [r7, #8]
 801b31c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b31e:	68bb      	ldr	r3, [r7, #8]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d103      	bne.n	801b32e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	2200      	movs	r2, #0
 801b32a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b334:	2bff      	cmp	r3, #255	@ 0xff
 801b336:	d007      	beq.n	801b348 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b33e:	3301      	adds	r3, #1
 801b340:	b2da      	uxtb	r2, r3
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	2200      	movs	r2, #0
 801b34c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b34e:	2300      	movs	r3, #0
}
 801b350:	4618      	mov	r0, r3
 801b352:	3714      	adds	r7, #20
 801b354:	46bd      	mov	sp, r7
 801b356:	bd90      	pop	{r4, r7, pc}
 801b358:	08024378 	.word	0x08024378
 801b35c:	08024a74 	.word	0x08024a74
 801b360:	080243cc 	.word	0x080243cc

0801b364 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b364:	b580      	push	{r7, lr}
 801b366:	b082      	sub	sp, #8
 801b368:	af00      	add	r7, sp, #0
 801b36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d106      	bne.n	801b380 <tcp_rexmit_fast+0x1c>
 801b372:	4b2a      	ldr	r3, [pc, #168]	@ (801b41c <tcp_rexmit_fast+0xb8>)
 801b374:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801b378:	4929      	ldr	r1, [pc, #164]	@ (801b420 <tcp_rexmit_fast+0xbc>)
 801b37a:	482a      	ldr	r0, [pc, #168]	@ (801b424 <tcp_rexmit_fast+0xc0>)
 801b37c:	f005 fabe 	bl	80208fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b384:	2b00      	cmp	r3, #0
 801b386:	d045      	beq.n	801b414 <tcp_rexmit_fast+0xb0>
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	8b5b      	ldrh	r3, [r3, #26]
 801b38c:	f003 0304 	and.w	r3, r3, #4
 801b390:	2b00      	cmp	r3, #0
 801b392:	d13f      	bne.n	801b414 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b394:	6878      	ldr	r0, [r7, #4]
 801b396:	f7ff ff79 	bl	801b28c <tcp_rexmit>
 801b39a:	4603      	mov	r3, r0
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d139      	bne.n	801b414 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801b3ac:	4293      	cmp	r3, r2
 801b3ae:	bf28      	it	cs
 801b3b0:	4613      	movcs	r3, r2
 801b3b2:	b29b      	uxth	r3, r3
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	da00      	bge.n	801b3ba <tcp_rexmit_fast+0x56>
 801b3b8:	3301      	adds	r3, #1
 801b3ba:	105b      	asrs	r3, r3, #1
 801b3bc:	b29a      	uxth	r2, r3
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801b3ca:	461a      	mov	r2, r3
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b3d0:	005b      	lsls	r3, r3, #1
 801b3d2:	429a      	cmp	r2, r3
 801b3d4:	d206      	bcs.n	801b3e4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b3da:	005b      	lsls	r3, r3, #1
 801b3dc:	b29a      	uxth	r2, r3
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b3ee:	4619      	mov	r1, r3
 801b3f0:	0049      	lsls	r1, r1, #1
 801b3f2:	440b      	add	r3, r1
 801b3f4:	b29b      	uxth	r3, r3
 801b3f6:	4413      	add	r3, r2
 801b3f8:	b29a      	uxth	r2, r3
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	8b5b      	ldrh	r3, [r3, #26]
 801b404:	f043 0304 	orr.w	r3, r3, #4
 801b408:	b29a      	uxth	r2, r3
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	2200      	movs	r2, #0
 801b412:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801b414:	bf00      	nop
 801b416:	3708      	adds	r7, #8
 801b418:	46bd      	mov	sp, r7
 801b41a:	bd80      	pop	{r7, pc}
 801b41c:	08024378 	.word	0x08024378
 801b420:	08024a8c 	.word	0x08024a8c
 801b424:	080243cc 	.word	0x080243cc

0801b428 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b086      	sub	sp, #24
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	60f8      	str	r0, [r7, #12]
 801b430:	607b      	str	r3, [r7, #4]
 801b432:	460b      	mov	r3, r1
 801b434:	817b      	strh	r3, [r7, #10]
 801b436:	4613      	mov	r3, r2
 801b438:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b43a:	897a      	ldrh	r2, [r7, #10]
 801b43c:	893b      	ldrh	r3, [r7, #8]
 801b43e:	4413      	add	r3, r2
 801b440:	b29b      	uxth	r3, r3
 801b442:	3314      	adds	r3, #20
 801b444:	b29b      	uxth	r3, r3
 801b446:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b44a:	4619      	mov	r1, r3
 801b44c:	2022      	movs	r0, #34	@ 0x22
 801b44e:	f7f9 fb9f 	bl	8014b90 <pbuf_alloc>
 801b452:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b454:	697b      	ldr	r3, [r7, #20]
 801b456:	2b00      	cmp	r3, #0
 801b458:	d04d      	beq.n	801b4f6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b45a:	897b      	ldrh	r3, [r7, #10]
 801b45c:	3313      	adds	r3, #19
 801b45e:	697a      	ldr	r2, [r7, #20]
 801b460:	8952      	ldrh	r2, [r2, #10]
 801b462:	4293      	cmp	r3, r2
 801b464:	db06      	blt.n	801b474 <tcp_output_alloc_header_common+0x4c>
 801b466:	4b26      	ldr	r3, [pc, #152]	@ (801b500 <tcp_output_alloc_header_common+0xd8>)
 801b468:	f240 7223 	movw	r2, #1827	@ 0x723
 801b46c:	4925      	ldr	r1, [pc, #148]	@ (801b504 <tcp_output_alloc_header_common+0xdc>)
 801b46e:	4826      	ldr	r0, [pc, #152]	@ (801b508 <tcp_output_alloc_header_common+0xe0>)
 801b470:	f005 fa44 	bl	80208fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b474:	697b      	ldr	r3, [r7, #20]
 801b476:	685b      	ldr	r3, [r3, #4]
 801b478:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b47a:	8c3b      	ldrh	r3, [r7, #32]
 801b47c:	4618      	mov	r0, r3
 801b47e:	f7f8 f959 	bl	8013734 <lwip_htons>
 801b482:	4603      	mov	r3, r0
 801b484:	461a      	mov	r2, r3
 801b486:	693b      	ldr	r3, [r7, #16]
 801b488:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b48a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b48c:	4618      	mov	r0, r3
 801b48e:	f7f8 f951 	bl	8013734 <lwip_htons>
 801b492:	4603      	mov	r3, r0
 801b494:	461a      	mov	r2, r3
 801b496:	693b      	ldr	r3, [r7, #16]
 801b498:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b49a:	693b      	ldr	r3, [r7, #16]
 801b49c:	687a      	ldr	r2, [r7, #4]
 801b49e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b4a0:	68f8      	ldr	r0, [r7, #12]
 801b4a2:	f7f8 f95d 	bl	8013760 <lwip_htonl>
 801b4a6:	4602      	mov	r2, r0
 801b4a8:	693b      	ldr	r3, [r7, #16]
 801b4aa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b4ac:	897b      	ldrh	r3, [r7, #10]
 801b4ae:	089b      	lsrs	r3, r3, #2
 801b4b0:	b29b      	uxth	r3, r3
 801b4b2:	3305      	adds	r3, #5
 801b4b4:	b29b      	uxth	r3, r3
 801b4b6:	031b      	lsls	r3, r3, #12
 801b4b8:	b29a      	uxth	r2, r3
 801b4ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801b4be:	b29b      	uxth	r3, r3
 801b4c0:	4313      	orrs	r3, r2
 801b4c2:	b29b      	uxth	r3, r3
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	f7f8 f935 	bl	8013734 <lwip_htons>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	461a      	mov	r2, r3
 801b4ce:	693b      	ldr	r3, [r7, #16]
 801b4d0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b4d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	f7f8 f92d 	bl	8013734 <lwip_htons>
 801b4da:	4603      	mov	r3, r0
 801b4dc:	461a      	mov	r2, r3
 801b4de:	693b      	ldr	r3, [r7, #16]
 801b4e0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b4e2:	693b      	ldr	r3, [r7, #16]
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	741a      	strb	r2, [r3, #16]
 801b4e8:	2200      	movs	r2, #0
 801b4ea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b4ec:	693b      	ldr	r3, [r7, #16]
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	749a      	strb	r2, [r3, #18]
 801b4f2:	2200      	movs	r2, #0
 801b4f4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b4f6:	697b      	ldr	r3, [r7, #20]
}
 801b4f8:	4618      	mov	r0, r3
 801b4fa:	3718      	adds	r7, #24
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	bd80      	pop	{r7, pc}
 801b500:	08024378 	.word	0x08024378
 801b504:	08024aac 	.word	0x08024aac
 801b508:	080243cc 	.word	0x080243cc

0801b50c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b50c:	b5b0      	push	{r4, r5, r7, lr}
 801b50e:	b08a      	sub	sp, #40	@ 0x28
 801b510:	af04      	add	r7, sp, #16
 801b512:	60f8      	str	r0, [r7, #12]
 801b514:	607b      	str	r3, [r7, #4]
 801b516:	460b      	mov	r3, r1
 801b518:	817b      	strh	r3, [r7, #10]
 801b51a:	4613      	mov	r3, r2
 801b51c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d106      	bne.n	801b532 <tcp_output_alloc_header+0x26>
 801b524:	4b15      	ldr	r3, [pc, #84]	@ (801b57c <tcp_output_alloc_header+0x70>)
 801b526:	f240 7242 	movw	r2, #1858	@ 0x742
 801b52a:	4915      	ldr	r1, [pc, #84]	@ (801b580 <tcp_output_alloc_header+0x74>)
 801b52c:	4815      	ldr	r0, [pc, #84]	@ (801b584 <tcp_output_alloc_header+0x78>)
 801b52e:	f005 f9e5 	bl	80208fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	8adb      	ldrh	r3, [r3, #22]
 801b53a:	68fa      	ldr	r2, [r7, #12]
 801b53c:	8b12      	ldrh	r2, [r2, #24]
 801b53e:	68f9      	ldr	r1, [r7, #12]
 801b540:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801b542:	893d      	ldrh	r5, [r7, #8]
 801b544:	897c      	ldrh	r4, [r7, #10]
 801b546:	9103      	str	r1, [sp, #12]
 801b548:	2110      	movs	r1, #16
 801b54a:	9102      	str	r1, [sp, #8]
 801b54c:	9201      	str	r2, [sp, #4]
 801b54e:	9300      	str	r3, [sp, #0]
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	462a      	mov	r2, r5
 801b554:	4621      	mov	r1, r4
 801b556:	f7ff ff67 	bl	801b428 <tcp_output_alloc_header_common>
 801b55a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b55c:	697b      	ldr	r3, [r7, #20]
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d006      	beq.n	801b570 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b566:	68fa      	ldr	r2, [r7, #12]
 801b568:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801b56a:	441a      	add	r2, r3
 801b56c:	68fb      	ldr	r3, [r7, #12]
 801b56e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801b570:	697b      	ldr	r3, [r7, #20]
}
 801b572:	4618      	mov	r0, r3
 801b574:	3718      	adds	r7, #24
 801b576:	46bd      	mov	sp, r7
 801b578:	bdb0      	pop	{r4, r5, r7, pc}
 801b57a:	bf00      	nop
 801b57c:	08024378 	.word	0x08024378
 801b580:	08024adc 	.word	0x08024adc
 801b584:	080243cc 	.word	0x080243cc

0801b588 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b588:	b580      	push	{r7, lr}
 801b58a:	b088      	sub	sp, #32
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	60f8      	str	r0, [r7, #12]
 801b590:	60b9      	str	r1, [r7, #8]
 801b592:	4611      	mov	r1, r2
 801b594:	461a      	mov	r2, r3
 801b596:	460b      	mov	r3, r1
 801b598:	71fb      	strb	r3, [r7, #7]
 801b59a:	4613      	mov	r3, r2
 801b59c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b59e:	2300      	movs	r3, #0
 801b5a0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b5a2:	68bb      	ldr	r3, [r7, #8]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d106      	bne.n	801b5b6 <tcp_output_fill_options+0x2e>
 801b5a8:	4b12      	ldr	r3, [pc, #72]	@ (801b5f4 <tcp_output_fill_options+0x6c>)
 801b5aa:	f240 7256 	movw	r2, #1878	@ 0x756
 801b5ae:	4912      	ldr	r1, [pc, #72]	@ (801b5f8 <tcp_output_fill_options+0x70>)
 801b5b0:	4812      	ldr	r0, [pc, #72]	@ (801b5fc <tcp_output_fill_options+0x74>)
 801b5b2:	f005 f9a3 	bl	80208fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b5b6:	68bb      	ldr	r3, [r7, #8]
 801b5b8:	685b      	ldr	r3, [r3, #4]
 801b5ba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b5bc:	69bb      	ldr	r3, [r7, #24]
 801b5be:	3314      	adds	r3, #20
 801b5c0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b5c2:	8bfb      	ldrh	r3, [r7, #30]
 801b5c4:	009b      	lsls	r3, r3, #2
 801b5c6:	461a      	mov	r2, r3
 801b5c8:	79fb      	ldrb	r3, [r7, #7]
 801b5ca:	009b      	lsls	r3, r3, #2
 801b5cc:	f003 0304 	and.w	r3, r3, #4
 801b5d0:	4413      	add	r3, r2
 801b5d2:	3314      	adds	r3, #20
 801b5d4:	69ba      	ldr	r2, [r7, #24]
 801b5d6:	4413      	add	r3, r2
 801b5d8:	697a      	ldr	r2, [r7, #20]
 801b5da:	429a      	cmp	r2, r3
 801b5dc:	d006      	beq.n	801b5ec <tcp_output_fill_options+0x64>
 801b5de:	4b05      	ldr	r3, [pc, #20]	@ (801b5f4 <tcp_output_fill_options+0x6c>)
 801b5e0:	f240 7275 	movw	r2, #1909	@ 0x775
 801b5e4:	4906      	ldr	r1, [pc, #24]	@ (801b600 <tcp_output_fill_options+0x78>)
 801b5e6:	4805      	ldr	r0, [pc, #20]	@ (801b5fc <tcp_output_fill_options+0x74>)
 801b5e8:	f005 f988 	bl	80208fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b5ec:	bf00      	nop
 801b5ee:	3720      	adds	r7, #32
 801b5f0:	46bd      	mov	sp, r7
 801b5f2:	bd80      	pop	{r7, pc}
 801b5f4:	08024378 	.word	0x08024378
 801b5f8:	08024b04 	.word	0x08024b04
 801b5fc:	080243cc 	.word	0x080243cc
 801b600:	080249fc 	.word	0x080249fc

0801b604 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b604:	b580      	push	{r7, lr}
 801b606:	b08a      	sub	sp, #40	@ 0x28
 801b608:	af04      	add	r7, sp, #16
 801b60a:	60f8      	str	r0, [r7, #12]
 801b60c:	60b9      	str	r1, [r7, #8]
 801b60e:	607a      	str	r2, [r7, #4]
 801b610:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b612:	68bb      	ldr	r3, [r7, #8]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d106      	bne.n	801b626 <tcp_output_control_segment+0x22>
 801b618:	4b1c      	ldr	r3, [pc, #112]	@ (801b68c <tcp_output_control_segment+0x88>)
 801b61a:	f240 7287 	movw	r2, #1927	@ 0x787
 801b61e:	491c      	ldr	r1, [pc, #112]	@ (801b690 <tcp_output_control_segment+0x8c>)
 801b620:	481c      	ldr	r0, [pc, #112]	@ (801b694 <tcp_output_control_segment+0x90>)
 801b622:	f005 f96b 	bl	80208fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b626:	683a      	ldr	r2, [r7, #0]
 801b628:	6879      	ldr	r1, [r7, #4]
 801b62a:	68f8      	ldr	r0, [r7, #12]
 801b62c:	f7fe fa7c 	bl	8019b28 <tcp_route>
 801b630:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b632:	693b      	ldr	r3, [r7, #16]
 801b634:	2b00      	cmp	r3, #0
 801b636:	d102      	bne.n	801b63e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b638:	23fc      	movs	r3, #252	@ 0xfc
 801b63a:	75fb      	strb	r3, [r7, #23]
 801b63c:	e01c      	b.n	801b678 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b63e:	68fb      	ldr	r3, [r7, #12]
 801b640:	2b00      	cmp	r3, #0
 801b642:	d006      	beq.n	801b652 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	7adb      	ldrb	r3, [r3, #11]
 801b648:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	7a9b      	ldrb	r3, [r3, #10]
 801b64e:	757b      	strb	r3, [r7, #21]
 801b650:	e003      	b.n	801b65a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b652:	23ff      	movs	r3, #255	@ 0xff
 801b654:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b656:	2300      	movs	r3, #0
 801b658:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b65a:	7dba      	ldrb	r2, [r7, #22]
 801b65c:	693b      	ldr	r3, [r7, #16]
 801b65e:	9302      	str	r3, [sp, #8]
 801b660:	2306      	movs	r3, #6
 801b662:	9301      	str	r3, [sp, #4]
 801b664:	7d7b      	ldrb	r3, [r7, #21]
 801b666:	9300      	str	r3, [sp, #0]
 801b668:	4613      	mov	r3, r2
 801b66a:	683a      	ldr	r2, [r7, #0]
 801b66c:	6879      	ldr	r1, [r7, #4]
 801b66e:	68b8      	ldr	r0, [r7, #8]
 801b670:	f002 fe1c 	bl	801e2ac <ip4_output_if>
 801b674:	4603      	mov	r3, r0
 801b676:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b678:	68b8      	ldr	r0, [r7, #8]
 801b67a:	f7f9 fdb5 	bl	80151e8 <pbuf_free>
  return err;
 801b67e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b682:	4618      	mov	r0, r3
 801b684:	3718      	adds	r7, #24
 801b686:	46bd      	mov	sp, r7
 801b688:	bd80      	pop	{r7, pc}
 801b68a:	bf00      	nop
 801b68c:	08024378 	.word	0x08024378
 801b690:	08024b2c 	.word	0x08024b2c
 801b694:	080243cc 	.word	0x080243cc

0801b698 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b698:	b590      	push	{r4, r7, lr}
 801b69a:	b08b      	sub	sp, #44	@ 0x2c
 801b69c:	af04      	add	r7, sp, #16
 801b69e:	60f8      	str	r0, [r7, #12]
 801b6a0:	60b9      	str	r1, [r7, #8]
 801b6a2:	607a      	str	r2, [r7, #4]
 801b6a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b6a6:	683b      	ldr	r3, [r7, #0]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d106      	bne.n	801b6ba <tcp_rst+0x22>
 801b6ac:	4b1f      	ldr	r3, [pc, #124]	@ (801b72c <tcp_rst+0x94>)
 801b6ae:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801b6b2:	491f      	ldr	r1, [pc, #124]	@ (801b730 <tcp_rst+0x98>)
 801b6b4:	481f      	ldr	r0, [pc, #124]	@ (801b734 <tcp_rst+0x9c>)
 801b6b6:	f005 f921 	bl	80208fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d106      	bne.n	801b6ce <tcp_rst+0x36>
 801b6c0:	4b1a      	ldr	r3, [pc, #104]	@ (801b72c <tcp_rst+0x94>)
 801b6c2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801b6c6:	491c      	ldr	r1, [pc, #112]	@ (801b738 <tcp_rst+0xa0>)
 801b6c8:	481a      	ldr	r0, [pc, #104]	@ (801b734 <tcp_rst+0x9c>)
 801b6ca:	f005 f917 	bl	80208fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b6ce:	2300      	movs	r3, #0
 801b6d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b6d2:	f246 0308 	movw	r3, #24584	@ 0x6008
 801b6d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b6d8:	7dfb      	ldrb	r3, [r7, #23]
 801b6da:	b29c      	uxth	r4, r3
 801b6dc:	68b8      	ldr	r0, [r7, #8]
 801b6de:	f7f8 f83f 	bl	8013760 <lwip_htonl>
 801b6e2:	4602      	mov	r2, r0
 801b6e4:	8abb      	ldrh	r3, [r7, #20]
 801b6e6:	9303      	str	r3, [sp, #12]
 801b6e8:	2314      	movs	r3, #20
 801b6ea:	9302      	str	r3, [sp, #8]
 801b6ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801b6ee:	9301      	str	r3, [sp, #4]
 801b6f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b6f2:	9300      	str	r3, [sp, #0]
 801b6f4:	4613      	mov	r3, r2
 801b6f6:	2200      	movs	r2, #0
 801b6f8:	4621      	mov	r1, r4
 801b6fa:	6878      	ldr	r0, [r7, #4]
 801b6fc:	f7ff fe94 	bl	801b428 <tcp_output_alloc_header_common>
 801b700:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b702:	693b      	ldr	r3, [r7, #16]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d00c      	beq.n	801b722 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b708:	7dfb      	ldrb	r3, [r7, #23]
 801b70a:	2200      	movs	r2, #0
 801b70c:	6939      	ldr	r1, [r7, #16]
 801b70e:	68f8      	ldr	r0, [r7, #12]
 801b710:	f7ff ff3a 	bl	801b588 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b716:	683a      	ldr	r2, [r7, #0]
 801b718:	6939      	ldr	r1, [r7, #16]
 801b71a:	68f8      	ldr	r0, [r7, #12]
 801b71c:	f7ff ff72 	bl	801b604 <tcp_output_control_segment>
 801b720:	e000      	b.n	801b724 <tcp_rst+0x8c>
    return;
 801b722:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b724:	371c      	adds	r7, #28
 801b726:	46bd      	mov	sp, r7
 801b728:	bd90      	pop	{r4, r7, pc}
 801b72a:	bf00      	nop
 801b72c:	08024378 	.word	0x08024378
 801b730:	08024b58 	.word	0x08024b58
 801b734:	080243cc 	.word	0x080243cc
 801b738:	08024b74 	.word	0x08024b74

0801b73c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b73c:	b590      	push	{r4, r7, lr}
 801b73e:	b087      	sub	sp, #28
 801b740:	af00      	add	r7, sp, #0
 801b742:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b744:	2300      	movs	r3, #0
 801b746:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b748:	2300      	movs	r3, #0
 801b74a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d106      	bne.n	801b760 <tcp_send_empty_ack+0x24>
 801b752:	4b28      	ldr	r3, [pc, #160]	@ (801b7f4 <tcp_send_empty_ack+0xb8>)
 801b754:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801b758:	4927      	ldr	r1, [pc, #156]	@ (801b7f8 <tcp_send_empty_ack+0xbc>)
 801b75a:	4828      	ldr	r0, [pc, #160]	@ (801b7fc <tcp_send_empty_ack+0xc0>)
 801b75c:	f005 f8ce 	bl	80208fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b760:	7dfb      	ldrb	r3, [r7, #23]
 801b762:	009b      	lsls	r3, r3, #2
 801b764:	b2db      	uxtb	r3, r3
 801b766:	f003 0304 	and.w	r3, r3, #4
 801b76a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b76c:	7d7b      	ldrb	r3, [r7, #21]
 801b76e:	b29c      	uxth	r4, r3
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b774:	4618      	mov	r0, r3
 801b776:	f7f7 fff3 	bl	8013760 <lwip_htonl>
 801b77a:	4603      	mov	r3, r0
 801b77c:	2200      	movs	r2, #0
 801b77e:	4621      	mov	r1, r4
 801b780:	6878      	ldr	r0, [r7, #4]
 801b782:	f7ff fec3 	bl	801b50c <tcp_output_alloc_header>
 801b786:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b788:	693b      	ldr	r3, [r7, #16]
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d109      	bne.n	801b7a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	8b5b      	ldrh	r3, [r3, #26]
 801b792:	f043 0303 	orr.w	r3, r3, #3
 801b796:	b29a      	uxth	r2, r3
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b79c:	f06f 0301 	mvn.w	r3, #1
 801b7a0:	e023      	b.n	801b7ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b7a2:	7dbb      	ldrb	r3, [r7, #22]
 801b7a4:	7dfa      	ldrb	r2, [r7, #23]
 801b7a6:	6939      	ldr	r1, [r7, #16]
 801b7a8:	6878      	ldr	r0, [r7, #4]
 801b7aa:	f7ff feed 	bl	801b588 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b7ae:	687a      	ldr	r2, [r7, #4]
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	3304      	adds	r3, #4
 801b7b4:	6939      	ldr	r1, [r7, #16]
 801b7b6:	6878      	ldr	r0, [r7, #4]
 801b7b8:	f7ff ff24 	bl	801b604 <tcp_output_control_segment>
 801b7bc:	4603      	mov	r3, r0
 801b7be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b7c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d007      	beq.n	801b7d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	8b5b      	ldrh	r3, [r3, #26]
 801b7cc:	f043 0303 	orr.w	r3, r3, #3
 801b7d0:	b29a      	uxth	r2, r3
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	835a      	strh	r2, [r3, #26]
 801b7d6:	e006      	b.n	801b7e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	8b5b      	ldrh	r3, [r3, #26]
 801b7dc:	f023 0303 	bic.w	r3, r3, #3
 801b7e0:	b29a      	uxth	r2, r3
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b7e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b7ea:	4618      	mov	r0, r3
 801b7ec:	371c      	adds	r7, #28
 801b7ee:	46bd      	mov	sp, r7
 801b7f0:	bd90      	pop	{r4, r7, pc}
 801b7f2:	bf00      	nop
 801b7f4:	08024378 	.word	0x08024378
 801b7f8:	08024b90 	.word	0x08024b90
 801b7fc:	080243cc 	.word	0x080243cc

0801b800 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b800:	b590      	push	{r4, r7, lr}
 801b802:	b085      	sub	sp, #20
 801b804:	af00      	add	r7, sp, #0
 801b806:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b808:	2300      	movs	r3, #0
 801b80a:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d106      	bne.n	801b820 <tcp_keepalive+0x20>
 801b812:	4b18      	ldr	r3, [pc, #96]	@ (801b874 <tcp_keepalive+0x74>)
 801b814:	f640 0224 	movw	r2, #2084	@ 0x824
 801b818:	4917      	ldr	r1, [pc, #92]	@ (801b878 <tcp_keepalive+0x78>)
 801b81a:	4818      	ldr	r0, [pc, #96]	@ (801b87c <tcp_keepalive+0x7c>)
 801b81c:	f005 f86e 	bl	80208fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b820:	7abb      	ldrb	r3, [r7, #10]
 801b822:	b29c      	uxth	r4, r3
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b828:	3b01      	subs	r3, #1
 801b82a:	4618      	mov	r0, r3
 801b82c:	f7f7 ff98 	bl	8013760 <lwip_htonl>
 801b830:	4603      	mov	r3, r0
 801b832:	2200      	movs	r2, #0
 801b834:	4621      	mov	r1, r4
 801b836:	6878      	ldr	r0, [r7, #4]
 801b838:	f7ff fe68 	bl	801b50c <tcp_output_alloc_header>
 801b83c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d102      	bne.n	801b84a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b844:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b848:	e010      	b.n	801b86c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b84a:	7abb      	ldrb	r3, [r7, #10]
 801b84c:	2200      	movs	r2, #0
 801b84e:	68f9      	ldr	r1, [r7, #12]
 801b850:	6878      	ldr	r0, [r7, #4]
 801b852:	f7ff fe99 	bl	801b588 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b856:	687a      	ldr	r2, [r7, #4]
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	3304      	adds	r3, #4
 801b85c:	68f9      	ldr	r1, [r7, #12]
 801b85e:	6878      	ldr	r0, [r7, #4]
 801b860:	f7ff fed0 	bl	801b604 <tcp_output_control_segment>
 801b864:	4603      	mov	r3, r0
 801b866:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b868:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b86c:	4618      	mov	r0, r3
 801b86e:	3714      	adds	r7, #20
 801b870:	46bd      	mov	sp, r7
 801b872:	bd90      	pop	{r4, r7, pc}
 801b874:	08024378 	.word	0x08024378
 801b878:	08024bb0 	.word	0x08024bb0
 801b87c:	080243cc 	.word	0x080243cc

0801b880 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b880:	b590      	push	{r4, r7, lr}
 801b882:	b08b      	sub	sp, #44	@ 0x2c
 801b884:	af00      	add	r7, sp, #0
 801b886:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b888:	2300      	movs	r3, #0
 801b88a:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d106      	bne.n	801b8a0 <tcp_zero_window_probe+0x20>
 801b892:	4b4d      	ldr	r3, [pc, #308]	@ (801b9c8 <tcp_zero_window_probe+0x148>)
 801b894:	f640 024f 	movw	r2, #2127	@ 0x84f
 801b898:	494c      	ldr	r1, [pc, #304]	@ (801b9cc <tcp_zero_window_probe+0x14c>)
 801b89a:	484d      	ldr	r0, [pc, #308]	@ (801b9d0 <tcp_zero_window_probe+0x150>)
 801b89c:	f005 f82e 	bl	80208fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b8a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 801b8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d101      	bne.n	801b8b0 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b8ac:	2300      	movs	r3, #0
 801b8ae:	e087      	b.n	801b9c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b8b6:	2bff      	cmp	r3, #255	@ 0xff
 801b8b8:	d007      	beq.n	801b8ca <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b8c0:	3301      	adds	r3, #1
 801b8c2:	b2da      	uxtb	r2, r3
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8cc:	691b      	ldr	r3, [r3, #16]
 801b8ce:	899b      	ldrh	r3, [r3, #12]
 801b8d0:	b29b      	uxth	r3, r3
 801b8d2:	4618      	mov	r0, r3
 801b8d4:	f7f7 ff2e 	bl	8013734 <lwip_htons>
 801b8d8:	4603      	mov	r3, r0
 801b8da:	b2db      	uxtb	r3, r3
 801b8dc:	f003 0301 	and.w	r3, r3, #1
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d005      	beq.n	801b8f0 <tcp_zero_window_probe+0x70>
 801b8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8e6:	891b      	ldrh	r3, [r3, #8]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d101      	bne.n	801b8f0 <tcp_zero_window_probe+0x70>
 801b8ec:	2301      	movs	r3, #1
 801b8ee:	e000      	b.n	801b8f2 <tcp_zero_window_probe+0x72>
 801b8f0:	2300      	movs	r3, #0
 801b8f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b8f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	bf0c      	ite	eq
 801b8fe:	2301      	moveq	r3, #1
 801b900:	2300      	movne	r3, #0
 801b902:	b2db      	uxtb	r3, r3
 801b904:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b906:	7cfb      	ldrb	r3, [r7, #19]
 801b908:	b299      	uxth	r1, r3
 801b90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b90c:	691b      	ldr	r3, [r3, #16]
 801b90e:	685b      	ldr	r3, [r3, #4]
 801b910:	8c3a      	ldrh	r2, [r7, #32]
 801b912:	6878      	ldr	r0, [r7, #4]
 801b914:	f7ff fdfa 	bl	801b50c <tcp_output_alloc_header>
 801b918:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801b91a:	69fb      	ldr	r3, [r7, #28]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d102      	bne.n	801b926 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b924:	e04c      	b.n	801b9c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b926:	69fb      	ldr	r3, [r7, #28]
 801b928:	685b      	ldr	r3, [r3, #4]
 801b92a:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801b92c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b930:	2b00      	cmp	r3, #0
 801b932:	d011      	beq.n	801b958 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b934:	69bb      	ldr	r3, [r7, #24]
 801b936:	899b      	ldrh	r3, [r3, #12]
 801b938:	b29b      	uxth	r3, r3
 801b93a:	b21b      	sxth	r3, r3
 801b93c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801b940:	b21c      	sxth	r4, r3
 801b942:	2011      	movs	r0, #17
 801b944:	f7f7 fef6 	bl	8013734 <lwip_htons>
 801b948:	4603      	mov	r3, r0
 801b94a:	b21b      	sxth	r3, r3
 801b94c:	4323      	orrs	r3, r4
 801b94e:	b21b      	sxth	r3, r3
 801b950:	b29a      	uxth	r2, r3
 801b952:	69bb      	ldr	r3, [r7, #24]
 801b954:	819a      	strh	r2, [r3, #12]
 801b956:	e010      	b.n	801b97a <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b958:	69fb      	ldr	r3, [r7, #28]
 801b95a:	685b      	ldr	r3, [r3, #4]
 801b95c:	3314      	adds	r3, #20
 801b95e:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b962:	6858      	ldr	r0, [r3, #4]
 801b964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b966:	685b      	ldr	r3, [r3, #4]
 801b968:	891a      	ldrh	r2, [r3, #8]
 801b96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b96c:	891b      	ldrh	r3, [r3, #8]
 801b96e:	1ad3      	subs	r3, r2, r3
 801b970:	b29b      	uxth	r3, r3
 801b972:	2201      	movs	r2, #1
 801b974:	6979      	ldr	r1, [r7, #20]
 801b976:	f7f9 fe69 	bl	801564c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b97c:	691b      	ldr	r3, [r3, #16]
 801b97e:	685b      	ldr	r3, [r3, #4]
 801b980:	4618      	mov	r0, r3
 801b982:	f7f7 feed 	bl	8013760 <lwip_htonl>
 801b986:	4603      	mov	r3, r0
 801b988:	3301      	adds	r3, #1
 801b98a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	1ad3      	subs	r3, r2, r3
 801b994:	2b00      	cmp	r3, #0
 801b996:	da02      	bge.n	801b99e <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	68fa      	ldr	r2, [r7, #12]
 801b99c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b99e:	7cfb      	ldrb	r3, [r7, #19]
 801b9a0:	2200      	movs	r2, #0
 801b9a2:	69f9      	ldr	r1, [r7, #28]
 801b9a4:	6878      	ldr	r0, [r7, #4]
 801b9a6:	f7ff fdef 	bl	801b588 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b9aa:	687a      	ldr	r2, [r7, #4]
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	3304      	adds	r3, #4
 801b9b0:	69f9      	ldr	r1, [r7, #28]
 801b9b2:	6878      	ldr	r0, [r7, #4]
 801b9b4:	f7ff fe26 	bl	801b604 <tcp_output_control_segment>
 801b9b8:	4603      	mov	r3, r0
 801b9ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b9bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	372c      	adds	r7, #44	@ 0x2c
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	bd90      	pop	{r4, r7, pc}
 801b9c8:	08024378 	.word	0x08024378
 801b9cc:	08024bcc 	.word	0x08024bcc
 801b9d0:	080243cc 	.word	0x080243cc

0801b9d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	b082      	sub	sp, #8
 801b9d8:	af00      	add	r7, sp, #0
 801b9da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b9dc:	f7f9 ff24 	bl	8015828 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b9e0:	4b0a      	ldr	r3, [pc, #40]	@ (801ba0c <tcpip_tcp_timer+0x38>)
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d103      	bne.n	801b9f0 <tcpip_tcp_timer+0x1c>
 801b9e8:	4b09      	ldr	r3, [pc, #36]	@ (801ba10 <tcpip_tcp_timer+0x3c>)
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d005      	beq.n	801b9fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b9f0:	2200      	movs	r2, #0
 801b9f2:	4908      	ldr	r1, [pc, #32]	@ (801ba14 <tcpip_tcp_timer+0x40>)
 801b9f4:	20fa      	movs	r0, #250	@ 0xfa
 801b9f6:	f000 f8f3 	bl	801bbe0 <sys_timeout>
 801b9fa:	e003      	b.n	801ba04 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b9fc:	4b06      	ldr	r3, [pc, #24]	@ (801ba18 <tcpip_tcp_timer+0x44>)
 801b9fe:	2200      	movs	r2, #0
 801ba00:	601a      	str	r2, [r3, #0]
  }
}
 801ba02:	bf00      	nop
 801ba04:	bf00      	nop
 801ba06:	3708      	adds	r7, #8
 801ba08:	46bd      	mov	sp, r7
 801ba0a:	bd80      	pop	{r7, pc}
 801ba0c:	20022ab4 	.word	0x20022ab4
 801ba10:	20022ab8 	.word	0x20022ab8
 801ba14:	0801b9d5 	.word	0x0801b9d5
 801ba18:	20022b04 	.word	0x20022b04

0801ba1c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801ba1c:	b580      	push	{r7, lr}
 801ba1e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801ba20:	4b0a      	ldr	r3, [pc, #40]	@ (801ba4c <tcp_timer_needed+0x30>)
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d10f      	bne.n	801ba48 <tcp_timer_needed+0x2c>
 801ba28:	4b09      	ldr	r3, [pc, #36]	@ (801ba50 <tcp_timer_needed+0x34>)
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d103      	bne.n	801ba38 <tcp_timer_needed+0x1c>
 801ba30:	4b08      	ldr	r3, [pc, #32]	@ (801ba54 <tcp_timer_needed+0x38>)
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d007      	beq.n	801ba48 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801ba38:	4b04      	ldr	r3, [pc, #16]	@ (801ba4c <tcp_timer_needed+0x30>)
 801ba3a:	2201      	movs	r2, #1
 801ba3c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801ba3e:	2200      	movs	r2, #0
 801ba40:	4905      	ldr	r1, [pc, #20]	@ (801ba58 <tcp_timer_needed+0x3c>)
 801ba42:	20fa      	movs	r0, #250	@ 0xfa
 801ba44:	f000 f8cc 	bl	801bbe0 <sys_timeout>
  }
}
 801ba48:	bf00      	nop
 801ba4a:	bd80      	pop	{r7, pc}
 801ba4c:	20022b04 	.word	0x20022b04
 801ba50:	20022ab4 	.word	0x20022ab4
 801ba54:	20022ab8 	.word	0x20022ab8
 801ba58:	0801b9d5 	.word	0x0801b9d5

0801ba5c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ba5c:	b580      	push	{r7, lr}
 801ba5e:	b086      	sub	sp, #24
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	60f8      	str	r0, [r7, #12]
 801ba64:	60b9      	str	r1, [r7, #8]
 801ba66:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ba68:	200a      	movs	r0, #10
 801ba6a:	f7f8 fb61 	bl	8014130 <memp_malloc>
 801ba6e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801ba70:	693b      	ldr	r3, [r7, #16]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d109      	bne.n	801ba8a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ba76:	693b      	ldr	r3, [r7, #16]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d151      	bne.n	801bb20 <sys_timeout_abs+0xc4>
 801ba7c:	4b2a      	ldr	r3, [pc, #168]	@ (801bb28 <sys_timeout_abs+0xcc>)
 801ba7e:	22be      	movs	r2, #190	@ 0xbe
 801ba80:	492a      	ldr	r1, [pc, #168]	@ (801bb2c <sys_timeout_abs+0xd0>)
 801ba82:	482b      	ldr	r0, [pc, #172]	@ (801bb30 <sys_timeout_abs+0xd4>)
 801ba84:	f004 ff3a 	bl	80208fc <iprintf>
    return;
 801ba88:	e04a      	b.n	801bb20 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ba8a:	693b      	ldr	r3, [r7, #16]
 801ba8c:	2200      	movs	r2, #0
 801ba8e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ba90:	693b      	ldr	r3, [r7, #16]
 801ba92:	68ba      	ldr	r2, [r7, #8]
 801ba94:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801ba96:	693b      	ldr	r3, [r7, #16]
 801ba98:	687a      	ldr	r2, [r7, #4]
 801ba9a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ba9c:	693b      	ldr	r3, [r7, #16]
 801ba9e:	68fa      	ldr	r2, [r7, #12]
 801baa0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801baa2:	4b24      	ldr	r3, [pc, #144]	@ (801bb34 <sys_timeout_abs+0xd8>)
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d103      	bne.n	801bab2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801baaa:	4a22      	ldr	r2, [pc, #136]	@ (801bb34 <sys_timeout_abs+0xd8>)
 801baac:	693b      	ldr	r3, [r7, #16]
 801baae:	6013      	str	r3, [r2, #0]
    return;
 801bab0:	e037      	b.n	801bb22 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801bab2:	693b      	ldr	r3, [r7, #16]
 801bab4:	685a      	ldr	r2, [r3, #4]
 801bab6:	4b1f      	ldr	r3, [pc, #124]	@ (801bb34 <sys_timeout_abs+0xd8>)
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	685b      	ldr	r3, [r3, #4]
 801babc:	1ad3      	subs	r3, r2, r3
 801babe:	0fdb      	lsrs	r3, r3, #31
 801bac0:	f003 0301 	and.w	r3, r3, #1
 801bac4:	b2db      	uxtb	r3, r3
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d007      	beq.n	801bada <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801baca:	4b1a      	ldr	r3, [pc, #104]	@ (801bb34 <sys_timeout_abs+0xd8>)
 801bacc:	681a      	ldr	r2, [r3, #0]
 801bace:	693b      	ldr	r3, [r7, #16]
 801bad0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801bad2:	4a18      	ldr	r2, [pc, #96]	@ (801bb34 <sys_timeout_abs+0xd8>)
 801bad4:	693b      	ldr	r3, [r7, #16]
 801bad6:	6013      	str	r3, [r2, #0]
 801bad8:	e023      	b.n	801bb22 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801bada:	4b16      	ldr	r3, [pc, #88]	@ (801bb34 <sys_timeout_abs+0xd8>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	617b      	str	r3, [r7, #20]
 801bae0:	e01a      	b.n	801bb18 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801bae2:	697b      	ldr	r3, [r7, #20]
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d00b      	beq.n	801bb02 <sys_timeout_abs+0xa6>
 801baea:	693b      	ldr	r3, [r7, #16]
 801baec:	685a      	ldr	r2, [r3, #4]
 801baee:	697b      	ldr	r3, [r7, #20]
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	685b      	ldr	r3, [r3, #4]
 801baf4:	1ad3      	subs	r3, r2, r3
 801baf6:	0fdb      	lsrs	r3, r3, #31
 801baf8:	f003 0301 	and.w	r3, r3, #1
 801bafc:	b2db      	uxtb	r3, r3
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d007      	beq.n	801bb12 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801bb02:	697b      	ldr	r3, [r7, #20]
 801bb04:	681a      	ldr	r2, [r3, #0]
 801bb06:	693b      	ldr	r3, [r7, #16]
 801bb08:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801bb0a:	697b      	ldr	r3, [r7, #20]
 801bb0c:	693a      	ldr	r2, [r7, #16]
 801bb0e:	601a      	str	r2, [r3, #0]
        break;
 801bb10:	e007      	b.n	801bb22 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801bb12:	697b      	ldr	r3, [r7, #20]
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	617b      	str	r3, [r7, #20]
 801bb18:	697b      	ldr	r3, [r7, #20]
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d1e1      	bne.n	801bae2 <sys_timeout_abs+0x86>
 801bb1e:	e000      	b.n	801bb22 <sys_timeout_abs+0xc6>
    return;
 801bb20:	bf00      	nop
      }
    }
  }
}
 801bb22:	3718      	adds	r7, #24
 801bb24:	46bd      	mov	sp, r7
 801bb26:	bd80      	pop	{r7, pc}
 801bb28:	08024bf0 	.word	0x08024bf0
 801bb2c:	08024c24 	.word	0x08024c24
 801bb30:	08024c64 	.word	0x08024c64
 801bb34:	20022afc 	.word	0x20022afc

0801bb38 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801bb38:	b580      	push	{r7, lr}
 801bb3a:	b086      	sub	sp, #24
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801bb44:	697b      	ldr	r3, [r7, #20]
 801bb46:	685b      	ldr	r3, [r3, #4]
 801bb48:	4798      	blx	r3

  now = sys_now();
 801bb4a:	f7f0 fd63 	bl	800c614 <sys_now>
 801bb4e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801bb50:	697b      	ldr	r3, [r7, #20]
 801bb52:	681a      	ldr	r2, [r3, #0]
 801bb54:	4b0f      	ldr	r3, [pc, #60]	@ (801bb94 <lwip_cyclic_timer+0x5c>)
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	4413      	add	r3, r2
 801bb5a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801bb5c:	68fa      	ldr	r2, [r7, #12]
 801bb5e:	693b      	ldr	r3, [r7, #16]
 801bb60:	1ad3      	subs	r3, r2, r3
 801bb62:	0fdb      	lsrs	r3, r3, #31
 801bb64:	f003 0301 	and.w	r3, r3, #1
 801bb68:	b2db      	uxtb	r3, r3
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d009      	beq.n	801bb82 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801bb6e:	697b      	ldr	r3, [r7, #20]
 801bb70:	681a      	ldr	r2, [r3, #0]
 801bb72:	693b      	ldr	r3, [r7, #16]
 801bb74:	4413      	add	r3, r2
 801bb76:	687a      	ldr	r2, [r7, #4]
 801bb78:	4907      	ldr	r1, [pc, #28]	@ (801bb98 <lwip_cyclic_timer+0x60>)
 801bb7a:	4618      	mov	r0, r3
 801bb7c:	f7ff ff6e 	bl	801ba5c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801bb80:	e004      	b.n	801bb8c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801bb82:	687a      	ldr	r2, [r7, #4]
 801bb84:	4904      	ldr	r1, [pc, #16]	@ (801bb98 <lwip_cyclic_timer+0x60>)
 801bb86:	68f8      	ldr	r0, [r7, #12]
 801bb88:	f7ff ff68 	bl	801ba5c <sys_timeout_abs>
}
 801bb8c:	bf00      	nop
 801bb8e:	3718      	adds	r7, #24
 801bb90:	46bd      	mov	sp, r7
 801bb92:	bd80      	pop	{r7, pc}
 801bb94:	20022b00 	.word	0x20022b00
 801bb98:	0801bb39 	.word	0x0801bb39

0801bb9c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b082      	sub	sp, #8
 801bba0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bba2:	2301      	movs	r3, #1
 801bba4:	607b      	str	r3, [r7, #4]
 801bba6:	e00e      	b.n	801bbc6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801bba8:	4a0b      	ldr	r2, [pc, #44]	@ (801bbd8 <sys_timeouts_init+0x3c>)
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	00db      	lsls	r3, r3, #3
 801bbb4:	4a08      	ldr	r2, [pc, #32]	@ (801bbd8 <sys_timeouts_init+0x3c>)
 801bbb6:	4413      	add	r3, r2
 801bbb8:	461a      	mov	r2, r3
 801bbba:	4908      	ldr	r1, [pc, #32]	@ (801bbdc <sys_timeouts_init+0x40>)
 801bbbc:	f000 f810 	bl	801bbe0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	3301      	adds	r3, #1
 801bbc4:	607b      	str	r3, [r7, #4]
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	2b02      	cmp	r3, #2
 801bbca:	d9ed      	bls.n	801bba8 <sys_timeouts_init+0xc>
  }
}
 801bbcc:	bf00      	nop
 801bbce:	bf00      	nop
 801bbd0:	3708      	adds	r7, #8
 801bbd2:	46bd      	mov	sp, r7
 801bbd4:	bd80      	pop	{r7, pc}
 801bbd6:	bf00      	nop
 801bbd8:	08026408 	.word	0x08026408
 801bbdc:	0801bb39 	.word	0x0801bb39

0801bbe0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801bbe0:	b580      	push	{r7, lr}
 801bbe2:	b086      	sub	sp, #24
 801bbe4:	af00      	add	r7, sp, #0
 801bbe6:	60f8      	str	r0, [r7, #12]
 801bbe8:	60b9      	str	r1, [r7, #8]
 801bbea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bbf2:	d306      	bcc.n	801bc02 <sys_timeout+0x22>
 801bbf4:	4b0a      	ldr	r3, [pc, #40]	@ (801bc20 <sys_timeout+0x40>)
 801bbf6:	f240 1229 	movw	r2, #297	@ 0x129
 801bbfa:	490a      	ldr	r1, [pc, #40]	@ (801bc24 <sys_timeout+0x44>)
 801bbfc:	480a      	ldr	r0, [pc, #40]	@ (801bc28 <sys_timeout+0x48>)
 801bbfe:	f004 fe7d 	bl	80208fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801bc02:	f7f0 fd07 	bl	800c614 <sys_now>
 801bc06:	4602      	mov	r2, r0
 801bc08:	68fb      	ldr	r3, [r7, #12]
 801bc0a:	4413      	add	r3, r2
 801bc0c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801bc0e:	687a      	ldr	r2, [r7, #4]
 801bc10:	68b9      	ldr	r1, [r7, #8]
 801bc12:	6978      	ldr	r0, [r7, #20]
 801bc14:	f7ff ff22 	bl	801ba5c <sys_timeout_abs>
#endif
}
 801bc18:	bf00      	nop
 801bc1a:	3718      	adds	r7, #24
 801bc1c:	46bd      	mov	sp, r7
 801bc1e:	bd80      	pop	{r7, pc}
 801bc20:	08024bf0 	.word	0x08024bf0
 801bc24:	08024c8c 	.word	0x08024c8c
 801bc28:	08024c64 	.word	0x08024c64

0801bc2c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801bc2c:	b580      	push	{r7, lr}
 801bc2e:	b084      	sub	sp, #16
 801bc30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801bc32:	f7f0 fcef 	bl	800c614 <sys_now>
 801bc36:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801bc38:	4b17      	ldr	r3, [pc, #92]	@ (801bc98 <sys_check_timeouts+0x6c>)
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801bc3e:	68bb      	ldr	r3, [r7, #8]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d022      	beq.n	801bc8a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801bc44:	68bb      	ldr	r3, [r7, #8]
 801bc46:	685b      	ldr	r3, [r3, #4]
 801bc48:	68fa      	ldr	r2, [r7, #12]
 801bc4a:	1ad3      	subs	r3, r2, r3
 801bc4c:	0fdb      	lsrs	r3, r3, #31
 801bc4e:	f003 0301 	and.w	r3, r3, #1
 801bc52:	b2db      	uxtb	r3, r3
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d11a      	bne.n	801bc8e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801bc58:	68bb      	ldr	r3, [r7, #8]
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	4a0e      	ldr	r2, [pc, #56]	@ (801bc98 <sys_check_timeouts+0x6c>)
 801bc5e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801bc60:	68bb      	ldr	r3, [r7, #8]
 801bc62:	689b      	ldr	r3, [r3, #8]
 801bc64:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801bc66:	68bb      	ldr	r3, [r7, #8]
 801bc68:	68db      	ldr	r3, [r3, #12]
 801bc6a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801bc6c:	68bb      	ldr	r3, [r7, #8]
 801bc6e:	685b      	ldr	r3, [r3, #4]
 801bc70:	4a0a      	ldr	r2, [pc, #40]	@ (801bc9c <sys_check_timeouts+0x70>)
 801bc72:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801bc74:	68b9      	ldr	r1, [r7, #8]
 801bc76:	200a      	movs	r0, #10
 801bc78:	f7f8 fad0 	bl	801421c <memp_free>
    if (handler != NULL) {
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d0da      	beq.n	801bc38 <sys_check_timeouts+0xc>
      handler(arg);
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	6838      	ldr	r0, [r7, #0]
 801bc86:	4798      	blx	r3
  do {
 801bc88:	e7d6      	b.n	801bc38 <sys_check_timeouts+0xc>
      return;
 801bc8a:	bf00      	nop
 801bc8c:	e000      	b.n	801bc90 <sys_check_timeouts+0x64>
      return;
 801bc8e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801bc90:	3710      	adds	r7, #16
 801bc92:	46bd      	mov	sp, r7
 801bc94:	bd80      	pop	{r7, pc}
 801bc96:	bf00      	nop
 801bc98:	20022afc 	.word	0x20022afc
 801bc9c:	20022b00 	.word	0x20022b00

0801bca0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b082      	sub	sp, #8
 801bca4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801bca6:	4b16      	ldr	r3, [pc, #88]	@ (801bd00 <sys_timeouts_sleeptime+0x60>)
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d102      	bne.n	801bcb4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801bcae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bcb2:	e020      	b.n	801bcf6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801bcb4:	f7f0 fcae 	bl	800c614 <sys_now>
 801bcb8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801bcba:	4b11      	ldr	r3, [pc, #68]	@ (801bd00 <sys_timeouts_sleeptime+0x60>)
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	685a      	ldr	r2, [r3, #4]
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	1ad3      	subs	r3, r2, r3
 801bcc4:	0fdb      	lsrs	r3, r3, #31
 801bcc6:	f003 0301 	and.w	r3, r3, #1
 801bcca:	b2db      	uxtb	r3, r3
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d001      	beq.n	801bcd4 <sys_timeouts_sleeptime+0x34>
    return 0;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	e010      	b.n	801bcf6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801bcd4:	4b0a      	ldr	r3, [pc, #40]	@ (801bd00 <sys_timeouts_sleeptime+0x60>)
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	685a      	ldr	r2, [r3, #4]
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	1ad3      	subs	r3, r2, r3
 801bcde:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801bce0:	683b      	ldr	r3, [r7, #0]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	da06      	bge.n	801bcf4 <sys_timeouts_sleeptime+0x54>
 801bce6:	4b07      	ldr	r3, [pc, #28]	@ (801bd04 <sys_timeouts_sleeptime+0x64>)
 801bce8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801bcec:	4906      	ldr	r1, [pc, #24]	@ (801bd08 <sys_timeouts_sleeptime+0x68>)
 801bcee:	4807      	ldr	r0, [pc, #28]	@ (801bd0c <sys_timeouts_sleeptime+0x6c>)
 801bcf0:	f004 fe04 	bl	80208fc <iprintf>
    return ret;
 801bcf4:	683b      	ldr	r3, [r7, #0]
  }
}
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	3708      	adds	r7, #8
 801bcfa:	46bd      	mov	sp, r7
 801bcfc:	bd80      	pop	{r7, pc}
 801bcfe:	bf00      	nop
 801bd00:	20022afc 	.word	0x20022afc
 801bd04:	08024bf0 	.word	0x08024bf0
 801bd08:	08024cc4 	.word	0x08024cc4
 801bd0c:	08024c64 	.word	0x08024c64

0801bd10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801bd10:	b580      	push	{r7, lr}
 801bd12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801bd14:	f004 fcf2 	bl	80206fc <rand>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	b29b      	uxth	r3, r3
 801bd1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801bd20:	b29b      	uxth	r3, r3
 801bd22:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801bd26:	b29a      	uxth	r2, r3
 801bd28:	4b01      	ldr	r3, [pc, #4]	@ (801bd30 <udp_init+0x20>)
 801bd2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801bd2c:	bf00      	nop
 801bd2e:	bd80      	pop	{r7, pc}
 801bd30:	20000070 	.word	0x20000070

0801bd34 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801bd34:	b480      	push	{r7}
 801bd36:	b083      	sub	sp, #12
 801bd38:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801bd3a:	2300      	movs	r3, #0
 801bd3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801bd3e:	4b17      	ldr	r3, [pc, #92]	@ (801bd9c <udp_new_port+0x68>)
 801bd40:	881b      	ldrh	r3, [r3, #0]
 801bd42:	1c5a      	adds	r2, r3, #1
 801bd44:	b291      	uxth	r1, r2
 801bd46:	4a15      	ldr	r2, [pc, #84]	@ (801bd9c <udp_new_port+0x68>)
 801bd48:	8011      	strh	r1, [r2, #0]
 801bd4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bd4e:	4293      	cmp	r3, r2
 801bd50:	d103      	bne.n	801bd5a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801bd52:	4b12      	ldr	r3, [pc, #72]	@ (801bd9c <udp_new_port+0x68>)
 801bd54:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801bd58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd5a:	4b11      	ldr	r3, [pc, #68]	@ (801bda0 <udp_new_port+0x6c>)
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	603b      	str	r3, [r7, #0]
 801bd60:	e011      	b.n	801bd86 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801bd62:	683b      	ldr	r3, [r7, #0]
 801bd64:	8a5a      	ldrh	r2, [r3, #18]
 801bd66:	4b0d      	ldr	r3, [pc, #52]	@ (801bd9c <udp_new_port+0x68>)
 801bd68:	881b      	ldrh	r3, [r3, #0]
 801bd6a:	429a      	cmp	r2, r3
 801bd6c:	d108      	bne.n	801bd80 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801bd6e:	88fb      	ldrh	r3, [r7, #6]
 801bd70:	3301      	adds	r3, #1
 801bd72:	80fb      	strh	r3, [r7, #6]
 801bd74:	88fb      	ldrh	r3, [r7, #6]
 801bd76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801bd7a:	d3e0      	bcc.n	801bd3e <udp_new_port+0xa>
        return 0;
 801bd7c:	2300      	movs	r3, #0
 801bd7e:	e007      	b.n	801bd90 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd80:	683b      	ldr	r3, [r7, #0]
 801bd82:	68db      	ldr	r3, [r3, #12]
 801bd84:	603b      	str	r3, [r7, #0]
 801bd86:	683b      	ldr	r3, [r7, #0]
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d1ea      	bne.n	801bd62 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801bd8c:	4b03      	ldr	r3, [pc, #12]	@ (801bd9c <udp_new_port+0x68>)
 801bd8e:	881b      	ldrh	r3, [r3, #0]
}
 801bd90:	4618      	mov	r0, r3
 801bd92:	370c      	adds	r7, #12
 801bd94:	46bd      	mov	sp, r7
 801bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd9a:	4770      	bx	lr
 801bd9c:	20000070 	.word	0x20000070
 801bda0:	20022b08 	.word	0x20022b08

0801bda4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801bda4:	b580      	push	{r7, lr}
 801bda6:	b084      	sub	sp, #16
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	60f8      	str	r0, [r7, #12]
 801bdac:	60b9      	str	r1, [r7, #8]
 801bdae:	4613      	mov	r3, r2
 801bdb0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d105      	bne.n	801bdc4 <udp_input_local_match+0x20>
 801bdb8:	4b27      	ldr	r3, [pc, #156]	@ (801be58 <udp_input_local_match+0xb4>)
 801bdba:	2287      	movs	r2, #135	@ 0x87
 801bdbc:	4927      	ldr	r1, [pc, #156]	@ (801be5c <udp_input_local_match+0xb8>)
 801bdbe:	4828      	ldr	r0, [pc, #160]	@ (801be60 <udp_input_local_match+0xbc>)
 801bdc0:	f004 fd9c 	bl	80208fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801bdc4:	68bb      	ldr	r3, [r7, #8]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d105      	bne.n	801bdd6 <udp_input_local_match+0x32>
 801bdca:	4b23      	ldr	r3, [pc, #140]	@ (801be58 <udp_input_local_match+0xb4>)
 801bdcc:	2288      	movs	r2, #136	@ 0x88
 801bdce:	4925      	ldr	r1, [pc, #148]	@ (801be64 <udp_input_local_match+0xc0>)
 801bdd0:	4823      	ldr	r0, [pc, #140]	@ (801be60 <udp_input_local_match+0xbc>)
 801bdd2:	f004 fd93 	bl	80208fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	7a1b      	ldrb	r3, [r3, #8]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d00b      	beq.n	801bdf6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	7a1a      	ldrb	r2, [r3, #8]
 801bde2:	4b21      	ldr	r3, [pc, #132]	@ (801be68 <udp_input_local_match+0xc4>)
 801bde4:	685b      	ldr	r3, [r3, #4]
 801bde6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bdea:	3301      	adds	r3, #1
 801bdec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bdee:	429a      	cmp	r2, r3
 801bdf0:	d001      	beq.n	801bdf6 <udp_input_local_match+0x52>
    return 0;
 801bdf2:	2300      	movs	r3, #0
 801bdf4:	e02b      	b.n	801be4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801bdf6:	79fb      	ldrb	r3, [r7, #7]
 801bdf8:	2b00      	cmp	r3, #0
 801bdfa:	d018      	beq.n	801be2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d013      	beq.n	801be2a <udp_input_local_match+0x86>
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	2b00      	cmp	r3, #0
 801be08:	d00f      	beq.n	801be2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801be0a:	4b17      	ldr	r3, [pc, #92]	@ (801be68 <udp_input_local_match+0xc4>)
 801be0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801be0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801be12:	d00a      	beq.n	801be2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	681a      	ldr	r2, [r3, #0]
 801be18:	4b13      	ldr	r3, [pc, #76]	@ (801be68 <udp_input_local_match+0xc4>)
 801be1a:	695b      	ldr	r3, [r3, #20]
 801be1c:	405a      	eors	r2, r3
 801be1e:	68bb      	ldr	r3, [r7, #8]
 801be20:	3308      	adds	r3, #8
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801be26:	2b00      	cmp	r3, #0
 801be28:	d110      	bne.n	801be4c <udp_input_local_match+0xa8>
          return 1;
 801be2a:	2301      	movs	r3, #1
 801be2c:	e00f      	b.n	801be4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d009      	beq.n	801be48 <udp_input_local_match+0xa4>
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d005      	beq.n	801be48 <udp_input_local_match+0xa4>
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	681a      	ldr	r2, [r3, #0]
 801be40:	4b09      	ldr	r3, [pc, #36]	@ (801be68 <udp_input_local_match+0xc4>)
 801be42:	695b      	ldr	r3, [r3, #20]
 801be44:	429a      	cmp	r2, r3
 801be46:	d101      	bne.n	801be4c <udp_input_local_match+0xa8>
        return 1;
 801be48:	2301      	movs	r3, #1
 801be4a:	e000      	b.n	801be4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801be4c:	2300      	movs	r3, #0
}
 801be4e:	4618      	mov	r0, r3
 801be50:	3710      	adds	r7, #16
 801be52:	46bd      	mov	sp, r7
 801be54:	bd80      	pop	{r7, pc}
 801be56:	bf00      	nop
 801be58:	08024cd8 	.word	0x08024cd8
 801be5c:	08024d08 	.word	0x08024d08
 801be60:	08024d2c 	.word	0x08024d2c
 801be64:	08024d54 	.word	0x08024d54
 801be68:	2001f658 	.word	0x2001f658

0801be6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801be6c:	b590      	push	{r4, r7, lr}
 801be6e:	b08d      	sub	sp, #52	@ 0x34
 801be70:	af02      	add	r7, sp, #8
 801be72:	6078      	str	r0, [r7, #4]
 801be74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801be76:	2300      	movs	r3, #0
 801be78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d105      	bne.n	801be8c <udp_input+0x20>
 801be80:	4b95      	ldr	r3, [pc, #596]	@ (801c0d8 <udp_input+0x26c>)
 801be82:	22cf      	movs	r2, #207	@ 0xcf
 801be84:	4995      	ldr	r1, [pc, #596]	@ (801c0dc <udp_input+0x270>)
 801be86:	4896      	ldr	r0, [pc, #600]	@ (801c0e0 <udp_input+0x274>)
 801be88:	f004 fd38 	bl	80208fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801be8c:	683b      	ldr	r3, [r7, #0]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d105      	bne.n	801be9e <udp_input+0x32>
 801be92:	4b91      	ldr	r3, [pc, #580]	@ (801c0d8 <udp_input+0x26c>)
 801be94:	22d0      	movs	r2, #208	@ 0xd0
 801be96:	4993      	ldr	r1, [pc, #588]	@ (801c0e4 <udp_input+0x278>)
 801be98:	4891      	ldr	r0, [pc, #580]	@ (801c0e0 <udp_input+0x274>)
 801be9a:	f004 fd2f 	bl	80208fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	895b      	ldrh	r3, [r3, #10]
 801bea2:	2b07      	cmp	r3, #7
 801bea4:	d809      	bhi.n	801beba <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	891b      	ldrh	r3, [r3, #8]
 801beaa:	4619      	mov	r1, r3
 801beac:	488e      	ldr	r0, [pc, #568]	@ (801c0e8 <udp_input+0x27c>)
 801beae:	f004 fd25 	bl	80208fc <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801beb2:	6878      	ldr	r0, [r7, #4]
 801beb4:	f7f9 f998 	bl	80151e8 <pbuf_free>
    goto end;
 801beb8:	e18d      	b.n	801c1d6 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	685b      	ldr	r3, [r3, #4]
 801bebe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801bec0:	4b8a      	ldr	r3, [pc, #552]	@ (801c0ec <udp_input+0x280>)
 801bec2:	695b      	ldr	r3, [r3, #20]
 801bec4:	4a89      	ldr	r2, [pc, #548]	@ (801c0ec <udp_input+0x280>)
 801bec6:	6812      	ldr	r2, [r2, #0]
 801bec8:	4611      	mov	r1, r2
 801beca:	4618      	mov	r0, r3
 801becc:	f002 fac6 	bl	801e45c <ip4_addr_isbroadcast_u32>
 801bed0:	4603      	mov	r3, r0
 801bed2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	891b      	ldrh	r3, [r3, #8]
 801bed8:	4619      	mov	r1, r3
 801beda:	4885      	ldr	r0, [pc, #532]	@ (801c0f0 <udp_input+0x284>)
 801bedc:	f004 fd0e 	bl	80208fc <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801bee0:	697b      	ldr	r3, [r7, #20]
 801bee2:	881b      	ldrh	r3, [r3, #0]
 801bee4:	b29b      	uxth	r3, r3
 801bee6:	4618      	mov	r0, r3
 801bee8:	f7f7 fc24 	bl	8013734 <lwip_htons>
 801beec:	4603      	mov	r3, r0
 801beee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801bef0:	697b      	ldr	r3, [r7, #20]
 801bef2:	885b      	ldrh	r3, [r3, #2]
 801bef4:	b29b      	uxth	r3, r3
 801bef6:	4618      	mov	r0, r3
 801bef8:	f7f7 fc1c 	bl	8013734 <lwip_htons>
 801befc:	4603      	mov	r3, r0
 801befe:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801bf00:	6978      	ldr	r0, [r7, #20]
 801bf02:	f000 fe37 	bl	801cb74 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 801bf06:	487b      	ldr	r0, [pc, #492]	@ (801c0f4 <udp_input+0x288>)
 801bf08:	f004 fcf8 	bl	80208fc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 801bf0c:	4b77      	ldr	r3, [pc, #476]	@ (801c0ec <udp_input+0x280>)
 801bf0e:	695b      	ldr	r3, [r3, #20]
 801bf10:	b2db      	uxtb	r3, r3
 801bf12:	4619      	mov	r1, r3
 801bf14:	4b75      	ldr	r3, [pc, #468]	@ (801c0ec <udp_input+0x280>)
 801bf16:	695b      	ldr	r3, [r3, #20]
 801bf18:	0a1b      	lsrs	r3, r3, #8
 801bf1a:	b2db      	uxtb	r3, r3
 801bf1c:	461a      	mov	r2, r3
 801bf1e:	4b73      	ldr	r3, [pc, #460]	@ (801c0ec <udp_input+0x280>)
 801bf20:	695b      	ldr	r3, [r3, #20]
 801bf22:	0c1b      	lsrs	r3, r3, #16
 801bf24:	b2db      	uxtb	r3, r3
 801bf26:	4618      	mov	r0, r3
 801bf28:	4b70      	ldr	r3, [pc, #448]	@ (801c0ec <udp_input+0x280>)
 801bf2a:	695b      	ldr	r3, [r3, #20]
 801bf2c:	0e1b      	lsrs	r3, r3, #24
 801bf2e:	b2db      	uxtb	r3, r3
 801bf30:	9300      	str	r3, [sp, #0]
 801bf32:	4603      	mov	r3, r0
 801bf34:	4870      	ldr	r0, [pc, #448]	@ (801c0f8 <udp_input+0x28c>)
 801bf36:	f004 fce1 	bl	80208fc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 801bf3a:	697b      	ldr	r3, [r7, #20]
 801bf3c:	885b      	ldrh	r3, [r3, #2]
 801bf3e:	b29b      	uxth	r3, r3
 801bf40:	4618      	mov	r0, r3
 801bf42:	f7f7 fbf7 	bl	8013734 <lwip_htons>
 801bf46:	4603      	mov	r3, r0
 801bf48:	4619      	mov	r1, r3
 801bf4a:	486c      	ldr	r0, [pc, #432]	@ (801c0fc <udp_input+0x290>)
 801bf4c:	f004 fcd6 	bl	80208fc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801bf50:	4b66      	ldr	r3, [pc, #408]	@ (801c0ec <udp_input+0x280>)
 801bf52:	691b      	ldr	r3, [r3, #16]
 801bf54:	b2db      	uxtb	r3, r3
 801bf56:	4619      	mov	r1, r3
 801bf58:	4b64      	ldr	r3, [pc, #400]	@ (801c0ec <udp_input+0x280>)
 801bf5a:	691b      	ldr	r3, [r3, #16]
 801bf5c:	0a1b      	lsrs	r3, r3, #8
 801bf5e:	b2db      	uxtb	r3, r3
 801bf60:	461a      	mov	r2, r3
 801bf62:	4b62      	ldr	r3, [pc, #392]	@ (801c0ec <udp_input+0x280>)
 801bf64:	691b      	ldr	r3, [r3, #16]
 801bf66:	0c1b      	lsrs	r3, r3, #16
 801bf68:	b2db      	uxtb	r3, r3
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	4b5f      	ldr	r3, [pc, #380]	@ (801c0ec <udp_input+0x280>)
 801bf6e:	691b      	ldr	r3, [r3, #16]
 801bf70:	0e1b      	lsrs	r3, r3, #24
 801bf72:	b2db      	uxtb	r3, r3
 801bf74:	9300      	str	r3, [sp, #0]
 801bf76:	4603      	mov	r3, r0
 801bf78:	485f      	ldr	r0, [pc, #380]	@ (801c0f8 <udp_input+0x28c>)
 801bf7a:	f004 fcbf 	bl	80208fc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801bf7e:	697b      	ldr	r3, [r7, #20]
 801bf80:	881b      	ldrh	r3, [r3, #0]
 801bf82:	b29b      	uxth	r3, r3
 801bf84:	4618      	mov	r0, r3
 801bf86:	f7f7 fbd5 	bl	8013734 <lwip_htons>
 801bf8a:	4603      	mov	r3, r0
 801bf8c:	4619      	mov	r1, r3
 801bf8e:	485c      	ldr	r0, [pc, #368]	@ (801c100 <udp_input+0x294>)
 801bf90:	f004 fcb4 	bl	80208fc <iprintf>

  pcb = NULL;
 801bf94:	2300      	movs	r3, #0
 801bf96:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801bf98:	2300      	movs	r3, #0
 801bf9a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bfa0:	4b58      	ldr	r3, [pc, #352]	@ (801c104 <udp_input+0x298>)
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	627b      	str	r3, [r7, #36]	@ 0x24
 801bfa6:	e091      	b.n	801c0cc <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 801bfa8:	4857      	ldr	r0, [pc, #348]	@ (801c108 <udp_input+0x29c>)
 801bfaa:	f004 fca7 	bl	80208fc <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 801bfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	b2db      	uxtb	r3, r3
 801bfb4:	4619      	mov	r1, r3
 801bfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	0a1b      	lsrs	r3, r3, #8
 801bfbc:	b2db      	uxtb	r3, r3
 801bfbe:	461a      	mov	r2, r3
 801bfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	0c1b      	lsrs	r3, r3, #16
 801bfc6:	b2db      	uxtb	r3, r3
 801bfc8:	4618      	mov	r0, r3
 801bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	0e1b      	lsrs	r3, r3, #24
 801bfd0:	b2db      	uxtb	r3, r3
 801bfd2:	9300      	str	r3, [sp, #0]
 801bfd4:	4603      	mov	r3, r0
 801bfd6:	4848      	ldr	r0, [pc, #288]	@ (801c0f8 <udp_input+0x28c>)
 801bfd8:	f004 fc90 	bl	80208fc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 801bfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfde:	8a5b      	ldrh	r3, [r3, #18]
 801bfe0:	4619      	mov	r1, r3
 801bfe2:	4846      	ldr	r0, [pc, #280]	@ (801c0fc <udp_input+0x290>)
 801bfe4:	f004 fc8a 	bl	80208fc <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 801bfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfea:	685b      	ldr	r3, [r3, #4]
 801bfec:	b2db      	uxtb	r3, r3
 801bfee:	4619      	mov	r1, r3
 801bff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bff2:	685b      	ldr	r3, [r3, #4]
 801bff4:	0a1b      	lsrs	r3, r3, #8
 801bff6:	b2db      	uxtb	r3, r3
 801bff8:	461a      	mov	r2, r3
 801bffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bffc:	685b      	ldr	r3, [r3, #4]
 801bffe:	0c1b      	lsrs	r3, r3, #16
 801c000:	b2db      	uxtb	r3, r3
 801c002:	4618      	mov	r0, r3
 801c004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c006:	685b      	ldr	r3, [r3, #4]
 801c008:	0e1b      	lsrs	r3, r3, #24
 801c00a:	b2db      	uxtb	r3, r3
 801c00c:	9300      	str	r3, [sp, #0]
 801c00e:	4603      	mov	r3, r0
 801c010:	4839      	ldr	r0, [pc, #228]	@ (801c0f8 <udp_input+0x28c>)
 801c012:	f004 fc73 	bl	80208fc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 801c016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c018:	8a9b      	ldrh	r3, [r3, #20]
 801c01a:	4619      	mov	r1, r3
 801c01c:	4838      	ldr	r0, [pc, #224]	@ (801c100 <udp_input+0x294>)
 801c01e:	f004 fc6d 	bl	80208fc <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c024:	8a5b      	ldrh	r3, [r3, #18]
 801c026:	89fa      	ldrh	r2, [r7, #14]
 801c028:	429a      	cmp	r2, r3
 801c02a:	d14a      	bne.n	801c0c2 <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c02c:	7cfb      	ldrb	r3, [r7, #19]
 801c02e:	461a      	mov	r2, r3
 801c030:	6839      	ldr	r1, [r7, #0]
 801c032:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c034:	f7ff feb6 	bl	801bda4 <udp_input_local_match>
 801c038:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d041      	beq.n	801c0c2 <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c040:	7c1b      	ldrb	r3, [r3, #16]
 801c042:	f003 0304 	and.w	r3, r3, #4
 801c046:	2b00      	cmp	r3, #0
 801c048:	d11d      	bne.n	801c086 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 801c04a:	69fb      	ldr	r3, [r7, #28]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d102      	bne.n	801c056 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c052:	61fb      	str	r3, [r7, #28]
 801c054:	e017      	b.n	801c086 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c056:	7cfb      	ldrb	r3, [r7, #19]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d014      	beq.n	801c086 <udp_input+0x21a>
 801c05c:	4b23      	ldr	r3, [pc, #140]	@ (801c0ec <udp_input+0x280>)
 801c05e:	695b      	ldr	r3, [r3, #20]
 801c060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c064:	d10f      	bne.n	801c086 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c066:	69fb      	ldr	r3, [r7, #28]
 801c068:	681a      	ldr	r2, [r3, #0]
 801c06a:	683b      	ldr	r3, [r7, #0]
 801c06c:	3304      	adds	r3, #4
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	429a      	cmp	r2, r3
 801c072:	d008      	beq.n	801c086 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c076:	681a      	ldr	r2, [r3, #0]
 801c078:	683b      	ldr	r3, [r7, #0]
 801c07a:	3304      	adds	r3, #4
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	429a      	cmp	r2, r3
 801c080:	d101      	bne.n	801c086 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 801c082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c084:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c088:	8a9b      	ldrh	r3, [r3, #20]
 801c08a:	8a3a      	ldrh	r2, [r7, #16]
 801c08c:	429a      	cmp	r2, r3
 801c08e:	d118      	bne.n	801c0c2 <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c092:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c094:	2b00      	cmp	r3, #0
 801c096:	d005      	beq.n	801c0a4 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c09a:	685a      	ldr	r2, [r3, #4]
 801c09c:	4b13      	ldr	r3, [pc, #76]	@ (801c0ec <udp_input+0x280>)
 801c09e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c0a0:	429a      	cmp	r2, r3
 801c0a2:	d10e      	bne.n	801c0c2 <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c0a4:	6a3b      	ldr	r3, [r7, #32]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d030      	beq.n	801c10c <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0ac:	68da      	ldr	r2, [r3, #12]
 801c0ae:	6a3b      	ldr	r3, [r7, #32]
 801c0b0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c0b2:	4b14      	ldr	r3, [pc, #80]	@ (801c104 <udp_input+0x298>)
 801c0b4:	681a      	ldr	r2, [r3, #0]
 801c0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0b8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c0ba:	4a12      	ldr	r2, [pc, #72]	@ (801c104 <udp_input+0x298>)
 801c0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0be:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c0c0:	e024      	b.n	801c10c <udp_input+0x2a0>
      }
    }

    prev = pcb;
 801c0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0c4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0c8:	68db      	ldr	r3, [r3, #12]
 801c0ca:	627b      	str	r3, [r7, #36]	@ 0x24
 801c0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	f47f af6a 	bne.w	801bfa8 <udp_input+0x13c>
 801c0d4:	e01b      	b.n	801c10e <udp_input+0x2a2>
 801c0d6:	bf00      	nop
 801c0d8:	08024cd8 	.word	0x08024cd8
 801c0dc:	08024d7c 	.word	0x08024d7c
 801c0e0:	08024d2c 	.word	0x08024d2c
 801c0e4:	08024d94 	.word	0x08024d94
 801c0e8:	08024db0 	.word	0x08024db0
 801c0ec:	2001f658 	.word	0x2001f658
 801c0f0:	08024de8 	.word	0x08024de8
 801c0f4:	08024e14 	.word	0x08024e14
 801c0f8:	08024e1c 	.word	0x08024e1c
 801c0fc:	08024e2c 	.word	0x08024e2c
 801c100:	08024e3c 	.word	0x08024e3c
 801c104:	20022b08 	.word	0x20022b08
 801c108:	08024e44 	.word	0x08024e44
        break;
 801c10c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c110:	2b00      	cmp	r3, #0
 801c112:	d101      	bne.n	801c118 <udp_input+0x2ac>
    pcb = uncon_pcb;
 801c114:	69fb      	ldr	r3, [r7, #28]
 801c116:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d002      	beq.n	801c124 <udp_input+0x2b8>
    for_us = 1;
 801c11e:	2301      	movs	r3, #1
 801c120:	76fb      	strb	r3, [r7, #27]
 801c122:	e00a      	b.n	801c13a <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c124:	683b      	ldr	r3, [r7, #0]
 801c126:	3304      	adds	r3, #4
 801c128:	681a      	ldr	r2, [r3, #0]
 801c12a:	4b2d      	ldr	r3, [pc, #180]	@ (801c1e0 <udp_input+0x374>)
 801c12c:	695b      	ldr	r3, [r3, #20]
 801c12e:	429a      	cmp	r2, r3
 801c130:	bf0c      	ite	eq
 801c132:	2301      	moveq	r3, #1
 801c134:	2300      	movne	r3, #0
 801c136:	b2db      	uxtb	r3, r3
 801c138:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c13a:	7efb      	ldrb	r3, [r7, #27]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d047      	beq.n	801c1d0 <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801c140:	4828      	ldr	r0, [pc, #160]	@ (801c1e4 <udp_input+0x378>)
 801c142:	f004 fc4b 	bl	80209dc <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c146:	2108      	movs	r1, #8
 801c148:	6878      	ldr	r0, [r7, #4]
 801c14a:	f7f8 ffbf 	bl	80150cc <pbuf_remove_header>
 801c14e:	4603      	mov	r3, r0
 801c150:	2b00      	cmp	r3, #0
 801c152:	d00a      	beq.n	801c16a <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c154:	4b24      	ldr	r3, [pc, #144]	@ (801c1e8 <udp_input+0x37c>)
 801c156:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801c15a:	4924      	ldr	r1, [pc, #144]	@ (801c1ec <udp_input+0x380>)
 801c15c:	4824      	ldr	r0, [pc, #144]	@ (801c1f0 <udp_input+0x384>)
 801c15e:	f004 fbcd 	bl	80208fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c162:	6878      	ldr	r0, [r7, #4]
 801c164:	f7f9 f840 	bl	80151e8 <pbuf_free>
      goto end;
 801c168:	e035      	b.n	801c1d6 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 801c16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d012      	beq.n	801c196 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c172:	699b      	ldr	r3, [r3, #24]
 801c174:	2b00      	cmp	r3, #0
 801c176:	d00a      	beq.n	801c18e <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c17a:	699c      	ldr	r4, [r3, #24]
 801c17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c17e:	69d8      	ldr	r0, [r3, #28]
 801c180:	8a3b      	ldrh	r3, [r7, #16]
 801c182:	9300      	str	r3, [sp, #0]
 801c184:	4b1b      	ldr	r3, [pc, #108]	@ (801c1f4 <udp_input+0x388>)
 801c186:	687a      	ldr	r2, [r7, #4]
 801c188:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c18a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c18c:	e024      	b.n	801c1d8 <udp_input+0x36c>
        pbuf_free(p);
 801c18e:	6878      	ldr	r0, [r7, #4]
 801c190:	f7f9 f82a 	bl	80151e8 <pbuf_free>
        goto end;
 801c194:	e01f      	b.n	801c1d6 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 801c196:	4818      	ldr	r0, [pc, #96]	@ (801c1f8 <udp_input+0x38c>)
 801c198:	f004 fc20 	bl	80209dc <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c19c:	7cfb      	ldrb	r3, [r7, #19]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d112      	bne.n	801c1c8 <udp_input+0x35c>
 801c1a2:	4b0f      	ldr	r3, [pc, #60]	@ (801c1e0 <udp_input+0x374>)
 801c1a4:	695b      	ldr	r3, [r3, #20]
 801c1a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c1aa:	2be0      	cmp	r3, #224	@ 0xe0
 801c1ac:	d00c      	beq.n	801c1c8 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c1ae:	4b0c      	ldr	r3, [pc, #48]	@ (801c1e0 <udp_input+0x374>)
 801c1b0:	899b      	ldrh	r3, [r3, #12]
 801c1b2:	3308      	adds	r3, #8
 801c1b4:	b29b      	uxth	r3, r3
 801c1b6:	b21b      	sxth	r3, r3
 801c1b8:	4619      	mov	r1, r3
 801c1ba:	6878      	ldr	r0, [r7, #4]
 801c1bc:	f7f9 f801 	bl	80151c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c1c0:	2103      	movs	r1, #3
 801c1c2:	6878      	ldr	r0, [r7, #4]
 801c1c4:	f001 fdea 	bl	801dd9c <icmp_dest_unreach>
      pbuf_free(p);
 801c1c8:	6878      	ldr	r0, [r7, #4]
 801c1ca:	f7f9 f80d 	bl	80151e8 <pbuf_free>
  return;
 801c1ce:	e003      	b.n	801c1d8 <udp_input+0x36c>
    pbuf_free(p);
 801c1d0:	6878      	ldr	r0, [r7, #4]
 801c1d2:	f7f9 f809 	bl	80151e8 <pbuf_free>
  return;
 801c1d6:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c1d8:	372c      	adds	r7, #44	@ 0x2c
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	bd90      	pop	{r4, r7, pc}
 801c1de:	bf00      	nop
 801c1e0:	2001f658 	.word	0x2001f658
 801c1e4:	08024e4c 	.word	0x08024e4c
 801c1e8:	08024cd8 	.word	0x08024cd8
 801c1ec:	08024e6c 	.word	0x08024e6c
 801c1f0:	08024d2c 	.word	0x08024d2c
 801c1f4:	2001f668 	.word	0x2001f668
 801c1f8:	08024e88 	.word	0x08024e88

0801c1fc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b082      	sub	sp, #8
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
 801c204:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d109      	bne.n	801c220 <udp_send+0x24>
 801c20c:	4b11      	ldr	r3, [pc, #68]	@ (801c254 <udp_send+0x58>)
 801c20e:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801c212:	4911      	ldr	r1, [pc, #68]	@ (801c258 <udp_send+0x5c>)
 801c214:	4811      	ldr	r0, [pc, #68]	@ (801c25c <udp_send+0x60>)
 801c216:	f004 fb71 	bl	80208fc <iprintf>
 801c21a:	f06f 030f 	mvn.w	r3, #15
 801c21e:	e015      	b.n	801c24c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801c220:	683b      	ldr	r3, [r7, #0]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d109      	bne.n	801c23a <udp_send+0x3e>
 801c226:	4b0b      	ldr	r3, [pc, #44]	@ (801c254 <udp_send+0x58>)
 801c228:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801c22c:	490c      	ldr	r1, [pc, #48]	@ (801c260 <udp_send+0x64>)
 801c22e:	480b      	ldr	r0, [pc, #44]	@ (801c25c <udp_send+0x60>)
 801c230:	f004 fb64 	bl	80208fc <iprintf>
 801c234:	f06f 030f 	mvn.w	r3, #15
 801c238:	e008      	b.n	801c24c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	1d1a      	adds	r2, r3, #4
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	8a9b      	ldrh	r3, [r3, #20]
 801c242:	6839      	ldr	r1, [r7, #0]
 801c244:	6878      	ldr	r0, [r7, #4]
 801c246:	f000 f80d 	bl	801c264 <udp_sendto>
 801c24a:	4603      	mov	r3, r0
}
 801c24c:	4618      	mov	r0, r3
 801c24e:	3708      	adds	r7, #8
 801c250:	46bd      	mov	sp, r7
 801c252:	bd80      	pop	{r7, pc}
 801c254:	08024cd8 	.word	0x08024cd8
 801c258:	08024ea0 	.word	0x08024ea0
 801c25c:	08024d2c 	.word	0x08024d2c
 801c260:	08024eb8 	.word	0x08024eb8

0801c264 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801c264:	b580      	push	{r7, lr}
 801c266:	b088      	sub	sp, #32
 801c268:	af02      	add	r7, sp, #8
 801c26a:	60f8      	str	r0, [r7, #12]
 801c26c:	60b9      	str	r1, [r7, #8]
 801c26e:	607a      	str	r2, [r7, #4]
 801c270:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	2b00      	cmp	r3, #0
 801c276:	d109      	bne.n	801c28c <udp_sendto+0x28>
 801c278:	4b3b      	ldr	r3, [pc, #236]	@ (801c368 <udp_sendto+0x104>)
 801c27a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801c27e:	493b      	ldr	r1, [pc, #236]	@ (801c36c <udp_sendto+0x108>)
 801c280:	483b      	ldr	r0, [pc, #236]	@ (801c370 <udp_sendto+0x10c>)
 801c282:	f004 fb3b 	bl	80208fc <iprintf>
 801c286:	f06f 030f 	mvn.w	r3, #15
 801c28a:	e068      	b.n	801c35e <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801c28c:	68bb      	ldr	r3, [r7, #8]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d109      	bne.n	801c2a6 <udp_sendto+0x42>
 801c292:	4b35      	ldr	r3, [pc, #212]	@ (801c368 <udp_sendto+0x104>)
 801c294:	f240 2219 	movw	r2, #537	@ 0x219
 801c298:	4936      	ldr	r1, [pc, #216]	@ (801c374 <udp_sendto+0x110>)
 801c29a:	4835      	ldr	r0, [pc, #212]	@ (801c370 <udp_sendto+0x10c>)
 801c29c:	f004 fb2e 	bl	80208fc <iprintf>
 801c2a0:	f06f 030f 	mvn.w	r3, #15
 801c2a4:	e05b      	b.n	801c35e <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d109      	bne.n	801c2c0 <udp_sendto+0x5c>
 801c2ac:	4b2e      	ldr	r3, [pc, #184]	@ (801c368 <udp_sendto+0x104>)
 801c2ae:	f240 221a 	movw	r2, #538	@ 0x21a
 801c2b2:	4931      	ldr	r1, [pc, #196]	@ (801c378 <udp_sendto+0x114>)
 801c2b4:	482e      	ldr	r0, [pc, #184]	@ (801c370 <udp_sendto+0x10c>)
 801c2b6:	f004 fb21 	bl	80208fc <iprintf>
 801c2ba:	f06f 030f 	mvn.w	r3, #15
 801c2be:	e04e      	b.n	801c35e <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 801c2c0:	482e      	ldr	r0, [pc, #184]	@ (801c37c <udp_sendto+0x118>)
 801c2c2:	f004 fb8b 	bl	80209dc <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	7a1b      	ldrb	r3, [r3, #8]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d006      	beq.n	801c2dc <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	7a1b      	ldrb	r3, [r3, #8]
 801c2d2:	4618      	mov	r0, r3
 801c2d4:	f7f8 fbae 	bl	8014a34 <netif_get_by_index>
 801c2d8:	6178      	str	r0, [r7, #20]
 801c2da:	e003      	b.n	801c2e4 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801c2dc:	6878      	ldr	r0, [r7, #4]
 801c2de:	f001 fe27 	bl	801df30 <ip4_route>
 801c2e2:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801c2e4:	697b      	ldr	r3, [r7, #20]
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d12f      	bne.n	801c34a <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 801c2ea:	4825      	ldr	r0, [pc, #148]	@ (801c380 <udp_sendto+0x11c>)
 801c2ec:	f004 fb06 	bl	80208fc <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d003      	beq.n	801c2fe <udp_sendto+0x9a>
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	781b      	ldrb	r3, [r3, #0]
 801c2fa:	4619      	mov	r1, r3
 801c2fc:	e000      	b.n	801c300 <udp_sendto+0x9c>
 801c2fe:	2100      	movs	r1, #0
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	2b00      	cmp	r3, #0
 801c304:	d004      	beq.n	801c310 <udp_sendto+0xac>
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	3301      	adds	r3, #1
 801c30a:	781b      	ldrb	r3, [r3, #0]
 801c30c:	461a      	mov	r2, r3
 801c30e:	e000      	b.n	801c312 <udp_sendto+0xae>
 801c310:	2200      	movs	r2, #0
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	2b00      	cmp	r3, #0
 801c316:	d004      	beq.n	801c322 <udp_sendto+0xbe>
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	3302      	adds	r3, #2
 801c31c:	781b      	ldrb	r3, [r3, #0]
 801c31e:	4618      	mov	r0, r3
 801c320:	e000      	b.n	801c324 <udp_sendto+0xc0>
 801c322:	2000      	movs	r0, #0
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d003      	beq.n	801c332 <udp_sendto+0xce>
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	3303      	adds	r3, #3
 801c32e:	781b      	ldrb	r3, [r3, #0]
 801c330:	e000      	b.n	801c334 <udp_sendto+0xd0>
 801c332:	2300      	movs	r3, #0
 801c334:	9300      	str	r3, [sp, #0]
 801c336:	4603      	mov	r3, r0
 801c338:	4812      	ldr	r0, [pc, #72]	@ (801c384 <udp_sendto+0x120>)
 801c33a:	f004 fadf 	bl	80208fc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 801c33e:	200a      	movs	r0, #10
 801c340:	f004 faee 	bl	8020920 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801c344:	f06f 0303 	mvn.w	r3, #3
 801c348:	e009      	b.n	801c35e <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801c34a:	887a      	ldrh	r2, [r7, #2]
 801c34c:	697b      	ldr	r3, [r7, #20]
 801c34e:	9300      	str	r3, [sp, #0]
 801c350:	4613      	mov	r3, r2
 801c352:	687a      	ldr	r2, [r7, #4]
 801c354:	68b9      	ldr	r1, [r7, #8]
 801c356:	68f8      	ldr	r0, [r7, #12]
 801c358:	f000 f816 	bl	801c388 <udp_sendto_if>
 801c35c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c35e:	4618      	mov	r0, r3
 801c360:	3718      	adds	r7, #24
 801c362:	46bd      	mov	sp, r7
 801c364:	bd80      	pop	{r7, pc}
 801c366:	bf00      	nop
 801c368:	08024cd8 	.word	0x08024cd8
 801c36c:	08024ed0 	.word	0x08024ed0
 801c370:	08024d2c 	.word	0x08024d2c
 801c374:	08024ee8 	.word	0x08024ee8
 801c378:	08024f04 	.word	0x08024f04
 801c37c:	08024f20 	.word	0x08024f20
 801c380:	08024f2c 	.word	0x08024f2c
 801c384:	08024e1c 	.word	0x08024e1c

0801c388 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c388:	b580      	push	{r7, lr}
 801c38a:	b088      	sub	sp, #32
 801c38c:	af02      	add	r7, sp, #8
 801c38e:	60f8      	str	r0, [r7, #12]
 801c390:	60b9      	str	r1, [r7, #8]
 801c392:	607a      	str	r2, [r7, #4]
 801c394:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d109      	bne.n	801c3b0 <udp_sendto_if+0x28>
 801c39c:	4b2e      	ldr	r3, [pc, #184]	@ (801c458 <udp_sendto_if+0xd0>)
 801c39e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c3a2:	492e      	ldr	r1, [pc, #184]	@ (801c45c <udp_sendto_if+0xd4>)
 801c3a4:	482e      	ldr	r0, [pc, #184]	@ (801c460 <udp_sendto_if+0xd8>)
 801c3a6:	f004 faa9 	bl	80208fc <iprintf>
 801c3aa:	f06f 030f 	mvn.w	r3, #15
 801c3ae:	e04f      	b.n	801c450 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c3b0:	68bb      	ldr	r3, [r7, #8]
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d109      	bne.n	801c3ca <udp_sendto_if+0x42>
 801c3b6:	4b28      	ldr	r3, [pc, #160]	@ (801c458 <udp_sendto_if+0xd0>)
 801c3b8:	f240 2281 	movw	r2, #641	@ 0x281
 801c3bc:	4929      	ldr	r1, [pc, #164]	@ (801c464 <udp_sendto_if+0xdc>)
 801c3be:	4828      	ldr	r0, [pc, #160]	@ (801c460 <udp_sendto_if+0xd8>)
 801c3c0:	f004 fa9c 	bl	80208fc <iprintf>
 801c3c4:	f06f 030f 	mvn.w	r3, #15
 801c3c8:	e042      	b.n	801c450 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d109      	bne.n	801c3e4 <udp_sendto_if+0x5c>
 801c3d0:	4b21      	ldr	r3, [pc, #132]	@ (801c458 <udp_sendto_if+0xd0>)
 801c3d2:	f240 2282 	movw	r2, #642	@ 0x282
 801c3d6:	4924      	ldr	r1, [pc, #144]	@ (801c468 <udp_sendto_if+0xe0>)
 801c3d8:	4821      	ldr	r0, [pc, #132]	@ (801c460 <udp_sendto_if+0xd8>)
 801c3da:	f004 fa8f 	bl	80208fc <iprintf>
 801c3de:	f06f 030f 	mvn.w	r3, #15
 801c3e2:	e035      	b.n	801c450 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c3e4:	6a3b      	ldr	r3, [r7, #32]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d109      	bne.n	801c3fe <udp_sendto_if+0x76>
 801c3ea:	4b1b      	ldr	r3, [pc, #108]	@ (801c458 <udp_sendto_if+0xd0>)
 801c3ec:	f240 2283 	movw	r2, #643	@ 0x283
 801c3f0:	491e      	ldr	r1, [pc, #120]	@ (801c46c <udp_sendto_if+0xe4>)
 801c3f2:	481b      	ldr	r0, [pc, #108]	@ (801c460 <udp_sendto_if+0xd8>)
 801c3f4:	f004 fa82 	bl	80208fc <iprintf>
 801c3f8:	f06f 030f 	mvn.w	r3, #15
 801c3fc:	e028      	b.n	801c450 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c3fe:	68fb      	ldr	r3, [r7, #12]
 801c400:	2b00      	cmp	r3, #0
 801c402:	d009      	beq.n	801c418 <udp_sendto_if+0x90>
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d005      	beq.n	801c418 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c414:	2be0      	cmp	r3, #224	@ 0xe0
 801c416:	d103      	bne.n	801c420 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801c418:	6a3b      	ldr	r3, [r7, #32]
 801c41a:	3304      	adds	r3, #4
 801c41c:	617b      	str	r3, [r7, #20]
 801c41e:	e00b      	b.n	801c438 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	681a      	ldr	r2, [r3, #0]
 801c424:	6a3b      	ldr	r3, [r7, #32]
 801c426:	3304      	adds	r3, #4
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	429a      	cmp	r2, r3
 801c42c:	d002      	beq.n	801c434 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801c42e:	f06f 0303 	mvn.w	r3, #3
 801c432:	e00d      	b.n	801c450 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c438:	887a      	ldrh	r2, [r7, #2]
 801c43a:	697b      	ldr	r3, [r7, #20]
 801c43c:	9301      	str	r3, [sp, #4]
 801c43e:	6a3b      	ldr	r3, [r7, #32]
 801c440:	9300      	str	r3, [sp, #0]
 801c442:	4613      	mov	r3, r2
 801c444:	687a      	ldr	r2, [r7, #4]
 801c446:	68b9      	ldr	r1, [r7, #8]
 801c448:	68f8      	ldr	r0, [r7, #12]
 801c44a:	f000 f811 	bl	801c470 <udp_sendto_if_src>
 801c44e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c450:	4618      	mov	r0, r3
 801c452:	3718      	adds	r7, #24
 801c454:	46bd      	mov	sp, r7
 801c456:	bd80      	pop	{r7, pc}
 801c458:	08024cd8 	.word	0x08024cd8
 801c45c:	08024f44 	.word	0x08024f44
 801c460:	08024d2c 	.word	0x08024d2c
 801c464:	08024f60 	.word	0x08024f60
 801c468:	08024f7c 	.word	0x08024f7c
 801c46c:	08024f9c 	.word	0x08024f9c

0801c470 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b08c      	sub	sp, #48	@ 0x30
 801c474:	af04      	add	r7, sp, #16
 801c476:	60f8      	str	r0, [r7, #12]
 801c478:	60b9      	str	r1, [r7, #8]
 801c47a:	607a      	str	r2, [r7, #4]
 801c47c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d109      	bne.n	801c498 <udp_sendto_if_src+0x28>
 801c484:	4b7a      	ldr	r3, [pc, #488]	@ (801c670 <udp_sendto_if_src+0x200>)
 801c486:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801c48a:	497a      	ldr	r1, [pc, #488]	@ (801c674 <udp_sendto_if_src+0x204>)
 801c48c:	487a      	ldr	r0, [pc, #488]	@ (801c678 <udp_sendto_if_src+0x208>)
 801c48e:	f004 fa35 	bl	80208fc <iprintf>
 801c492:	f06f 030f 	mvn.w	r3, #15
 801c496:	e0e6      	b.n	801c666 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c498:	68bb      	ldr	r3, [r7, #8]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d109      	bne.n	801c4b2 <udp_sendto_if_src+0x42>
 801c49e:	4b74      	ldr	r3, [pc, #464]	@ (801c670 <udp_sendto_if_src+0x200>)
 801c4a0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801c4a4:	4975      	ldr	r1, [pc, #468]	@ (801c67c <udp_sendto_if_src+0x20c>)
 801c4a6:	4874      	ldr	r0, [pc, #464]	@ (801c678 <udp_sendto_if_src+0x208>)
 801c4a8:	f004 fa28 	bl	80208fc <iprintf>
 801c4ac:	f06f 030f 	mvn.w	r3, #15
 801c4b0:	e0d9      	b.n	801c666 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d109      	bne.n	801c4cc <udp_sendto_if_src+0x5c>
 801c4b8:	4b6d      	ldr	r3, [pc, #436]	@ (801c670 <udp_sendto_if_src+0x200>)
 801c4ba:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801c4be:	4970      	ldr	r1, [pc, #448]	@ (801c680 <udp_sendto_if_src+0x210>)
 801c4c0:	486d      	ldr	r0, [pc, #436]	@ (801c678 <udp_sendto_if_src+0x208>)
 801c4c2:	f004 fa1b 	bl	80208fc <iprintf>
 801c4c6:	f06f 030f 	mvn.w	r3, #15
 801c4ca:	e0cc      	b.n	801c666 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d109      	bne.n	801c4e6 <udp_sendto_if_src+0x76>
 801c4d2:	4b67      	ldr	r3, [pc, #412]	@ (801c670 <udp_sendto_if_src+0x200>)
 801c4d4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801c4d8:	496a      	ldr	r1, [pc, #424]	@ (801c684 <udp_sendto_if_src+0x214>)
 801c4da:	4867      	ldr	r0, [pc, #412]	@ (801c678 <udp_sendto_if_src+0x208>)
 801c4dc:	f004 fa0e 	bl	80208fc <iprintf>
 801c4e0:	f06f 030f 	mvn.w	r3, #15
 801c4e4:	e0bf      	b.n	801c666 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d109      	bne.n	801c500 <udp_sendto_if_src+0x90>
 801c4ec:	4b60      	ldr	r3, [pc, #384]	@ (801c670 <udp_sendto_if_src+0x200>)
 801c4ee:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801c4f2:	4965      	ldr	r1, [pc, #404]	@ (801c688 <udp_sendto_if_src+0x218>)
 801c4f4:	4860      	ldr	r0, [pc, #384]	@ (801c678 <udp_sendto_if_src+0x208>)
 801c4f6:	f004 fa01 	bl	80208fc <iprintf>
 801c4fa:	f06f 030f 	mvn.w	r3, #15
 801c4fe:	e0b2      	b.n	801c666 <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	8a5b      	ldrh	r3, [r3, #18]
 801c504:	2b00      	cmp	r3, #0
 801c506:	d115      	bne.n	801c534 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801c508:	4860      	ldr	r0, [pc, #384]	@ (801c68c <udp_sendto_if_src+0x21c>)
 801c50a:	f004 fa67 	bl	80209dc <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c50e:	68f9      	ldr	r1, [r7, #12]
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	8a5b      	ldrh	r3, [r3, #18]
 801c514:	461a      	mov	r2, r3
 801c516:	68f8      	ldr	r0, [r7, #12]
 801c518:	f000 f8cc 	bl	801c6b4 <udp_bind>
 801c51c:	4603      	mov	r3, r0
 801c51e:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c520:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d005      	beq.n	801c534 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 801c528:	4859      	ldr	r0, [pc, #356]	@ (801c690 <udp_sendto_if_src+0x220>)
 801c52a:	f004 fa57 	bl	80209dc <puts>
      return err;
 801c52e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c532:	e098      	b.n	801c666 <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801c534:	68bb      	ldr	r3, [r7, #8]
 801c536:	891b      	ldrh	r3, [r3, #8]
 801c538:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801c53c:	4293      	cmp	r3, r2
 801c53e:	d902      	bls.n	801c546 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 801c540:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c544:	e08f      	b.n	801c666 <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801c546:	2108      	movs	r1, #8
 801c548:	68b8      	ldr	r0, [r7, #8]
 801c54a:	f7f8 fdaf 	bl	80150ac <pbuf_add_header>
 801c54e:	4603      	mov	r3, r0
 801c550:	2b00      	cmp	r3, #0
 801c552:	d01d      	beq.n	801c590 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c554:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c558:	2108      	movs	r1, #8
 801c55a:	2022      	movs	r0, #34	@ 0x22
 801c55c:	f7f8 fb18 	bl	8014b90 <pbuf_alloc>
 801c560:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c562:	69fb      	ldr	r3, [r7, #28]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d105      	bne.n	801c574 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 801c568:	484a      	ldr	r0, [pc, #296]	@ (801c694 <udp_sendto_if_src+0x224>)
 801c56a:	f004 fa37 	bl	80209dc <puts>
      return ERR_MEM;
 801c56e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c572:	e078      	b.n	801c666 <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 801c574:	68bb      	ldr	r3, [r7, #8]
 801c576:	891b      	ldrh	r3, [r3, #8]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d003      	beq.n	801c584 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c57c:	68b9      	ldr	r1, [r7, #8]
 801c57e:	69f8      	ldr	r0, [r7, #28]
 801c580:	f7f8 ff6e 	bl	8015460 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 801c584:	68ba      	ldr	r2, [r7, #8]
 801c586:	69f9      	ldr	r1, [r7, #28]
 801c588:	4843      	ldr	r0, [pc, #268]	@ (801c698 <udp_sendto_if_src+0x228>)
 801c58a:	f004 f9b7 	bl	80208fc <iprintf>
 801c58e:	e005      	b.n	801c59c <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c590:	68bb      	ldr	r3, [r7, #8]
 801c592:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 801c594:	68b9      	ldr	r1, [r7, #8]
 801c596:	4841      	ldr	r0, [pc, #260]	@ (801c69c <udp_sendto_if_src+0x22c>)
 801c598:	f004 f9b0 	bl	80208fc <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c59c:	69fb      	ldr	r3, [r7, #28]
 801c59e:	895b      	ldrh	r3, [r3, #10]
 801c5a0:	2b07      	cmp	r3, #7
 801c5a2:	d806      	bhi.n	801c5b2 <udp_sendto_if_src+0x142>
 801c5a4:	4b32      	ldr	r3, [pc, #200]	@ (801c670 <udp_sendto_if_src+0x200>)
 801c5a6:	f240 320d 	movw	r2, #781	@ 0x30d
 801c5aa:	493d      	ldr	r1, [pc, #244]	@ (801c6a0 <udp_sendto_if_src+0x230>)
 801c5ac:	4832      	ldr	r0, [pc, #200]	@ (801c678 <udp_sendto_if_src+0x208>)
 801c5ae:	f004 f9a5 	bl	80208fc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c5b2:	69fb      	ldr	r3, [r7, #28]
 801c5b4:	685b      	ldr	r3, [r3, #4]
 801c5b6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	8a5b      	ldrh	r3, [r3, #18]
 801c5bc:	4618      	mov	r0, r3
 801c5be:	f7f7 f8b9 	bl	8013734 <lwip_htons>
 801c5c2:	4603      	mov	r3, r0
 801c5c4:	461a      	mov	r2, r3
 801c5c6:	697b      	ldr	r3, [r7, #20]
 801c5c8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c5ca:	887b      	ldrh	r3, [r7, #2]
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	f7f7 f8b1 	bl	8013734 <lwip_htons>
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	461a      	mov	r2, r3
 801c5d6:	697b      	ldr	r3, [r7, #20]
 801c5d8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c5da:	697b      	ldr	r3, [r7, #20]
 801c5dc:	2200      	movs	r2, #0
 801c5de:	719a      	strb	r2, [r3, #6]
 801c5e0:	2200      	movs	r2, #0
 801c5e2:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801c5e4:	69fb      	ldr	r3, [r7, #28]
 801c5e6:	891b      	ldrh	r3, [r3, #8]
 801c5e8:	4619      	mov	r1, r3
 801c5ea:	482e      	ldr	r0, [pc, #184]	@ (801c6a4 <udp_sendto_if_src+0x234>)
 801c5ec:	f004 f986 	bl	80208fc <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801c5f0:	69fb      	ldr	r3, [r7, #28]
 801c5f2:	891b      	ldrh	r3, [r3, #8]
 801c5f4:	4619      	mov	r1, r3
 801c5f6:	482c      	ldr	r0, [pc, #176]	@ (801c6a8 <udp_sendto_if_src+0x238>)
 801c5f8:	f004 f980 	bl	80208fc <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 801c5fc:	69fb      	ldr	r3, [r7, #28]
 801c5fe:	891b      	ldrh	r3, [r3, #8]
 801c600:	4618      	mov	r0, r3
 801c602:	f7f7 f897 	bl	8013734 <lwip_htons>
 801c606:	4603      	mov	r3, r0
 801c608:	461a      	mov	r2, r3
 801c60a:	697b      	ldr	r3, [r7, #20]
 801c60c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c60e:	2311      	movs	r3, #17
 801c610:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	7adb      	ldrb	r3, [r3, #11]
 801c616:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 801c618:	697b      	ldr	r3, [r7, #20]
 801c61a:	88db      	ldrh	r3, [r3, #6]
 801c61c:	b29b      	uxth	r3, r3
 801c61e:	4619      	mov	r1, r3
 801c620:	4822      	ldr	r0, [pc, #136]	@ (801c6ac <udp_sendto_if_src+0x23c>)
 801c622:	f004 f96b 	bl	80208fc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801c626:	7cfb      	ldrb	r3, [r7, #19]
 801c628:	4619      	mov	r1, r3
 801c62a:	4821      	ldr	r0, [pc, #132]	@ (801c6b0 <udp_sendto_if_src+0x240>)
 801c62c:	f004 f966 	bl	80208fc <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	7a9b      	ldrb	r3, [r3, #10]
 801c634:	7cb9      	ldrb	r1, [r7, #18]
 801c636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c638:	9202      	str	r2, [sp, #8]
 801c63a:	7cfa      	ldrb	r2, [r7, #19]
 801c63c:	9201      	str	r2, [sp, #4]
 801c63e:	9300      	str	r3, [sp, #0]
 801c640:	460b      	mov	r3, r1
 801c642:	687a      	ldr	r2, [r7, #4]
 801c644:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c646:	69f8      	ldr	r0, [r7, #28]
 801c648:	f001 fe5a 	bl	801e300 <ip4_output_if_src>
 801c64c:	4603      	mov	r3, r0
 801c64e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c650:	69fa      	ldr	r2, [r7, #28]
 801c652:	68bb      	ldr	r3, [r7, #8]
 801c654:	429a      	cmp	r2, r3
 801c656:	d004      	beq.n	801c662 <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 801c658:	69f8      	ldr	r0, [r7, #28]
 801c65a:	f7f8 fdc5 	bl	80151e8 <pbuf_free>
    q = NULL;
 801c65e:	2300      	movs	r3, #0
 801c660:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c662:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c666:	4618      	mov	r0, r3
 801c668:	3720      	adds	r7, #32
 801c66a:	46bd      	mov	sp, r7
 801c66c:	bd80      	pop	{r7, pc}
 801c66e:	bf00      	nop
 801c670:	08024cd8 	.word	0x08024cd8
 801c674:	08024fbc 	.word	0x08024fbc
 801c678:	08024d2c 	.word	0x08024d2c
 801c67c:	08024fdc 	.word	0x08024fdc
 801c680:	08024ffc 	.word	0x08024ffc
 801c684:	08025020 	.word	0x08025020
 801c688:	08025044 	.word	0x08025044
 801c68c:	08025068 	.word	0x08025068
 801c690:	08025098 	.word	0x08025098
 801c694:	080250bc 	.word	0x080250bc
 801c698:	080250e0 	.word	0x080250e0
 801c69c:	08025118 	.word	0x08025118
 801c6a0:	08025144 	.word	0x08025144
 801c6a4:	08025174 	.word	0x08025174
 801c6a8:	080251a0 	.word	0x080251a0
 801c6ac:	080251c4 	.word	0x080251c4
 801c6b0:	080251e4 	.word	0x080251e4

0801c6b4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c6b4:	b580      	push	{r7, lr}
 801c6b6:	b088      	sub	sp, #32
 801c6b8:	af02      	add	r7, sp, #8
 801c6ba:	60f8      	str	r0, [r7, #12]
 801c6bc:	60b9      	str	r1, [r7, #8]
 801c6be:	4613      	mov	r3, r2
 801c6c0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c6c2:	68bb      	ldr	r3, [r7, #8]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d101      	bne.n	801c6cc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c6c8:	4b65      	ldr	r3, [pc, #404]	@ (801c860 <udp_bind+0x1ac>)
 801c6ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d109      	bne.n	801c6e6 <udp_bind+0x32>
 801c6d2:	4b64      	ldr	r3, [pc, #400]	@ (801c864 <udp_bind+0x1b0>)
 801c6d4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801c6d8:	4963      	ldr	r1, [pc, #396]	@ (801c868 <udp_bind+0x1b4>)
 801c6da:	4864      	ldr	r0, [pc, #400]	@ (801c86c <udp_bind+0x1b8>)
 801c6dc:	f004 f90e 	bl	80208fc <iprintf>
 801c6e0:	f06f 030f 	mvn.w	r3, #15
 801c6e4:	e0b7      	b.n	801c856 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801c6e6:	4862      	ldr	r0, [pc, #392]	@ (801c870 <udp_bind+0x1bc>)
 801c6e8:	f004 f908 	bl	80208fc <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 801c6ec:	68bb      	ldr	r3, [r7, #8]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d003      	beq.n	801c6fa <udp_bind+0x46>
 801c6f2:	68bb      	ldr	r3, [r7, #8]
 801c6f4:	781b      	ldrb	r3, [r3, #0]
 801c6f6:	4619      	mov	r1, r3
 801c6f8:	e000      	b.n	801c6fc <udp_bind+0x48>
 801c6fa:	2100      	movs	r1, #0
 801c6fc:	68bb      	ldr	r3, [r7, #8]
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d004      	beq.n	801c70c <udp_bind+0x58>
 801c702:	68bb      	ldr	r3, [r7, #8]
 801c704:	3301      	adds	r3, #1
 801c706:	781b      	ldrb	r3, [r3, #0]
 801c708:	461a      	mov	r2, r3
 801c70a:	e000      	b.n	801c70e <udp_bind+0x5a>
 801c70c:	2200      	movs	r2, #0
 801c70e:	68bb      	ldr	r3, [r7, #8]
 801c710:	2b00      	cmp	r3, #0
 801c712:	d004      	beq.n	801c71e <udp_bind+0x6a>
 801c714:	68bb      	ldr	r3, [r7, #8]
 801c716:	3302      	adds	r3, #2
 801c718:	781b      	ldrb	r3, [r3, #0]
 801c71a:	4618      	mov	r0, r3
 801c71c:	e000      	b.n	801c720 <udp_bind+0x6c>
 801c71e:	2000      	movs	r0, #0
 801c720:	68bb      	ldr	r3, [r7, #8]
 801c722:	2b00      	cmp	r3, #0
 801c724:	d003      	beq.n	801c72e <udp_bind+0x7a>
 801c726:	68bb      	ldr	r3, [r7, #8]
 801c728:	3303      	adds	r3, #3
 801c72a:	781b      	ldrb	r3, [r3, #0]
 801c72c:	e000      	b.n	801c730 <udp_bind+0x7c>
 801c72e:	2300      	movs	r3, #0
 801c730:	9300      	str	r3, [sp, #0]
 801c732:	4603      	mov	r3, r0
 801c734:	484f      	ldr	r0, [pc, #316]	@ (801c874 <udp_bind+0x1c0>)
 801c736:	f004 f8e1 	bl	80208fc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 801c73a:	88fb      	ldrh	r3, [r7, #6]
 801c73c:	4619      	mov	r1, r3
 801c73e:	484e      	ldr	r0, [pc, #312]	@ (801c878 <udp_bind+0x1c4>)
 801c740:	f004 f8dc 	bl	80208fc <iprintf>

  rebind = 0;
 801c744:	2300      	movs	r3, #0
 801c746:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c748:	4b4c      	ldr	r3, [pc, #304]	@ (801c87c <udp_bind+0x1c8>)
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	617b      	str	r3, [r7, #20]
 801c74e:	e009      	b.n	801c764 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c750:	68fa      	ldr	r2, [r7, #12]
 801c752:	697b      	ldr	r3, [r7, #20]
 801c754:	429a      	cmp	r2, r3
 801c756:	d102      	bne.n	801c75e <udp_bind+0xaa>
      rebind = 1;
 801c758:	2301      	movs	r3, #1
 801c75a:	74fb      	strb	r3, [r7, #19]
      break;
 801c75c:	e005      	b.n	801c76a <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c75e:	697b      	ldr	r3, [r7, #20]
 801c760:	68db      	ldr	r3, [r3, #12]
 801c762:	617b      	str	r3, [r7, #20]
 801c764:	697b      	ldr	r3, [r7, #20]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d1f2      	bne.n	801c750 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c76a:	88fb      	ldrh	r3, [r7, #6]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d10c      	bne.n	801c78a <udp_bind+0xd6>
    port = udp_new_port();
 801c770:	f7ff fae0 	bl	801bd34 <udp_new_port>
 801c774:	4603      	mov	r3, r0
 801c776:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c778:	88fb      	ldrh	r3, [r7, #6]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d134      	bne.n	801c7e8 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 801c77e:	4840      	ldr	r0, [pc, #256]	@ (801c880 <udp_bind+0x1cc>)
 801c780:	f004 f92c 	bl	80209dc <puts>
      return ERR_USE;
 801c784:	f06f 0307 	mvn.w	r3, #7
 801c788:	e065      	b.n	801c856 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c78a:	4b3c      	ldr	r3, [pc, #240]	@ (801c87c <udp_bind+0x1c8>)
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	617b      	str	r3, [r7, #20]
 801c790:	e027      	b.n	801c7e2 <udp_bind+0x12e>
      if (pcb != ipcb) {
 801c792:	68fa      	ldr	r2, [r7, #12]
 801c794:	697b      	ldr	r3, [r7, #20]
 801c796:	429a      	cmp	r2, r3
 801c798:	d020      	beq.n	801c7dc <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c79a:	697b      	ldr	r3, [r7, #20]
 801c79c:	8a5b      	ldrh	r3, [r3, #18]
 801c79e:	88fa      	ldrh	r2, [r7, #6]
 801c7a0:	429a      	cmp	r2, r3
 801c7a2:	d11b      	bne.n	801c7dc <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c7a4:	697b      	ldr	r3, [r7, #20]
 801c7a6:	681a      	ldr	r2, [r3, #0]
 801c7a8:	68bb      	ldr	r3, [r7, #8]
 801c7aa:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c7ac:	429a      	cmp	r2, r3
 801c7ae:	d00d      	beq.n	801c7cc <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c7b0:	68bb      	ldr	r3, [r7, #8]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d00a      	beq.n	801c7cc <udp_bind+0x118>
 801c7b6:	68bb      	ldr	r3, [r7, #8]
 801c7b8:	681b      	ldr	r3, [r3, #0]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d006      	beq.n	801c7cc <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801c7be:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d003      	beq.n	801c7cc <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801c7c4:	697b      	ldr	r3, [r7, #20]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d107      	bne.n	801c7dc <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 801c7cc:	88fb      	ldrh	r3, [r7, #6]
 801c7ce:	4619      	mov	r1, r3
 801c7d0:	482c      	ldr	r0, [pc, #176]	@ (801c884 <udp_bind+0x1d0>)
 801c7d2:	f004 f893 	bl	80208fc <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c7d6:	f06f 0307 	mvn.w	r3, #7
 801c7da:	e03c      	b.n	801c856 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c7dc:	697b      	ldr	r3, [r7, #20]
 801c7de:	68db      	ldr	r3, [r3, #12]
 801c7e0:	617b      	str	r3, [r7, #20]
 801c7e2:	697b      	ldr	r3, [r7, #20]
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d1d4      	bne.n	801c792 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c7e8:	68bb      	ldr	r3, [r7, #8]
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	d002      	beq.n	801c7f4 <udp_bind+0x140>
 801c7ee:	68bb      	ldr	r3, [r7, #8]
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	e000      	b.n	801c7f6 <udp_bind+0x142>
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	68fa      	ldr	r2, [r7, #12]
 801c7f8:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	88fa      	ldrh	r2, [r7, #6]
 801c7fe:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c800:	7cfb      	ldrb	r3, [r7, #19]
 801c802:	2b00      	cmp	r3, #0
 801c804:	d106      	bne.n	801c814 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c806:	4b1d      	ldr	r3, [pc, #116]	@ (801c87c <udp_bind+0x1c8>)
 801c808:	681a      	ldr	r2, [r3, #0]
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c80e:	4a1b      	ldr	r2, [pc, #108]	@ (801c87c <udp_bind+0x1c8>)
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 801c814:	481c      	ldr	r0, [pc, #112]	@ (801c888 <udp_bind+0x1d4>)
 801c816:	f004 f871 	bl	80208fc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	b2db      	uxtb	r3, r3
 801c820:	4619      	mov	r1, r3
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	0a1b      	lsrs	r3, r3, #8
 801c828:	b2db      	uxtb	r3, r3
 801c82a:	461a      	mov	r2, r3
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	0c1b      	lsrs	r3, r3, #16
 801c832:	b2db      	uxtb	r3, r3
 801c834:	4618      	mov	r0, r3
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	0e1b      	lsrs	r3, r3, #24
 801c83c:	b2db      	uxtb	r3, r3
 801c83e:	9300      	str	r3, [sp, #0]
 801c840:	4603      	mov	r3, r0
 801c842:	480c      	ldr	r0, [pc, #48]	@ (801c874 <udp_bind+0x1c0>)
 801c844:	f004 f85a 	bl	80208fc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	8a5b      	ldrh	r3, [r3, #18]
 801c84c:	4619      	mov	r1, r3
 801c84e:	480f      	ldr	r0, [pc, #60]	@ (801c88c <udp_bind+0x1d8>)
 801c850:	f004 f854 	bl	80208fc <iprintf>
  return ERR_OK;
 801c854:	2300      	movs	r3, #0
}
 801c856:	4618      	mov	r0, r3
 801c858:	3718      	adds	r7, #24
 801c85a:	46bd      	mov	sp, r7
 801c85c:	bd80      	pop	{r7, pc}
 801c85e:	bf00      	nop
 801c860:	08026420 	.word	0x08026420
 801c864:	08024cd8 	.word	0x08024cd8
 801c868:	0802520c 	.word	0x0802520c
 801c86c:	08024d2c 	.word	0x08024d2c
 801c870:	08025224 	.word	0x08025224
 801c874:	08024e1c 	.word	0x08024e1c
 801c878:	08025238 	.word	0x08025238
 801c87c:	20022b08 	.word	0x20022b08
 801c880:	08025248 	.word	0x08025248
 801c884:	08025268 	.word	0x08025268
 801c888:	080252a0 	.word	0x080252a0
 801c88c:	080252b4 	.word	0x080252b4

0801c890 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c890:	b580      	push	{r7, lr}
 801c892:	b088      	sub	sp, #32
 801c894:	af02      	add	r7, sp, #8
 801c896:	60f8      	str	r0, [r7, #12]
 801c898:	60b9      	str	r1, [r7, #8]
 801c89a:	4613      	mov	r3, r2
 801c89c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d109      	bne.n	801c8b8 <udp_connect+0x28>
 801c8a4:	4b3c      	ldr	r3, [pc, #240]	@ (801c998 <udp_connect+0x108>)
 801c8a6:	f240 4235 	movw	r2, #1077	@ 0x435
 801c8aa:	493c      	ldr	r1, [pc, #240]	@ (801c99c <udp_connect+0x10c>)
 801c8ac:	483c      	ldr	r0, [pc, #240]	@ (801c9a0 <udp_connect+0x110>)
 801c8ae:	f004 f825 	bl	80208fc <iprintf>
 801c8b2:	f06f 030f 	mvn.w	r3, #15
 801c8b6:	e06b      	b.n	801c990 <udp_connect+0x100>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c8b8:	68bb      	ldr	r3, [r7, #8]
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d109      	bne.n	801c8d2 <udp_connect+0x42>
 801c8be:	4b36      	ldr	r3, [pc, #216]	@ (801c998 <udp_connect+0x108>)
 801c8c0:	f240 4236 	movw	r2, #1078	@ 0x436
 801c8c4:	4937      	ldr	r1, [pc, #220]	@ (801c9a4 <udp_connect+0x114>)
 801c8c6:	4836      	ldr	r0, [pc, #216]	@ (801c9a0 <udp_connect+0x110>)
 801c8c8:	f004 f818 	bl	80208fc <iprintf>
 801c8cc:	f06f 030f 	mvn.w	r3, #15
 801c8d0:	e05e      	b.n	801c990 <udp_connect+0x100>

  if (pcb->local_port == 0) {
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	8a5b      	ldrh	r3, [r3, #18]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d10f      	bne.n	801c8fa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c8da:	68f9      	ldr	r1, [r7, #12]
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	8a5b      	ldrh	r3, [r3, #18]
 801c8e0:	461a      	mov	r2, r3
 801c8e2:	68f8      	ldr	r0, [r7, #12]
 801c8e4:	f7ff fee6 	bl	801c6b4 <udp_bind>
 801c8e8:	4603      	mov	r3, r0
 801c8ea:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c8ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d002      	beq.n	801c8fa <udp_connect+0x6a>
      return err;
 801c8f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c8f8:	e04a      	b.n	801c990 <udp_connect+0x100>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c8fa:	68bb      	ldr	r3, [r7, #8]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d002      	beq.n	801c906 <udp_connect+0x76>
 801c900:	68bb      	ldr	r3, [r7, #8]
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	e000      	b.n	801c908 <udp_connect+0x78>
 801c906:	2300      	movs	r3, #0
 801c908:	68fa      	ldr	r2, [r7, #12]
 801c90a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	88fa      	ldrh	r2, [r7, #6]
 801c910:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	7c1b      	ldrb	r3, [r3, #16]
 801c916:	f043 0304 	orr.w	r3, r3, #4
 801c91a:	b2da      	uxtb	r2, r3
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 801c920:	4821      	ldr	r0, [pc, #132]	@ (801c9a8 <udp_connect+0x118>)
 801c922:	f003 ffeb 	bl	80208fc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	685b      	ldr	r3, [r3, #4]
 801c92a:	b2db      	uxtb	r3, r3
 801c92c:	4619      	mov	r1, r3
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	685b      	ldr	r3, [r3, #4]
 801c932:	0a1b      	lsrs	r3, r3, #8
 801c934:	b2db      	uxtb	r3, r3
 801c936:	461a      	mov	r2, r3
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	685b      	ldr	r3, [r3, #4]
 801c93c:	0c1b      	lsrs	r3, r3, #16
 801c93e:	b2db      	uxtb	r3, r3
 801c940:	4618      	mov	r0, r3
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	685b      	ldr	r3, [r3, #4]
 801c946:	0e1b      	lsrs	r3, r3, #24
 801c948:	b2db      	uxtb	r3, r3
 801c94a:	9300      	str	r3, [sp, #0]
 801c94c:	4603      	mov	r3, r0
 801c94e:	4817      	ldr	r0, [pc, #92]	@ (801c9ac <udp_connect+0x11c>)
 801c950:	f003 ffd4 	bl	80208fc <iprintf>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	8a9b      	ldrh	r3, [r3, #20]
 801c958:	4619      	mov	r1, r3
 801c95a:	4815      	ldr	r0, [pc, #84]	@ (801c9b0 <udp_connect+0x120>)
 801c95c:	f003 ffce 	bl	80208fc <iprintf>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c960:	4b14      	ldr	r3, [pc, #80]	@ (801c9b4 <udp_connect+0x124>)
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	617b      	str	r3, [r7, #20]
 801c966:	e008      	b.n	801c97a <udp_connect+0xea>
    if (pcb == ipcb) {
 801c968:	68fa      	ldr	r2, [r7, #12]
 801c96a:	697b      	ldr	r3, [r7, #20]
 801c96c:	429a      	cmp	r2, r3
 801c96e:	d101      	bne.n	801c974 <udp_connect+0xe4>
      /* already on the list, just return */
      return ERR_OK;
 801c970:	2300      	movs	r3, #0
 801c972:	e00d      	b.n	801c990 <udp_connect+0x100>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c974:	697b      	ldr	r3, [r7, #20]
 801c976:	68db      	ldr	r3, [r3, #12]
 801c978:	617b      	str	r3, [r7, #20]
 801c97a:	697b      	ldr	r3, [r7, #20]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d1f3      	bne.n	801c968 <udp_connect+0xd8>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c980:	4b0c      	ldr	r3, [pc, #48]	@ (801c9b4 <udp_connect+0x124>)
 801c982:	681a      	ldr	r2, [r3, #0]
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c988:	4a0a      	ldr	r2, [pc, #40]	@ (801c9b4 <udp_connect+0x124>)
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c98e:	2300      	movs	r3, #0
}
 801c990:	4618      	mov	r0, r3
 801c992:	3718      	adds	r7, #24
 801c994:	46bd      	mov	sp, r7
 801c996:	bd80      	pop	{r7, pc}
 801c998:	08024cd8 	.word	0x08024cd8
 801c99c:	080252c4 	.word	0x080252c4
 801c9a0:	08024d2c 	.word	0x08024d2c
 801c9a4:	080252e0 	.word	0x080252e0
 801c9a8:	080252fc 	.word	0x080252fc
 801c9ac:	08024e1c 	.word	0x08024e1c
 801c9b0:	080252b4 	.word	0x080252b4
 801c9b4:	20022b08 	.word	0x20022b08

0801c9b8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b082      	sub	sp, #8
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d107      	bne.n	801c9d6 <udp_disconnect+0x1e>
 801c9c6:	4b0d      	ldr	r3, [pc, #52]	@ (801c9fc <udp_disconnect+0x44>)
 801c9c8:	f240 426a 	movw	r2, #1130	@ 0x46a
 801c9cc:	490c      	ldr	r1, [pc, #48]	@ (801ca00 <udp_disconnect+0x48>)
 801c9ce:	480d      	ldr	r0, [pc, #52]	@ (801ca04 <udp_disconnect+0x4c>)
 801c9d0:	f003 ff94 	bl	80208fc <iprintf>
 801c9d4:	e00f      	b.n	801c9f6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	2200      	movs	r2, #0
 801c9da:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	2200      	movs	r2, #0
 801c9e0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	2200      	movs	r2, #0
 801c9e6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	7c1b      	ldrb	r3, [r3, #16]
 801c9ec:	f023 0304 	bic.w	r3, r3, #4
 801c9f0:	b2da      	uxtb	r2, r3
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	741a      	strb	r2, [r3, #16]
}
 801c9f6:	3708      	adds	r7, #8
 801c9f8:	46bd      	mov	sp, r7
 801c9fa:	bd80      	pop	{r7, pc}
 801c9fc:	08024cd8 	.word	0x08024cd8
 801ca00:	08025318 	.word	0x08025318
 801ca04:	08024d2c 	.word	0x08024d2c

0801ca08 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801ca08:	b580      	push	{r7, lr}
 801ca0a:	b084      	sub	sp, #16
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	60f8      	str	r0, [r7, #12]
 801ca10:	60b9      	str	r1, [r7, #8]
 801ca12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d107      	bne.n	801ca2a <udp_recv+0x22>
 801ca1a:	4b08      	ldr	r3, [pc, #32]	@ (801ca3c <udp_recv+0x34>)
 801ca1c:	f240 428a 	movw	r2, #1162	@ 0x48a
 801ca20:	4907      	ldr	r1, [pc, #28]	@ (801ca40 <udp_recv+0x38>)
 801ca22:	4808      	ldr	r0, [pc, #32]	@ (801ca44 <udp_recv+0x3c>)
 801ca24:	f003 ff6a 	bl	80208fc <iprintf>
 801ca28:	e005      	b.n	801ca36 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	68ba      	ldr	r2, [r7, #8]
 801ca2e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	687a      	ldr	r2, [r7, #4]
 801ca34:	61da      	str	r2, [r3, #28]
}
 801ca36:	3710      	adds	r7, #16
 801ca38:	46bd      	mov	sp, r7
 801ca3a:	bd80      	pop	{r7, pc}
 801ca3c:	08024cd8 	.word	0x08024cd8
 801ca40:	08025334 	.word	0x08025334
 801ca44:	08024d2c 	.word	0x08024d2c

0801ca48 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801ca48:	b580      	push	{r7, lr}
 801ca4a:	b084      	sub	sp, #16
 801ca4c:	af00      	add	r7, sp, #0
 801ca4e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d107      	bne.n	801ca66 <udp_remove+0x1e>
 801ca56:	4b19      	ldr	r3, [pc, #100]	@ (801cabc <udp_remove+0x74>)
 801ca58:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801ca5c:	4918      	ldr	r1, [pc, #96]	@ (801cac0 <udp_remove+0x78>)
 801ca5e:	4819      	ldr	r0, [pc, #100]	@ (801cac4 <udp_remove+0x7c>)
 801ca60:	f003 ff4c 	bl	80208fc <iprintf>
 801ca64:	e026      	b.n	801cab4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ca66:	4b18      	ldr	r3, [pc, #96]	@ (801cac8 <udp_remove+0x80>)
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	687a      	ldr	r2, [r7, #4]
 801ca6c:	429a      	cmp	r2, r3
 801ca6e:	d105      	bne.n	801ca7c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ca70:	4b15      	ldr	r3, [pc, #84]	@ (801cac8 <udp_remove+0x80>)
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	68db      	ldr	r3, [r3, #12]
 801ca76:	4a14      	ldr	r2, [pc, #80]	@ (801cac8 <udp_remove+0x80>)
 801ca78:	6013      	str	r3, [r2, #0]
 801ca7a:	e017      	b.n	801caac <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ca7c:	4b12      	ldr	r3, [pc, #72]	@ (801cac8 <udp_remove+0x80>)
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	60fb      	str	r3, [r7, #12]
 801ca82:	e010      	b.n	801caa6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	68db      	ldr	r3, [r3, #12]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d009      	beq.n	801caa0 <udp_remove+0x58>
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	68db      	ldr	r3, [r3, #12]
 801ca90:	687a      	ldr	r2, [r7, #4]
 801ca92:	429a      	cmp	r2, r3
 801ca94:	d104      	bne.n	801caa0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	68da      	ldr	r2, [r3, #12]
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	60da      	str	r2, [r3, #12]
        break;
 801ca9e:	e005      	b.n	801caac <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	68db      	ldr	r3, [r3, #12]
 801caa4:	60fb      	str	r3, [r7, #12]
 801caa6:	68fb      	ldr	r3, [r7, #12]
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d1eb      	bne.n	801ca84 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801caac:	6879      	ldr	r1, [r7, #4]
 801caae:	2000      	movs	r0, #0
 801cab0:	f7f7 fbb4 	bl	801421c <memp_free>
}
 801cab4:	3710      	adds	r7, #16
 801cab6:	46bd      	mov	sp, r7
 801cab8:	bd80      	pop	{r7, pc}
 801caba:	bf00      	nop
 801cabc:	08024cd8 	.word	0x08024cd8
 801cac0:	0802534c 	.word	0x0802534c
 801cac4:	08024d2c 	.word	0x08024d2c
 801cac8:	20022b08 	.word	0x20022b08

0801cacc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801cacc:	b580      	push	{r7, lr}
 801cace:	b082      	sub	sp, #8
 801cad0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801cad2:	2000      	movs	r0, #0
 801cad4:	f7f7 fb2c 	bl	8014130 <memp_malloc>
 801cad8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d007      	beq.n	801caf0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801cae0:	2220      	movs	r2, #32
 801cae2:	2100      	movs	r1, #0
 801cae4:	6878      	ldr	r0, [r7, #4]
 801cae6:	f004 f869 	bl	8020bbc <memset>
    pcb->ttl = UDP_TTL;
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	22ff      	movs	r2, #255	@ 0xff
 801caee:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801caf0:	687b      	ldr	r3, [r7, #4]
}
 801caf2:	4618      	mov	r0, r3
 801caf4:	3708      	adds	r7, #8
 801caf6:	46bd      	mov	sp, r7
 801caf8:	bd80      	pop	{r7, pc}

0801cafa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801cafa:	b580      	push	{r7, lr}
 801cafc:	b084      	sub	sp, #16
 801cafe:	af00      	add	r7, sp, #0
 801cb00:	4603      	mov	r3, r0
 801cb02:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801cb04:	f7ff ffe2 	bl	801cacc <udp_new>
 801cb08:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801cb0a:	68fb      	ldr	r3, [r7, #12]
}
 801cb0c:	4618      	mov	r0, r3
 801cb0e:	3710      	adds	r7, #16
 801cb10:	46bd      	mov	sp, r7
 801cb12:	bd80      	pop	{r7, pc}

0801cb14 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801cb14:	b480      	push	{r7}
 801cb16:	b085      	sub	sp, #20
 801cb18:	af00      	add	r7, sp, #0
 801cb1a:	6078      	str	r0, [r7, #4]
 801cb1c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d01e      	beq.n	801cb62 <udp_netif_ip_addr_changed+0x4e>
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d01a      	beq.n	801cb62 <udp_netif_ip_addr_changed+0x4e>
 801cb2c:	683b      	ldr	r3, [r7, #0]
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d017      	beq.n	801cb62 <udp_netif_ip_addr_changed+0x4e>
 801cb32:	683b      	ldr	r3, [r7, #0]
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d013      	beq.n	801cb62 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cb3a:	4b0d      	ldr	r3, [pc, #52]	@ (801cb70 <udp_netif_ip_addr_changed+0x5c>)
 801cb3c:	681b      	ldr	r3, [r3, #0]
 801cb3e:	60fb      	str	r3, [r7, #12]
 801cb40:	e00c      	b.n	801cb5c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	681a      	ldr	r2, [r3, #0]
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	429a      	cmp	r2, r3
 801cb4c:	d103      	bne.n	801cb56 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801cb4e:	683b      	ldr	r3, [r7, #0]
 801cb50:	681a      	ldr	r2, [r3, #0]
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cb56:	68fb      	ldr	r3, [r7, #12]
 801cb58:	68db      	ldr	r3, [r3, #12]
 801cb5a:	60fb      	str	r3, [r7, #12]
 801cb5c:	68fb      	ldr	r3, [r7, #12]
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d1ef      	bne.n	801cb42 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801cb62:	bf00      	nop
 801cb64:	3714      	adds	r7, #20
 801cb66:	46bd      	mov	sp, r7
 801cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb6c:	4770      	bx	lr
 801cb6e:	bf00      	nop
 801cb70:	20022b08 	.word	0x20022b08

0801cb74 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801cb74:	b590      	push	{r4, r7, lr}
 801cb76:	b083      	sub	sp, #12
 801cb78:	af00      	add	r7, sp, #0
 801cb7a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 801cb7c:	481b      	ldr	r0, [pc, #108]	@ (801cbec <udp_debug_print+0x78>)
 801cb7e:	f003 ff2d 	bl	80209dc <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801cb82:	481b      	ldr	r0, [pc, #108]	@ (801cbf0 <udp_debug_print+0x7c>)
 801cb84:	f003 ff2a 	bl	80209dc <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	881b      	ldrh	r3, [r3, #0]
 801cb8c:	b29b      	uxth	r3, r3
 801cb8e:	4618      	mov	r0, r3
 801cb90:	f7f6 fdd0 	bl	8013734 <lwip_htons>
 801cb94:	4603      	mov	r3, r0
 801cb96:	461c      	mov	r4, r3
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	885b      	ldrh	r3, [r3, #2]
 801cb9c:	b29b      	uxth	r3, r3
 801cb9e:	4618      	mov	r0, r3
 801cba0:	f7f6 fdc8 	bl	8013734 <lwip_htons>
 801cba4:	4603      	mov	r3, r0
 801cba6:	461a      	mov	r2, r3
 801cba8:	4621      	mov	r1, r4
 801cbaa:	4812      	ldr	r0, [pc, #72]	@ (801cbf4 <udp_debug_print+0x80>)
 801cbac:	f003 fea6 	bl	80208fc <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801cbb0:	480f      	ldr	r0, [pc, #60]	@ (801cbf0 <udp_debug_print+0x7c>)
 801cbb2:	f003 ff13 	bl	80209dc <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	889b      	ldrh	r3, [r3, #4]
 801cbba:	b29b      	uxth	r3, r3
 801cbbc:	4618      	mov	r0, r3
 801cbbe:	f7f6 fdb9 	bl	8013734 <lwip_htons>
 801cbc2:	4603      	mov	r3, r0
 801cbc4:	461c      	mov	r4, r3
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	88db      	ldrh	r3, [r3, #6]
 801cbca:	b29b      	uxth	r3, r3
 801cbcc:	4618      	mov	r0, r3
 801cbce:	f7f6 fdb1 	bl	8013734 <lwip_htons>
 801cbd2:	4603      	mov	r3, r0
 801cbd4:	461a      	mov	r2, r3
 801cbd6:	4621      	mov	r1, r4
 801cbd8:	4807      	ldr	r0, [pc, #28]	@ (801cbf8 <udp_debug_print+0x84>)
 801cbda:	f003 fe8f 	bl	80208fc <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801cbde:	4804      	ldr	r0, [pc, #16]	@ (801cbf0 <udp_debug_print+0x7c>)
 801cbe0:	f003 fefc 	bl	80209dc <puts>
}
 801cbe4:	bf00      	nop
 801cbe6:	370c      	adds	r7, #12
 801cbe8:	46bd      	mov	sp, r7
 801cbea:	bd90      	pop	{r4, r7, pc}
 801cbec:	08025364 	.word	0x08025364
 801cbf0:	08025370 	.word	0x08025370
 801cbf4:	08025394 	.word	0x08025394
 801cbf8:	080253cc 	.word	0x080253cc

0801cbfc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801cbfc:	b580      	push	{r7, lr}
 801cbfe:	b082      	sub	sp, #8
 801cc00:	af00      	add	r7, sp, #0
 801cc02:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801cc04:	492b      	ldr	r1, [pc, #172]	@ (801ccb4 <etharp_free_entry+0xb8>)
 801cc06:	687a      	ldr	r2, [r7, #4]
 801cc08:	4613      	mov	r3, r2
 801cc0a:	005b      	lsls	r3, r3, #1
 801cc0c:	4413      	add	r3, r2
 801cc0e:	00db      	lsls	r3, r3, #3
 801cc10:	440b      	add	r3, r1
 801cc12:	681b      	ldr	r3, [r3, #0]
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d013      	beq.n	801cc40 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801cc18:	4926      	ldr	r1, [pc, #152]	@ (801ccb4 <etharp_free_entry+0xb8>)
 801cc1a:	687a      	ldr	r2, [r7, #4]
 801cc1c:	4613      	mov	r3, r2
 801cc1e:	005b      	lsls	r3, r3, #1
 801cc20:	4413      	add	r3, r2
 801cc22:	00db      	lsls	r3, r3, #3
 801cc24:	440b      	add	r3, r1
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	4618      	mov	r0, r3
 801cc2a:	f7f8 fadd 	bl	80151e8 <pbuf_free>
    arp_table[i].q = NULL;
 801cc2e:	4921      	ldr	r1, [pc, #132]	@ (801ccb4 <etharp_free_entry+0xb8>)
 801cc30:	687a      	ldr	r2, [r7, #4]
 801cc32:	4613      	mov	r3, r2
 801cc34:	005b      	lsls	r3, r3, #1
 801cc36:	4413      	add	r3, r2
 801cc38:	00db      	lsls	r3, r3, #3
 801cc3a:	440b      	add	r3, r1
 801cc3c:	2200      	movs	r2, #0
 801cc3e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801cc40:	491c      	ldr	r1, [pc, #112]	@ (801ccb4 <etharp_free_entry+0xb8>)
 801cc42:	687a      	ldr	r2, [r7, #4]
 801cc44:	4613      	mov	r3, r2
 801cc46:	005b      	lsls	r3, r3, #1
 801cc48:	4413      	add	r3, r2
 801cc4a:	00db      	lsls	r3, r3, #3
 801cc4c:	440b      	add	r3, r1
 801cc4e:	3314      	adds	r3, #20
 801cc50:	2200      	movs	r2, #0
 801cc52:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801cc54:	4917      	ldr	r1, [pc, #92]	@ (801ccb4 <etharp_free_entry+0xb8>)
 801cc56:	687a      	ldr	r2, [r7, #4]
 801cc58:	4613      	mov	r3, r2
 801cc5a:	005b      	lsls	r3, r3, #1
 801cc5c:	4413      	add	r3, r2
 801cc5e:	00db      	lsls	r3, r3, #3
 801cc60:	440b      	add	r3, r1
 801cc62:	3312      	adds	r3, #18
 801cc64:	2200      	movs	r2, #0
 801cc66:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801cc68:	4912      	ldr	r1, [pc, #72]	@ (801ccb4 <etharp_free_entry+0xb8>)
 801cc6a:	687a      	ldr	r2, [r7, #4]
 801cc6c:	4613      	mov	r3, r2
 801cc6e:	005b      	lsls	r3, r3, #1
 801cc70:	4413      	add	r3, r2
 801cc72:	00db      	lsls	r3, r3, #3
 801cc74:	440b      	add	r3, r1
 801cc76:	3308      	adds	r3, #8
 801cc78:	2200      	movs	r2, #0
 801cc7a:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801cc7c:	490d      	ldr	r1, [pc, #52]	@ (801ccb4 <etharp_free_entry+0xb8>)
 801cc7e:	687a      	ldr	r2, [r7, #4]
 801cc80:	4613      	mov	r3, r2
 801cc82:	005b      	lsls	r3, r3, #1
 801cc84:	4413      	add	r3, r2
 801cc86:	00db      	lsls	r3, r3, #3
 801cc88:	440b      	add	r3, r1
 801cc8a:	3304      	adds	r3, #4
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801cc90:	4908      	ldr	r1, [pc, #32]	@ (801ccb4 <etharp_free_entry+0xb8>)
 801cc92:	687a      	ldr	r2, [r7, #4]
 801cc94:	4613      	mov	r3, r2
 801cc96:	005b      	lsls	r3, r3, #1
 801cc98:	4413      	add	r3, r2
 801cc9a:	00db      	lsls	r3, r3, #3
 801cc9c:	440b      	add	r3, r1
 801cc9e:	3308      	adds	r3, #8
 801cca0:	4a05      	ldr	r2, [pc, #20]	@ (801ccb8 <etharp_free_entry+0xbc>)
 801cca2:	3304      	adds	r3, #4
 801cca4:	6810      	ldr	r0, [r2, #0]
 801cca6:	6018      	str	r0, [r3, #0]
 801cca8:	8892      	ldrh	r2, [r2, #4]
 801ccaa:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801ccac:	bf00      	nop
 801ccae:	3708      	adds	r7, #8
 801ccb0:	46bd      	mov	sp, r7
 801ccb2:	bd80      	pop	{r7, pc}
 801ccb4:	20022b0c 	.word	0x20022b0c
 801ccb8:	0802642c 	.word	0x0802642c

0801ccbc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801ccbc:	b580      	push	{r7, lr}
 801ccbe:	b082      	sub	sp, #8
 801ccc0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ccc2:	2300      	movs	r3, #0
 801ccc4:	607b      	str	r3, [r7, #4]
 801ccc6:	e096      	b.n	801cdf6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801ccc8:	494f      	ldr	r1, [pc, #316]	@ (801ce08 <etharp_tmr+0x14c>)
 801ccca:	687a      	ldr	r2, [r7, #4]
 801cccc:	4613      	mov	r3, r2
 801ccce:	005b      	lsls	r3, r3, #1
 801ccd0:	4413      	add	r3, r2
 801ccd2:	00db      	lsls	r3, r3, #3
 801ccd4:	440b      	add	r3, r1
 801ccd6:	3314      	adds	r3, #20
 801ccd8:	781b      	ldrb	r3, [r3, #0]
 801ccda:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801ccdc:	78fb      	ldrb	r3, [r7, #3]
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	f000 8086 	beq.w	801cdf0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801cce4:	4948      	ldr	r1, [pc, #288]	@ (801ce08 <etharp_tmr+0x14c>)
 801cce6:	687a      	ldr	r2, [r7, #4]
 801cce8:	4613      	mov	r3, r2
 801ccea:	005b      	lsls	r3, r3, #1
 801ccec:	4413      	add	r3, r2
 801ccee:	00db      	lsls	r3, r3, #3
 801ccf0:	440b      	add	r3, r1
 801ccf2:	3312      	adds	r3, #18
 801ccf4:	881b      	ldrh	r3, [r3, #0]
 801ccf6:	3301      	adds	r3, #1
 801ccf8:	b298      	uxth	r0, r3
 801ccfa:	4943      	ldr	r1, [pc, #268]	@ (801ce08 <etharp_tmr+0x14c>)
 801ccfc:	687a      	ldr	r2, [r7, #4]
 801ccfe:	4613      	mov	r3, r2
 801cd00:	005b      	lsls	r3, r3, #1
 801cd02:	4413      	add	r3, r2
 801cd04:	00db      	lsls	r3, r3, #3
 801cd06:	440b      	add	r3, r1
 801cd08:	3312      	adds	r3, #18
 801cd0a:	4602      	mov	r2, r0
 801cd0c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801cd0e:	493e      	ldr	r1, [pc, #248]	@ (801ce08 <etharp_tmr+0x14c>)
 801cd10:	687a      	ldr	r2, [r7, #4]
 801cd12:	4613      	mov	r3, r2
 801cd14:	005b      	lsls	r3, r3, #1
 801cd16:	4413      	add	r3, r2
 801cd18:	00db      	lsls	r3, r3, #3
 801cd1a:	440b      	add	r3, r1
 801cd1c:	3312      	adds	r3, #18
 801cd1e:	881b      	ldrh	r3, [r3, #0]
 801cd20:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801cd24:	d215      	bcs.n	801cd52 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801cd26:	4938      	ldr	r1, [pc, #224]	@ (801ce08 <etharp_tmr+0x14c>)
 801cd28:	687a      	ldr	r2, [r7, #4]
 801cd2a:	4613      	mov	r3, r2
 801cd2c:	005b      	lsls	r3, r3, #1
 801cd2e:	4413      	add	r3, r2
 801cd30:	00db      	lsls	r3, r3, #3
 801cd32:	440b      	add	r3, r1
 801cd34:	3314      	adds	r3, #20
 801cd36:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801cd38:	2b01      	cmp	r3, #1
 801cd3a:	d10e      	bne.n	801cd5a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801cd3c:	4932      	ldr	r1, [pc, #200]	@ (801ce08 <etharp_tmr+0x14c>)
 801cd3e:	687a      	ldr	r2, [r7, #4]
 801cd40:	4613      	mov	r3, r2
 801cd42:	005b      	lsls	r3, r3, #1
 801cd44:	4413      	add	r3, r2
 801cd46:	00db      	lsls	r3, r3, #3
 801cd48:	440b      	add	r3, r1
 801cd4a:	3312      	adds	r3, #18
 801cd4c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801cd4e:	2b04      	cmp	r3, #4
 801cd50:	d903      	bls.n	801cd5a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801cd52:	6878      	ldr	r0, [r7, #4]
 801cd54:	f7ff ff52 	bl	801cbfc <etharp_free_entry>
 801cd58:	e04a      	b.n	801cdf0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801cd5a:	492b      	ldr	r1, [pc, #172]	@ (801ce08 <etharp_tmr+0x14c>)
 801cd5c:	687a      	ldr	r2, [r7, #4]
 801cd5e:	4613      	mov	r3, r2
 801cd60:	005b      	lsls	r3, r3, #1
 801cd62:	4413      	add	r3, r2
 801cd64:	00db      	lsls	r3, r3, #3
 801cd66:	440b      	add	r3, r1
 801cd68:	3314      	adds	r3, #20
 801cd6a:	781b      	ldrb	r3, [r3, #0]
 801cd6c:	2b03      	cmp	r3, #3
 801cd6e:	d10a      	bne.n	801cd86 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801cd70:	4925      	ldr	r1, [pc, #148]	@ (801ce08 <etharp_tmr+0x14c>)
 801cd72:	687a      	ldr	r2, [r7, #4]
 801cd74:	4613      	mov	r3, r2
 801cd76:	005b      	lsls	r3, r3, #1
 801cd78:	4413      	add	r3, r2
 801cd7a:	00db      	lsls	r3, r3, #3
 801cd7c:	440b      	add	r3, r1
 801cd7e:	3314      	adds	r3, #20
 801cd80:	2204      	movs	r2, #4
 801cd82:	701a      	strb	r2, [r3, #0]
 801cd84:	e034      	b.n	801cdf0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801cd86:	4920      	ldr	r1, [pc, #128]	@ (801ce08 <etharp_tmr+0x14c>)
 801cd88:	687a      	ldr	r2, [r7, #4]
 801cd8a:	4613      	mov	r3, r2
 801cd8c:	005b      	lsls	r3, r3, #1
 801cd8e:	4413      	add	r3, r2
 801cd90:	00db      	lsls	r3, r3, #3
 801cd92:	440b      	add	r3, r1
 801cd94:	3314      	adds	r3, #20
 801cd96:	781b      	ldrb	r3, [r3, #0]
 801cd98:	2b04      	cmp	r3, #4
 801cd9a:	d10a      	bne.n	801cdb2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801cd9c:	491a      	ldr	r1, [pc, #104]	@ (801ce08 <etharp_tmr+0x14c>)
 801cd9e:	687a      	ldr	r2, [r7, #4]
 801cda0:	4613      	mov	r3, r2
 801cda2:	005b      	lsls	r3, r3, #1
 801cda4:	4413      	add	r3, r2
 801cda6:	00db      	lsls	r3, r3, #3
 801cda8:	440b      	add	r3, r1
 801cdaa:	3314      	adds	r3, #20
 801cdac:	2202      	movs	r2, #2
 801cdae:	701a      	strb	r2, [r3, #0]
 801cdb0:	e01e      	b.n	801cdf0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cdb2:	4915      	ldr	r1, [pc, #84]	@ (801ce08 <etharp_tmr+0x14c>)
 801cdb4:	687a      	ldr	r2, [r7, #4]
 801cdb6:	4613      	mov	r3, r2
 801cdb8:	005b      	lsls	r3, r3, #1
 801cdba:	4413      	add	r3, r2
 801cdbc:	00db      	lsls	r3, r3, #3
 801cdbe:	440b      	add	r3, r1
 801cdc0:	3314      	adds	r3, #20
 801cdc2:	781b      	ldrb	r3, [r3, #0]
 801cdc4:	2b01      	cmp	r3, #1
 801cdc6:	d113      	bne.n	801cdf0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801cdc8:	490f      	ldr	r1, [pc, #60]	@ (801ce08 <etharp_tmr+0x14c>)
 801cdca:	687a      	ldr	r2, [r7, #4]
 801cdcc:	4613      	mov	r3, r2
 801cdce:	005b      	lsls	r3, r3, #1
 801cdd0:	4413      	add	r3, r2
 801cdd2:	00db      	lsls	r3, r3, #3
 801cdd4:	440b      	add	r3, r1
 801cdd6:	3308      	adds	r3, #8
 801cdd8:	6818      	ldr	r0, [r3, #0]
 801cdda:	687a      	ldr	r2, [r7, #4]
 801cddc:	4613      	mov	r3, r2
 801cdde:	005b      	lsls	r3, r3, #1
 801cde0:	4413      	add	r3, r2
 801cde2:	00db      	lsls	r3, r3, #3
 801cde4:	4a08      	ldr	r2, [pc, #32]	@ (801ce08 <etharp_tmr+0x14c>)
 801cde6:	4413      	add	r3, r2
 801cde8:	3304      	adds	r3, #4
 801cdea:	4619      	mov	r1, r3
 801cdec:	f000 fe6e 	bl	801dacc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	3301      	adds	r3, #1
 801cdf4:	607b      	str	r3, [r7, #4]
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	2b09      	cmp	r3, #9
 801cdfa:	f77f af65 	ble.w	801ccc8 <etharp_tmr+0xc>
      }
    }
  }
}
 801cdfe:	bf00      	nop
 801ce00:	bf00      	nop
 801ce02:	3708      	adds	r7, #8
 801ce04:	46bd      	mov	sp, r7
 801ce06:	bd80      	pop	{r7, pc}
 801ce08:	20022b0c 	.word	0x20022b0c

0801ce0c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801ce0c:	b580      	push	{r7, lr}
 801ce0e:	b08a      	sub	sp, #40	@ 0x28
 801ce10:	af00      	add	r7, sp, #0
 801ce12:	60f8      	str	r0, [r7, #12]
 801ce14:	460b      	mov	r3, r1
 801ce16:	607a      	str	r2, [r7, #4]
 801ce18:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ce1a:	230a      	movs	r3, #10
 801ce1c:	843b      	strh	r3, [r7, #32]
 801ce1e:	230a      	movs	r3, #10
 801ce20:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801ce22:	230a      	movs	r3, #10
 801ce24:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 801ce26:	2300      	movs	r3, #0
 801ce28:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ce2a:	230a      	movs	r3, #10
 801ce2c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ce2e:	2300      	movs	r3, #0
 801ce30:	83bb      	strh	r3, [r7, #28]
 801ce32:	2300      	movs	r3, #0
 801ce34:	837b      	strh	r3, [r7, #26]
 801ce36:	2300      	movs	r3, #0
 801ce38:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ce3a:	2300      	movs	r3, #0
 801ce3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801ce3e:	e0ae      	b.n	801cf9e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ce40:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ce44:	49a6      	ldr	r1, [pc, #664]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801ce46:	4613      	mov	r3, r2
 801ce48:	005b      	lsls	r3, r3, #1
 801ce4a:	4413      	add	r3, r2
 801ce4c:	00db      	lsls	r3, r3, #3
 801ce4e:	440b      	add	r3, r1
 801ce50:	3314      	adds	r3, #20
 801ce52:	781b      	ldrb	r3, [r3, #0]
 801ce54:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ce56:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801ce5a:	2b0a      	cmp	r3, #10
 801ce5c:	d105      	bne.n	801ce6a <etharp_find_entry+0x5e>
 801ce5e:	7dfb      	ldrb	r3, [r7, #23]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d102      	bne.n	801ce6a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801ce64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ce66:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801ce68:	e095      	b.n	801cf96 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ce6a:	7dfb      	ldrb	r3, [r7, #23]
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	f000 8092 	beq.w	801cf96 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ce72:	7dfb      	ldrb	r3, [r7, #23]
 801ce74:	2b01      	cmp	r3, #1
 801ce76:	d009      	beq.n	801ce8c <etharp_find_entry+0x80>
 801ce78:	7dfb      	ldrb	r3, [r7, #23]
 801ce7a:	2b01      	cmp	r3, #1
 801ce7c:	d806      	bhi.n	801ce8c <etharp_find_entry+0x80>
 801ce7e:	4b99      	ldr	r3, [pc, #612]	@ (801d0e4 <etharp_find_entry+0x2d8>)
 801ce80:	f240 1223 	movw	r2, #291	@ 0x123
 801ce84:	4998      	ldr	r1, [pc, #608]	@ (801d0e8 <etharp_find_entry+0x2dc>)
 801ce86:	4899      	ldr	r0, [pc, #612]	@ (801d0ec <etharp_find_entry+0x2e0>)
 801ce88:	f003 fd38 	bl	80208fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ce8c:	68fb      	ldr	r3, [r7, #12]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d020      	beq.n	801ced4 <etharp_find_entry+0xc8>
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	6819      	ldr	r1, [r3, #0]
 801ce96:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ce9a:	4891      	ldr	r0, [pc, #580]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801ce9c:	4613      	mov	r3, r2
 801ce9e:	005b      	lsls	r3, r3, #1
 801cea0:	4413      	add	r3, r2
 801cea2:	00db      	lsls	r3, r3, #3
 801cea4:	4403      	add	r3, r0
 801cea6:	3304      	adds	r3, #4
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	4299      	cmp	r1, r3
 801ceac:	d112      	bne.n	801ced4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d00c      	beq.n	801cece <etharp_find_entry+0xc2>
 801ceb4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ceb8:	4989      	ldr	r1, [pc, #548]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801ceba:	4613      	mov	r3, r2
 801cebc:	005b      	lsls	r3, r3, #1
 801cebe:	4413      	add	r3, r2
 801cec0:	00db      	lsls	r3, r3, #3
 801cec2:	440b      	add	r3, r1
 801cec4:	3308      	adds	r3, #8
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	687a      	ldr	r2, [r7, #4]
 801ceca:	429a      	cmp	r2, r3
 801cecc:	d102      	bne.n	801ced4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801cece:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801ced2:	e100      	b.n	801d0d6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ced4:	7dfb      	ldrb	r3, [r7, #23]
 801ced6:	2b01      	cmp	r3, #1
 801ced8:	d140      	bne.n	801cf5c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ceda:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801cede:	4980      	ldr	r1, [pc, #512]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801cee0:	4613      	mov	r3, r2
 801cee2:	005b      	lsls	r3, r3, #1
 801cee4:	4413      	add	r3, r2
 801cee6:	00db      	lsls	r3, r3, #3
 801cee8:	440b      	add	r3, r1
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d01a      	beq.n	801cf26 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801cef0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801cef4:	497a      	ldr	r1, [pc, #488]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801cef6:	4613      	mov	r3, r2
 801cef8:	005b      	lsls	r3, r3, #1
 801cefa:	4413      	add	r3, r2
 801cefc:	00db      	lsls	r3, r3, #3
 801cefe:	440b      	add	r3, r1
 801cf00:	3312      	adds	r3, #18
 801cf02:	881b      	ldrh	r3, [r3, #0]
 801cf04:	8bba      	ldrh	r2, [r7, #28]
 801cf06:	429a      	cmp	r2, r3
 801cf08:	d845      	bhi.n	801cf96 <etharp_find_entry+0x18a>
            old_queue = i;
 801cf0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801cf0c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801cf0e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801cf12:	4973      	ldr	r1, [pc, #460]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801cf14:	4613      	mov	r3, r2
 801cf16:	005b      	lsls	r3, r3, #1
 801cf18:	4413      	add	r3, r2
 801cf1a:	00db      	lsls	r3, r3, #3
 801cf1c:	440b      	add	r3, r1
 801cf1e:	3312      	adds	r3, #18
 801cf20:	881b      	ldrh	r3, [r3, #0]
 801cf22:	83bb      	strh	r3, [r7, #28]
 801cf24:	e037      	b.n	801cf96 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801cf26:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801cf2a:	496d      	ldr	r1, [pc, #436]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801cf2c:	4613      	mov	r3, r2
 801cf2e:	005b      	lsls	r3, r3, #1
 801cf30:	4413      	add	r3, r2
 801cf32:	00db      	lsls	r3, r3, #3
 801cf34:	440b      	add	r3, r1
 801cf36:	3312      	adds	r3, #18
 801cf38:	881b      	ldrh	r3, [r3, #0]
 801cf3a:	8b7a      	ldrh	r2, [r7, #26]
 801cf3c:	429a      	cmp	r2, r3
 801cf3e:	d82a      	bhi.n	801cf96 <etharp_find_entry+0x18a>
            old_pending = i;
 801cf40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801cf42:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801cf44:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801cf48:	4965      	ldr	r1, [pc, #404]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801cf4a:	4613      	mov	r3, r2
 801cf4c:	005b      	lsls	r3, r3, #1
 801cf4e:	4413      	add	r3, r2
 801cf50:	00db      	lsls	r3, r3, #3
 801cf52:	440b      	add	r3, r1
 801cf54:	3312      	adds	r3, #18
 801cf56:	881b      	ldrh	r3, [r3, #0]
 801cf58:	837b      	strh	r3, [r7, #26]
 801cf5a:	e01c      	b.n	801cf96 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801cf5c:	7dfb      	ldrb	r3, [r7, #23]
 801cf5e:	2b01      	cmp	r3, #1
 801cf60:	d919      	bls.n	801cf96 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801cf62:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801cf66:	495e      	ldr	r1, [pc, #376]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801cf68:	4613      	mov	r3, r2
 801cf6a:	005b      	lsls	r3, r3, #1
 801cf6c:	4413      	add	r3, r2
 801cf6e:	00db      	lsls	r3, r3, #3
 801cf70:	440b      	add	r3, r1
 801cf72:	3312      	adds	r3, #18
 801cf74:	881b      	ldrh	r3, [r3, #0]
 801cf76:	8b3a      	ldrh	r2, [r7, #24]
 801cf78:	429a      	cmp	r2, r3
 801cf7a:	d80c      	bhi.n	801cf96 <etharp_find_entry+0x18a>
            old_stable = i;
 801cf7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801cf7e:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801cf80:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801cf84:	4956      	ldr	r1, [pc, #344]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801cf86:	4613      	mov	r3, r2
 801cf88:	005b      	lsls	r3, r3, #1
 801cf8a:	4413      	add	r3, r2
 801cf8c:	00db      	lsls	r3, r3, #3
 801cf8e:	440b      	add	r3, r1
 801cf90:	3312      	adds	r3, #18
 801cf92:	881b      	ldrh	r3, [r3, #0]
 801cf94:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cf96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801cf98:	3301      	adds	r3, #1
 801cf9a:	b29b      	uxth	r3, r3
 801cf9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801cf9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801cfa2:	2b09      	cmp	r3, #9
 801cfa4:	f77f af4c 	ble.w	801ce40 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801cfa8:	7afb      	ldrb	r3, [r7, #11]
 801cfaa:	f003 0302 	and.w	r3, r3, #2
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d108      	bne.n	801cfc4 <etharp_find_entry+0x1b8>
 801cfb2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801cfb6:	2b0a      	cmp	r3, #10
 801cfb8:	d107      	bne.n	801cfca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801cfba:	7afb      	ldrb	r3, [r7, #11]
 801cfbc:	f003 0301 	and.w	r3, r3, #1
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d102      	bne.n	801cfca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801cfc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cfc8:	e085      	b.n	801d0d6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801cfca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801cfce:	2b09      	cmp	r3, #9
 801cfd0:	dc02      	bgt.n	801cfd8 <etharp_find_entry+0x1cc>
    i = empty;
 801cfd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cfd4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801cfd6:	e039      	b.n	801d04c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801cfd8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801cfdc:	2b09      	cmp	r3, #9
 801cfde:	dc14      	bgt.n	801d00a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801cfe0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cfe2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801cfe4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801cfe8:	493d      	ldr	r1, [pc, #244]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801cfea:	4613      	mov	r3, r2
 801cfec:	005b      	lsls	r3, r3, #1
 801cfee:	4413      	add	r3, r2
 801cff0:	00db      	lsls	r3, r3, #3
 801cff2:	440b      	add	r3, r1
 801cff4:	681b      	ldr	r3, [r3, #0]
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d018      	beq.n	801d02c <etharp_find_entry+0x220>
 801cffa:	4b3a      	ldr	r3, [pc, #232]	@ (801d0e4 <etharp_find_entry+0x2d8>)
 801cffc:	f240 126d 	movw	r2, #365	@ 0x16d
 801d000:	493b      	ldr	r1, [pc, #236]	@ (801d0f0 <etharp_find_entry+0x2e4>)
 801d002:	483a      	ldr	r0, [pc, #232]	@ (801d0ec <etharp_find_entry+0x2e0>)
 801d004:	f003 fc7a 	bl	80208fc <iprintf>
 801d008:	e010      	b.n	801d02c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d00a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d00e:	2b09      	cmp	r3, #9
 801d010:	dc02      	bgt.n	801d018 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801d012:	8c3b      	ldrh	r3, [r7, #32]
 801d014:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d016:	e009      	b.n	801d02c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d018:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d01c:	2b09      	cmp	r3, #9
 801d01e:	dc02      	bgt.n	801d026 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801d020:	8bfb      	ldrh	r3, [r7, #30]
 801d022:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d024:	e002      	b.n	801d02c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801d026:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d02a:	e054      	b.n	801d0d6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d02c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d030:	2b09      	cmp	r3, #9
 801d032:	dd06      	ble.n	801d042 <etharp_find_entry+0x236>
 801d034:	4b2b      	ldr	r3, [pc, #172]	@ (801d0e4 <etharp_find_entry+0x2d8>)
 801d036:	f240 127f 	movw	r2, #383	@ 0x17f
 801d03a:	492e      	ldr	r1, [pc, #184]	@ (801d0f4 <etharp_find_entry+0x2e8>)
 801d03c:	482b      	ldr	r0, [pc, #172]	@ (801d0ec <etharp_find_entry+0x2e0>)
 801d03e:	f003 fc5d 	bl	80208fc <iprintf>
    etharp_free_entry(i);
 801d042:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d046:	4618      	mov	r0, r3
 801d048:	f7ff fdd8 	bl	801cbfc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d04c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d050:	2b09      	cmp	r3, #9
 801d052:	dd06      	ble.n	801d062 <etharp_find_entry+0x256>
 801d054:	4b23      	ldr	r3, [pc, #140]	@ (801d0e4 <etharp_find_entry+0x2d8>)
 801d056:	f240 1283 	movw	r2, #387	@ 0x183
 801d05a:	4926      	ldr	r1, [pc, #152]	@ (801d0f4 <etharp_find_entry+0x2e8>)
 801d05c:	4823      	ldr	r0, [pc, #140]	@ (801d0ec <etharp_find_entry+0x2e0>)
 801d05e:	f003 fc4d 	bl	80208fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d062:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d066:	491e      	ldr	r1, [pc, #120]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801d068:	4613      	mov	r3, r2
 801d06a:	005b      	lsls	r3, r3, #1
 801d06c:	4413      	add	r3, r2
 801d06e:	00db      	lsls	r3, r3, #3
 801d070:	440b      	add	r3, r1
 801d072:	3314      	adds	r3, #20
 801d074:	781b      	ldrb	r3, [r3, #0]
 801d076:	2b00      	cmp	r3, #0
 801d078:	d006      	beq.n	801d088 <etharp_find_entry+0x27c>
 801d07a:	4b1a      	ldr	r3, [pc, #104]	@ (801d0e4 <etharp_find_entry+0x2d8>)
 801d07c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801d080:	491d      	ldr	r1, [pc, #116]	@ (801d0f8 <etharp_find_entry+0x2ec>)
 801d082:	481a      	ldr	r0, [pc, #104]	@ (801d0ec <etharp_find_entry+0x2e0>)
 801d084:	f003 fc3a 	bl	80208fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d088:	68fb      	ldr	r3, [r7, #12]
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d00b      	beq.n	801d0a6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d08e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	6819      	ldr	r1, [r3, #0]
 801d096:	4812      	ldr	r0, [pc, #72]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801d098:	4613      	mov	r3, r2
 801d09a:	005b      	lsls	r3, r3, #1
 801d09c:	4413      	add	r3, r2
 801d09e:	00db      	lsls	r3, r3, #3
 801d0a0:	4403      	add	r3, r0
 801d0a2:	3304      	adds	r3, #4
 801d0a4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801d0a6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d0aa:	490d      	ldr	r1, [pc, #52]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801d0ac:	4613      	mov	r3, r2
 801d0ae:	005b      	lsls	r3, r3, #1
 801d0b0:	4413      	add	r3, r2
 801d0b2:	00db      	lsls	r3, r3, #3
 801d0b4:	440b      	add	r3, r1
 801d0b6:	3312      	adds	r3, #18
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d0bc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d0c0:	4907      	ldr	r1, [pc, #28]	@ (801d0e0 <etharp_find_entry+0x2d4>)
 801d0c2:	4613      	mov	r3, r2
 801d0c4:	005b      	lsls	r3, r3, #1
 801d0c6:	4413      	add	r3, r2
 801d0c8:	00db      	lsls	r3, r3, #3
 801d0ca:	440b      	add	r3, r1
 801d0cc:	3308      	adds	r3, #8
 801d0ce:	687a      	ldr	r2, [r7, #4]
 801d0d0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801d0d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	3728      	adds	r7, #40	@ 0x28
 801d0da:	46bd      	mov	sp, r7
 801d0dc:	bd80      	pop	{r7, pc}
 801d0de:	bf00      	nop
 801d0e0:	20022b0c 	.word	0x20022b0c
 801d0e4:	08025400 	.word	0x08025400
 801d0e8:	08025438 	.word	0x08025438
 801d0ec:	08025478 	.word	0x08025478
 801d0f0:	080254a0 	.word	0x080254a0
 801d0f4:	080254b8 	.word	0x080254b8
 801d0f8:	080254cc 	.word	0x080254cc

0801d0fc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801d0fc:	b580      	push	{r7, lr}
 801d0fe:	b088      	sub	sp, #32
 801d100:	af02      	add	r7, sp, #8
 801d102:	60f8      	str	r0, [r7, #12]
 801d104:	60b9      	str	r1, [r7, #8]
 801d106:	607a      	str	r2, [r7, #4]
 801d108:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d110:	2b06      	cmp	r3, #6
 801d112:	d006      	beq.n	801d122 <etharp_update_arp_entry+0x26>
 801d114:	4b48      	ldr	r3, [pc, #288]	@ (801d238 <etharp_update_arp_entry+0x13c>)
 801d116:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801d11a:	4948      	ldr	r1, [pc, #288]	@ (801d23c <etharp_update_arp_entry+0x140>)
 801d11c:	4848      	ldr	r0, [pc, #288]	@ (801d240 <etharp_update_arp_entry+0x144>)
 801d11e:	f003 fbed 	bl	80208fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801d122:	68bb      	ldr	r3, [r7, #8]
 801d124:	2b00      	cmp	r3, #0
 801d126:	d012      	beq.n	801d14e <etharp_update_arp_entry+0x52>
 801d128:	68bb      	ldr	r3, [r7, #8]
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d00e      	beq.n	801d14e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d130:	68bb      	ldr	r3, [r7, #8]
 801d132:	681b      	ldr	r3, [r3, #0]
 801d134:	68f9      	ldr	r1, [r7, #12]
 801d136:	4618      	mov	r0, r3
 801d138:	f001 f990 	bl	801e45c <ip4_addr_isbroadcast_u32>
 801d13c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801d13e:	2b00      	cmp	r3, #0
 801d140:	d105      	bne.n	801d14e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801d142:	68bb      	ldr	r3, [r7, #8]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d14a:	2be0      	cmp	r3, #224	@ 0xe0
 801d14c:	d102      	bne.n	801d154 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d14e:	f06f 030f 	mvn.w	r3, #15
 801d152:	e06c      	b.n	801d22e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801d154:	78fb      	ldrb	r3, [r7, #3]
 801d156:	68fa      	ldr	r2, [r7, #12]
 801d158:	4619      	mov	r1, r3
 801d15a:	68b8      	ldr	r0, [r7, #8]
 801d15c:	f7ff fe56 	bl	801ce0c <etharp_find_entry>
 801d160:	4603      	mov	r3, r0
 801d162:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801d164:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d168:	2b00      	cmp	r3, #0
 801d16a:	da02      	bge.n	801d172 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801d16c:	8afb      	ldrh	r3, [r7, #22]
 801d16e:	b25b      	sxtb	r3, r3
 801d170:	e05d      	b.n	801d22e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d172:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d176:	4933      	ldr	r1, [pc, #204]	@ (801d244 <etharp_update_arp_entry+0x148>)
 801d178:	4613      	mov	r3, r2
 801d17a:	005b      	lsls	r3, r3, #1
 801d17c:	4413      	add	r3, r2
 801d17e:	00db      	lsls	r3, r3, #3
 801d180:	440b      	add	r3, r1
 801d182:	3314      	adds	r3, #20
 801d184:	2202      	movs	r2, #2
 801d186:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801d188:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d18c:	492d      	ldr	r1, [pc, #180]	@ (801d244 <etharp_update_arp_entry+0x148>)
 801d18e:	4613      	mov	r3, r2
 801d190:	005b      	lsls	r3, r3, #1
 801d192:	4413      	add	r3, r2
 801d194:	00db      	lsls	r3, r3, #3
 801d196:	440b      	add	r3, r1
 801d198:	3308      	adds	r3, #8
 801d19a:	68fa      	ldr	r2, [r7, #12]
 801d19c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d19e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d1a2:	4613      	mov	r3, r2
 801d1a4:	005b      	lsls	r3, r3, #1
 801d1a6:	4413      	add	r3, r2
 801d1a8:	00db      	lsls	r3, r3, #3
 801d1aa:	3308      	adds	r3, #8
 801d1ac:	4a25      	ldr	r2, [pc, #148]	@ (801d244 <etharp_update_arp_entry+0x148>)
 801d1ae:	4413      	add	r3, r2
 801d1b0:	3304      	adds	r3, #4
 801d1b2:	2206      	movs	r2, #6
 801d1b4:	6879      	ldr	r1, [r7, #4]
 801d1b6:	4618      	mov	r0, r3
 801d1b8:	f003 fd75 	bl	8020ca6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801d1bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d1c0:	4920      	ldr	r1, [pc, #128]	@ (801d244 <etharp_update_arp_entry+0x148>)
 801d1c2:	4613      	mov	r3, r2
 801d1c4:	005b      	lsls	r3, r3, #1
 801d1c6:	4413      	add	r3, r2
 801d1c8:	00db      	lsls	r3, r3, #3
 801d1ca:	440b      	add	r3, r1
 801d1cc:	3312      	adds	r3, #18
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801d1d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d1d6:	491b      	ldr	r1, [pc, #108]	@ (801d244 <etharp_update_arp_entry+0x148>)
 801d1d8:	4613      	mov	r3, r2
 801d1da:	005b      	lsls	r3, r3, #1
 801d1dc:	4413      	add	r3, r2
 801d1de:	00db      	lsls	r3, r3, #3
 801d1e0:	440b      	add	r3, r1
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d021      	beq.n	801d22c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801d1e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d1ec:	4915      	ldr	r1, [pc, #84]	@ (801d244 <etharp_update_arp_entry+0x148>)
 801d1ee:	4613      	mov	r3, r2
 801d1f0:	005b      	lsls	r3, r3, #1
 801d1f2:	4413      	add	r3, r2
 801d1f4:	00db      	lsls	r3, r3, #3
 801d1f6:	440b      	add	r3, r1
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801d1fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d200:	4910      	ldr	r1, [pc, #64]	@ (801d244 <etharp_update_arp_entry+0x148>)
 801d202:	4613      	mov	r3, r2
 801d204:	005b      	lsls	r3, r3, #1
 801d206:	4413      	add	r3, r2
 801d208:	00db      	lsls	r3, r3, #3
 801d20a:	440b      	add	r3, r1
 801d20c:	2200      	movs	r2, #0
 801d20e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801d216:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d21a:	9300      	str	r3, [sp, #0]
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	6939      	ldr	r1, [r7, #16]
 801d220:	68f8      	ldr	r0, [r7, #12]
 801d222:	f002 f829 	bl	801f278 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801d226:	6938      	ldr	r0, [r7, #16]
 801d228:	f7f7 ffde 	bl	80151e8 <pbuf_free>
  }
  return ERR_OK;
 801d22c:	2300      	movs	r3, #0
}
 801d22e:	4618      	mov	r0, r3
 801d230:	3718      	adds	r7, #24
 801d232:	46bd      	mov	sp, r7
 801d234:	bd80      	pop	{r7, pc}
 801d236:	bf00      	nop
 801d238:	08025400 	.word	0x08025400
 801d23c:	080254f8 	.word	0x080254f8
 801d240:	08025478 	.word	0x08025478
 801d244:	20022b0c 	.word	0x20022b0c

0801d248 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801d248:	b580      	push	{r7, lr}
 801d24a:	b084      	sub	sp, #16
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d250:	2300      	movs	r3, #0
 801d252:	60fb      	str	r3, [r7, #12]
 801d254:	e01e      	b.n	801d294 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801d256:	4913      	ldr	r1, [pc, #76]	@ (801d2a4 <etharp_cleanup_netif+0x5c>)
 801d258:	68fa      	ldr	r2, [r7, #12]
 801d25a:	4613      	mov	r3, r2
 801d25c:	005b      	lsls	r3, r3, #1
 801d25e:	4413      	add	r3, r2
 801d260:	00db      	lsls	r3, r3, #3
 801d262:	440b      	add	r3, r1
 801d264:	3314      	adds	r3, #20
 801d266:	781b      	ldrb	r3, [r3, #0]
 801d268:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d26a:	7afb      	ldrb	r3, [r7, #11]
 801d26c:	2b00      	cmp	r3, #0
 801d26e:	d00e      	beq.n	801d28e <etharp_cleanup_netif+0x46>
 801d270:	490c      	ldr	r1, [pc, #48]	@ (801d2a4 <etharp_cleanup_netif+0x5c>)
 801d272:	68fa      	ldr	r2, [r7, #12]
 801d274:	4613      	mov	r3, r2
 801d276:	005b      	lsls	r3, r3, #1
 801d278:	4413      	add	r3, r2
 801d27a:	00db      	lsls	r3, r3, #3
 801d27c:	440b      	add	r3, r1
 801d27e:	3308      	adds	r3, #8
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	687a      	ldr	r2, [r7, #4]
 801d284:	429a      	cmp	r2, r3
 801d286:	d102      	bne.n	801d28e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801d288:	68f8      	ldr	r0, [r7, #12]
 801d28a:	f7ff fcb7 	bl	801cbfc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	3301      	adds	r3, #1
 801d292:	60fb      	str	r3, [r7, #12]
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	2b09      	cmp	r3, #9
 801d298:	dddd      	ble.n	801d256 <etharp_cleanup_netif+0xe>
    }
  }
}
 801d29a:	bf00      	nop
 801d29c:	bf00      	nop
 801d29e:	3710      	adds	r7, #16
 801d2a0:	46bd      	mov	sp, r7
 801d2a2:	bd80      	pop	{r7, pc}
 801d2a4:	20022b0c 	.word	0x20022b0c

0801d2a8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801d2a8:	b5b0      	push	{r4, r5, r7, lr}
 801d2aa:	b08a      	sub	sp, #40	@ 0x28
 801d2ac:	af04      	add	r7, sp, #16
 801d2ae:	6078      	str	r0, [r7, #4]
 801d2b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d2b2:	683b      	ldr	r3, [r7, #0]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d107      	bne.n	801d2c8 <etharp_input+0x20>
 801d2b8:	4b3d      	ldr	r3, [pc, #244]	@ (801d3b0 <etharp_input+0x108>)
 801d2ba:	f240 228a 	movw	r2, #650	@ 0x28a
 801d2be:	493d      	ldr	r1, [pc, #244]	@ (801d3b4 <etharp_input+0x10c>)
 801d2c0:	483d      	ldr	r0, [pc, #244]	@ (801d3b8 <etharp_input+0x110>)
 801d2c2:	f003 fb1b 	bl	80208fc <iprintf>
 801d2c6:	e06f      	b.n	801d3a8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	685b      	ldr	r3, [r3, #4]
 801d2cc:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d2ce:	697b      	ldr	r3, [r7, #20]
 801d2d0:	881b      	ldrh	r3, [r3, #0]
 801d2d2:	b29b      	uxth	r3, r3
 801d2d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d2d8:	d10c      	bne.n	801d2f4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d2da:	697b      	ldr	r3, [r7, #20]
 801d2dc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d2de:	2b06      	cmp	r3, #6
 801d2e0:	d108      	bne.n	801d2f4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d2e2:	697b      	ldr	r3, [r7, #20]
 801d2e4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d2e6:	2b04      	cmp	r3, #4
 801d2e8:	d104      	bne.n	801d2f4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801d2ea:	697b      	ldr	r3, [r7, #20]
 801d2ec:	885b      	ldrh	r3, [r3, #2]
 801d2ee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d2f0:	2b08      	cmp	r3, #8
 801d2f2:	d003      	beq.n	801d2fc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801d2f4:	6878      	ldr	r0, [r7, #4]
 801d2f6:	f7f7 ff77 	bl	80151e8 <pbuf_free>
    return;
 801d2fa:	e055      	b.n	801d3a8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d2fc:	697b      	ldr	r3, [r7, #20]
 801d2fe:	330e      	adds	r3, #14
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801d304:	697b      	ldr	r3, [r7, #20]
 801d306:	3318      	adds	r3, #24
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d30c:	683b      	ldr	r3, [r7, #0]
 801d30e:	3304      	adds	r3, #4
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	2b00      	cmp	r3, #0
 801d314:	d102      	bne.n	801d31c <etharp_input+0x74>
    for_us = 0;
 801d316:	2300      	movs	r3, #0
 801d318:	74fb      	strb	r3, [r7, #19]
 801d31a:	e009      	b.n	801d330 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801d31c:	68ba      	ldr	r2, [r7, #8]
 801d31e:	683b      	ldr	r3, [r7, #0]
 801d320:	3304      	adds	r3, #4
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	429a      	cmp	r2, r3
 801d326:	bf0c      	ite	eq
 801d328:	2301      	moveq	r3, #1
 801d32a:	2300      	movne	r3, #0
 801d32c:	b2db      	uxtb	r3, r3
 801d32e:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d330:	697b      	ldr	r3, [r7, #20]
 801d332:	f103 0208 	add.w	r2, r3, #8
 801d336:	7cfb      	ldrb	r3, [r7, #19]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d001      	beq.n	801d340 <etharp_input+0x98>
 801d33c:	2301      	movs	r3, #1
 801d33e:	e000      	b.n	801d342 <etharp_input+0x9a>
 801d340:	2302      	movs	r3, #2
 801d342:	f107 010c 	add.w	r1, r7, #12
 801d346:	6838      	ldr	r0, [r7, #0]
 801d348:	f7ff fed8 	bl	801d0fc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801d34c:	697b      	ldr	r3, [r7, #20]
 801d34e:	88db      	ldrh	r3, [r3, #6]
 801d350:	b29b      	uxth	r3, r3
 801d352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d356:	d003      	beq.n	801d360 <etharp_input+0xb8>
 801d358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d35c:	d01e      	beq.n	801d39c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801d35e:	e020      	b.n	801d3a2 <etharp_input+0xfa>
      if (for_us) {
 801d360:	7cfb      	ldrb	r3, [r7, #19]
 801d362:	2b00      	cmp	r3, #0
 801d364:	d01c      	beq.n	801d3a0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d366:	683b      	ldr	r3, [r7, #0]
 801d368:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801d36c:	697b      	ldr	r3, [r7, #20]
 801d36e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d372:	683b      	ldr	r3, [r7, #0]
 801d374:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801d378:	683b      	ldr	r3, [r7, #0]
 801d37a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801d37c:	697a      	ldr	r2, [r7, #20]
 801d37e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801d380:	2102      	movs	r1, #2
 801d382:	9103      	str	r1, [sp, #12]
 801d384:	f107 010c 	add.w	r1, r7, #12
 801d388:	9102      	str	r1, [sp, #8]
 801d38a:	9201      	str	r2, [sp, #4]
 801d38c:	9300      	str	r3, [sp, #0]
 801d38e:	462b      	mov	r3, r5
 801d390:	4622      	mov	r2, r4
 801d392:	4601      	mov	r1, r0
 801d394:	6838      	ldr	r0, [r7, #0]
 801d396:	f000 faeb 	bl	801d970 <etharp_raw>
      break;
 801d39a:	e001      	b.n	801d3a0 <etharp_input+0xf8>
      break;
 801d39c:	bf00      	nop
 801d39e:	e000      	b.n	801d3a2 <etharp_input+0xfa>
      break;
 801d3a0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801d3a2:	6878      	ldr	r0, [r7, #4]
 801d3a4:	f7f7 ff20 	bl	80151e8 <pbuf_free>
}
 801d3a8:	3718      	adds	r7, #24
 801d3aa:	46bd      	mov	sp, r7
 801d3ac:	bdb0      	pop	{r4, r5, r7, pc}
 801d3ae:	bf00      	nop
 801d3b0:	08025400 	.word	0x08025400
 801d3b4:	08025550 	.word	0x08025550
 801d3b8:	08025478 	.word	0x08025478

0801d3bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801d3bc:	b580      	push	{r7, lr}
 801d3be:	b086      	sub	sp, #24
 801d3c0:	af02      	add	r7, sp, #8
 801d3c2:	60f8      	str	r0, [r7, #12]
 801d3c4:	60b9      	str	r1, [r7, #8]
 801d3c6:	4613      	mov	r3, r2
 801d3c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d3ca:	79fa      	ldrb	r2, [r7, #7]
 801d3cc:	4944      	ldr	r1, [pc, #272]	@ (801d4e0 <etharp_output_to_arp_index+0x124>)
 801d3ce:	4613      	mov	r3, r2
 801d3d0:	005b      	lsls	r3, r3, #1
 801d3d2:	4413      	add	r3, r2
 801d3d4:	00db      	lsls	r3, r3, #3
 801d3d6:	440b      	add	r3, r1
 801d3d8:	3314      	adds	r3, #20
 801d3da:	781b      	ldrb	r3, [r3, #0]
 801d3dc:	2b01      	cmp	r3, #1
 801d3de:	d806      	bhi.n	801d3ee <etharp_output_to_arp_index+0x32>
 801d3e0:	4b40      	ldr	r3, [pc, #256]	@ (801d4e4 <etharp_output_to_arp_index+0x128>)
 801d3e2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801d3e6:	4940      	ldr	r1, [pc, #256]	@ (801d4e8 <etharp_output_to_arp_index+0x12c>)
 801d3e8:	4840      	ldr	r0, [pc, #256]	@ (801d4ec <etharp_output_to_arp_index+0x130>)
 801d3ea:	f003 fa87 	bl	80208fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d3ee:	79fa      	ldrb	r2, [r7, #7]
 801d3f0:	493b      	ldr	r1, [pc, #236]	@ (801d4e0 <etharp_output_to_arp_index+0x124>)
 801d3f2:	4613      	mov	r3, r2
 801d3f4:	005b      	lsls	r3, r3, #1
 801d3f6:	4413      	add	r3, r2
 801d3f8:	00db      	lsls	r3, r3, #3
 801d3fa:	440b      	add	r3, r1
 801d3fc:	3314      	adds	r3, #20
 801d3fe:	781b      	ldrb	r3, [r3, #0]
 801d400:	2b02      	cmp	r3, #2
 801d402:	d153      	bne.n	801d4ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d404:	79fa      	ldrb	r2, [r7, #7]
 801d406:	4936      	ldr	r1, [pc, #216]	@ (801d4e0 <etharp_output_to_arp_index+0x124>)
 801d408:	4613      	mov	r3, r2
 801d40a:	005b      	lsls	r3, r3, #1
 801d40c:	4413      	add	r3, r2
 801d40e:	00db      	lsls	r3, r3, #3
 801d410:	440b      	add	r3, r1
 801d412:	3312      	adds	r3, #18
 801d414:	881b      	ldrh	r3, [r3, #0]
 801d416:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801d41a:	d919      	bls.n	801d450 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d41c:	79fa      	ldrb	r2, [r7, #7]
 801d41e:	4613      	mov	r3, r2
 801d420:	005b      	lsls	r3, r3, #1
 801d422:	4413      	add	r3, r2
 801d424:	00db      	lsls	r3, r3, #3
 801d426:	4a2e      	ldr	r2, [pc, #184]	@ (801d4e0 <etharp_output_to_arp_index+0x124>)
 801d428:	4413      	add	r3, r2
 801d42a:	3304      	adds	r3, #4
 801d42c:	4619      	mov	r1, r3
 801d42e:	68f8      	ldr	r0, [r7, #12]
 801d430:	f000 fb4c 	bl	801dacc <etharp_request>
 801d434:	4603      	mov	r3, r0
 801d436:	2b00      	cmp	r3, #0
 801d438:	d138      	bne.n	801d4ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d43a:	79fa      	ldrb	r2, [r7, #7]
 801d43c:	4928      	ldr	r1, [pc, #160]	@ (801d4e0 <etharp_output_to_arp_index+0x124>)
 801d43e:	4613      	mov	r3, r2
 801d440:	005b      	lsls	r3, r3, #1
 801d442:	4413      	add	r3, r2
 801d444:	00db      	lsls	r3, r3, #3
 801d446:	440b      	add	r3, r1
 801d448:	3314      	adds	r3, #20
 801d44a:	2203      	movs	r2, #3
 801d44c:	701a      	strb	r2, [r3, #0]
 801d44e:	e02d      	b.n	801d4ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d450:	79fa      	ldrb	r2, [r7, #7]
 801d452:	4923      	ldr	r1, [pc, #140]	@ (801d4e0 <etharp_output_to_arp_index+0x124>)
 801d454:	4613      	mov	r3, r2
 801d456:	005b      	lsls	r3, r3, #1
 801d458:	4413      	add	r3, r2
 801d45a:	00db      	lsls	r3, r3, #3
 801d45c:	440b      	add	r3, r1
 801d45e:	3312      	adds	r3, #18
 801d460:	881b      	ldrh	r3, [r3, #0]
 801d462:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801d466:	d321      	bcc.n	801d4ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d468:	79fa      	ldrb	r2, [r7, #7]
 801d46a:	4613      	mov	r3, r2
 801d46c:	005b      	lsls	r3, r3, #1
 801d46e:	4413      	add	r3, r2
 801d470:	00db      	lsls	r3, r3, #3
 801d472:	4a1b      	ldr	r2, [pc, #108]	@ (801d4e0 <etharp_output_to_arp_index+0x124>)
 801d474:	4413      	add	r3, r2
 801d476:	1d19      	adds	r1, r3, #4
 801d478:	79fa      	ldrb	r2, [r7, #7]
 801d47a:	4613      	mov	r3, r2
 801d47c:	005b      	lsls	r3, r3, #1
 801d47e:	4413      	add	r3, r2
 801d480:	00db      	lsls	r3, r3, #3
 801d482:	3308      	adds	r3, #8
 801d484:	4a16      	ldr	r2, [pc, #88]	@ (801d4e0 <etharp_output_to_arp_index+0x124>)
 801d486:	4413      	add	r3, r2
 801d488:	3304      	adds	r3, #4
 801d48a:	461a      	mov	r2, r3
 801d48c:	68f8      	ldr	r0, [r7, #12]
 801d48e:	f000 fafb 	bl	801da88 <etharp_request_dst>
 801d492:	4603      	mov	r3, r0
 801d494:	2b00      	cmp	r3, #0
 801d496:	d109      	bne.n	801d4ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d498:	79fa      	ldrb	r2, [r7, #7]
 801d49a:	4911      	ldr	r1, [pc, #68]	@ (801d4e0 <etharp_output_to_arp_index+0x124>)
 801d49c:	4613      	mov	r3, r2
 801d49e:	005b      	lsls	r3, r3, #1
 801d4a0:	4413      	add	r3, r2
 801d4a2:	00db      	lsls	r3, r3, #3
 801d4a4:	440b      	add	r3, r1
 801d4a6:	3314      	adds	r3, #20
 801d4a8:	2203      	movs	r2, #3
 801d4aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801d4b2:	79fa      	ldrb	r2, [r7, #7]
 801d4b4:	4613      	mov	r3, r2
 801d4b6:	005b      	lsls	r3, r3, #1
 801d4b8:	4413      	add	r3, r2
 801d4ba:	00db      	lsls	r3, r3, #3
 801d4bc:	3308      	adds	r3, #8
 801d4be:	4a08      	ldr	r2, [pc, #32]	@ (801d4e0 <etharp_output_to_arp_index+0x124>)
 801d4c0:	4413      	add	r3, r2
 801d4c2:	3304      	adds	r3, #4
 801d4c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d4c8:	9200      	str	r2, [sp, #0]
 801d4ca:	460a      	mov	r2, r1
 801d4cc:	68b9      	ldr	r1, [r7, #8]
 801d4ce:	68f8      	ldr	r0, [r7, #12]
 801d4d0:	f001 fed2 	bl	801f278 <ethernet_output>
 801d4d4:	4603      	mov	r3, r0
}
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	3710      	adds	r7, #16
 801d4da:	46bd      	mov	sp, r7
 801d4dc:	bd80      	pop	{r7, pc}
 801d4de:	bf00      	nop
 801d4e0:	20022b0c 	.word	0x20022b0c
 801d4e4:	08025400 	.word	0x08025400
 801d4e8:	08025570 	.word	0x08025570
 801d4ec:	08025478 	.word	0x08025478

0801d4f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	b08a      	sub	sp, #40	@ 0x28
 801d4f4:	af02      	add	r7, sp, #8
 801d4f6:	60f8      	str	r0, [r7, #12]
 801d4f8:	60b9      	str	r1, [r7, #8]
 801d4fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d500:	68fb      	ldr	r3, [r7, #12]
 801d502:	2b00      	cmp	r3, #0
 801d504:	d106      	bne.n	801d514 <etharp_output+0x24>
 801d506:	4b73      	ldr	r3, [pc, #460]	@ (801d6d4 <etharp_output+0x1e4>)
 801d508:	f240 321e 	movw	r2, #798	@ 0x31e
 801d50c:	4972      	ldr	r1, [pc, #456]	@ (801d6d8 <etharp_output+0x1e8>)
 801d50e:	4873      	ldr	r0, [pc, #460]	@ (801d6dc <etharp_output+0x1ec>)
 801d510:	f003 f9f4 	bl	80208fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d514:	68bb      	ldr	r3, [r7, #8]
 801d516:	2b00      	cmp	r3, #0
 801d518:	d106      	bne.n	801d528 <etharp_output+0x38>
 801d51a:	4b6e      	ldr	r3, [pc, #440]	@ (801d6d4 <etharp_output+0x1e4>)
 801d51c:	f240 321f 	movw	r2, #799	@ 0x31f
 801d520:	496f      	ldr	r1, [pc, #444]	@ (801d6e0 <etharp_output+0x1f0>)
 801d522:	486e      	ldr	r0, [pc, #440]	@ (801d6dc <etharp_output+0x1ec>)
 801d524:	f003 f9ea 	bl	80208fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d106      	bne.n	801d53c <etharp_output+0x4c>
 801d52e:	4b69      	ldr	r3, [pc, #420]	@ (801d6d4 <etharp_output+0x1e4>)
 801d530:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801d534:	496b      	ldr	r1, [pc, #428]	@ (801d6e4 <etharp_output+0x1f4>)
 801d536:	4869      	ldr	r0, [pc, #420]	@ (801d6dc <etharp_output+0x1ec>)
 801d538:	f003 f9e0 	bl	80208fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	68f9      	ldr	r1, [r7, #12]
 801d542:	4618      	mov	r0, r3
 801d544:	f000 ff8a 	bl	801e45c <ip4_addr_isbroadcast_u32>
 801d548:	4603      	mov	r3, r0
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d002      	beq.n	801d554 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801d54e:	4b66      	ldr	r3, [pc, #408]	@ (801d6e8 <etharp_output+0x1f8>)
 801d550:	61fb      	str	r3, [r7, #28]
 801d552:	e0af      	b.n	801d6b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d55c:	2be0      	cmp	r3, #224	@ 0xe0
 801d55e:	d118      	bne.n	801d592 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d560:	2301      	movs	r3, #1
 801d562:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d564:	2300      	movs	r3, #0
 801d566:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801d568:	235e      	movs	r3, #94	@ 0x5e
 801d56a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	3301      	adds	r3, #1
 801d570:	781b      	ldrb	r3, [r3, #0]
 801d572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d576:	b2db      	uxtb	r3, r3
 801d578:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	3302      	adds	r3, #2
 801d57e:	781b      	ldrb	r3, [r3, #0]
 801d580:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	3303      	adds	r3, #3
 801d586:	781b      	ldrb	r3, [r3, #0]
 801d588:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d58a:	f107 0310 	add.w	r3, r7, #16
 801d58e:	61fb      	str	r3, [r7, #28]
 801d590:	e090      	b.n	801d6b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	681a      	ldr	r2, [r3, #0]
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	3304      	adds	r3, #4
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	405a      	eors	r2, r3
 801d59e:	68fb      	ldr	r3, [r7, #12]
 801d5a0:	3308      	adds	r3, #8
 801d5a2:	681b      	ldr	r3, [r3, #0]
 801d5a4:	4013      	ands	r3, r2
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d012      	beq.n	801d5d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d5b0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801d5b4:	4293      	cmp	r3, r2
 801d5b6:	d00b      	beq.n	801d5d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d5b8:	68fb      	ldr	r3, [r7, #12]
 801d5ba:	330c      	adds	r3, #12
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d003      	beq.n	801d5ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d5c2:	68fb      	ldr	r3, [r7, #12]
 801d5c4:	330c      	adds	r3, #12
 801d5c6:	61bb      	str	r3, [r7, #24]
 801d5c8:	e002      	b.n	801d5d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d5ca:	f06f 0303 	mvn.w	r3, #3
 801d5ce:	e07d      	b.n	801d6cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d5d0:	4b46      	ldr	r3, [pc, #280]	@ (801d6ec <etharp_output+0x1fc>)
 801d5d2:	781b      	ldrb	r3, [r3, #0]
 801d5d4:	4619      	mov	r1, r3
 801d5d6:	4a46      	ldr	r2, [pc, #280]	@ (801d6f0 <etharp_output+0x200>)
 801d5d8:	460b      	mov	r3, r1
 801d5da:	005b      	lsls	r3, r3, #1
 801d5dc:	440b      	add	r3, r1
 801d5de:	00db      	lsls	r3, r3, #3
 801d5e0:	4413      	add	r3, r2
 801d5e2:	3314      	adds	r3, #20
 801d5e4:	781b      	ldrb	r3, [r3, #0]
 801d5e6:	2b01      	cmp	r3, #1
 801d5e8:	d925      	bls.n	801d636 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d5ea:	4b40      	ldr	r3, [pc, #256]	@ (801d6ec <etharp_output+0x1fc>)
 801d5ec:	781b      	ldrb	r3, [r3, #0]
 801d5ee:	4619      	mov	r1, r3
 801d5f0:	4a3f      	ldr	r2, [pc, #252]	@ (801d6f0 <etharp_output+0x200>)
 801d5f2:	460b      	mov	r3, r1
 801d5f4:	005b      	lsls	r3, r3, #1
 801d5f6:	440b      	add	r3, r1
 801d5f8:	00db      	lsls	r3, r3, #3
 801d5fa:	4413      	add	r3, r2
 801d5fc:	3308      	adds	r3, #8
 801d5fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d600:	68fa      	ldr	r2, [r7, #12]
 801d602:	429a      	cmp	r2, r3
 801d604:	d117      	bne.n	801d636 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d606:	69bb      	ldr	r3, [r7, #24]
 801d608:	681a      	ldr	r2, [r3, #0]
 801d60a:	4b38      	ldr	r3, [pc, #224]	@ (801d6ec <etharp_output+0x1fc>)
 801d60c:	781b      	ldrb	r3, [r3, #0]
 801d60e:	4618      	mov	r0, r3
 801d610:	4937      	ldr	r1, [pc, #220]	@ (801d6f0 <etharp_output+0x200>)
 801d612:	4603      	mov	r3, r0
 801d614:	005b      	lsls	r3, r3, #1
 801d616:	4403      	add	r3, r0
 801d618:	00db      	lsls	r3, r3, #3
 801d61a:	440b      	add	r3, r1
 801d61c:	3304      	adds	r3, #4
 801d61e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d620:	429a      	cmp	r2, r3
 801d622:	d108      	bne.n	801d636 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d624:	4b31      	ldr	r3, [pc, #196]	@ (801d6ec <etharp_output+0x1fc>)
 801d626:	781b      	ldrb	r3, [r3, #0]
 801d628:	461a      	mov	r2, r3
 801d62a:	68b9      	ldr	r1, [r7, #8]
 801d62c:	68f8      	ldr	r0, [r7, #12]
 801d62e:	f7ff fec5 	bl	801d3bc <etharp_output_to_arp_index>
 801d632:	4603      	mov	r3, r0
 801d634:	e04a      	b.n	801d6cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d636:	2300      	movs	r3, #0
 801d638:	75fb      	strb	r3, [r7, #23]
 801d63a:	e031      	b.n	801d6a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d63c:	7dfa      	ldrb	r2, [r7, #23]
 801d63e:	492c      	ldr	r1, [pc, #176]	@ (801d6f0 <etharp_output+0x200>)
 801d640:	4613      	mov	r3, r2
 801d642:	005b      	lsls	r3, r3, #1
 801d644:	4413      	add	r3, r2
 801d646:	00db      	lsls	r3, r3, #3
 801d648:	440b      	add	r3, r1
 801d64a:	3314      	adds	r3, #20
 801d64c:	781b      	ldrb	r3, [r3, #0]
 801d64e:	2b01      	cmp	r3, #1
 801d650:	d923      	bls.n	801d69a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801d652:	7dfa      	ldrb	r2, [r7, #23]
 801d654:	4926      	ldr	r1, [pc, #152]	@ (801d6f0 <etharp_output+0x200>)
 801d656:	4613      	mov	r3, r2
 801d658:	005b      	lsls	r3, r3, #1
 801d65a:	4413      	add	r3, r2
 801d65c:	00db      	lsls	r3, r3, #3
 801d65e:	440b      	add	r3, r1
 801d660:	3308      	adds	r3, #8
 801d662:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d664:	68fa      	ldr	r2, [r7, #12]
 801d666:	429a      	cmp	r2, r3
 801d668:	d117      	bne.n	801d69a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801d66a:	69bb      	ldr	r3, [r7, #24]
 801d66c:	6819      	ldr	r1, [r3, #0]
 801d66e:	7dfa      	ldrb	r2, [r7, #23]
 801d670:	481f      	ldr	r0, [pc, #124]	@ (801d6f0 <etharp_output+0x200>)
 801d672:	4613      	mov	r3, r2
 801d674:	005b      	lsls	r3, r3, #1
 801d676:	4413      	add	r3, r2
 801d678:	00db      	lsls	r3, r3, #3
 801d67a:	4403      	add	r3, r0
 801d67c:	3304      	adds	r3, #4
 801d67e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801d680:	4299      	cmp	r1, r3
 801d682:	d10a      	bne.n	801d69a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801d684:	4a19      	ldr	r2, [pc, #100]	@ (801d6ec <etharp_output+0x1fc>)
 801d686:	7dfb      	ldrb	r3, [r7, #23]
 801d688:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801d68a:	7dfb      	ldrb	r3, [r7, #23]
 801d68c:	461a      	mov	r2, r3
 801d68e:	68b9      	ldr	r1, [r7, #8]
 801d690:	68f8      	ldr	r0, [r7, #12]
 801d692:	f7ff fe93 	bl	801d3bc <etharp_output_to_arp_index>
 801d696:	4603      	mov	r3, r0
 801d698:	e018      	b.n	801d6cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d69a:	7dfb      	ldrb	r3, [r7, #23]
 801d69c:	3301      	adds	r3, #1
 801d69e:	75fb      	strb	r3, [r7, #23]
 801d6a0:	7dfb      	ldrb	r3, [r7, #23]
 801d6a2:	2b09      	cmp	r3, #9
 801d6a4:	d9ca      	bls.n	801d63c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d6a6:	68ba      	ldr	r2, [r7, #8]
 801d6a8:	69b9      	ldr	r1, [r7, #24]
 801d6aa:	68f8      	ldr	r0, [r7, #12]
 801d6ac:	f000 f822 	bl	801d6f4 <etharp_query>
 801d6b0:	4603      	mov	r3, r0
 801d6b2:	e00b      	b.n	801d6cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801d6ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d6be:	9300      	str	r3, [sp, #0]
 801d6c0:	69fb      	ldr	r3, [r7, #28]
 801d6c2:	68b9      	ldr	r1, [r7, #8]
 801d6c4:	68f8      	ldr	r0, [r7, #12]
 801d6c6:	f001 fdd7 	bl	801f278 <ethernet_output>
 801d6ca:	4603      	mov	r3, r0
}
 801d6cc:	4618      	mov	r0, r3
 801d6ce:	3720      	adds	r7, #32
 801d6d0:	46bd      	mov	sp, r7
 801d6d2:	bd80      	pop	{r7, pc}
 801d6d4:	08025400 	.word	0x08025400
 801d6d8:	08025550 	.word	0x08025550
 801d6dc:	08025478 	.word	0x08025478
 801d6e0:	080255a0 	.word	0x080255a0
 801d6e4:	08025540 	.word	0x08025540
 801d6e8:	08026424 	.word	0x08026424
 801d6ec:	20022bfc 	.word	0x20022bfc
 801d6f0:	20022b0c 	.word	0x20022b0c

0801d6f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b08c      	sub	sp, #48	@ 0x30
 801d6f8:	af02      	add	r7, sp, #8
 801d6fa:	60f8      	str	r0, [r7, #12]
 801d6fc:	60b9      	str	r1, [r7, #8]
 801d6fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	3326      	adds	r3, #38	@ 0x26
 801d704:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d706:	23ff      	movs	r3, #255	@ 0xff
 801d708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801d70c:	2300      	movs	r3, #0
 801d70e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d710:	68bb      	ldr	r3, [r7, #8]
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	68f9      	ldr	r1, [r7, #12]
 801d716:	4618      	mov	r0, r3
 801d718:	f000 fea0 	bl	801e45c <ip4_addr_isbroadcast_u32>
 801d71c:	4603      	mov	r3, r0
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d10c      	bne.n	801d73c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d722:	68bb      	ldr	r3, [r7, #8]
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d72a:	2be0      	cmp	r3, #224	@ 0xe0
 801d72c:	d006      	beq.n	801d73c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d72e:	68bb      	ldr	r3, [r7, #8]
 801d730:	2b00      	cmp	r3, #0
 801d732:	d003      	beq.n	801d73c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d734:	68bb      	ldr	r3, [r7, #8]
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d102      	bne.n	801d742 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d73c:	f06f 030f 	mvn.w	r3, #15
 801d740:	e101      	b.n	801d946 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d742:	68fa      	ldr	r2, [r7, #12]
 801d744:	2101      	movs	r1, #1
 801d746:	68b8      	ldr	r0, [r7, #8]
 801d748:	f7ff fb60 	bl	801ce0c <etharp_find_entry>
 801d74c:	4603      	mov	r3, r0
 801d74e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d750:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d754:	2b00      	cmp	r3, #0
 801d756:	da02      	bge.n	801d75e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801d758:	8a7b      	ldrh	r3, [r7, #18]
 801d75a:	b25b      	sxtb	r3, r3
 801d75c:	e0f3      	b.n	801d946 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d75e:	8a7b      	ldrh	r3, [r7, #18]
 801d760:	2b7e      	cmp	r3, #126	@ 0x7e
 801d762:	d906      	bls.n	801d772 <etharp_query+0x7e>
 801d764:	4b7a      	ldr	r3, [pc, #488]	@ (801d950 <etharp_query+0x25c>)
 801d766:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801d76a:	497a      	ldr	r1, [pc, #488]	@ (801d954 <etharp_query+0x260>)
 801d76c:	487a      	ldr	r0, [pc, #488]	@ (801d958 <etharp_query+0x264>)
 801d76e:	f003 f8c5 	bl	80208fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d772:	8a7b      	ldrh	r3, [r7, #18]
 801d774:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d776:	7c7a      	ldrb	r2, [r7, #17]
 801d778:	4978      	ldr	r1, [pc, #480]	@ (801d95c <etharp_query+0x268>)
 801d77a:	4613      	mov	r3, r2
 801d77c:	005b      	lsls	r3, r3, #1
 801d77e:	4413      	add	r3, r2
 801d780:	00db      	lsls	r3, r3, #3
 801d782:	440b      	add	r3, r1
 801d784:	3314      	adds	r3, #20
 801d786:	781b      	ldrb	r3, [r3, #0]
 801d788:	2b00      	cmp	r3, #0
 801d78a:	d115      	bne.n	801d7b8 <etharp_query+0xc4>
    is_new_entry = 1;
 801d78c:	2301      	movs	r3, #1
 801d78e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d790:	7c7a      	ldrb	r2, [r7, #17]
 801d792:	4972      	ldr	r1, [pc, #456]	@ (801d95c <etharp_query+0x268>)
 801d794:	4613      	mov	r3, r2
 801d796:	005b      	lsls	r3, r3, #1
 801d798:	4413      	add	r3, r2
 801d79a:	00db      	lsls	r3, r3, #3
 801d79c:	440b      	add	r3, r1
 801d79e:	3314      	adds	r3, #20
 801d7a0:	2201      	movs	r2, #1
 801d7a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d7a4:	7c7a      	ldrb	r2, [r7, #17]
 801d7a6:	496d      	ldr	r1, [pc, #436]	@ (801d95c <etharp_query+0x268>)
 801d7a8:	4613      	mov	r3, r2
 801d7aa:	005b      	lsls	r3, r3, #1
 801d7ac:	4413      	add	r3, r2
 801d7ae:	00db      	lsls	r3, r3, #3
 801d7b0:	440b      	add	r3, r1
 801d7b2:	3308      	adds	r3, #8
 801d7b4:	68fa      	ldr	r2, [r7, #12]
 801d7b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d7b8:	7c7a      	ldrb	r2, [r7, #17]
 801d7ba:	4968      	ldr	r1, [pc, #416]	@ (801d95c <etharp_query+0x268>)
 801d7bc:	4613      	mov	r3, r2
 801d7be:	005b      	lsls	r3, r3, #1
 801d7c0:	4413      	add	r3, r2
 801d7c2:	00db      	lsls	r3, r3, #3
 801d7c4:	440b      	add	r3, r1
 801d7c6:	3314      	adds	r3, #20
 801d7c8:	781b      	ldrb	r3, [r3, #0]
 801d7ca:	2b01      	cmp	r3, #1
 801d7cc:	d011      	beq.n	801d7f2 <etharp_query+0xfe>
 801d7ce:	7c7a      	ldrb	r2, [r7, #17]
 801d7d0:	4962      	ldr	r1, [pc, #392]	@ (801d95c <etharp_query+0x268>)
 801d7d2:	4613      	mov	r3, r2
 801d7d4:	005b      	lsls	r3, r3, #1
 801d7d6:	4413      	add	r3, r2
 801d7d8:	00db      	lsls	r3, r3, #3
 801d7da:	440b      	add	r3, r1
 801d7dc:	3314      	adds	r3, #20
 801d7de:	781b      	ldrb	r3, [r3, #0]
 801d7e0:	2b01      	cmp	r3, #1
 801d7e2:	d806      	bhi.n	801d7f2 <etharp_query+0xfe>
 801d7e4:	4b5a      	ldr	r3, [pc, #360]	@ (801d950 <etharp_query+0x25c>)
 801d7e6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801d7ea:	495d      	ldr	r1, [pc, #372]	@ (801d960 <etharp_query+0x26c>)
 801d7ec:	485a      	ldr	r0, [pc, #360]	@ (801d958 <etharp_query+0x264>)
 801d7ee:	f003 f885 	bl	80208fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d7f2:	6a3b      	ldr	r3, [r7, #32]
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d102      	bne.n	801d7fe <etharp_query+0x10a>
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d10c      	bne.n	801d818 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d7fe:	68b9      	ldr	r1, [r7, #8]
 801d800:	68f8      	ldr	r0, [r7, #12]
 801d802:	f000 f963 	bl	801dacc <etharp_request>
 801d806:	4603      	mov	r3, r0
 801d808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	2b00      	cmp	r3, #0
 801d810:	d102      	bne.n	801d818 <etharp_query+0x124>
      return result;
 801d812:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801d816:	e096      	b.n	801d946 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d106      	bne.n	801d82c <etharp_query+0x138>
 801d81e:	4b4c      	ldr	r3, [pc, #304]	@ (801d950 <etharp_query+0x25c>)
 801d820:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801d824:	494f      	ldr	r1, [pc, #316]	@ (801d964 <etharp_query+0x270>)
 801d826:	484c      	ldr	r0, [pc, #304]	@ (801d958 <etharp_query+0x264>)
 801d828:	f003 f868 	bl	80208fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d82c:	7c7a      	ldrb	r2, [r7, #17]
 801d82e:	494b      	ldr	r1, [pc, #300]	@ (801d95c <etharp_query+0x268>)
 801d830:	4613      	mov	r3, r2
 801d832:	005b      	lsls	r3, r3, #1
 801d834:	4413      	add	r3, r2
 801d836:	00db      	lsls	r3, r3, #3
 801d838:	440b      	add	r3, r1
 801d83a:	3314      	adds	r3, #20
 801d83c:	781b      	ldrb	r3, [r3, #0]
 801d83e:	2b01      	cmp	r3, #1
 801d840:	d917      	bls.n	801d872 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801d842:	4a49      	ldr	r2, [pc, #292]	@ (801d968 <etharp_query+0x274>)
 801d844:	7c7b      	ldrb	r3, [r7, #17]
 801d846:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d848:	7c7a      	ldrb	r2, [r7, #17]
 801d84a:	4613      	mov	r3, r2
 801d84c:	005b      	lsls	r3, r3, #1
 801d84e:	4413      	add	r3, r2
 801d850:	00db      	lsls	r3, r3, #3
 801d852:	3308      	adds	r3, #8
 801d854:	4a41      	ldr	r2, [pc, #260]	@ (801d95c <etharp_query+0x268>)
 801d856:	4413      	add	r3, r2
 801d858:	3304      	adds	r3, #4
 801d85a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d85e:	9200      	str	r2, [sp, #0]
 801d860:	697a      	ldr	r2, [r7, #20]
 801d862:	6879      	ldr	r1, [r7, #4]
 801d864:	68f8      	ldr	r0, [r7, #12]
 801d866:	f001 fd07 	bl	801f278 <ethernet_output>
 801d86a:	4603      	mov	r3, r0
 801d86c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d870:	e067      	b.n	801d942 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d872:	7c7a      	ldrb	r2, [r7, #17]
 801d874:	4939      	ldr	r1, [pc, #228]	@ (801d95c <etharp_query+0x268>)
 801d876:	4613      	mov	r3, r2
 801d878:	005b      	lsls	r3, r3, #1
 801d87a:	4413      	add	r3, r2
 801d87c:	00db      	lsls	r3, r3, #3
 801d87e:	440b      	add	r3, r1
 801d880:	3314      	adds	r3, #20
 801d882:	781b      	ldrb	r3, [r3, #0]
 801d884:	2b01      	cmp	r3, #1
 801d886:	d15c      	bne.n	801d942 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d888:	2300      	movs	r3, #0
 801d88a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d890:	e01c      	b.n	801d8cc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d892:	69fb      	ldr	r3, [r7, #28]
 801d894:	895a      	ldrh	r2, [r3, #10]
 801d896:	69fb      	ldr	r3, [r7, #28]
 801d898:	891b      	ldrh	r3, [r3, #8]
 801d89a:	429a      	cmp	r2, r3
 801d89c:	d10a      	bne.n	801d8b4 <etharp_query+0x1c0>
 801d89e:	69fb      	ldr	r3, [r7, #28]
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d006      	beq.n	801d8b4 <etharp_query+0x1c0>
 801d8a6:	4b2a      	ldr	r3, [pc, #168]	@ (801d950 <etharp_query+0x25c>)
 801d8a8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801d8ac:	492f      	ldr	r1, [pc, #188]	@ (801d96c <etharp_query+0x278>)
 801d8ae:	482a      	ldr	r0, [pc, #168]	@ (801d958 <etharp_query+0x264>)
 801d8b0:	f003 f824 	bl	80208fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d8b4:	69fb      	ldr	r3, [r7, #28]
 801d8b6:	7b1b      	ldrb	r3, [r3, #12]
 801d8b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d002      	beq.n	801d8c6 <etharp_query+0x1d2>
        copy_needed = 1;
 801d8c0:	2301      	movs	r3, #1
 801d8c2:	61bb      	str	r3, [r7, #24]
        break;
 801d8c4:	e005      	b.n	801d8d2 <etharp_query+0x1de>
      }
      p = p->next;
 801d8c6:	69fb      	ldr	r3, [r7, #28]
 801d8c8:	681b      	ldr	r3, [r3, #0]
 801d8ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d8cc:	69fb      	ldr	r3, [r7, #28]
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d1df      	bne.n	801d892 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801d8d2:	69bb      	ldr	r3, [r7, #24]
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d007      	beq.n	801d8e8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d8d8:	687a      	ldr	r2, [r7, #4]
 801d8da:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801d8de:	200e      	movs	r0, #14
 801d8e0:	f7f7 ff26 	bl	8015730 <pbuf_clone>
 801d8e4:	61f8      	str	r0, [r7, #28]
 801d8e6:	e004      	b.n	801d8f2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d8ec:	69f8      	ldr	r0, [r7, #28]
 801d8ee:	f7f7 fd39 	bl	8015364 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d8f2:	69fb      	ldr	r3, [r7, #28]
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d021      	beq.n	801d93c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d8f8:	7c7a      	ldrb	r2, [r7, #17]
 801d8fa:	4918      	ldr	r1, [pc, #96]	@ (801d95c <etharp_query+0x268>)
 801d8fc:	4613      	mov	r3, r2
 801d8fe:	005b      	lsls	r3, r3, #1
 801d900:	4413      	add	r3, r2
 801d902:	00db      	lsls	r3, r3, #3
 801d904:	440b      	add	r3, r1
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d00a      	beq.n	801d922 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d90c:	7c7a      	ldrb	r2, [r7, #17]
 801d90e:	4913      	ldr	r1, [pc, #76]	@ (801d95c <etharp_query+0x268>)
 801d910:	4613      	mov	r3, r2
 801d912:	005b      	lsls	r3, r3, #1
 801d914:	4413      	add	r3, r2
 801d916:	00db      	lsls	r3, r3, #3
 801d918:	440b      	add	r3, r1
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	4618      	mov	r0, r3
 801d91e:	f7f7 fc63 	bl	80151e8 <pbuf_free>
      }
      arp_table[i].q = p;
 801d922:	7c7a      	ldrb	r2, [r7, #17]
 801d924:	490d      	ldr	r1, [pc, #52]	@ (801d95c <etharp_query+0x268>)
 801d926:	4613      	mov	r3, r2
 801d928:	005b      	lsls	r3, r3, #1
 801d92a:	4413      	add	r3, r2
 801d92c:	00db      	lsls	r3, r3, #3
 801d92e:	440b      	add	r3, r1
 801d930:	69fa      	ldr	r2, [r7, #28]
 801d932:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d934:	2300      	movs	r3, #0
 801d936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d93a:	e002      	b.n	801d942 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d93c:	23ff      	movs	r3, #255	@ 0xff
 801d93e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801d942:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801d946:	4618      	mov	r0, r3
 801d948:	3728      	adds	r7, #40	@ 0x28
 801d94a:	46bd      	mov	sp, r7
 801d94c:	bd80      	pop	{r7, pc}
 801d94e:	bf00      	nop
 801d950:	08025400 	.word	0x08025400
 801d954:	080255ac 	.word	0x080255ac
 801d958:	08025478 	.word	0x08025478
 801d95c:	20022b0c 	.word	0x20022b0c
 801d960:	080255bc 	.word	0x080255bc
 801d964:	080255a0 	.word	0x080255a0
 801d968:	20022bfc 	.word	0x20022bfc
 801d96c:	080255e4 	.word	0x080255e4

0801d970 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	b08a      	sub	sp, #40	@ 0x28
 801d974:	af02      	add	r7, sp, #8
 801d976:	60f8      	str	r0, [r7, #12]
 801d978:	60b9      	str	r1, [r7, #8]
 801d97a:	607a      	str	r2, [r7, #4]
 801d97c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d97e:	2300      	movs	r3, #0
 801d980:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d982:	68fb      	ldr	r3, [r7, #12]
 801d984:	2b00      	cmp	r3, #0
 801d986:	d106      	bne.n	801d996 <etharp_raw+0x26>
 801d988:	4b3a      	ldr	r3, [pc, #232]	@ (801da74 <etharp_raw+0x104>)
 801d98a:	f240 4257 	movw	r2, #1111	@ 0x457
 801d98e:	493a      	ldr	r1, [pc, #232]	@ (801da78 <etharp_raw+0x108>)
 801d990:	483a      	ldr	r0, [pc, #232]	@ (801da7c <etharp_raw+0x10c>)
 801d992:	f002 ffb3 	bl	80208fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d996:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d99a:	211c      	movs	r1, #28
 801d99c:	200e      	movs	r0, #14
 801d99e:	f7f7 f8f7 	bl	8014b90 <pbuf_alloc>
 801d9a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d9a4:	69bb      	ldr	r3, [r7, #24]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d102      	bne.n	801d9b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801d9aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d9ae:	e05d      	b.n	801da6c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d9b0:	69bb      	ldr	r3, [r7, #24]
 801d9b2:	895b      	ldrh	r3, [r3, #10]
 801d9b4:	2b1b      	cmp	r3, #27
 801d9b6:	d806      	bhi.n	801d9c6 <etharp_raw+0x56>
 801d9b8:	4b2e      	ldr	r3, [pc, #184]	@ (801da74 <etharp_raw+0x104>)
 801d9ba:	f240 4262 	movw	r2, #1122	@ 0x462
 801d9be:	4930      	ldr	r1, [pc, #192]	@ (801da80 <etharp_raw+0x110>)
 801d9c0:	482e      	ldr	r0, [pc, #184]	@ (801da7c <etharp_raw+0x10c>)
 801d9c2:	f002 ff9b 	bl	80208fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d9c6:	69bb      	ldr	r3, [r7, #24]
 801d9c8:	685b      	ldr	r3, [r3, #4]
 801d9ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d9cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801d9ce:	4618      	mov	r0, r3
 801d9d0:	f7f5 feb0 	bl	8013734 <lwip_htons>
 801d9d4:	4603      	mov	r3, r0
 801d9d6:	461a      	mov	r2, r3
 801d9d8:	697b      	ldr	r3, [r7, #20]
 801d9da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d9e2:	2b06      	cmp	r3, #6
 801d9e4:	d006      	beq.n	801d9f4 <etharp_raw+0x84>
 801d9e6:	4b23      	ldr	r3, [pc, #140]	@ (801da74 <etharp_raw+0x104>)
 801d9e8:	f240 4269 	movw	r2, #1129	@ 0x469
 801d9ec:	4925      	ldr	r1, [pc, #148]	@ (801da84 <etharp_raw+0x114>)
 801d9ee:	4823      	ldr	r0, [pc, #140]	@ (801da7c <etharp_raw+0x10c>)
 801d9f0:	f002 ff84 	bl	80208fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d9f4:	697b      	ldr	r3, [r7, #20]
 801d9f6:	3308      	adds	r3, #8
 801d9f8:	2206      	movs	r2, #6
 801d9fa:	6839      	ldr	r1, [r7, #0]
 801d9fc:	4618      	mov	r0, r3
 801d9fe:	f003 f952 	bl	8020ca6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801da02:	697b      	ldr	r3, [r7, #20]
 801da04:	3312      	adds	r3, #18
 801da06:	2206      	movs	r2, #6
 801da08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801da0a:	4618      	mov	r0, r3
 801da0c:	f003 f94b 	bl	8020ca6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801da10:	697b      	ldr	r3, [r7, #20]
 801da12:	330e      	adds	r3, #14
 801da14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da16:	6812      	ldr	r2, [r2, #0]
 801da18:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801da1a:	697b      	ldr	r3, [r7, #20]
 801da1c:	3318      	adds	r3, #24
 801da1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801da20:	6812      	ldr	r2, [r2, #0]
 801da22:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801da24:	697b      	ldr	r3, [r7, #20]
 801da26:	2200      	movs	r2, #0
 801da28:	701a      	strb	r2, [r3, #0]
 801da2a:	2200      	movs	r2, #0
 801da2c:	f042 0201 	orr.w	r2, r2, #1
 801da30:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801da32:	697b      	ldr	r3, [r7, #20]
 801da34:	2200      	movs	r2, #0
 801da36:	f042 0208 	orr.w	r2, r2, #8
 801da3a:	709a      	strb	r2, [r3, #2]
 801da3c:	2200      	movs	r2, #0
 801da3e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801da40:	697b      	ldr	r3, [r7, #20]
 801da42:	2206      	movs	r2, #6
 801da44:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801da46:	697b      	ldr	r3, [r7, #20]
 801da48:	2204      	movs	r2, #4
 801da4a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801da4c:	f640 0306 	movw	r3, #2054	@ 0x806
 801da50:	9300      	str	r3, [sp, #0]
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	68ba      	ldr	r2, [r7, #8]
 801da56:	69b9      	ldr	r1, [r7, #24]
 801da58:	68f8      	ldr	r0, [r7, #12]
 801da5a:	f001 fc0d 	bl	801f278 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801da5e:	69b8      	ldr	r0, [r7, #24]
 801da60:	f7f7 fbc2 	bl	80151e8 <pbuf_free>
  p = NULL;
 801da64:	2300      	movs	r3, #0
 801da66:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801da68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801da6c:	4618      	mov	r0, r3
 801da6e:	3720      	adds	r7, #32
 801da70:	46bd      	mov	sp, r7
 801da72:	bd80      	pop	{r7, pc}
 801da74:	08025400 	.word	0x08025400
 801da78:	08025550 	.word	0x08025550
 801da7c:	08025478 	.word	0x08025478
 801da80:	08025600 	.word	0x08025600
 801da84:	08025634 	.word	0x08025634

0801da88 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801da88:	b580      	push	{r7, lr}
 801da8a:	b088      	sub	sp, #32
 801da8c:	af04      	add	r7, sp, #16
 801da8e:	60f8      	str	r0, [r7, #12]
 801da90:	60b9      	str	r1, [r7, #8]
 801da92:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801da9a:	68fb      	ldr	r3, [r7, #12]
 801da9c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801daa4:	2201      	movs	r2, #1
 801daa6:	9203      	str	r2, [sp, #12]
 801daa8:	68ba      	ldr	r2, [r7, #8]
 801daaa:	9202      	str	r2, [sp, #8]
 801daac:	4a06      	ldr	r2, [pc, #24]	@ (801dac8 <etharp_request_dst+0x40>)
 801daae:	9201      	str	r2, [sp, #4]
 801dab0:	9300      	str	r3, [sp, #0]
 801dab2:	4603      	mov	r3, r0
 801dab4:	687a      	ldr	r2, [r7, #4]
 801dab6:	68f8      	ldr	r0, [r7, #12]
 801dab8:	f7ff ff5a 	bl	801d970 <etharp_raw>
 801dabc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801dabe:	4618      	mov	r0, r3
 801dac0:	3710      	adds	r7, #16
 801dac2:	46bd      	mov	sp, r7
 801dac4:	bd80      	pop	{r7, pc}
 801dac6:	bf00      	nop
 801dac8:	0802642c 	.word	0x0802642c

0801dacc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801dacc:	b580      	push	{r7, lr}
 801dace:	b082      	sub	sp, #8
 801dad0:	af00      	add	r7, sp, #0
 801dad2:	6078      	str	r0, [r7, #4]
 801dad4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801dad6:	4a05      	ldr	r2, [pc, #20]	@ (801daec <etharp_request+0x20>)
 801dad8:	6839      	ldr	r1, [r7, #0]
 801dada:	6878      	ldr	r0, [r7, #4]
 801dadc:	f7ff ffd4 	bl	801da88 <etharp_request_dst>
 801dae0:	4603      	mov	r3, r0
}
 801dae2:	4618      	mov	r0, r3
 801dae4:	3708      	adds	r7, #8
 801dae6:	46bd      	mov	sp, r7
 801dae8:	bd80      	pop	{r7, pc}
 801daea:	bf00      	nop
 801daec:	08026424 	.word	0x08026424

0801daf0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801daf0:	b580      	push	{r7, lr}
 801daf2:	b08e      	sub	sp, #56	@ 0x38
 801daf4:	af04      	add	r7, sp, #16
 801daf6:	6078      	str	r0, [r7, #4]
 801daf8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801dafa:	4b95      	ldr	r3, [pc, #596]	@ (801dd50 <icmp_input+0x260>)
 801dafc:	689b      	ldr	r3, [r3, #8]
 801dafe:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801db00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db02:	781b      	ldrb	r3, [r3, #0]
 801db04:	f003 030f 	and.w	r3, r3, #15
 801db08:	b2db      	uxtb	r3, r3
 801db0a:	009b      	lsls	r3, r3, #2
 801db0c:	b2db      	uxtb	r3, r3
 801db0e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801db10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801db12:	2b13      	cmp	r3, #19
 801db14:	d805      	bhi.n	801db22 <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 801db16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801db18:	4619      	mov	r1, r3
 801db1a:	488e      	ldr	r0, [pc, #568]	@ (801dd54 <icmp_input+0x264>)
 801db1c:	f002 feee 	bl	80208fc <iprintf>
    goto lenerr;
 801db20:	e10a      	b.n	801dd38 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	895b      	ldrh	r3, [r3, #10]
 801db26:	2b03      	cmp	r3, #3
 801db28:	d806      	bhi.n	801db38 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	891b      	ldrh	r3, [r3, #8]
 801db2e:	4619      	mov	r1, r3
 801db30:	4889      	ldr	r0, [pc, #548]	@ (801dd58 <icmp_input+0x268>)
 801db32:	f002 fee3 	bl	80208fc <iprintf>
    goto lenerr;
 801db36:	e0ff      	b.n	801dd38 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	685b      	ldr	r3, [r3, #4]
 801db3c:	781b      	ldrb	r3, [r3, #0]
 801db3e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	685b      	ldr	r3, [r3, #4]
 801db46:	785b      	ldrb	r3, [r3, #1]
 801db48:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801db4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801db50:	2b00      	cmp	r3, #0
 801db52:	f000 80ea 	beq.w	801dd2a <icmp_input+0x23a>
 801db56:	2b08      	cmp	r3, #8
 801db58:	f040 80de 	bne.w	801dd18 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801db5c:	4b7f      	ldr	r3, [pc, #508]	@ (801dd5c <icmp_input+0x26c>)
 801db5e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801db60:	4b7b      	ldr	r3, [pc, #492]	@ (801dd50 <icmp_input+0x260>)
 801db62:	695b      	ldr	r3, [r3, #20]
 801db64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801db68:	2be0      	cmp	r3, #224	@ 0xe0
 801db6a:	d103      	bne.n	801db74 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 801db6c:	487c      	ldr	r0, [pc, #496]	@ (801dd60 <icmp_input+0x270>)
 801db6e:	f002 ff35 	bl	80209dc <puts>
        goto icmperr;
 801db72:	e0e5      	b.n	801dd40 <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801db74:	4b76      	ldr	r3, [pc, #472]	@ (801dd50 <icmp_input+0x260>)
 801db76:	695b      	ldr	r3, [r3, #20]
 801db78:	4a75      	ldr	r2, [pc, #468]	@ (801dd50 <icmp_input+0x260>)
 801db7a:	6812      	ldr	r2, [r2, #0]
 801db7c:	4611      	mov	r1, r2
 801db7e:	4618      	mov	r0, r3
 801db80:	f000 fc6c 	bl	801e45c <ip4_addr_isbroadcast_u32>
 801db84:	4603      	mov	r3, r0
 801db86:	2b00      	cmp	r3, #0
 801db88:	d003      	beq.n	801db92 <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 801db8a:	4876      	ldr	r0, [pc, #472]	@ (801dd64 <icmp_input+0x274>)
 801db8c:	f002 ff26 	bl	80209dc <puts>
        goto icmperr;
 801db90:	e0d6      	b.n	801dd40 <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801db92:	4875      	ldr	r0, [pc, #468]	@ (801dd68 <icmp_input+0x278>)
 801db94:	f002 ff22 	bl	80209dc <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	891b      	ldrh	r3, [r3, #8]
 801db9c:	2b07      	cmp	r3, #7
 801db9e:	d803      	bhi.n	801dba8 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 801dba0:	4872      	ldr	r0, [pc, #456]	@ (801dd6c <icmp_input+0x27c>)
 801dba2:	f002 ff1b 	bl	80209dc <puts>
        goto lenerr;
 801dba6:	e0c7      	b.n	801dd38 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801dba8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dbaa:	330e      	adds	r3, #14
 801dbac:	4619      	mov	r1, r3
 801dbae:	6878      	ldr	r0, [r7, #4]
 801dbb0:	f7f7 fa7c 	bl	80150ac <pbuf_add_header>
 801dbb4:	4603      	mov	r3, r0
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	d057      	beq.n	801dc6a <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	891a      	ldrh	r2, [r3, #8]
 801dbbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dbc0:	4413      	add	r3, r2
 801dbc2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	891b      	ldrh	r3, [r3, #8]
 801dbc8:	8b7a      	ldrh	r2, [r7, #26]
 801dbca:	429a      	cmp	r2, r3
 801dbcc:	d203      	bcs.n	801dbd6 <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801dbce:	4868      	ldr	r0, [pc, #416]	@ (801dd70 <icmp_input+0x280>)
 801dbd0:	f002 ff04 	bl	80209dc <puts>
          goto icmperr;
 801dbd4:	e0b4      	b.n	801dd40 <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801dbd6:	8b7b      	ldrh	r3, [r7, #26]
 801dbd8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801dbdc:	4619      	mov	r1, r3
 801dbde:	200e      	movs	r0, #14
 801dbe0:	f7f6 ffd6 	bl	8014b90 <pbuf_alloc>
 801dbe4:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801dbe6:	697b      	ldr	r3, [r7, #20]
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d103      	bne.n	801dbf4 <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801dbec:	4861      	ldr	r0, [pc, #388]	@ (801dd74 <icmp_input+0x284>)
 801dbee:	f002 fef5 	bl	80209dc <puts>
          goto icmperr;
 801dbf2:	e0a5      	b.n	801dd40 <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801dbf4:	697b      	ldr	r3, [r7, #20]
 801dbf6:	895b      	ldrh	r3, [r3, #10]
 801dbf8:	461a      	mov	r2, r3
 801dbfa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dbfc:	3308      	adds	r3, #8
 801dbfe:	429a      	cmp	r2, r3
 801dc00:	d206      	bcs.n	801dc10 <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801dc02:	485d      	ldr	r0, [pc, #372]	@ (801dd78 <icmp_input+0x288>)
 801dc04:	f002 fe7a 	bl	80208fc <iprintf>
          pbuf_free(r);
 801dc08:	6978      	ldr	r0, [r7, #20]
 801dc0a:	f7f7 faed 	bl	80151e8 <pbuf_free>
          goto icmperr;
 801dc0e:	e097      	b.n	801dd40 <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801dc10:	697b      	ldr	r3, [r7, #20]
 801dc12:	685b      	ldr	r3, [r3, #4]
 801dc14:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801dc16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801dc18:	4618      	mov	r0, r3
 801dc1a:	f003 f844 	bl	8020ca6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801dc1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dc20:	4619      	mov	r1, r3
 801dc22:	6978      	ldr	r0, [r7, #20]
 801dc24:	f7f7 fa52 	bl	80150cc <pbuf_remove_header>
 801dc28:	4603      	mov	r3, r0
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d009      	beq.n	801dc42 <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801dc2e:	4b53      	ldr	r3, [pc, #332]	@ (801dd7c <icmp_input+0x28c>)
 801dc30:	22b6      	movs	r2, #182	@ 0xb6
 801dc32:	4953      	ldr	r1, [pc, #332]	@ (801dd80 <icmp_input+0x290>)
 801dc34:	4853      	ldr	r0, [pc, #332]	@ (801dd84 <icmp_input+0x294>)
 801dc36:	f002 fe61 	bl	80208fc <iprintf>
          pbuf_free(r);
 801dc3a:	6978      	ldr	r0, [r7, #20]
 801dc3c:	f7f7 fad4 	bl	80151e8 <pbuf_free>
          goto icmperr;
 801dc40:	e07e      	b.n	801dd40 <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801dc42:	6879      	ldr	r1, [r7, #4]
 801dc44:	6978      	ldr	r0, [r7, #20]
 801dc46:	f7f7 fc23 	bl	8015490 <pbuf_copy>
 801dc4a:	4603      	mov	r3, r0
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d006      	beq.n	801dc5e <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 801dc50:	484d      	ldr	r0, [pc, #308]	@ (801dd88 <icmp_input+0x298>)
 801dc52:	f002 fe53 	bl	80208fc <iprintf>
          pbuf_free(r);
 801dc56:	6978      	ldr	r0, [r7, #20]
 801dc58:	f7f7 fac6 	bl	80151e8 <pbuf_free>
          goto icmperr;
 801dc5c:	e070      	b.n	801dd40 <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 801dc5e:	6878      	ldr	r0, [r7, #4]
 801dc60:	f7f7 fac2 	bl	80151e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801dc64:	697b      	ldr	r3, [r7, #20]
 801dc66:	607b      	str	r3, [r7, #4]
 801dc68:	e00f      	b.n	801dc8a <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801dc6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dc6c:	330e      	adds	r3, #14
 801dc6e:	4619      	mov	r1, r3
 801dc70:	6878      	ldr	r0, [r7, #4]
 801dc72:	f7f7 fa2b 	bl	80150cc <pbuf_remove_header>
 801dc76:	4603      	mov	r3, r0
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d006      	beq.n	801dc8a <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801dc7c:	4b3f      	ldr	r3, [pc, #252]	@ (801dd7c <icmp_input+0x28c>)
 801dc7e:	22c7      	movs	r2, #199	@ 0xc7
 801dc80:	4942      	ldr	r1, [pc, #264]	@ (801dd8c <icmp_input+0x29c>)
 801dc82:	4840      	ldr	r0, [pc, #256]	@ (801dd84 <icmp_input+0x294>)
 801dc84:	f002 fe3a 	bl	80208fc <iprintf>
          goto icmperr;
 801dc88:	e05a      	b.n	801dd40 <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	685b      	ldr	r3, [r3, #4]
 801dc8e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801dc90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dc92:	4619      	mov	r1, r3
 801dc94:	6878      	ldr	r0, [r7, #4]
 801dc96:	f7f7 fa09 	bl	80150ac <pbuf_add_header>
 801dc9a:	4603      	mov	r3, r0
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	d003      	beq.n	801dca8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 801dca0:	483b      	ldr	r0, [pc, #236]	@ (801dd90 <icmp_input+0x2a0>)
 801dca2:	f002 fe2b 	bl	80208fc <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801dca6:	e042      	b.n	801dd2e <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	685b      	ldr	r3, [r3, #4]
 801dcac:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801dcae:	69fb      	ldr	r3, [r7, #28]
 801dcb0:	681a      	ldr	r2, [r3, #0]
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801dcb6:	4b26      	ldr	r3, [pc, #152]	@ (801dd50 <icmp_input+0x260>)
 801dcb8:	691a      	ldr	r2, [r3, #16]
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801dcbe:	693b      	ldr	r3, [r7, #16]
 801dcc0:	2200      	movs	r2, #0
 801dcc2:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801dcc4:	693b      	ldr	r3, [r7, #16]
 801dcc6:	2200      	movs	r2, #0
 801dcc8:	709a      	strb	r2, [r3, #2]
 801dcca:	2200      	movs	r2, #0
 801dccc:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801dcce:	68fb      	ldr	r3, [r7, #12]
 801dcd0:	22ff      	movs	r2, #255	@ 0xff
 801dcd2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801dcd4:	68fb      	ldr	r3, [r7, #12]
 801dcd6:	2200      	movs	r2, #0
 801dcd8:	729a      	strb	r2, [r3, #10]
 801dcda:	2200      	movs	r2, #0
 801dcdc:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801dcde:	683b      	ldr	r3, [r7, #0]
 801dce0:	9302      	str	r3, [sp, #8]
 801dce2:	2301      	movs	r3, #1
 801dce4:	9301      	str	r3, [sp, #4]
 801dce6:	2300      	movs	r3, #0
 801dce8:	9300      	str	r3, [sp, #0]
 801dcea:	23ff      	movs	r3, #255	@ 0xff
 801dcec:	2200      	movs	r2, #0
 801dcee:	69f9      	ldr	r1, [r7, #28]
 801dcf0:	6878      	ldr	r0, [r7, #4]
 801dcf2:	f000 fadb 	bl	801e2ac <ip4_output_if>
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801dcfa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d015      	beq.n	801dd2e <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801dd02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801dd06:	4618      	mov	r0, r3
 801dd08:	f7f5 fabe 	bl	8013288 <lwip_strerr>
 801dd0c:	4603      	mov	r3, r0
 801dd0e:	4619      	mov	r1, r3
 801dd10:	4820      	ldr	r0, [pc, #128]	@ (801dd94 <icmp_input+0x2a4>)
 801dd12:	f002 fdf3 	bl	80208fc <iprintf>
      break;
 801dd16:	e00a      	b.n	801dd2e <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801dd18:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801dd1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 801dd20:	4619      	mov	r1, r3
 801dd22:	481d      	ldr	r0, [pc, #116]	@ (801dd98 <icmp_input+0x2a8>)
 801dd24:	f002 fdea 	bl	80208fc <iprintf>
 801dd28:	e002      	b.n	801dd30 <icmp_input+0x240>
      break;
 801dd2a:	bf00      	nop
 801dd2c:	e000      	b.n	801dd30 <icmp_input+0x240>
      break;
 801dd2e:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801dd30:	6878      	ldr	r0, [r7, #4]
 801dd32:	f7f7 fa59 	bl	80151e8 <pbuf_free>
  return;
 801dd36:	e007      	b.n	801dd48 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 801dd38:	6878      	ldr	r0, [r7, #4]
 801dd3a:	f7f7 fa55 	bl	80151e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801dd3e:	e003      	b.n	801dd48 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801dd40:	6878      	ldr	r0, [r7, #4]
 801dd42:	f7f7 fa51 	bl	80151e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801dd46:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801dd48:	3728      	adds	r7, #40	@ 0x28
 801dd4a:	46bd      	mov	sp, r7
 801dd4c:	bd80      	pop	{r7, pc}
 801dd4e:	bf00      	nop
 801dd50:	2001f658 	.word	0x2001f658
 801dd54:	08025678 	.word	0x08025678
 801dd58:	080256ac 	.word	0x080256ac
 801dd5c:	2001f66c 	.word	0x2001f66c
 801dd60:	080256dc 	.word	0x080256dc
 801dd64:	08025708 	.word	0x08025708
 801dd68:	08025734 	.word	0x08025734
 801dd6c:	08025748 	.word	0x08025748
 801dd70:	0802576c 	.word	0x0802576c
 801dd74:	080257a8 	.word	0x080257a8
 801dd78:	080257d0 	.word	0x080257d0
 801dd7c:	080257f8 	.word	0x080257f8
 801dd80:	08025830 	.word	0x08025830
 801dd84:	08025868 	.word	0x08025868
 801dd88:	08025890 	.word	0x08025890
 801dd8c:	080258b8 	.word	0x080258b8
 801dd90:	080258ec 	.word	0x080258ec
 801dd94:	08025910 	.word	0x08025910
 801dd98:	08025940 	.word	0x08025940

0801dd9c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801dd9c:	b580      	push	{r7, lr}
 801dd9e:	b082      	sub	sp, #8
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	6078      	str	r0, [r7, #4]
 801dda4:	460b      	mov	r3, r1
 801dda6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801dda8:	78fb      	ldrb	r3, [r7, #3]
 801ddaa:	461a      	mov	r2, r3
 801ddac:	2103      	movs	r1, #3
 801ddae:	6878      	ldr	r0, [r7, #4]
 801ddb0:	f000 f814 	bl	801dddc <icmp_send_response>
}
 801ddb4:	bf00      	nop
 801ddb6:	3708      	adds	r7, #8
 801ddb8:	46bd      	mov	sp, r7
 801ddba:	bd80      	pop	{r7, pc}

0801ddbc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801ddbc:	b580      	push	{r7, lr}
 801ddbe:	b082      	sub	sp, #8
 801ddc0:	af00      	add	r7, sp, #0
 801ddc2:	6078      	str	r0, [r7, #4]
 801ddc4:	460b      	mov	r3, r1
 801ddc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801ddc8:	78fb      	ldrb	r3, [r7, #3]
 801ddca:	461a      	mov	r2, r3
 801ddcc:	210b      	movs	r1, #11
 801ddce:	6878      	ldr	r0, [r7, #4]
 801ddd0:	f000 f804 	bl	801dddc <icmp_send_response>
}
 801ddd4:	bf00      	nop
 801ddd6:	3708      	adds	r7, #8
 801ddd8:	46bd      	mov	sp, r7
 801ddda:	bd80      	pop	{r7, pc}

0801dddc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801dddc:	b580      	push	{r7, lr}
 801ddde:	b08c      	sub	sp, #48	@ 0x30
 801dde0:	af04      	add	r7, sp, #16
 801dde2:	6078      	str	r0, [r7, #4]
 801dde4:	460b      	mov	r3, r1
 801dde6:	70fb      	strb	r3, [r7, #3]
 801dde8:	4613      	mov	r3, r2
 801ddea:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801ddec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ddf0:	2124      	movs	r1, #36	@ 0x24
 801ddf2:	2022      	movs	r0, #34	@ 0x22
 801ddf4:	f7f6 fecc 	bl	8014b90 <pbuf_alloc>
 801ddf8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801ddfa:	69fb      	ldr	r3, [r7, #28]
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	d103      	bne.n	801de08 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 801de00:	4844      	ldr	r0, [pc, #272]	@ (801df14 <icmp_send_response+0x138>)
 801de02:	f002 fdeb 	bl	80209dc <puts>
 801de06:	e082      	b.n	801df0e <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801de08:	69fb      	ldr	r3, [r7, #28]
 801de0a:	895b      	ldrh	r3, [r3, #10]
 801de0c:	2b23      	cmp	r3, #35	@ 0x23
 801de0e:	d806      	bhi.n	801de1e <icmp_send_response+0x42>
 801de10:	4b41      	ldr	r3, [pc, #260]	@ (801df18 <icmp_send_response+0x13c>)
 801de12:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801de16:	4941      	ldr	r1, [pc, #260]	@ (801df1c <icmp_send_response+0x140>)
 801de18:	4841      	ldr	r0, [pc, #260]	@ (801df20 <icmp_send_response+0x144>)
 801de1a:	f002 fd6f 	bl	80208fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	685b      	ldr	r3, [r3, #4]
 801de22:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 801de24:	483f      	ldr	r0, [pc, #252]	@ (801df24 <icmp_send_response+0x148>)
 801de26:	f002 fd69 	bl	80208fc <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801de2a:	69bb      	ldr	r3, [r7, #24]
 801de2c:	68db      	ldr	r3, [r3, #12]
 801de2e:	b2db      	uxtb	r3, r3
 801de30:	4619      	mov	r1, r3
 801de32:	69bb      	ldr	r3, [r7, #24]
 801de34:	68db      	ldr	r3, [r3, #12]
 801de36:	0a1b      	lsrs	r3, r3, #8
 801de38:	b2db      	uxtb	r3, r3
 801de3a:	461a      	mov	r2, r3
 801de3c:	69bb      	ldr	r3, [r7, #24]
 801de3e:	68db      	ldr	r3, [r3, #12]
 801de40:	0c1b      	lsrs	r3, r3, #16
 801de42:	b2db      	uxtb	r3, r3
 801de44:	4618      	mov	r0, r3
 801de46:	69bb      	ldr	r3, [r7, #24]
 801de48:	68db      	ldr	r3, [r3, #12]
 801de4a:	0e1b      	lsrs	r3, r3, #24
 801de4c:	b2db      	uxtb	r3, r3
 801de4e:	9300      	str	r3, [sp, #0]
 801de50:	4603      	mov	r3, r0
 801de52:	4835      	ldr	r0, [pc, #212]	@ (801df28 <icmp_send_response+0x14c>)
 801de54:	f002 fd52 	bl	80208fc <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 801de58:	4834      	ldr	r0, [pc, #208]	@ (801df2c <icmp_send_response+0x150>)
 801de5a:	f002 fd4f 	bl	80208fc <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801de5e:	69bb      	ldr	r3, [r7, #24]
 801de60:	691b      	ldr	r3, [r3, #16]
 801de62:	b2db      	uxtb	r3, r3
 801de64:	4619      	mov	r1, r3
 801de66:	69bb      	ldr	r3, [r7, #24]
 801de68:	691b      	ldr	r3, [r3, #16]
 801de6a:	0a1b      	lsrs	r3, r3, #8
 801de6c:	b2db      	uxtb	r3, r3
 801de6e:	461a      	mov	r2, r3
 801de70:	69bb      	ldr	r3, [r7, #24]
 801de72:	691b      	ldr	r3, [r3, #16]
 801de74:	0c1b      	lsrs	r3, r3, #16
 801de76:	b2db      	uxtb	r3, r3
 801de78:	4618      	mov	r0, r3
 801de7a:	69bb      	ldr	r3, [r7, #24]
 801de7c:	691b      	ldr	r3, [r3, #16]
 801de7e:	0e1b      	lsrs	r3, r3, #24
 801de80:	b2db      	uxtb	r3, r3
 801de82:	9300      	str	r3, [sp, #0]
 801de84:	4603      	mov	r3, r0
 801de86:	4828      	ldr	r0, [pc, #160]	@ (801df28 <icmp_send_response+0x14c>)
 801de88:	f002 fd38 	bl	80208fc <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 801de8c:	200a      	movs	r0, #10
 801de8e:	f002 fd47 	bl	8020920 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801de92:	69fb      	ldr	r3, [r7, #28]
 801de94:	685b      	ldr	r3, [r3, #4]
 801de96:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801de98:	697b      	ldr	r3, [r7, #20]
 801de9a:	78fa      	ldrb	r2, [r7, #3]
 801de9c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801de9e:	697b      	ldr	r3, [r7, #20]
 801dea0:	78ba      	ldrb	r2, [r7, #2]
 801dea2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801dea4:	697b      	ldr	r3, [r7, #20]
 801dea6:	2200      	movs	r2, #0
 801dea8:	711a      	strb	r2, [r3, #4]
 801deaa:	2200      	movs	r2, #0
 801deac:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801deae:	697b      	ldr	r3, [r7, #20]
 801deb0:	2200      	movs	r2, #0
 801deb2:	719a      	strb	r2, [r3, #6]
 801deb4:	2200      	movs	r2, #0
 801deb6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801deb8:	69fb      	ldr	r3, [r7, #28]
 801deba:	685b      	ldr	r3, [r3, #4]
 801debc:	f103 0008 	add.w	r0, r3, #8
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	685b      	ldr	r3, [r3, #4]
 801dec4:	221c      	movs	r2, #28
 801dec6:	4619      	mov	r1, r3
 801dec8:	f002 feed 	bl	8020ca6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801decc:	69bb      	ldr	r3, [r7, #24]
 801dece:	68db      	ldr	r3, [r3, #12]
 801ded0:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ded2:	f107 030c 	add.w	r3, r7, #12
 801ded6:	4618      	mov	r0, r3
 801ded8:	f000 f82a 	bl	801df30 <ip4_route>
 801dedc:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801dede:	693b      	ldr	r3, [r7, #16]
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d011      	beq.n	801df08 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801dee4:	697b      	ldr	r3, [r7, #20]
 801dee6:	2200      	movs	r2, #0
 801dee8:	709a      	strb	r2, [r3, #2]
 801deea:	2200      	movs	r2, #0
 801deec:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801deee:	f107 020c 	add.w	r2, r7, #12
 801def2:	693b      	ldr	r3, [r7, #16]
 801def4:	9302      	str	r3, [sp, #8]
 801def6:	2301      	movs	r3, #1
 801def8:	9301      	str	r3, [sp, #4]
 801defa:	2300      	movs	r3, #0
 801defc:	9300      	str	r3, [sp, #0]
 801defe:	23ff      	movs	r3, #255	@ 0xff
 801df00:	2100      	movs	r1, #0
 801df02:	69f8      	ldr	r0, [r7, #28]
 801df04:	f000 f9d2 	bl	801e2ac <ip4_output_if>
  }
  pbuf_free(q);
 801df08:	69f8      	ldr	r0, [r7, #28]
 801df0a:	f7f7 f96d 	bl	80151e8 <pbuf_free>
}
 801df0e:	3720      	adds	r7, #32
 801df10:	46bd      	mov	sp, r7
 801df12:	bd80      	pop	{r7, pc}
 801df14:	08025974 	.word	0x08025974
 801df18:	080257f8 	.word	0x080257f8
 801df1c:	080259b4 	.word	0x080259b4
 801df20:	08025868 	.word	0x08025868
 801df24:	080259e0 	.word	0x080259e0
 801df28:	080259fc 	.word	0x080259fc
 801df2c:	08025a0c 	.word	0x08025a0c

0801df30 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801df30:	b480      	push	{r7}
 801df32:	b085      	sub	sp, #20
 801df34:	af00      	add	r7, sp, #0
 801df36:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801df38:	4b33      	ldr	r3, [pc, #204]	@ (801e008 <ip4_route+0xd8>)
 801df3a:	681b      	ldr	r3, [r3, #0]
 801df3c:	60fb      	str	r3, [r7, #12]
 801df3e:	e036      	b.n	801dfae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801df46:	f003 0301 	and.w	r3, r3, #1
 801df4a:	b2db      	uxtb	r3, r3
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	d02b      	beq.n	801dfa8 <ip4_route+0x78>
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801df56:	089b      	lsrs	r3, r3, #2
 801df58:	f003 0301 	and.w	r3, r3, #1
 801df5c:	b2db      	uxtb	r3, r3
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d022      	beq.n	801dfa8 <ip4_route+0x78>
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	3304      	adds	r3, #4
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d01d      	beq.n	801dfa8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	681a      	ldr	r2, [r3, #0]
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	3304      	adds	r3, #4
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	405a      	eors	r2, r3
 801df78:	68fb      	ldr	r3, [r7, #12]
 801df7a:	3308      	adds	r3, #8
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	4013      	ands	r3, r2
 801df80:	2b00      	cmp	r3, #0
 801df82:	d101      	bne.n	801df88 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801df84:	68fb      	ldr	r3, [r7, #12]
 801df86:	e038      	b.n	801dffa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801df8e:	f003 0302 	and.w	r3, r3, #2
 801df92:	2b00      	cmp	r3, #0
 801df94:	d108      	bne.n	801dfa8 <ip4_route+0x78>
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	681a      	ldr	r2, [r3, #0]
 801df9a:	68fb      	ldr	r3, [r7, #12]
 801df9c:	330c      	adds	r3, #12
 801df9e:	681b      	ldr	r3, [r3, #0]
 801dfa0:	429a      	cmp	r2, r3
 801dfa2:	d101      	bne.n	801dfa8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	e028      	b.n	801dffa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801dfa8:	68fb      	ldr	r3, [r7, #12]
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	60fb      	str	r3, [r7, #12]
 801dfae:	68fb      	ldr	r3, [r7, #12]
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d1c5      	bne.n	801df40 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801dfb4:	4b15      	ldr	r3, [pc, #84]	@ (801e00c <ip4_route+0xdc>)
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d01a      	beq.n	801dff2 <ip4_route+0xc2>
 801dfbc:	4b13      	ldr	r3, [pc, #76]	@ (801e00c <ip4_route+0xdc>)
 801dfbe:	681b      	ldr	r3, [r3, #0]
 801dfc0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801dfc4:	f003 0301 	and.w	r3, r3, #1
 801dfc8:	2b00      	cmp	r3, #0
 801dfca:	d012      	beq.n	801dff2 <ip4_route+0xc2>
 801dfcc:	4b0f      	ldr	r3, [pc, #60]	@ (801e00c <ip4_route+0xdc>)
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801dfd4:	f003 0304 	and.w	r3, r3, #4
 801dfd8:	2b00      	cmp	r3, #0
 801dfda:	d00a      	beq.n	801dff2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801dfdc:	4b0b      	ldr	r3, [pc, #44]	@ (801e00c <ip4_route+0xdc>)
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	3304      	adds	r3, #4
 801dfe2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	d004      	beq.n	801dff2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	b2db      	uxtb	r3, r3
 801dfee:	2b7f      	cmp	r3, #127	@ 0x7f
 801dff0:	d101      	bne.n	801dff6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801dff2:	2300      	movs	r3, #0
 801dff4:	e001      	b.n	801dffa <ip4_route+0xca>
  }

  return netif_default;
 801dff6:	4b05      	ldr	r3, [pc, #20]	@ (801e00c <ip4_route+0xdc>)
 801dff8:	681b      	ldr	r3, [r3, #0]
}
 801dffa:	4618      	mov	r0, r3
 801dffc:	3714      	adds	r7, #20
 801dffe:	46bd      	mov	sp, r7
 801e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e004:	4770      	bx	lr
 801e006:	bf00      	nop
 801e008:	20022a9c 	.word	0x20022a9c
 801e00c:	20022aa0 	.word	0x20022aa0

0801e010 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801e010:	b580      	push	{r7, lr}
 801e012:	b082      	sub	sp, #8
 801e014:	af00      	add	r7, sp, #0
 801e016:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e01e:	f003 0301 	and.w	r3, r3, #1
 801e022:	b2db      	uxtb	r3, r3
 801e024:	2b00      	cmp	r3, #0
 801e026:	d016      	beq.n	801e056 <ip4_input_accept+0x46>
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	3304      	adds	r3, #4
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	2b00      	cmp	r3, #0
 801e030:	d011      	beq.n	801e056 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e032:	4b0b      	ldr	r3, [pc, #44]	@ (801e060 <ip4_input_accept+0x50>)
 801e034:	695a      	ldr	r2, [r3, #20]
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	3304      	adds	r3, #4
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	429a      	cmp	r2, r3
 801e03e:	d008      	beq.n	801e052 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e040:	4b07      	ldr	r3, [pc, #28]	@ (801e060 <ip4_input_accept+0x50>)
 801e042:	695b      	ldr	r3, [r3, #20]
 801e044:	6879      	ldr	r1, [r7, #4]
 801e046:	4618      	mov	r0, r3
 801e048:	f000 fa08 	bl	801e45c <ip4_addr_isbroadcast_u32>
 801e04c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d001      	beq.n	801e056 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801e052:	2301      	movs	r3, #1
 801e054:	e000      	b.n	801e058 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801e056:	2300      	movs	r3, #0
}
 801e058:	4618      	mov	r0, r3
 801e05a:	3708      	adds	r7, #8
 801e05c:	46bd      	mov	sp, r7
 801e05e:	bd80      	pop	{r7, pc}
 801e060:	2001f658 	.word	0x2001f658

0801e064 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e064:	b580      	push	{r7, lr}
 801e066:	b086      	sub	sp, #24
 801e068:	af00      	add	r7, sp, #0
 801e06a:	6078      	str	r0, [r7, #4]
 801e06c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	685b      	ldr	r3, [r3, #4]
 801e072:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801e074:	693b      	ldr	r3, [r7, #16]
 801e076:	781b      	ldrb	r3, [r3, #0]
 801e078:	091b      	lsrs	r3, r3, #4
 801e07a:	b2db      	uxtb	r3, r3
 801e07c:	2b04      	cmp	r3, #4
 801e07e:	d004      	beq.n	801e08a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801e080:	6878      	ldr	r0, [r7, #4]
 801e082:	f7f7 f8b1 	bl	80151e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801e086:	2300      	movs	r3, #0
 801e088:	e107      	b.n	801e29a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e08a:	693b      	ldr	r3, [r7, #16]
 801e08c:	781b      	ldrb	r3, [r3, #0]
 801e08e:	f003 030f 	and.w	r3, r3, #15
 801e092:	b2db      	uxtb	r3, r3
 801e094:	009b      	lsls	r3, r3, #2
 801e096:	b2db      	uxtb	r3, r3
 801e098:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e09a:	693b      	ldr	r3, [r7, #16]
 801e09c:	885b      	ldrh	r3, [r3, #2]
 801e09e:	b29b      	uxth	r3, r3
 801e0a0:	4618      	mov	r0, r3
 801e0a2:	f7f5 fb47 	bl	8013734 <lwip_htons>
 801e0a6:	4603      	mov	r3, r0
 801e0a8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	891b      	ldrh	r3, [r3, #8]
 801e0ae:	89ba      	ldrh	r2, [r7, #12]
 801e0b0:	429a      	cmp	r2, r3
 801e0b2:	d204      	bcs.n	801e0be <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801e0b4:	89bb      	ldrh	r3, [r7, #12]
 801e0b6:	4619      	mov	r1, r3
 801e0b8:	6878      	ldr	r0, [r7, #4]
 801e0ba:	f7f6 fef5 	bl	8014ea8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	895b      	ldrh	r3, [r3, #10]
 801e0c2:	89fa      	ldrh	r2, [r7, #14]
 801e0c4:	429a      	cmp	r2, r3
 801e0c6:	d807      	bhi.n	801e0d8 <ip4_input+0x74>
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	891b      	ldrh	r3, [r3, #8]
 801e0cc:	89ba      	ldrh	r2, [r7, #12]
 801e0ce:	429a      	cmp	r2, r3
 801e0d0:	d802      	bhi.n	801e0d8 <ip4_input+0x74>
 801e0d2:	89fb      	ldrh	r3, [r7, #14]
 801e0d4:	2b13      	cmp	r3, #19
 801e0d6:	d804      	bhi.n	801e0e2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801e0d8:	6878      	ldr	r0, [r7, #4]
 801e0da:	f7f7 f885 	bl	80151e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801e0de:	2300      	movs	r3, #0
 801e0e0:	e0db      	b.n	801e29a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e0e2:	693b      	ldr	r3, [r7, #16]
 801e0e4:	691b      	ldr	r3, [r3, #16]
 801e0e6:	4a6f      	ldr	r2, [pc, #444]	@ (801e2a4 <ip4_input+0x240>)
 801e0e8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801e0ea:	693b      	ldr	r3, [r7, #16]
 801e0ec:	68db      	ldr	r3, [r3, #12]
 801e0ee:	4a6d      	ldr	r2, [pc, #436]	@ (801e2a4 <ip4_input+0x240>)
 801e0f0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e0f2:	4b6c      	ldr	r3, [pc, #432]	@ (801e2a4 <ip4_input+0x240>)
 801e0f4:	695b      	ldr	r3, [r3, #20]
 801e0f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801e0fa:	2be0      	cmp	r3, #224	@ 0xe0
 801e0fc:	d112      	bne.n	801e124 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801e0fe:	683b      	ldr	r3, [r7, #0]
 801e100:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e104:	f003 0301 	and.w	r3, r3, #1
 801e108:	b2db      	uxtb	r3, r3
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d007      	beq.n	801e11e <ip4_input+0xba>
 801e10e:	683b      	ldr	r3, [r7, #0]
 801e110:	3304      	adds	r3, #4
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	2b00      	cmp	r3, #0
 801e116:	d002      	beq.n	801e11e <ip4_input+0xba>
      netif = inp;
 801e118:	683b      	ldr	r3, [r7, #0]
 801e11a:	617b      	str	r3, [r7, #20]
 801e11c:	e02a      	b.n	801e174 <ip4_input+0x110>
    } else {
      netif = NULL;
 801e11e:	2300      	movs	r3, #0
 801e120:	617b      	str	r3, [r7, #20]
 801e122:	e027      	b.n	801e174 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801e124:	6838      	ldr	r0, [r7, #0]
 801e126:	f7ff ff73 	bl	801e010 <ip4_input_accept>
 801e12a:	4603      	mov	r3, r0
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	d002      	beq.n	801e136 <ip4_input+0xd2>
      netif = inp;
 801e130:	683b      	ldr	r3, [r7, #0]
 801e132:	617b      	str	r3, [r7, #20]
 801e134:	e01e      	b.n	801e174 <ip4_input+0x110>
    } else {
      netif = NULL;
 801e136:	2300      	movs	r3, #0
 801e138:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801e13a:	4b5a      	ldr	r3, [pc, #360]	@ (801e2a4 <ip4_input+0x240>)
 801e13c:	695b      	ldr	r3, [r3, #20]
 801e13e:	b2db      	uxtb	r3, r3
 801e140:	2b7f      	cmp	r3, #127	@ 0x7f
 801e142:	d017      	beq.n	801e174 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801e144:	4b58      	ldr	r3, [pc, #352]	@ (801e2a8 <ip4_input+0x244>)
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	617b      	str	r3, [r7, #20]
 801e14a:	e00e      	b.n	801e16a <ip4_input+0x106>
          if (netif == inp) {
 801e14c:	697a      	ldr	r2, [r7, #20]
 801e14e:	683b      	ldr	r3, [r7, #0]
 801e150:	429a      	cmp	r2, r3
 801e152:	d006      	beq.n	801e162 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801e154:	6978      	ldr	r0, [r7, #20]
 801e156:	f7ff ff5b 	bl	801e010 <ip4_input_accept>
 801e15a:	4603      	mov	r3, r0
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	d108      	bne.n	801e172 <ip4_input+0x10e>
 801e160:	e000      	b.n	801e164 <ip4_input+0x100>
            continue;
 801e162:	bf00      	nop
        NETIF_FOREACH(netif) {
 801e164:	697b      	ldr	r3, [r7, #20]
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	617b      	str	r3, [r7, #20]
 801e16a:	697b      	ldr	r3, [r7, #20]
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	d1ed      	bne.n	801e14c <ip4_input+0xe8>
 801e170:	e000      	b.n	801e174 <ip4_input+0x110>
            break;
 801e172:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e174:	4b4b      	ldr	r3, [pc, #300]	@ (801e2a4 <ip4_input+0x240>)
 801e176:	691b      	ldr	r3, [r3, #16]
 801e178:	6839      	ldr	r1, [r7, #0]
 801e17a:	4618      	mov	r0, r3
 801e17c:	f000 f96e 	bl	801e45c <ip4_addr_isbroadcast_u32>
 801e180:	4603      	mov	r3, r0
 801e182:	2b00      	cmp	r3, #0
 801e184:	d105      	bne.n	801e192 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801e186:	4b47      	ldr	r3, [pc, #284]	@ (801e2a4 <ip4_input+0x240>)
 801e188:	691b      	ldr	r3, [r3, #16]
 801e18a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e18e:	2be0      	cmp	r3, #224	@ 0xe0
 801e190:	d104      	bne.n	801e19c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801e192:	6878      	ldr	r0, [r7, #4]
 801e194:	f7f7 f828 	bl	80151e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801e198:	2300      	movs	r3, #0
 801e19a:	e07e      	b.n	801e29a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801e19c:	697b      	ldr	r3, [r7, #20]
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	d104      	bne.n	801e1ac <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801e1a2:	6878      	ldr	r0, [r7, #4]
 801e1a4:	f7f7 f820 	bl	80151e8 <pbuf_free>
    return ERR_OK;
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	e076      	b.n	801e29a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801e1ac:	693b      	ldr	r3, [r7, #16]
 801e1ae:	88db      	ldrh	r3, [r3, #6]
 801e1b0:	b29b      	uxth	r3, r3
 801e1b2:	461a      	mov	r2, r3
 801e1b4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801e1b8:	4013      	ands	r3, r2
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	d00b      	beq.n	801e1d6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801e1be:	6878      	ldr	r0, [r7, #4]
 801e1c0:	f000 fc92 	bl	801eae8 <ip4_reass>
 801e1c4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d101      	bne.n	801e1d0 <ip4_input+0x16c>
      return ERR_OK;
 801e1cc:	2300      	movs	r3, #0
 801e1ce:	e064      	b.n	801e29a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	685b      	ldr	r3, [r3, #4]
 801e1d4:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801e1d6:	4a33      	ldr	r2, [pc, #204]	@ (801e2a4 <ip4_input+0x240>)
 801e1d8:	697b      	ldr	r3, [r7, #20]
 801e1da:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801e1dc:	4a31      	ldr	r2, [pc, #196]	@ (801e2a4 <ip4_input+0x240>)
 801e1de:	683b      	ldr	r3, [r7, #0]
 801e1e0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801e1e2:	4a30      	ldr	r2, [pc, #192]	@ (801e2a4 <ip4_input+0x240>)
 801e1e4:	693b      	ldr	r3, [r7, #16]
 801e1e6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801e1e8:	693b      	ldr	r3, [r7, #16]
 801e1ea:	781b      	ldrb	r3, [r3, #0]
 801e1ec:	f003 030f 	and.w	r3, r3, #15
 801e1f0:	b2db      	uxtb	r3, r3
 801e1f2:	009b      	lsls	r3, r3, #2
 801e1f4:	b2db      	uxtb	r3, r3
 801e1f6:	461a      	mov	r2, r3
 801e1f8:	4b2a      	ldr	r3, [pc, #168]	@ (801e2a4 <ip4_input+0x240>)
 801e1fa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801e1fc:	89fb      	ldrh	r3, [r7, #14]
 801e1fe:	4619      	mov	r1, r3
 801e200:	6878      	ldr	r0, [r7, #4]
 801e202:	f7f6 ff63 	bl	80150cc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801e206:	693b      	ldr	r3, [r7, #16]
 801e208:	7a5b      	ldrb	r3, [r3, #9]
 801e20a:	2b11      	cmp	r3, #17
 801e20c:	d006      	beq.n	801e21c <ip4_input+0x1b8>
 801e20e:	2b11      	cmp	r3, #17
 801e210:	dc13      	bgt.n	801e23a <ip4_input+0x1d6>
 801e212:	2b01      	cmp	r3, #1
 801e214:	d00c      	beq.n	801e230 <ip4_input+0x1cc>
 801e216:	2b06      	cmp	r3, #6
 801e218:	d005      	beq.n	801e226 <ip4_input+0x1c2>
 801e21a:	e00e      	b.n	801e23a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801e21c:	6839      	ldr	r1, [r7, #0]
 801e21e:	6878      	ldr	r0, [r7, #4]
 801e220:	f7fd fe24 	bl	801be6c <udp_input>
        break;
 801e224:	e026      	b.n	801e274 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801e226:	6839      	ldr	r1, [r7, #0]
 801e228:	6878      	ldr	r0, [r7, #4]
 801e22a:	f7f9 f975 	bl	8017518 <tcp_input>
        break;
 801e22e:	e021      	b.n	801e274 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801e230:	6839      	ldr	r1, [r7, #0]
 801e232:	6878      	ldr	r0, [r7, #4]
 801e234:	f7ff fc5c 	bl	801daf0 <icmp_input>
        break;
 801e238:	e01c      	b.n	801e274 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e23a:	4b1a      	ldr	r3, [pc, #104]	@ (801e2a4 <ip4_input+0x240>)
 801e23c:	695b      	ldr	r3, [r3, #20]
 801e23e:	6979      	ldr	r1, [r7, #20]
 801e240:	4618      	mov	r0, r3
 801e242:	f000 f90b 	bl	801e45c <ip4_addr_isbroadcast_u32>
 801e246:	4603      	mov	r3, r0
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d10f      	bne.n	801e26c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e24c:	4b15      	ldr	r3, [pc, #84]	@ (801e2a4 <ip4_input+0x240>)
 801e24e:	695b      	ldr	r3, [r3, #20]
 801e250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e254:	2be0      	cmp	r3, #224	@ 0xe0
 801e256:	d009      	beq.n	801e26c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801e258:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801e25c:	4619      	mov	r1, r3
 801e25e:	6878      	ldr	r0, [r7, #4]
 801e260:	f7f6 ffaf 	bl	80151c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801e264:	2102      	movs	r1, #2
 801e266:	6878      	ldr	r0, [r7, #4]
 801e268:	f7ff fd98 	bl	801dd9c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801e26c:	6878      	ldr	r0, [r7, #4]
 801e26e:	f7f6 ffbb 	bl	80151e8 <pbuf_free>
        break;
 801e272:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801e274:	4b0b      	ldr	r3, [pc, #44]	@ (801e2a4 <ip4_input+0x240>)
 801e276:	2200      	movs	r2, #0
 801e278:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801e27a:	4b0a      	ldr	r3, [pc, #40]	@ (801e2a4 <ip4_input+0x240>)
 801e27c:	2200      	movs	r2, #0
 801e27e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801e280:	4b08      	ldr	r3, [pc, #32]	@ (801e2a4 <ip4_input+0x240>)
 801e282:	2200      	movs	r2, #0
 801e284:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801e286:	4b07      	ldr	r3, [pc, #28]	@ (801e2a4 <ip4_input+0x240>)
 801e288:	2200      	movs	r2, #0
 801e28a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801e28c:	4b05      	ldr	r3, [pc, #20]	@ (801e2a4 <ip4_input+0x240>)
 801e28e:	2200      	movs	r2, #0
 801e290:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e292:	4b04      	ldr	r3, [pc, #16]	@ (801e2a4 <ip4_input+0x240>)
 801e294:	2200      	movs	r2, #0
 801e296:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801e298:	2300      	movs	r3, #0
}
 801e29a:	4618      	mov	r0, r3
 801e29c:	3718      	adds	r7, #24
 801e29e:	46bd      	mov	sp, r7
 801e2a0:	bd80      	pop	{r7, pc}
 801e2a2:	bf00      	nop
 801e2a4:	2001f658 	.word	0x2001f658
 801e2a8:	20022a9c 	.word	0x20022a9c

0801e2ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801e2ac:	b580      	push	{r7, lr}
 801e2ae:	b08a      	sub	sp, #40	@ 0x28
 801e2b0:	af04      	add	r7, sp, #16
 801e2b2:	60f8      	str	r0, [r7, #12]
 801e2b4:	60b9      	str	r1, [r7, #8]
 801e2b6:	607a      	str	r2, [r7, #4]
 801e2b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801e2ba:	68bb      	ldr	r3, [r7, #8]
 801e2bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d009      	beq.n	801e2d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801e2c4:	68bb      	ldr	r3, [r7, #8]
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d003      	beq.n	801e2d2 <ip4_output_if+0x26>
 801e2ca:	68bb      	ldr	r3, [r7, #8]
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d102      	bne.n	801e2d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801e2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2d4:	3304      	adds	r3, #4
 801e2d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e2d8:	78fa      	ldrb	r2, [r7, #3]
 801e2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2dc:	9302      	str	r3, [sp, #8]
 801e2de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801e2e2:	9301      	str	r3, [sp, #4]
 801e2e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e2e8:	9300      	str	r3, [sp, #0]
 801e2ea:	4613      	mov	r3, r2
 801e2ec:	687a      	ldr	r2, [r7, #4]
 801e2ee:	6979      	ldr	r1, [r7, #20]
 801e2f0:	68f8      	ldr	r0, [r7, #12]
 801e2f2:	f000 f805 	bl	801e300 <ip4_output_if_src>
 801e2f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801e2f8:	4618      	mov	r0, r3
 801e2fa:	3718      	adds	r7, #24
 801e2fc:	46bd      	mov	sp, r7
 801e2fe:	bd80      	pop	{r7, pc}

0801e300 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801e300:	b580      	push	{r7, lr}
 801e302:	b088      	sub	sp, #32
 801e304:	af00      	add	r7, sp, #0
 801e306:	60f8      	str	r0, [r7, #12]
 801e308:	60b9      	str	r1, [r7, #8]
 801e30a:	607a      	str	r2, [r7, #4]
 801e30c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e30e:	68fb      	ldr	r3, [r7, #12]
 801e310:	7b9b      	ldrb	r3, [r3, #14]
 801e312:	2b01      	cmp	r3, #1
 801e314:	d006      	beq.n	801e324 <ip4_output_if_src+0x24>
 801e316:	4b4b      	ldr	r3, [pc, #300]	@ (801e444 <ip4_output_if_src+0x144>)
 801e318:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801e31c:	494a      	ldr	r1, [pc, #296]	@ (801e448 <ip4_output_if_src+0x148>)
 801e31e:	484b      	ldr	r0, [pc, #300]	@ (801e44c <ip4_output_if_src+0x14c>)
 801e320:	f002 faec 	bl	80208fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	2b00      	cmp	r3, #0
 801e328:	d060      	beq.n	801e3ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801e32a:	2314      	movs	r3, #20
 801e32c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801e32e:	2114      	movs	r1, #20
 801e330:	68f8      	ldr	r0, [r7, #12]
 801e332:	f7f6 febb 	bl	80150ac <pbuf_add_header>
 801e336:	4603      	mov	r3, r0
 801e338:	2b00      	cmp	r3, #0
 801e33a:	d002      	beq.n	801e342 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e33c:	f06f 0301 	mvn.w	r3, #1
 801e340:	e07c      	b.n	801e43c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	685b      	ldr	r3, [r3, #4]
 801e346:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	895b      	ldrh	r3, [r3, #10]
 801e34c:	2b13      	cmp	r3, #19
 801e34e:	d806      	bhi.n	801e35e <ip4_output_if_src+0x5e>
 801e350:	4b3c      	ldr	r3, [pc, #240]	@ (801e444 <ip4_output_if_src+0x144>)
 801e352:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801e356:	493e      	ldr	r1, [pc, #248]	@ (801e450 <ip4_output_if_src+0x150>)
 801e358:	483c      	ldr	r0, [pc, #240]	@ (801e44c <ip4_output_if_src+0x14c>)
 801e35a:	f002 facf 	bl	80208fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e35e:	69fb      	ldr	r3, [r7, #28]
 801e360:	78fa      	ldrb	r2, [r7, #3]
 801e362:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801e364:	69fb      	ldr	r3, [r7, #28]
 801e366:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801e36a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	681a      	ldr	r2, [r3, #0]
 801e370:	69fb      	ldr	r3, [r7, #28]
 801e372:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e374:	8b7b      	ldrh	r3, [r7, #26]
 801e376:	089b      	lsrs	r3, r3, #2
 801e378:	b29b      	uxth	r3, r3
 801e37a:	b2db      	uxtb	r3, r3
 801e37c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e380:	b2da      	uxtb	r2, r3
 801e382:	69fb      	ldr	r3, [r7, #28]
 801e384:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801e386:	69fb      	ldr	r3, [r7, #28]
 801e388:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801e38c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	891b      	ldrh	r3, [r3, #8]
 801e392:	4618      	mov	r0, r3
 801e394:	f7f5 f9ce 	bl	8013734 <lwip_htons>
 801e398:	4603      	mov	r3, r0
 801e39a:	461a      	mov	r2, r3
 801e39c:	69fb      	ldr	r3, [r7, #28]
 801e39e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801e3a0:	69fb      	ldr	r3, [r7, #28]
 801e3a2:	2200      	movs	r2, #0
 801e3a4:	719a      	strb	r2, [r3, #6]
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e3aa:	4b2a      	ldr	r3, [pc, #168]	@ (801e454 <ip4_output_if_src+0x154>)
 801e3ac:	881b      	ldrh	r3, [r3, #0]
 801e3ae:	4618      	mov	r0, r3
 801e3b0:	f7f5 f9c0 	bl	8013734 <lwip_htons>
 801e3b4:	4603      	mov	r3, r0
 801e3b6:	461a      	mov	r2, r3
 801e3b8:	69fb      	ldr	r3, [r7, #28]
 801e3ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801e3bc:	4b25      	ldr	r3, [pc, #148]	@ (801e454 <ip4_output_if_src+0x154>)
 801e3be:	881b      	ldrh	r3, [r3, #0]
 801e3c0:	3301      	adds	r3, #1
 801e3c2:	b29a      	uxth	r2, r3
 801e3c4:	4b23      	ldr	r3, [pc, #140]	@ (801e454 <ip4_output_if_src+0x154>)
 801e3c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801e3c8:	68bb      	ldr	r3, [r7, #8]
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d104      	bne.n	801e3d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e3ce:	4b22      	ldr	r3, [pc, #136]	@ (801e458 <ip4_output_if_src+0x158>)
 801e3d0:	681a      	ldr	r2, [r3, #0]
 801e3d2:	69fb      	ldr	r3, [r7, #28]
 801e3d4:	60da      	str	r2, [r3, #12]
 801e3d6:	e003      	b.n	801e3e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801e3d8:	68bb      	ldr	r3, [r7, #8]
 801e3da:	681a      	ldr	r2, [r3, #0]
 801e3dc:	69fb      	ldr	r3, [r7, #28]
 801e3de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801e3e0:	69fb      	ldr	r3, [r7, #28]
 801e3e2:	2200      	movs	r2, #0
 801e3e4:	729a      	strb	r2, [r3, #10]
 801e3e6:	2200      	movs	r2, #0
 801e3e8:	72da      	strb	r2, [r3, #11]
 801e3ea:	e00f      	b.n	801e40c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	895b      	ldrh	r3, [r3, #10]
 801e3f0:	2b13      	cmp	r3, #19
 801e3f2:	d802      	bhi.n	801e3fa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e3f4:	f06f 0301 	mvn.w	r3, #1
 801e3f8:	e020      	b.n	801e43c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	685b      	ldr	r3, [r3, #4]
 801e3fe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e400:	69fb      	ldr	r3, [r7, #28]
 801e402:	691b      	ldr	r3, [r3, #16]
 801e404:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801e406:	f107 0314 	add.w	r3, r7, #20
 801e40a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e40e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e410:	2b00      	cmp	r3, #0
 801e412:	d00c      	beq.n	801e42e <ip4_output_if_src+0x12e>
 801e414:	68fb      	ldr	r3, [r7, #12]
 801e416:	891a      	ldrh	r2, [r3, #8]
 801e418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e41a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e41c:	429a      	cmp	r2, r3
 801e41e:	d906      	bls.n	801e42e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801e420:	687a      	ldr	r2, [r7, #4]
 801e422:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e424:	68f8      	ldr	r0, [r7, #12]
 801e426:	f000 fd53 	bl	801eed0 <ip4_frag>
 801e42a:	4603      	mov	r3, r0
 801e42c:	e006      	b.n	801e43c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e430:	695b      	ldr	r3, [r3, #20]
 801e432:	687a      	ldr	r2, [r7, #4]
 801e434:	68f9      	ldr	r1, [r7, #12]
 801e436:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e438:	4798      	blx	r3
 801e43a:	4603      	mov	r3, r0
}
 801e43c:	4618      	mov	r0, r3
 801e43e:	3720      	adds	r7, #32
 801e440:	46bd      	mov	sp, r7
 801e442:	bd80      	pop	{r7, pc}
 801e444:	08025a14 	.word	0x08025a14
 801e448:	08025a48 	.word	0x08025a48
 801e44c:	08025a54 	.word	0x08025a54
 801e450:	08025a7c 	.word	0x08025a7c
 801e454:	20022bfe 	.word	0x20022bfe
 801e458:	08026420 	.word	0x08026420

0801e45c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801e45c:	b480      	push	{r7}
 801e45e:	b085      	sub	sp, #20
 801e460:	af00      	add	r7, sp, #0
 801e462:	6078      	str	r0, [r7, #4]
 801e464:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e470:	d002      	beq.n	801e478 <ip4_addr_isbroadcast_u32+0x1c>
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	2b00      	cmp	r3, #0
 801e476:	d101      	bne.n	801e47c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801e478:	2301      	movs	r3, #1
 801e47a:	e02a      	b.n	801e4d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e47c:	683b      	ldr	r3, [r7, #0]
 801e47e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e482:	f003 0302 	and.w	r3, r3, #2
 801e486:	2b00      	cmp	r3, #0
 801e488:	d101      	bne.n	801e48e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801e48a:	2300      	movs	r3, #0
 801e48c:	e021      	b.n	801e4d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e48e:	683b      	ldr	r3, [r7, #0]
 801e490:	3304      	adds	r3, #4
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	687a      	ldr	r2, [r7, #4]
 801e496:	429a      	cmp	r2, r3
 801e498:	d101      	bne.n	801e49e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801e49a:	2300      	movs	r3, #0
 801e49c:	e019      	b.n	801e4d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e49e:	68fa      	ldr	r2, [r7, #12]
 801e4a0:	683b      	ldr	r3, [r7, #0]
 801e4a2:	3304      	adds	r3, #4
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	405a      	eors	r2, r3
 801e4a8:	683b      	ldr	r3, [r7, #0]
 801e4aa:	3308      	adds	r3, #8
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	4013      	ands	r3, r2
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d10d      	bne.n	801e4d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e4b4:	683b      	ldr	r3, [r7, #0]
 801e4b6:	3308      	adds	r3, #8
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	43da      	mvns	r2, r3
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801e4c0:	683b      	ldr	r3, [r7, #0]
 801e4c2:	3308      	adds	r3, #8
 801e4c4:	681b      	ldr	r3, [r3, #0]
 801e4c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e4c8:	429a      	cmp	r2, r3
 801e4ca:	d101      	bne.n	801e4d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801e4cc:	2301      	movs	r3, #1
 801e4ce:	e000      	b.n	801e4d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801e4d0:	2300      	movs	r3, #0
  }
}
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	3714      	adds	r7, #20
 801e4d6:	46bd      	mov	sp, r7
 801e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4dc:	4770      	bx	lr
	...

0801e4e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801e4e0:	b580      	push	{r7, lr}
 801e4e2:	b084      	sub	sp, #16
 801e4e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801e4e6:	2300      	movs	r3, #0
 801e4e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801e4ea:	4b12      	ldr	r3, [pc, #72]	@ (801e534 <ip_reass_tmr+0x54>)
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801e4f0:	e018      	b.n	801e524 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801e4f2:	68fb      	ldr	r3, [r7, #12]
 801e4f4:	7fdb      	ldrb	r3, [r3, #31]
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d00b      	beq.n	801e512 <ip_reass_tmr+0x32>
      r->timer--;
 801e4fa:	68fb      	ldr	r3, [r7, #12]
 801e4fc:	7fdb      	ldrb	r3, [r3, #31]
 801e4fe:	3b01      	subs	r3, #1
 801e500:	b2da      	uxtb	r2, r3
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801e506:	68fb      	ldr	r3, [r7, #12]
 801e508:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801e50a:	68fb      	ldr	r3, [r7, #12]
 801e50c:	681b      	ldr	r3, [r3, #0]
 801e50e:	60fb      	str	r3, [r7, #12]
 801e510:	e008      	b.n	801e524 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801e512:	68fb      	ldr	r3, [r7, #12]
 801e514:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801e516:	68fb      	ldr	r3, [r7, #12]
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801e51c:	68b9      	ldr	r1, [r7, #8]
 801e51e:	6878      	ldr	r0, [r7, #4]
 801e520:	f000 f80a 	bl	801e538 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801e524:	68fb      	ldr	r3, [r7, #12]
 801e526:	2b00      	cmp	r3, #0
 801e528:	d1e3      	bne.n	801e4f2 <ip_reass_tmr+0x12>
    }
  }
}
 801e52a:	bf00      	nop
 801e52c:	bf00      	nop
 801e52e:	3710      	adds	r7, #16
 801e530:	46bd      	mov	sp, r7
 801e532:	bd80      	pop	{r7, pc}
 801e534:	20022c00 	.word	0x20022c00

0801e538 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e538:	b580      	push	{r7, lr}
 801e53a:	b088      	sub	sp, #32
 801e53c:	af00      	add	r7, sp, #0
 801e53e:	6078      	str	r0, [r7, #4]
 801e540:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801e542:	2300      	movs	r3, #0
 801e544:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e546:	683a      	ldr	r2, [r7, #0]
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	429a      	cmp	r2, r3
 801e54c:	d105      	bne.n	801e55a <ip_reass_free_complete_datagram+0x22>
 801e54e:	4b45      	ldr	r3, [pc, #276]	@ (801e664 <ip_reass_free_complete_datagram+0x12c>)
 801e550:	22ab      	movs	r2, #171	@ 0xab
 801e552:	4945      	ldr	r1, [pc, #276]	@ (801e668 <ip_reass_free_complete_datagram+0x130>)
 801e554:	4845      	ldr	r0, [pc, #276]	@ (801e66c <ip_reass_free_complete_datagram+0x134>)
 801e556:	f002 f9d1 	bl	80208fc <iprintf>
  if (prev != NULL) {
 801e55a:	683b      	ldr	r3, [r7, #0]
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	d00a      	beq.n	801e576 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801e560:	683b      	ldr	r3, [r7, #0]
 801e562:	681b      	ldr	r3, [r3, #0]
 801e564:	687a      	ldr	r2, [r7, #4]
 801e566:	429a      	cmp	r2, r3
 801e568:	d005      	beq.n	801e576 <ip_reass_free_complete_datagram+0x3e>
 801e56a:	4b3e      	ldr	r3, [pc, #248]	@ (801e664 <ip_reass_free_complete_datagram+0x12c>)
 801e56c:	22ad      	movs	r2, #173	@ 0xad
 801e56e:	4940      	ldr	r1, [pc, #256]	@ (801e670 <ip_reass_free_complete_datagram+0x138>)
 801e570:	483e      	ldr	r0, [pc, #248]	@ (801e66c <ip_reass_free_complete_datagram+0x134>)
 801e572:	f002 f9c3 	bl	80208fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	685b      	ldr	r3, [r3, #4]
 801e57a:	685b      	ldr	r3, [r3, #4]
 801e57c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801e57e:	697b      	ldr	r3, [r7, #20]
 801e580:	889b      	ldrh	r3, [r3, #4]
 801e582:	b29b      	uxth	r3, r3
 801e584:	2b00      	cmp	r3, #0
 801e586:	d12a      	bne.n	801e5de <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	685b      	ldr	r3, [r3, #4]
 801e58c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801e58e:	697b      	ldr	r3, [r7, #20]
 801e590:	681a      	ldr	r2, [r3, #0]
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e596:	69bb      	ldr	r3, [r7, #24]
 801e598:	6858      	ldr	r0, [r3, #4]
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	3308      	adds	r3, #8
 801e59e:	2214      	movs	r2, #20
 801e5a0:	4619      	mov	r1, r3
 801e5a2:	f002 fb80 	bl	8020ca6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e5a6:	2101      	movs	r1, #1
 801e5a8:	69b8      	ldr	r0, [r7, #24]
 801e5aa:	f7ff fc07 	bl	801ddbc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801e5ae:	69b8      	ldr	r0, [r7, #24]
 801e5b0:	f7f6 fec0 	bl	8015334 <pbuf_clen>
 801e5b4:	4603      	mov	r3, r0
 801e5b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e5b8:	8bfa      	ldrh	r2, [r7, #30]
 801e5ba:	8a7b      	ldrh	r3, [r7, #18]
 801e5bc:	4413      	add	r3, r2
 801e5be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e5c2:	db05      	blt.n	801e5d0 <ip_reass_free_complete_datagram+0x98>
 801e5c4:	4b27      	ldr	r3, [pc, #156]	@ (801e664 <ip_reass_free_complete_datagram+0x12c>)
 801e5c6:	22bc      	movs	r2, #188	@ 0xbc
 801e5c8:	492a      	ldr	r1, [pc, #168]	@ (801e674 <ip_reass_free_complete_datagram+0x13c>)
 801e5ca:	4828      	ldr	r0, [pc, #160]	@ (801e66c <ip_reass_free_complete_datagram+0x134>)
 801e5cc:	f002 f996 	bl	80208fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e5d0:	8bfa      	ldrh	r2, [r7, #30]
 801e5d2:	8a7b      	ldrh	r3, [r7, #18]
 801e5d4:	4413      	add	r3, r2
 801e5d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801e5d8:	69b8      	ldr	r0, [r7, #24]
 801e5da:	f7f6 fe05 	bl	80151e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	685b      	ldr	r3, [r3, #4]
 801e5e2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801e5e4:	e01f      	b.n	801e626 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801e5e6:	69bb      	ldr	r3, [r7, #24]
 801e5e8:	685b      	ldr	r3, [r3, #4]
 801e5ea:	617b      	str	r3, [r7, #20]
    pcur = p;
 801e5ec:	69bb      	ldr	r3, [r7, #24]
 801e5ee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801e5f0:	697b      	ldr	r3, [r7, #20]
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801e5f6:	68f8      	ldr	r0, [r7, #12]
 801e5f8:	f7f6 fe9c 	bl	8015334 <pbuf_clen>
 801e5fc:	4603      	mov	r3, r0
 801e5fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e600:	8bfa      	ldrh	r2, [r7, #30]
 801e602:	8a7b      	ldrh	r3, [r7, #18]
 801e604:	4413      	add	r3, r2
 801e606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e60a:	db05      	blt.n	801e618 <ip_reass_free_complete_datagram+0xe0>
 801e60c:	4b15      	ldr	r3, [pc, #84]	@ (801e664 <ip_reass_free_complete_datagram+0x12c>)
 801e60e:	22cc      	movs	r2, #204	@ 0xcc
 801e610:	4918      	ldr	r1, [pc, #96]	@ (801e674 <ip_reass_free_complete_datagram+0x13c>)
 801e612:	4816      	ldr	r0, [pc, #88]	@ (801e66c <ip_reass_free_complete_datagram+0x134>)
 801e614:	f002 f972 	bl	80208fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e618:	8bfa      	ldrh	r2, [r7, #30]
 801e61a:	8a7b      	ldrh	r3, [r7, #18]
 801e61c:	4413      	add	r3, r2
 801e61e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801e620:	68f8      	ldr	r0, [r7, #12]
 801e622:	f7f6 fde1 	bl	80151e8 <pbuf_free>
  while (p != NULL) {
 801e626:	69bb      	ldr	r3, [r7, #24]
 801e628:	2b00      	cmp	r3, #0
 801e62a:	d1dc      	bne.n	801e5e6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801e62c:	6839      	ldr	r1, [r7, #0]
 801e62e:	6878      	ldr	r0, [r7, #4]
 801e630:	f000 f8c2 	bl	801e7b8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e634:	4b10      	ldr	r3, [pc, #64]	@ (801e678 <ip_reass_free_complete_datagram+0x140>)
 801e636:	881b      	ldrh	r3, [r3, #0]
 801e638:	8bfa      	ldrh	r2, [r7, #30]
 801e63a:	429a      	cmp	r2, r3
 801e63c:	d905      	bls.n	801e64a <ip_reass_free_complete_datagram+0x112>
 801e63e:	4b09      	ldr	r3, [pc, #36]	@ (801e664 <ip_reass_free_complete_datagram+0x12c>)
 801e640:	22d2      	movs	r2, #210	@ 0xd2
 801e642:	490e      	ldr	r1, [pc, #56]	@ (801e67c <ip_reass_free_complete_datagram+0x144>)
 801e644:	4809      	ldr	r0, [pc, #36]	@ (801e66c <ip_reass_free_complete_datagram+0x134>)
 801e646:	f002 f959 	bl	80208fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e64a:	4b0b      	ldr	r3, [pc, #44]	@ (801e678 <ip_reass_free_complete_datagram+0x140>)
 801e64c:	881a      	ldrh	r2, [r3, #0]
 801e64e:	8bfb      	ldrh	r3, [r7, #30]
 801e650:	1ad3      	subs	r3, r2, r3
 801e652:	b29a      	uxth	r2, r3
 801e654:	4b08      	ldr	r3, [pc, #32]	@ (801e678 <ip_reass_free_complete_datagram+0x140>)
 801e656:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801e658:	8bfb      	ldrh	r3, [r7, #30]
}
 801e65a:	4618      	mov	r0, r3
 801e65c:	3720      	adds	r7, #32
 801e65e:	46bd      	mov	sp, r7
 801e660:	bd80      	pop	{r7, pc}
 801e662:	bf00      	nop
 801e664:	08025aac 	.word	0x08025aac
 801e668:	08025ae8 	.word	0x08025ae8
 801e66c:	08025af4 	.word	0x08025af4
 801e670:	08025b1c 	.word	0x08025b1c
 801e674:	08025b30 	.word	0x08025b30
 801e678:	20022c04 	.word	0x20022c04
 801e67c:	08025b50 	.word	0x08025b50

0801e680 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801e680:	b580      	push	{r7, lr}
 801e682:	b08a      	sub	sp, #40	@ 0x28
 801e684:	af00      	add	r7, sp, #0
 801e686:	6078      	str	r0, [r7, #4]
 801e688:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801e68a:	2300      	movs	r3, #0
 801e68c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801e68e:	2300      	movs	r3, #0
 801e690:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801e692:	2300      	movs	r3, #0
 801e694:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801e696:	2300      	movs	r3, #0
 801e698:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801e69a:	2300      	movs	r3, #0
 801e69c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801e69e:	4b28      	ldr	r3, [pc, #160]	@ (801e740 <ip_reass_remove_oldest_datagram+0xc0>)
 801e6a0:	681b      	ldr	r3, [r3, #0]
 801e6a2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801e6a4:	e030      	b.n	801e708 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6a8:	695a      	ldr	r2, [r3, #20]
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	68db      	ldr	r3, [r3, #12]
 801e6ae:	429a      	cmp	r2, r3
 801e6b0:	d10c      	bne.n	801e6cc <ip_reass_remove_oldest_datagram+0x4c>
 801e6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6b4:	699a      	ldr	r2, [r3, #24]
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	691b      	ldr	r3, [r3, #16]
 801e6ba:	429a      	cmp	r2, r3
 801e6bc:	d106      	bne.n	801e6cc <ip_reass_remove_oldest_datagram+0x4c>
 801e6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6c0:	899a      	ldrh	r2, [r3, #12]
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	889b      	ldrh	r3, [r3, #4]
 801e6c6:	b29b      	uxth	r3, r3
 801e6c8:	429a      	cmp	r2, r3
 801e6ca:	d014      	beq.n	801e6f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e6cc:	693b      	ldr	r3, [r7, #16]
 801e6ce:	3301      	adds	r3, #1
 801e6d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e6d2:	6a3b      	ldr	r3, [r7, #32]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d104      	bne.n	801e6e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e6dc:	69fb      	ldr	r3, [r7, #28]
 801e6de:	61bb      	str	r3, [r7, #24]
 801e6e0:	e009      	b.n	801e6f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6e4:	7fda      	ldrb	r2, [r3, #31]
 801e6e6:	6a3b      	ldr	r3, [r7, #32]
 801e6e8:	7fdb      	ldrb	r3, [r3, #31]
 801e6ea:	429a      	cmp	r2, r3
 801e6ec:	d803      	bhi.n	801e6f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e6f2:	69fb      	ldr	r3, [r7, #28]
 801e6f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	d001      	beq.n	801e702 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e700:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801e708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d1cb      	bne.n	801e6a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e70e:	6a3b      	ldr	r3, [r7, #32]
 801e710:	2b00      	cmp	r3, #0
 801e712:	d008      	beq.n	801e726 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e714:	69b9      	ldr	r1, [r7, #24]
 801e716:	6a38      	ldr	r0, [r7, #32]
 801e718:	f7ff ff0e 	bl	801e538 <ip_reass_free_complete_datagram>
 801e71c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e71e:	697a      	ldr	r2, [r7, #20]
 801e720:	68fb      	ldr	r3, [r7, #12]
 801e722:	4413      	add	r3, r2
 801e724:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e726:	697a      	ldr	r2, [r7, #20]
 801e728:	683b      	ldr	r3, [r7, #0]
 801e72a:	429a      	cmp	r2, r3
 801e72c:	da02      	bge.n	801e734 <ip_reass_remove_oldest_datagram+0xb4>
 801e72e:	693b      	ldr	r3, [r7, #16]
 801e730:	2b01      	cmp	r3, #1
 801e732:	dcac      	bgt.n	801e68e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e734:	697b      	ldr	r3, [r7, #20]
}
 801e736:	4618      	mov	r0, r3
 801e738:	3728      	adds	r7, #40	@ 0x28
 801e73a:	46bd      	mov	sp, r7
 801e73c:	bd80      	pop	{r7, pc}
 801e73e:	bf00      	nop
 801e740:	20022c00 	.word	0x20022c00

0801e744 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e744:	b580      	push	{r7, lr}
 801e746:	b084      	sub	sp, #16
 801e748:	af00      	add	r7, sp, #0
 801e74a:	6078      	str	r0, [r7, #4]
 801e74c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e74e:	2004      	movs	r0, #4
 801e750:	f7f5 fcee 	bl	8014130 <memp_malloc>
 801e754:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e756:	68fb      	ldr	r3, [r7, #12]
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d110      	bne.n	801e77e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e75c:	6839      	ldr	r1, [r7, #0]
 801e75e:	6878      	ldr	r0, [r7, #4]
 801e760:	f7ff ff8e 	bl	801e680 <ip_reass_remove_oldest_datagram>
 801e764:	4602      	mov	r2, r0
 801e766:	683b      	ldr	r3, [r7, #0]
 801e768:	4293      	cmp	r3, r2
 801e76a:	dc03      	bgt.n	801e774 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e76c:	2004      	movs	r0, #4
 801e76e:	f7f5 fcdf 	bl	8014130 <memp_malloc>
 801e772:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e774:	68fb      	ldr	r3, [r7, #12]
 801e776:	2b00      	cmp	r3, #0
 801e778:	d101      	bne.n	801e77e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e77a:	2300      	movs	r3, #0
 801e77c:	e016      	b.n	801e7ac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e77e:	2220      	movs	r2, #32
 801e780:	2100      	movs	r1, #0
 801e782:	68f8      	ldr	r0, [r7, #12]
 801e784:	f002 fa1a 	bl	8020bbc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e788:	68fb      	ldr	r3, [r7, #12]
 801e78a:	220f      	movs	r2, #15
 801e78c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e78e:	4b09      	ldr	r3, [pc, #36]	@ (801e7b4 <ip_reass_enqueue_new_datagram+0x70>)
 801e790:	681a      	ldr	r2, [r3, #0]
 801e792:	68fb      	ldr	r3, [r7, #12]
 801e794:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e796:	4a07      	ldr	r2, [pc, #28]	@ (801e7b4 <ip_reass_enqueue_new_datagram+0x70>)
 801e798:	68fb      	ldr	r3, [r7, #12]
 801e79a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e79c:	68fb      	ldr	r3, [r7, #12]
 801e79e:	3308      	adds	r3, #8
 801e7a0:	2214      	movs	r2, #20
 801e7a2:	6879      	ldr	r1, [r7, #4]
 801e7a4:	4618      	mov	r0, r3
 801e7a6:	f002 fa7e 	bl	8020ca6 <memcpy>
  return ipr;
 801e7aa:	68fb      	ldr	r3, [r7, #12]
}
 801e7ac:	4618      	mov	r0, r3
 801e7ae:	3710      	adds	r7, #16
 801e7b0:	46bd      	mov	sp, r7
 801e7b2:	bd80      	pop	{r7, pc}
 801e7b4:	20022c00 	.word	0x20022c00

0801e7b8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e7b8:	b580      	push	{r7, lr}
 801e7ba:	b082      	sub	sp, #8
 801e7bc:	af00      	add	r7, sp, #0
 801e7be:	6078      	str	r0, [r7, #4]
 801e7c0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e7c2:	4b10      	ldr	r3, [pc, #64]	@ (801e804 <ip_reass_dequeue_datagram+0x4c>)
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	687a      	ldr	r2, [r7, #4]
 801e7c8:	429a      	cmp	r2, r3
 801e7ca:	d104      	bne.n	801e7d6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	681b      	ldr	r3, [r3, #0]
 801e7d0:	4a0c      	ldr	r2, [pc, #48]	@ (801e804 <ip_reass_dequeue_datagram+0x4c>)
 801e7d2:	6013      	str	r3, [r2, #0]
 801e7d4:	e00d      	b.n	801e7f2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e7d6:	683b      	ldr	r3, [r7, #0]
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d106      	bne.n	801e7ea <ip_reass_dequeue_datagram+0x32>
 801e7dc:	4b0a      	ldr	r3, [pc, #40]	@ (801e808 <ip_reass_dequeue_datagram+0x50>)
 801e7de:	f240 1245 	movw	r2, #325	@ 0x145
 801e7e2:	490a      	ldr	r1, [pc, #40]	@ (801e80c <ip_reass_dequeue_datagram+0x54>)
 801e7e4:	480a      	ldr	r0, [pc, #40]	@ (801e810 <ip_reass_dequeue_datagram+0x58>)
 801e7e6:	f002 f889 	bl	80208fc <iprintf>
    prev->next = ipr->next;
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	681a      	ldr	r2, [r3, #0]
 801e7ee:	683b      	ldr	r3, [r7, #0]
 801e7f0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e7f2:	6879      	ldr	r1, [r7, #4]
 801e7f4:	2004      	movs	r0, #4
 801e7f6:	f7f5 fd11 	bl	801421c <memp_free>
}
 801e7fa:	bf00      	nop
 801e7fc:	3708      	adds	r7, #8
 801e7fe:	46bd      	mov	sp, r7
 801e800:	bd80      	pop	{r7, pc}
 801e802:	bf00      	nop
 801e804:	20022c00 	.word	0x20022c00
 801e808:	08025aac 	.word	0x08025aac
 801e80c:	08025b74 	.word	0x08025b74
 801e810:	08025af4 	.word	0x08025af4

0801e814 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e814:	b580      	push	{r7, lr}
 801e816:	b08c      	sub	sp, #48	@ 0x30
 801e818:	af00      	add	r7, sp, #0
 801e81a:	60f8      	str	r0, [r7, #12]
 801e81c:	60b9      	str	r1, [r7, #8]
 801e81e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e820:	2300      	movs	r3, #0
 801e822:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e824:	2301      	movs	r3, #1
 801e826:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e828:	68bb      	ldr	r3, [r7, #8]
 801e82a:	685b      	ldr	r3, [r3, #4]
 801e82c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e82e:	69fb      	ldr	r3, [r7, #28]
 801e830:	885b      	ldrh	r3, [r3, #2]
 801e832:	b29b      	uxth	r3, r3
 801e834:	4618      	mov	r0, r3
 801e836:	f7f4 ff7d 	bl	8013734 <lwip_htons>
 801e83a:	4603      	mov	r3, r0
 801e83c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e83e:	69fb      	ldr	r3, [r7, #28]
 801e840:	781b      	ldrb	r3, [r3, #0]
 801e842:	f003 030f 	and.w	r3, r3, #15
 801e846:	b2db      	uxtb	r3, r3
 801e848:	009b      	lsls	r3, r3, #2
 801e84a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e84c:	7e7b      	ldrb	r3, [r7, #25]
 801e84e:	b29b      	uxth	r3, r3
 801e850:	8b7a      	ldrh	r2, [r7, #26]
 801e852:	429a      	cmp	r2, r3
 801e854:	d202      	bcs.n	801e85c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e85a:	e135      	b.n	801eac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e85c:	7e7b      	ldrb	r3, [r7, #25]
 801e85e:	b29b      	uxth	r3, r3
 801e860:	8b7a      	ldrh	r2, [r7, #26]
 801e862:	1ad3      	subs	r3, r2, r3
 801e864:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e866:	69fb      	ldr	r3, [r7, #28]
 801e868:	88db      	ldrh	r3, [r3, #6]
 801e86a:	b29b      	uxth	r3, r3
 801e86c:	4618      	mov	r0, r3
 801e86e:	f7f4 ff61 	bl	8013734 <lwip_htons>
 801e872:	4603      	mov	r3, r0
 801e874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e878:	b29b      	uxth	r3, r3
 801e87a:	00db      	lsls	r3, r3, #3
 801e87c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e87e:	68bb      	ldr	r3, [r7, #8]
 801e880:	685b      	ldr	r3, [r3, #4]
 801e882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801e884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e886:	2200      	movs	r2, #0
 801e888:	701a      	strb	r2, [r3, #0]
 801e88a:	2200      	movs	r2, #0
 801e88c:	705a      	strb	r2, [r3, #1]
 801e88e:	2200      	movs	r2, #0
 801e890:	709a      	strb	r2, [r3, #2]
 801e892:	2200      	movs	r2, #0
 801e894:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e898:	8afa      	ldrh	r2, [r7, #22]
 801e89a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e89c:	8afa      	ldrh	r2, [r7, #22]
 801e89e:	8b7b      	ldrh	r3, [r7, #26]
 801e8a0:	4413      	add	r3, r2
 801e8a2:	b29a      	uxth	r2, r3
 801e8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8a6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8aa:	88db      	ldrh	r3, [r3, #6]
 801e8ac:	b29b      	uxth	r3, r3
 801e8ae:	8afa      	ldrh	r2, [r7, #22]
 801e8b0:	429a      	cmp	r2, r3
 801e8b2:	d902      	bls.n	801e8ba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e8b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e8b8:	e106      	b.n	801eac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e8ba:	68fb      	ldr	r3, [r7, #12]
 801e8bc:	685b      	ldr	r3, [r3, #4]
 801e8be:	627b      	str	r3, [r7, #36]	@ 0x24
 801e8c0:	e068      	b.n	801e994 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8c4:	685b      	ldr	r3, [r3, #4]
 801e8c6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8ca:	889b      	ldrh	r3, [r3, #4]
 801e8cc:	b29a      	uxth	r2, r3
 801e8ce:	693b      	ldr	r3, [r7, #16]
 801e8d0:	889b      	ldrh	r3, [r3, #4]
 801e8d2:	b29b      	uxth	r3, r3
 801e8d4:	429a      	cmp	r2, r3
 801e8d6:	d235      	bcs.n	801e944 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e8dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d020      	beq.n	801e926 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8e6:	889b      	ldrh	r3, [r3, #4]
 801e8e8:	b29a      	uxth	r2, r3
 801e8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e8ec:	88db      	ldrh	r3, [r3, #6]
 801e8ee:	b29b      	uxth	r3, r3
 801e8f0:	429a      	cmp	r2, r3
 801e8f2:	d307      	bcc.n	801e904 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8f6:	88db      	ldrh	r3, [r3, #6]
 801e8f8:	b29a      	uxth	r2, r3
 801e8fa:	693b      	ldr	r3, [r7, #16]
 801e8fc:	889b      	ldrh	r3, [r3, #4]
 801e8fe:	b29b      	uxth	r3, r3
 801e900:	429a      	cmp	r2, r3
 801e902:	d902      	bls.n	801e90a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e904:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e908:	e0de      	b.n	801eac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e90c:	68ba      	ldr	r2, [r7, #8]
 801e90e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e912:	88db      	ldrh	r3, [r3, #6]
 801e914:	b29a      	uxth	r2, r3
 801e916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e918:	889b      	ldrh	r3, [r3, #4]
 801e91a:	b29b      	uxth	r3, r3
 801e91c:	429a      	cmp	r2, r3
 801e91e:	d03d      	beq.n	801e99c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e920:	2300      	movs	r3, #0
 801e922:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e924:	e03a      	b.n	801e99c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e928:	88db      	ldrh	r3, [r3, #6]
 801e92a:	b29a      	uxth	r2, r3
 801e92c:	693b      	ldr	r3, [r7, #16]
 801e92e:	889b      	ldrh	r3, [r3, #4]
 801e930:	b29b      	uxth	r3, r3
 801e932:	429a      	cmp	r2, r3
 801e934:	d902      	bls.n	801e93c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e936:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e93a:	e0c5      	b.n	801eac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e93c:	68fb      	ldr	r3, [r7, #12]
 801e93e:	68ba      	ldr	r2, [r7, #8]
 801e940:	605a      	str	r2, [r3, #4]
      break;
 801e942:	e02b      	b.n	801e99c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e946:	889b      	ldrh	r3, [r3, #4]
 801e948:	b29a      	uxth	r2, r3
 801e94a:	693b      	ldr	r3, [r7, #16]
 801e94c:	889b      	ldrh	r3, [r3, #4]
 801e94e:	b29b      	uxth	r3, r3
 801e950:	429a      	cmp	r2, r3
 801e952:	d102      	bne.n	801e95a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e954:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e958:	e0b6      	b.n	801eac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e95a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e95c:	889b      	ldrh	r3, [r3, #4]
 801e95e:	b29a      	uxth	r2, r3
 801e960:	693b      	ldr	r3, [r7, #16]
 801e962:	88db      	ldrh	r3, [r3, #6]
 801e964:	b29b      	uxth	r3, r3
 801e966:	429a      	cmp	r2, r3
 801e968:	d202      	bcs.n	801e970 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e96a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e96e:	e0ab      	b.n	801eac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e972:	2b00      	cmp	r3, #0
 801e974:	d009      	beq.n	801e98a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e978:	88db      	ldrh	r3, [r3, #6]
 801e97a:	b29a      	uxth	r2, r3
 801e97c:	693b      	ldr	r3, [r7, #16]
 801e97e:	889b      	ldrh	r3, [r3, #4]
 801e980:	b29b      	uxth	r3, r3
 801e982:	429a      	cmp	r2, r3
 801e984:	d001      	beq.n	801e98a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e986:	2300      	movs	r3, #0
 801e988:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e98a:	693b      	ldr	r3, [r7, #16]
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801e990:	693b      	ldr	r3, [r7, #16]
 801e992:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801e994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e996:	2b00      	cmp	r3, #0
 801e998:	d193      	bne.n	801e8c2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e99a:	e000      	b.n	801e99e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e99c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d12d      	bne.n	801ea00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d01c      	beq.n	801e9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9ac:	88db      	ldrh	r3, [r3, #6]
 801e9ae:	b29a      	uxth	r2, r3
 801e9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9b2:	889b      	ldrh	r3, [r3, #4]
 801e9b4:	b29b      	uxth	r3, r3
 801e9b6:	429a      	cmp	r2, r3
 801e9b8:	d906      	bls.n	801e9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e9ba:	4b45      	ldr	r3, [pc, #276]	@ (801ead0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e9bc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801e9c0:	4944      	ldr	r1, [pc, #272]	@ (801ead4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e9c2:	4845      	ldr	r0, [pc, #276]	@ (801ead8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e9c4:	f001 ff9a 	bl	80208fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9ca:	68ba      	ldr	r2, [r7, #8]
 801e9cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9d0:	88db      	ldrh	r3, [r3, #6]
 801e9d2:	b29a      	uxth	r2, r3
 801e9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9d6:	889b      	ldrh	r3, [r3, #4]
 801e9d8:	b29b      	uxth	r3, r3
 801e9da:	429a      	cmp	r2, r3
 801e9dc:	d010      	beq.n	801ea00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e9de:	2300      	movs	r3, #0
 801e9e0:	623b      	str	r3, [r7, #32]
 801e9e2:	e00d      	b.n	801ea00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e9e4:	68fb      	ldr	r3, [r7, #12]
 801e9e6:	685b      	ldr	r3, [r3, #4]
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	d006      	beq.n	801e9fa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e9ec:	4b38      	ldr	r3, [pc, #224]	@ (801ead0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e9ee:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801e9f2:	493a      	ldr	r1, [pc, #232]	@ (801eadc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e9f4:	4838      	ldr	r0, [pc, #224]	@ (801ead8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e9f6:	f001 ff81 	bl	80208fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e9fa:	68fb      	ldr	r3, [r7, #12]
 801e9fc:	68ba      	ldr	r2, [r7, #8]
 801e9fe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d105      	bne.n	801ea12 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ea06:	68fb      	ldr	r3, [r7, #12]
 801ea08:	7f9b      	ldrb	r3, [r3, #30]
 801ea0a:	f003 0301 	and.w	r3, r3, #1
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	d059      	beq.n	801eac6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ea12:	6a3b      	ldr	r3, [r7, #32]
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d04f      	beq.n	801eab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ea18:	68fb      	ldr	r3, [r7, #12]
 801ea1a:	685b      	ldr	r3, [r3, #4]
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d006      	beq.n	801ea2e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ea20:	68fb      	ldr	r3, [r7, #12]
 801ea22:	685b      	ldr	r3, [r3, #4]
 801ea24:	685b      	ldr	r3, [r3, #4]
 801ea26:	889b      	ldrh	r3, [r3, #4]
 801ea28:	b29b      	uxth	r3, r3
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	d002      	beq.n	801ea34 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ea2e:	2300      	movs	r3, #0
 801ea30:	623b      	str	r3, [r7, #32]
 801ea32:	e041      	b.n	801eab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ea34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea36:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801ea38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801ea3e:	e012      	b.n	801ea66 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ea40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea42:	685b      	ldr	r3, [r3, #4]
 801ea44:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801ea46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ea48:	88db      	ldrh	r3, [r3, #6]
 801ea4a:	b29a      	uxth	r2, r3
 801ea4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea4e:	889b      	ldrh	r3, [r3, #4]
 801ea50:	b29b      	uxth	r3, r3
 801ea52:	429a      	cmp	r2, r3
 801ea54:	d002      	beq.n	801ea5c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ea56:	2300      	movs	r3, #0
 801ea58:	623b      	str	r3, [r7, #32]
            break;
 801ea5a:	e007      	b.n	801ea6c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ea5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea5e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801ea60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea62:	681b      	ldr	r3, [r3, #0]
 801ea64:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801ea66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	d1e9      	bne.n	801ea40 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ea6c:	6a3b      	ldr	r3, [r7, #32]
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	d022      	beq.n	801eab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ea72:	68fb      	ldr	r3, [r7, #12]
 801ea74:	685b      	ldr	r3, [r3, #4]
 801ea76:	2b00      	cmp	r3, #0
 801ea78:	d106      	bne.n	801ea88 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ea7a:	4b15      	ldr	r3, [pc, #84]	@ (801ead0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ea7c:	f240 12df 	movw	r2, #479	@ 0x1df
 801ea80:	4917      	ldr	r1, [pc, #92]	@ (801eae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ea82:	4815      	ldr	r0, [pc, #84]	@ (801ead8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ea84:	f001 ff3a 	bl	80208fc <iprintf>
          LWIP_ASSERT("sanity check",
 801ea88:	68fb      	ldr	r3, [r7, #12]
 801ea8a:	685b      	ldr	r3, [r3, #4]
 801ea8c:	685b      	ldr	r3, [r3, #4]
 801ea8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ea90:	429a      	cmp	r2, r3
 801ea92:	d106      	bne.n	801eaa2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ea94:	4b0e      	ldr	r3, [pc, #56]	@ (801ead0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ea96:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801ea9a:	4911      	ldr	r1, [pc, #68]	@ (801eae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ea9c:	480e      	ldr	r0, [pc, #56]	@ (801ead8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ea9e:	f001 ff2d 	bl	80208fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801eaa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d006      	beq.n	801eab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801eaaa:	4b09      	ldr	r3, [pc, #36]	@ (801ead0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801eaac:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801eab0:	490c      	ldr	r1, [pc, #48]	@ (801eae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801eab2:	4809      	ldr	r0, [pc, #36]	@ (801ead8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801eab4:	f001 ff22 	bl	80208fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801eab8:	6a3b      	ldr	r3, [r7, #32]
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	bf14      	ite	ne
 801eabe:	2301      	movne	r3, #1
 801eac0:	2300      	moveq	r3, #0
 801eac2:	b2db      	uxtb	r3, r3
 801eac4:	e000      	b.n	801eac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801eac6:	2300      	movs	r3, #0
}
 801eac8:	4618      	mov	r0, r3
 801eaca:	3730      	adds	r7, #48	@ 0x30
 801eacc:	46bd      	mov	sp, r7
 801eace:	bd80      	pop	{r7, pc}
 801ead0:	08025aac 	.word	0x08025aac
 801ead4:	08025b90 	.word	0x08025b90
 801ead8:	08025af4 	.word	0x08025af4
 801eadc:	08025bb0 	.word	0x08025bb0
 801eae0:	08025be8 	.word	0x08025be8
 801eae4:	08025bf8 	.word	0x08025bf8

0801eae8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801eae8:	b580      	push	{r7, lr}
 801eaea:	b08e      	sub	sp, #56	@ 0x38
 801eaec:	af00      	add	r7, sp, #0
 801eaee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	685b      	ldr	r3, [r3, #4]
 801eaf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801eaf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eaf8:	781b      	ldrb	r3, [r3, #0]
 801eafa:	f003 030f 	and.w	r3, r3, #15
 801eafe:	b2db      	uxtb	r3, r3
 801eb00:	009b      	lsls	r3, r3, #2
 801eb02:	b2db      	uxtb	r3, r3
 801eb04:	2b14      	cmp	r3, #20
 801eb06:	f040 8171 	bne.w	801edec <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801eb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb0c:	88db      	ldrh	r3, [r3, #6]
 801eb0e:	b29b      	uxth	r3, r3
 801eb10:	4618      	mov	r0, r3
 801eb12:	f7f4 fe0f 	bl	8013734 <lwip_htons>
 801eb16:	4603      	mov	r3, r0
 801eb18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eb1c:	b29b      	uxth	r3, r3
 801eb1e:	00db      	lsls	r3, r3, #3
 801eb20:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801eb22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb24:	885b      	ldrh	r3, [r3, #2]
 801eb26:	b29b      	uxth	r3, r3
 801eb28:	4618      	mov	r0, r3
 801eb2a:	f7f4 fe03 	bl	8013734 <lwip_htons>
 801eb2e:	4603      	mov	r3, r0
 801eb30:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801eb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb34:	781b      	ldrb	r3, [r3, #0]
 801eb36:	f003 030f 	and.w	r3, r3, #15
 801eb3a:	b2db      	uxtb	r3, r3
 801eb3c:	009b      	lsls	r3, r3, #2
 801eb3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801eb42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801eb46:	b29b      	uxth	r3, r3
 801eb48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801eb4a:	429a      	cmp	r2, r3
 801eb4c:	f0c0 8150 	bcc.w	801edf0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801eb50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801eb54:	b29b      	uxth	r3, r3
 801eb56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801eb58:	1ad3      	subs	r3, r2, r3
 801eb5a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801eb5c:	6878      	ldr	r0, [r7, #4]
 801eb5e:	f7f6 fbe9 	bl	8015334 <pbuf_clen>
 801eb62:	4603      	mov	r3, r0
 801eb64:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801eb66:	4b8c      	ldr	r3, [pc, #560]	@ (801ed98 <ip4_reass+0x2b0>)
 801eb68:	881b      	ldrh	r3, [r3, #0]
 801eb6a:	461a      	mov	r2, r3
 801eb6c:	8c3b      	ldrh	r3, [r7, #32]
 801eb6e:	4413      	add	r3, r2
 801eb70:	2b0a      	cmp	r3, #10
 801eb72:	dd10      	ble.n	801eb96 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801eb74:	8c3b      	ldrh	r3, [r7, #32]
 801eb76:	4619      	mov	r1, r3
 801eb78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801eb7a:	f7ff fd81 	bl	801e680 <ip_reass_remove_oldest_datagram>
 801eb7e:	4603      	mov	r3, r0
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	f000 8137 	beq.w	801edf4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801eb86:	4b84      	ldr	r3, [pc, #528]	@ (801ed98 <ip4_reass+0x2b0>)
 801eb88:	881b      	ldrh	r3, [r3, #0]
 801eb8a:	461a      	mov	r2, r3
 801eb8c:	8c3b      	ldrh	r3, [r7, #32]
 801eb8e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801eb90:	2b0a      	cmp	r3, #10
 801eb92:	f300 812f 	bgt.w	801edf4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801eb96:	4b81      	ldr	r3, [pc, #516]	@ (801ed9c <ip4_reass+0x2b4>)
 801eb98:	681b      	ldr	r3, [r3, #0]
 801eb9a:	633b      	str	r3, [r7, #48]	@ 0x30
 801eb9c:	e015      	b.n	801ebca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801eb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eba0:	695a      	ldr	r2, [r3, #20]
 801eba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eba4:	68db      	ldr	r3, [r3, #12]
 801eba6:	429a      	cmp	r2, r3
 801eba8:	d10c      	bne.n	801ebc4 <ip4_reass+0xdc>
 801ebaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ebac:	699a      	ldr	r2, [r3, #24]
 801ebae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ebb0:	691b      	ldr	r3, [r3, #16]
 801ebb2:	429a      	cmp	r2, r3
 801ebb4:	d106      	bne.n	801ebc4 <ip4_reass+0xdc>
 801ebb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ebb8:	899a      	ldrh	r2, [r3, #12]
 801ebba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ebbc:	889b      	ldrh	r3, [r3, #4]
 801ebbe:	b29b      	uxth	r3, r3
 801ebc0:	429a      	cmp	r2, r3
 801ebc2:	d006      	beq.n	801ebd2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ebc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ebc6:	681b      	ldr	r3, [r3, #0]
 801ebc8:	633b      	str	r3, [r7, #48]	@ 0x30
 801ebca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	d1e6      	bne.n	801eb9e <ip4_reass+0xb6>
 801ebd0:	e000      	b.n	801ebd4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801ebd2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801ebd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	d109      	bne.n	801ebee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801ebda:	8c3b      	ldrh	r3, [r7, #32]
 801ebdc:	4619      	mov	r1, r3
 801ebde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ebe0:	f7ff fdb0 	bl	801e744 <ip_reass_enqueue_new_datagram>
 801ebe4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ebe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d11c      	bne.n	801ec26 <ip4_reass+0x13e>
      goto nullreturn;
 801ebec:	e105      	b.n	801edfa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ebee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ebf0:	88db      	ldrh	r3, [r3, #6]
 801ebf2:	b29b      	uxth	r3, r3
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	f7f4 fd9d 	bl	8013734 <lwip_htons>
 801ebfa:	4603      	mov	r3, r0
 801ebfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ec00:	2b00      	cmp	r3, #0
 801ec02:	d110      	bne.n	801ec26 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ec04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ec06:	89db      	ldrh	r3, [r3, #14]
 801ec08:	4618      	mov	r0, r3
 801ec0a:	f7f4 fd93 	bl	8013734 <lwip_htons>
 801ec0e:	4603      	mov	r3, r0
 801ec10:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d006      	beq.n	801ec26 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ec18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ec1a:	3308      	adds	r3, #8
 801ec1c:	2214      	movs	r2, #20
 801ec1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ec20:	4618      	mov	r0, r3
 801ec22:	f002 f840 	bl	8020ca6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ec26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ec28:	88db      	ldrh	r3, [r3, #6]
 801ec2a:	b29b      	uxth	r3, r3
 801ec2c:	f003 0320 	and.w	r3, r3, #32
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	bf0c      	ite	eq
 801ec34:	2301      	moveq	r3, #1
 801ec36:	2300      	movne	r3, #0
 801ec38:	b2db      	uxtb	r3, r3
 801ec3a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ec3c:	69fb      	ldr	r3, [r7, #28]
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	d00e      	beq.n	801ec60 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ec42:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801ec44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ec46:	4413      	add	r3, r2
 801ec48:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ec4a:	8b7a      	ldrh	r2, [r7, #26]
 801ec4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ec4e:	429a      	cmp	r2, r3
 801ec50:	f0c0 80a0 	bcc.w	801ed94 <ip4_reass+0x2ac>
 801ec54:	8b7b      	ldrh	r3, [r7, #26]
 801ec56:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801ec5a:	4293      	cmp	r3, r2
 801ec5c:	f200 809a 	bhi.w	801ed94 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ec60:	69fa      	ldr	r2, [r7, #28]
 801ec62:	6879      	ldr	r1, [r7, #4]
 801ec64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ec66:	f7ff fdd5 	bl	801e814 <ip_reass_chain_frag_into_datagram_and_validate>
 801ec6a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ec6c:	697b      	ldr	r3, [r7, #20]
 801ec6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ec72:	f000 809b 	beq.w	801edac <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ec76:	4b48      	ldr	r3, [pc, #288]	@ (801ed98 <ip4_reass+0x2b0>)
 801ec78:	881a      	ldrh	r2, [r3, #0]
 801ec7a:	8c3b      	ldrh	r3, [r7, #32]
 801ec7c:	4413      	add	r3, r2
 801ec7e:	b29a      	uxth	r2, r3
 801ec80:	4b45      	ldr	r3, [pc, #276]	@ (801ed98 <ip4_reass+0x2b0>)
 801ec82:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ec84:	69fb      	ldr	r3, [r7, #28]
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d00d      	beq.n	801eca6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ec8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801ec8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ec8e:	4413      	add	r3, r2
 801ec90:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ec92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ec94:	8a7a      	ldrh	r2, [r7, #18]
 801ec96:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ec98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ec9a:	7f9b      	ldrb	r3, [r3, #30]
 801ec9c:	f043 0301 	orr.w	r3, r3, #1
 801eca0:	b2da      	uxtb	r2, r3
 801eca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eca4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801eca6:	697b      	ldr	r3, [r7, #20]
 801eca8:	2b01      	cmp	r3, #1
 801ecaa:	d171      	bne.n	801ed90 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ecac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ecae:	8b9b      	ldrh	r3, [r3, #28]
 801ecb0:	3314      	adds	r3, #20
 801ecb2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ecb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ecb6:	685b      	ldr	r3, [r3, #4]
 801ecb8:	685b      	ldr	r3, [r3, #4]
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801ecbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ecc0:	685b      	ldr	r3, [r3, #4]
 801ecc2:	685b      	ldr	r3, [r3, #4]
 801ecc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ecc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ecc8:	3308      	adds	r3, #8
 801ecca:	2214      	movs	r2, #20
 801eccc:	4619      	mov	r1, r3
 801ecce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ecd0:	f001 ffe9 	bl	8020ca6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ecd4:	8a3b      	ldrh	r3, [r7, #16]
 801ecd6:	4618      	mov	r0, r3
 801ecd8:	f7f4 fd2c 	bl	8013734 <lwip_htons>
 801ecdc:	4603      	mov	r3, r0
 801ecde:	461a      	mov	r2, r3
 801ece0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ece2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801ece4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ece6:	2200      	movs	r2, #0
 801ece8:	719a      	strb	r2, [r3, #6]
 801ecea:	2200      	movs	r2, #0
 801ecec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801ecee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ecf0:	2200      	movs	r2, #0
 801ecf2:	729a      	strb	r2, [r3, #10]
 801ecf4:	2200      	movs	r2, #0
 801ecf6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801ecf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ecfa:	685b      	ldr	r3, [r3, #4]
 801ecfc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801ecfe:	e00d      	b.n	801ed1c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801ed00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed02:	685b      	ldr	r3, [r3, #4]
 801ed04:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801ed06:	2114      	movs	r1, #20
 801ed08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ed0a:	f7f6 f9df 	bl	80150cc <pbuf_remove_header>
      pbuf_cat(p, r);
 801ed0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ed10:	6878      	ldr	r0, [r7, #4]
 801ed12:	f7f6 fb4f 	bl	80153b4 <pbuf_cat>
      r = iprh->next_pbuf;
 801ed16:	68fb      	ldr	r3, [r7, #12]
 801ed18:	681b      	ldr	r3, [r3, #0]
 801ed1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801ed1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d1ee      	bne.n	801ed00 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801ed22:	4b1e      	ldr	r3, [pc, #120]	@ (801ed9c <ip4_reass+0x2b4>)
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ed28:	429a      	cmp	r2, r3
 801ed2a:	d102      	bne.n	801ed32 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	637b      	str	r3, [r7, #52]	@ 0x34
 801ed30:	e010      	b.n	801ed54 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ed32:	4b1a      	ldr	r3, [pc, #104]	@ (801ed9c <ip4_reass+0x2b4>)
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	637b      	str	r3, [r7, #52]	@ 0x34
 801ed38:	e007      	b.n	801ed4a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801ed3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed3c:	681b      	ldr	r3, [r3, #0]
 801ed3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ed40:	429a      	cmp	r2, r3
 801ed42:	d006      	beq.n	801ed52 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ed44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	637b      	str	r3, [r7, #52]	@ 0x34
 801ed4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	d1f4      	bne.n	801ed3a <ip4_reass+0x252>
 801ed50:	e000      	b.n	801ed54 <ip4_reass+0x26c>
          break;
 801ed52:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ed54:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ed56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ed58:	f7ff fd2e 	bl	801e7b8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801ed5c:	6878      	ldr	r0, [r7, #4]
 801ed5e:	f7f6 fae9 	bl	8015334 <pbuf_clen>
 801ed62:	4603      	mov	r3, r0
 801ed64:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ed66:	4b0c      	ldr	r3, [pc, #48]	@ (801ed98 <ip4_reass+0x2b0>)
 801ed68:	881b      	ldrh	r3, [r3, #0]
 801ed6a:	8c3a      	ldrh	r2, [r7, #32]
 801ed6c:	429a      	cmp	r2, r3
 801ed6e:	d906      	bls.n	801ed7e <ip4_reass+0x296>
 801ed70:	4b0b      	ldr	r3, [pc, #44]	@ (801eda0 <ip4_reass+0x2b8>)
 801ed72:	f240 229b 	movw	r2, #667	@ 0x29b
 801ed76:	490b      	ldr	r1, [pc, #44]	@ (801eda4 <ip4_reass+0x2bc>)
 801ed78:	480b      	ldr	r0, [pc, #44]	@ (801eda8 <ip4_reass+0x2c0>)
 801ed7a:	f001 fdbf 	bl	80208fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ed7e:	4b06      	ldr	r3, [pc, #24]	@ (801ed98 <ip4_reass+0x2b0>)
 801ed80:	881a      	ldrh	r2, [r3, #0]
 801ed82:	8c3b      	ldrh	r3, [r7, #32]
 801ed84:	1ad3      	subs	r3, r2, r3
 801ed86:	b29a      	uxth	r2, r3
 801ed88:	4b03      	ldr	r3, [pc, #12]	@ (801ed98 <ip4_reass+0x2b0>)
 801ed8a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	e038      	b.n	801ee02 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ed90:	2300      	movs	r3, #0
 801ed92:	e036      	b.n	801ee02 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801ed94:	bf00      	nop
 801ed96:	e00a      	b.n	801edae <ip4_reass+0x2c6>
 801ed98:	20022c04 	.word	0x20022c04
 801ed9c:	20022c00 	.word	0x20022c00
 801eda0:	08025aac 	.word	0x08025aac
 801eda4:	08025c1c 	.word	0x08025c1c
 801eda8:	08025af4 	.word	0x08025af4
    goto nullreturn_ipr;
 801edac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801edae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d106      	bne.n	801edc2 <ip4_reass+0x2da>
 801edb4:	4b15      	ldr	r3, [pc, #84]	@ (801ee0c <ip4_reass+0x324>)
 801edb6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801edba:	4915      	ldr	r1, [pc, #84]	@ (801ee10 <ip4_reass+0x328>)
 801edbc:	4815      	ldr	r0, [pc, #84]	@ (801ee14 <ip4_reass+0x32c>)
 801edbe:	f001 fd9d 	bl	80208fc <iprintf>
  if (ipr->p == NULL) {
 801edc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801edc4:	685b      	ldr	r3, [r3, #4]
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d116      	bne.n	801edf8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801edca:	4b13      	ldr	r3, [pc, #76]	@ (801ee18 <ip4_reass+0x330>)
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801edd0:	429a      	cmp	r2, r3
 801edd2:	d006      	beq.n	801ede2 <ip4_reass+0x2fa>
 801edd4:	4b0d      	ldr	r3, [pc, #52]	@ (801ee0c <ip4_reass+0x324>)
 801edd6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801edda:	4910      	ldr	r1, [pc, #64]	@ (801ee1c <ip4_reass+0x334>)
 801eddc:	480d      	ldr	r0, [pc, #52]	@ (801ee14 <ip4_reass+0x32c>)
 801edde:	f001 fd8d 	bl	80208fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ede2:	2100      	movs	r1, #0
 801ede4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ede6:	f7ff fce7 	bl	801e7b8 <ip_reass_dequeue_datagram>
 801edea:	e006      	b.n	801edfa <ip4_reass+0x312>
    goto nullreturn;
 801edec:	bf00      	nop
 801edee:	e004      	b.n	801edfa <ip4_reass+0x312>
    goto nullreturn;
 801edf0:	bf00      	nop
 801edf2:	e002      	b.n	801edfa <ip4_reass+0x312>
      goto nullreturn;
 801edf4:	bf00      	nop
 801edf6:	e000      	b.n	801edfa <ip4_reass+0x312>
  }

nullreturn:
 801edf8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801edfa:	6878      	ldr	r0, [r7, #4]
 801edfc:	f7f6 f9f4 	bl	80151e8 <pbuf_free>
  return NULL;
 801ee00:	2300      	movs	r3, #0
}
 801ee02:	4618      	mov	r0, r3
 801ee04:	3738      	adds	r7, #56	@ 0x38
 801ee06:	46bd      	mov	sp, r7
 801ee08:	bd80      	pop	{r7, pc}
 801ee0a:	bf00      	nop
 801ee0c:	08025aac 	.word	0x08025aac
 801ee10:	08025c38 	.word	0x08025c38
 801ee14:	08025af4 	.word	0x08025af4
 801ee18:	20022c00 	.word	0x20022c00
 801ee1c:	08025c44 	.word	0x08025c44

0801ee20 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801ee20:	b580      	push	{r7, lr}
 801ee22:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ee24:	2005      	movs	r0, #5
 801ee26:	f7f5 f983 	bl	8014130 <memp_malloc>
 801ee2a:	4603      	mov	r3, r0
}
 801ee2c:	4618      	mov	r0, r3
 801ee2e:	bd80      	pop	{r7, pc}

0801ee30 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ee30:	b580      	push	{r7, lr}
 801ee32:	b082      	sub	sp, #8
 801ee34:	af00      	add	r7, sp, #0
 801ee36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d106      	bne.n	801ee4c <ip_frag_free_pbuf_custom_ref+0x1c>
 801ee3e:	4b07      	ldr	r3, [pc, #28]	@ (801ee5c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ee40:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801ee44:	4906      	ldr	r1, [pc, #24]	@ (801ee60 <ip_frag_free_pbuf_custom_ref+0x30>)
 801ee46:	4807      	ldr	r0, [pc, #28]	@ (801ee64 <ip_frag_free_pbuf_custom_ref+0x34>)
 801ee48:	f001 fd58 	bl	80208fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ee4c:	6879      	ldr	r1, [r7, #4]
 801ee4e:	2005      	movs	r0, #5
 801ee50:	f7f5 f9e4 	bl	801421c <memp_free>
}
 801ee54:	bf00      	nop
 801ee56:	3708      	adds	r7, #8
 801ee58:	46bd      	mov	sp, r7
 801ee5a:	bd80      	pop	{r7, pc}
 801ee5c:	08025aac 	.word	0x08025aac
 801ee60:	08025c64 	.word	0x08025c64
 801ee64:	08025af4 	.word	0x08025af4

0801ee68 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ee68:	b580      	push	{r7, lr}
 801ee6a:	b084      	sub	sp, #16
 801ee6c:	af00      	add	r7, sp, #0
 801ee6e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ee74:	68fb      	ldr	r3, [r7, #12]
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	d106      	bne.n	801ee88 <ipfrag_free_pbuf_custom+0x20>
 801ee7a:	4b11      	ldr	r3, [pc, #68]	@ (801eec0 <ipfrag_free_pbuf_custom+0x58>)
 801ee7c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801ee80:	4910      	ldr	r1, [pc, #64]	@ (801eec4 <ipfrag_free_pbuf_custom+0x5c>)
 801ee82:	4811      	ldr	r0, [pc, #68]	@ (801eec8 <ipfrag_free_pbuf_custom+0x60>)
 801ee84:	f001 fd3a 	bl	80208fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ee88:	68fa      	ldr	r2, [r7, #12]
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	429a      	cmp	r2, r3
 801ee8e:	d006      	beq.n	801ee9e <ipfrag_free_pbuf_custom+0x36>
 801ee90:	4b0b      	ldr	r3, [pc, #44]	@ (801eec0 <ipfrag_free_pbuf_custom+0x58>)
 801ee92:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801ee96:	490d      	ldr	r1, [pc, #52]	@ (801eecc <ipfrag_free_pbuf_custom+0x64>)
 801ee98:	480b      	ldr	r0, [pc, #44]	@ (801eec8 <ipfrag_free_pbuf_custom+0x60>)
 801ee9a:	f001 fd2f 	bl	80208fc <iprintf>
  if (pcr->original != NULL) {
 801ee9e:	68fb      	ldr	r3, [r7, #12]
 801eea0:	695b      	ldr	r3, [r3, #20]
 801eea2:	2b00      	cmp	r3, #0
 801eea4:	d004      	beq.n	801eeb0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801eea6:	68fb      	ldr	r3, [r7, #12]
 801eea8:	695b      	ldr	r3, [r3, #20]
 801eeaa:	4618      	mov	r0, r3
 801eeac:	f7f6 f99c 	bl	80151e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801eeb0:	68f8      	ldr	r0, [r7, #12]
 801eeb2:	f7ff ffbd 	bl	801ee30 <ip_frag_free_pbuf_custom_ref>
}
 801eeb6:	bf00      	nop
 801eeb8:	3710      	adds	r7, #16
 801eeba:	46bd      	mov	sp, r7
 801eebc:	bd80      	pop	{r7, pc}
 801eebe:	bf00      	nop
 801eec0:	08025aac 	.word	0x08025aac
 801eec4:	08025c70 	.word	0x08025c70
 801eec8:	08025af4 	.word	0x08025af4
 801eecc:	08025c7c 	.word	0x08025c7c

0801eed0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801eed0:	b580      	push	{r7, lr}
 801eed2:	b094      	sub	sp, #80	@ 0x50
 801eed4:	af02      	add	r7, sp, #8
 801eed6:	60f8      	str	r0, [r7, #12]
 801eed8:	60b9      	str	r1, [r7, #8]
 801eeda:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801eedc:	2300      	movs	r3, #0
 801eede:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801eee2:	68bb      	ldr	r3, [r7, #8]
 801eee4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801eee6:	3b14      	subs	r3, #20
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	da00      	bge.n	801eeee <ip4_frag+0x1e>
 801eeec:	3307      	adds	r3, #7
 801eeee:	10db      	asrs	r3, r3, #3
 801eef0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801eef2:	2314      	movs	r3, #20
 801eef4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801eef6:	68fb      	ldr	r3, [r7, #12]
 801eef8:	685b      	ldr	r3, [r3, #4]
 801eefa:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801eefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eefe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ef00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ef02:	781b      	ldrb	r3, [r3, #0]
 801ef04:	f003 030f 	and.w	r3, r3, #15
 801ef08:	b2db      	uxtb	r3, r3
 801ef0a:	009b      	lsls	r3, r3, #2
 801ef0c:	b2db      	uxtb	r3, r3
 801ef0e:	2b14      	cmp	r3, #20
 801ef10:	d002      	beq.n	801ef18 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ef12:	f06f 0305 	mvn.w	r3, #5
 801ef16:	e110      	b.n	801f13a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ef18:	68fb      	ldr	r3, [r7, #12]
 801ef1a:	895b      	ldrh	r3, [r3, #10]
 801ef1c:	2b13      	cmp	r3, #19
 801ef1e:	d809      	bhi.n	801ef34 <ip4_frag+0x64>
 801ef20:	4b88      	ldr	r3, [pc, #544]	@ (801f144 <ip4_frag+0x274>)
 801ef22:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801ef26:	4988      	ldr	r1, [pc, #544]	@ (801f148 <ip4_frag+0x278>)
 801ef28:	4888      	ldr	r0, [pc, #544]	@ (801f14c <ip4_frag+0x27c>)
 801ef2a:	f001 fce7 	bl	80208fc <iprintf>
 801ef2e:	f06f 0305 	mvn.w	r3, #5
 801ef32:	e102      	b.n	801f13a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ef34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ef36:	88db      	ldrh	r3, [r3, #6]
 801ef38:	b29b      	uxth	r3, r3
 801ef3a:	4618      	mov	r0, r3
 801ef3c:	f7f4 fbfa 	bl	8013734 <lwip_htons>
 801ef40:	4603      	mov	r3, r0
 801ef42:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801ef44:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ef46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ef4a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ef4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ef50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ef54:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ef56:	68fb      	ldr	r3, [r7, #12]
 801ef58:	891b      	ldrh	r3, [r3, #8]
 801ef5a:	3b14      	subs	r3, #20
 801ef5c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ef60:	e0e1      	b.n	801f126 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ef62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ef64:	00db      	lsls	r3, r3, #3
 801ef66:	b29b      	uxth	r3, r3
 801ef68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ef6c:	4293      	cmp	r3, r2
 801ef6e:	bf28      	it	cs
 801ef70:	4613      	movcs	r3, r2
 801ef72:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ef74:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ef78:	2114      	movs	r1, #20
 801ef7a:	200e      	movs	r0, #14
 801ef7c:	f7f5 fe08 	bl	8014b90 <pbuf_alloc>
 801ef80:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ef82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	f000 80d5 	beq.w	801f134 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ef8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef8c:	895b      	ldrh	r3, [r3, #10]
 801ef8e:	2b13      	cmp	r3, #19
 801ef90:	d806      	bhi.n	801efa0 <ip4_frag+0xd0>
 801ef92:	4b6c      	ldr	r3, [pc, #432]	@ (801f144 <ip4_frag+0x274>)
 801ef94:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801ef98:	496d      	ldr	r1, [pc, #436]	@ (801f150 <ip4_frag+0x280>)
 801ef9a:	486c      	ldr	r0, [pc, #432]	@ (801f14c <ip4_frag+0x27c>)
 801ef9c:	f001 fcae 	bl	80208fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801efa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efa2:	685b      	ldr	r3, [r3, #4]
 801efa4:	2214      	movs	r2, #20
 801efa6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801efa8:	4618      	mov	r0, r3
 801efaa:	f001 fe7c 	bl	8020ca6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801efae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efb0:	685b      	ldr	r3, [r3, #4]
 801efb2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801efb4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801efb6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801efba:	e064      	b.n	801f086 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801efbc:	68fb      	ldr	r3, [r7, #12]
 801efbe:	895a      	ldrh	r2, [r3, #10]
 801efc0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801efc2:	1ad3      	subs	r3, r2, r3
 801efc4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801efc6:	68fb      	ldr	r3, [r7, #12]
 801efc8:	895b      	ldrh	r3, [r3, #10]
 801efca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801efcc:	429a      	cmp	r2, r3
 801efce:	d906      	bls.n	801efde <ip4_frag+0x10e>
 801efd0:	4b5c      	ldr	r3, [pc, #368]	@ (801f144 <ip4_frag+0x274>)
 801efd2:	f240 322d 	movw	r2, #813	@ 0x32d
 801efd6:	495f      	ldr	r1, [pc, #380]	@ (801f154 <ip4_frag+0x284>)
 801efd8:	485c      	ldr	r0, [pc, #368]	@ (801f14c <ip4_frag+0x27c>)
 801efda:	f001 fc8f 	bl	80208fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801efde:	8bfa      	ldrh	r2, [r7, #30]
 801efe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801efe4:	4293      	cmp	r3, r2
 801efe6:	bf28      	it	cs
 801efe8:	4613      	movcs	r3, r2
 801efea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801efee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	d105      	bne.n	801f002 <ip4_frag+0x132>
        poff = 0;
 801eff6:	2300      	movs	r3, #0
 801eff8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801effa:	68fb      	ldr	r3, [r7, #12]
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	60fb      	str	r3, [r7, #12]
        continue;
 801f000:	e041      	b.n	801f086 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801f002:	f7ff ff0d 	bl	801ee20 <ip_frag_alloc_pbuf_custom_ref>
 801f006:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801f008:	69bb      	ldr	r3, [r7, #24]
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	d103      	bne.n	801f016 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801f00e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f010:	f7f6 f8ea 	bl	80151e8 <pbuf_free>
        goto memerr;
 801f014:	e08f      	b.n	801f136 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f016:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801f018:	68fb      	ldr	r3, [r7, #12]
 801f01a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f01c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f01e:	4413      	add	r3, r2
 801f020:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801f024:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801f028:	9201      	str	r2, [sp, #4]
 801f02a:	9300      	str	r3, [sp, #0]
 801f02c:	4603      	mov	r3, r0
 801f02e:	2241      	movs	r2, #65	@ 0x41
 801f030:	2000      	movs	r0, #0
 801f032:	f7f5 fef7 	bl	8014e24 <pbuf_alloced_custom>
 801f036:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801f038:	697b      	ldr	r3, [r7, #20]
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d106      	bne.n	801f04c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801f03e:	69b8      	ldr	r0, [r7, #24]
 801f040:	f7ff fef6 	bl	801ee30 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801f044:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f046:	f7f6 f8cf 	bl	80151e8 <pbuf_free>
        goto memerr;
 801f04a:	e074      	b.n	801f136 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801f04c:	68f8      	ldr	r0, [r7, #12]
 801f04e:	f7f6 f989 	bl	8015364 <pbuf_ref>
      pcr->original = p;
 801f052:	69bb      	ldr	r3, [r7, #24]
 801f054:	68fa      	ldr	r2, [r7, #12]
 801f056:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801f058:	69bb      	ldr	r3, [r7, #24]
 801f05a:	4a3f      	ldr	r2, [pc, #252]	@ (801f158 <ip4_frag+0x288>)
 801f05c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801f05e:	6979      	ldr	r1, [r7, #20]
 801f060:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f062:	f7f6 f9a7 	bl	80153b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801f066:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801f06a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f06e:	1ad3      	subs	r3, r2, r3
 801f070:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801f074:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f078:	2b00      	cmp	r3, #0
 801f07a:	d004      	beq.n	801f086 <ip4_frag+0x1b6>
        poff = 0;
 801f07c:	2300      	movs	r3, #0
 801f07e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801f080:	68fb      	ldr	r3, [r7, #12]
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801f086:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d196      	bne.n	801efbc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801f08e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f090:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f094:	4413      	add	r3, r2
 801f096:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801f098:	68bb      	ldr	r3, [r7, #8]
 801f09a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f09c:	f1a3 0213 	sub.w	r2, r3, #19
 801f0a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f0a4:	429a      	cmp	r2, r3
 801f0a6:	bfcc      	ite	gt
 801f0a8:	2301      	movgt	r3, #1
 801f0aa:	2300      	movle	r3, #0
 801f0ac:	b2db      	uxtb	r3, r3
 801f0ae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801f0b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f0b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f0b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801f0ba:	6a3b      	ldr	r3, [r7, #32]
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d002      	beq.n	801f0c6 <ip4_frag+0x1f6>
 801f0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d003      	beq.n	801f0ce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801f0c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f0c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801f0cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801f0ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f0d0:	4618      	mov	r0, r3
 801f0d2:	f7f4 fb2f 	bl	8013734 <lwip_htons>
 801f0d6:	4603      	mov	r3, r0
 801f0d8:	461a      	mov	r2, r3
 801f0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0dc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801f0de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f0e0:	3314      	adds	r3, #20
 801f0e2:	b29b      	uxth	r3, r3
 801f0e4:	4618      	mov	r0, r3
 801f0e6:	f7f4 fb25 	bl	8013734 <lwip_htons>
 801f0ea:	4603      	mov	r3, r0
 801f0ec:	461a      	mov	r2, r3
 801f0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0f0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801f0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0f4:	2200      	movs	r2, #0
 801f0f6:	729a      	strb	r2, [r3, #10]
 801f0f8:	2200      	movs	r2, #0
 801f0fa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801f0fc:	68bb      	ldr	r3, [r7, #8]
 801f0fe:	695b      	ldr	r3, [r3, #20]
 801f100:	687a      	ldr	r2, [r7, #4]
 801f102:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f104:	68b8      	ldr	r0, [r7, #8]
 801f106:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801f108:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f10a:	f7f6 f86d 	bl	80151e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801f10e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f112:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f114:	1ad3      	subs	r3, r2, r3
 801f116:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801f11a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801f11e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f120:	4413      	add	r3, r2
 801f122:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801f126:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f12a:	2b00      	cmp	r3, #0
 801f12c:	f47f af19 	bne.w	801ef62 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801f130:	2300      	movs	r3, #0
 801f132:	e002      	b.n	801f13a <ip4_frag+0x26a>
      goto memerr;
 801f134:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801f136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801f13a:	4618      	mov	r0, r3
 801f13c:	3748      	adds	r7, #72	@ 0x48
 801f13e:	46bd      	mov	sp, r7
 801f140:	bd80      	pop	{r7, pc}
 801f142:	bf00      	nop
 801f144:	08025aac 	.word	0x08025aac
 801f148:	08025c88 	.word	0x08025c88
 801f14c:	08025af4 	.word	0x08025af4
 801f150:	08025ca4 	.word	0x08025ca4
 801f154:	08025cc4 	.word	0x08025cc4
 801f158:	0801ee69 	.word	0x0801ee69

0801f15c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801f15c:	b580      	push	{r7, lr}
 801f15e:	b086      	sub	sp, #24
 801f160:	af00      	add	r7, sp, #0
 801f162:	6078      	str	r0, [r7, #4]
 801f164:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801f166:	230e      	movs	r3, #14
 801f168:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	895b      	ldrh	r3, [r3, #10]
 801f16e:	2b0e      	cmp	r3, #14
 801f170:	d96e      	bls.n	801f250 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	7bdb      	ldrb	r3, [r3, #15]
 801f176:	2b00      	cmp	r3, #0
 801f178:	d106      	bne.n	801f188 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801f17a:	683b      	ldr	r3, [r7, #0]
 801f17c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801f180:	3301      	adds	r3, #1
 801f182:	b2da      	uxtb	r2, r3
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	685b      	ldr	r3, [r3, #4]
 801f18c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801f18e:	693b      	ldr	r3, [r7, #16]
 801f190:	7b1a      	ldrb	r2, [r3, #12]
 801f192:	7b5b      	ldrb	r3, [r3, #13]
 801f194:	021b      	lsls	r3, r3, #8
 801f196:	4313      	orrs	r3, r2
 801f198:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801f19a:	693b      	ldr	r3, [r7, #16]
 801f19c:	781b      	ldrb	r3, [r3, #0]
 801f19e:	f003 0301 	and.w	r3, r3, #1
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d023      	beq.n	801f1ee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801f1a6:	693b      	ldr	r3, [r7, #16]
 801f1a8:	781b      	ldrb	r3, [r3, #0]
 801f1aa:	2b01      	cmp	r3, #1
 801f1ac:	d10f      	bne.n	801f1ce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f1ae:	693b      	ldr	r3, [r7, #16]
 801f1b0:	785b      	ldrb	r3, [r3, #1]
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d11b      	bne.n	801f1ee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801f1b6:	693b      	ldr	r3, [r7, #16]
 801f1b8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f1ba:	2b5e      	cmp	r3, #94	@ 0x5e
 801f1bc:	d117      	bne.n	801f1ee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	7b5b      	ldrb	r3, [r3, #13]
 801f1c2:	f043 0310 	orr.w	r3, r3, #16
 801f1c6:	b2da      	uxtb	r2, r3
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	735a      	strb	r2, [r3, #13]
 801f1cc:	e00f      	b.n	801f1ee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801f1ce:	693b      	ldr	r3, [r7, #16]
 801f1d0:	2206      	movs	r2, #6
 801f1d2:	4928      	ldr	r1, [pc, #160]	@ (801f274 <ethernet_input+0x118>)
 801f1d4:	4618      	mov	r0, r3
 801f1d6:	f001 fce1 	bl	8020b9c <memcmp>
 801f1da:	4603      	mov	r3, r0
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d106      	bne.n	801f1ee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	7b5b      	ldrb	r3, [r3, #13]
 801f1e4:	f043 0308 	orr.w	r3, r3, #8
 801f1e8:	b2da      	uxtb	r2, r3
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801f1ee:	89fb      	ldrh	r3, [r7, #14]
 801f1f0:	2b08      	cmp	r3, #8
 801f1f2:	d003      	beq.n	801f1fc <ethernet_input+0xa0>
 801f1f4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801f1f8:	d014      	beq.n	801f224 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801f1fa:	e032      	b.n	801f262 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f1fc:	683b      	ldr	r3, [r7, #0]
 801f1fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801f202:	f003 0308 	and.w	r3, r3, #8
 801f206:	2b00      	cmp	r3, #0
 801f208:	d024      	beq.n	801f254 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f20a:	8afb      	ldrh	r3, [r7, #22]
 801f20c:	4619      	mov	r1, r3
 801f20e:	6878      	ldr	r0, [r7, #4]
 801f210:	f7f5 ff5c 	bl	80150cc <pbuf_remove_header>
 801f214:	4603      	mov	r3, r0
 801f216:	2b00      	cmp	r3, #0
 801f218:	d11e      	bne.n	801f258 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801f21a:	6839      	ldr	r1, [r7, #0]
 801f21c:	6878      	ldr	r0, [r7, #4]
 801f21e:	f7fe ff21 	bl	801e064 <ip4_input>
      break;
 801f222:	e013      	b.n	801f24c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f224:	683b      	ldr	r3, [r7, #0]
 801f226:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801f22a:	f003 0308 	and.w	r3, r3, #8
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d014      	beq.n	801f25c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f232:	8afb      	ldrh	r3, [r7, #22]
 801f234:	4619      	mov	r1, r3
 801f236:	6878      	ldr	r0, [r7, #4]
 801f238:	f7f5 ff48 	bl	80150cc <pbuf_remove_header>
 801f23c:	4603      	mov	r3, r0
 801f23e:	2b00      	cmp	r3, #0
 801f240:	d10e      	bne.n	801f260 <ethernet_input+0x104>
        etharp_input(p, netif);
 801f242:	6839      	ldr	r1, [r7, #0]
 801f244:	6878      	ldr	r0, [r7, #4]
 801f246:	f7fe f82f 	bl	801d2a8 <etharp_input>
      break;
 801f24a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801f24c:	2300      	movs	r3, #0
 801f24e:	e00c      	b.n	801f26a <ethernet_input+0x10e>
    goto free_and_return;
 801f250:	bf00      	nop
 801f252:	e006      	b.n	801f262 <ethernet_input+0x106>
        goto free_and_return;
 801f254:	bf00      	nop
 801f256:	e004      	b.n	801f262 <ethernet_input+0x106>
        goto free_and_return;
 801f258:	bf00      	nop
 801f25a:	e002      	b.n	801f262 <ethernet_input+0x106>
        goto free_and_return;
 801f25c:	bf00      	nop
 801f25e:	e000      	b.n	801f262 <ethernet_input+0x106>
        goto free_and_return;
 801f260:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801f262:	6878      	ldr	r0, [r7, #4]
 801f264:	f7f5 ffc0 	bl	80151e8 <pbuf_free>
  return ERR_OK;
 801f268:	2300      	movs	r3, #0
}
 801f26a:	4618      	mov	r0, r3
 801f26c:	3718      	adds	r7, #24
 801f26e:	46bd      	mov	sp, r7
 801f270:	bd80      	pop	{r7, pc}
 801f272:	bf00      	nop
 801f274:	08026424 	.word	0x08026424

0801f278 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801f278:	b580      	push	{r7, lr}
 801f27a:	b086      	sub	sp, #24
 801f27c:	af00      	add	r7, sp, #0
 801f27e:	60f8      	str	r0, [r7, #12]
 801f280:	60b9      	str	r1, [r7, #8]
 801f282:	607a      	str	r2, [r7, #4]
 801f284:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801f286:	8c3b      	ldrh	r3, [r7, #32]
 801f288:	4618      	mov	r0, r3
 801f28a:	f7f4 fa53 	bl	8013734 <lwip_htons>
 801f28e:	4603      	mov	r3, r0
 801f290:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f292:	210e      	movs	r1, #14
 801f294:	68b8      	ldr	r0, [r7, #8]
 801f296:	f7f5 ff09 	bl	80150ac <pbuf_add_header>
 801f29a:	4603      	mov	r3, r0
 801f29c:	2b00      	cmp	r3, #0
 801f29e:	d125      	bne.n	801f2ec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801f2a0:	68bb      	ldr	r3, [r7, #8]
 801f2a2:	685b      	ldr	r3, [r3, #4]
 801f2a4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801f2a6:	693b      	ldr	r3, [r7, #16]
 801f2a8:	8afa      	ldrh	r2, [r7, #22]
 801f2aa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801f2ac:	693b      	ldr	r3, [r7, #16]
 801f2ae:	2206      	movs	r2, #6
 801f2b0:	6839      	ldr	r1, [r7, #0]
 801f2b2:	4618      	mov	r0, r3
 801f2b4:	f001 fcf7 	bl	8020ca6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801f2b8:	693b      	ldr	r3, [r7, #16]
 801f2ba:	3306      	adds	r3, #6
 801f2bc:	2206      	movs	r2, #6
 801f2be:	6879      	ldr	r1, [r7, #4]
 801f2c0:	4618      	mov	r0, r3
 801f2c2:	f001 fcf0 	bl	8020ca6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f2c6:	68fb      	ldr	r3, [r7, #12]
 801f2c8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801f2cc:	2b06      	cmp	r3, #6
 801f2ce:	d006      	beq.n	801f2de <ethernet_output+0x66>
 801f2d0:	4b0a      	ldr	r3, [pc, #40]	@ (801f2fc <ethernet_output+0x84>)
 801f2d2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801f2d6:	490a      	ldr	r1, [pc, #40]	@ (801f300 <ethernet_output+0x88>)
 801f2d8:	480a      	ldr	r0, [pc, #40]	@ (801f304 <ethernet_output+0x8c>)
 801f2da:	f001 fb0f 	bl	80208fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f2de:	68fb      	ldr	r3, [r7, #12]
 801f2e0:	699b      	ldr	r3, [r3, #24]
 801f2e2:	68b9      	ldr	r1, [r7, #8]
 801f2e4:	68f8      	ldr	r0, [r7, #12]
 801f2e6:	4798      	blx	r3
 801f2e8:	4603      	mov	r3, r0
 801f2ea:	e002      	b.n	801f2f2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801f2ec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801f2ee:	f06f 0301 	mvn.w	r3, #1
}
 801f2f2:	4618      	mov	r0, r3
 801f2f4:	3718      	adds	r7, #24
 801f2f6:	46bd      	mov	sp, r7
 801f2f8:	bd80      	pop	{r7, pc}
 801f2fa:	bf00      	nop
 801f2fc:	08025cd4 	.word	0x08025cd4
 801f300:	08025d0c 	.word	0x08025d0c
 801f304:	08025d40 	.word	0x08025d40

0801f308 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801f308:	b580      	push	{r7, lr}
 801f30a:	b082      	sub	sp, #8
 801f30c:	af00      	add	r7, sp, #0
 801f30e:	6078      	str	r0, [r7, #4]
 801f310:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801f312:	683b      	ldr	r3, [r7, #0]
 801f314:	2200      	movs	r2, #0
 801f316:	2104      	movs	r1, #4
 801f318:	4618      	mov	r0, r3
 801f31a:	f7ee f907 	bl	800d52c <osMessageQueueNew>
 801f31e:	4602      	mov	r2, r0
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801f324:	687b      	ldr	r3, [r7, #4]
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d102      	bne.n	801f332 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801f32c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f330:	e000      	b.n	801f334 <sys_mbox_new+0x2c>

  return ERR_OK;
 801f332:	2300      	movs	r3, #0
}
 801f334:	4618      	mov	r0, r3
 801f336:	3708      	adds	r7, #8
 801f338:	46bd      	mov	sp, r7
 801f33a:	bd80      	pop	{r7, pc}

0801f33c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801f33c:	b580      	push	{r7, lr}
 801f33e:	b082      	sub	sp, #8
 801f340:	af00      	add	r7, sp, #0
 801f342:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	4618      	mov	r0, r3
 801f34a:	f7ee fa5b 	bl	800d804 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	4618      	mov	r0, r3
 801f354:	f7ee fa88 	bl	800d868 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801f358:	bf00      	nop
 801f35a:	3708      	adds	r7, #8
 801f35c:	46bd      	mov	sp, r7
 801f35e:	bd80      	pop	{r7, pc}

0801f360 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801f360:	b580      	push	{r7, lr}
 801f362:	b084      	sub	sp, #16
 801f364:	af00      	add	r7, sp, #0
 801f366:	6078      	str	r0, [r7, #4]
 801f368:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	6818      	ldr	r0, [r3, #0]
 801f36e:	4639      	mov	r1, r7
 801f370:	2300      	movs	r3, #0
 801f372:	2200      	movs	r2, #0
 801f374:	f7ee f960 	bl	800d638 <osMessageQueuePut>
 801f378:	4603      	mov	r3, r0
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d102      	bne.n	801f384 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801f37e:	2300      	movs	r3, #0
 801f380:	73fb      	strb	r3, [r7, #15]
 801f382:	e001      	b.n	801f388 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801f384:	23ff      	movs	r3, #255	@ 0xff
 801f386:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801f388:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f38c:	4618      	mov	r0, r3
 801f38e:	3710      	adds	r7, #16
 801f390:	46bd      	mov	sp, r7
 801f392:	bd80      	pop	{r7, pc}

0801f394 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801f394:	b580      	push	{r7, lr}
 801f396:	b086      	sub	sp, #24
 801f398:	af00      	add	r7, sp, #0
 801f39a:	60f8      	str	r0, [r7, #12]
 801f39c:	60b9      	str	r1, [r7, #8]
 801f39e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801f3a0:	f7ed fbd2 	bl	800cb48 <osKernelGetTickCount>
 801f3a4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801f3a6:	687b      	ldr	r3, [r7, #4]
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	d013      	beq.n	801f3d4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801f3ac:	68fb      	ldr	r3, [r7, #12]
 801f3ae:	6818      	ldr	r0, [r3, #0]
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	2200      	movs	r2, #0
 801f3b4:	68b9      	ldr	r1, [r7, #8]
 801f3b6:	f7ee f9b3 	bl	800d720 <osMessageQueueGet>
 801f3ba:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801f3bc:	693b      	ldr	r3, [r7, #16]
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	d105      	bne.n	801f3ce <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801f3c2:	f7ed fbc1 	bl	800cb48 <osKernelGetTickCount>
 801f3c6:	4602      	mov	r2, r0
 801f3c8:	697b      	ldr	r3, [r7, #20]
 801f3ca:	1ad3      	subs	r3, r2, r3
 801f3cc:	e00f      	b.n	801f3ee <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f3ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f3d2:	e00c      	b.n	801f3ee <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801f3d4:	68fb      	ldr	r3, [r7, #12]
 801f3d6:	6818      	ldr	r0, [r3, #0]
 801f3d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f3dc:	2200      	movs	r2, #0
 801f3de:	68b9      	ldr	r1, [r7, #8]
 801f3e0:	f7ee f99e 	bl	800d720 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801f3e4:	f7ed fbb0 	bl	800cb48 <osKernelGetTickCount>
 801f3e8:	4602      	mov	r2, r0
 801f3ea:	697b      	ldr	r3, [r7, #20]
 801f3ec:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801f3ee:	4618      	mov	r0, r3
 801f3f0:	3718      	adds	r7, #24
 801f3f2:	46bd      	mov	sp, r7
 801f3f4:	bd80      	pop	{r7, pc}

0801f3f6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801f3f6:	b580      	push	{r7, lr}
 801f3f8:	b082      	sub	sp, #8
 801f3fa:	af00      	add	r7, sp, #0
 801f3fc:	6078      	str	r0, [r7, #4]
 801f3fe:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	6818      	ldr	r0, [r3, #0]
 801f404:	2300      	movs	r3, #0
 801f406:	2200      	movs	r2, #0
 801f408:	6839      	ldr	r1, [r7, #0]
 801f40a:	f7ee f989 	bl	800d720 <osMessageQueueGet>
 801f40e:	4603      	mov	r3, r0
 801f410:	2b00      	cmp	r3, #0
 801f412:	d101      	bne.n	801f418 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801f414:	2300      	movs	r3, #0
 801f416:	e001      	b.n	801f41c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801f418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801f41c:	4618      	mov	r0, r3
 801f41e:	3708      	adds	r7, #8
 801f420:	46bd      	mov	sp, r7
 801f422:	bd80      	pop	{r7, pc}

0801f424 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801f424:	b480      	push	{r7}
 801f426:	b083      	sub	sp, #12
 801f428:	af00      	add	r7, sp, #0
 801f42a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	681b      	ldr	r3, [r3, #0]
 801f430:	2b00      	cmp	r3, #0
 801f432:	d101      	bne.n	801f438 <sys_mbox_valid+0x14>
    return 0;
 801f434:	2300      	movs	r3, #0
 801f436:	e000      	b.n	801f43a <sys_mbox_valid+0x16>
  else
    return 1;
 801f438:	2301      	movs	r3, #1
}
 801f43a:	4618      	mov	r0, r3
 801f43c:	370c      	adds	r7, #12
 801f43e:	46bd      	mov	sp, r7
 801f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f444:	4770      	bx	lr

0801f446 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801f446:	b480      	push	{r7}
 801f448:	b083      	sub	sp, #12
 801f44a:	af00      	add	r7, sp, #0
 801f44c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801f44e:	687b      	ldr	r3, [r7, #4]
 801f450:	2200      	movs	r2, #0
 801f452:	601a      	str	r2, [r3, #0]
}
 801f454:	bf00      	nop
 801f456:	370c      	adds	r7, #12
 801f458:	46bd      	mov	sp, r7
 801f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f45e:	4770      	bx	lr

0801f460 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801f460:	b580      	push	{r7, lr}
 801f462:	b082      	sub	sp, #8
 801f464:	af00      	add	r7, sp, #0
 801f466:	6078      	str	r0, [r7, #4]
 801f468:	460b      	mov	r3, r1
 801f46a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801f46c:	78fb      	ldrb	r3, [r7, #3]
 801f46e:	2200      	movs	r2, #0
 801f470:	4619      	mov	r1, r3
 801f472:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801f476:	f7ed fec9 	bl	800d20c <osSemaphoreNew>
 801f47a:	4602      	mov	r2, r0
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	2b00      	cmp	r3, #0
 801f486:	d102      	bne.n	801f48e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801f488:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f48c:	e009      	b.n	801f4a2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801f48e:	78fb      	ldrb	r3, [r7, #3]
 801f490:	2b00      	cmp	r3, #0
 801f492:	d105      	bne.n	801f4a0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	2100      	movs	r1, #0
 801f49a:	4618      	mov	r0, r3
 801f49c:	f7ed ff52 	bl	800d344 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801f4a0:	2300      	movs	r3, #0
}
 801f4a2:	4618      	mov	r0, r3
 801f4a4:	3708      	adds	r7, #8
 801f4a6:	46bd      	mov	sp, r7
 801f4a8:	bd80      	pop	{r7, pc}

0801f4aa <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801f4aa:	b580      	push	{r7, lr}
 801f4ac:	b084      	sub	sp, #16
 801f4ae:	af00      	add	r7, sp, #0
 801f4b0:	6078      	str	r0, [r7, #4]
 801f4b2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801f4b4:	f7ed fb48 	bl	800cb48 <osKernelGetTickCount>
 801f4b8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801f4ba:	683b      	ldr	r3, [r7, #0]
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	d011      	beq.n	801f4e4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	6839      	ldr	r1, [r7, #0]
 801f4c6:	4618      	mov	r0, r3
 801f4c8:	f7ed ff3c 	bl	800d344 <osSemaphoreAcquire>
 801f4cc:	4603      	mov	r3, r0
 801f4ce:	2b00      	cmp	r3, #0
 801f4d0:	d105      	bne.n	801f4de <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801f4d2:	f7ed fb39 	bl	800cb48 <osKernelGetTickCount>
 801f4d6:	4602      	mov	r2, r0
 801f4d8:	68fb      	ldr	r3, [r7, #12]
 801f4da:	1ad3      	subs	r3, r2, r3
 801f4dc:	e012      	b.n	801f504 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f4de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f4e2:	e00f      	b.n	801f504 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801f4e4:	bf00      	nop
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f4ee:	4618      	mov	r0, r3
 801f4f0:	f7ed ff28 	bl	800d344 <osSemaphoreAcquire>
 801f4f4:	4603      	mov	r3, r0
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d1f5      	bne.n	801f4e6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801f4fa:	f7ed fb25 	bl	800cb48 <osKernelGetTickCount>
 801f4fe:	4602      	mov	r2, r0
 801f500:	68fb      	ldr	r3, [r7, #12]
 801f502:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801f504:	4618      	mov	r0, r3
 801f506:	3710      	adds	r7, #16
 801f508:	46bd      	mov	sp, r7
 801f50a:	bd80      	pop	{r7, pc}

0801f50c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801f50c:	b580      	push	{r7, lr}
 801f50e:	b082      	sub	sp, #8
 801f510:	af00      	add	r7, sp, #0
 801f512:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	4618      	mov	r0, r3
 801f51a:	f7ed ff79 	bl	800d410 <osSemaphoreRelease>
}
 801f51e:	bf00      	nop
 801f520:	3708      	adds	r7, #8
 801f522:	46bd      	mov	sp, r7
 801f524:	bd80      	pop	{r7, pc}

0801f526 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801f526:	b580      	push	{r7, lr}
 801f528:	b082      	sub	sp, #8
 801f52a:	af00      	add	r7, sp, #0
 801f52c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801f52e:	687b      	ldr	r3, [r7, #4]
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	4618      	mov	r0, r3
 801f534:	f7ed ffc4 	bl	800d4c0 <osSemaphoreDelete>
}
 801f538:	bf00      	nop
 801f53a:	3708      	adds	r7, #8
 801f53c:	46bd      	mov	sp, r7
 801f53e:	bd80      	pop	{r7, pc}

0801f540 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801f540:	b480      	push	{r7}
 801f542:	b083      	sub	sp, #12
 801f544:	af00      	add	r7, sp, #0
 801f546:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	681b      	ldr	r3, [r3, #0]
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	d101      	bne.n	801f554 <sys_sem_valid+0x14>
    return 0;
 801f550:	2300      	movs	r3, #0
 801f552:	e000      	b.n	801f556 <sys_sem_valid+0x16>
  else
    return 1;
 801f554:	2301      	movs	r3, #1
}
 801f556:	4618      	mov	r0, r3
 801f558:	370c      	adds	r7, #12
 801f55a:	46bd      	mov	sp, r7
 801f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f560:	4770      	bx	lr

0801f562 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801f562:	b480      	push	{r7}
 801f564:	b083      	sub	sp, #12
 801f566:	af00      	add	r7, sp, #0
 801f568:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	2200      	movs	r2, #0
 801f56e:	601a      	str	r2, [r3, #0]
}
 801f570:	bf00      	nop
 801f572:	370c      	adds	r7, #12
 801f574:	46bd      	mov	sp, r7
 801f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f57a:	4770      	bx	lr

0801f57c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801f57c:	b580      	push	{r7, lr}
 801f57e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801f580:	2000      	movs	r0, #0
 801f582:	f7ed fcfb 	bl	800cf7c <osMutexNew>
 801f586:	4603      	mov	r3, r0
 801f588:	4a01      	ldr	r2, [pc, #4]	@ (801f590 <sys_init+0x14>)
 801f58a:	6013      	str	r3, [r2, #0]
#endif
}
 801f58c:	bf00      	nop
 801f58e:	bd80      	pop	{r7, pc}
 801f590:	20022c08 	.word	0x20022c08

0801f594 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801f594:	b580      	push	{r7, lr}
 801f596:	b082      	sub	sp, #8
 801f598:	af00      	add	r7, sp, #0
 801f59a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801f59c:	2000      	movs	r0, #0
 801f59e:	f7ed fced 	bl	800cf7c <osMutexNew>
 801f5a2:	4602      	mov	r2, r0
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d102      	bne.n	801f5b6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801f5b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f5b4:	e000      	b.n	801f5b8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801f5b6:	2300      	movs	r3, #0
}
 801f5b8:	4618      	mov	r0, r3
 801f5ba:	3708      	adds	r7, #8
 801f5bc:	46bd      	mov	sp, r7
 801f5be:	bd80      	pop	{r7, pc}

0801f5c0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801f5c0:	b580      	push	{r7, lr}
 801f5c2:	b082      	sub	sp, #8
 801f5c4:	af00      	add	r7, sp, #0
 801f5c6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	681b      	ldr	r3, [r3, #0]
 801f5cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f5d0:	4618      	mov	r0, r3
 801f5d2:	f7ed fd6d 	bl	800d0b0 <osMutexAcquire>
#endif
}
 801f5d6:	bf00      	nop
 801f5d8:	3708      	adds	r7, #8
 801f5da:	46bd      	mov	sp, r7
 801f5dc:	bd80      	pop	{r7, pc}

0801f5de <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801f5de:	b580      	push	{r7, lr}
 801f5e0:	b082      	sub	sp, #8
 801f5e2:	af00      	add	r7, sp, #0
 801f5e4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	681b      	ldr	r3, [r3, #0]
 801f5ea:	4618      	mov	r0, r3
 801f5ec:	f7ed fdbe 	bl	800d16c <osMutexRelease>
}
 801f5f0:	bf00      	nop
 801f5f2:	3708      	adds	r7, #8
 801f5f4:	46bd      	mov	sp, r7
 801f5f6:	bd80      	pop	{r7, pc}

0801f5f8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801f5f8:	b580      	push	{r7, lr}
 801f5fa:	b08e      	sub	sp, #56	@ 0x38
 801f5fc:	af00      	add	r7, sp, #0
 801f5fe:	60f8      	str	r0, [r7, #12]
 801f600:	60b9      	str	r1, [r7, #8]
 801f602:	607a      	str	r2, [r7, #4]
 801f604:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801f606:	f107 0314 	add.w	r3, r7, #20
 801f60a:	2224      	movs	r2, #36	@ 0x24
 801f60c:	2100      	movs	r1, #0
 801f60e:	4618      	mov	r0, r3
 801f610:	f001 fad4 	bl	8020bbc <memset>
 801f614:	68fb      	ldr	r3, [r7, #12]
 801f616:	617b      	str	r3, [r7, #20]
 801f618:	683b      	ldr	r3, [r7, #0]
 801f61a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f61c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f61e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801f620:	f107 0314 	add.w	r3, r7, #20
 801f624:	461a      	mov	r2, r3
 801f626:	6879      	ldr	r1, [r7, #4]
 801f628:	68b8      	ldr	r0, [r7, #8]
 801f62a:	f7ed fab5 	bl	800cb98 <osThreadNew>
 801f62e:	4603      	mov	r3, r0
#endif
}
 801f630:	4618      	mov	r0, r3
 801f632:	3738      	adds	r7, #56	@ 0x38
 801f634:	46bd      	mov	sp, r7
 801f636:	bd80      	pop	{r7, pc}

0801f638 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801f638:	b580      	push	{r7, lr}
 801f63a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801f63c:	4b04      	ldr	r3, [pc, #16]	@ (801f650 <sys_arch_protect+0x18>)
 801f63e:	681b      	ldr	r3, [r3, #0]
 801f640:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f644:	4618      	mov	r0, r3
 801f646:	f7ed fd33 	bl	800d0b0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801f64a:	2301      	movs	r3, #1
}
 801f64c:	4618      	mov	r0, r3
 801f64e:	bd80      	pop	{r7, pc}
 801f650:	20022c08 	.word	0x20022c08

0801f654 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801f654:	b580      	push	{r7, lr}
 801f656:	b082      	sub	sp, #8
 801f658:	af00      	add	r7, sp, #0
 801f65a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801f65c:	4b04      	ldr	r3, [pc, #16]	@ (801f670 <sys_arch_unprotect+0x1c>)
 801f65e:	681b      	ldr	r3, [r3, #0]
 801f660:	4618      	mov	r0, r3
 801f662:	f7ed fd83 	bl	800d16c <osMutexRelease>
}
 801f666:	bf00      	nop
 801f668:	3708      	adds	r7, #8
 801f66a:	46bd      	mov	sp, r7
 801f66c:	bd80      	pop	{r7, pc}
 801f66e:	bf00      	nop
 801f670:	20022c08 	.word	0x20022c08

0801f674 <AdcTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void AdcTestTask(void)
{
 801f674:	b580      	push	{r7, lr}
 801f676:	b0ca      	sub	sp, #296	@ 0x128
 801f678:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("adc waiting for messages\n");
 801f67a:	4833      	ldr	r0, [pc, #204]	@ (801f748 <AdcTestTask+0xd4>)
 801f67c:	f001 f9ae 	bl	80209dc <puts>
		if(osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f680:	4b32      	ldr	r3, [pc, #200]	@ (801f74c <AdcTestTask+0xd8>)
 801f682:	6818      	ldr	r0, [r3, #0]
 801f684:	f107 0114 	add.w	r1, r7, #20
 801f688:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f68c:	2200      	movs	r2, #0
 801f68e:	f7ee f847 	bl	800d720 <osMessageQueueGet>
 801f692:	4603      	mov	r3, r0
 801f694:	2b00      	cmp	r3, #0
 801f696:	d153      	bne.n	801f740 <AdcTestTask+0xcc>
		{
			printf("adc received test ID: %lu\n", test_data.test_id);
 801f698:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f69c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f6a0:	689b      	ldr	r3, [r3, #8]
 801f6a2:	4619      	mov	r1, r3
 801f6a4:	482a      	ldr	r0, [pc, #168]	@ (801f750 <AdcTestTask+0xdc>)
 801f6a6:	f001 f929 	bl	80208fc <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f6aa:	2300      	movs	r3, #0
 801f6ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f6b0:	e00d      	b.n	801f6ce <AdcTestTask+0x5a>
			{
				result = ADC_Test_Perform();
 801f6b2:	f000 f851 	bl	801f758 <ADC_Test_Perform>
 801f6b6:	4603      	mov	r3, r0
 801f6b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f6bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f6c0:	2bff      	cmp	r3, #255	@ 0xff
 801f6c2:	d00e      	beq.n	801f6e2 <AdcTestTask+0x6e>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f6c4:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f6c8:	3301      	adds	r3, #1
 801f6ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f6ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f6d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f6d6:	7b1b      	ldrb	r3, [r3, #12]
 801f6d8:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f6dc:	429a      	cmp	r2, r3
 801f6de:	d3e8      	bcc.n	801f6b2 <AdcTestTask+0x3e>
 801f6e0:	e000      	b.n	801f6e4 <AdcTestTask+0x70>
					break;
 801f6e2:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f6e4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f6e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f6ec:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f6f0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f6f4:	6812      	ldr	r2, [r2, #0]
 801f6f6:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f6f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f6fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f700:	889a      	ldrh	r2, [r3, #4]
 801f702:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f706:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f70a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f70c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f710:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f714:	689a      	ldr	r2, [r3, #8]
 801f716:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f71a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f71e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f720:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f724:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f728:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f72c:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f72e:	4b09      	ldr	r3, [pc, #36]	@ (801f754 <AdcTestTask+0xe0>)
 801f730:	6818      	ldr	r0, [r3, #0]
 801f732:	1d39      	adds	r1, r7, #4
 801f734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f738:	2200      	movs	r2, #0
 801f73a:	f7ed ff7d 	bl	800d638 <osMessageQueuePut>
 801f73e:	e79c      	b.n	801f67a <AdcTestTask+0x6>
		}
		else osDelay(1);
 801f740:	2001      	movs	r0, #1
 801f742:	f7ed facf 	bl	800cce4 <osDelay>
		printf("adc waiting for messages\n");
 801f746:	e798      	b.n	801f67a <AdcTestTask+0x6>
 801f748:	08025d68 	.word	0x08025d68
 801f74c:	20000334 	.word	0x20000334
 801f750:	08025d84 	.word	0x08025d84
 801f754:	20000324 	.word	0x20000324

0801f758 <ADC_Test_Perform>:
	}
}

uint8_t ADC_Test_Perform(void)
{
 801f758:	b580      	push	{r7, lr}
 801f75a:	b082      	sub	sp, #8
 801f75c:	af00      	add	r7, sp, #0
	printf("Performing adc test\n");
#endif

	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 801f75e:	2201      	movs	r2, #1
 801f760:	490f      	ldr	r1, [pc, #60]	@ (801f7a0 <ADC_Test_Perform+0x48>)
 801f762:	4810      	ldr	r0, [pc, #64]	@ (801f7a4 <ADC_Test_Perform+0x4c>)
 801f764:	f7e2 feba 	bl	80024dc <HAL_ADC_Start_DMA>
 801f768:	4603      	mov	r3, r0
 801f76a:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 801f76c:	79fb      	ldrb	r3, [r7, #7]
 801f76e:	2b00      	cmp	r3, #0
 801f770:	d001      	beq.n	801f776 <ADC_Test_Perform+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
#endif
		return TEST_FAILED;
 801f772:	23ff      	movs	r3, #255	@ 0xff
 801f774:	e00f      	b.n	801f796 <ADC_Test_Perform+0x3e>
	}

	while (!adc_ready);
 801f776:	bf00      	nop
 801f778:	4b0b      	ldr	r3, [pc, #44]	@ (801f7a8 <ADC_Test_Perform+0x50>)
 801f77a:	681b      	ldr	r3, [r3, #0]
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	d0fb      	beq.n	801f778 <ADC_Test_Perform+0x20>
	adc_ready=0;
 801f780:	4b09      	ldr	r3, [pc, #36]	@ (801f7a8 <ADC_Test_Perform+0x50>)
 801f782:	2200      	movs	r2, #0
 801f784:	601a      	str	r2, [r3, #0]

#ifdef PRINT_TESTS_DEBUG
	printf("adc value = %d\n",adc_buf[0]);
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 801f786:	4b06      	ldr	r3, [pc, #24]	@ (801f7a0 <ADC_Test_Perform+0x48>)
 801f788:	881b      	ldrh	r3, [r3, #0]
 801f78a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801f78e:	d301      	bcc.n	801f794 <ADC_Test_Perform+0x3c>
 801f790:	2301      	movs	r3, #1
 801f792:	e000      	b.n	801f796 <ADC_Test_Perform+0x3e>

	return TEST_FAILED;
 801f794:	23ff      	movs	r3, #255	@ 0xff
}
 801f796:	4618      	mov	r0, r3
 801f798:	3708      	adds	r7, #8
 801f79a:	46bd      	mov	sp, r7
 801f79c:	bd80      	pop	{r7, pc}
 801f79e:	bf00      	nop
 801f7a0:	20022c0c 	.word	0x20022c0c
 801f7a4:	2000022c 	.word	0x2000022c
 801f7a8:	20022e0c 	.word	0x20022e0c

0801f7ac <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801f7ac:	b580      	push	{r7, lr}
 801f7ae:	b082      	sub	sp, #8
 801f7b0:	af00      	add	r7, sp, #0
 801f7b2:	6078      	str	r0, [r7, #4]
	adc_ready=1;
 801f7b4:	4b07      	ldr	r3, [pc, #28]	@ (801f7d4 <HAL_ADC_ConvCpltCallback+0x28>)
 801f7b6:	2201      	movs	r2, #1
 801f7b8:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 801f7ba:	4807      	ldr	r0, [pc, #28]	@ (801f7d8 <HAL_ADC_ConvCpltCallback+0x2c>)
 801f7bc:	f7e2 ff8c 	bl	80026d8 <HAL_ADC_Stop_DMA>
 801f7c0:	4603      	mov	r3, r0
 801f7c2:	2b00      	cmp	r3, #0
 801f7c4:	d001      	beq.n	801f7ca <HAL_ADC_ConvCpltCallback+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
#endif
		Error_Handler();
 801f7c6:	f7e1 fd59 	bl	800127c <Error_Handler>
	}
}
 801f7ca:	bf00      	nop
 801f7cc:	3708      	adds	r7, #8
 801f7ce:	46bd      	mov	sp, r7
 801f7d0:	bd80      	pop	{r7, pc}
 801f7d2:	bf00      	nop
 801f7d4:	20022e0c 	.word	0x20022e0c
 801f7d8:	2000022c 	.word	0x2000022c

0801f7dc <TestDispatcher>:
extern osMessageQueueId_t spiQueueHandle;
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t timQueueHandle;

void TestDispatcher(void)
{
 801f7dc:	b580      	push	{r7, lr}
 801f7de:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801f7e2:	af00      	add	r7, sp, #0
	{
		//printf("IN dispatcher\n");
		InMsg_t in_msg;
		TestData_t test_data;

		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, 10) == osOK)
 801f7e4:	4b61      	ldr	r3, [pc, #388]	@ (801f96c <TestDispatcher+0x190>)
 801f7e6:	6818      	ldr	r0, [r3, #0]
 801f7e8:	4639      	mov	r1, r7
 801f7ea:	230a      	movs	r3, #10
 801f7ec:	2200      	movs	r2, #0
 801f7ee:	f7ed ff97 	bl	800d720 <osMessageQueueGet>
 801f7f2:	4603      	mov	r3, r0
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	f040 80b5 	bne.w	801f964 <TestDispatcher+0x188>
		{
			printf("Dispatcher got msg to periph %d!\n", in_msg.peripheral);
 801f7fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f7fe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f802:	7b1b      	ldrb	r3, [r3, #12]
 801f804:	4619      	mov	r1, r3
 801f806:	485a      	ldr	r0, [pc, #360]	@ (801f970 <TestDispatcher+0x194>)
 801f808:	f001 f878 	bl	80208fc <iprintf>

			// load test_data
			test_data.addr = in_msg.addr;
 801f80c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f810:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f814:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801f818:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801f81c:	6812      	ldr	r2, [r2, #0]
 801f81e:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801f820:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f824:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f828:	889a      	ldrh	r2, [r3, #4]
 801f82a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f82e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f832:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801f834:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f838:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f83c:	689a      	ldr	r2, [r3, #8]
 801f83e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f842:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f846:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801f848:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f84c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f850:	7b5a      	ldrb	r2, [r3, #13]
 801f852:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f856:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f85a:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801f85c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f860:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f864:	7b9a      	ldrb	r2, [r3, #14]
 801f866:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f86a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f86e:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801f870:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f874:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f878:	7b9b      	ldrb	r3, [r3, #14]
 801f87a:	461a      	mov	r2, r3
 801f87c:	463b      	mov	r3, r7
 801f87e:	f103 010f 	add.w	r1, r3, #15
 801f882:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801f886:	330e      	adds	r3, #14
 801f888:	4618      	mov	r0, r3
 801f88a:	f001 fa0c 	bl	8020ca6 <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801f88e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f892:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f896:	7b1b      	ldrb	r3, [r3, #12]
 801f898:	f003 0302 	and.w	r3, r3, #2
 801f89c:	2b00      	cmp	r3, #0
 801f89e:	d00b      	beq.n	801f8b8 <TestDispatcher+0xdc>
			{
				printf("dispatcher sent to UART\n");
 801f8a0:	4834      	ldr	r0, [pc, #208]	@ (801f974 <TestDispatcher+0x198>)
 801f8a2:	f001 f89b 	bl	80209dc <puts>
				osMessageQueuePut(uartQueueHandle, &test_data, 0, osWaitForever);
 801f8a6:	4b34      	ldr	r3, [pc, #208]	@ (801f978 <TestDispatcher+0x19c>)
 801f8a8:	6818      	ldr	r0, [r3, #0]
 801f8aa:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f8ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8b2:	2200      	movs	r2, #0
 801f8b4:	f7ed fec0 	bl	800d638 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_I2C)
 801f8b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f8bc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f8c0:	7b1b      	ldrb	r3, [r3, #12]
 801f8c2:	f003 0308 	and.w	r3, r3, #8
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	d00b      	beq.n	801f8e2 <TestDispatcher+0x106>
			{
				printf("dispatcher sent to I2C\n");
 801f8ca:	482c      	ldr	r0, [pc, #176]	@ (801f97c <TestDispatcher+0x1a0>)
 801f8cc:	f001 f886 	bl	80209dc <puts>
				osMessageQueuePut(i2cQueueHandle, &test_data, 0, osWaitForever);
 801f8d0:	4b2b      	ldr	r3, [pc, #172]	@ (801f980 <TestDispatcher+0x1a4>)
 801f8d2:	6818      	ldr	r0, [r3, #0]
 801f8d4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f8d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8dc:	2200      	movs	r2, #0
 801f8de:	f7ed feab 	bl	800d638 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_SPI)
 801f8e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f8e6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f8ea:	7b1b      	ldrb	r3, [r3, #12]
 801f8ec:	f003 0304 	and.w	r3, r3, #4
 801f8f0:	2b00      	cmp	r3, #0
 801f8f2:	d00b      	beq.n	801f90c <TestDispatcher+0x130>
			{
				printf("dispatcher sent to SPI\n");
 801f8f4:	4823      	ldr	r0, [pc, #140]	@ (801f984 <TestDispatcher+0x1a8>)
 801f8f6:	f001 f871 	bl	80209dc <puts>
				osMessageQueuePut(spiQueueHandle, &test_data, 0, osWaitForever);
 801f8fa:	4b23      	ldr	r3, [pc, #140]	@ (801f988 <TestDispatcher+0x1ac>)
 801f8fc:	6818      	ldr	r0, [r3, #0]
 801f8fe:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f906:	2200      	movs	r2, #0
 801f908:	f7ed fe96 	bl	800d638 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_ADC)
 801f90c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f910:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f914:	7b1b      	ldrb	r3, [r3, #12]
 801f916:	f003 0310 	and.w	r3, r3, #16
 801f91a:	2b00      	cmp	r3, #0
 801f91c:	d00b      	beq.n	801f936 <TestDispatcher+0x15a>
			{
				printf("dispatcher sent to ADC\n");
 801f91e:	481b      	ldr	r0, [pc, #108]	@ (801f98c <TestDispatcher+0x1b0>)
 801f920:	f001 f85c 	bl	80209dc <puts>
				osMessageQueuePut(adcQueueHandle, &test_data, 0, osWaitForever);
 801f924:	4b1a      	ldr	r3, [pc, #104]	@ (801f990 <TestDispatcher+0x1b4>)
 801f926:	6818      	ldr	r0, [r3, #0]
 801f928:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f92c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f930:	2200      	movs	r2, #0
 801f932:	f7ed fe81 	bl	800d638 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_TIM)
 801f936:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f93a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f93e:	7b1b      	ldrb	r3, [r3, #12]
 801f940:	f003 0301 	and.w	r3, r3, #1
 801f944:	2b00      	cmp	r3, #0
 801f946:	f43f af4d 	beq.w	801f7e4 <TestDispatcher+0x8>
			{
				printf("dispatcher sent to TIM\n");
 801f94a:	4812      	ldr	r0, [pc, #72]	@ (801f994 <TestDispatcher+0x1b8>)
 801f94c:	f001 f846 	bl	80209dc <puts>
				osMessageQueuePut(timQueueHandle, &test_data, 0, osWaitForever);
 801f950:	4b11      	ldr	r3, [pc, #68]	@ (801f998 <TestDispatcher+0x1bc>)
 801f952:	6818      	ldr	r0, [r3, #0]
 801f954:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f958:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f95c:	2200      	movs	r2, #0
 801f95e:	f7ed fe6b 	bl	800d638 <osMessageQueuePut>
 801f962:	e73f      	b.n	801f7e4 <TestDispatcher+0x8>
			}
		}
		else osDelay(1);
 801f964:	2001      	movs	r0, #1
 801f966:	f7ed f9bd 	bl	800cce4 <osDelay>
	{
 801f96a:	e73b      	b.n	801f7e4 <TestDispatcher+0x8>
 801f96c:	20000320 	.word	0x20000320
 801f970:	08025da0 	.word	0x08025da0
 801f974:	08025dc4 	.word	0x08025dc4
 801f978:	20000328 	.word	0x20000328
 801f97c:	08025ddc 	.word	0x08025ddc
 801f980:	2000032c 	.word	0x2000032c
 801f984:	08025df4 	.word	0x08025df4
 801f988:	20000330 	.word	0x20000330
 801f98c:	08025e0c 	.word	0x08025e0c
 801f990:	20000334 	.word	0x20000334
 801f994:	08025e24 	.word	0x08025e24
 801f998:	20000338 	.word	0x20000338

0801f99c <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801f99c:	b580      	push	{r7, lr}
 801f99e:	b086      	sub	sp, #24
 801f9a0:	af00      	add	r7, sp, #0
 801f9a2:	60f8      	str	r0, [r7, #12]
 801f9a4:	607a      	str	r2, [r7, #4]
 801f9a6:	461a      	mov	r2, r3
 801f9a8:	460b      	mov	r3, r1
 801f9aa:	72fb      	strb	r3, [r7, #11]
 801f9ac:	4613      	mov	r3, r2
 801f9ae:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 801f9b0:	7afb      	ldrb	r3, [r7, #11]
 801f9b2:	461a      	mov	r2, r3
 801f9b4:	68f9      	ldr	r1, [r7, #12]
 801f9b6:	480b      	ldr	r0, [pc, #44]	@ (801f9e4 <Match_CRC+0x48>)
 801f9b8:	f7e3 fb18 	bl	8002fec <HAL_CRC_Calculate>
 801f9bc:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801f9be:	7abb      	ldrb	r3, [r7, #10]
 801f9c0:	461a      	mov	r2, r3
 801f9c2:	6879      	ldr	r1, [r7, #4]
 801f9c4:	4807      	ldr	r0, [pc, #28]	@ (801f9e4 <Match_CRC+0x48>)
 801f9c6:	f7e3 fb11 	bl	8002fec <HAL_CRC_Calculate>
 801f9ca:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 801f9cc:	697a      	ldr	r2, [r7, #20]
 801f9ce:	693b      	ldr	r3, [r7, #16]
 801f9d0:	429a      	cmp	r2, r3
 801f9d2:	d101      	bne.n	801f9d8 <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 801f9d4:	2301      	movs	r3, #1
 801f9d6:	e000      	b.n	801f9da <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 801f9d8:	2300      	movs	r3, #0
}
 801f9da:	4618      	mov	r0, r3
 801f9dc:	3718      	adds	r7, #24
 801f9de:	46bd      	mov	sp, r7
 801f9e0:	bd80      	pop	{r7, pc}
 801f9e2:	bf00      	nop
 801f9e4:	200002d4 	.word	0x200002d4

0801f9e8 <UDP_Server_Init>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Server_Init(void)
{
 801f9e8:	b580      	push	{r7, lr}
 801f9ea:	af00      	add	r7, sp, #0
    conn_recv = netconn_new(NETCONN_UDP);
 801f9ec:	2200      	movs	r2, #0
 801f9ee:	2100      	movs	r1, #0
 801f9f0:	2020      	movs	r0, #32
 801f9f2:	f7f1 fca7 	bl	8011344 <netconn_new_with_proto_and_callback>
 801f9f6:	4603      	mov	r3, r0
 801f9f8:	4a1e      	ldr	r2, [pc, #120]	@ (801fa74 <UDP_Server_Init+0x8c>)
 801f9fa:	6013      	str	r3, [r2, #0]
	if (conn_recv == NULL)
 801f9fc:	4b1d      	ldr	r3, [pc, #116]	@ (801fa74 <UDP_Server_Init+0x8c>)
 801f9fe:	681b      	ldr	r3, [r3, #0]
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d104      	bne.n	801fa0e <UDP_Server_Init+0x26>
	{
		printf("error initializing UDP receive netconn\n");
 801fa04:	481c      	ldr	r0, [pc, #112]	@ (801fa78 <UDP_Server_Init+0x90>)
 801fa06:	f000 ffe9 	bl	80209dc <puts>
		while(1);
 801fa0a:	bf00      	nop
 801fa0c:	e7fd      	b.n	801fa0a <UDP_Server_Init+0x22>
	}

	if (netconn_bind(conn_recv, IP_ADDR_ANY, SERVER_PORT) != ERR_OK)
 801fa0e:	4b19      	ldr	r3, [pc, #100]	@ (801fa74 <UDP_Server_Init+0x8c>)
 801fa10:	681b      	ldr	r3, [r3, #0]
 801fa12:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801fa16:	4919      	ldr	r1, [pc, #100]	@ (801fa7c <UDP_Server_Init+0x94>)
 801fa18:	4618      	mov	r0, r3
 801fa1a:	f7f1 fd4d 	bl	80114b8 <netconn_bind>
 801fa1e:	4603      	mov	r3, r0
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	d00c      	beq.n	801fa3e <UDP_Server_Init+0x56>
	{
		printf("error binding UDP port\n");
 801fa24:	4816      	ldr	r0, [pc, #88]	@ (801fa80 <UDP_Server_Init+0x98>)
 801fa26:	f000 ffd9 	bl	80209dc <puts>
		netconn_delete(conn_recv);
 801fa2a:	4b12      	ldr	r3, [pc, #72]	@ (801fa74 <UDP_Server_Init+0x8c>)
 801fa2c:	681b      	ldr	r3, [r3, #0]
 801fa2e:	4618      	mov	r0, r3
 801fa30:	f7f1 fd26 	bl	8011480 <netconn_delete>
		conn_recv = NULL;
 801fa34:	4b0f      	ldr	r3, [pc, #60]	@ (801fa74 <UDP_Server_Init+0x8c>)
 801fa36:	2200      	movs	r2, #0
 801fa38:	601a      	str	r2, [r3, #0]
		while(1);
 801fa3a:	bf00      	nop
 801fa3c:	e7fd      	b.n	801fa3a <UDP_Server_Init+0x52>
	}

	netconn_set_recvtimeout(conn_recv, 100);
 801fa3e:	4b0d      	ldr	r3, [pc, #52]	@ (801fa74 <UDP_Server_Init+0x8c>)
 801fa40:	681b      	ldr	r3, [r3, #0]
 801fa42:	2264      	movs	r2, #100	@ 0x64
 801fa44:	61da      	str	r2, [r3, #28]

	conn_send = netconn_new(NETCONN_UDP);
 801fa46:	2200      	movs	r2, #0
 801fa48:	2100      	movs	r1, #0
 801fa4a:	2020      	movs	r0, #32
 801fa4c:	f7f1 fc7a 	bl	8011344 <netconn_new_with_proto_and_callback>
 801fa50:	4603      	mov	r3, r0
 801fa52:	4a0c      	ldr	r2, [pc, #48]	@ (801fa84 <UDP_Server_Init+0x9c>)
 801fa54:	6013      	str	r3, [r2, #0]
	if (conn_send == NULL)
 801fa56:	4b0b      	ldr	r3, [pc, #44]	@ (801fa84 <UDP_Server_Init+0x9c>)
 801fa58:	681b      	ldr	r3, [r3, #0]
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d104      	bne.n	801fa68 <UDP_Server_Init+0x80>
	{
		printf("error initializing UDP send netconn\n");
 801fa5e:	480a      	ldr	r0, [pc, #40]	@ (801fa88 <UDP_Server_Init+0xa0>)
 801fa60:	f000 ffbc 	bl	80209dc <puts>
		while(1);
 801fa64:	bf00      	nop
 801fa66:	e7fd      	b.n	801fa64 <UDP_Server_Init+0x7c>
	}

	printf("UDP init success\n");
 801fa68:	4808      	ldr	r0, [pc, #32]	@ (801fa8c <UDP_Server_Init+0xa4>)
 801fa6a:	f000 ffb7 	bl	80209dc <puts>
}
 801fa6e:	bf00      	nop
 801fa70:	bd80      	pop	{r7, pc}
 801fa72:	bf00      	nop
 801fa74:	20022e10 	.word	0x20022e10
 801fa78:	08025e3c 	.word	0x08025e3c
 801fa7c:	08026420 	.word	0x08026420
 801fa80:	08025e64 	.word	0x08025e64
 801fa84:	20022e14 	.word	0x20022e14
 801fa88:	08025e7c 	.word	0x08025e7c
 801fa8c:	08025ea0 	.word	0x08025ea0

0801fa90 <UDP_Listen>:

void UDP_Listen(void)
{
 801fa90:	b590      	push	{r4, r7, lr}
 801fa92:	b0c9      	sub	sp, #292	@ 0x124
 801fa94:	af00      	add	r7, sp, #0
	printf("Listening started\n");
 801fa96:	4864      	ldr	r0, [pc, #400]	@ (801fc28 <UDP_Listen+0x198>)
 801fa98:	f000 ffa0 	bl	80209dc <puts>


	while(1)
	{
		//printf("IN listener\n");
		err = netconn_recv(conn_recv, &buf);
 801fa9c:	4b63      	ldr	r3, [pc, #396]	@ (801fc2c <UDP_Listen+0x19c>)
 801fa9e:	681b      	ldr	r3, [r3, #0]
 801faa0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 801faa4:	4611      	mov	r1, r2
 801faa6:	4618      	mov	r0, r3
 801faa8:	f7f1 ff2e 	bl	8011908 <netconn_recv>
 801faac:	4603      	mov	r3, r0
 801faae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	    if(err == ERR_OK)
 801fab2:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 801fab6:	2b00      	cmp	r3, #0
 801fab8:	f040 80a3 	bne.w	801fc02 <UDP_Listen+0x172>
		{
			printf("listener got a message\n");
 801fabc:	485c      	ldr	r0, [pc, #368]	@ (801fc30 <UDP_Listen+0x1a0>)
 801fabe:	f000 ff8d 	bl	80209dc <puts>
			// Load in_msg
			ip_addr_copy(in_msg.addr, *netbuf_fromaddr(buf));
 801fac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fac6:	689a      	ldr	r2, [r3, #8]
 801fac8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801facc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801fad0:	601a      	str	r2, [r3, #0]
			in_msg.port = netbuf_fromport(buf);
 801fad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fad6:	899a      	ldrh	r2, [r3, #12]
 801fad8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801fadc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801fae0:	809a      	strh	r2, [r3, #4]

			n_read = 0;
 801fae2:	2300      	movs	r3, #0
 801fae4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
			netbuf_copy_partial(buf, &in_msg.test_id, sizeof(in_msg.test_id), n_read);
 801fae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801faec:	6818      	ldr	r0, [r3, #0]
 801faee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801faf2:	b29a      	uxth	r2, r3
 801faf4:	1d3b      	adds	r3, r7, #4
 801faf6:	f103 0108 	add.w	r1, r3, #8
 801fafa:	4613      	mov	r3, r2
 801fafc:	2204      	movs	r2, #4
 801fafe:	f7f5 fda5 	bl	801564c <pbuf_copy_partial>
			n_read += sizeof(in_msg.test_id);
 801fb02:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801fb06:	3304      	adds	r3, #4
 801fb08:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

			netbuf_copy_partial(buf, &in_msg.peripheral, 1, n_read++);
 801fb0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb10:	6818      	ldr	r0, [r3, #0]
 801fb12:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801fb16:	1c5a      	adds	r2, r3, #1
 801fb18:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 801fb1c:	b29a      	uxth	r2, r3
 801fb1e:	1d3b      	adds	r3, r7, #4
 801fb20:	f103 010c 	add.w	r1, r3, #12
 801fb24:	4613      	mov	r3, r2
 801fb26:	2201      	movs	r2, #1
 801fb28:	f7f5 fd90 	bl	801564c <pbuf_copy_partial>
			netbuf_copy_partial(buf, &in_msg.n_iter, 1, n_read++);
 801fb2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb30:	6818      	ldr	r0, [r3, #0]
 801fb32:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801fb36:	1c5a      	adds	r2, r3, #1
 801fb38:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 801fb3c:	b29a      	uxth	r2, r3
 801fb3e:	1d3b      	adds	r3, r7, #4
 801fb40:	f103 010d 	add.w	r1, r3, #13
 801fb44:	4613      	mov	r3, r2
 801fb46:	2201      	movs	r2, #1
 801fb48:	f7f5 fd80 	bl	801564c <pbuf_copy_partial>
			netbuf_copy_partial(buf, &in_msg.p_len, 1, n_read++);
 801fb4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb50:	6818      	ldr	r0, [r3, #0]
 801fb52:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801fb56:	1c5a      	adds	r2, r3, #1
 801fb58:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 801fb5c:	b29a      	uxth	r2, r3
 801fb5e:	1d3b      	adds	r3, r7, #4
 801fb60:	f103 010e 	add.w	r1, r3, #14
 801fb64:	4613      	mov	r3, r2
 801fb66:	2201      	movs	r2, #1
 801fb68:	f7f5 fd70 	bl	801564c <pbuf_copy_partial>
			netbuf_copy_partial(buf, &in_msg.payload, in_msg.p_len, n_read);
 801fb6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb70:	6818      	ldr	r0, [r3, #0]
 801fb72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801fb76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801fb7a:	7b9b      	ldrb	r3, [r3, #14]
 801fb7c:	461c      	mov	r4, r3
 801fb7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801fb82:	b29a      	uxth	r2, r3
 801fb84:	1d3b      	adds	r3, r7, #4
 801fb86:	f103 010f 	add.w	r1, r3, #15
 801fb8a:	4613      	mov	r3, r2
 801fb8c:	4622      	mov	r2, r4
 801fb8e:	f7f5 fd5d 	bl	801564c <pbuf_copy_partial>

			if (in_msg.p_len < sizeof(in_msg.payload))
				in_msg.payload[in_msg.p_len] = '\0';
 801fb92:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801fb96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801fb9a:	7b9b      	ldrb	r3, [r3, #14]
 801fb9c:	461a      	mov	r2, r3
 801fb9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801fba2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801fba6:	4413      	add	r3, r2
 801fba8:	2200      	movs	r2, #0
 801fbaa:	73da      	strb	r2, [r3, #15]
			printf("Peripheral is: %d\n", in_msg.peripheral);
 801fbac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801fbb0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801fbb4:	7b1b      	ldrb	r3, [r3, #12]
 801fbb6:	4619      	mov	r1, r3
 801fbb8:	481e      	ldr	r0, [pc, #120]	@ (801fc34 <UDP_Listen+0x1a4>)
 801fbba:	f000 fe9f 	bl	80208fc <iprintf>
			printf("n iterations is: %d\n", in_msg.n_iter);
 801fbbe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801fbc2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801fbc6:	7b5b      	ldrb	r3, [r3, #13]
 801fbc8:	4619      	mov	r1, r3
 801fbca:	481b      	ldr	r0, [pc, #108]	@ (801fc38 <UDP_Listen+0x1a8>)
 801fbcc:	f000 fe96 	bl	80208fc <iprintf>
			printf("Message is: %s\n", in_msg.payload);
 801fbd0:	1d3b      	adds	r3, r7, #4
 801fbd2:	330f      	adds	r3, #15
 801fbd4:	4619      	mov	r1, r3
 801fbd6:	4819      	ldr	r0, [pc, #100]	@ (801fc3c <UDP_Listen+0x1ac>)
 801fbd8:	f000 fe90 	bl	80208fc <iprintf>

			// send in_msg to InMsgQueue
			if (osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, 10) != osOK)
 801fbdc:	4b18      	ldr	r3, [pc, #96]	@ (801fc40 <UDP_Listen+0x1b0>)
 801fbde:	6818      	ldr	r0, [r3, #0]
 801fbe0:	1d39      	adds	r1, r7, #4
 801fbe2:	230a      	movs	r3, #10
 801fbe4:	2200      	movs	r2, #0
 801fbe6:	f7ed fd27 	bl	800d638 <osMessageQueuePut>
 801fbea:	4603      	mov	r3, r0
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d002      	beq.n	801fbf6 <UDP_Listen+0x166>
			{
				printf("inMsg full, dropped msg\n");
 801fbf0:	4814      	ldr	r0, [pc, #80]	@ (801fc44 <UDP_Listen+0x1b4>)
 801fbf2:	f000 fef3 	bl	80209dc <puts>
			}

			netbuf_delete(buf);
 801fbf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fbfa:	4618      	mov	r0, r3
 801fbfc:	f7f3 fb78 	bl	80132f0 <netbuf_delete>
 801fc00:	e74c      	b.n	801fa9c <UDP_Listen+0xc>
		}
	    else if (err == ERR_TIMEOUT)
 801fc02:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 801fc06:	f113 0f03 	cmn.w	r3, #3
 801fc0a:	d103      	bne.n	801fc14 <UDP_Listen+0x184>
	    {
	    	osDelay(1);
 801fc0c:	2001      	movs	r0, #1
 801fc0e:	f7ed f869 	bl	800cce4 <osDelay>
 801fc12:	e743      	b.n	801fa9c <UDP_Listen+0xc>
	    }
	    else
	    {
	    	printf("UDP receive error: %d\n", err);
 801fc14:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 801fc18:	4619      	mov	r1, r3
 801fc1a:	480b      	ldr	r0, [pc, #44]	@ (801fc48 <UDP_Listen+0x1b8>)
 801fc1c:	f000 fe6e 	bl	80208fc <iprintf>
	    	osDelay(1);
 801fc20:	2001      	movs	r0, #1
 801fc22:	f7ed f85f 	bl	800cce4 <osDelay>
		err = netconn_recv(conn_recv, &buf);
 801fc26:	e739      	b.n	801fa9c <UDP_Listen+0xc>
 801fc28:	08025eb4 	.word	0x08025eb4
 801fc2c:	20022e10 	.word	0x20022e10
 801fc30:	08025ec8 	.word	0x08025ec8
 801fc34:	08025ee0 	.word	0x08025ee0
 801fc38:	08025ef4 	.word	0x08025ef4
 801fc3c:	08025f0c 	.word	0x08025f0c
 801fc40:	20000320 	.word	0x20000320
 801fc44:	08025f1c 	.word	0x08025f1c
 801fc48:	08025f34 	.word	0x08025f34

0801fc4c <UDP_Response>:
	    }
	}
}

void UDP_Response(void)
{
 801fc4c:	b580      	push	{r7, lr}
 801fc4e:	b086      	sub	sp, #24
 801fc50:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;

	while(1)
	{
		//printf("IN responder\n");
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, 10) == osOK)
 801fc52:	4b28      	ldr	r3, [pc, #160]	@ (801fcf4 <UDP_Response+0xa8>)
 801fc54:	6818      	ldr	r0, [r3, #0]
 801fc56:	4639      	mov	r1, r7
 801fc58:	230a      	movs	r3, #10
 801fc5a:	2200      	movs	r2, #0
 801fc5c:	f7ed fd60 	bl	800d720 <osMessageQueueGet>
 801fc60:	4603      	mov	r3, r0
 801fc62:	2b00      	cmp	r3, #0
 801fc64:	d142      	bne.n	801fcec <UDP_Response+0xa0>
		{
			printf("responder got a response to send\n");
 801fc66:	4824      	ldr	r0, [pc, #144]	@ (801fcf8 <UDP_Response+0xac>)
 801fc68:	f000 feb8 	bl	80209dc <puts>
			//Load response buffer
			buf = netbuf_new();
 801fc6c:	f7f3 fb2c 	bl	80132c8 <netbuf_new>
 801fc70:	6178      	str	r0, [r7, #20]
			if (!buf)
 801fc72:	697b      	ldr	r3, [r7, #20]
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	d103      	bne.n	801fc80 <UDP_Response+0x34>
			{
				osDelay(1);
 801fc78:	2001      	movs	r0, #1
 801fc7a:	f7ed f833 	bl	800cce4 <osDelay>
				continue;
 801fc7e:	e038      	b.n	801fcf2 <UDP_Response+0xa6>
			}

			void *data = netbuf_alloc(buf, RESPONSE_SIZE);
 801fc80:	2105      	movs	r1, #5
 801fc82:	6978      	ldr	r0, [r7, #20]
 801fc84:	f7f3 fb54 	bl	8013330 <netbuf_alloc>
 801fc88:	6138      	str	r0, [r7, #16]
			if (!data)
 801fc8a:	693b      	ldr	r3, [r7, #16]
 801fc8c:	2b00      	cmp	r3, #0
 801fc8e:	d103      	bne.n	801fc98 <UDP_Response+0x4c>
			{
			    netbuf_delete(buf);
 801fc90:	6978      	ldr	r0, [r7, #20]
 801fc92:	f7f3 fb2d 	bl	80132f0 <netbuf_delete>
			    continue;
 801fc96:	e02c      	b.n	801fcf2 <UDP_Response+0xa6>
			}
			memcpy(data, &out_msg.test_id, sizeof(out_msg.test_id));
 801fc98:	68ba      	ldr	r2, [r7, #8]
 801fc9a:	693b      	ldr	r3, [r7, #16]
 801fc9c:	601a      	str	r2, [r3, #0]
			((uint8_t *)data)[sizeof(out_msg.test_id)] = out_msg.test_result;
 801fc9e:	693b      	ldr	r3, [r7, #16]
 801fca0:	3304      	adds	r3, #4
 801fca2:	7b3a      	ldrb	r2, [r7, #12]
 801fca4:	701a      	strb	r2, [r3, #0]

			// Send response
			if (netconn_connect(conn_send, &out_msg.addr, out_msg.port) == ERR_OK)
 801fca6:	4b15      	ldr	r3, [pc, #84]	@ (801fcfc <UDP_Response+0xb0>)
 801fca8:	681b      	ldr	r3, [r3, #0]
 801fcaa:	88ba      	ldrh	r2, [r7, #4]
 801fcac:	4639      	mov	r1, r7
 801fcae:	4618      	mov	r0, r3
 801fcb0:	f7f1 fc3a 	bl	8011528 <netconn_connect>
 801fcb4:	4603      	mov	r3, r0
 801fcb6:	2b00      	cmp	r3, #0
 801fcb8:	d111      	bne.n	801fcde <UDP_Response+0x92>
			{
				if (netconn_send(conn_send, buf) != ERR_OK)
 801fcba:	4b10      	ldr	r3, [pc, #64]	@ (801fcfc <UDP_Response+0xb0>)
 801fcbc:	681b      	ldr	r3, [r3, #0]
 801fcbe:	6979      	ldr	r1, [r7, #20]
 801fcc0:	4618      	mov	r0, r3
 801fcc2:	f7f1 fe9b 	bl	80119fc <netconn_send>
 801fcc6:	4603      	mov	r3, r0
 801fcc8:	2b00      	cmp	r3, #0
 801fcca:	d002      	beq.n	801fcd2 <UDP_Response+0x86>
				{
					printf("Error sending response\n");
 801fccc:	480c      	ldr	r0, [pc, #48]	@ (801fd00 <UDP_Response+0xb4>)
 801fcce:	f000 fe85 	bl	80209dc <puts>
				}
				netconn_disconnect(conn_send);
 801fcd2:	4b0a      	ldr	r3, [pc, #40]	@ (801fcfc <UDP_Response+0xb0>)
 801fcd4:	681b      	ldr	r3, [r3, #0]
 801fcd6:	4618      	mov	r0, r3
 801fcd8:	f7f1 fc5e 	bl	8011598 <netconn_disconnect>
 801fcdc:	e002      	b.n	801fce4 <UDP_Response+0x98>
			}
			else
			{
				printf("Error connecting to client\n");
 801fcde:	4809      	ldr	r0, [pc, #36]	@ (801fd04 <UDP_Response+0xb8>)
 801fce0:	f000 fe7c 	bl	80209dc <puts>
			}
			netbuf_delete(buf);
 801fce4:	6978      	ldr	r0, [r7, #20]
 801fce6:	f7f3 fb03 	bl	80132f0 <netbuf_delete>
 801fcea:	e7b2      	b.n	801fc52 <UDP_Response+0x6>
		}
		else
		{
			osDelay(1);
 801fcec:	2001      	movs	r0, #1
 801fcee:	f7ec fff9 	bl	800cce4 <osDelay>
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, 10) == osOK)
 801fcf2:	e7ae      	b.n	801fc52 <UDP_Response+0x6>
 801fcf4:	20000324 	.word	0x20000324
 801fcf8:	08025f4c 	.word	0x08025f4c
 801fcfc:	20022e14 	.word	0x20022e14
 801fd00:	08025f70 	.word	0x08025f70
 801fd04:	08025f88 	.word	0x08025f88

0801fd08 <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 801fd08:	b580      	push	{r7, lr}
 801fd0a:	b0ca      	sub	sp, #296	@ 0x128
 801fd0c:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("i2c waiting for messages\n");
 801fd0e:	4838      	ldr	r0, [pc, #224]	@ (801fdf0 <I2cTestTask+0xe8>)
 801fd10:	f000 fe64 	bl	80209dc <puts>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fd14:	4b37      	ldr	r3, [pc, #220]	@ (801fdf4 <I2cTestTask+0xec>)
 801fd16:	6818      	ldr	r0, [r3, #0]
 801fd18:	f107 0114 	add.w	r1, r7, #20
 801fd1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fd20:	2200      	movs	r2, #0
 801fd22:	f7ed fcfd 	bl	800d720 <osMessageQueueGet>
 801fd26:	4603      	mov	r3, r0
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	d15d      	bne.n	801fde8 <I2cTestTask+0xe0>
		{
			printf("i2c received test ID: %lu\n", test_data.test_id);
 801fd2c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd30:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fd34:	689b      	ldr	r3, [r3, #8]
 801fd36:	4619      	mov	r1, r3
 801fd38:	482f      	ldr	r0, [pc, #188]	@ (801fdf8 <I2cTestTask+0xf0>)
 801fd3a:	f000 fddf 	bl	80208fc <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fd3e:	2300      	movs	r3, #0
 801fd40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fd44:	e017      	b.n	801fd76 <I2cTestTask+0x6e>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801fd46:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fd4e:	7b5a      	ldrb	r2, [r3, #13]
 801fd50:	f107 0314 	add.w	r3, r7, #20
 801fd54:	330e      	adds	r3, #14
 801fd56:	4611      	mov	r1, r2
 801fd58:	4618      	mov	r0, r3
 801fd5a:	f000 f851 	bl	801fe00 <I2C_Test_Perform>
 801fd5e:	4603      	mov	r3, r0
 801fd60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801fd64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fd68:	2bff      	cmp	r3, #255	@ 0xff
 801fd6a:	d00e      	beq.n	801fd8a <I2cTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fd6c:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fd70:	3301      	adds	r3, #1
 801fd72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fd76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fd7e:	7b1b      	ldrb	r3, [r3, #12]
 801fd80:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fd84:	429a      	cmp	r2, r3
 801fd86:	d3de      	bcc.n	801fd46 <I2cTestTask+0x3e>
 801fd88:	e000      	b.n	801fd8c <I2cTestTask+0x84>
					break;
 801fd8a:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fd8c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd90:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fd94:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fd98:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801fd9c:	6812      	ldr	r2, [r2, #0]
 801fd9e:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fda0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fda4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fda8:	889a      	ldrh	r2, [r3, #4]
 801fdaa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fdae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fdb2:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801fdb4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fdb8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fdbc:	689a      	ldr	r2, [r3, #8]
 801fdbe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fdc2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fdc6:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fdc8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fdcc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fdd0:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fdd4:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fdd6:	4b09      	ldr	r3, [pc, #36]	@ (801fdfc <I2cTestTask+0xf4>)
 801fdd8:	6818      	ldr	r0, [r3, #0]
 801fdda:	1d39      	adds	r1, r7, #4
 801fddc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fde0:	2200      	movs	r2, #0
 801fde2:	f7ed fc29 	bl	800d638 <osMessageQueuePut>
 801fde6:	e792      	b.n	801fd0e <I2cTestTask+0x6>
		}
		else osDelay(1);
 801fde8:	2001      	movs	r0, #1
 801fdea:	f7ec ff7b 	bl	800cce4 <osDelay>
		printf("i2c waiting for messages\n");
 801fdee:	e78e      	b.n	801fd0e <I2cTestTask+0x6>
 801fdf0:	08025fa4 	.word	0x08025fa4
 801fdf4:	2000032c 	.word	0x2000032c
 801fdf8:	08025fc0 	.word	0x08025fc0
 801fdfc:	20000324 	.word	0x20000324

0801fe00 <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801fe00:	b590      	push	{r4, r7, lr}
 801fe02:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801fe06:	af00      	add	r7, sp, #0
 801fe08:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe0c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fe10:	6018      	str	r0, [r3, #0]
 801fe12:	460a      	mov	r2, r1
 801fe14:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe18:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fe1c:	701a      	strb	r2, [r3, #0]
	printf("Performing i2c test\n");
#endif

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 801fe1e:	4b4d      	ldr	r3, [pc, #308]	@ (801ff54 <I2C_Test_Perform+0x154>)
 801fe20:	2200      	movs	r2, #0
 801fe22:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 801fe24:	4b4c      	ldr	r3, [pc, #304]	@ (801ff58 <I2C_Test_Perform+0x158>)
 801fe26:	2200      	movs	r2, #0
 801fe28:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 801fe2a:	4b4c      	ldr	r3, [pc, #304]	@ (801ff5c <I2C_Test_Perform+0x15c>)
 801fe2c:	2200      	movs	r2, #0
 801fe2e:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 801fe30:	4b4b      	ldr	r3, [pc, #300]	@ (801ff60 <I2C_Test_Perform+0x160>)
 801fe32:	2200      	movs	r2, #0
 801fe34:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 801fe36:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe3a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fe3e:	781b      	ldrb	r3, [r3, #0]
 801fe40:	b29a      	uxth	r2, r3
 801fe42:	f107 0308 	add.w	r3, r7, #8
 801fe46:	4619      	mov	r1, r3
 801fe48:	4846      	ldr	r0, [pc, #280]	@ (801ff64 <I2C_Test_Perform+0x164>)
 801fe4a:	f7e5 fe47 	bl	8005adc <HAL_I2C_Slave_Receive_DMA>
 801fe4e:	4603      	mov	r3, r0
 801fe50:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fe54:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	d001      	beq.n	801fe60 <I2C_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
#endif
		return TEST_FAILED;
 801fe5c:	23ff      	movs	r3, #255	@ 0xff
 801fe5e:	e074      	b.n	801ff4a <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 801fe60:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe64:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fe68:	781b      	ldrb	r3, [r3, #0]
 801fe6a:	b29b      	uxth	r3, r3
 801fe6c:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 801fe70:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 801fe74:	6812      	ldr	r2, [r2, #0]
 801fe76:	2114      	movs	r1, #20
 801fe78:	483b      	ldr	r0, [pc, #236]	@ (801ff68 <I2C_Test_Perform+0x168>)
 801fe7a:	f7e5 fb3f 	bl	80054fc <HAL_I2C_Master_Transmit_DMA>
 801fe7e:	4603      	mov	r3, r0
 801fe80:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fe84:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d001      	beq.n	801fe90 <I2C_Test_Perform+0x90>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
#endif
		return TEST_FAILED;
 801fe8c:	23ff      	movs	r3, #255	@ 0xff
 801fe8e:	e05c      	b.n	801ff4a <I2C_Test_Perform+0x14a>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 801fe90:	bf00      	nop
 801fe92:	4b33      	ldr	r3, [pc, #204]	@ (801ff60 <I2C_Test_Perform+0x160>)
 801fe94:	781b      	ldrb	r3, [r3, #0]
 801fe96:	b2db      	uxtb	r3, r3
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d0fa      	beq.n	801fe92 <I2C_Test_Perform+0x92>
 801fe9c:	4b2d      	ldr	r3, [pc, #180]	@ (801ff54 <I2C_Test_Perform+0x154>)
 801fe9e:	781b      	ldrb	r3, [r3, #0]
 801fea0:	b2db      	uxtb	r3, r3
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	d0f5      	beq.n	801fe92 <I2C_Test_Perform+0x92>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 801fea6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801feaa:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801feae:	781b      	ldrb	r3, [r3, #0]
 801feb0:	b29b      	uxth	r3, r3
 801feb2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801feb6:	2114      	movs	r1, #20
 801feb8:	482b      	ldr	r0, [pc, #172]	@ (801ff68 <I2C_Test_Perform+0x168>)
 801feba:	f7e5 fc33 	bl	8005724 <HAL_I2C_Master_Receive_DMA>
 801febe:	4603      	mov	r3, r0
 801fec0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fec4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fec8:	2b00      	cmp	r3, #0
 801feca:	d001      	beq.n	801fed0 <I2C_Test_Perform+0xd0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
#endif
		return TEST_FAILED;
 801fecc:	23ff      	movs	r3, #255	@ 0xff
 801fece:	e03c      	b.n	801ff4a <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 801fed0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fed4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fed8:	781b      	ldrb	r3, [r3, #0]
 801feda:	b29a      	uxth	r2, r3
 801fedc:	f107 0308 	add.w	r3, r7, #8
 801fee0:	4619      	mov	r1, r3
 801fee2:	4820      	ldr	r0, [pc, #128]	@ (801ff64 <I2C_Test_Perform+0x164>)
 801fee4:	f7e5 fd0e 	bl	8005904 <HAL_I2C_Slave_Transmit_DMA>
 801fee8:	4603      	mov	r3, r0
 801feea:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801feee:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fef2:	2b00      	cmp	r3, #0
 801fef4:	d001      	beq.n	801fefa <I2C_Test_Perform+0xfa>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
#endif
		return TEST_FAILED;
 801fef6:	23ff      	movs	r3, #255	@ 0xff
 801fef8:	e027      	b.n	801ff4a <I2C_Test_Perform+0x14a>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 801fefa:	bf00      	nop
 801fefc:	4b16      	ldr	r3, [pc, #88]	@ (801ff58 <I2C_Test_Perform+0x158>)
 801fefe:	781b      	ldrb	r3, [r3, #0]
 801ff00:	b2db      	uxtb	r3, r3
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	d0fa      	beq.n	801fefc <I2C_Test_Perform+0xfc>
 801ff06:	4b15      	ldr	r3, [pc, #84]	@ (801ff5c <I2C_Test_Perform+0x15c>)
 801ff08:	781b      	ldrb	r3, [r3, #0]
 801ff0a:	b2db      	uxtb	r3, r3
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	d0f5      	beq.n	801fefc <I2C_Test_Perform+0xfc>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801ff10:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff14:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff18:	781c      	ldrb	r4, [r3, #0]
 801ff1a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801ff1e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff22:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff26:	7819      	ldrb	r1, [r3, #0]
 801ff28:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff2c:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801ff30:	4623      	mov	r3, r4
 801ff32:	6800      	ldr	r0, [r0, #0]
 801ff34:	f7ff fd32 	bl	801f99c <Match_CRC>
 801ff38:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801ff3c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801ff40:	2b01      	cmp	r3, #1
 801ff42:	d101      	bne.n	801ff48 <I2C_Test_Perform+0x148>
 801ff44:	2301      	movs	r3, #1
 801ff46:	e000      	b.n	801ff4a <I2C_Test_Perform+0x14a>

	return TEST_FAILED;
 801ff48:	23ff      	movs	r3, #255	@ 0xff
}
 801ff4a:	4618      	mov	r0, r3
 801ff4c:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801ff50:	46bd      	mov	sp, r7
 801ff52:	bd90      	pop	{r4, r7, pc}
 801ff54:	20022e18 	.word	0x20022e18
 801ff58:	20022e19 	.word	0x20022e19
 801ff5c:	20022e1a 	.word	0x20022e1a
 801ff60:	20022e1b 	.word	0x20022e1b
 801ff64:	20000394 	.word	0x20000394
 801ff68:	20000340 	.word	0x20000340

0801ff6c <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801ff6c:	b480      	push	{r7}
 801ff6e:	b083      	sub	sp, #12
 801ff70:	af00      	add	r7, sp, #0
 801ff72:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 801ff74:	687b      	ldr	r3, [r7, #4]
 801ff76:	4a06      	ldr	r2, [pc, #24]	@ (801ff90 <HAL_I2C_MasterTxCpltCallback+0x24>)
 801ff78:	4293      	cmp	r3, r2
 801ff7a:	d102      	bne.n	801ff82 <HAL_I2C_MasterTxCpltCallback+0x16>
 801ff7c:	4b05      	ldr	r3, [pc, #20]	@ (801ff94 <HAL_I2C_MasterTxCpltCallback+0x28>)
 801ff7e:	2201      	movs	r2, #1
 801ff80:	701a      	strb	r2, [r3, #0]
}
 801ff82:	bf00      	nop
 801ff84:	370c      	adds	r7, #12
 801ff86:	46bd      	mov	sp, r7
 801ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff8c:	4770      	bx	lr
 801ff8e:	bf00      	nop
 801ff90:	20000340 	.word	0x20000340
 801ff94:	20022e18 	.word	0x20022e18

0801ff98 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801ff98:	b480      	push	{r7}
 801ff9a:	b083      	sub	sp, #12
 801ff9c:	af00      	add	r7, sp, #0
 801ff9e:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 801ffa0:	687b      	ldr	r3, [r7, #4]
 801ffa2:	4a06      	ldr	r2, [pc, #24]	@ (801ffbc <HAL_I2C_MasterRxCpltCallback+0x24>)
 801ffa4:	4293      	cmp	r3, r2
 801ffa6:	d102      	bne.n	801ffae <HAL_I2C_MasterRxCpltCallback+0x16>
 801ffa8:	4b05      	ldr	r3, [pc, #20]	@ (801ffc0 <HAL_I2C_MasterRxCpltCallback+0x28>)
 801ffaa:	2201      	movs	r2, #1
 801ffac:	701a      	strb	r2, [r3, #0]
}
 801ffae:	bf00      	nop
 801ffb0:	370c      	adds	r7, #12
 801ffb2:	46bd      	mov	sp, r7
 801ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffb8:	4770      	bx	lr
 801ffba:	bf00      	nop
 801ffbc:	20000340 	.word	0x20000340
 801ffc0:	20022e19 	.word	0x20022e19

0801ffc4 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801ffc4:	b480      	push	{r7}
 801ffc6:	b083      	sub	sp, #12
 801ffc8:	af00      	add	r7, sp, #0
 801ffca:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	4a06      	ldr	r2, [pc, #24]	@ (801ffe8 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801ffd0:	4293      	cmp	r3, r2
 801ffd2:	d102      	bne.n	801ffda <HAL_I2C_SlaveTxCpltCallback+0x16>
 801ffd4:	4b05      	ldr	r3, [pc, #20]	@ (801ffec <HAL_I2C_SlaveTxCpltCallback+0x28>)
 801ffd6:	2201      	movs	r2, #1
 801ffd8:	701a      	strb	r2, [r3, #0]
}
 801ffda:	bf00      	nop
 801ffdc:	370c      	adds	r7, #12
 801ffde:	46bd      	mov	sp, r7
 801ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffe4:	4770      	bx	lr
 801ffe6:	bf00      	nop
 801ffe8:	20000394 	.word	0x20000394
 801ffec:	20022e1a 	.word	0x20022e1a

0801fff0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801fff0:	b480      	push	{r7}
 801fff2:	b083      	sub	sp, #12
 801fff4:	af00      	add	r7, sp, #0
 801fff6:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	4a06      	ldr	r2, [pc, #24]	@ (8020014 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801fffc:	4293      	cmp	r3, r2
 801fffe:	d102      	bne.n	8020006 <HAL_I2C_SlaveRxCpltCallback+0x16>
 8020000:	4b05      	ldr	r3, [pc, #20]	@ (8020018 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8020002:	2201      	movs	r2, #1
 8020004:	701a      	strb	r2, [r3, #0]
}
 8020006:	bf00      	nop
 8020008:	370c      	adds	r7, #12
 802000a:	46bd      	mov	sp, r7
 802000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020010:	4770      	bx	lr
 8020012:	bf00      	nop
 8020014:	20000394 	.word	0x20000394
 8020018:	20022e1b 	.word	0x20022e1b

0802001c <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 802001c:	b580      	push	{r7, lr}
 802001e:	b0ca      	sub	sp, #296	@ 0x128
 8020020:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("spi waiting for messages\n");
 8020022:	4838      	ldr	r0, [pc, #224]	@ (8020104 <SpiTestTask+0xe8>)
 8020024:	f000 fcda 	bl	80209dc <puts>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 8020028:	4b37      	ldr	r3, [pc, #220]	@ (8020108 <SpiTestTask+0xec>)
 802002a:	6818      	ldr	r0, [r3, #0]
 802002c:	f107 0114 	add.w	r1, r7, #20
 8020030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020034:	2200      	movs	r2, #0
 8020036:	f7ed fb73 	bl	800d720 <osMessageQueueGet>
 802003a:	4603      	mov	r3, r0
 802003c:	2b00      	cmp	r3, #0
 802003e:	d15d      	bne.n	80200fc <SpiTestTask+0xe0>
		{
			printf("spi received test ID: %lu\n", test_data.test_id);
 8020040:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020044:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020048:	689b      	ldr	r3, [r3, #8]
 802004a:	4619      	mov	r1, r3
 802004c:	482f      	ldr	r0, [pc, #188]	@ (802010c <SpiTestTask+0xf0>)
 802004e:	f000 fc55 	bl	80208fc <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020052:	2300      	movs	r3, #0
 8020054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020058:	e017      	b.n	802008a <SpiTestTask+0x6e>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 802005a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802005e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020062:	7b5a      	ldrb	r2, [r3, #13]
 8020064:	f107 0314 	add.w	r3, r7, #20
 8020068:	330e      	adds	r3, #14
 802006a:	4611      	mov	r1, r2
 802006c:	4618      	mov	r0, r3
 802006e:	f000 f851 	bl	8020114 <SPI_Test_Perform>
 8020072:	4603      	mov	r3, r0
 8020074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 8020078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802007c:	2bff      	cmp	r3, #255	@ 0xff
 802007e:	d00e      	beq.n	802009e <SpiTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020080:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020084:	3301      	adds	r3, #1
 8020086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 802008a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802008e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020092:	7b1b      	ldrb	r3, [r3, #12]
 8020094:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020098:	429a      	cmp	r2, r3
 802009a:	d3de      	bcc.n	802005a <SpiTestTask+0x3e>
 802009c:	e000      	b.n	80200a0 <SpiTestTask+0x84>
					break;
 802009e:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 80200a0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80200a8:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80200ac:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80200b0:	6812      	ldr	r2, [r2, #0]
 80200b2:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 80200b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80200bc:	889a      	ldrh	r2, [r3, #4]
 80200be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200c2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80200c6:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 80200c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80200d0:	689a      	ldr	r2, [r3, #8]
 80200d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200d6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80200da:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 80200dc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80200e4:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 80200e8:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 80200ea:	4b09      	ldr	r3, [pc, #36]	@ (8020110 <SpiTestTask+0xf4>)
 80200ec:	6818      	ldr	r0, [r3, #0]
 80200ee:	1d39      	adds	r1, r7, #4
 80200f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80200f4:	2200      	movs	r2, #0
 80200f6:	f7ed fa9f 	bl	800d638 <osMessageQueuePut>
 80200fa:	e792      	b.n	8020022 <SpiTestTask+0x6>
		}
		else osDelay(1);
 80200fc:	2001      	movs	r0, #1
 80200fe:	f7ec fdf1 	bl	800cce4 <osDelay>
		printf("spi waiting for messages\n");
 8020102:	e78e      	b.n	8020022 <SpiTestTask+0x6>
 8020104:	08025fdc 	.word	0x08025fdc
 8020108:	20000330 	.word	0x20000330
 802010c:	08025ff8 	.word	0x08025ff8
 8020110:	20000324 	.word	0x20000324

08020114 <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8020114:	b590      	push	{r4, r7, lr}
 8020116:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 802011a:	af00      	add	r7, sp, #0
 802011c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020120:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020124:	6018      	str	r0, [r3, #0]
 8020126:	460a      	mov	r2, r1
 8020128:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802012c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020130:	701a      	strb	r2, [r3, #0]
	printf("Performing SPI test\n");
#endif

	HAL_StatusTypeDef status;

	spi1_tx_done = 0;
 8020132:	4b4d      	ldr	r3, [pc, #308]	@ (8020268 <SPI_Test_Perform+0x154>)
 8020134:	2200      	movs	r2, #0
 8020136:	701a      	strb	r2, [r3, #0]
	spi1_rx_done = 0;
 8020138:	4b4c      	ldr	r3, [pc, #304]	@ (802026c <SPI_Test_Perform+0x158>)
 802013a:	2200      	movs	r2, #0
 802013c:	701a      	strb	r2, [r3, #0]
	spi4_tx_done = 0;
 802013e:	4b4c      	ldr	r3, [pc, #304]	@ (8020270 <SPI_Test_Perform+0x15c>)
 8020140:	2200      	movs	r2, #0
 8020142:	701a      	strb	r2, [r3, #0]
	spi4_rx_done = 0;
 8020144:	4b4b      	ldr	r3, [pc, #300]	@ (8020274 <SPI_Test_Perform+0x160>)
 8020146:	2200      	movs	r2, #0
 8020148:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 802014a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802014e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020152:	781b      	ldrb	r3, [r3, #0]
 8020154:	b29a      	uxth	r2, r3
 8020156:	f107 0308 	add.w	r3, r7, #8
 802015a:	4619      	mov	r1, r3
 802015c:	4846      	ldr	r0, [pc, #280]	@ (8020278 <SPI_Test_Perform+0x164>)
 802015e:	f7e8 fe0b 	bl	8008d78 <HAL_SPI_Receive_DMA>
 8020162:	4603      	mov	r3, r0
 8020164:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020168:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 802016c:	2b00      	cmp	r3, #0
 802016e:	d001      	beq.n	8020174 <SPI_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
#endif
		return TEST_FAILED;
 8020170:	23ff      	movs	r3, #255	@ 0xff
 8020172:	e073      	b.n	802025c <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 8020174:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020178:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802017c:	781b      	ldrb	r3, [r3, #0]
 802017e:	b29a      	uxth	r2, r3
 8020180:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020184:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020188:	6819      	ldr	r1, [r3, #0]
 802018a:	483c      	ldr	r0, [pc, #240]	@ (802027c <SPI_Test_Perform+0x168>)
 802018c:	f7e8 fd06 	bl	8008b9c <HAL_SPI_Transmit_DMA>
 8020190:	4603      	mov	r3, r0
 8020192:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020196:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 802019a:	2b00      	cmp	r3, #0
 802019c:	d001      	beq.n	80201a2 <SPI_Test_Perform+0x8e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
#endif
		return TEST_FAILED;
 802019e:	23ff      	movs	r3, #255	@ 0xff
 80201a0:	e05c      	b.n	802025c <SPI_Test_Perform+0x148>
	}
	while(!spi4_rx_done || !spi1_tx_done);
 80201a2:	bf00      	nop
 80201a4:	4b33      	ldr	r3, [pc, #204]	@ (8020274 <SPI_Test_Perform+0x160>)
 80201a6:	781b      	ldrb	r3, [r3, #0]
 80201a8:	b2db      	uxtb	r3, r3
 80201aa:	2b00      	cmp	r3, #0
 80201ac:	d0fa      	beq.n	80201a4 <SPI_Test_Perform+0x90>
 80201ae:	4b2e      	ldr	r3, [pc, #184]	@ (8020268 <SPI_Test_Perform+0x154>)
 80201b0:	781b      	ldrb	r3, [r3, #0]
 80201b2:	b2db      	uxtb	r3, r3
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d0f5      	beq.n	80201a4 <SPI_Test_Perform+0x90>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 80201b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80201bc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80201c0:	781b      	ldrb	r3, [r3, #0]
 80201c2:	b29a      	uxth	r2, r3
 80201c4:	f107 0308 	add.w	r3, r7, #8
 80201c8:	4619      	mov	r1, r3
 80201ca:	482b      	ldr	r0, [pc, #172]	@ (8020278 <SPI_Test_Perform+0x164>)
 80201cc:	f7e8 fce6 	bl	8008b9c <HAL_SPI_Transmit_DMA>
 80201d0:	4603      	mov	r3, r0
 80201d2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80201d6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d001      	beq.n	80201e2 <SPI_Test_Perform+0xce>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
#endif
		return TEST_FAILED;
 80201de:	23ff      	movs	r3, #255	@ 0xff
 80201e0:	e03c      	b.n	802025c <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 80201e2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80201e6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80201ea:	781b      	ldrb	r3, [r3, #0]
 80201ec:	b29a      	uxth	r2, r3
 80201ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80201f2:	4619      	mov	r1, r3
 80201f4:	4821      	ldr	r0, [pc, #132]	@ (802027c <SPI_Test_Perform+0x168>)
 80201f6:	f7e8 fdbf 	bl	8008d78 <HAL_SPI_Receive_DMA>
 80201fa:	4603      	mov	r3, r0
 80201fc:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020200:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020204:	2b00      	cmp	r3, #0
 8020206:	d001      	beq.n	802020c <SPI_Test_Perform+0xf8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
#endif
		return TEST_FAILED;
 8020208:	23ff      	movs	r3, #255	@ 0xff
 802020a:	e027      	b.n	802025c <SPI_Test_Perform+0x148>
	}
	while(!spi1_rx_done || !spi4_tx_done);
 802020c:	bf00      	nop
 802020e:	4b17      	ldr	r3, [pc, #92]	@ (802026c <SPI_Test_Perform+0x158>)
 8020210:	781b      	ldrb	r3, [r3, #0]
 8020212:	b2db      	uxtb	r3, r3
 8020214:	2b00      	cmp	r3, #0
 8020216:	d0fa      	beq.n	802020e <SPI_Test_Perform+0xfa>
 8020218:	4b15      	ldr	r3, [pc, #84]	@ (8020270 <SPI_Test_Perform+0x15c>)
 802021a:	781b      	ldrb	r3, [r3, #0]
 802021c:	b2db      	uxtb	r3, r3
 802021e:	2b00      	cmp	r3, #0
 8020220:	d0f5      	beq.n	802020e <SPI_Test_Perform+0xfa>

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 8020222:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020226:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802022a:	781c      	ldrb	r4, [r3, #0]
 802022c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8020230:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020234:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020238:	7819      	ldrb	r1, [r3, #0]
 802023a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802023e:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8020242:	4623      	mov	r3, r4
 8020244:	6800      	ldr	r0, [r0, #0]
 8020246:	f7ff fba9 	bl	801f99c <Match_CRC>
 802024a:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 802024e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8020252:	2b01      	cmp	r3, #1
 8020254:	d101      	bne.n	802025a <SPI_Test_Perform+0x146>
 8020256:	2301      	movs	r3, #1
 8020258:	e000      	b.n	802025c <SPI_Test_Perform+0x148>

	return TEST_FAILED;
 802025a:	23ff      	movs	r3, #255	@ 0xff
}
 802025c:	4618      	mov	r0, r3
 802025e:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8020262:	46bd      	mov	sp, r7
 8020264:	bd90      	pop	{r4, r7, pc}
 8020266:	bf00      	nop
 8020268:	20022e1c 	.word	0x20022e1c
 802026c:	20022e1d 	.word	0x20022e1d
 8020270:	20022e1e 	.word	0x20022e1e
 8020274:	20022e1f 	.word	0x20022e1f
 8020278:	200005cc 	.word	0x200005cc
 802027c:	20000568 	.word	0x20000568

08020280 <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8020280:	b480      	push	{r7}
 8020282:	b083      	sub	sp, #12
 8020284:	af00      	add	r7, sp, #0
 8020286:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_tx_done = 1;
 8020288:	687b      	ldr	r3, [r7, #4]
 802028a:	4a09      	ldr	r2, [pc, #36]	@ (80202b0 <HAL_SPI_TxCpltCallback+0x30>)
 802028c:	4293      	cmp	r3, r2
 802028e:	d102      	bne.n	8020296 <HAL_SPI_TxCpltCallback+0x16>
 8020290:	4b08      	ldr	r3, [pc, #32]	@ (80202b4 <HAL_SPI_TxCpltCallback+0x34>)
 8020292:	2201      	movs	r2, #1
 8020294:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_tx_done = 1;
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	4a07      	ldr	r2, [pc, #28]	@ (80202b8 <HAL_SPI_TxCpltCallback+0x38>)
 802029a:	4293      	cmp	r3, r2
 802029c:	d102      	bne.n	80202a4 <HAL_SPI_TxCpltCallback+0x24>
 802029e:	4b07      	ldr	r3, [pc, #28]	@ (80202bc <HAL_SPI_TxCpltCallback+0x3c>)
 80202a0:	2201      	movs	r2, #1
 80202a2:	701a      	strb	r2, [r3, #0]
}
 80202a4:	bf00      	nop
 80202a6:	370c      	adds	r7, #12
 80202a8:	46bd      	mov	sp, r7
 80202aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202ae:	4770      	bx	lr
 80202b0:	20000568 	.word	0x20000568
 80202b4:	20022e1c 	.word	0x20022e1c
 80202b8:	200005cc 	.word	0x200005cc
 80202bc:	20022e1e 	.word	0x20022e1e

080202c0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80202c0:	b480      	push	{r7}
 80202c2:	b083      	sub	sp, #12
 80202c4:	af00      	add	r7, sp, #0
 80202c6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_rx_done = 1;
 80202c8:	687b      	ldr	r3, [r7, #4]
 80202ca:	4a09      	ldr	r2, [pc, #36]	@ (80202f0 <HAL_SPI_RxCpltCallback+0x30>)
 80202cc:	4293      	cmp	r3, r2
 80202ce:	d102      	bne.n	80202d6 <HAL_SPI_RxCpltCallback+0x16>
 80202d0:	4b08      	ldr	r3, [pc, #32]	@ (80202f4 <HAL_SPI_RxCpltCallback+0x34>)
 80202d2:	2201      	movs	r2, #1
 80202d4:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_rx_done = 1;
 80202d6:	687b      	ldr	r3, [r7, #4]
 80202d8:	4a07      	ldr	r2, [pc, #28]	@ (80202f8 <HAL_SPI_RxCpltCallback+0x38>)
 80202da:	4293      	cmp	r3, r2
 80202dc:	d102      	bne.n	80202e4 <HAL_SPI_RxCpltCallback+0x24>
 80202de:	4b07      	ldr	r3, [pc, #28]	@ (80202fc <HAL_SPI_RxCpltCallback+0x3c>)
 80202e0:	2201      	movs	r2, #1
 80202e2:	701a      	strb	r2, [r3, #0]
}
 80202e4:	bf00      	nop
 80202e6:	370c      	adds	r7, #12
 80202e8:	46bd      	mov	sp, r7
 80202ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202ee:	4770      	bx	lr
 80202f0:	20000568 	.word	0x20000568
 80202f4:	20022e1d 	.word	0x20022e1d
 80202f8:	200005cc 	.word	0x200005cc
 80202fc:	20022e1f 	.word	0x20022e1f

08020300 <TimTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void TimTestTask(void)
{
 8020300:	b580      	push	{r7, lr}
 8020302:	b0ca      	sub	sp, #296	@ 0x128
 8020304:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("timer waiting for messages\n");
 8020306:	4833      	ldr	r0, [pc, #204]	@ (80203d4 <TimTestTask+0xd4>)
 8020308:	f000 fb68 	bl	80209dc <puts>
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 802030c:	4b32      	ldr	r3, [pc, #200]	@ (80203d8 <TimTestTask+0xd8>)
 802030e:	6818      	ldr	r0, [r3, #0]
 8020310:	f107 0114 	add.w	r1, r7, #20
 8020314:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020318:	2200      	movs	r2, #0
 802031a:	f7ed fa01 	bl	800d720 <osMessageQueueGet>
 802031e:	4603      	mov	r3, r0
 8020320:	2b00      	cmp	r3, #0
 8020322:	d153      	bne.n	80203cc <TimTestTask+0xcc>
		{
			printf("timer received test ID: %lu\n", test_data.test_id);
 8020324:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020328:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802032c:	689b      	ldr	r3, [r3, #8]
 802032e:	4619      	mov	r1, r3
 8020330:	482a      	ldr	r0, [pc, #168]	@ (80203dc <TimTestTask+0xdc>)
 8020332:	f000 fae3 	bl	80208fc <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020336:	2300      	movs	r3, #0
 8020338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 802033c:	e00d      	b.n	802035a <TimTestTask+0x5a>
			{
				result = TIM_Test_Perform();
 802033e:	f000 f851 	bl	80203e4 <TIM_Test_Perform>
 8020342:	4603      	mov	r3, r0
 8020344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 8020348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802034c:	2bff      	cmp	r3, #255	@ 0xff
 802034e:	d00e      	beq.n	802036e <TimTestTask+0x6e>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020350:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020354:	3301      	adds	r3, #1
 8020356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 802035a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802035e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020362:	7b1b      	ldrb	r3, [r3, #12]
 8020364:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020368:	429a      	cmp	r2, r3
 802036a:	d3e8      	bcc.n	802033e <TimTestTask+0x3e>
 802036c:	e000      	b.n	8020370 <TimTestTask+0x70>
					break;
 802036e:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020370:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020374:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020378:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 802037c:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020380:	6812      	ldr	r2, [r2, #0]
 8020382:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020384:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020388:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802038c:	889a      	ldrh	r2, [r3, #4]
 802038e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020392:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020396:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020398:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802039c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80203a0:	689a      	ldr	r2, [r3, #8]
 80203a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80203a6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80203aa:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 80203ac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80203b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80203b4:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 80203b8:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 80203ba:	4b09      	ldr	r3, [pc, #36]	@ (80203e0 <TimTestTask+0xe0>)
 80203bc:	6818      	ldr	r0, [r3, #0]
 80203be:	1d39      	adds	r1, r7, #4
 80203c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80203c4:	2200      	movs	r2, #0
 80203c6:	f7ed f937 	bl	800d638 <osMessageQueuePut>
 80203ca:	e79c      	b.n	8020306 <TimTestTask+0x6>
		}
		else osDelay(1);
 80203cc:	2001      	movs	r0, #1
 80203ce:	f7ec fc89 	bl	800cce4 <osDelay>
		printf("timer waiting for messages\n");
 80203d2:	e798      	b.n	8020306 <TimTestTask+0x6>
 80203d4:	08026014 	.word	0x08026014
 80203d8:	20000338 	.word	0x20000338
 80203dc:	08026030 	.word	0x08026030
 80203e0:	20000324 	.word	0x20000324

080203e4 <TIM_Test_Perform>:
	}
}

uint8_t TIM_Test_Perform(void)
{
 80203e4:	b580      	push	{r7, lr}
 80203e6:	b082      	sub	sp, #8
 80203e8:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing timer test\n");
#endif

	tim6_count = 0;
 80203ea:	4b27      	ldr	r3, [pc, #156]	@ (8020488 <TIM_Test_Perform+0xa4>)
 80203ec:	2200      	movs	r2, #0
 80203ee:	601a      	str	r2, [r3, #0]
	test_running = 1;
 80203f0:	4b26      	ldr	r3, [pc, #152]	@ (802048c <TIM_Test_Perform+0xa8>)
 80203f2:	2201      	movs	r2, #1
 80203f4:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim2);
 80203f6:	4826      	ldr	r0, [pc, #152]	@ (8020490 <TIM_Test_Perform+0xac>)
 80203f8:	f7e9 fc44 	bl	8009c84 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 80203fc:	4825      	ldr	r0, [pc, #148]	@ (8020494 <TIM_Test_Perform+0xb0>)
 80203fe:	f7e9 fc41 	bl	8009c84 <HAL_TIM_Base_Start>

	if(HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 8020402:	4b23      	ldr	r3, [pc, #140]	@ (8020490 <TIM_Test_Perform+0xac>)
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	3324      	adds	r3, #36	@ 0x24
 8020408:	4619      	mov	r1, r3
 802040a:	4a23      	ldr	r2, [pc, #140]	@ (8020498 <TIM_Test_Perform+0xb4>)
 802040c:	230a      	movs	r3, #10
 802040e:	4823      	ldr	r0, [pc, #140]	@ (802049c <TIM_Test_Perform+0xb8>)
 8020410:	f7e3 f840 	bl	8003494 <HAL_DMA_Start_IT>
 8020414:	4603      	mov	r3, r0
 8020416:	2b00      	cmp	r3, #0
 8020418:	d001      	beq.n	802041e <TIM_Test_Perform+0x3a>
			            (uint32_t)tim2_samples, N_SAMPLES) != HAL_OK)
	{
#ifdef PRINT_TESTS_DEBUG
	printf("Timer test: DMA init error\n");
#endif
		return TEST_FAILED;
 802041a:	23ff      	movs	r3, #255	@ 0xff
 802041c:	e02f      	b.n	802047e <TIM_Test_Perform+0x9a>
	}
    __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 802041e:	4b1d      	ldr	r3, [pc, #116]	@ (8020494 <TIM_Test_Perform+0xb0>)
 8020420:	681b      	ldr	r3, [r3, #0]
 8020422:	68da      	ldr	r2, [r3, #12]
 8020424:	4b1b      	ldr	r3, [pc, #108]	@ (8020494 <TIM_Test_Perform+0xb0>)
 8020426:	681b      	ldr	r3, [r3, #0]
 8020428:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802042c:	60da      	str	r2, [r3, #12]

	while (test_running) osDelay(1);
 802042e:	e002      	b.n	8020436 <TIM_Test_Perform+0x52>
 8020430:	2001      	movs	r0, #1
 8020432:	f7ec fc57 	bl	800cce4 <osDelay>
 8020436:	4b15      	ldr	r3, [pc, #84]	@ (802048c <TIM_Test_Perform+0xa8>)
 8020438:	681b      	ldr	r3, [r3, #0]
 802043a:	2b00      	cmp	r3, #0
 802043c:	d1f8      	bne.n	8020430 <TIM_Test_Perform+0x4c>

	HAL_TIM_Base_Stop(&htim6);
 802043e:	4815      	ldr	r0, [pc, #84]	@ (8020494 <TIM_Test_Perform+0xb0>)
 8020440:	f7e9 fc90 	bl	8009d64 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 8020444:	4812      	ldr	r0, [pc, #72]	@ (8020490 <TIM_Test_Perform+0xac>)
 8020446:	f7e9 fc8d 	bl	8009d64 <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG
	printf("Sampling complete\n");
#endif
	for (int i = 1; i < N_SAMPLES; i++)
 802044a:	2301      	movs	r3, #1
 802044c:	607b      	str	r3, [r7, #4]
 802044e:	e012      	b.n	8020476 <TIM_Test_Perform+0x92>
#ifdef PRINT_TESTS_DEBUG
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
			   tim2_samples[i] - tim2_samples[i-1]);
#endif

		if (tim2_samples[i] - tim2_samples[i-1] != EXPECTED_INTERVAL)
 8020450:	4a11      	ldr	r2, [pc, #68]	@ (8020498 <TIM_Test_Perform+0xb4>)
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	3b01      	subs	r3, #1
 802045c:	490e      	ldr	r1, [pc, #56]	@ (8020498 <TIM_Test_Perform+0xb4>)
 802045e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020462:	1ad3      	subs	r3, r2, r3
 8020464:	f24d 22f0 	movw	r2, #54000	@ 0xd2f0
 8020468:	4293      	cmp	r3, r2
 802046a:	d001      	beq.n	8020470 <TIM_Test_Perform+0x8c>
			return TEST_FAILED;
 802046c:	23ff      	movs	r3, #255	@ 0xff
 802046e:	e006      	b.n	802047e <TIM_Test_Perform+0x9a>
	for (int i = 1; i < N_SAMPLES; i++)
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	3301      	adds	r3, #1
 8020474:	607b      	str	r3, [r7, #4]
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	2b09      	cmp	r3, #9
 802047a:	dde9      	ble.n	8020450 <TIM_Test_Perform+0x6c>
	}

	return TEST_SUCCESS;
 802047c:	2301      	movs	r3, #1
}
 802047e:	4618      	mov	r0, r3
 8020480:	3708      	adds	r7, #8
 8020482:	46bd      	mov	sp, r7
 8020484:	bd80      	pop	{r7, pc}
 8020486:	bf00      	nop
 8020488:	20022e24 	.word	0x20022e24
 802048c:	20022e20 	.word	0x20022e20
 8020490:	20000800 	.word	0x20000800
 8020494:	2000084c 	.word	0x2000084c
 8020498:	20022e28 	.word	0x20022e28
 802049c:	20000898 	.word	0x20000898

080204a0 <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 80204a0:	b580      	push	{r7, lr}
 80204a2:	b0ca      	sub	sp, #296	@ 0x128
 80204a4:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("uart waiting for messages\n");
 80204a6:	4838      	ldr	r0, [pc, #224]	@ (8020588 <UartTestTask+0xe8>)
 80204a8:	f000 fa98 	bl	80209dc <puts>
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 80204ac:	4b37      	ldr	r3, [pc, #220]	@ (802058c <UartTestTask+0xec>)
 80204ae:	6818      	ldr	r0, [r3, #0]
 80204b0:	f107 0114 	add.w	r1, r7, #20
 80204b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80204b8:	2200      	movs	r2, #0
 80204ba:	f7ed f931 	bl	800d720 <osMessageQueueGet>
 80204be:	4603      	mov	r3, r0
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	d15d      	bne.n	8020580 <UartTestTask+0xe0>
		{
			printf("uart received test ID: %lu\n", test_data.test_id);
 80204c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80204c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80204cc:	689b      	ldr	r3, [r3, #8]
 80204ce:	4619      	mov	r1, r3
 80204d0:	482f      	ldr	r0, [pc, #188]	@ (8020590 <UartTestTask+0xf0>)
 80204d2:	f000 fa13 	bl	80208fc <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 80204d6:	2300      	movs	r3, #0
 80204d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80204dc:	e017      	b.n	802050e <UartTestTask+0x6e>
			{
				result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 80204de:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80204e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80204e6:	7b5a      	ldrb	r2, [r3, #13]
 80204e8:	f107 0314 	add.w	r3, r7, #20
 80204ec:	330e      	adds	r3, #14
 80204ee:	4611      	mov	r1, r2
 80204f0:	4618      	mov	r0, r3
 80204f2:	f000 f851 	bl	8020598 <UART_Test_Perform>
 80204f6:	4603      	mov	r3, r0
 80204f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 80204fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020500:	2bff      	cmp	r3, #255	@ 0xff
 8020502:	d00e      	beq.n	8020522 <UartTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020504:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020508:	3301      	adds	r3, #1
 802050a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 802050e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020512:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020516:	7b1b      	ldrb	r3, [r3, #12]
 8020518:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 802051c:	429a      	cmp	r2, r3
 802051e:	d3de      	bcc.n	80204de <UartTestTask+0x3e>
 8020520:	e000      	b.n	8020524 <UartTestTask+0x84>
					break;
 8020522:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020524:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020528:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802052c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020530:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020534:	6812      	ldr	r2, [r2, #0]
 8020536:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020538:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802053c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020540:	889a      	ldrh	r2, [r3, #4]
 8020542:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020546:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802054a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 802054c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020550:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020554:	689a      	ldr	r2, [r3, #8]
 8020556:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802055a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802055e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020560:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020564:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020568:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 802056c:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 802056e:	4b09      	ldr	r3, [pc, #36]	@ (8020594 <UartTestTask+0xf4>)
 8020570:	6818      	ldr	r0, [r3, #0]
 8020572:	1d39      	adds	r1, r7, #4
 8020574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020578:	2200      	movs	r2, #0
 802057a:	f7ed f85d 	bl	800d638 <osMessageQueuePut>
 802057e:	e792      	b.n	80204a6 <UartTestTask+0x6>
		}
		else osDelay(1);
 8020580:	2001      	movs	r0, #1
 8020582:	f7ec fbaf 	bl	800cce4 <osDelay>
		printf("uart waiting for messages\n");
 8020586:	e78e      	b.n	80204a6 <UartTestTask+0x6>
 8020588:	08026050 	.word	0x08026050
 802058c:	20000328 	.word	0x20000328
 8020590:	0802606c 	.word	0x0802606c
 8020594:	20000324 	.word	0x20000324

08020598 <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8020598:	b590      	push	{r4, r7, lr}
 802059a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 802059e:	af00      	add	r7, sp, #0
 80205a0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80205a4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80205a8:	6018      	str	r0, [r3, #0]
 80205aa:	460a      	mov	r2, r1
 80205ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80205b0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80205b4:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing uart test\n");
#endif

	uart4_rx_done = 0;
 80205b6:	4b3d      	ldr	r3, [pc, #244]	@ (80206ac <UART_Test_Perform+0x114>)
 80205b8:	2200      	movs	r2, #0
 80205ba:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 80205bc:	4b3c      	ldr	r3, [pc, #240]	@ (80206b0 <UART_Test_Perform+0x118>)
 80205be:	2200      	movs	r2, #0
 80205c0:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 80205c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80205c6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80205ca:	781b      	ldrb	r3, [r3, #0]
 80205cc:	b29a      	uxth	r2, r3
 80205ce:	f107 030c 	add.w	r3, r7, #12
 80205d2:	4619      	mov	r1, r3
 80205d4:	4837      	ldr	r0, [pc, #220]	@ (80206b4 <UART_Test_Perform+0x11c>)
 80205d6:	f7ea f981 	bl	800a8dc <HAL_UART_Receive_DMA>
 80205da:	4603      	mov	r3, r0
 80205dc:	2b00      	cmp	r3, #0
 80205de:	d001      	beq.n	80205e4 <UART_Test_Perform+0x4c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
#endif
		return TEST_FAILED;
 80205e0:	23ff      	movs	r3, #255	@ 0xff
 80205e2:	e05d      	b.n	80206a0 <UART_Test_Perform+0x108>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 80205e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80205e8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80205ec:	781b      	ldrb	r3, [r3, #0]
 80205ee:	b29a      	uxth	r2, r3
 80205f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80205f4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80205f8:	6819      	ldr	r1, [r3, #0]
 80205fa:	482f      	ldr	r0, [pc, #188]	@ (80206b8 <UART_Test_Perform+0x120>)
 80205fc:	f7ea f910 	bl	800a820 <HAL_UART_Transmit_IT>
 8020600:	4603      	mov	r3, r0
 8020602:	2b00      	cmp	r3, #0
 8020604:	d001      	beq.n	802060a <UART_Test_Perform+0x72>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
#endif
		return TEST_FAILED;
 8020606:	23ff      	movs	r3, #255	@ 0xff
 8020608:	e04a      	b.n	80206a0 <UART_Test_Perform+0x108>
	}
	while (!uart5_rx_done);
 802060a:	bf00      	nop
 802060c:	4b28      	ldr	r3, [pc, #160]	@ (80206b0 <UART_Test_Perform+0x118>)
 802060e:	781b      	ldrb	r3, [r3, #0]
 8020610:	b2db      	uxtb	r3, r3
 8020612:	2b00      	cmp	r3, #0
 8020614:	d0fa      	beq.n	802060c <UART_Test_Perform+0x74>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 8020616:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802061a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802061e:	781b      	ldrb	r3, [r3, #0]
 8020620:	b29a      	uxth	r2, r3
 8020622:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8020626:	4619      	mov	r1, r3
 8020628:	4823      	ldr	r0, [pc, #140]	@ (80206b8 <UART_Test_Perform+0x120>)
 802062a:	f7ea f957 	bl	800a8dc <HAL_UART_Receive_DMA>
 802062e:	4603      	mov	r3, r0
 8020630:	2b00      	cmp	r3, #0
 8020632:	d001      	beq.n	8020638 <UART_Test_Perform+0xa0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
#endif
		return TEST_FAILED;
 8020634:	23ff      	movs	r3, #255	@ 0xff
 8020636:	e033      	b.n	80206a0 <UART_Test_Perform+0x108>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 8020638:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802063c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020640:	781b      	ldrb	r3, [r3, #0]
 8020642:	b29a      	uxth	r2, r3
 8020644:	f107 030c 	add.w	r3, r7, #12
 8020648:	4619      	mov	r1, r3
 802064a:	481a      	ldr	r0, [pc, #104]	@ (80206b4 <UART_Test_Perform+0x11c>)
 802064c:	f7ea f8e8 	bl	800a820 <HAL_UART_Transmit_IT>
 8020650:	4603      	mov	r3, r0
 8020652:	2b00      	cmp	r3, #0
 8020654:	d001      	beq.n	802065a <UART_Test_Perform+0xc2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
#endif
		return TEST_FAILED;
 8020656:	23ff      	movs	r3, #255	@ 0xff
 8020658:	e022      	b.n	80206a0 <UART_Test_Perform+0x108>
	}
	while (!uart4_rx_done);
 802065a:	bf00      	nop
 802065c:	4b13      	ldr	r3, [pc, #76]	@ (80206ac <UART_Test_Perform+0x114>)
 802065e:	781b      	ldrb	r3, [r3, #0]
 8020660:	b2db      	uxtb	r3, r3
 8020662:	2b00      	cmp	r3, #0
 8020664:	d0fa      	beq.n	802065c <UART_Test_Perform+0xc4>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8020666:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802066a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802066e:	781c      	ldrb	r4, [r3, #0]
 8020670:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8020674:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020678:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802067c:	7819      	ldrb	r1, [r3, #0]
 802067e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020682:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8020686:	4623      	mov	r3, r4
 8020688:	6800      	ldr	r0, [r0, #0]
 802068a:	f7ff f987 	bl	801f99c <Match_CRC>
 802068e:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8020692:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8020696:	2b01      	cmp	r3, #1
 8020698:	d101      	bne.n	802069e <UART_Test_Perform+0x106>
 802069a:	2301      	movs	r3, #1
 802069c:	e000      	b.n	80206a0 <UART_Test_Perform+0x108>

	return TEST_FAILED;
 802069e:	23ff      	movs	r3, #255	@ 0xff
}
 80206a0:	4618      	mov	r0, r3
 80206a2:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80206a6:	46bd      	mov	sp, r7
 80206a8:	bd90      	pop	{r4, r7, pc}
 80206aa:	bf00      	nop
 80206ac:	20022e50 	.word	0x20022e50
 80206b0:	20022e51 	.word	0x20022e51
 80206b4:	20000980 	.word	0x20000980
 80206b8:	200008f8 	.word	0x200008f8

080206bc <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80206bc:	b480      	push	{r7}
 80206be:	b083      	sub	sp, #12
 80206c0:	af00      	add	r7, sp, #0
 80206c2:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 80206c4:	687b      	ldr	r3, [r7, #4]
 80206c6:	4a09      	ldr	r2, [pc, #36]	@ (80206ec <HAL_UART_RxCpltCallback+0x30>)
 80206c8:	4293      	cmp	r3, r2
 80206ca:	d102      	bne.n	80206d2 <HAL_UART_RxCpltCallback+0x16>
 80206cc:	4b08      	ldr	r3, [pc, #32]	@ (80206f0 <HAL_UART_RxCpltCallback+0x34>)
 80206ce:	2201      	movs	r2, #1
 80206d0:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 80206d2:	687b      	ldr	r3, [r7, #4]
 80206d4:	4a07      	ldr	r2, [pc, #28]	@ (80206f4 <HAL_UART_RxCpltCallback+0x38>)
 80206d6:	4293      	cmp	r3, r2
 80206d8:	d102      	bne.n	80206e0 <HAL_UART_RxCpltCallback+0x24>
 80206da:	4b07      	ldr	r3, [pc, #28]	@ (80206f8 <HAL_UART_RxCpltCallback+0x3c>)
 80206dc:	2201      	movs	r2, #1
 80206de:	701a      	strb	r2, [r3, #0]
}
 80206e0:	bf00      	nop
 80206e2:	370c      	adds	r7, #12
 80206e4:	46bd      	mov	sp, r7
 80206e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206ea:	4770      	bx	lr
 80206ec:	200008f8 	.word	0x200008f8
 80206f0:	20022e50 	.word	0x20022e50
 80206f4:	20000980 	.word	0x20000980
 80206f8:	20022e51 	.word	0x20022e51

080206fc <rand>:
 80206fc:	4b16      	ldr	r3, [pc, #88]	@ (8020758 <rand+0x5c>)
 80206fe:	b510      	push	{r4, lr}
 8020700:	681c      	ldr	r4, [r3, #0]
 8020702:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020704:	b9b3      	cbnz	r3, 8020734 <rand+0x38>
 8020706:	2018      	movs	r0, #24
 8020708:	f000 fb44 	bl	8020d94 <malloc>
 802070c:	4602      	mov	r2, r0
 802070e:	6320      	str	r0, [r4, #48]	@ 0x30
 8020710:	b920      	cbnz	r0, 802071c <rand+0x20>
 8020712:	4b12      	ldr	r3, [pc, #72]	@ (802075c <rand+0x60>)
 8020714:	4812      	ldr	r0, [pc, #72]	@ (8020760 <rand+0x64>)
 8020716:	2152      	movs	r1, #82	@ 0x52
 8020718:	f000 fad4 	bl	8020cc4 <__assert_func>
 802071c:	4911      	ldr	r1, [pc, #68]	@ (8020764 <rand+0x68>)
 802071e:	4b12      	ldr	r3, [pc, #72]	@ (8020768 <rand+0x6c>)
 8020720:	e9c0 1300 	strd	r1, r3, [r0]
 8020724:	4b11      	ldr	r3, [pc, #68]	@ (802076c <rand+0x70>)
 8020726:	6083      	str	r3, [r0, #8]
 8020728:	230b      	movs	r3, #11
 802072a:	8183      	strh	r3, [r0, #12]
 802072c:	2100      	movs	r1, #0
 802072e:	2001      	movs	r0, #1
 8020730:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020734:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020736:	480e      	ldr	r0, [pc, #56]	@ (8020770 <rand+0x74>)
 8020738:	690b      	ldr	r3, [r1, #16]
 802073a:	694c      	ldr	r4, [r1, #20]
 802073c:	4a0d      	ldr	r2, [pc, #52]	@ (8020774 <rand+0x78>)
 802073e:	4358      	muls	r0, r3
 8020740:	fb02 0004 	mla	r0, r2, r4, r0
 8020744:	fba3 3202 	umull	r3, r2, r3, r2
 8020748:	3301      	adds	r3, #1
 802074a:	eb40 0002 	adc.w	r0, r0, r2
 802074e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8020752:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8020756:	bd10      	pop	{r4, pc}
 8020758:	20000080 	.word	0x20000080
 802075c:	08026432 	.word	0x08026432
 8020760:	08026449 	.word	0x08026449
 8020764:	abcd330e 	.word	0xabcd330e
 8020768:	e66d1234 	.word	0xe66d1234
 802076c:	0005deec 	.word	0x0005deec
 8020770:	5851f42d 	.word	0x5851f42d
 8020774:	4c957f2d 	.word	0x4c957f2d

08020778 <std>:
 8020778:	2300      	movs	r3, #0
 802077a:	b510      	push	{r4, lr}
 802077c:	4604      	mov	r4, r0
 802077e:	e9c0 3300 	strd	r3, r3, [r0]
 8020782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020786:	6083      	str	r3, [r0, #8]
 8020788:	8181      	strh	r1, [r0, #12]
 802078a:	6643      	str	r3, [r0, #100]	@ 0x64
 802078c:	81c2      	strh	r2, [r0, #14]
 802078e:	6183      	str	r3, [r0, #24]
 8020790:	4619      	mov	r1, r3
 8020792:	2208      	movs	r2, #8
 8020794:	305c      	adds	r0, #92	@ 0x5c
 8020796:	f000 fa11 	bl	8020bbc <memset>
 802079a:	4b0d      	ldr	r3, [pc, #52]	@ (80207d0 <std+0x58>)
 802079c:	6263      	str	r3, [r4, #36]	@ 0x24
 802079e:	4b0d      	ldr	r3, [pc, #52]	@ (80207d4 <std+0x5c>)
 80207a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80207a2:	4b0d      	ldr	r3, [pc, #52]	@ (80207d8 <std+0x60>)
 80207a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80207a6:	4b0d      	ldr	r3, [pc, #52]	@ (80207dc <std+0x64>)
 80207a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80207aa:	4b0d      	ldr	r3, [pc, #52]	@ (80207e0 <std+0x68>)
 80207ac:	6224      	str	r4, [r4, #32]
 80207ae:	429c      	cmp	r4, r3
 80207b0:	d006      	beq.n	80207c0 <std+0x48>
 80207b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80207b6:	4294      	cmp	r4, r2
 80207b8:	d002      	beq.n	80207c0 <std+0x48>
 80207ba:	33d0      	adds	r3, #208	@ 0xd0
 80207bc:	429c      	cmp	r4, r3
 80207be:	d105      	bne.n	80207cc <std+0x54>
 80207c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80207c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80207c8:	f000 ba6a 	b.w	8020ca0 <__retarget_lock_init_recursive>
 80207cc:	bd10      	pop	{r4, pc}
 80207ce:	bf00      	nop
 80207d0:	080209ed 	.word	0x080209ed
 80207d4:	08020a0f 	.word	0x08020a0f
 80207d8:	08020a47 	.word	0x08020a47
 80207dc:	08020a6b 	.word	0x08020a6b
 80207e0:	20022e54 	.word	0x20022e54

080207e4 <stdio_exit_handler>:
 80207e4:	4a02      	ldr	r2, [pc, #8]	@ (80207f0 <stdio_exit_handler+0xc>)
 80207e6:	4903      	ldr	r1, [pc, #12]	@ (80207f4 <stdio_exit_handler+0x10>)
 80207e8:	4803      	ldr	r0, [pc, #12]	@ (80207f8 <stdio_exit_handler+0x14>)
 80207ea:	f000 b869 	b.w	80208c0 <_fwalk_sglue>
 80207ee:	bf00      	nop
 80207f0:	20000074 	.word	0x20000074
 80207f4:	080215a5 	.word	0x080215a5
 80207f8:	20000084 	.word	0x20000084

080207fc <cleanup_stdio>:
 80207fc:	6841      	ldr	r1, [r0, #4]
 80207fe:	4b0c      	ldr	r3, [pc, #48]	@ (8020830 <cleanup_stdio+0x34>)
 8020800:	4299      	cmp	r1, r3
 8020802:	b510      	push	{r4, lr}
 8020804:	4604      	mov	r4, r0
 8020806:	d001      	beq.n	802080c <cleanup_stdio+0x10>
 8020808:	f000 fecc 	bl	80215a4 <_fflush_r>
 802080c:	68a1      	ldr	r1, [r4, #8]
 802080e:	4b09      	ldr	r3, [pc, #36]	@ (8020834 <cleanup_stdio+0x38>)
 8020810:	4299      	cmp	r1, r3
 8020812:	d002      	beq.n	802081a <cleanup_stdio+0x1e>
 8020814:	4620      	mov	r0, r4
 8020816:	f000 fec5 	bl	80215a4 <_fflush_r>
 802081a:	68e1      	ldr	r1, [r4, #12]
 802081c:	4b06      	ldr	r3, [pc, #24]	@ (8020838 <cleanup_stdio+0x3c>)
 802081e:	4299      	cmp	r1, r3
 8020820:	d004      	beq.n	802082c <cleanup_stdio+0x30>
 8020822:	4620      	mov	r0, r4
 8020824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020828:	f000 bebc 	b.w	80215a4 <_fflush_r>
 802082c:	bd10      	pop	{r4, pc}
 802082e:	bf00      	nop
 8020830:	20022e54 	.word	0x20022e54
 8020834:	20022ebc 	.word	0x20022ebc
 8020838:	20022f24 	.word	0x20022f24

0802083c <global_stdio_init.part.0>:
 802083c:	b510      	push	{r4, lr}
 802083e:	4b0b      	ldr	r3, [pc, #44]	@ (802086c <global_stdio_init.part.0+0x30>)
 8020840:	4c0b      	ldr	r4, [pc, #44]	@ (8020870 <global_stdio_init.part.0+0x34>)
 8020842:	4a0c      	ldr	r2, [pc, #48]	@ (8020874 <global_stdio_init.part.0+0x38>)
 8020844:	601a      	str	r2, [r3, #0]
 8020846:	4620      	mov	r0, r4
 8020848:	2200      	movs	r2, #0
 802084a:	2104      	movs	r1, #4
 802084c:	f7ff ff94 	bl	8020778 <std>
 8020850:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020854:	2201      	movs	r2, #1
 8020856:	2109      	movs	r1, #9
 8020858:	f7ff ff8e 	bl	8020778 <std>
 802085c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020860:	2202      	movs	r2, #2
 8020862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020866:	2112      	movs	r1, #18
 8020868:	f7ff bf86 	b.w	8020778 <std>
 802086c:	20022f8c 	.word	0x20022f8c
 8020870:	20022e54 	.word	0x20022e54
 8020874:	080207e5 	.word	0x080207e5

08020878 <__sfp_lock_acquire>:
 8020878:	4801      	ldr	r0, [pc, #4]	@ (8020880 <__sfp_lock_acquire+0x8>)
 802087a:	f000 ba12 	b.w	8020ca2 <__retarget_lock_acquire_recursive>
 802087e:	bf00      	nop
 8020880:	20022f95 	.word	0x20022f95

08020884 <__sfp_lock_release>:
 8020884:	4801      	ldr	r0, [pc, #4]	@ (802088c <__sfp_lock_release+0x8>)
 8020886:	f000 ba0d 	b.w	8020ca4 <__retarget_lock_release_recursive>
 802088a:	bf00      	nop
 802088c:	20022f95 	.word	0x20022f95

08020890 <__sinit>:
 8020890:	b510      	push	{r4, lr}
 8020892:	4604      	mov	r4, r0
 8020894:	f7ff fff0 	bl	8020878 <__sfp_lock_acquire>
 8020898:	6a23      	ldr	r3, [r4, #32]
 802089a:	b11b      	cbz	r3, 80208a4 <__sinit+0x14>
 802089c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80208a0:	f7ff bff0 	b.w	8020884 <__sfp_lock_release>
 80208a4:	4b04      	ldr	r3, [pc, #16]	@ (80208b8 <__sinit+0x28>)
 80208a6:	6223      	str	r3, [r4, #32]
 80208a8:	4b04      	ldr	r3, [pc, #16]	@ (80208bc <__sinit+0x2c>)
 80208aa:	681b      	ldr	r3, [r3, #0]
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	d1f5      	bne.n	802089c <__sinit+0xc>
 80208b0:	f7ff ffc4 	bl	802083c <global_stdio_init.part.0>
 80208b4:	e7f2      	b.n	802089c <__sinit+0xc>
 80208b6:	bf00      	nop
 80208b8:	080207fd 	.word	0x080207fd
 80208bc:	20022f8c 	.word	0x20022f8c

080208c0 <_fwalk_sglue>:
 80208c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80208c4:	4607      	mov	r7, r0
 80208c6:	4688      	mov	r8, r1
 80208c8:	4614      	mov	r4, r2
 80208ca:	2600      	movs	r6, #0
 80208cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80208d0:	f1b9 0901 	subs.w	r9, r9, #1
 80208d4:	d505      	bpl.n	80208e2 <_fwalk_sglue+0x22>
 80208d6:	6824      	ldr	r4, [r4, #0]
 80208d8:	2c00      	cmp	r4, #0
 80208da:	d1f7      	bne.n	80208cc <_fwalk_sglue+0xc>
 80208dc:	4630      	mov	r0, r6
 80208de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80208e2:	89ab      	ldrh	r3, [r5, #12]
 80208e4:	2b01      	cmp	r3, #1
 80208e6:	d907      	bls.n	80208f8 <_fwalk_sglue+0x38>
 80208e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80208ec:	3301      	adds	r3, #1
 80208ee:	d003      	beq.n	80208f8 <_fwalk_sglue+0x38>
 80208f0:	4629      	mov	r1, r5
 80208f2:	4638      	mov	r0, r7
 80208f4:	47c0      	blx	r8
 80208f6:	4306      	orrs	r6, r0
 80208f8:	3568      	adds	r5, #104	@ 0x68
 80208fa:	e7e9      	b.n	80208d0 <_fwalk_sglue+0x10>

080208fc <iprintf>:
 80208fc:	b40f      	push	{r0, r1, r2, r3}
 80208fe:	b507      	push	{r0, r1, r2, lr}
 8020900:	4906      	ldr	r1, [pc, #24]	@ (802091c <iprintf+0x20>)
 8020902:	ab04      	add	r3, sp, #16
 8020904:	6808      	ldr	r0, [r1, #0]
 8020906:	f853 2b04 	ldr.w	r2, [r3], #4
 802090a:	6881      	ldr	r1, [r0, #8]
 802090c:	9301      	str	r3, [sp, #4]
 802090e:	f000 fb21 	bl	8020f54 <_vfiprintf_r>
 8020912:	b003      	add	sp, #12
 8020914:	f85d eb04 	ldr.w	lr, [sp], #4
 8020918:	b004      	add	sp, #16
 802091a:	4770      	bx	lr
 802091c:	20000080 	.word	0x20000080

08020920 <putchar>:
 8020920:	4b02      	ldr	r3, [pc, #8]	@ (802092c <putchar+0xc>)
 8020922:	4601      	mov	r1, r0
 8020924:	6818      	ldr	r0, [r3, #0]
 8020926:	6882      	ldr	r2, [r0, #8]
 8020928:	f000 bed8 	b.w	80216dc <_putc_r>
 802092c:	20000080 	.word	0x20000080

08020930 <_puts_r>:
 8020930:	6a03      	ldr	r3, [r0, #32]
 8020932:	b570      	push	{r4, r5, r6, lr}
 8020934:	6884      	ldr	r4, [r0, #8]
 8020936:	4605      	mov	r5, r0
 8020938:	460e      	mov	r6, r1
 802093a:	b90b      	cbnz	r3, 8020940 <_puts_r+0x10>
 802093c:	f7ff ffa8 	bl	8020890 <__sinit>
 8020940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020942:	07db      	lsls	r3, r3, #31
 8020944:	d405      	bmi.n	8020952 <_puts_r+0x22>
 8020946:	89a3      	ldrh	r3, [r4, #12]
 8020948:	0598      	lsls	r0, r3, #22
 802094a:	d402      	bmi.n	8020952 <_puts_r+0x22>
 802094c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802094e:	f000 f9a8 	bl	8020ca2 <__retarget_lock_acquire_recursive>
 8020952:	89a3      	ldrh	r3, [r4, #12]
 8020954:	0719      	lsls	r1, r3, #28
 8020956:	d502      	bpl.n	802095e <_puts_r+0x2e>
 8020958:	6923      	ldr	r3, [r4, #16]
 802095a:	2b00      	cmp	r3, #0
 802095c:	d135      	bne.n	80209ca <_puts_r+0x9a>
 802095e:	4621      	mov	r1, r4
 8020960:	4628      	mov	r0, r5
 8020962:	f000 f8c5 	bl	8020af0 <__swsetup_r>
 8020966:	b380      	cbz	r0, 80209ca <_puts_r+0x9a>
 8020968:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802096c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802096e:	07da      	lsls	r2, r3, #31
 8020970:	d405      	bmi.n	802097e <_puts_r+0x4e>
 8020972:	89a3      	ldrh	r3, [r4, #12]
 8020974:	059b      	lsls	r3, r3, #22
 8020976:	d402      	bmi.n	802097e <_puts_r+0x4e>
 8020978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802097a:	f000 f993 	bl	8020ca4 <__retarget_lock_release_recursive>
 802097e:	4628      	mov	r0, r5
 8020980:	bd70      	pop	{r4, r5, r6, pc}
 8020982:	2b00      	cmp	r3, #0
 8020984:	da04      	bge.n	8020990 <_puts_r+0x60>
 8020986:	69a2      	ldr	r2, [r4, #24]
 8020988:	429a      	cmp	r2, r3
 802098a:	dc17      	bgt.n	80209bc <_puts_r+0x8c>
 802098c:	290a      	cmp	r1, #10
 802098e:	d015      	beq.n	80209bc <_puts_r+0x8c>
 8020990:	6823      	ldr	r3, [r4, #0]
 8020992:	1c5a      	adds	r2, r3, #1
 8020994:	6022      	str	r2, [r4, #0]
 8020996:	7019      	strb	r1, [r3, #0]
 8020998:	68a3      	ldr	r3, [r4, #8]
 802099a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802099e:	3b01      	subs	r3, #1
 80209a0:	60a3      	str	r3, [r4, #8]
 80209a2:	2900      	cmp	r1, #0
 80209a4:	d1ed      	bne.n	8020982 <_puts_r+0x52>
 80209a6:	2b00      	cmp	r3, #0
 80209a8:	da11      	bge.n	80209ce <_puts_r+0x9e>
 80209aa:	4622      	mov	r2, r4
 80209ac:	210a      	movs	r1, #10
 80209ae:	4628      	mov	r0, r5
 80209b0:	f000 f85f 	bl	8020a72 <__swbuf_r>
 80209b4:	3001      	adds	r0, #1
 80209b6:	d0d7      	beq.n	8020968 <_puts_r+0x38>
 80209b8:	250a      	movs	r5, #10
 80209ba:	e7d7      	b.n	802096c <_puts_r+0x3c>
 80209bc:	4622      	mov	r2, r4
 80209be:	4628      	mov	r0, r5
 80209c0:	f000 f857 	bl	8020a72 <__swbuf_r>
 80209c4:	3001      	adds	r0, #1
 80209c6:	d1e7      	bne.n	8020998 <_puts_r+0x68>
 80209c8:	e7ce      	b.n	8020968 <_puts_r+0x38>
 80209ca:	3e01      	subs	r6, #1
 80209cc:	e7e4      	b.n	8020998 <_puts_r+0x68>
 80209ce:	6823      	ldr	r3, [r4, #0]
 80209d0:	1c5a      	adds	r2, r3, #1
 80209d2:	6022      	str	r2, [r4, #0]
 80209d4:	220a      	movs	r2, #10
 80209d6:	701a      	strb	r2, [r3, #0]
 80209d8:	e7ee      	b.n	80209b8 <_puts_r+0x88>
	...

080209dc <puts>:
 80209dc:	4b02      	ldr	r3, [pc, #8]	@ (80209e8 <puts+0xc>)
 80209de:	4601      	mov	r1, r0
 80209e0:	6818      	ldr	r0, [r3, #0]
 80209e2:	f7ff bfa5 	b.w	8020930 <_puts_r>
 80209e6:	bf00      	nop
 80209e8:	20000080 	.word	0x20000080

080209ec <__sread>:
 80209ec:	b510      	push	{r4, lr}
 80209ee:	460c      	mov	r4, r1
 80209f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80209f4:	f000 f90c 	bl	8020c10 <_read_r>
 80209f8:	2800      	cmp	r0, #0
 80209fa:	bfab      	itete	ge
 80209fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80209fe:	89a3      	ldrhlt	r3, [r4, #12]
 8020a00:	181b      	addge	r3, r3, r0
 8020a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8020a06:	bfac      	ite	ge
 8020a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020a0a:	81a3      	strhlt	r3, [r4, #12]
 8020a0c:	bd10      	pop	{r4, pc}

08020a0e <__swrite>:
 8020a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a12:	461f      	mov	r7, r3
 8020a14:	898b      	ldrh	r3, [r1, #12]
 8020a16:	05db      	lsls	r3, r3, #23
 8020a18:	4605      	mov	r5, r0
 8020a1a:	460c      	mov	r4, r1
 8020a1c:	4616      	mov	r6, r2
 8020a1e:	d505      	bpl.n	8020a2c <__swrite+0x1e>
 8020a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a24:	2302      	movs	r3, #2
 8020a26:	2200      	movs	r2, #0
 8020a28:	f000 f8e0 	bl	8020bec <_lseek_r>
 8020a2c:	89a3      	ldrh	r3, [r4, #12]
 8020a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020a32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020a36:	81a3      	strh	r3, [r4, #12]
 8020a38:	4632      	mov	r2, r6
 8020a3a:	463b      	mov	r3, r7
 8020a3c:	4628      	mov	r0, r5
 8020a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020a42:	f000 b8f7 	b.w	8020c34 <_write_r>

08020a46 <__sseek>:
 8020a46:	b510      	push	{r4, lr}
 8020a48:	460c      	mov	r4, r1
 8020a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a4e:	f000 f8cd 	bl	8020bec <_lseek_r>
 8020a52:	1c43      	adds	r3, r0, #1
 8020a54:	89a3      	ldrh	r3, [r4, #12]
 8020a56:	bf15      	itete	ne
 8020a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020a62:	81a3      	strheq	r3, [r4, #12]
 8020a64:	bf18      	it	ne
 8020a66:	81a3      	strhne	r3, [r4, #12]
 8020a68:	bd10      	pop	{r4, pc}

08020a6a <__sclose>:
 8020a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a6e:	f000 b8ad 	b.w	8020bcc <_close_r>

08020a72 <__swbuf_r>:
 8020a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a74:	460e      	mov	r6, r1
 8020a76:	4614      	mov	r4, r2
 8020a78:	4605      	mov	r5, r0
 8020a7a:	b118      	cbz	r0, 8020a84 <__swbuf_r+0x12>
 8020a7c:	6a03      	ldr	r3, [r0, #32]
 8020a7e:	b90b      	cbnz	r3, 8020a84 <__swbuf_r+0x12>
 8020a80:	f7ff ff06 	bl	8020890 <__sinit>
 8020a84:	69a3      	ldr	r3, [r4, #24]
 8020a86:	60a3      	str	r3, [r4, #8]
 8020a88:	89a3      	ldrh	r3, [r4, #12]
 8020a8a:	071a      	lsls	r2, r3, #28
 8020a8c:	d501      	bpl.n	8020a92 <__swbuf_r+0x20>
 8020a8e:	6923      	ldr	r3, [r4, #16]
 8020a90:	b943      	cbnz	r3, 8020aa4 <__swbuf_r+0x32>
 8020a92:	4621      	mov	r1, r4
 8020a94:	4628      	mov	r0, r5
 8020a96:	f000 f82b 	bl	8020af0 <__swsetup_r>
 8020a9a:	b118      	cbz	r0, 8020aa4 <__swbuf_r+0x32>
 8020a9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8020aa0:	4638      	mov	r0, r7
 8020aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020aa4:	6823      	ldr	r3, [r4, #0]
 8020aa6:	6922      	ldr	r2, [r4, #16]
 8020aa8:	1a98      	subs	r0, r3, r2
 8020aaa:	6963      	ldr	r3, [r4, #20]
 8020aac:	b2f6      	uxtb	r6, r6
 8020aae:	4283      	cmp	r3, r0
 8020ab0:	4637      	mov	r7, r6
 8020ab2:	dc05      	bgt.n	8020ac0 <__swbuf_r+0x4e>
 8020ab4:	4621      	mov	r1, r4
 8020ab6:	4628      	mov	r0, r5
 8020ab8:	f000 fd74 	bl	80215a4 <_fflush_r>
 8020abc:	2800      	cmp	r0, #0
 8020abe:	d1ed      	bne.n	8020a9c <__swbuf_r+0x2a>
 8020ac0:	68a3      	ldr	r3, [r4, #8]
 8020ac2:	3b01      	subs	r3, #1
 8020ac4:	60a3      	str	r3, [r4, #8]
 8020ac6:	6823      	ldr	r3, [r4, #0]
 8020ac8:	1c5a      	adds	r2, r3, #1
 8020aca:	6022      	str	r2, [r4, #0]
 8020acc:	701e      	strb	r6, [r3, #0]
 8020ace:	6962      	ldr	r2, [r4, #20]
 8020ad0:	1c43      	adds	r3, r0, #1
 8020ad2:	429a      	cmp	r2, r3
 8020ad4:	d004      	beq.n	8020ae0 <__swbuf_r+0x6e>
 8020ad6:	89a3      	ldrh	r3, [r4, #12]
 8020ad8:	07db      	lsls	r3, r3, #31
 8020ada:	d5e1      	bpl.n	8020aa0 <__swbuf_r+0x2e>
 8020adc:	2e0a      	cmp	r6, #10
 8020ade:	d1df      	bne.n	8020aa0 <__swbuf_r+0x2e>
 8020ae0:	4621      	mov	r1, r4
 8020ae2:	4628      	mov	r0, r5
 8020ae4:	f000 fd5e 	bl	80215a4 <_fflush_r>
 8020ae8:	2800      	cmp	r0, #0
 8020aea:	d0d9      	beq.n	8020aa0 <__swbuf_r+0x2e>
 8020aec:	e7d6      	b.n	8020a9c <__swbuf_r+0x2a>
	...

08020af0 <__swsetup_r>:
 8020af0:	b538      	push	{r3, r4, r5, lr}
 8020af2:	4b29      	ldr	r3, [pc, #164]	@ (8020b98 <__swsetup_r+0xa8>)
 8020af4:	4605      	mov	r5, r0
 8020af6:	6818      	ldr	r0, [r3, #0]
 8020af8:	460c      	mov	r4, r1
 8020afa:	b118      	cbz	r0, 8020b04 <__swsetup_r+0x14>
 8020afc:	6a03      	ldr	r3, [r0, #32]
 8020afe:	b90b      	cbnz	r3, 8020b04 <__swsetup_r+0x14>
 8020b00:	f7ff fec6 	bl	8020890 <__sinit>
 8020b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b08:	0719      	lsls	r1, r3, #28
 8020b0a:	d422      	bmi.n	8020b52 <__swsetup_r+0x62>
 8020b0c:	06da      	lsls	r2, r3, #27
 8020b0e:	d407      	bmi.n	8020b20 <__swsetup_r+0x30>
 8020b10:	2209      	movs	r2, #9
 8020b12:	602a      	str	r2, [r5, #0]
 8020b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020b18:	81a3      	strh	r3, [r4, #12]
 8020b1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020b1e:	e033      	b.n	8020b88 <__swsetup_r+0x98>
 8020b20:	0758      	lsls	r0, r3, #29
 8020b22:	d512      	bpl.n	8020b4a <__swsetup_r+0x5a>
 8020b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020b26:	b141      	cbz	r1, 8020b3a <__swsetup_r+0x4a>
 8020b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020b2c:	4299      	cmp	r1, r3
 8020b2e:	d002      	beq.n	8020b36 <__swsetup_r+0x46>
 8020b30:	4628      	mov	r0, r5
 8020b32:	f000 f8e5 	bl	8020d00 <_free_r>
 8020b36:	2300      	movs	r3, #0
 8020b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8020b3a:	89a3      	ldrh	r3, [r4, #12]
 8020b3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020b40:	81a3      	strh	r3, [r4, #12]
 8020b42:	2300      	movs	r3, #0
 8020b44:	6063      	str	r3, [r4, #4]
 8020b46:	6923      	ldr	r3, [r4, #16]
 8020b48:	6023      	str	r3, [r4, #0]
 8020b4a:	89a3      	ldrh	r3, [r4, #12]
 8020b4c:	f043 0308 	orr.w	r3, r3, #8
 8020b50:	81a3      	strh	r3, [r4, #12]
 8020b52:	6923      	ldr	r3, [r4, #16]
 8020b54:	b94b      	cbnz	r3, 8020b6a <__swsetup_r+0x7a>
 8020b56:	89a3      	ldrh	r3, [r4, #12]
 8020b58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020b60:	d003      	beq.n	8020b6a <__swsetup_r+0x7a>
 8020b62:	4621      	mov	r1, r4
 8020b64:	4628      	mov	r0, r5
 8020b66:	f000 fd7d 	bl	8021664 <__smakebuf_r>
 8020b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b6e:	f013 0201 	ands.w	r2, r3, #1
 8020b72:	d00a      	beq.n	8020b8a <__swsetup_r+0x9a>
 8020b74:	2200      	movs	r2, #0
 8020b76:	60a2      	str	r2, [r4, #8]
 8020b78:	6962      	ldr	r2, [r4, #20]
 8020b7a:	4252      	negs	r2, r2
 8020b7c:	61a2      	str	r2, [r4, #24]
 8020b7e:	6922      	ldr	r2, [r4, #16]
 8020b80:	b942      	cbnz	r2, 8020b94 <__swsetup_r+0xa4>
 8020b82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020b86:	d1c5      	bne.n	8020b14 <__swsetup_r+0x24>
 8020b88:	bd38      	pop	{r3, r4, r5, pc}
 8020b8a:	0799      	lsls	r1, r3, #30
 8020b8c:	bf58      	it	pl
 8020b8e:	6962      	ldrpl	r2, [r4, #20]
 8020b90:	60a2      	str	r2, [r4, #8]
 8020b92:	e7f4      	b.n	8020b7e <__swsetup_r+0x8e>
 8020b94:	2000      	movs	r0, #0
 8020b96:	e7f7      	b.n	8020b88 <__swsetup_r+0x98>
 8020b98:	20000080 	.word	0x20000080

08020b9c <memcmp>:
 8020b9c:	b510      	push	{r4, lr}
 8020b9e:	3901      	subs	r1, #1
 8020ba0:	4402      	add	r2, r0
 8020ba2:	4290      	cmp	r0, r2
 8020ba4:	d101      	bne.n	8020baa <memcmp+0xe>
 8020ba6:	2000      	movs	r0, #0
 8020ba8:	e005      	b.n	8020bb6 <memcmp+0x1a>
 8020baa:	7803      	ldrb	r3, [r0, #0]
 8020bac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020bb0:	42a3      	cmp	r3, r4
 8020bb2:	d001      	beq.n	8020bb8 <memcmp+0x1c>
 8020bb4:	1b18      	subs	r0, r3, r4
 8020bb6:	bd10      	pop	{r4, pc}
 8020bb8:	3001      	adds	r0, #1
 8020bba:	e7f2      	b.n	8020ba2 <memcmp+0x6>

08020bbc <memset>:
 8020bbc:	4402      	add	r2, r0
 8020bbe:	4603      	mov	r3, r0
 8020bc0:	4293      	cmp	r3, r2
 8020bc2:	d100      	bne.n	8020bc6 <memset+0xa>
 8020bc4:	4770      	bx	lr
 8020bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8020bca:	e7f9      	b.n	8020bc0 <memset+0x4>

08020bcc <_close_r>:
 8020bcc:	b538      	push	{r3, r4, r5, lr}
 8020bce:	4d06      	ldr	r5, [pc, #24]	@ (8020be8 <_close_r+0x1c>)
 8020bd0:	2300      	movs	r3, #0
 8020bd2:	4604      	mov	r4, r0
 8020bd4:	4608      	mov	r0, r1
 8020bd6:	602b      	str	r3, [r5, #0]
 8020bd8:	f7e0 ff34 	bl	8001a44 <_close>
 8020bdc:	1c43      	adds	r3, r0, #1
 8020bde:	d102      	bne.n	8020be6 <_close_r+0x1a>
 8020be0:	682b      	ldr	r3, [r5, #0]
 8020be2:	b103      	cbz	r3, 8020be6 <_close_r+0x1a>
 8020be4:	6023      	str	r3, [r4, #0]
 8020be6:	bd38      	pop	{r3, r4, r5, pc}
 8020be8:	20022f90 	.word	0x20022f90

08020bec <_lseek_r>:
 8020bec:	b538      	push	{r3, r4, r5, lr}
 8020bee:	4d07      	ldr	r5, [pc, #28]	@ (8020c0c <_lseek_r+0x20>)
 8020bf0:	4604      	mov	r4, r0
 8020bf2:	4608      	mov	r0, r1
 8020bf4:	4611      	mov	r1, r2
 8020bf6:	2200      	movs	r2, #0
 8020bf8:	602a      	str	r2, [r5, #0]
 8020bfa:	461a      	mov	r2, r3
 8020bfc:	f7e0 ff49 	bl	8001a92 <_lseek>
 8020c00:	1c43      	adds	r3, r0, #1
 8020c02:	d102      	bne.n	8020c0a <_lseek_r+0x1e>
 8020c04:	682b      	ldr	r3, [r5, #0]
 8020c06:	b103      	cbz	r3, 8020c0a <_lseek_r+0x1e>
 8020c08:	6023      	str	r3, [r4, #0]
 8020c0a:	bd38      	pop	{r3, r4, r5, pc}
 8020c0c:	20022f90 	.word	0x20022f90

08020c10 <_read_r>:
 8020c10:	b538      	push	{r3, r4, r5, lr}
 8020c12:	4d07      	ldr	r5, [pc, #28]	@ (8020c30 <_read_r+0x20>)
 8020c14:	4604      	mov	r4, r0
 8020c16:	4608      	mov	r0, r1
 8020c18:	4611      	mov	r1, r2
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	602a      	str	r2, [r5, #0]
 8020c1e:	461a      	mov	r2, r3
 8020c20:	f7e0 fef3 	bl	8001a0a <_read>
 8020c24:	1c43      	adds	r3, r0, #1
 8020c26:	d102      	bne.n	8020c2e <_read_r+0x1e>
 8020c28:	682b      	ldr	r3, [r5, #0]
 8020c2a:	b103      	cbz	r3, 8020c2e <_read_r+0x1e>
 8020c2c:	6023      	str	r3, [r4, #0]
 8020c2e:	bd38      	pop	{r3, r4, r5, pc}
 8020c30:	20022f90 	.word	0x20022f90

08020c34 <_write_r>:
 8020c34:	b538      	push	{r3, r4, r5, lr}
 8020c36:	4d07      	ldr	r5, [pc, #28]	@ (8020c54 <_write_r+0x20>)
 8020c38:	4604      	mov	r4, r0
 8020c3a:	4608      	mov	r0, r1
 8020c3c:	4611      	mov	r1, r2
 8020c3e:	2200      	movs	r2, #0
 8020c40:	602a      	str	r2, [r5, #0]
 8020c42:	461a      	mov	r2, r3
 8020c44:	f7e0 fa52 	bl	80010ec <_write>
 8020c48:	1c43      	adds	r3, r0, #1
 8020c4a:	d102      	bne.n	8020c52 <_write_r+0x1e>
 8020c4c:	682b      	ldr	r3, [r5, #0]
 8020c4e:	b103      	cbz	r3, 8020c52 <_write_r+0x1e>
 8020c50:	6023      	str	r3, [r4, #0]
 8020c52:	bd38      	pop	{r3, r4, r5, pc}
 8020c54:	20022f90 	.word	0x20022f90

08020c58 <__libc_init_array>:
 8020c58:	b570      	push	{r4, r5, r6, lr}
 8020c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8020c90 <__libc_init_array+0x38>)
 8020c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8020c94 <__libc_init_array+0x3c>)
 8020c5e:	1b64      	subs	r4, r4, r5
 8020c60:	10a4      	asrs	r4, r4, #2
 8020c62:	2600      	movs	r6, #0
 8020c64:	42a6      	cmp	r6, r4
 8020c66:	d109      	bne.n	8020c7c <__libc_init_array+0x24>
 8020c68:	4d0b      	ldr	r5, [pc, #44]	@ (8020c98 <__libc_init_array+0x40>)
 8020c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8020c9c <__libc_init_array+0x44>)
 8020c6c:	f000 fde8 	bl	8021840 <_init>
 8020c70:	1b64      	subs	r4, r4, r5
 8020c72:	10a4      	asrs	r4, r4, #2
 8020c74:	2600      	movs	r6, #0
 8020c76:	42a6      	cmp	r6, r4
 8020c78:	d105      	bne.n	8020c86 <__libc_init_array+0x2e>
 8020c7a:	bd70      	pop	{r4, r5, r6, pc}
 8020c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020c80:	4798      	blx	r3
 8020c82:	3601      	adds	r6, #1
 8020c84:	e7ee      	b.n	8020c64 <__libc_init_array+0xc>
 8020c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8020c8a:	4798      	blx	r3
 8020c8c:	3601      	adds	r6, #1
 8020c8e:	e7f2      	b.n	8020c76 <__libc_init_array+0x1e>
 8020c90:	08026518 	.word	0x08026518
 8020c94:	08026518 	.word	0x08026518
 8020c98:	08026518 	.word	0x08026518
 8020c9c:	0802651c 	.word	0x0802651c

08020ca0 <__retarget_lock_init_recursive>:
 8020ca0:	4770      	bx	lr

08020ca2 <__retarget_lock_acquire_recursive>:
 8020ca2:	4770      	bx	lr

08020ca4 <__retarget_lock_release_recursive>:
 8020ca4:	4770      	bx	lr

08020ca6 <memcpy>:
 8020ca6:	440a      	add	r2, r1
 8020ca8:	4291      	cmp	r1, r2
 8020caa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8020cae:	d100      	bne.n	8020cb2 <memcpy+0xc>
 8020cb0:	4770      	bx	lr
 8020cb2:	b510      	push	{r4, lr}
 8020cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020cbc:	4291      	cmp	r1, r2
 8020cbe:	d1f9      	bne.n	8020cb4 <memcpy+0xe>
 8020cc0:	bd10      	pop	{r4, pc}
	...

08020cc4 <__assert_func>:
 8020cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020cc6:	4614      	mov	r4, r2
 8020cc8:	461a      	mov	r2, r3
 8020cca:	4b09      	ldr	r3, [pc, #36]	@ (8020cf0 <__assert_func+0x2c>)
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	4605      	mov	r5, r0
 8020cd0:	68d8      	ldr	r0, [r3, #12]
 8020cd2:	b14c      	cbz	r4, 8020ce8 <__assert_func+0x24>
 8020cd4:	4b07      	ldr	r3, [pc, #28]	@ (8020cf4 <__assert_func+0x30>)
 8020cd6:	9100      	str	r1, [sp, #0]
 8020cd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020cdc:	4906      	ldr	r1, [pc, #24]	@ (8020cf8 <__assert_func+0x34>)
 8020cde:	462b      	mov	r3, r5
 8020ce0:	f000 fc88 	bl	80215f4 <fiprintf>
 8020ce4:	f000 fd60 	bl	80217a8 <abort>
 8020ce8:	4b04      	ldr	r3, [pc, #16]	@ (8020cfc <__assert_func+0x38>)
 8020cea:	461c      	mov	r4, r3
 8020cec:	e7f3      	b.n	8020cd6 <__assert_func+0x12>
 8020cee:	bf00      	nop
 8020cf0:	20000080 	.word	0x20000080
 8020cf4:	080264a1 	.word	0x080264a1
 8020cf8:	080264ae 	.word	0x080264ae
 8020cfc:	080264dc 	.word	0x080264dc

08020d00 <_free_r>:
 8020d00:	b538      	push	{r3, r4, r5, lr}
 8020d02:	4605      	mov	r5, r0
 8020d04:	2900      	cmp	r1, #0
 8020d06:	d041      	beq.n	8020d8c <_free_r+0x8c>
 8020d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020d0c:	1f0c      	subs	r4, r1, #4
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	bfb8      	it	lt
 8020d12:	18e4      	addlt	r4, r4, r3
 8020d14:	f000 f8e8 	bl	8020ee8 <__malloc_lock>
 8020d18:	4a1d      	ldr	r2, [pc, #116]	@ (8020d90 <_free_r+0x90>)
 8020d1a:	6813      	ldr	r3, [r2, #0]
 8020d1c:	b933      	cbnz	r3, 8020d2c <_free_r+0x2c>
 8020d1e:	6063      	str	r3, [r4, #4]
 8020d20:	6014      	str	r4, [r2, #0]
 8020d22:	4628      	mov	r0, r5
 8020d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020d28:	f000 b8e4 	b.w	8020ef4 <__malloc_unlock>
 8020d2c:	42a3      	cmp	r3, r4
 8020d2e:	d908      	bls.n	8020d42 <_free_r+0x42>
 8020d30:	6820      	ldr	r0, [r4, #0]
 8020d32:	1821      	adds	r1, r4, r0
 8020d34:	428b      	cmp	r3, r1
 8020d36:	bf01      	itttt	eq
 8020d38:	6819      	ldreq	r1, [r3, #0]
 8020d3a:	685b      	ldreq	r3, [r3, #4]
 8020d3c:	1809      	addeq	r1, r1, r0
 8020d3e:	6021      	streq	r1, [r4, #0]
 8020d40:	e7ed      	b.n	8020d1e <_free_r+0x1e>
 8020d42:	461a      	mov	r2, r3
 8020d44:	685b      	ldr	r3, [r3, #4]
 8020d46:	b10b      	cbz	r3, 8020d4c <_free_r+0x4c>
 8020d48:	42a3      	cmp	r3, r4
 8020d4a:	d9fa      	bls.n	8020d42 <_free_r+0x42>
 8020d4c:	6811      	ldr	r1, [r2, #0]
 8020d4e:	1850      	adds	r0, r2, r1
 8020d50:	42a0      	cmp	r0, r4
 8020d52:	d10b      	bne.n	8020d6c <_free_r+0x6c>
 8020d54:	6820      	ldr	r0, [r4, #0]
 8020d56:	4401      	add	r1, r0
 8020d58:	1850      	adds	r0, r2, r1
 8020d5a:	4283      	cmp	r3, r0
 8020d5c:	6011      	str	r1, [r2, #0]
 8020d5e:	d1e0      	bne.n	8020d22 <_free_r+0x22>
 8020d60:	6818      	ldr	r0, [r3, #0]
 8020d62:	685b      	ldr	r3, [r3, #4]
 8020d64:	6053      	str	r3, [r2, #4]
 8020d66:	4408      	add	r0, r1
 8020d68:	6010      	str	r0, [r2, #0]
 8020d6a:	e7da      	b.n	8020d22 <_free_r+0x22>
 8020d6c:	d902      	bls.n	8020d74 <_free_r+0x74>
 8020d6e:	230c      	movs	r3, #12
 8020d70:	602b      	str	r3, [r5, #0]
 8020d72:	e7d6      	b.n	8020d22 <_free_r+0x22>
 8020d74:	6820      	ldr	r0, [r4, #0]
 8020d76:	1821      	adds	r1, r4, r0
 8020d78:	428b      	cmp	r3, r1
 8020d7a:	bf04      	itt	eq
 8020d7c:	6819      	ldreq	r1, [r3, #0]
 8020d7e:	685b      	ldreq	r3, [r3, #4]
 8020d80:	6063      	str	r3, [r4, #4]
 8020d82:	bf04      	itt	eq
 8020d84:	1809      	addeq	r1, r1, r0
 8020d86:	6021      	streq	r1, [r4, #0]
 8020d88:	6054      	str	r4, [r2, #4]
 8020d8a:	e7ca      	b.n	8020d22 <_free_r+0x22>
 8020d8c:	bd38      	pop	{r3, r4, r5, pc}
 8020d8e:	bf00      	nop
 8020d90:	20022f9c 	.word	0x20022f9c

08020d94 <malloc>:
 8020d94:	4b02      	ldr	r3, [pc, #8]	@ (8020da0 <malloc+0xc>)
 8020d96:	4601      	mov	r1, r0
 8020d98:	6818      	ldr	r0, [r3, #0]
 8020d9a:	f000 b825 	b.w	8020de8 <_malloc_r>
 8020d9e:	bf00      	nop
 8020da0:	20000080 	.word	0x20000080

08020da4 <sbrk_aligned>:
 8020da4:	b570      	push	{r4, r5, r6, lr}
 8020da6:	4e0f      	ldr	r6, [pc, #60]	@ (8020de4 <sbrk_aligned+0x40>)
 8020da8:	460c      	mov	r4, r1
 8020daa:	6831      	ldr	r1, [r6, #0]
 8020dac:	4605      	mov	r5, r0
 8020dae:	b911      	cbnz	r1, 8020db6 <sbrk_aligned+0x12>
 8020db0:	f000 fcea 	bl	8021788 <_sbrk_r>
 8020db4:	6030      	str	r0, [r6, #0]
 8020db6:	4621      	mov	r1, r4
 8020db8:	4628      	mov	r0, r5
 8020dba:	f000 fce5 	bl	8021788 <_sbrk_r>
 8020dbe:	1c43      	adds	r3, r0, #1
 8020dc0:	d103      	bne.n	8020dca <sbrk_aligned+0x26>
 8020dc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020dc6:	4620      	mov	r0, r4
 8020dc8:	bd70      	pop	{r4, r5, r6, pc}
 8020dca:	1cc4      	adds	r4, r0, #3
 8020dcc:	f024 0403 	bic.w	r4, r4, #3
 8020dd0:	42a0      	cmp	r0, r4
 8020dd2:	d0f8      	beq.n	8020dc6 <sbrk_aligned+0x22>
 8020dd4:	1a21      	subs	r1, r4, r0
 8020dd6:	4628      	mov	r0, r5
 8020dd8:	f000 fcd6 	bl	8021788 <_sbrk_r>
 8020ddc:	3001      	adds	r0, #1
 8020dde:	d1f2      	bne.n	8020dc6 <sbrk_aligned+0x22>
 8020de0:	e7ef      	b.n	8020dc2 <sbrk_aligned+0x1e>
 8020de2:	bf00      	nop
 8020de4:	20022f98 	.word	0x20022f98

08020de8 <_malloc_r>:
 8020de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020dec:	1ccd      	adds	r5, r1, #3
 8020dee:	f025 0503 	bic.w	r5, r5, #3
 8020df2:	3508      	adds	r5, #8
 8020df4:	2d0c      	cmp	r5, #12
 8020df6:	bf38      	it	cc
 8020df8:	250c      	movcc	r5, #12
 8020dfa:	2d00      	cmp	r5, #0
 8020dfc:	4606      	mov	r6, r0
 8020dfe:	db01      	blt.n	8020e04 <_malloc_r+0x1c>
 8020e00:	42a9      	cmp	r1, r5
 8020e02:	d904      	bls.n	8020e0e <_malloc_r+0x26>
 8020e04:	230c      	movs	r3, #12
 8020e06:	6033      	str	r3, [r6, #0]
 8020e08:	2000      	movs	r0, #0
 8020e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020ee4 <_malloc_r+0xfc>
 8020e12:	f000 f869 	bl	8020ee8 <__malloc_lock>
 8020e16:	f8d8 3000 	ldr.w	r3, [r8]
 8020e1a:	461c      	mov	r4, r3
 8020e1c:	bb44      	cbnz	r4, 8020e70 <_malloc_r+0x88>
 8020e1e:	4629      	mov	r1, r5
 8020e20:	4630      	mov	r0, r6
 8020e22:	f7ff ffbf 	bl	8020da4 <sbrk_aligned>
 8020e26:	1c43      	adds	r3, r0, #1
 8020e28:	4604      	mov	r4, r0
 8020e2a:	d158      	bne.n	8020ede <_malloc_r+0xf6>
 8020e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8020e30:	4627      	mov	r7, r4
 8020e32:	2f00      	cmp	r7, #0
 8020e34:	d143      	bne.n	8020ebe <_malloc_r+0xd6>
 8020e36:	2c00      	cmp	r4, #0
 8020e38:	d04b      	beq.n	8020ed2 <_malloc_r+0xea>
 8020e3a:	6823      	ldr	r3, [r4, #0]
 8020e3c:	4639      	mov	r1, r7
 8020e3e:	4630      	mov	r0, r6
 8020e40:	eb04 0903 	add.w	r9, r4, r3
 8020e44:	f000 fca0 	bl	8021788 <_sbrk_r>
 8020e48:	4581      	cmp	r9, r0
 8020e4a:	d142      	bne.n	8020ed2 <_malloc_r+0xea>
 8020e4c:	6821      	ldr	r1, [r4, #0]
 8020e4e:	1a6d      	subs	r5, r5, r1
 8020e50:	4629      	mov	r1, r5
 8020e52:	4630      	mov	r0, r6
 8020e54:	f7ff ffa6 	bl	8020da4 <sbrk_aligned>
 8020e58:	3001      	adds	r0, #1
 8020e5a:	d03a      	beq.n	8020ed2 <_malloc_r+0xea>
 8020e5c:	6823      	ldr	r3, [r4, #0]
 8020e5e:	442b      	add	r3, r5
 8020e60:	6023      	str	r3, [r4, #0]
 8020e62:	f8d8 3000 	ldr.w	r3, [r8]
 8020e66:	685a      	ldr	r2, [r3, #4]
 8020e68:	bb62      	cbnz	r2, 8020ec4 <_malloc_r+0xdc>
 8020e6a:	f8c8 7000 	str.w	r7, [r8]
 8020e6e:	e00f      	b.n	8020e90 <_malloc_r+0xa8>
 8020e70:	6822      	ldr	r2, [r4, #0]
 8020e72:	1b52      	subs	r2, r2, r5
 8020e74:	d420      	bmi.n	8020eb8 <_malloc_r+0xd0>
 8020e76:	2a0b      	cmp	r2, #11
 8020e78:	d917      	bls.n	8020eaa <_malloc_r+0xc2>
 8020e7a:	1961      	adds	r1, r4, r5
 8020e7c:	42a3      	cmp	r3, r4
 8020e7e:	6025      	str	r5, [r4, #0]
 8020e80:	bf18      	it	ne
 8020e82:	6059      	strne	r1, [r3, #4]
 8020e84:	6863      	ldr	r3, [r4, #4]
 8020e86:	bf08      	it	eq
 8020e88:	f8c8 1000 	streq.w	r1, [r8]
 8020e8c:	5162      	str	r2, [r4, r5]
 8020e8e:	604b      	str	r3, [r1, #4]
 8020e90:	4630      	mov	r0, r6
 8020e92:	f000 f82f 	bl	8020ef4 <__malloc_unlock>
 8020e96:	f104 000b 	add.w	r0, r4, #11
 8020e9a:	1d23      	adds	r3, r4, #4
 8020e9c:	f020 0007 	bic.w	r0, r0, #7
 8020ea0:	1ac2      	subs	r2, r0, r3
 8020ea2:	bf1c      	itt	ne
 8020ea4:	1a1b      	subne	r3, r3, r0
 8020ea6:	50a3      	strne	r3, [r4, r2]
 8020ea8:	e7af      	b.n	8020e0a <_malloc_r+0x22>
 8020eaa:	6862      	ldr	r2, [r4, #4]
 8020eac:	42a3      	cmp	r3, r4
 8020eae:	bf0c      	ite	eq
 8020eb0:	f8c8 2000 	streq.w	r2, [r8]
 8020eb4:	605a      	strne	r2, [r3, #4]
 8020eb6:	e7eb      	b.n	8020e90 <_malloc_r+0xa8>
 8020eb8:	4623      	mov	r3, r4
 8020eba:	6864      	ldr	r4, [r4, #4]
 8020ebc:	e7ae      	b.n	8020e1c <_malloc_r+0x34>
 8020ebe:	463c      	mov	r4, r7
 8020ec0:	687f      	ldr	r7, [r7, #4]
 8020ec2:	e7b6      	b.n	8020e32 <_malloc_r+0x4a>
 8020ec4:	461a      	mov	r2, r3
 8020ec6:	685b      	ldr	r3, [r3, #4]
 8020ec8:	42a3      	cmp	r3, r4
 8020eca:	d1fb      	bne.n	8020ec4 <_malloc_r+0xdc>
 8020ecc:	2300      	movs	r3, #0
 8020ece:	6053      	str	r3, [r2, #4]
 8020ed0:	e7de      	b.n	8020e90 <_malloc_r+0xa8>
 8020ed2:	230c      	movs	r3, #12
 8020ed4:	6033      	str	r3, [r6, #0]
 8020ed6:	4630      	mov	r0, r6
 8020ed8:	f000 f80c 	bl	8020ef4 <__malloc_unlock>
 8020edc:	e794      	b.n	8020e08 <_malloc_r+0x20>
 8020ede:	6005      	str	r5, [r0, #0]
 8020ee0:	e7d6      	b.n	8020e90 <_malloc_r+0xa8>
 8020ee2:	bf00      	nop
 8020ee4:	20022f9c 	.word	0x20022f9c

08020ee8 <__malloc_lock>:
 8020ee8:	4801      	ldr	r0, [pc, #4]	@ (8020ef0 <__malloc_lock+0x8>)
 8020eea:	f7ff beda 	b.w	8020ca2 <__retarget_lock_acquire_recursive>
 8020eee:	bf00      	nop
 8020ef0:	20022f94 	.word	0x20022f94

08020ef4 <__malloc_unlock>:
 8020ef4:	4801      	ldr	r0, [pc, #4]	@ (8020efc <__malloc_unlock+0x8>)
 8020ef6:	f7ff bed5 	b.w	8020ca4 <__retarget_lock_release_recursive>
 8020efa:	bf00      	nop
 8020efc:	20022f94 	.word	0x20022f94

08020f00 <__sfputc_r>:
 8020f00:	6893      	ldr	r3, [r2, #8]
 8020f02:	3b01      	subs	r3, #1
 8020f04:	2b00      	cmp	r3, #0
 8020f06:	b410      	push	{r4}
 8020f08:	6093      	str	r3, [r2, #8]
 8020f0a:	da08      	bge.n	8020f1e <__sfputc_r+0x1e>
 8020f0c:	6994      	ldr	r4, [r2, #24]
 8020f0e:	42a3      	cmp	r3, r4
 8020f10:	db01      	blt.n	8020f16 <__sfputc_r+0x16>
 8020f12:	290a      	cmp	r1, #10
 8020f14:	d103      	bne.n	8020f1e <__sfputc_r+0x1e>
 8020f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020f1a:	f7ff bdaa 	b.w	8020a72 <__swbuf_r>
 8020f1e:	6813      	ldr	r3, [r2, #0]
 8020f20:	1c58      	adds	r0, r3, #1
 8020f22:	6010      	str	r0, [r2, #0]
 8020f24:	7019      	strb	r1, [r3, #0]
 8020f26:	4608      	mov	r0, r1
 8020f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020f2c:	4770      	bx	lr

08020f2e <__sfputs_r>:
 8020f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f30:	4606      	mov	r6, r0
 8020f32:	460f      	mov	r7, r1
 8020f34:	4614      	mov	r4, r2
 8020f36:	18d5      	adds	r5, r2, r3
 8020f38:	42ac      	cmp	r4, r5
 8020f3a:	d101      	bne.n	8020f40 <__sfputs_r+0x12>
 8020f3c:	2000      	movs	r0, #0
 8020f3e:	e007      	b.n	8020f50 <__sfputs_r+0x22>
 8020f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f44:	463a      	mov	r2, r7
 8020f46:	4630      	mov	r0, r6
 8020f48:	f7ff ffda 	bl	8020f00 <__sfputc_r>
 8020f4c:	1c43      	adds	r3, r0, #1
 8020f4e:	d1f3      	bne.n	8020f38 <__sfputs_r+0xa>
 8020f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020f54 <_vfiprintf_r>:
 8020f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f58:	460d      	mov	r5, r1
 8020f5a:	b09d      	sub	sp, #116	@ 0x74
 8020f5c:	4614      	mov	r4, r2
 8020f5e:	4698      	mov	r8, r3
 8020f60:	4606      	mov	r6, r0
 8020f62:	b118      	cbz	r0, 8020f6c <_vfiprintf_r+0x18>
 8020f64:	6a03      	ldr	r3, [r0, #32]
 8020f66:	b90b      	cbnz	r3, 8020f6c <_vfiprintf_r+0x18>
 8020f68:	f7ff fc92 	bl	8020890 <__sinit>
 8020f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020f6e:	07d9      	lsls	r1, r3, #31
 8020f70:	d405      	bmi.n	8020f7e <_vfiprintf_r+0x2a>
 8020f72:	89ab      	ldrh	r3, [r5, #12]
 8020f74:	059a      	lsls	r2, r3, #22
 8020f76:	d402      	bmi.n	8020f7e <_vfiprintf_r+0x2a>
 8020f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020f7a:	f7ff fe92 	bl	8020ca2 <__retarget_lock_acquire_recursive>
 8020f7e:	89ab      	ldrh	r3, [r5, #12]
 8020f80:	071b      	lsls	r3, r3, #28
 8020f82:	d501      	bpl.n	8020f88 <_vfiprintf_r+0x34>
 8020f84:	692b      	ldr	r3, [r5, #16]
 8020f86:	b99b      	cbnz	r3, 8020fb0 <_vfiprintf_r+0x5c>
 8020f88:	4629      	mov	r1, r5
 8020f8a:	4630      	mov	r0, r6
 8020f8c:	f7ff fdb0 	bl	8020af0 <__swsetup_r>
 8020f90:	b170      	cbz	r0, 8020fb0 <_vfiprintf_r+0x5c>
 8020f92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020f94:	07dc      	lsls	r4, r3, #31
 8020f96:	d504      	bpl.n	8020fa2 <_vfiprintf_r+0x4e>
 8020f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020f9c:	b01d      	add	sp, #116	@ 0x74
 8020f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fa2:	89ab      	ldrh	r3, [r5, #12]
 8020fa4:	0598      	lsls	r0, r3, #22
 8020fa6:	d4f7      	bmi.n	8020f98 <_vfiprintf_r+0x44>
 8020fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020faa:	f7ff fe7b 	bl	8020ca4 <__retarget_lock_release_recursive>
 8020fae:	e7f3      	b.n	8020f98 <_vfiprintf_r+0x44>
 8020fb0:	2300      	movs	r3, #0
 8020fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8020fb4:	2320      	movs	r3, #32
 8020fb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8020fbe:	2330      	movs	r3, #48	@ 0x30
 8020fc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021170 <_vfiprintf_r+0x21c>
 8020fc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020fc8:	f04f 0901 	mov.w	r9, #1
 8020fcc:	4623      	mov	r3, r4
 8020fce:	469a      	mov	sl, r3
 8020fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020fd4:	b10a      	cbz	r2, 8020fda <_vfiprintf_r+0x86>
 8020fd6:	2a25      	cmp	r2, #37	@ 0x25
 8020fd8:	d1f9      	bne.n	8020fce <_vfiprintf_r+0x7a>
 8020fda:	ebba 0b04 	subs.w	fp, sl, r4
 8020fde:	d00b      	beq.n	8020ff8 <_vfiprintf_r+0xa4>
 8020fe0:	465b      	mov	r3, fp
 8020fe2:	4622      	mov	r2, r4
 8020fe4:	4629      	mov	r1, r5
 8020fe6:	4630      	mov	r0, r6
 8020fe8:	f7ff ffa1 	bl	8020f2e <__sfputs_r>
 8020fec:	3001      	adds	r0, #1
 8020fee:	f000 80a7 	beq.w	8021140 <_vfiprintf_r+0x1ec>
 8020ff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020ff4:	445a      	add	r2, fp
 8020ff6:	9209      	str	r2, [sp, #36]	@ 0x24
 8020ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8020ffc:	2b00      	cmp	r3, #0
 8020ffe:	f000 809f 	beq.w	8021140 <_vfiprintf_r+0x1ec>
 8021002:	2300      	movs	r3, #0
 8021004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802100c:	f10a 0a01 	add.w	sl, sl, #1
 8021010:	9304      	str	r3, [sp, #16]
 8021012:	9307      	str	r3, [sp, #28]
 8021014:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021018:	931a      	str	r3, [sp, #104]	@ 0x68
 802101a:	4654      	mov	r4, sl
 802101c:	2205      	movs	r2, #5
 802101e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021022:	4853      	ldr	r0, [pc, #332]	@ (8021170 <_vfiprintf_r+0x21c>)
 8021024:	f7df f8f4 	bl	8000210 <memchr>
 8021028:	9a04      	ldr	r2, [sp, #16]
 802102a:	b9d8      	cbnz	r0, 8021064 <_vfiprintf_r+0x110>
 802102c:	06d1      	lsls	r1, r2, #27
 802102e:	bf44      	itt	mi
 8021030:	2320      	movmi	r3, #32
 8021032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021036:	0713      	lsls	r3, r2, #28
 8021038:	bf44      	itt	mi
 802103a:	232b      	movmi	r3, #43	@ 0x2b
 802103c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021040:	f89a 3000 	ldrb.w	r3, [sl]
 8021044:	2b2a      	cmp	r3, #42	@ 0x2a
 8021046:	d015      	beq.n	8021074 <_vfiprintf_r+0x120>
 8021048:	9a07      	ldr	r2, [sp, #28]
 802104a:	4654      	mov	r4, sl
 802104c:	2000      	movs	r0, #0
 802104e:	f04f 0c0a 	mov.w	ip, #10
 8021052:	4621      	mov	r1, r4
 8021054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021058:	3b30      	subs	r3, #48	@ 0x30
 802105a:	2b09      	cmp	r3, #9
 802105c:	d94b      	bls.n	80210f6 <_vfiprintf_r+0x1a2>
 802105e:	b1b0      	cbz	r0, 802108e <_vfiprintf_r+0x13a>
 8021060:	9207      	str	r2, [sp, #28]
 8021062:	e014      	b.n	802108e <_vfiprintf_r+0x13a>
 8021064:	eba0 0308 	sub.w	r3, r0, r8
 8021068:	fa09 f303 	lsl.w	r3, r9, r3
 802106c:	4313      	orrs	r3, r2
 802106e:	9304      	str	r3, [sp, #16]
 8021070:	46a2      	mov	sl, r4
 8021072:	e7d2      	b.n	802101a <_vfiprintf_r+0xc6>
 8021074:	9b03      	ldr	r3, [sp, #12]
 8021076:	1d19      	adds	r1, r3, #4
 8021078:	681b      	ldr	r3, [r3, #0]
 802107a:	9103      	str	r1, [sp, #12]
 802107c:	2b00      	cmp	r3, #0
 802107e:	bfbb      	ittet	lt
 8021080:	425b      	neglt	r3, r3
 8021082:	f042 0202 	orrlt.w	r2, r2, #2
 8021086:	9307      	strge	r3, [sp, #28]
 8021088:	9307      	strlt	r3, [sp, #28]
 802108a:	bfb8      	it	lt
 802108c:	9204      	strlt	r2, [sp, #16]
 802108e:	7823      	ldrb	r3, [r4, #0]
 8021090:	2b2e      	cmp	r3, #46	@ 0x2e
 8021092:	d10a      	bne.n	80210aa <_vfiprintf_r+0x156>
 8021094:	7863      	ldrb	r3, [r4, #1]
 8021096:	2b2a      	cmp	r3, #42	@ 0x2a
 8021098:	d132      	bne.n	8021100 <_vfiprintf_r+0x1ac>
 802109a:	9b03      	ldr	r3, [sp, #12]
 802109c:	1d1a      	adds	r2, r3, #4
 802109e:	681b      	ldr	r3, [r3, #0]
 80210a0:	9203      	str	r2, [sp, #12]
 80210a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80210a6:	3402      	adds	r4, #2
 80210a8:	9305      	str	r3, [sp, #20]
 80210aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021180 <_vfiprintf_r+0x22c>
 80210ae:	7821      	ldrb	r1, [r4, #0]
 80210b0:	2203      	movs	r2, #3
 80210b2:	4650      	mov	r0, sl
 80210b4:	f7df f8ac 	bl	8000210 <memchr>
 80210b8:	b138      	cbz	r0, 80210ca <_vfiprintf_r+0x176>
 80210ba:	9b04      	ldr	r3, [sp, #16]
 80210bc:	eba0 000a 	sub.w	r0, r0, sl
 80210c0:	2240      	movs	r2, #64	@ 0x40
 80210c2:	4082      	lsls	r2, r0
 80210c4:	4313      	orrs	r3, r2
 80210c6:	3401      	adds	r4, #1
 80210c8:	9304      	str	r3, [sp, #16]
 80210ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80210ce:	4829      	ldr	r0, [pc, #164]	@ (8021174 <_vfiprintf_r+0x220>)
 80210d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80210d4:	2206      	movs	r2, #6
 80210d6:	f7df f89b 	bl	8000210 <memchr>
 80210da:	2800      	cmp	r0, #0
 80210dc:	d03f      	beq.n	802115e <_vfiprintf_r+0x20a>
 80210de:	4b26      	ldr	r3, [pc, #152]	@ (8021178 <_vfiprintf_r+0x224>)
 80210e0:	bb1b      	cbnz	r3, 802112a <_vfiprintf_r+0x1d6>
 80210e2:	9b03      	ldr	r3, [sp, #12]
 80210e4:	3307      	adds	r3, #7
 80210e6:	f023 0307 	bic.w	r3, r3, #7
 80210ea:	3308      	adds	r3, #8
 80210ec:	9303      	str	r3, [sp, #12]
 80210ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80210f0:	443b      	add	r3, r7
 80210f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80210f4:	e76a      	b.n	8020fcc <_vfiprintf_r+0x78>
 80210f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80210fa:	460c      	mov	r4, r1
 80210fc:	2001      	movs	r0, #1
 80210fe:	e7a8      	b.n	8021052 <_vfiprintf_r+0xfe>
 8021100:	2300      	movs	r3, #0
 8021102:	3401      	adds	r4, #1
 8021104:	9305      	str	r3, [sp, #20]
 8021106:	4619      	mov	r1, r3
 8021108:	f04f 0c0a 	mov.w	ip, #10
 802110c:	4620      	mov	r0, r4
 802110e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021112:	3a30      	subs	r2, #48	@ 0x30
 8021114:	2a09      	cmp	r2, #9
 8021116:	d903      	bls.n	8021120 <_vfiprintf_r+0x1cc>
 8021118:	2b00      	cmp	r3, #0
 802111a:	d0c6      	beq.n	80210aa <_vfiprintf_r+0x156>
 802111c:	9105      	str	r1, [sp, #20]
 802111e:	e7c4      	b.n	80210aa <_vfiprintf_r+0x156>
 8021120:	fb0c 2101 	mla	r1, ip, r1, r2
 8021124:	4604      	mov	r4, r0
 8021126:	2301      	movs	r3, #1
 8021128:	e7f0      	b.n	802110c <_vfiprintf_r+0x1b8>
 802112a:	ab03      	add	r3, sp, #12
 802112c:	9300      	str	r3, [sp, #0]
 802112e:	462a      	mov	r2, r5
 8021130:	4b12      	ldr	r3, [pc, #72]	@ (802117c <_vfiprintf_r+0x228>)
 8021132:	a904      	add	r1, sp, #16
 8021134:	4630      	mov	r0, r6
 8021136:	f3af 8000 	nop.w
 802113a:	4607      	mov	r7, r0
 802113c:	1c78      	adds	r0, r7, #1
 802113e:	d1d6      	bne.n	80210ee <_vfiprintf_r+0x19a>
 8021140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021142:	07d9      	lsls	r1, r3, #31
 8021144:	d405      	bmi.n	8021152 <_vfiprintf_r+0x1fe>
 8021146:	89ab      	ldrh	r3, [r5, #12]
 8021148:	059a      	lsls	r2, r3, #22
 802114a:	d402      	bmi.n	8021152 <_vfiprintf_r+0x1fe>
 802114c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802114e:	f7ff fda9 	bl	8020ca4 <__retarget_lock_release_recursive>
 8021152:	89ab      	ldrh	r3, [r5, #12]
 8021154:	065b      	lsls	r3, r3, #25
 8021156:	f53f af1f 	bmi.w	8020f98 <_vfiprintf_r+0x44>
 802115a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802115c:	e71e      	b.n	8020f9c <_vfiprintf_r+0x48>
 802115e:	ab03      	add	r3, sp, #12
 8021160:	9300      	str	r3, [sp, #0]
 8021162:	462a      	mov	r2, r5
 8021164:	4b05      	ldr	r3, [pc, #20]	@ (802117c <_vfiprintf_r+0x228>)
 8021166:	a904      	add	r1, sp, #16
 8021168:	4630      	mov	r0, r6
 802116a:	f000 f879 	bl	8021260 <_printf_i>
 802116e:	e7e4      	b.n	802113a <_vfiprintf_r+0x1e6>
 8021170:	080264dd 	.word	0x080264dd
 8021174:	080264e7 	.word	0x080264e7
 8021178:	00000000 	.word	0x00000000
 802117c:	08020f2f 	.word	0x08020f2f
 8021180:	080264e3 	.word	0x080264e3

08021184 <_printf_common>:
 8021184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021188:	4616      	mov	r6, r2
 802118a:	4698      	mov	r8, r3
 802118c:	688a      	ldr	r2, [r1, #8]
 802118e:	690b      	ldr	r3, [r1, #16]
 8021190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021194:	4293      	cmp	r3, r2
 8021196:	bfb8      	it	lt
 8021198:	4613      	movlt	r3, r2
 802119a:	6033      	str	r3, [r6, #0]
 802119c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80211a0:	4607      	mov	r7, r0
 80211a2:	460c      	mov	r4, r1
 80211a4:	b10a      	cbz	r2, 80211aa <_printf_common+0x26>
 80211a6:	3301      	adds	r3, #1
 80211a8:	6033      	str	r3, [r6, #0]
 80211aa:	6823      	ldr	r3, [r4, #0]
 80211ac:	0699      	lsls	r1, r3, #26
 80211ae:	bf42      	ittt	mi
 80211b0:	6833      	ldrmi	r3, [r6, #0]
 80211b2:	3302      	addmi	r3, #2
 80211b4:	6033      	strmi	r3, [r6, #0]
 80211b6:	6825      	ldr	r5, [r4, #0]
 80211b8:	f015 0506 	ands.w	r5, r5, #6
 80211bc:	d106      	bne.n	80211cc <_printf_common+0x48>
 80211be:	f104 0a19 	add.w	sl, r4, #25
 80211c2:	68e3      	ldr	r3, [r4, #12]
 80211c4:	6832      	ldr	r2, [r6, #0]
 80211c6:	1a9b      	subs	r3, r3, r2
 80211c8:	42ab      	cmp	r3, r5
 80211ca:	dc26      	bgt.n	802121a <_printf_common+0x96>
 80211cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80211d0:	6822      	ldr	r2, [r4, #0]
 80211d2:	3b00      	subs	r3, #0
 80211d4:	bf18      	it	ne
 80211d6:	2301      	movne	r3, #1
 80211d8:	0692      	lsls	r2, r2, #26
 80211da:	d42b      	bmi.n	8021234 <_printf_common+0xb0>
 80211dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80211e0:	4641      	mov	r1, r8
 80211e2:	4638      	mov	r0, r7
 80211e4:	47c8      	blx	r9
 80211e6:	3001      	adds	r0, #1
 80211e8:	d01e      	beq.n	8021228 <_printf_common+0xa4>
 80211ea:	6823      	ldr	r3, [r4, #0]
 80211ec:	6922      	ldr	r2, [r4, #16]
 80211ee:	f003 0306 	and.w	r3, r3, #6
 80211f2:	2b04      	cmp	r3, #4
 80211f4:	bf02      	ittt	eq
 80211f6:	68e5      	ldreq	r5, [r4, #12]
 80211f8:	6833      	ldreq	r3, [r6, #0]
 80211fa:	1aed      	subeq	r5, r5, r3
 80211fc:	68a3      	ldr	r3, [r4, #8]
 80211fe:	bf0c      	ite	eq
 8021200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021204:	2500      	movne	r5, #0
 8021206:	4293      	cmp	r3, r2
 8021208:	bfc4      	itt	gt
 802120a:	1a9b      	subgt	r3, r3, r2
 802120c:	18ed      	addgt	r5, r5, r3
 802120e:	2600      	movs	r6, #0
 8021210:	341a      	adds	r4, #26
 8021212:	42b5      	cmp	r5, r6
 8021214:	d11a      	bne.n	802124c <_printf_common+0xc8>
 8021216:	2000      	movs	r0, #0
 8021218:	e008      	b.n	802122c <_printf_common+0xa8>
 802121a:	2301      	movs	r3, #1
 802121c:	4652      	mov	r2, sl
 802121e:	4641      	mov	r1, r8
 8021220:	4638      	mov	r0, r7
 8021222:	47c8      	blx	r9
 8021224:	3001      	adds	r0, #1
 8021226:	d103      	bne.n	8021230 <_printf_common+0xac>
 8021228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802122c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021230:	3501      	adds	r5, #1
 8021232:	e7c6      	b.n	80211c2 <_printf_common+0x3e>
 8021234:	18e1      	adds	r1, r4, r3
 8021236:	1c5a      	adds	r2, r3, #1
 8021238:	2030      	movs	r0, #48	@ 0x30
 802123a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802123e:	4422      	add	r2, r4
 8021240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021248:	3302      	adds	r3, #2
 802124a:	e7c7      	b.n	80211dc <_printf_common+0x58>
 802124c:	2301      	movs	r3, #1
 802124e:	4622      	mov	r2, r4
 8021250:	4641      	mov	r1, r8
 8021252:	4638      	mov	r0, r7
 8021254:	47c8      	blx	r9
 8021256:	3001      	adds	r0, #1
 8021258:	d0e6      	beq.n	8021228 <_printf_common+0xa4>
 802125a:	3601      	adds	r6, #1
 802125c:	e7d9      	b.n	8021212 <_printf_common+0x8e>
	...

08021260 <_printf_i>:
 8021260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021264:	7e0f      	ldrb	r7, [r1, #24]
 8021266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021268:	2f78      	cmp	r7, #120	@ 0x78
 802126a:	4691      	mov	r9, r2
 802126c:	4680      	mov	r8, r0
 802126e:	460c      	mov	r4, r1
 8021270:	469a      	mov	sl, r3
 8021272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021276:	d807      	bhi.n	8021288 <_printf_i+0x28>
 8021278:	2f62      	cmp	r7, #98	@ 0x62
 802127a:	d80a      	bhi.n	8021292 <_printf_i+0x32>
 802127c:	2f00      	cmp	r7, #0
 802127e:	f000 80d1 	beq.w	8021424 <_printf_i+0x1c4>
 8021282:	2f58      	cmp	r7, #88	@ 0x58
 8021284:	f000 80b8 	beq.w	80213f8 <_printf_i+0x198>
 8021288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802128c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021290:	e03a      	b.n	8021308 <_printf_i+0xa8>
 8021292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021296:	2b15      	cmp	r3, #21
 8021298:	d8f6      	bhi.n	8021288 <_printf_i+0x28>
 802129a:	a101      	add	r1, pc, #4	@ (adr r1, 80212a0 <_printf_i+0x40>)
 802129c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80212a0:	080212f9 	.word	0x080212f9
 80212a4:	0802130d 	.word	0x0802130d
 80212a8:	08021289 	.word	0x08021289
 80212ac:	08021289 	.word	0x08021289
 80212b0:	08021289 	.word	0x08021289
 80212b4:	08021289 	.word	0x08021289
 80212b8:	0802130d 	.word	0x0802130d
 80212bc:	08021289 	.word	0x08021289
 80212c0:	08021289 	.word	0x08021289
 80212c4:	08021289 	.word	0x08021289
 80212c8:	08021289 	.word	0x08021289
 80212cc:	0802140b 	.word	0x0802140b
 80212d0:	08021337 	.word	0x08021337
 80212d4:	080213c5 	.word	0x080213c5
 80212d8:	08021289 	.word	0x08021289
 80212dc:	08021289 	.word	0x08021289
 80212e0:	0802142d 	.word	0x0802142d
 80212e4:	08021289 	.word	0x08021289
 80212e8:	08021337 	.word	0x08021337
 80212ec:	08021289 	.word	0x08021289
 80212f0:	08021289 	.word	0x08021289
 80212f4:	080213cd 	.word	0x080213cd
 80212f8:	6833      	ldr	r3, [r6, #0]
 80212fa:	1d1a      	adds	r2, r3, #4
 80212fc:	681b      	ldr	r3, [r3, #0]
 80212fe:	6032      	str	r2, [r6, #0]
 8021300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021308:	2301      	movs	r3, #1
 802130a:	e09c      	b.n	8021446 <_printf_i+0x1e6>
 802130c:	6833      	ldr	r3, [r6, #0]
 802130e:	6820      	ldr	r0, [r4, #0]
 8021310:	1d19      	adds	r1, r3, #4
 8021312:	6031      	str	r1, [r6, #0]
 8021314:	0606      	lsls	r6, r0, #24
 8021316:	d501      	bpl.n	802131c <_printf_i+0xbc>
 8021318:	681d      	ldr	r5, [r3, #0]
 802131a:	e003      	b.n	8021324 <_printf_i+0xc4>
 802131c:	0645      	lsls	r5, r0, #25
 802131e:	d5fb      	bpl.n	8021318 <_printf_i+0xb8>
 8021320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021324:	2d00      	cmp	r5, #0
 8021326:	da03      	bge.n	8021330 <_printf_i+0xd0>
 8021328:	232d      	movs	r3, #45	@ 0x2d
 802132a:	426d      	negs	r5, r5
 802132c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021330:	4858      	ldr	r0, [pc, #352]	@ (8021494 <_printf_i+0x234>)
 8021332:	230a      	movs	r3, #10
 8021334:	e011      	b.n	802135a <_printf_i+0xfa>
 8021336:	6821      	ldr	r1, [r4, #0]
 8021338:	6833      	ldr	r3, [r6, #0]
 802133a:	0608      	lsls	r0, r1, #24
 802133c:	f853 5b04 	ldr.w	r5, [r3], #4
 8021340:	d402      	bmi.n	8021348 <_printf_i+0xe8>
 8021342:	0649      	lsls	r1, r1, #25
 8021344:	bf48      	it	mi
 8021346:	b2ad      	uxthmi	r5, r5
 8021348:	2f6f      	cmp	r7, #111	@ 0x6f
 802134a:	4852      	ldr	r0, [pc, #328]	@ (8021494 <_printf_i+0x234>)
 802134c:	6033      	str	r3, [r6, #0]
 802134e:	bf14      	ite	ne
 8021350:	230a      	movne	r3, #10
 8021352:	2308      	moveq	r3, #8
 8021354:	2100      	movs	r1, #0
 8021356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802135a:	6866      	ldr	r6, [r4, #4]
 802135c:	60a6      	str	r6, [r4, #8]
 802135e:	2e00      	cmp	r6, #0
 8021360:	db05      	blt.n	802136e <_printf_i+0x10e>
 8021362:	6821      	ldr	r1, [r4, #0]
 8021364:	432e      	orrs	r6, r5
 8021366:	f021 0104 	bic.w	r1, r1, #4
 802136a:	6021      	str	r1, [r4, #0]
 802136c:	d04b      	beq.n	8021406 <_printf_i+0x1a6>
 802136e:	4616      	mov	r6, r2
 8021370:	fbb5 f1f3 	udiv	r1, r5, r3
 8021374:	fb03 5711 	mls	r7, r3, r1, r5
 8021378:	5dc7      	ldrb	r7, [r0, r7]
 802137a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802137e:	462f      	mov	r7, r5
 8021380:	42bb      	cmp	r3, r7
 8021382:	460d      	mov	r5, r1
 8021384:	d9f4      	bls.n	8021370 <_printf_i+0x110>
 8021386:	2b08      	cmp	r3, #8
 8021388:	d10b      	bne.n	80213a2 <_printf_i+0x142>
 802138a:	6823      	ldr	r3, [r4, #0]
 802138c:	07df      	lsls	r7, r3, #31
 802138e:	d508      	bpl.n	80213a2 <_printf_i+0x142>
 8021390:	6923      	ldr	r3, [r4, #16]
 8021392:	6861      	ldr	r1, [r4, #4]
 8021394:	4299      	cmp	r1, r3
 8021396:	bfde      	ittt	le
 8021398:	2330      	movle	r3, #48	@ 0x30
 802139a:	f806 3c01 	strble.w	r3, [r6, #-1]
 802139e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80213a2:	1b92      	subs	r2, r2, r6
 80213a4:	6122      	str	r2, [r4, #16]
 80213a6:	f8cd a000 	str.w	sl, [sp]
 80213aa:	464b      	mov	r3, r9
 80213ac:	aa03      	add	r2, sp, #12
 80213ae:	4621      	mov	r1, r4
 80213b0:	4640      	mov	r0, r8
 80213b2:	f7ff fee7 	bl	8021184 <_printf_common>
 80213b6:	3001      	adds	r0, #1
 80213b8:	d14a      	bne.n	8021450 <_printf_i+0x1f0>
 80213ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213be:	b004      	add	sp, #16
 80213c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213c4:	6823      	ldr	r3, [r4, #0]
 80213c6:	f043 0320 	orr.w	r3, r3, #32
 80213ca:	6023      	str	r3, [r4, #0]
 80213cc:	4832      	ldr	r0, [pc, #200]	@ (8021498 <_printf_i+0x238>)
 80213ce:	2778      	movs	r7, #120	@ 0x78
 80213d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80213d4:	6823      	ldr	r3, [r4, #0]
 80213d6:	6831      	ldr	r1, [r6, #0]
 80213d8:	061f      	lsls	r7, r3, #24
 80213da:	f851 5b04 	ldr.w	r5, [r1], #4
 80213de:	d402      	bmi.n	80213e6 <_printf_i+0x186>
 80213e0:	065f      	lsls	r7, r3, #25
 80213e2:	bf48      	it	mi
 80213e4:	b2ad      	uxthmi	r5, r5
 80213e6:	6031      	str	r1, [r6, #0]
 80213e8:	07d9      	lsls	r1, r3, #31
 80213ea:	bf44      	itt	mi
 80213ec:	f043 0320 	orrmi.w	r3, r3, #32
 80213f0:	6023      	strmi	r3, [r4, #0]
 80213f2:	b11d      	cbz	r5, 80213fc <_printf_i+0x19c>
 80213f4:	2310      	movs	r3, #16
 80213f6:	e7ad      	b.n	8021354 <_printf_i+0xf4>
 80213f8:	4826      	ldr	r0, [pc, #152]	@ (8021494 <_printf_i+0x234>)
 80213fa:	e7e9      	b.n	80213d0 <_printf_i+0x170>
 80213fc:	6823      	ldr	r3, [r4, #0]
 80213fe:	f023 0320 	bic.w	r3, r3, #32
 8021402:	6023      	str	r3, [r4, #0]
 8021404:	e7f6      	b.n	80213f4 <_printf_i+0x194>
 8021406:	4616      	mov	r6, r2
 8021408:	e7bd      	b.n	8021386 <_printf_i+0x126>
 802140a:	6833      	ldr	r3, [r6, #0]
 802140c:	6825      	ldr	r5, [r4, #0]
 802140e:	6961      	ldr	r1, [r4, #20]
 8021410:	1d18      	adds	r0, r3, #4
 8021412:	6030      	str	r0, [r6, #0]
 8021414:	062e      	lsls	r6, r5, #24
 8021416:	681b      	ldr	r3, [r3, #0]
 8021418:	d501      	bpl.n	802141e <_printf_i+0x1be>
 802141a:	6019      	str	r1, [r3, #0]
 802141c:	e002      	b.n	8021424 <_printf_i+0x1c4>
 802141e:	0668      	lsls	r0, r5, #25
 8021420:	d5fb      	bpl.n	802141a <_printf_i+0x1ba>
 8021422:	8019      	strh	r1, [r3, #0]
 8021424:	2300      	movs	r3, #0
 8021426:	6123      	str	r3, [r4, #16]
 8021428:	4616      	mov	r6, r2
 802142a:	e7bc      	b.n	80213a6 <_printf_i+0x146>
 802142c:	6833      	ldr	r3, [r6, #0]
 802142e:	1d1a      	adds	r2, r3, #4
 8021430:	6032      	str	r2, [r6, #0]
 8021432:	681e      	ldr	r6, [r3, #0]
 8021434:	6862      	ldr	r2, [r4, #4]
 8021436:	2100      	movs	r1, #0
 8021438:	4630      	mov	r0, r6
 802143a:	f7de fee9 	bl	8000210 <memchr>
 802143e:	b108      	cbz	r0, 8021444 <_printf_i+0x1e4>
 8021440:	1b80      	subs	r0, r0, r6
 8021442:	6060      	str	r0, [r4, #4]
 8021444:	6863      	ldr	r3, [r4, #4]
 8021446:	6123      	str	r3, [r4, #16]
 8021448:	2300      	movs	r3, #0
 802144a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802144e:	e7aa      	b.n	80213a6 <_printf_i+0x146>
 8021450:	6923      	ldr	r3, [r4, #16]
 8021452:	4632      	mov	r2, r6
 8021454:	4649      	mov	r1, r9
 8021456:	4640      	mov	r0, r8
 8021458:	47d0      	blx	sl
 802145a:	3001      	adds	r0, #1
 802145c:	d0ad      	beq.n	80213ba <_printf_i+0x15a>
 802145e:	6823      	ldr	r3, [r4, #0]
 8021460:	079b      	lsls	r3, r3, #30
 8021462:	d413      	bmi.n	802148c <_printf_i+0x22c>
 8021464:	68e0      	ldr	r0, [r4, #12]
 8021466:	9b03      	ldr	r3, [sp, #12]
 8021468:	4298      	cmp	r0, r3
 802146a:	bfb8      	it	lt
 802146c:	4618      	movlt	r0, r3
 802146e:	e7a6      	b.n	80213be <_printf_i+0x15e>
 8021470:	2301      	movs	r3, #1
 8021472:	4632      	mov	r2, r6
 8021474:	4649      	mov	r1, r9
 8021476:	4640      	mov	r0, r8
 8021478:	47d0      	blx	sl
 802147a:	3001      	adds	r0, #1
 802147c:	d09d      	beq.n	80213ba <_printf_i+0x15a>
 802147e:	3501      	adds	r5, #1
 8021480:	68e3      	ldr	r3, [r4, #12]
 8021482:	9903      	ldr	r1, [sp, #12]
 8021484:	1a5b      	subs	r3, r3, r1
 8021486:	42ab      	cmp	r3, r5
 8021488:	dcf2      	bgt.n	8021470 <_printf_i+0x210>
 802148a:	e7eb      	b.n	8021464 <_printf_i+0x204>
 802148c:	2500      	movs	r5, #0
 802148e:	f104 0619 	add.w	r6, r4, #25
 8021492:	e7f5      	b.n	8021480 <_printf_i+0x220>
 8021494:	080264ee 	.word	0x080264ee
 8021498:	080264ff 	.word	0x080264ff

0802149c <__sflush_r>:
 802149c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80214a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80214a4:	0716      	lsls	r6, r2, #28
 80214a6:	4605      	mov	r5, r0
 80214a8:	460c      	mov	r4, r1
 80214aa:	d454      	bmi.n	8021556 <__sflush_r+0xba>
 80214ac:	684b      	ldr	r3, [r1, #4]
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	dc02      	bgt.n	80214b8 <__sflush_r+0x1c>
 80214b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	dd48      	ble.n	802154a <__sflush_r+0xae>
 80214b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80214ba:	2e00      	cmp	r6, #0
 80214bc:	d045      	beq.n	802154a <__sflush_r+0xae>
 80214be:	2300      	movs	r3, #0
 80214c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80214c4:	682f      	ldr	r7, [r5, #0]
 80214c6:	6a21      	ldr	r1, [r4, #32]
 80214c8:	602b      	str	r3, [r5, #0]
 80214ca:	d030      	beq.n	802152e <__sflush_r+0x92>
 80214cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80214ce:	89a3      	ldrh	r3, [r4, #12]
 80214d0:	0759      	lsls	r1, r3, #29
 80214d2:	d505      	bpl.n	80214e0 <__sflush_r+0x44>
 80214d4:	6863      	ldr	r3, [r4, #4]
 80214d6:	1ad2      	subs	r2, r2, r3
 80214d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80214da:	b10b      	cbz	r3, 80214e0 <__sflush_r+0x44>
 80214dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80214de:	1ad2      	subs	r2, r2, r3
 80214e0:	2300      	movs	r3, #0
 80214e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80214e4:	6a21      	ldr	r1, [r4, #32]
 80214e6:	4628      	mov	r0, r5
 80214e8:	47b0      	blx	r6
 80214ea:	1c43      	adds	r3, r0, #1
 80214ec:	89a3      	ldrh	r3, [r4, #12]
 80214ee:	d106      	bne.n	80214fe <__sflush_r+0x62>
 80214f0:	6829      	ldr	r1, [r5, #0]
 80214f2:	291d      	cmp	r1, #29
 80214f4:	d82b      	bhi.n	802154e <__sflush_r+0xb2>
 80214f6:	4a2a      	ldr	r2, [pc, #168]	@ (80215a0 <__sflush_r+0x104>)
 80214f8:	40ca      	lsrs	r2, r1
 80214fa:	07d6      	lsls	r6, r2, #31
 80214fc:	d527      	bpl.n	802154e <__sflush_r+0xb2>
 80214fe:	2200      	movs	r2, #0
 8021500:	6062      	str	r2, [r4, #4]
 8021502:	04d9      	lsls	r1, r3, #19
 8021504:	6922      	ldr	r2, [r4, #16]
 8021506:	6022      	str	r2, [r4, #0]
 8021508:	d504      	bpl.n	8021514 <__sflush_r+0x78>
 802150a:	1c42      	adds	r2, r0, #1
 802150c:	d101      	bne.n	8021512 <__sflush_r+0x76>
 802150e:	682b      	ldr	r3, [r5, #0]
 8021510:	b903      	cbnz	r3, 8021514 <__sflush_r+0x78>
 8021512:	6560      	str	r0, [r4, #84]	@ 0x54
 8021514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021516:	602f      	str	r7, [r5, #0]
 8021518:	b1b9      	cbz	r1, 802154a <__sflush_r+0xae>
 802151a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802151e:	4299      	cmp	r1, r3
 8021520:	d002      	beq.n	8021528 <__sflush_r+0x8c>
 8021522:	4628      	mov	r0, r5
 8021524:	f7ff fbec 	bl	8020d00 <_free_r>
 8021528:	2300      	movs	r3, #0
 802152a:	6363      	str	r3, [r4, #52]	@ 0x34
 802152c:	e00d      	b.n	802154a <__sflush_r+0xae>
 802152e:	2301      	movs	r3, #1
 8021530:	4628      	mov	r0, r5
 8021532:	47b0      	blx	r6
 8021534:	4602      	mov	r2, r0
 8021536:	1c50      	adds	r0, r2, #1
 8021538:	d1c9      	bne.n	80214ce <__sflush_r+0x32>
 802153a:	682b      	ldr	r3, [r5, #0]
 802153c:	2b00      	cmp	r3, #0
 802153e:	d0c6      	beq.n	80214ce <__sflush_r+0x32>
 8021540:	2b1d      	cmp	r3, #29
 8021542:	d001      	beq.n	8021548 <__sflush_r+0xac>
 8021544:	2b16      	cmp	r3, #22
 8021546:	d11e      	bne.n	8021586 <__sflush_r+0xea>
 8021548:	602f      	str	r7, [r5, #0]
 802154a:	2000      	movs	r0, #0
 802154c:	e022      	b.n	8021594 <__sflush_r+0xf8>
 802154e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021552:	b21b      	sxth	r3, r3
 8021554:	e01b      	b.n	802158e <__sflush_r+0xf2>
 8021556:	690f      	ldr	r7, [r1, #16]
 8021558:	2f00      	cmp	r7, #0
 802155a:	d0f6      	beq.n	802154a <__sflush_r+0xae>
 802155c:	0793      	lsls	r3, r2, #30
 802155e:	680e      	ldr	r6, [r1, #0]
 8021560:	bf08      	it	eq
 8021562:	694b      	ldreq	r3, [r1, #20]
 8021564:	600f      	str	r7, [r1, #0]
 8021566:	bf18      	it	ne
 8021568:	2300      	movne	r3, #0
 802156a:	eba6 0807 	sub.w	r8, r6, r7
 802156e:	608b      	str	r3, [r1, #8]
 8021570:	f1b8 0f00 	cmp.w	r8, #0
 8021574:	dde9      	ble.n	802154a <__sflush_r+0xae>
 8021576:	6a21      	ldr	r1, [r4, #32]
 8021578:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802157a:	4643      	mov	r3, r8
 802157c:	463a      	mov	r2, r7
 802157e:	4628      	mov	r0, r5
 8021580:	47b0      	blx	r6
 8021582:	2800      	cmp	r0, #0
 8021584:	dc08      	bgt.n	8021598 <__sflush_r+0xfc>
 8021586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802158a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802158e:	81a3      	strh	r3, [r4, #12]
 8021590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021598:	4407      	add	r7, r0
 802159a:	eba8 0800 	sub.w	r8, r8, r0
 802159e:	e7e7      	b.n	8021570 <__sflush_r+0xd4>
 80215a0:	20400001 	.word	0x20400001

080215a4 <_fflush_r>:
 80215a4:	b538      	push	{r3, r4, r5, lr}
 80215a6:	690b      	ldr	r3, [r1, #16]
 80215a8:	4605      	mov	r5, r0
 80215aa:	460c      	mov	r4, r1
 80215ac:	b913      	cbnz	r3, 80215b4 <_fflush_r+0x10>
 80215ae:	2500      	movs	r5, #0
 80215b0:	4628      	mov	r0, r5
 80215b2:	bd38      	pop	{r3, r4, r5, pc}
 80215b4:	b118      	cbz	r0, 80215be <_fflush_r+0x1a>
 80215b6:	6a03      	ldr	r3, [r0, #32]
 80215b8:	b90b      	cbnz	r3, 80215be <_fflush_r+0x1a>
 80215ba:	f7ff f969 	bl	8020890 <__sinit>
 80215be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d0f3      	beq.n	80215ae <_fflush_r+0xa>
 80215c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80215c8:	07d0      	lsls	r0, r2, #31
 80215ca:	d404      	bmi.n	80215d6 <_fflush_r+0x32>
 80215cc:	0599      	lsls	r1, r3, #22
 80215ce:	d402      	bmi.n	80215d6 <_fflush_r+0x32>
 80215d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80215d2:	f7ff fb66 	bl	8020ca2 <__retarget_lock_acquire_recursive>
 80215d6:	4628      	mov	r0, r5
 80215d8:	4621      	mov	r1, r4
 80215da:	f7ff ff5f 	bl	802149c <__sflush_r>
 80215de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80215e0:	07da      	lsls	r2, r3, #31
 80215e2:	4605      	mov	r5, r0
 80215e4:	d4e4      	bmi.n	80215b0 <_fflush_r+0xc>
 80215e6:	89a3      	ldrh	r3, [r4, #12]
 80215e8:	059b      	lsls	r3, r3, #22
 80215ea:	d4e1      	bmi.n	80215b0 <_fflush_r+0xc>
 80215ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80215ee:	f7ff fb59 	bl	8020ca4 <__retarget_lock_release_recursive>
 80215f2:	e7dd      	b.n	80215b0 <_fflush_r+0xc>

080215f4 <fiprintf>:
 80215f4:	b40e      	push	{r1, r2, r3}
 80215f6:	b503      	push	{r0, r1, lr}
 80215f8:	4601      	mov	r1, r0
 80215fa:	ab03      	add	r3, sp, #12
 80215fc:	4805      	ldr	r0, [pc, #20]	@ (8021614 <fiprintf+0x20>)
 80215fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8021602:	6800      	ldr	r0, [r0, #0]
 8021604:	9301      	str	r3, [sp, #4]
 8021606:	f7ff fca5 	bl	8020f54 <_vfiprintf_r>
 802160a:	b002      	add	sp, #8
 802160c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021610:	b003      	add	sp, #12
 8021612:	4770      	bx	lr
 8021614:	20000080 	.word	0x20000080

08021618 <__swhatbuf_r>:
 8021618:	b570      	push	{r4, r5, r6, lr}
 802161a:	460c      	mov	r4, r1
 802161c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021620:	2900      	cmp	r1, #0
 8021622:	b096      	sub	sp, #88	@ 0x58
 8021624:	4615      	mov	r5, r2
 8021626:	461e      	mov	r6, r3
 8021628:	da0d      	bge.n	8021646 <__swhatbuf_r+0x2e>
 802162a:	89a3      	ldrh	r3, [r4, #12]
 802162c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021630:	f04f 0100 	mov.w	r1, #0
 8021634:	bf14      	ite	ne
 8021636:	2340      	movne	r3, #64	@ 0x40
 8021638:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802163c:	2000      	movs	r0, #0
 802163e:	6031      	str	r1, [r6, #0]
 8021640:	602b      	str	r3, [r5, #0]
 8021642:	b016      	add	sp, #88	@ 0x58
 8021644:	bd70      	pop	{r4, r5, r6, pc}
 8021646:	466a      	mov	r2, sp
 8021648:	f000 f87c 	bl	8021744 <_fstat_r>
 802164c:	2800      	cmp	r0, #0
 802164e:	dbec      	blt.n	802162a <__swhatbuf_r+0x12>
 8021650:	9901      	ldr	r1, [sp, #4]
 8021652:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021656:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802165a:	4259      	negs	r1, r3
 802165c:	4159      	adcs	r1, r3
 802165e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021662:	e7eb      	b.n	802163c <__swhatbuf_r+0x24>

08021664 <__smakebuf_r>:
 8021664:	898b      	ldrh	r3, [r1, #12]
 8021666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021668:	079d      	lsls	r5, r3, #30
 802166a:	4606      	mov	r6, r0
 802166c:	460c      	mov	r4, r1
 802166e:	d507      	bpl.n	8021680 <__smakebuf_r+0x1c>
 8021670:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021674:	6023      	str	r3, [r4, #0]
 8021676:	6123      	str	r3, [r4, #16]
 8021678:	2301      	movs	r3, #1
 802167a:	6163      	str	r3, [r4, #20]
 802167c:	b003      	add	sp, #12
 802167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021680:	ab01      	add	r3, sp, #4
 8021682:	466a      	mov	r2, sp
 8021684:	f7ff ffc8 	bl	8021618 <__swhatbuf_r>
 8021688:	9f00      	ldr	r7, [sp, #0]
 802168a:	4605      	mov	r5, r0
 802168c:	4639      	mov	r1, r7
 802168e:	4630      	mov	r0, r6
 8021690:	f7ff fbaa 	bl	8020de8 <_malloc_r>
 8021694:	b948      	cbnz	r0, 80216aa <__smakebuf_r+0x46>
 8021696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802169a:	059a      	lsls	r2, r3, #22
 802169c:	d4ee      	bmi.n	802167c <__smakebuf_r+0x18>
 802169e:	f023 0303 	bic.w	r3, r3, #3
 80216a2:	f043 0302 	orr.w	r3, r3, #2
 80216a6:	81a3      	strh	r3, [r4, #12]
 80216a8:	e7e2      	b.n	8021670 <__smakebuf_r+0xc>
 80216aa:	89a3      	ldrh	r3, [r4, #12]
 80216ac:	6020      	str	r0, [r4, #0]
 80216ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80216b2:	81a3      	strh	r3, [r4, #12]
 80216b4:	9b01      	ldr	r3, [sp, #4]
 80216b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80216ba:	b15b      	cbz	r3, 80216d4 <__smakebuf_r+0x70>
 80216bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80216c0:	4630      	mov	r0, r6
 80216c2:	f000 f851 	bl	8021768 <_isatty_r>
 80216c6:	b128      	cbz	r0, 80216d4 <__smakebuf_r+0x70>
 80216c8:	89a3      	ldrh	r3, [r4, #12]
 80216ca:	f023 0303 	bic.w	r3, r3, #3
 80216ce:	f043 0301 	orr.w	r3, r3, #1
 80216d2:	81a3      	strh	r3, [r4, #12]
 80216d4:	89a3      	ldrh	r3, [r4, #12]
 80216d6:	431d      	orrs	r5, r3
 80216d8:	81a5      	strh	r5, [r4, #12]
 80216da:	e7cf      	b.n	802167c <__smakebuf_r+0x18>

080216dc <_putc_r>:
 80216dc:	b570      	push	{r4, r5, r6, lr}
 80216de:	460d      	mov	r5, r1
 80216e0:	4614      	mov	r4, r2
 80216e2:	4606      	mov	r6, r0
 80216e4:	b118      	cbz	r0, 80216ee <_putc_r+0x12>
 80216e6:	6a03      	ldr	r3, [r0, #32]
 80216e8:	b90b      	cbnz	r3, 80216ee <_putc_r+0x12>
 80216ea:	f7ff f8d1 	bl	8020890 <__sinit>
 80216ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80216f0:	07d8      	lsls	r0, r3, #31
 80216f2:	d405      	bmi.n	8021700 <_putc_r+0x24>
 80216f4:	89a3      	ldrh	r3, [r4, #12]
 80216f6:	0599      	lsls	r1, r3, #22
 80216f8:	d402      	bmi.n	8021700 <_putc_r+0x24>
 80216fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80216fc:	f7ff fad1 	bl	8020ca2 <__retarget_lock_acquire_recursive>
 8021700:	68a3      	ldr	r3, [r4, #8]
 8021702:	3b01      	subs	r3, #1
 8021704:	2b00      	cmp	r3, #0
 8021706:	60a3      	str	r3, [r4, #8]
 8021708:	da05      	bge.n	8021716 <_putc_r+0x3a>
 802170a:	69a2      	ldr	r2, [r4, #24]
 802170c:	4293      	cmp	r3, r2
 802170e:	db12      	blt.n	8021736 <_putc_r+0x5a>
 8021710:	b2eb      	uxtb	r3, r5
 8021712:	2b0a      	cmp	r3, #10
 8021714:	d00f      	beq.n	8021736 <_putc_r+0x5a>
 8021716:	6823      	ldr	r3, [r4, #0]
 8021718:	1c5a      	adds	r2, r3, #1
 802171a:	6022      	str	r2, [r4, #0]
 802171c:	701d      	strb	r5, [r3, #0]
 802171e:	b2ed      	uxtb	r5, r5
 8021720:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021722:	07da      	lsls	r2, r3, #31
 8021724:	d405      	bmi.n	8021732 <_putc_r+0x56>
 8021726:	89a3      	ldrh	r3, [r4, #12]
 8021728:	059b      	lsls	r3, r3, #22
 802172a:	d402      	bmi.n	8021732 <_putc_r+0x56>
 802172c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802172e:	f7ff fab9 	bl	8020ca4 <__retarget_lock_release_recursive>
 8021732:	4628      	mov	r0, r5
 8021734:	bd70      	pop	{r4, r5, r6, pc}
 8021736:	4629      	mov	r1, r5
 8021738:	4622      	mov	r2, r4
 802173a:	4630      	mov	r0, r6
 802173c:	f7ff f999 	bl	8020a72 <__swbuf_r>
 8021740:	4605      	mov	r5, r0
 8021742:	e7ed      	b.n	8021720 <_putc_r+0x44>

08021744 <_fstat_r>:
 8021744:	b538      	push	{r3, r4, r5, lr}
 8021746:	4d07      	ldr	r5, [pc, #28]	@ (8021764 <_fstat_r+0x20>)
 8021748:	2300      	movs	r3, #0
 802174a:	4604      	mov	r4, r0
 802174c:	4608      	mov	r0, r1
 802174e:	4611      	mov	r1, r2
 8021750:	602b      	str	r3, [r5, #0]
 8021752:	f7e0 f983 	bl	8001a5c <_fstat>
 8021756:	1c43      	adds	r3, r0, #1
 8021758:	d102      	bne.n	8021760 <_fstat_r+0x1c>
 802175a:	682b      	ldr	r3, [r5, #0]
 802175c:	b103      	cbz	r3, 8021760 <_fstat_r+0x1c>
 802175e:	6023      	str	r3, [r4, #0]
 8021760:	bd38      	pop	{r3, r4, r5, pc}
 8021762:	bf00      	nop
 8021764:	20022f90 	.word	0x20022f90

08021768 <_isatty_r>:
 8021768:	b538      	push	{r3, r4, r5, lr}
 802176a:	4d06      	ldr	r5, [pc, #24]	@ (8021784 <_isatty_r+0x1c>)
 802176c:	2300      	movs	r3, #0
 802176e:	4604      	mov	r4, r0
 8021770:	4608      	mov	r0, r1
 8021772:	602b      	str	r3, [r5, #0]
 8021774:	f7e0 f982 	bl	8001a7c <_isatty>
 8021778:	1c43      	adds	r3, r0, #1
 802177a:	d102      	bne.n	8021782 <_isatty_r+0x1a>
 802177c:	682b      	ldr	r3, [r5, #0]
 802177e:	b103      	cbz	r3, 8021782 <_isatty_r+0x1a>
 8021780:	6023      	str	r3, [r4, #0]
 8021782:	bd38      	pop	{r3, r4, r5, pc}
 8021784:	20022f90 	.word	0x20022f90

08021788 <_sbrk_r>:
 8021788:	b538      	push	{r3, r4, r5, lr}
 802178a:	4d06      	ldr	r5, [pc, #24]	@ (80217a4 <_sbrk_r+0x1c>)
 802178c:	2300      	movs	r3, #0
 802178e:	4604      	mov	r4, r0
 8021790:	4608      	mov	r0, r1
 8021792:	602b      	str	r3, [r5, #0]
 8021794:	f7e0 f98a 	bl	8001aac <_sbrk>
 8021798:	1c43      	adds	r3, r0, #1
 802179a:	d102      	bne.n	80217a2 <_sbrk_r+0x1a>
 802179c:	682b      	ldr	r3, [r5, #0]
 802179e:	b103      	cbz	r3, 80217a2 <_sbrk_r+0x1a>
 80217a0:	6023      	str	r3, [r4, #0]
 80217a2:	bd38      	pop	{r3, r4, r5, pc}
 80217a4:	20022f90 	.word	0x20022f90

080217a8 <abort>:
 80217a8:	b508      	push	{r3, lr}
 80217aa:	2006      	movs	r0, #6
 80217ac:	f000 f82c 	bl	8021808 <raise>
 80217b0:	2001      	movs	r0, #1
 80217b2:	f7e0 f91f 	bl	80019f4 <_exit>

080217b6 <_raise_r>:
 80217b6:	291f      	cmp	r1, #31
 80217b8:	b538      	push	{r3, r4, r5, lr}
 80217ba:	4605      	mov	r5, r0
 80217bc:	460c      	mov	r4, r1
 80217be:	d904      	bls.n	80217ca <_raise_r+0x14>
 80217c0:	2316      	movs	r3, #22
 80217c2:	6003      	str	r3, [r0, #0]
 80217c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80217c8:	bd38      	pop	{r3, r4, r5, pc}
 80217ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80217cc:	b112      	cbz	r2, 80217d4 <_raise_r+0x1e>
 80217ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80217d2:	b94b      	cbnz	r3, 80217e8 <_raise_r+0x32>
 80217d4:	4628      	mov	r0, r5
 80217d6:	f000 f831 	bl	802183c <_getpid_r>
 80217da:	4622      	mov	r2, r4
 80217dc:	4601      	mov	r1, r0
 80217de:	4628      	mov	r0, r5
 80217e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80217e4:	f000 b818 	b.w	8021818 <_kill_r>
 80217e8:	2b01      	cmp	r3, #1
 80217ea:	d00a      	beq.n	8021802 <_raise_r+0x4c>
 80217ec:	1c59      	adds	r1, r3, #1
 80217ee:	d103      	bne.n	80217f8 <_raise_r+0x42>
 80217f0:	2316      	movs	r3, #22
 80217f2:	6003      	str	r3, [r0, #0]
 80217f4:	2001      	movs	r0, #1
 80217f6:	e7e7      	b.n	80217c8 <_raise_r+0x12>
 80217f8:	2100      	movs	r1, #0
 80217fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80217fe:	4620      	mov	r0, r4
 8021800:	4798      	blx	r3
 8021802:	2000      	movs	r0, #0
 8021804:	e7e0      	b.n	80217c8 <_raise_r+0x12>
	...

08021808 <raise>:
 8021808:	4b02      	ldr	r3, [pc, #8]	@ (8021814 <raise+0xc>)
 802180a:	4601      	mov	r1, r0
 802180c:	6818      	ldr	r0, [r3, #0]
 802180e:	f7ff bfd2 	b.w	80217b6 <_raise_r>
 8021812:	bf00      	nop
 8021814:	20000080 	.word	0x20000080

08021818 <_kill_r>:
 8021818:	b538      	push	{r3, r4, r5, lr}
 802181a:	4d07      	ldr	r5, [pc, #28]	@ (8021838 <_kill_r+0x20>)
 802181c:	2300      	movs	r3, #0
 802181e:	4604      	mov	r4, r0
 8021820:	4608      	mov	r0, r1
 8021822:	4611      	mov	r1, r2
 8021824:	602b      	str	r3, [r5, #0]
 8021826:	f7e0 f8d3 	bl	80019d0 <_kill>
 802182a:	1c43      	adds	r3, r0, #1
 802182c:	d102      	bne.n	8021834 <_kill_r+0x1c>
 802182e:	682b      	ldr	r3, [r5, #0]
 8021830:	b103      	cbz	r3, 8021834 <_kill_r+0x1c>
 8021832:	6023      	str	r3, [r4, #0]
 8021834:	bd38      	pop	{r3, r4, r5, pc}
 8021836:	bf00      	nop
 8021838:	20022f90 	.word	0x20022f90

0802183c <_getpid_r>:
 802183c:	f7e0 b8c0 	b.w	80019c0 <_getpid>

08021840 <_init>:
 8021840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021842:	bf00      	nop
 8021844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021846:	bc08      	pop	{r3}
 8021848:	469e      	mov	lr, r3
 802184a:	4770      	bx	lr

0802184c <_fini>:
 802184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802184e:	bf00      	nop
 8021850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021852:	bc08      	pop	{r3}
 8021854:	469e      	mov	lr, r3
 8021856:	4770      	bx	lr
